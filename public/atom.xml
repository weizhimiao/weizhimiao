<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>行云流水</title>
  <subtitle>却也碎碎念念</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://weizhimiao.github.io/"/>
  <updated>2016-09-25T10:43:48.000Z</updated>
  <id>https://weizhimiao.github.io/</id>
  
  <author>
    <name>zhimiao</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>PHP安装</title>
    <link href="https://weizhimiao.github.io/2016/09/25/PHP%E5%AE%89%E8%A3%85/"/>
    <id>https://weizhimiao.github.io/2016/09/25/PHP安装/</id>
    <published>2016-09-25T14:30:00.000Z</published>
    <updated>2016-09-25T10:43:48.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://n.sinaimg.cn/games/3ece443e/20160925/php_log.png" alt="php"></p>
<a id="more"></a>
<h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><p>OS：CentOS 7.2 64</p>
<p>PHP：<a href="http://n.sinaimg.cn/games/3ece443e/20160925/php-5.6.25.tar.gz" target="_blank" rel="external">php-5.6.25</a></p>
<h2 id="编译前准备"><a href="#编译前准备" class="headerlink" title="编译前准备"></a>编译前准备</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">yum -y install libxml2 libxml2-devel</div></pre></td></tr></table></figure>
<p>libxml2,是个C语言的XML程式库，能简单方便的提供对XML文件的各种操作，并且支持XPATH查询，及部分的支持XSLT转换等功能。</p>
<h2 id="编译安装"><a href="#编译安装" class="headerlink" title="编译安装"></a>编译安装</h2><p>解压源码包<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">tar zxvf php-5.6.25.tar.gz</div></pre></td></tr></table></figure></p>
<p>进入源码包目录<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cd php-5.6.25</div></pre></td></tr></table></figure></p>
<p>编译、安装<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">./configure --prefix=/usr/local/php56 --enable-fpm --with-mysql</div><div class="line">make &amp;&amp; make install</div><div class="line">Installing shared extensions:     /usr/local/php56/lib/php/extensions/no-debug-non-zts-20131226/</div><div class="line">Installing PHP CLI binary:        /usr/local/php56/bin/</div><div class="line">Installing PHP CLI man page:      /usr/local/php56/php/man/man1/</div><div class="line">Installing PHP FPM binary:        /usr/local/php56/sbin/</div><div class="line">Installing PHP FPM config:        /usr/local/php56/etc/</div><div class="line">Installing PHP FPM man page:      /usr/local/php56/php/man/man8/</div><div class="line">Installing PHP FPM status page:   /usr/local/php56/php/php/fpm/</div><div class="line">Installing PHP CGI binary:        /usr/local/php56/bin/</div><div class="line">Installing PHP CGI man page:      /usr/local/php56/php/man/man1/</div><div class="line">Installing build environment:     /usr/local/php56/lib/php/build/</div><div class="line">Installing header files:           /usr/local/php56/include/php/</div><div class="line">Installing helper programs:       /usr/local/php56/bin/</div><div class="line">  program: phpize</div><div class="line">  program: php-config</div><div class="line">Installing man pages:             /usr/local/php56/php/man/man1/</div><div class="line">  page: phpize.1</div><div class="line">  page: php-config.1</div><div class="line">Installing PEAR environment:      /usr/local/php56/lib/php/</div><div class="line">[PEAR] Archive_Tar    - installed: 1.4.0</div><div class="line">[PEAR] Console_Getopt - installed: 1.4.1</div><div class="line">[PEAR] Structures_Graph- installed: 1.1.1</div><div class="line">[PEAR] XML_Util       - installed: 1.3.0</div><div class="line">[PEAR] PEAR           - installed: 1.10.1</div><div class="line">Wrote PEAR system config file at: /usr/local/php56/etc/pear.conf</div><div class="line">You may want to add: /usr/local/php56/lib/php to your php.ini include_path</div><div class="line">/root/php-5.6.25/build/shtool install -c ext/phar/phar.phar /usr/local/php56/bin</div><div class="line">ln -s -f phar.phar /usr/local/php56/bin/phar</div><div class="line">Installing PDO headers:           /usr/local/php56/include/php/ext/pdo/</div></pre></td></tr></table></figure></p>
<p>生成配置文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">cp php.ini-development /usr/local/php56/lib/php.ini</div><div class="line">cp /usr/local/php56/etc/php-fpm.conf.default /usr/local/php56/etc/php-fpm.conf</div></pre></td></tr></table></figure></p>
<p>查看配置文件是否已生效。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ /usr/local/php56/bin/php -r &quot;phpinfo();&quot;</div><div class="line">如果看到以下输出，则表示配置文件加载成功。</div><div class="line">Configuration File (php.ini) Path =&gt; /usr/local/php56/lib</div><div class="line">Loaded Configuration File =&gt; /usr/local/php56/lib/php.ini</div></pre></td></tr></table></figure></p>
<p>将php加入到PATH中<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">vi ~/.bash_profile</div><div class="line">#在export PATH前一行插入</div><div class="line">PATH=$PATH:/usr/local/php56/bin:/usr/local/php56/lib</div></pre></td></tr></table></figure></p>
<p>重新加载环境变量<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">source /root/.bash_profile</div></pre></td></tr></table></figure></p>
<h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">[root@iZwz97v8o84q253plfkxvfZ php56]# php -version</div><div class="line">PHP 5.6.25 (cli) (built: Sep 24 2016 23:30:43)</div><div class="line">Copyright (c) 1997-2016 The PHP Group</div><div class="line">Zend Engine v2.6.0, Copyright (c) 1998-2016 Zend Technologies</div></pre></td></tr></table></figure>
<p><strong>Tips:</strong><br>如何确定PHP当前使用的配置文件的位置？</p>
<p>php：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ /usr/local/php56/bin/php -r &quot;phpinfo();&quot;</div><div class="line">如果看到以下输出，则表示配置文件加载成功。</div><div class="line">Configuration File (php.ini) Path =&gt; /usr/local/php56/lib</div><div class="line">Loaded Configuration File =&gt; /usr/local/php56/lib/php.ini</div></pre></td></tr></table></figure></p>
<p>php-fpm:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">/usr/local/php56/sbin/php-fpm -t</div><div class="line">[25-Sep-2016 18:01:40] NOTICE: configuration file /usr/local/php56/etc/php-fpm.conf test is successful</div></pre></td></tr></table></figure></p>
<p>over~</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://n.sinaimg.cn/games/3ece443e/20160925/php_log.png&quot; alt=&quot;php&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="PHP" scheme="https://weizhimiao.github.io/categories/PHP/"/>
    
    
      <category term="PHP-FPM" scheme="https://weizhimiao.github.io/tags/PHP-FPM/"/>
    
  </entry>
  
  <entry>
    <title>Nginx安装</title>
    <link href="https://weizhimiao.github.io/2016/09/25/nginx%E5%AE%89%E8%A3%85/"/>
    <id>https://weizhimiao.github.io/2016/09/25/nginx安装/</id>
    <published>2016-09-25T13:30:00.000Z</published>
    <updated>2016-09-25T10:46:05.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://n.sinaimg.cn/games/3ece443e/20160925/nginx_log.png" alt="nginx"></p>
<a id="more"></a>
<h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><p>OS：CentOS 7.2 64</p>
<p>Nginx：<a href="http://n.sinaimg.cn/games/3ece443e/20160925/nginx-1.11.4.tar.gz" target="_blank" rel="external">nginx-1.11.4</a></p>
<h2 id="编译环境准备"><a href="#编译环境准备" class="headerlink" title="编译环境准备"></a>编译环境准备</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">yum -y install gcc pcre pcre-devel zlib zlib-devel openssl openssl-devel</div></pre></td></tr></table></figure>
<blockquote>
<p>依赖工具说明:<br>gcc 编译器<br>pcre 正则表达式工具<br>zlib 传输内容压缩<br>openssl Https支持</p>
</blockquote>
<h2 id="编译安装"><a href="#编译安装" class="headerlink" title="编译安装"></a>编译安装</h2><p>解压源码包<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">tar -zxvf nginx-1.11.4.tar.gz</div></pre></td></tr></table></figure></p>
<p>进入源码包目录<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cd nginx-1.11.4</div></pre></td></tr></table></figure></p>
<p>执行配置命令<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">./configure --prefix=/usr/local</div><div class="line">Configuration summary</div><div class="line">  + using PCRE library: /usr/local/pcre</div><div class="line">  + OpenSSL library is not used</div><div class="line">  + using system zlib library</div><div class="line"></div><div class="line">  nginx path prefix: &quot;/usr/local/nginx&quot;</div><div class="line">  nginx binary file: &quot;/usr/local/nginx/sbin/nginx&quot;</div><div class="line">  nginx modules path: &quot;/usr/local/nginx/modules&quot;</div><div class="line">  nginx configuration prefix: &quot;/usr/local/nginx/conf&quot;</div><div class="line">  nginx configuration file: &quot;/usr/local/nginx/conf/nginx.conf&quot;</div><div class="line">  nginx pid file: &quot;/usr/local/nginx/logs/nginx.pid&quot;</div><div class="line">  nginx error log file: &quot;/usr/local/nginx/logs/error.log&quot;</div><div class="line">  nginx http access log file: &quot;/usr/local/nginx/logs/access.log&quot;</div><div class="line">  nginx http client request body temporary files: &quot;client_body_temp&quot;</div><div class="line">  nginx http proxy temporary files: &quot;proxy_temp&quot;</div><div class="line">  nginx http fastcgi temporary files: &quot;fastcgi_temp&quot;</div><div class="line">  nginx http uwsgi temporary files: &quot;uwsgi_temp&quot;</div><div class="line">  nginx http scgi temporary files: &quot;scgi_temp&quot;</div></pre></td></tr></table></figure></p>
<p>执行编译安装<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">make &amp;&amp; make install</div></pre></td></tr></table></figure></p>
<h2 id="管理"><a href="#管理" class="headerlink" title="管理"></a>管理</h2><h3 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/usr/local/nginx/sbin/nginx</div></pre></td></tr></table></figure>
<h3 id="停止"><a href="#停止" class="headerlink" title="停止"></a>停止</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/usr/local/nginx/sbin/nginx -s stop</div></pre></td></tr></table></figure>
<h3 id="重启"><a href="#重启" class="headerlink" title="重启"></a>重启</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/usr/local/nginx/sbin/nginx -s reload</div></pre></td></tr></table></figure>
<h3 id="查看Nginx进程状态"><a href="#查看Nginx进程状态" class="headerlink" title="查看Nginx进程状态"></a>查看Nginx进程状态</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ps aux |grep nginx</div></pre></td></tr></table></figure>
<p>结果形如<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">root     24367  0.0  0.0  20472   604 ?        Ss   22:52   0:00 nginx: master process /usr/local/nginx/sbin/nginx</div><div class="line">nobody   24368  0.0  0.0  20900  1320 ?        S    22:52   0:00 nginx: worker process</div><div class="line">root     24370  0.0  0.0 112664   976 pts/0    S+   22:52   0:00 grep --color=auto nginx</div></pre></td></tr></table></figure></p>
<blockquote>
<p>master proccess为主进程 守护进程<br>worker proccess为工作进程, 用于响应请求</p>
</blockquote>
<h3 id="设置开机自动启动"><a href="#设置开机自动启动" class="headerlink" title="设置开机自动启动"></a>设置开机自动启动</h3><p>编辑文件 /etc/rc.d/rc.local<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">echo &quot;/usr/local/nginx/sbin/nginx&quot; &gt;&gt; /etc/rc.d/rc.local</div></pre></td></tr></table></figure></p>
<h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>启动nginx，在浏览器通过IP地址访问服务器。查看是否有响应。</p>
<p>~over</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://n.sinaimg.cn/games/3ece443e/20160925/nginx_log.png&quot; alt=&quot;nginx&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Nginx" scheme="https://weizhimiao.github.io/categories/Nginx/"/>
    
    
      <category term="Nginx安装" scheme="https://weizhimiao.github.io/tags/Nginx%E5%AE%89%E8%A3%85/"/>
    
  </entry>
  
  <entry>
    <title>MySQL编译安装</title>
    <link href="https://weizhimiao.github.io/2016/09/25/MySQL%E5%AE%89%E8%A3%85%E7%BC%96%E8%AF%91/"/>
    <id>https://weizhimiao.github.io/2016/09/25/MySQL安装编译/</id>
    <published>2016-09-25T12:30:00.000Z</published>
    <updated>2016-09-25T10:46:14.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://n.sinaimg.cn/games/3ece443e/20160925/mysql_log.png" alt="MySQL"><br><a id="more"></a></p>
<h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><p>OS：CentOS 7.2 64</p>
<p>MySQL：<a href="http://dev.mysql.com/downloads/mysql/" target="_blank" rel="external">mysql-5.7.15</a></p>
<h2 id="编译环境准备"><a href="#编译环境准备" class="headerlink" title="编译环境准备"></a>编译环境准备</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"># yum -y install make gcc-c++ cmake bison-devel ncurses-devel</div></pre></td></tr></table></figure>
<blockquote>
<p>make，Linux下非常重要的编译工具，最主要也是最基本的功能就是通过makefile文件来描述源程序之间的相互关系并自动维护编译工作。<br>gcc-c++，C++ 编译器（gcc，C编译器）<br>cmake，一个跨平台的编译自动配置工具，（作用生成makefile 文件）<br>bison-devel 一个语法分析器生成器<br>ncurses-devel，Ncurses介绍摘要:Ncurses是一个能提供功能键定义(快捷键),屏幕绘制以及基于文本终端.</p>
</blockquote>
<h3 id="ncurses"><a href="#ncurses" class="headerlink" title="ncurses"></a>ncurses</h3><p>Ncurses 提供字符终端处理库，包括面板和菜单。它提供了一套控制光标，建立窗口，改变前景背景颜色以及处理鼠标操作的函数。使用户在字符终端下编写应用程序时绕过了那些恼人的底层机制。简而言之，他是一个可以使应用程序直接控制终端屏幕显示的函数库。<br>1、yum安装<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">yum -y install ncurses-devel</div></pre></td></tr></table></figure></p>
<p>注：如果报错，包找不到，是<em>通配符没有识别，给文件名加双引号  “ncurses</em>”</p>
<p>2、源代码编译:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">下载解压</div><div class="line">cd ncurses-5.9</div><div class="line">./configure --with-shared --without-debug --without-ada --enable-overwrite</div><div class="line">make</div><div class="line">make install</div></pre></td></tr></table></figure></p>
<ul>
<li>若不安装ncurses编译MySQL时会报错</li>
<li>–without-ada 参数为设定不编译为ada绑定，因进入chroot环境不能使用ada ；–enable-overwrite参数为定义把头文件安装到/tools/include下而不是/tools/include/ncurses目录</li>
<li>–with-shared 生成共享库</li>
</ul>
<h3 id="安装cmake和bison"><a href="#安装cmake和bison" class="headerlink" title="安装cmake和bison"></a>安装cmake和bison</h3><p>mysql在5.5以后，不再使用./configure工具，进行编译安装。而使用cmake工具替代了./configure工具。cmake的具体用法参考文档cmake说明。</p>
<p>bison是一个自由软件，用于自动生成语法分析器程序，可用于所有常见的操作系统<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">yum -y install cmake</div><div class="line">yum -y install bison</div></pre></td></tr></table></figure></p>
<h2 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h2><p>解压源码包<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">tar -zxvf mysql-5.7.15.tar.gz</div></pre></td></tr></table></figure></p>
<p>进入源码包目录<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cd mysql-5.7.15</div></pre></td></tr></table></figure></p>
<p>编译<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">cmake  \</div><div class="line">-DDEFAULT_CHARSET=utf8 \</div><div class="line">-DDEFAULT_COLLATION=utf8_general_ci \</div><div class="line">-DWITH_INNOBASE_STORAGE_ENGINE=1 \</div><div class="line">-DENABLED_LOCAL_INFILE=1 \</div><div class="line">-DWITH_BOOST=/usr/local/boost</div></pre></td></tr></table></figure></p>
<p>Boost，是为C++语言标准库提供扩展的一些C++程序库的总称，，由Boost社区组织开发、维护。<br>最后一行配置，是配置boost库的，如果没有boost包，编译会报错。<br>如果之前没有安装过，可以单独安装，也可在mysql安装的时候直接下载安装，这样的话，最后一行配置修改如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">-DDOWNLOAD_BOOST=1 -DWITH_BOOST=/usr/local/boost #直接下载并安装</div></pre></td></tr></table></figure></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">make &amp;&amp; make install</div></pre></td></tr></table></figure>
<h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><h3 id="创建MySQL运行用户和用户组"><a href="#创建MySQL运行用户和用户组" class="headerlink" title="创建MySQL运行用户和用户组"></a>创建MySQL运行用户和用户组</h3><p>查看mysql用户及用户组<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">cat /etc/passwd     查看用户列表</div><div class="line">cat /etc/group      查看用户组列表</div></pre></td></tr></table></figure></p>
<p>如果没有就创建<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">groupadd mysql</div><div class="line">useradd -g mysql mysql</div></pre></td></tr></table></figure></p>
<p>修改/usr/local/mysql权限<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">chown -R mysql:mysql /usr/local/mysql</div></pre></td></tr></table></figure></p>
<p>初始化配置<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">cd /usr/local/mysql</div><div class="line">cp support-files/my-default.cnf /etc/my.cnf</div></pre></td></tr></table></figure></p>
<p>注：在启动MySQL服务时，会按照一定次序搜索my.cnf，先在/etc目录下找，找不到则会在安装目录下面找，在本例中就是 /usr/local/mysql/my.cnf，这是新版MySQL的配置文件的默认位置。</p>
<h3 id="初始化数据库并生成初始密码"><a href="#初始化数据库并生成初始密码" class="headerlink" title="初始化数据库并生成初始密码"></a>初始化数据库并生成初始密码</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/usr/local/mysql/bin/mysqld --initialize --user=mysql</div></pre></td></tr></table></figure>
<p>会生成一个初始密码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"># A temporary password is generated for root@localhost: -qeFRRlHV0jf</div></pre></td></tr></table></figure></p>
<p>密码：-qeFRRlHV0jf</p>
<h3 id="设置环境变量（使得mysql服务可以全局访问）"><a href="#设置环境变量（使得mysql服务可以全局访问）" class="headerlink" title="设置环境变量（使得mysql服务可以全局访问）"></a>设置环境变量（使得mysql服务可以全局访问）</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">vi ~/.bash_profile</div></pre></td></tr></table></figure>
<p>在修改PATH=$PATH:$HOME/bin为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">PATH=$PATH:$HOME/bin:/usr/local/mysql/bin:/usr/local/mysql/lib</div></pre></td></tr></table></figure></p>
<p>重新加载环境变量<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[root@root ~]# source /root/.bash_profile</div></pre></td></tr></table></figure></p>
<h2 id="管理"><a href="#管理" class="headerlink" title="管理"></a>管理</h2><h3 id="启动mysql"><a href="#启动mysql" class="headerlink" title="启动mysql"></a>启动mysql</h3><p>方法一：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"># 将mysql的启动服务添加到系统服务中</div><div class="line"># cp support-files/mysql.server /etc/init.d/mysql</div><div class="line"># service mysql start</div></pre></td></tr></table></figure></p>
<p>方法二：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/usr/local/mysql/bin/mysqld_safe --user=mysql &amp;</div></pre></td></tr></table></figure></p>
<h3 id="设置开机自启动"><a href="#设置开机自启动" class="headerlink" title="设置开机自启动"></a>设置开机自启动</h3><p>方法一：</p>
<p>通过chkconfig实现。</p>
<p>方法二：直接修改 rc.local 文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">echo &quot;/usr/local/mysql/bin/mysqld_safe --user=mysql &amp;&quot; &gt;&gt; /etc/rc.local</div></pre></td></tr></table></figure></p>
<h3 id="修改密码"><a href="#修改密码" class="headerlink" title="修改密码"></a>修改密码</h3><p>登录并修改初始密码（不修改密码不让你操作，就是这么任性）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"># mysql -uroot -hlocalhost -p</div><div class="line">Enter password:-qeFRRlHV0jf（初始密码）</div><div class="line"># mysql&gt; SET PASSWORD FOR &apos;root&apos;@&apos;localhost&apos; = PASSWORD(&apos;xxxxxxx&apos;);</div></pre></td></tr></table></figure></p>
<p>重新登录<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">#  mysql&gt; exit</div><div class="line">#  mysql -u root -p</div><div class="line">Enter password:</div></pre></td></tr></table></figure></p>
<p>能够登录进去，则说明MySQL安装成功。over~</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://n.sinaimg.cn/games/3ece443e/20160925/mysql_log.png&quot; alt=&quot;MySQL&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="MySQL" scheme="https://weizhimiao.github.io/categories/MySQL/"/>
    
    
  </entry>
  
  <entry>
    <title>LNMP环境安装与配置</title>
    <link href="https://weizhimiao.github.io/2016/09/25/LNMP%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AE/"/>
    <id>https://weizhimiao.github.io/2016/09/25/LNMP环境安装与配置/</id>
    <published>2016-09-25T12:30:00.000Z</published>
    <updated>2016-09-25T10:41:53.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://n.sinaimg.cn/games/3ece443e/20160925/lnmp_log.png" alt="LNMP"><br><a id="more"></a></p>
<h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h2><p>OS：CentOS 7.2 64</p>
<p>MySQL：<a href="http://dev.mysql.com/downloads/mysql/" target="_blank" rel="external">mysql-5.7.15</a></p>
<p>Nginx：<a href="http://n.sinaimg.cn/games/3ece443e/20160925/nginx-1.11.4.tar.gz" target="_blank" rel="external">nginx-1.11.4</a></p>
<p>PHP：<a href="http://n.sinaimg.cn/games/3ece443e/20160925/php-5.6.25.tar.gz" target="_blank" rel="external">php-5.6.25</a></p>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>参考MySQL、Nginx、PHP的编译安装，分别安装 MySQL、Nginx、PHP到Linux。</p>
<h2 id="整合"><a href="#整合" class="headerlink" title="整合"></a>整合</h2><h3 id="启动-php-fpm"><a href="#启动-php-fpm" class="headerlink" title="启动 php-fpm"></a>启动 php-fpm</h3><p>新建用户和用户组，<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"># groupadd www-data</div><div class="line"># useradd -g www-data www-data</div></pre></td></tr></table></figure></p>
<p>需要修改 php-fpm.conf 配置文件，确保 php-fpm 模块使用 www-data 用户和 www-data 用户组的身份运行。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">vi /usr/local/php56/etc/php-fpm.conf</div><div class="line">#找到以下内容并修改：</div><div class="line">; Unix user/group of processes</div><div class="line">; Note: The user is mandatory. If the group is not set, the default user&apos;s group</div><div class="line">;       will be used.</div><div class="line">user = www-data</div><div class="line">group = www-data</div></pre></td></tr></table></figure>
<p>修改 pid 配置，以方便我们后面根据pid管理php-fpm<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">[global]</div><div class="line">; Pid file</div><div class="line">; Note: the default prefix is /usr/local/php56/var</div><div class="line">; Default Value: none</div><div class="line">pid = run/php-fpm.pid</div></pre></td></tr></table></figure></p>
<p>PHP-FPM运行时，将会在/usr/local/php56/var/run/下生成 php-fpm.pid 文件。</p>
<p>然后启动 php-fpm 服务：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/usr/local/php56/sbin/php-fpm</div></pre></td></tr></table></figure></p>
<p>查看是否启动成功<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">ps aux | grep php</div><div class="line">root     18858  0.0  0.1 148164  3208 ?        Ss   12:38   0:00 php-fpm: master process (/usr/local/php56/etc/php-fpm.conf)</div><div class="line">www-data 18859  0.0  0.1 148164  2856 ?        S    12:38   0:00 php-fpm: pool www</div><div class="line">www-data 18860  0.0  0.1 148164  2856 ?        S    12:38   0:00 php-fpm: pool www</div><div class="line">root     18862  0.0  0.0 112664   972 pts/1    S+   12:38   0:00 grep --color=auto php</div></pre></td></tr></table></figure></p>
<p><strong>注</strong> 需要着重提醒的是，如果文件不存在，则阻止 Nginx 将请求发送到后端的 PHP-FPM 模块， 以避免遭受恶意脚本注入的攻击。<br>将 php.ini 文件中的配置项 cgi.fix_pathinfo 设置为 0 。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">vi /usr/local/php56/lib/php.ini</div><div class="line"></div><div class="line">cgi.fix_pathinfo=0</div></pre></td></tr></table></figure>
<h3 id="PHP-FPM-重要配置"><a href="#PHP-FPM-重要配置" class="headerlink" title="PHP-FPM 重要配置"></a>PHP-FPM 重要配置</h3><p>php-fpm.conf重要参数详解</p>
<ul>
<li><p>pid = run/php-fpm.pid</p>
<blockquote>
<p>pid设置，默认在安装目录中的var/run/php-fpm.pid，建议开启</p>
</blockquote>
</li>
<li><p>error_log = log/php-fpm.log</p>
<blockquote>
<p>错误日志，默认在安装目录中的var/log/php-fpm.log</p>
</blockquote>
</li>
<li><p>log_level = notice</p>
<blockquote>
<p>错误级别. 可用级别为: alert（必须立即处理）, error（错误情况）, warning（警告情况）, notice（一般重要信息）, debug（调试信息）. 默认: notice.</p>
</blockquote>
</li>
<li><p>emergency_restart_threshold = 60</p>
</li>
<li><p>emergency_restart_interval = 60s</p>
<blockquote>
<p>表示在emergency_restart_interval所设值内出现SIGSEGV或者SIGBUS错误的php-cgi进程数如果超过 emergency_restart_threshold个，php-fpm就会优雅重启。这两个选项一般保持默认值。</p>
</blockquote>
</li>
<li><p>process_control_timeout = 0</p>
<blockquote>
<p>设置子进程接受主进程复用信号的超时时间. 可用单位: s(秒), m(分), h(小时), 或者 d(天) 默认单位: s(秒). 默认值: 0.</p>
</blockquote>
</li>
<li><p>daemonize = yes</p>
<blockquote>
<p>后台执行fpm,默认值为yes，如果为了调试可以改为no。在FPM中，可以使用不同的设置来运行多个进程池。 这些设置可以针对每个进程池单独设置。</p>
</blockquote>
</li>
<li><p>listen = 127.0.0.1:9000</p>
<blockquote>
<p>fpm监听端口，即nginx中php处理的地址，一般默认值即可。可用格式为: ‘ip:port’, ‘port’, ‘/path/to/unix/socket’. 每个进程池都需要设置.</p>
</blockquote>
</li>
<li><p>listen.backlog = -1</p>
<blockquote>
<p>backlog数，-1表示无限制，由操作系统决定，此行注释掉就行。</p>
</blockquote>
</li>
<li><p>listen.allowed_clients = 127.0.0.1</p>
<blockquote>
<p>允许访问FastCGI进程的IP，设置any为不限制IP，如果要设置其他主机的nginx也能访问这台FPM进程，listen处要设置成本地可被访问的IP。默认值是any。每个地址是用逗号分隔. 如果没有设置或者为空，则允许任何服务器请求连接</p>
</blockquote>
</li>
<li><p>listen.owner = www</p>
</li>
<li>listen.group = www</li>
<li><p>listen.mode = 0666</p>
<blockquote>
<p>unix socket设置选项，如果使用tcp方式访问，这里注释即可。</p>
</blockquote>
</li>
<li><p>user = www</p>
</li>
<li><p>group = www</p>
<blockquote>
<p>启动进程的帐户和组</p>
</blockquote>
</li>
<li><p>pm = dynamic #对于专用服务器，pm可以设置为static。</p>
<blockquote>
<p>如何控制子进程，选项有static和dynamic。如果选择static，则由pm.max_children指定固定的子进程数。如果选择dynamic，则由下开参数决定：</p>
</blockquote>
</li>
<li><p>pm.max_children #</p>
<blockquote>
<p>子进程最大数</p>
</blockquote>
</li>
<li><p>pm.start_servers #</p>
<blockquote>
<p>启动时的进程数</p>
</blockquote>
</li>
<li><p>pm.min_spare_servers #</p>
<blockquote>
<p>保证空闲进程数最小值，如果空闲进程小于此值，则创建新的子进程</p>
</blockquote>
</li>
<li><p>pm.max_spare_servers #</p>
<blockquote>
<p>保证空闲进程数最大值，如果空闲进程大于此值，此进行清理</p>
</blockquote>
</li>
<li><p>pm.max_requests = 1000</p>
<blockquote>
<p>设置每个子进程重生之前服务的请求数. 对于可能存在内存泄漏的第三方模块来说是非常有用的. 如果设置为 ‘0’ 则一直接受请求. 等同于 PHP_FCGI_MAX_REQUESTS 环境变量. 默认值: 0.</p>
</blockquote>
</li>
<li><p>pm.status_path = /status</p>
<blockquote>
<p>FPM状态页面的网址. 如果没有设置, 则无法访问状态页面. 默认值: none. munin监控会使用到</p>
</blockquote>
</li>
<li><p>ping.path = /ping</p>
<blockquote>
<p>FPM监控页面的ping网址. 如果没有设置, 则无法访问ping页面. 该页面用于外部检测FPM是否存活并且可以响应请求. 请注意必须以斜线开头 (/)。</p>
</blockquote>
</li>
<li><p>ping.response = pong</p>
<blockquote>
<p>用于定义ping请求的返回相应. 返回为 HTTP 200 的 text/plain 格式文本. 默认值: pong.</p>
</blockquote>
</li>
<li><p>request_terminate_timeout = 0</p>
<blockquote>
<p>设置单个请求的超时中止时间. 该选项可能会对php.ini设置中的’max_execution_time’因为某些特殊原因没有中止运行的脚本有用. 设置为 ‘0’ 表示 ‘Off’.当经常出现502错误时可以尝试更改此选项。</p>
</blockquote>
</li>
<li><p>request_slowlog_timeout = 10s</p>
<blockquote>
<p>当一个请求该设置的超时时间后，就会将对应的PHP调用堆栈信息完整写入到慢日志中. 设置为 ‘0’ 表示 ‘Off’</p>
</blockquote>
</li>
<li><p>slowlog = log/$pool.log.slow</p>
<blockquote>
<p>慢请求的记录日志,配合request_slowlog_timeout使用</p>
</blockquote>
</li>
<li><p>rlimit_files = 1024</p>
<blockquote>
<p>设置文件打开描述符的rlimit限制. 默认值: 系统定义值默认可打开句柄是1024，可使用 ulimit -n查看，ulimit -n 2048修改。</p>
</blockquote>
</li>
<li><p>rlimit_core = 0</p>
<blockquote>
<p>设置核心rlimit最大限制值. 可用值: ‘unlimited’ 、0或者正整数. 默认值: 系统定义值.</p>
</blockquote>
</li>
<li><p>chroot =</p>
<blockquote>
<p>启动时的Chroot目录. 所定义的目录需要是绝对路径. 如果没有设置, 则chroot不被使用.</p>
</blockquote>
</li>
<li><p>chdir =</p>
<blockquote>
<p>设置启动目录，启动时会自动Chdir到该目录. 所定义的目录需要是绝对路径. 默认值: 当前目录，或者/目录（chroot时）</p>
</blockquote>
</li>
<li><p>catch_workers_output = yes</p>
<blockquote>
<p>重定向运行过程中的stdout和stderr到主要的错误日志文件中. 如果没有设置, stdout 和 stderr 将会根据FastCGI的规则被重定向到 /dev/null . 默认值: 空.</p>
</blockquote>
</li>
</ul>
<p><strong>Tips</strong> 配置完成之后可以通过 php-fpm -t 来检测配置是否基本正确。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"># /usr/local/php56/sbin/php-fpm -t</div><div class="line">[25-Sep-2016 12:58:14] NOTICE: configuration file /usr/local/php56/etc/php-fpm.conf test is successful</div></pre></td></tr></table></figure></p>
<h3 id="php-fpm管理"><a href="#php-fpm管理" class="headerlink" title="php-fpm管理"></a>php-fpm管理</h3><p>测试php-fpm配置<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">/usr/local/php/sbin/php-fpm -t</div><div class="line">/usr/local/php/sbin/php-fpm -c /usr/local/php/etc/php.ini -y /usr/local/php/etc/php-fpm.conf -t</div></pre></td></tr></table></figure></p>
<p>启动php-fpm<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">/usr/local/php/sbin/php-fpm</div><div class="line">/usr/local/php/sbin/php-fpm -c /usr/local/php/etc/php.ini -y /usr/local/php/etc/php-fpm.conf</div></pre></td></tr></table></figure></p>
<p>关闭php-fpm<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">kill -INT `cat /usr/local/php/var/run/php-fpm.pid`</div></pre></td></tr></table></figure></p>
<p>重启php-fpm<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">kill -USR2 `cat /usr/local/php/var/run/php-fpm.pid`</div></pre></td></tr></table></figure></p>
<h2 id="配置-Nginx-使其支持-PHP-应用："><a href="#配置-Nginx-使其支持-PHP-应用：" class="headerlink" title="配置 Nginx 使其支持 PHP 应用："></a>配置 Nginx 使其支持 PHP 应用：</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">vim /usr/local/nginx/conf/nginx.conf</div></pre></td></tr></table></figure>
<p>修改默认的 location 块，使其支持 .php 文件：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">location / &#123;</div><div class="line">    root   html;</div><div class="line">    index  index.php index.html index.htm;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>下一步配置来保证对于 .php 文件的请求将被传送到后端的 PHP-FPM 模块， 取消默认的 PHP 配置块的注释，并修改为下面的内容：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">location ~* \.php$ &#123;</div><div class="line">    fastcgi_index   index.php;</div><div class="line">    fastcgi_pass    127.0.0.1:9000;</div><div class="line">    include         fastcgi_params;</div><div class="line">    fastcgi_param   SCRIPT_FILENAME    $document_root$fastcgi_script_name;</div><div class="line">    fastcgi_param   SCRIPT_NAME        $fastcgi_script_name;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>重启 Nginx。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"># /usr/local/nginx/sbin/nginx -t</div><div class="line">nginx: the configuration file /usr/local/nginx/conf/nginx.conf syntax is ok</div><div class="line">nginx: configuration file /usr/local/nginx/conf/nginx.conf test is successful</div><div class="line">/usr/local/nginx/sbin/nginx -s reload</div></pre></td></tr></table></figure></p>
<p>创建测试文件。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">echo &quot;&lt;?php  phpinfo();?&gt;&quot; &gt; /usr/local/nginx/html/index.php</div></pre></td></tr></table></figure></p>
<p>打开浏览器，访问 <a href="http://ip，将会显示" target="_blank" rel="external">http://ip，将会显示</a> phpinfo() 。</p>
<h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>创建测试文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">vi mysql_conn_test.php</div></pre></td></tr></table></figure></p>
<p>输入<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line">$conn = mysql_connect(<span class="string">"localhost"</span>, <span class="string">"root"</span>, <span class="string">"123456"</span>) <span class="keyword">or</span> <span class="keyword">die</span>(<span class="string">"connect failed"</span> . mysql_error());  </div><div class="line">$sql = sprintf(<span class="string">"SHOW DATABASES;"</span>);  </div><div class="line">$result = mysql_query($sql, $conn);  </div><div class="line"><span class="keyword">while</span> ($row=mysql_fetch_array($result, MYSQL_ASSOC))&#123;</div><div class="line">  print_r($row);</div><div class="line">&#125;</div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure></p>
<p>结果如下，则说明，连接测试成功。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Array ( [Database] =&gt; information_schema ) Array ( [Database] =&gt; mysql ) Array ( [Database] =&gt; performance_schema ) Array ( [Database] =&gt; sys )</div></pre></td></tr></table></figure></p>
<p>至此，LNMP环境算是基本配置成功。</p>
<p>over~</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://n.sinaimg.cn/games/3ece443e/20160925/lnmp_log.png&quot; alt=&quot;LNMP&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="PHP" scheme="https://weizhimiao.github.io/categories/PHP/"/>
    
    
      <category term="LNMP" scheme="https://weizhimiao.github.io/tags/LNMP/"/>
    
  </entry>
  
  <entry>
    <title>GIT使用小结</title>
    <link href="https://weizhimiao.github.io/2016/09/21/GIT%E4%BD%BF%E7%94%A8%E5%B0%8F%E7%BB%93/"/>
    <id>https://weizhimiao.github.io/2016/09/21/GIT使用小结/</id>
    <published>2016-09-21T15:30:00.000Z</published>
    <updated>2016-09-23T14:33:28.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>在使用之前先明确两个概念。</p>
<ul>
<li><p>工作区（working directory）</p>
<blockquote>
<p>我们创建的文件夹</p>
</blockquote>
</li>
<li><p>版本库（Repository）</p>
<blockquote>
<p>一个工作区中隐藏的目录（.git）这个目录不算工作区<br>版本库</p>
<ul>
<li>stage，暂存区</li>
<li>master，分支</li>
</ul>
<p>日常我们进行git add操作，是将文件修改添加到了暂存区，而进行git commit操作，则是将暂存区中的修改提交至当前分支。</p>
</blockquote>
</li>
</ul>
<a id="more"></a>
<h2 id="常用操作"><a href="#常用操作" class="headerlink" title="常用操作"></a>常用操作</h2><ol>
<li><p>创建项目文件夹</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mkdir demo</div></pre></td></tr></table></figure>
</li>
<li><p>进入项目目录</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">cd demo</div><div class="line">git init（将该目录变成git可以管理的仓库（repository））</div></pre></td></tr></table></figure>
</li>
</ol>
<p>初始化后，该目录下会产生一个.git 的隐藏文件夹。</p>
<ol>
<li>添加文件到仓库<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git add 文件</div></pre></td></tr></table></figure>
</li>
</ol>
<p>添加一个文件到仓库。<br>其实，该操作作用是将文件添加至Stage暂存区。</p>
<p>  常用操作<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">git add .   <span class="comment">#将所有文件添加至 stage</span></div><div class="line">git add -u  <span class="comment">#将所有文件添加至 stage ，同时将工作区中删除的文件也从仓库中删除。</span></div></pre></td></tr></table></figure></p>
<ol>
<li>git commit  提交到版本库<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git commit -m &quot;write readme file&quot;</div></pre></td></tr></table></figure>
</li>
</ol>
<p>-m 为对本次版本提交的说明</p>
<ol>
<li><p>git status 查看当前版本库状态</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">$ mkdir git_<span class="built_in">test</span></div><div class="line">$ <span class="built_in">cd</span> git_<span class="built_in">test</span></div><div class="line">$ git init</div><div class="line"><span class="comment"># Initialized empty Git repository in /Users/zhimiao/WWW/hexo/git_test/.git/</span></div><div class="line">$ ll <span class="_">-a</span></div><div class="line"><span class="comment"># total 0</span></div><div class="line"><span class="comment"># drwxr-xr-x   3 zhimiao  staff   102B  9 23 10:25 .</span></div><div class="line"><span class="comment"># drwxr-xr-x   6 zhimiao  staff   204B  9 23 10:25 ..</span></div><div class="line"><span class="comment"># drwxr-xr-x  10 zhimiao  staff   340B  9 23 10:25 .git</span></div><div class="line">$ git status</div><div class="line"><span class="comment"># On branch master</span></div><div class="line"><span class="comment"># Initial commit</span></div><div class="line"><span class="comment"># nothing to commit (create/copy files and use "git add" to track)</span></div></pre></td></tr></table></figure>
<ul>
<li><p>git将所有的文件分为3类：已追踪的，被忽略的，和未追踪的。</p>
<ul>
<li>已追踪的（tracked）<blockquote>
<p>已追踪的文件是指已经在版本库中的文件，或者是已暂存到索引中的文件。即，一个文件通过执行git add，就会被添加到暂存区，该文件就变成一个已追踪的文件。</p>
</blockquote>
</li>
<li><p>被忽略的（ignored）</p>
<blockquote>
<p>被忽略的文件是指在版本库中被明确声明为不可见或者被忽略。一般通过在工作区新建 <code>.gitignore</code> 文件来来声明。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&gt; $ cat .gitignore</div><div class="line">.DS_Store</div><div class="line">Thumbs.db</div><div class="line">db.json</div><div class="line">*.log</div><div class="line">node_modules/</div><div class="line">public/</div><div class="line">.deploy*/</div><div class="line">&gt;</div></pre></td></tr></table></figure>
</blockquote>
</li>
<li><p>未追踪的（untracked）</p>
<blockquote>
<p>未追踪的文件是指那些不在前两类中的文件。git把工作目录下的所有文件当成一个集合，减去已经追踪的文件和忽略的文件，剩下的部分就作为未追踪的文件。</p>
</blockquote>
</li>
</ul>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">$ echo &quot;git test&quot; &gt; readme.md</div><div class="line">$ git status</div><div class="line"># On branch master</div><div class="line"># Initial commit</div><div class="line"># Untracked files:</div><div class="line">#   (use &quot;git add &lt;file&gt;...&quot; to include in what will be committed)</div><div class="line"># 	readme.md</div><div class="line"># nothing added to commit but untracked files present (use &quot;git add&quot; to track)</div><div class="line">$ git add readme.md</div><div class="line">$ git status</div><div class="line"># On branch master</div><div class="line"># Initial commit</div><div class="line"># Changes to be committed:</div><div class="line">#   (use &quot;git rm --cached &lt;file&gt;...&quot; to unstage)</div><div class="line"># 	new file:   readme.md</div><div class="line">$ git commit -m &quot;add readme file&quot;</div><div class="line"># [master (root-commit) 81c90a0] add readme file</div><div class="line">#  1 file changed, 1 insertion(+)</div><div class="line">#  create mode 100644 readme.md</div><div class="line">$ git status</div><div class="line">#  On branch master</div><div class="line">#  nothing to commit, working directory clean</div></pre></td></tr></table></figure>
</li>
<li><p>git diff 显示当前尚未缓存的改动记录</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">$ echo &quot;Second Line &quot; &gt;&gt; readme.md</div><div class="line">$ git diff</div><div class="line"># diff --git a/readme.md b/readme.md</div><div class="line"># index f6edd6e..a1e649c 100644</div><div class="line"># --- a/readme.md</div><div class="line"># +++ b/readme.md</div><div class="line"># @@ -1 +1,2 @@</div><div class="line">#  git test</div><div class="line"># +add new Line</div></pre></td></tr></table></figure>
</li>
</ol>
<p>在开头，原始文件被『–』符号标记起来，新文件被用『+++』标记。@@ 之间表示两个不同文件版本的上下文行，以减号（-）开始的行表示从原始文件删除该行以得到新文件。相反，以加号（+）开始的行表示从原始文件中添加该行以产生新文件，而以空格开始的行则表示两个版本都有的行。</p>
<ol>
<li><p>git log 记录每次commit的信息</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">$ git add readme.md</div><div class="line">$ git commit -m &quot;update&quot;</div><div class="line">$ echo &quot;third Lines;&quot; &gt;&gt; readme.md</div><div class="line">$ git add readme.md</div><div class="line">$ git commit -m &quot;update third&quot;</div><div class="line">$ git log</div><div class="line"># commit 2ba4ebfe3ccef91f0d34646f5a0e50e339ee6f7a</div><div class="line"># Author: weizhimiao &lt;532615323@qq.com&gt;</div><div class="line"># Date:   Fri Sep 23 11:21:24 2016 +0800</div><div class="line">#</div><div class="line">#     update third</div><div class="line">#</div><div class="line"># commit ed0fe412477c8ac828e450cbc319c06ac8db0445</div><div class="line"># Author: weizhimiao &lt;532615323@qq.com&gt;</div><div class="line"># Date:   Fri Sep 23 11:19:34 2016 +0800</div><div class="line">#</div><div class="line">#     update</div><div class="line">#</div><div class="line"># commit 81c90a01f972ef803bd16272e7983aa1b3e9fa9c</div><div class="line"># Author: weizhimiao &lt;532615323@qq.com&gt;</div><div class="line"># Date:   Fri Sep 23 10:42:58 2016 +0800</div><div class="line">#</div><div class="line">#     add readme file</div></pre></td></tr></table></figure>
</li>
<li><p>git reset 修改命令</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">git reset HEAD    废除本次修改，回到上次提交的状态</div><div class="line">git reset -hard [commit id]</div></pre></td></tr></table></figure>
</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">$ git reset --hard HEAD^</div><div class="line"># HEAD is now at 7563423 update</div><div class="line">$ git log   </div><div class="line"># commit ed0fe412477c8ac828e450cbc319c06ac8db0445</div><div class="line"># Author: weizhimiao &lt;532615323@qq.com&gt;</div><div class="line"># Date:   Fri Sep 23 11:19:34 2016 +0800</div><div class="line">#</div><div class="line">#     update</div><div class="line">#</div><div class="line"># commit 81c90a01f972ef803bd16272e7983aa1b3e9fa9c</div><div class="line"># Author: weizhimiao &lt;532615323@qq.com&gt;</div><div class="line"># Date:   Fri Sep 23 10:42:58 2016 +0800</div><div class="line">#</div><div class="line">#     add readme file</div><div class="line">#</div><div class="line">$ cat readme.md</div><div class="line"># git test</div><div class="line"># Second Lines;</div></pre></td></tr></table></figure>
<p>然后我们就回到了上一次提交的版本。</p>
<ol>
<li>git rm 删除所有版本库记录（慎用）</li>
</ol>
<h2 id="从远程库克隆"><a href="#从远程库克隆" class="headerlink" title="从远程库克隆"></a>从远程库克隆</h2><p>git clone 克隆一个本地库<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">$ git clone git@github.com:weizhimiao/git_test.git</div><div class="line"># Cloning into &apos;git_test&apos;...</div><div class="line"># remote: Counting objects: 3, done.</div><div class="line"># remote: Total 3 (delta 0), reused 3 (delta 0), pack-reused 0</div><div class="line"># Receiving objects: 100% (3/3), done.</div><div class="line"># Checking connectivity... done.</div><div class="line">$ ll</div><div class="line"># drwxr-xr-x  4 zhimiao  staff   136B  9 23 21:53 git_test</div><div class="line">$ cd git_test</div><div class="line">$ ll</div><div class="line"># -rw-r--r--  1 zhimiao  staff    12B  9 23 21:53 README.md</div><div class="line">$ git status</div><div class="line"># On branch master</div><div class="line"># Your branch is up-to-date with &apos;origin/master&apos;.</div><div class="line"># nothing to commit, working directory clean</div></pre></td></tr></table></figure></p>
<h2 id="关联远程库"><a href="#关联远程库" class="headerlink" title="关联远程库"></a>关联远程库</h2><blockquote>
<p>本地仓库名：git_test<br>远程仓库名：git_test<br>在本地git_test仓库下执行</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git remote add origin git@github.com:weizhimiao/git_test.git</div></pre></td></tr></table></figure>
<blockquote>
<p>weizhimiao 是github账户名<br>origin 为远程仓库的名字，git的默认叫法</p>
</blockquote>
<p>将本地所有的内容推送到远程库上<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">git push -u origin master 把本地master分支推送到远程库</div><div class="line">-u 为把本地master 分支和远程master分支关联起来，之后就可以通过以下命令进行推送了</div><div class="line">git push origin master</div></pre></td></tr></table></figure></p>
<h2 id="分享与更新项目"><a href="#分享与更新项目" class="headerlink" title="分享与更新项目"></a>分享与更新项目</h2><ol>
<li>git push origin dev  提交到远程dev分支</li>
</ol>
<ol>
<li><p>git pull origin dev  拉取远程dev分支到本地并和本地dev分支合并</p>
</li>
<li><p>git remote add origin git@github.com:weizhimiao/git_test.git  将本地仓库推送至名为test的仓库里</p>
</li>
</ol>
<h2 id="分支管理"><a href="#分支管理" class="headerlink" title="分支管理"></a>分支管理</h2><p>创建：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">$ git branch dev</div><div class="line">$ git branch</div><div class="line">#   dev</div><div class="line"># * master</div><div class="line">$ git checkout dev</div><div class="line"># Switched to branch &apos;dev&apos;</div><div class="line">#</div><div class="line">$ git branch</div><div class="line"># * dev</div><div class="line">#   master</div></pre></td></tr></table></figure></p>
<blockquote>
<p>git branch dev 创建dev分支<br>git checkout dev  切换当前分支</p>
</blockquote>
<p>等价于<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git checkout -b dev 创建并切换到dev分支</div></pre></td></tr></table></figure></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"># git branch 查看当前分支</div><div class="line"># git branch -a 查看本地和远程所有分支</div><div class="line"># git branch -r 常看远程分支</div><div class="line"># git branch -d 删除本地分支</div><div class="line"># git checkout master 用于dev分支完成工作后，切换回master 分支</div><div class="line">#</div><div class="line"># git merge 分支合并</div><div class="line"># 如当前分支是master，本地另一个分支是dev，用下面命令将dev合并到master分支</div><div class="line"># git merge dev</div></pre></td></tr></table></figure>
<h2 id="版本回退"><a href="#版本回退" class="headerlink" title="版本回退"></a>版本回退</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"># git log 查看历史纪录</div><div class="line">#</div><div class="line"># 回退到上一个版本</div><div class="line"># git reset -hard HEAD^</div><div class="line"># 或</div><div class="line"># git reset --hard [commit id]回退至指定版本号的版本</div><div class="line">#</div><div class="line">#</div><div class="line">#</div><div class="line"># git中</div><div class="line"># HEAD表示当前版本</div><div class="line"># HEAD^表示上一个版本</div><div class="line"># HEAD^^ 上上一个版本</div><div class="line"># HEAD~100 上100个版本</div><div class="line">#</div><div class="line"># git reflog 查看命令历史</div><div class="line"># 一般通过这个命令查看之前版本号</div><div class="line"># 例如：（前7个字符就是版本号的缩写）</div><div class="line">$ git reflog</div><div class="line">bb862b6 HEAD@&#123;0&#125;: merge dev: Fast-forward</div><div class="line">3223509 HEAD@&#123;1&#125;: checkout: moving from dev to master</div><div class="line">bb862b6 HEAD@&#123;2&#125;: commit: dev branch commint</div><div class="line">3223509 HEAD@&#123;3&#125;: checkout: moving from master to dev</div><div class="line">3223509 HEAD@&#123;4&#125;: checkout: moving from master to master</div><div class="line">3223509 HEAD@&#123;5&#125;: checkout: moving from dev to master</div><div class="line">3223509 HEAD@&#123;6&#125;: checkout: moving from master to dev</div><div class="line">3223509 HEAD@&#123;7&#125;: commit: add readme.md</div><div class="line">54906f2 HEAD@&#123;8&#125;: pull origin master: Merge made by the &apos;recursive&apos; strategy.</div><div class="line">7563423 HEAD@&#123;9&#125;: reset: moving to HEAD^</div><div class="line">7865e6f HEAD@&#123;10&#125;: commit: update third</div><div class="line">7563423 HEAD@&#123;11&#125;: commit: update</div><div class="line">81c90a0 HEAD@&#123;12&#125;: reset: moving to HEAD^</div><div class="line">ed0fe41 HEAD@&#123;13&#125;: reset: moving to HEAD^</div><div class="line">2ba4ebf HEAD@&#123;14&#125;: commit: update third</div><div class="line">ed0fe41 HEAD@&#123;15&#125;: commit: update</div><div class="line">81c90a0 HEAD@&#123;16&#125;: commit (initial): add readme file</div></pre></td></tr></table></figure>
<h2 id="管理修改"><a href="#管理修改" class="headerlink" title="管理修改"></a>管理修改</h2><blockquote>
<p>git diff HEAD – README.md</p>
</blockquote>
<p>查看工作区和版本库里最新版本的区别<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">$ git diff HEAD -- README.md</div><div class="line"># diff --git a/README.md b/README.md</div><div class="line"># index 9235721..62c0eaa 100644</div><div class="line"># --- a/README.md</div><div class="line"># +++ b/README.md</div><div class="line"># @@ -1 +1 @@</div><div class="line"># -First Line!</div><div class="line"># +branch dev line</div></pre></td></tr></table></figure></p>
<h2 id="撤销修改"><a href="#撤销修改" class="headerlink" title="撤销修改"></a>撤销修改</h2><ol>
<li><p>修改了工作区，想直接丢弃</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git checkout -- filename</div></pre></td></tr></table></figure>
</li>
<li><p>修改了工作区内容，同事添加到了暂存区</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ git reset HEAD filename</div><div class="line">$ git checkout -- filename</div></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="删除文件"><a href="#删除文件" class="headerlink" title="删除文件"></a>删除文件</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ git rm filename</div><div class="line">$ git commit 提交到版本库</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;概念&quot;&gt;&lt;a href=&quot;#概念&quot; class=&quot;headerlink&quot; title=&quot;概念&quot;&gt;&lt;/a&gt;概念&lt;/h2&gt;&lt;p&gt;在使用之前先明确两个概念。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;工作区（working directory）&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;我们创建的文件夹&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;版本库（Repository）&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;一个工作区中隐藏的目录（.git）这个目录不算工作区&lt;br&gt;版本库&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;stage，暂存区&lt;/li&gt;
&lt;li&gt;master，分支&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;日常我们进行git add操作，是将文件修改添加到了暂存区，而进行git commit操作，则是将暂存区中的修改提交至当前分支。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="软件工程" scheme="https://weizhimiao.github.io/categories/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/"/>
    
    
      <category term="git" scheme="https://weizhimiao.github.io/tags/git/"/>
    
      <category term="版本控制" scheme="https://weizhimiao.github.io/tags/%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6/"/>
    
  </entry>
  
  <entry>
    <title>Mac下包管理工具homebrew</title>
    <link href="https://weizhimiao.github.io/2016/09/20/Mac%E4%B8%8B%E5%8C%85%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7homebrew/"/>
    <id>https://weizhimiao.github.io/2016/09/20/Mac下包管理工具homebrew/</id>
    <published>2016-09-20T15:30:00.000Z</published>
    <updated>2016-09-20T15:09:18.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Homebrew"><a href="#Homebrew" class="headerlink" title="Homebrew"></a>Homebrew</h2><p>homebrew,一个在Mac OS上的软件包管理工具。是一款有Ruby开发的智能包管理系统.</p>
<p><a href="http://brew.sh" target="_blank" rel="external">官网地址</a></p>
<ul>
<li><p>安装：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/usr/bin/ruby <span class="_">-e</span> <span class="string">"<span class="variable">$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)</span>"</span></div></pre></td></tr></table></figure>
</li>
<li><p>功能：</p>
<blockquote>
<p>软件包管理。homebrew会将套件安装到独立目录，并将文件软连接链接到/usr/local</p>
</blockquote>
</li>
<li><p>命令格式</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">$ brew -h</div><div class="line">Example usage:</div><div class="line">  brew search [TEXT|/REGEX/]</div><div class="line">  brew (info|home|options) [FORMULA...]</div><div class="line">  brew install FORMULA...</div><div class="line">  brew update</div><div class="line">  brew upgrade [FORMULA...]</div><div class="line">  brew uninstall FORMULA...</div><div class="line">  brew list [FORMULA...]</div><div class="line">Troubleshooting:</div><div class="line">  brew config</div><div class="line">  brew doctor</div><div class="line">  brew install -vd FORMULA</div><div class="line">Brewing:</div><div class="line">  brew create [URL [--no-fetch]]</div><div class="line">  brew edit [FORMULA...]</div><div class="line">  https://github.com/Homebrew/brew/blob/master/share/doc/homebrew/Formula-Cookbook.md</div><div class="line">Further help:</div><div class="line">  man brew</div><div class="line">  brew help [COMMAND]</div><div class="line">  brew home</div></pre></td></tr></table></figure>
</li>
<li><p>示例</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ brew install wget</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="brew-cask"><a href="#brew-cask" class="headerlink" title="brew-cask"></a>brew-cask</h2><p>brew-cask,是一套建立在homebrew之上的Mac软件安装命令行工具。其与brew的区别是，后者侧重与软件套件和软件环境的配置安装。</p>
<p><a href="http://caskrom.github.io" target="_blank" rel="external">官网</a></p>
<ul>
<li><p>安装：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ brew install brew-cask</div></pre></td></tr></table></figure>
</li>
<li><p>命令格式</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">$ brew cask -h</div><div class="line">brew-cask provides a friendly homebrew-style CLI workflow for the</div><div class="line">administration of macOS applications distributed as binaries.</div><div class="line">Commands:</div><div class="line">    audit                  verifies installability of Casks</div><div class="line">    cat                    dump raw source of the given Cask to the standard output</div><div class="line">    cleanup                cleans up cached downloads and tracker symlinks</div><div class="line">    create                 creates the given Cask and opens it in an editor</div><div class="line">    doctor                 checks for configuration issues</div><div class="line">    edit                   edits the given Cask</div><div class="line">    fetch                  downloads remote application files to local cache</div><div class="line">    home                   opens the homepage of the given Cask</div><div class="line">    info                   displays information about the given Cask</div><div class="line">    install                installs the given Cask</div><div class="line">    list                   with no args, lists installed Casks; given installed Casks, lists staged files</div><div class="line">    search                 searches all known Casks</div><div class="line">    style                  checks Cask style using RuboCop</div><div class="line">    uninstall              uninstalls the given Cask</div><div class="line">    update                 a synonym for &apos;brew update&apos;</div><div class="line">    zap                    zaps all files associated with the given Cask</div><div class="line">See also &quot;man brew-cask&quot;</div></pre></td></tr></table></figure>
</li>
<li><p>示例</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ brew cask install iterm2</div></pre></td></tr></table></figure>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Homebrew&quot;&gt;&lt;a href=&quot;#Homebrew&quot; class=&quot;headerlink&quot; title=&quot;Homebrew&quot;&gt;&lt;/a&gt;Homebrew&lt;/h2&gt;&lt;p&gt;homebrew,一个在Mac OS上的软件包管理工具。是一款有Ruby开发的智能包管理系统
    
    </summary>
    
      <category term="Mac" scheme="https://weizhimiao.github.io/categories/Mac/"/>
    
    
      <category term="Mac" scheme="https://weizhimiao.github.io/tags/Mac/"/>
    
      <category term="homebrew" scheme="https://weizhimiao.github.io/tags/homebrew/"/>
    
  </entry>
  
  <entry>
    <title>Schema数据类型优化</title>
    <link href="https://weizhimiao.github.io/2016/09/19/Schema%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E4%BC%98%E5%8C%96/"/>
    <id>https://weizhimiao.github.io/2016/09/19/Schema数据类型优化/</id>
    <published>2016-09-19T10:30:00.000Z</published>
    <updated>2016-09-20T14:35:05.000Z</updated>
    
    <content type="html"><![CDATA[<p>良好的数据路逻辑设计和物理设计是高性能的基石，所以要打造一个高性能的数据库服务，在Schema设计之初就应该需要权衡各种因素。</p>
<h2 id="选择最优化的数据类型"><a href="#选择最优化的数据类型" class="headerlink" title="选择最优化的数据类型"></a>选择最优化的数据类型</h2><p>数据库支持的数据类型非常多，选择一个正确的数据类型对于获得高性能至关重要。</p>
<p>选择合适数据类型的几个原则：</p>
<ol>
<li><p>更小的通常更好<br>一般情况下，应该尽量使用可以正确数据类型的最小数据类型。但也要确保没有低估需要存储的范围。</p>
</li>
<li><p>简单就好<br>简单的数据类型的操作通常需要更少的CPU周期。例如，</p>
</li>
</ol>
<ul>
<li>整型比字符串操作代价更低</li>
<li>使用MySQL内建的数据类型（比如，date、time、datetime），比用字符串更快</li>
<li>使用整型存储一个IP地址，比用一个字符串更好</li>
</ul>
<ol>
<li>尽量避免使用NULL<br>因为如果在查询中包含有NULL的列，对MySQL来说更难优化。所以通常情况下，最好指定列为 NOT NULL。</li>
</ol>
<p><strong>TIPS：</strong><br>datetime和timstamp列都可以存储相同类型的数据（时间和日期，都可以精确到秒），然而timestamp实际只使用datetime一般的存储空间。但另一方面，timestamp允许的时间范围要小的多。</p>
<a id="more"></a>
<h2 id="基本的数据类型"><a href="#基本的数据类型" class="headerlink" title="基本的数据类型"></a>基本的数据类型</h2><ol>
<li><p>数字</p>
<ol>
<li><p>整数</p>
<ul>
<li>TINYINT (8)</li>
<li>SMALLINT (16)</li>
<li>MEDIUMINT (24)</li>
<li>INT (32)</li>
<li>BIGINT (64)</li>
</ul>
<blockquote>
<p><strong>TIPS1:</strong> 整数类型有可选的 unsigned 属性，表示不允许有负值，如果将要使用的列不会出现负值的话，加上这个属性，将会可以使正数的上限增加一倍。</p>
<p><strong>TIPS2:</strong> int(1)与int(11)，对于存储和计算来说，这两者本质是没有区别的；两者只是在MySQL的一些交互工具中略有差别（比如，MySQL命令行客户端，用来控制显示字符的个数）。</p>
</blockquote>
</li>
<li><p>实数</p>
<ul>
<li><p>作用</p>
<blockquote>
<p>存储小数</p>
<p>存储比BIGINT更大的数</p>
</blockquote>
</li>
<li><p>float</p>
</li>
<li><p>double</p>
<blockquote>
<p>float 和 double支持使用标准的浮点运算进行近似的计算。</p>
</blockquote>
</li>
<li><p>decimal</p>
<blockquote>
<p>decimal 类型用于存储精确的小数，支持精确的计算。</p>
<p>由于CPU不支持对decimal的直接计算，所以对decimal的精确计算是由MySQL服务器自己来实现。</p>
<p><strong>Tips:</strong> 因为在进行精确计算时需要额外的空间和计算开销，所以尽量只对小数才使用decimal。比如，财务数据。另外如果数据量大的话，可以考虑使用bigint代替decimal，只需将存储的货币单位根据小数的位数乘以相应的倍数即可。</p>
</blockquote>
</li>
</ul>
</li>
</ol>
</li>
<li><p>字符串</p>
<ol>
<li><p>CHAR</p>
<blockquote>
<p>char 类型是定长的：MySQL是根据定义的字符串长度分配足够的空间。<br>char，适合存储很短的字符串，或者所有值的长度都差不多的的字符串。例如，密码的md5值。<br>另外，char还适合存储经常进行变更的值，相比于vachar，char类型很少会产生碎片。所以这一类的列，会比varchar更好。</p>
</blockquote>
</li>
<li><p>VARCHAR</p>
<blockquote>
<p>varchar 类型用于存储可变长的字符串。它只使用必要的空间，所以比定长类型更节省空间。</p>
<p>varchar,需要使用一个或者两个额外的字节来存储当前字符串的长度信息；如果列的长度小于或等于255个字节，则只需要一个字节表示，否则就需要两个字节来表示。</p>
<p>下面的这些情况适合使用varchar</p>
<ol>
<li>字符串列的长度比平均长度大很多</li>
<li>列的更新很少，所以碎片不是问题</li>
<li>使用了像UTF-8这样复杂的字符集，因为该字符集中每个字符可能使用不同的字节来进行存储</li>
</ol>
</blockquote>
<p><strong>Tips:</strong><br>用varchar(5)和varchar(200)来存储 「hello」有什么区别？</p>
<p>首先两者在存储空间的开销是一样的。<br>但是，一般的列在查询时会消耗更多的内存，因为在读到这些列时MySQL通常会分配固定大小的内存块来保存内部值。<br>尤其在使用内存临时表进行排序或者其他操作时，会特别的糟糕。<br>所以最好的策略就是，<strong>分配真正需要的空间</strong>。</p>
<p><strong>Tips：</strong><br>字符串长度定义不是字节数，而是字符数。两者概念是不同的，多字节字符集会需要更多的空间存储单个字符。</p>
</li>
</ol>
</li>
<li><p>BLOB和TEXT</p>
<blockquote>
<p>两者都是为存储很大的数据而设计的字符串数据类型，不同的是两者分别采用二进制和字符方式存储。</p>
<p>MySQL在处理两个类型的值时，处理基本相同，仅有的不同是BLOB类型是以二进制格式来存储的，所以没有排序规则和字符集，而text类型有排序规则和字符集。</p>
</blockquote>
</li>
<li><p>枚举（ENUM）</p>
<blockquote>
<p>枚举可以把一些不重复的字符串存储成一个预定义的集合。<br>MySQL会在存储枚举类型时粉肠紧凑，会根据列的值的数量压缩到一个或者两个字节中。<br>MySQL会在内部将每个值在列表中的位置保存成整数，而这些『数字–字符串』的对应关系，会保存在 .frm 文件中。<br>所以当该列需要新添加一个新的枚举值时，必须添加在之前枚举列表的最后面，否则就会出现数据错乱的问题。切记。</p>
</blockquote>
</li>
<li><p>日期和时间类型</p>
<ul>
<li><p>DATETIME</p>
<blockquote>
<p>该类型能保存大范围的值，从1001年到9999年，精度为秒。他会把时间封装到YYYYMMDDHHIISS的整数中，没有时区概念。使用8个字节的存储空间。</p>
</blockquote>
</li>
<li><p>TIMESTAMP</p>
<blockquote>
<p>该类型保存了从1970-01-01 00：00：00（格林威治时间）以来的秒数。该类型使用4个字节的存储空间，所以只能表示1970到2023年，其值还具有时区的概念。</p>
</blockquote>
</li>
</ul>
</li>
<li><p>位数据类型</p>
<blockquote>
<p>存储更紧凑。但所有这些位类型，不管底层存储格式和存储方式，从技术上来说都是字符串类型。虽然用它存储数据更紧凑，但是对于大部分应用来说，最好避免使用该类型。</p>
</blockquote>
<ul>
<li><p>BIT</p>
</li>
<li><p>SET</p>
</li>
</ul>
</li>
<li><p>特殊类型的数据</p>
<blockquote>
<p>某些数据的类型并不直接和内置的类型一致。所以需要一定的转换进行存储。</p>
</blockquote>
<ul>
<li><p>低于秒级的时间戳</p>
<blockquote>
<p>低于秒级的时间需要在引用层做处理，一般可以通过存储两个或者多个列来存储（一个存储秒级的时间戳，另外的存储秒级以下的）</p>
</blockquote>
</li>
<li><p>ipv4地址</p>
<blockquote>
<p>我们常见到有人会用 varchar(15)来存错一个IP地址，IP地址实际是一个32位的无符号整数，所以应该用无符号整数来存储IP地址。MySQL提供了 INET_ATON()和 INET_NTOA() 函数在这两表示方法之间转换。</p>
</blockquote>
</li>
</ul>
</li>
</ol>
<p>love over~<br>2016-09-19</p>
<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="http://music.163.com/outchain/player?type=2&id=28947001&auto=1&height=66"></iframe>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;良好的数据路逻辑设计和物理设计是高性能的基石，所以要打造一个高性能的数据库服务，在Schema设计之初就应该需要权衡各种因素。&lt;/p&gt;
&lt;h2 id=&quot;选择最优化的数据类型&quot;&gt;&lt;a href=&quot;#选择最优化的数据类型&quot; class=&quot;headerlink&quot; title=&quot;选择最优化的数据类型&quot;&gt;&lt;/a&gt;选择最优化的数据类型&lt;/h2&gt;&lt;p&gt;数据库支持的数据类型非常多，选择一个正确的数据类型对于获得高性能至关重要。&lt;/p&gt;
&lt;p&gt;选择合适数据类型的几个原则：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;更小的通常更好&lt;br&gt;一般情况下，应该尽量使用可以正确数据类型的最小数据类型。但也要确保没有低估需要存储的范围。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;简单就好&lt;br&gt;简单的数据类型的操作通常需要更少的CPU周期。例如，&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;整型比字符串操作代价更低&lt;/li&gt;
&lt;li&gt;使用MySQL内建的数据类型（比如，date、time、datetime），比用字符串更快&lt;/li&gt;
&lt;li&gt;使用整型存储一个IP地址，比用一个字符串更好&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;尽量避免使用NULL&lt;br&gt;因为如果在查询中包含有NULL的列，对MySQL来说更难优化。所以通常情况下，最好指定列为 NOT NULL。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;TIPS：&lt;/strong&gt;&lt;br&gt;datetime和timstamp列都可以存储相同类型的数据（时间和日期，都可以精确到秒），然而timestamp实际只使用datetime一般的存储空间。但另一方面，timestamp允许的时间范围要小的多。&lt;/p&gt;
    
    </summary>
    
      <category term="MySQL" scheme="https://weizhimiao.github.io/categories/MySQL/"/>
    
    
      <category term="数据类型" scheme="https://weizhimiao.github.io/tags/%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
    
  </entry>
  
  <entry>
    <title>MySQL存储引擎概述</title>
    <link href="https://weizhimiao.github.io/2016/09/17/MySQL%E5%AD%98%E5%82%A8%E5%BC%95%E6%93%8E%E6%A6%82%E8%BF%B0/"/>
    <id>https://weizhimiao.github.io/2016/09/17/MySQL存储引擎概述/</id>
    <published>2016-09-17T15:00:00.000Z</published>
    <updated>2016-09-17T15:06:38.000Z</updated>
    
    <content type="html"><![CDATA[<p>基于存储引擎在MySQL架构中的地位，在学习和使用MySQL时我们需要对MySQL的各种存储引擎有一个大概的了解。<br>并且知道在实际项目中如何选择适合的存储引擎，以及如何实现不同存储引擎的相互切换。</p>
<a id="more"></a>
<h2 id="存储引擎分类"><a href="#存储引擎分类" class="headerlink" title="存储引擎分类"></a>存储引擎分类</h2><h3 id="InnoDB"><a href="#InnoDB" class="headerlink" title="InnoDB"></a>InnoDB</h3><p>InnoDB，是MySQL的默认事务型引擎，也是做重要、使用最广泛的存储引擎。它的性能和自动崩溃恢复特性，使得它在非事务行存储的需求中也很流行。所以除非有非常特别的原因需要使用其他的存储引擎，否则应该优先考虑InnoDB引擎。并且InnoDB作为事务型存储引擎，它通过一些机制和工具可以支持真正的热备份，而MySQL其他的存储引擎则不支持热备份。</p>
<h3 id="MyISAM"><a href="#MyISAM" class="headerlink" title="MyISAM"></a>MyISAM</h3><p>在MySQL 5.1 及之前的版本，MyISAM是MySQL默认的存储引擎。MyISAM提供大量的特性，包括全文索引、压缩、空间函数（GIS）等，但是MyISAM不支持事务和行级锁，而且有一个毫无疑问的缺陷就是崩溃后无法安全恢复。尽管MyISAM不支持事务、不支持崩溃后的安全恢复，但是对于一些只读的数据，或者表比较小，可以忍受repair（修复）操作，则依然可以继续使用MyISAM。<strong>但请不要默认使用MyISAM，而是应当默认使用InnoDB</strong></p>
<h3 id="Archive"><a href="#Archive" class="headerlink" title="Archive"></a>Archive</h3><p>Archive 存储引擎只支持INSERT 和SELECT 操作，在MySQL 5.1之前还不支持索引。Archive会缓存所有的写并利用zlib对插入的行进行压缩，所以比MyISAM表的磁盘I/O更少。但是每次select操作都需要对全表进行扫描，所以Archive表适合日志和数据采集类应用，或者一些需要更快速insert操作的场合下使用。总之，MyISAM是一个针对告诉插入和压缩做了优化的简单引擎。</p>
<h3 id="Blackhole"><a href="#Blackhole" class="headerlink" title="Blackhole"></a>Blackhole</h3><p>Blackhole引擎没有实现任何的存储机制，他会丢弃所有的插入的数据，不做任何的保存。但是服务器会记录Blackhole表的日志，所以可以用于复制数据库到备库，或者只是简单地记录到日志。这种特殊的存储引擎可以在一些特殊的复制架构和日志审核时发挥所用。</p>
<h3 id="CSV"><a href="#CSV" class="headerlink" title="CSV"></a>CSV</h3><p>CSV引擎可以将普通的CSV文件作为MySQL的表来处理，但这种表不支持索引。CSV引擎可以在数据运行是拷入或者烤出文件。可以将Excel等电子表格中的数据存储为CSV文件，然后复制到MySQL数据目录下，然后就能在MySQL中打开使用。因此，CSV引擎可以作为一种数据交换的机制，非常有用。</p>
<h3 id="Federated"><a href="#Federated" class="headerlink" title="Federated"></a>Federated</h3><p>Federated引擎是访问其他MySQL服务器的一个代理，他会创建一个到远程MySQL服务器的的客户端连接，并将查询传输到远程服务器执行，然后提取或者发送需要的数据。但是尽管该引擎看起来提供了一种很好的跨服务器的灵活性，但也经常带来问题。因此默认是禁用的。</p>
<h3 id="Memory"><a href="#Memory" class="headerlink" title="Memory"></a>Memory</h3><p>Memory表所有的数据都保存在内存中，因此Memory表的访问速度非常的快（至少要比MyISAM快一个数量级），并且不需要磁盘的I/O操作。但是Memory表在系统重启后虽然表结构会保留，但是数据会丢失。</p>
<p>Memory表支持Hash索引，因此查询操作非常快。但是MySQL表采用的表级锁，因此并发写入的性能较低。</p>
<p>Memory表的应用场景：</p>
<ul>
<li>用于查找（lookup）或者映射（mapping）表。</li>
<li>用于缓存周期性聚合数据的结果。</li>
<li>用于保存数据分析中产生的中间问题。</li>
</ul>
<p><strong>Tips：</strong><br>如果MySQL在执行查询的过程中需要使用临时表来保存中间结果，内部使用的临时表就是Memory表。如果中间结果大大超出了Memory表的限制，或者有大量的BLOB或TEXT字段，则临时表会转换成MyISAM表。</p>
<h3 id="Merge"><a href="#Merge" class="headerlink" title="Merge"></a>Merge</h3><p>Merge引擎是MyISAM的一种变种。Merge表是由多个MyISAM表合并而来的虚拟表。</p>
<h3 id="NDB"><a href="#NDB" class="headerlink" title="NDB"></a>NDB</h3><p>MySQL服务器、NDB集群引擎、以及分布式的、share-nothing的、容灾的、高可用的NDB数据库组合，被称之为MySQL集群（MySQL Cluster）。</p>
<h3 id="其他的第三方存储引擎"><a href="#其他的第三方存储引擎" class="headerlink" title="其他的第三方存储引擎"></a>其他的第三方存储引擎</h3><p>MySQL从07年开始提供了插件式的存储引擎API，从此出现了一系列为不同目的而设计的存储引擎。其中一些已经合并到MySQL服务器，但大多数还是第三方产品或者开源项目。比较有名的有：</p>
<ul>
<li>OLTP类引擎</li>
<li>面向列的存储引擎</li>
<li>社区存储引擎</li>
</ul>
<h2 id="选择合适的存储引擎的考虑因素"><a href="#选择合适的存储引擎的考虑因素" class="headerlink" title="选择合适的存储引擎的考虑因素"></a>选择合适的存储引擎的考虑因素</h2><p>不同的应用可能会根据不同的需求而采用不同的存储引擎。那么我们再为应用选择存储引擎时，通常会考虑以下几点：</p>
<ul>
<li><p>事务<br>引用是否需要事务支持。如果需要，那么InnoDB是目前最稳定且经过验证的选择。如果不需要，并且主要是select和insert操作，那么MyISAM是不错的选择。</p>
</li>
<li><p>备份<br>如果可以定期的通过关闭服务器来执行备份，那么备份因素就可以忽略。反之，如果需要支持在线热备份，那么选择InnoDB就是基本的要求。</p>
</li>
<li><p>崩溃恢复<br>相对而言，MyISAM崩溃后发生的数据毁坏的概率要比InnoDB高的多，并且恢复速度也要慢的多。所以，即使不需要事务支持，很多人也会选择InnoDB引擎。</p>
</li>
<li><p>特有的特性<br>有些应用可能需要一些存储引擎锁独有的特性或者优化，比如依赖聚簇索引的优化，或者需要对地理空间的搜索。</p>
</li>
</ul>
<p><strong>总之，如无特殊的需求和例外，统统建议选择InnoDB存储引擎。</strong></p>
<h2 id="如何转换表的存储引擎"><a href="#如何转换表的存储引擎" class="headerlink" title="如何转换表的存储引擎"></a>如何转换表的存储引擎</h2><p>有很多中方法可以转换，一般我们会使用以下三种方法：</p>
<h3 id="ALTER-TABLE"><a href="#ALTER-TABLE" class="headerlink" title="ALTER TABLE"></a>ALTER TABLE</h3><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mysql&gt;alter table mytable engine=innodb;</div></pre></td></tr></table></figure>
<p>上述语法可以适应与任何存储引擎。但是当表数据很大时，这种方法将会执行很长时间。MySQL会按行将数据从原表复制到一张新的表中。所以，在繁忙的表上执行此操作要非常小心。</p>
<h3 id="导入-导出"><a href="#导入-导出" class="headerlink" title="导入/导出"></a>导入/导出</h3><p>使用mysqldump工具将数据到出到文件，然后修改文件中create table 语句中的存储引擎的选项，（同时注意修改表名，避免在导入的时候将原表删除，造成数据丢失）。然后导入文件到数据库，这样就得到了一个原表的一个全量复制表。</p>
<h3 id="创建与查询"><a href="#创建与查询" class="headerlink" title="创建与查询"></a>创建与查询</h3><p>综合第一种方法的高效和第二种的安全。不需要导出整张表的数据，而是先创建一个新的存储引擎的表，然后利用 insert…select语法来导数据。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">mysql&gt;create table innodb_table like myisam_table;</div><div class="line">mysql&gt;alter table innodb_table engine=innodb;</div><div class="line">mysql&gt;insert into innodb_table select * from myisam_table;</div></pre></td></tr></table></figure></p>
<p>如果数据量大的话，可以考虑分批处理，并使用事务进行提交操作；<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">mysql&gt;start transaction;</div><div class="line">mysql&gt;insert into innodb_table select * from myisam_table where id between x and y;</div><div class="line">mysql&gt;commit;</div></pre></td></tr></table></figure></p>
<p>如果有必要，在操作的时候可以对原表加锁，以确保新表和原表数据一致。<br>这样操作之后也会得到一个对原表的全量复制的表，如果需要还可以删除原表。</p>
<p><strong>Tips：</strong><br>Persona Toolkit 提供了一个 pt-online-schema-change的工具（基于Facebook的在线变更技术），可以比较简单、方便的执行上述过程，避免收工操作可能会带来的错误是繁琐。。。。。。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;基于存储引擎在MySQL架构中的地位，在学习和使用MySQL时我们需要对MySQL的各种存储引擎有一个大概的了解。&lt;br&gt;并且知道在实际项目中如何选择适合的存储引擎，以及如何实现不同存储引擎的相互切换。&lt;/p&gt;
    
    </summary>
    
      <category term="MySQL" scheme="https://weizhimiao.github.io/categories/MySQL/"/>
    
    
      <category term="存储引擎" scheme="https://weizhimiao.github.io/tags/%E5%AD%98%E5%82%A8%E5%BC%95%E6%93%8E/"/>
    
  </entry>
  
  <entry>
    <title>如何查看表的相关信息</title>
    <link href="https://weizhimiao.github.io/2016/09/17/MySQL%E5%A6%82%E4%BD%95%E6%9F%A5%E7%9C%8B%E8%A1%A8%E7%9A%84%E7%9B%B8%E5%85%B3%E4%BF%A1%E6%81%AF/"/>
    <id>https://weizhimiao.github.io/2016/09/17/MySQL如何查看表的相关信息/</id>
    <published>2016-09-17T14:00:00.000Z</published>
    <updated>2016-09-17T08:42:49.000Z</updated>
    
    <content type="html"><![CDATA[<p>在文件系统中，MySQL将每个数据库（也被称为schema）保存为数据目录下的一个子目录。在创建表的时候，MySQL会在数据库子目录下创建一个和表同名的 .frm 文件对表的定义。例如，创建一个名为 mytable 的表，MySQL会在 mytable.frm 文件中保存对该表的定义。</p>
<p>通常，我们可以使用 show table status 命令来显示表的相关信息。（MySQL 5.0 + 的版本，也可以查看 INFOMATION_SCHEMA 中对应的表的信息）。<br>例如，对于MySQL数据库中的 user 表：<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">mysql&gt; show table status like 'user' \G;</div><div class="line">*************************** 1. row ***************************</div><div class="line">           Name: user</div><div class="line">         Engine: MyISAM</div><div class="line">        Version: 10</div><div class="line">     Row_format: Dynamic</div><div class="line">           Rows: 14</div><div class="line"> Avg_row_length: 63</div><div class="line">    Data_length: 952</div><div class="line">Max_data_length: 281474976710655</div><div class="line">   Index_length: 2048</div><div class="line">      Data_free: 64</div><div class="line"> Auto_increment: NULL</div><div class="line">    Create_time: 2012-12-25 14:23:08</div><div class="line">    Update_time: 2015-08-11 11:17:42</div><div class="line">     Check_time: NULL</div><div class="line">      Collation: utf8_bin</div><div class="line">       Checksum: NULL</div><div class="line"> Create_options:</div><div class="line">        Comment: Users and global privileges</div><div class="line">1 row in set (0.01 sec)</div></pre></td></tr></table></figure></p>
<a id="more"></a>
<p>下面简单介绍一下每行的含义：</p>
<ul>
<li><p>Name</p>
<blockquote>
<p>表名。</p>
</blockquote>
</li>
<li><p>Engine</p>
<blockquote>
<p>表的存储引擎。</p>
</blockquote>
</li>
<li><p>Row_format</p>
<blockquote>
<p>行的格式，对于MyISAM表，可选的值为Dynamic、Fixed、Compressed。</p>
<ul>
<li>Dynamic，表示行的长度是可变的，一般包含可变长度的字段，如varchar、blob等。</li>
<li>Fixed，行的长度是固定的，只包含固定长短的列。</li>
<li>Compressed，只在压缩表中出现，表示是被压缩的。</li>
</ul>
</blockquote>
</li>
<li><p>Rrows</p>
<blockquote>
<p>表中行数，对于MyISAM和其他的一些存储引擎该值是精确的，但对于InnoDB该值只是一个大概值。</p>
</blockquote>
</li>
<li><p>Avg_row_length</p>
<blockquote>
<p>平均每行包含的字节数</p>
</blockquote>
</li>
<li><p>Data_length</p>
<blockquote>
<p>表数据的大小(单位：字节)</p>
</blockquote>
</li>
<li><p>Max_data_length</p>
<blockquote>
<p>表数据的最大容量，该值和存储引擎有关。</p>
</blockquote>
</li>
<li><p>Index_length</p>
<blockquote>
<p>索引的大小(单位：字节)</p>
</blockquote>
</li>
<li><p>Data_free</p>
<blockquote>
<p>对于MyISAM表示已经分配但是目前没有被使用的空间。这部分空间包括之前删除的行，以及后续可以被Insert利用的行。</p>
</blockquote>
</li>
<li><p>Auto_increment</p>
<blockquote>
<p>下一个Auto_increment的值。</p>
</blockquote>
</li>
<li><p>Create_time</p>
<blockquote>
<p>表的创建时间。</p>
</blockquote>
</li>
<li><p>Update_time</p>
<blockquote>
<p>表数据的最后修改时间。</p>
</blockquote>
</li>
<li><p>Check_time</p>
<blockquote>
<p>使用check table命令或者muisamchk 工具最后一次检查表的时间。</p>
</blockquote>
</li>
<li><p>Collation</p>
<blockquote>
<p>表的默认字符集和字符列排序规则。</p>
</blockquote>
</li>
<li><p>Checksum</p>
<blockquote>
<p>如果启用，保存的是整个表的实时校验和。</p>
</blockquote>
</li>
<li><p>Create_options</p>
<blockquote>
<p>创建表时指定的其他选项。</p>
</blockquote>
</li>
<li><p>Comment</p>
<blockquote>
<p>该列包含了一些其他的额外信息。对于MyISAM表，保存的是在表创建的时候附带的注释。对于InnoDB表，该值保存的是InnoDB表空间的剩余空间信息。如果是一个视图，该列将会包含『VIEW』字样。</p>
</blockquote>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在文件系统中，MySQL将每个数据库（也被称为schema）保存为数据目录下的一个子目录。在创建表的时候，MySQL会在数据库子目录下创建一个和表同名的 .frm 文件对表的定义。例如，创建一个名为 mytable 的表，MySQL会在 mytable.frm 文件中保存对该表的定义。&lt;/p&gt;
&lt;p&gt;通常，我们可以使用 show table status 命令来显示表的相关信息。（MySQL 5.0 + 的版本，也可以查看 INFOMATION_SCHEMA 中对应的表的信息）。&lt;br&gt;例如，对于MySQL数据库中的 user 表：&lt;br&gt;&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;mysql&amp;gt; show table status like &#39;user&#39; \G;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;*************************** 1. row ***************************&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;           Name: user&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;         Engine: MyISAM&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        Version: 10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;     Row_format: Dynamic&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;           Rows: 14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; Avg_row_length: 63&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    Data_length: 952&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Max_data_length: 281474976710655&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;   Index_length: 2048&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      Data_free: 64&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; Auto_increment: NULL&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    Create_time: 2012-12-25 14:23:08&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    Update_time: 2015-08-11 11:17:42&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;     Check_time: NULL&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      Collation: utf8_bin&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;       Checksum: NULL&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; Create_options:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        Comment: Users and global privileges&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;1 row in set (0.01 sec)&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="MySQL" scheme="https://weizhimiao.github.io/categories/MySQL/"/>
    
    
  </entry>
  
  <entry>
    <title>MVCC多版本并发控制</title>
    <link href="https://weizhimiao.github.io/2016/09/17/MVCC-%E5%A4%9A%E7%89%88%E6%9C%AC%E5%B9%B6%E5%8F%91%E6%8E%A7%E5%88%B6%E6%95%B4%E7%90%86/"/>
    <id>https://weizhimiao.github.io/2016/09/17/MVCC-多版本并发控制整理/</id>
    <published>2016-09-16T17:00:00.000Z</published>
    <updated>2016-09-17T05:17:55.000Z</updated>
    
    <content type="html"><![CDATA[<p>MySQL中大多数事务型的存储引擎都不是简单的行级锁。为了提高并发性，他们一般会采用多版本并发控制（MVCC，一种行级锁的变种）来使很多情况下在避免加锁的情况下就实现并发操作，从而是的系统开销更低。</p>
<p>MySQL的InnoDB存储引擎的MCVV，是通过在每行记录后面保存两个隐藏的列来实现。一个保存行的创建时间，另一个保存过期时间。当然这里所说的时间并不是实际时间，是系统版本号。数据库系统在每开始一个事务，其系统版本号就会自动递增。一个事务开始时刻，事务会去当前的系统版本号作为当前事务的事务版本号，用来和查询到的每行记录的版本号做比较。</p>
<table>
<thead>
<tr>
<th>id</th>
<th>fields …</th>
<th>create_version</th>
<th>delete_version</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>….</td>
<td>1</td>
<td></td>
</tr>
<tr>
<td>2</td>
<td>….</td>
<td>2</td>
<td>3</td>
</tr>
</tbody>
</table>
<a id="more"></a>
<h2 id="具体实现"><a href="#具体实现" class="headerlink" title="具体实现"></a>具体实现</h2><p>Repeatable read 隔离级别下，MVCC具体操作：</p>
<h3 id="Select-操作："><a href="#Select-操作：" class="headerlink" title="Select 操作："></a>Select 操作：</h3><p>a. InnoDB 只查找版本号小于当前事务版本号的行（即，行的系统版本号小于或者等于当前事务的系统版本号），以确保当前事务读取到的行，要么是当前事务开始之前就已经存在的行，要么就是当前事务插入或者修改过的行。<br>b. 行的删除版本号要么未定义，要么大于当前事务的版本号。这样可以确保当前事务读取到行，在事务开始之前为被删除。</p>
<p>只有同事符合上述两个条件的记录，才能被作为查询结果被返回。</p>
<h3 id="Insert-操作："><a href="#Insert-操作：" class="headerlink" title="Insert 操作："></a>Insert 操作：</h3><p>InnoDB为新插入的行保存当前事务的版本号作为行版本号。</p>
<h3 id="Delete-操作："><a href="#Delete-操作：" class="headerlink" title="Delete 操作："></a>Delete 操作：</h3><p>InnoDB为删除的每一行记录保存当前的事务版本号作为行删除标识。</p>
<h3 id="Update-操作："><a href="#Update-操作：" class="headerlink" title="Update 操作："></a>Update 操作：</h3><p>InnoDB会插入一条新纪录，保存当前事务版本号作为改行的行版本号，同事保存当前的事务版本号到原来的行作为行删除标识版本号。</p>
<h2 id="多版本并发控制优缺点"><a href="#多版本并发控制优缺点" class="headerlink" title="多版本并发控制优缺点"></a>多版本并发控制优缺点</h2><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><p>通过两个额外的版本号，能使大多数读操作都可以不用加锁，从而使得查询性能更好。</p>
<h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><p>每行记录多需要做存储两个版本号，需要浪费额外的存储空间。</p>
<p><strong>TIPS:</strong><br>MVCC，只在Repeatable read 和read committed两个隔离级别下工作。其他两个隔离级别都和MVCC不兼容，因为 read uncommitted总是读取最新的行，而不是符合当前事务版本号的行，而 serializable 则会对所有读取的行都会加锁。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;MySQL中大多数事务型的存储引擎都不是简单的行级锁。为了提高并发性，他们一般会采用多版本并发控制（MVCC，一种行级锁的变种）来使很多情况下在避免加锁的情况下就实现并发操作，从而是的系统开销更低。&lt;/p&gt;
&lt;p&gt;MySQL的InnoDB存储引擎的MCVV，是通过在每行记录后面保存两个隐藏的列来实现。一个保存行的创建时间，另一个保存过期时间。当然这里所说的时间并不是实际时间，是系统版本号。数据库系统在每开始一个事务，其系统版本号就会自动递增。一个事务开始时刻，事务会去当前的系统版本号作为当前事务的事务版本号，用来和查询到的每行记录的版本号做比较。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;id&lt;/th&gt;
&lt;th&gt;fields …&lt;/th&gt;
&lt;th&gt;create_version&lt;/th&gt;
&lt;th&gt;delete_version&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;….&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;….&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
    
    </summary>
    
      <category term="MySQL" scheme="https://weizhimiao.github.io/categories/MySQL/"/>
    
    
      <category term="MVCC" scheme="https://weizhimiao.github.io/tags/MVCC/"/>
    
      <category term="多版本并发控制" scheme="https://weizhimiao.github.io/tags/%E5%A4%9A%E7%89%88%E6%9C%AC%E5%B9%B6%E5%8F%91%E6%8E%A7%E5%88%B6/"/>
    
  </entry>
  
  <entry>
    <title>事务的ACID概念</title>
    <link href="https://weizhimiao.github.io/2016/09/17/%E4%BA%8B%E5%8A%A1%E7%9A%84ACID%E6%A6%82%E5%BF%B5/"/>
    <id>https://weizhimiao.github.io/2016/09/17/事务的ACID概念/</id>
    <published>2016-09-16T16:00:00.000Z</published>
    <updated>2016-09-16T17:54:35.000Z</updated>
    
    <content type="html"><![CDATA[<p>数据库中的事务就是一组原子行的SQL查询，或者说一个独立的工作但愿。也就是说，事务内的语句，要么全部执行成功，要么全部执行失败。</p>
<p>ACID表示原子性（atomicity）、一致性（consistency）、隔离行（isolation）和持久性（durability）。一个运行良好的事务处理系统，必须具备这些特征。</p>
<blockquote>
<p>一个实现了ACID的数据库，相比于没有实现ACID的数据库，通常需要更强的CPU，更大的内存，更多的存储空间。所以对于一些不需要事务支持的查询类型应用，选择一个非事务型的存储引擎，是可以获得更高的性能的。</p>
</blockquote>
<a id="more"></a>
<h2 id="事务ACID的概念"><a href="#事务ACID的概念" class="headerlink" title="事务ACID的概念"></a>事务ACID的概念</h2><ul>
<li><p>A,automicity 原子性</p>
<blockquote>
<p>即，一个不可分割的最小单元。</p>
</blockquote>
</li>
<li><p>C,consistency 一致性</p>
<blockquote>
<p>总是从一种状态到另一种状态，没有第三种状态。</p>
</blockquote>
</li>
<li><p>I,isolation 隔离性</p>
<blockquote>
<p>一个事务再提交之前，对其他事务是不可见的。即不同的事务之间相互之间不影响。</p>
</blockquote>
</li>
<li><p>D,durability 持久性</p>
<blockquote>
<p>事务一旦提交，就会永久生效。</p>
</blockquote>
</li>
</ul>
<h2 id="隔离级别"><a href="#隔离级别" class="headerlink" title="隔离级别"></a>隔离级别</h2><p>隔离级别，规定一个事务中所做的修改，哪些是在事务内和事务间是可见的，哪些是不可见的。<br>一般，较低隔离级别的隔离可以支持更高的并发，系统的开销会更低。</p>
<h3 id="隔离要解决的问题"><a href="#隔离要解决的问题" class="headerlink" title="隔离要解决的问题"></a>隔离要解决的问题</h3><ul>
<li><p>脏读，Dirty read</p>
<blockquote>
<p>即其他事务可以读取到当前事务未提交的数据。</p>
</blockquote>
</li>
<li><p>不可重复读，nonrepeatable read</p>
<blockquote>
<p>即两次执行同样的查询，得到的结果可能是不一样的。</p>
</blockquote>
</li>
<li><p>幻读，Phantom read</p>
<blockquote>
<p>某一个事务在取一范围记录时，另一事务又在该范围插入了新纪录，当之前事务再读取该范围是，就会产生幻读。</p>
</blockquote>
</li>
</ul>
<h3 id="不同的隔离划分"><a href="#不同的隔离划分" class="headerlink" title="不同的隔离划分"></a>不同的隔离划分</h3><table>
<thead>
<tr>
<th>隔离级别</th>
<th>脏读</th>
<th>不可重复读可能性</th>
<th>幻读</th>
<th>加锁读</th>
</tr>
</thead>
<tbody>
<tr>
<td>read uncommitted</td>
<td>Y</td>
<td>Y</td>
<td>Y</td>
<td>Y</td>
</tr>
<tr>
<td>read committed</td>
<td>N</td>
<td>Y</td>
<td>Y</td>
<td>N</td>
</tr>
<tr>
<td>repeatable read</td>
<td>N</td>
<td>N</td>
<td>Y</td>
<td>N</td>
</tr>
<tr>
<td>serializable</td>
<td>N</td>
<td>N</td>
<td>N</td>
<td>Y</td>
</tr>
</tbody>
</table>
<ul>
<li><p>Read uncommitted（未提交读）</p>
<blockquote>
<p>在这个级别下，事务中的修改，即使在没有提交的情况下，其他的事务也是可见的。<br>所以，除非有非常必要的理由，在实际应用中一般很少使用。</p>
</blockquote>
</li>
<li><p>Read committed（提交读）</p>
<blockquote>
<p>read committed隔离级别满足前面提到的隔离性的定义。即一个事务开始时，只能看见已经提交的事务所做的修改。换句话说，一个事务从开始到提交之前，所做的任何修改对其他的事务都是不可见的。<br><strong>大多数的数据库系统的默认隔离级别都是这个级别</strong><br>但这个级别有时候会出现不可重复读的现象，即执行两次同样的查询可能会得到两个不同的结果。</p>
</blockquote>
</li>
<li><p>repeatable read（可重复读）</p>
<blockquote>
<p>该级别解决了脏读的问题，而且保证了在同一个事务中多次读取同一条记录的结果是一致的。<br><strong>该级别是MySQL的默认事务级别</strong><br>但是理论上，该级别下会出现另一个幻读的问题。<br>MySQL的InnoDB通过多版本并发控制（MVCC）来解决了该级别下出现幻读的可能性问题。</p>
</blockquote>
</li>
<li><p>serializable（可串行化）</p>
<blockquote>
<p>该级别为最高的隔离级别。他通过强制事务串行执行，避免了前面 repeatable read 级别下可能会出现幻读的情况。简单说，就是serializable会在读取的每行数据上都加锁。所以会导致大量的超时和锁争用的情况。故实际应用中该级别也很少用到。</p>
</blockquote>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;数据库中的事务就是一组原子行的SQL查询，或者说一个独立的工作但愿。也就是说，事务内的语句，要么全部执行成功，要么全部执行失败。&lt;/p&gt;
&lt;p&gt;ACID表示原子性（atomicity）、一致性（consistency）、隔离行（isolation）和持久性（durability）。一个运行良好的事务处理系统，必须具备这些特征。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;一个实现了ACID的数据库，相比于没有实现ACID的数据库，通常需要更强的CPU，更大的内存，更多的存储空间。所以对于一些不需要事务支持的查询类型应用，选择一个非事务型的存储引擎，是可以获得更高的性能的。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="MySQL" scheme="https://weizhimiao.github.io/categories/MySQL/"/>
    
    
      <category term="事务" scheme="https://weizhimiao.github.io/tags/%E4%BA%8B%E5%8A%A1/"/>
    
      <category term="ACID" scheme="https://weizhimiao.github.io/tags/ACID/"/>
    
  </entry>
  
  <entry>
    <title>MySQL并发控制整理</title>
    <link href="https://weizhimiao.github.io/2016/09/16/MySQL%E7%9A%84%E5%B9%B6%E5%8F%91%E6%8E%A7%E5%88%B6%E6%95%B4%E7%90%86/"/>
    <id>https://weizhimiao.github.io/2016/09/16/MySQL的并发控制整理/</id>
    <published>2016-09-16T13:00:00.000Z</published>
    <updated>2016-09-16T18:06:35.000Z</updated>
    
    <content type="html"><![CDATA[<p>根据控制的不同层次，MySQL的并发控制可以分为：</p>
<ul>
<li>服务器层</li>
<li>存储引擎层</li>
</ul>
<p>实现并发控制的方法策略：<strong><em>锁机制</em></strong></p>
<ul>
<li>共享锁（shared lock）&lt;======&gt; 读锁（read lock）</li>
<li>排它锁（exclusive lock） &lt;======&gt; 写锁（write lock）</li>
</ul>
<p>如何选择适合的锁？<strong><em>锁策略</em></strong></p>
<ul>
<li>锁的粒度越小，系统的并发性越高</li>
<li>所得操作越多，系统的开销越大<blockquote>
<p>所以所谓的锁策略，就是在锁的开销和数据的安全性之间寻求平衡。</p>
</blockquote>
</li>
</ul>
<a id="more"></a>
<h2 id="MySQL中锁策略类型"><a href="#MySQL中锁策略类型" class="headerlink" title="MySQL中锁策略类型"></a>MySQL中锁策略类型</h2><p>MySQL不同的存储引擎中用到的锁策略基本有两种。一种是表级锁，另一种是行级锁。</p>
<ul>
<li><p>表锁，一种开销最小的锁策略。</p>
<blockquote>
<p>一个用户对表进行写操作时，需要先获得写锁，这是其他用户读该表进行的读写操作都会进行阻塞。只有当前写操作被释放之后，其他人才能活的读锁。当当前表有读锁时，其他人也可以继续获得读锁。读锁是共享性的不同的读锁之间是互相不阻塞的。<br>另外，写锁的优先级高于读锁。所以当有多个锁请求存在是，读锁的请求会被优先插入到锁队列的前边。</p>
</blockquote>
</li>
<li><p>行锁，最大程度支持并发处理，同时也是锁开销最大的锁策略。</p>
<blockquote>
<p>顾名思义，行级锁只在将要修改的记录行上进行锁操作，对其他的行的操作没有影响。</p>
</blockquote>
</li>
</ul>
<p>尽管我们一般提到的锁，都处于存储引擎这一层，但是MySQL本身在某些情况下，也会对锁策略进行控制。比如表的alter table操作，会对表本身使用表锁，而直接忽略存储引擎的锁机制。</p>
<h2 id="MySQL中死锁问题解决方法"><a href="#MySQL中死锁问题解决方法" class="headerlink" title="MySQL中死锁问题解决方法"></a>MySQL中死锁问题解决方法</h2><blockquote>
<p>死锁，即两个或者多个事务在同一资源上相互占用，并请求占用对方已经占用的资源的情况。</p>
</blockquote>
<p>既然有锁存在，当然就会有死锁的情况发生。那么MySQL中是如何处理死锁问题的呢？<br>死锁的通常解决方案有两种，即：</p>
<ul>
<li>死锁检测机制</li>
<li>超时机制</li>
</ul>
<p>InnoDB存储引擎在检测到有死锁发生的处理方法是，将当前持有最少的行级锁的事务进行回滚。待打破死锁后，重新执行因为死锁而回滚的事务。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;根据控制的不同层次，MySQL的并发控制可以分为：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;服务器层&lt;/li&gt;
&lt;li&gt;存储引擎层&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;实现并发控制的方法策略：&lt;strong&gt;&lt;em&gt;锁机制&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;共享锁（shared lock）&amp;lt;======&amp;gt; 读锁（read lock）&lt;/li&gt;
&lt;li&gt;排它锁（exclusive lock） &amp;lt;======&amp;gt; 写锁（write lock）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如何选择适合的锁？&lt;strong&gt;&lt;em&gt;锁策略&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;锁的粒度越小，系统的并发性越高&lt;/li&gt;
&lt;li&gt;所得操作越多，系统的开销越大&lt;blockquote&gt;
&lt;p&gt;所以所谓的锁策略，就是在锁的开销和数据的安全性之间寻求平衡。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="MySQL" scheme="https://weizhimiao.github.io/categories/MySQL/"/>
    
    
      <category term="并发控制" scheme="https://weizhimiao.github.io/tags/%E5%B9%B6%E5%8F%91%E6%8E%A7%E5%88%B6/"/>
    
  </entry>
  
  <entry>
    <title>MySQL逻辑架构设计</title>
    <link href="https://weizhimiao.github.io/2016/09/16/MySQL%E9%80%BB%E8%BE%91%E6%9E%B6%E6%9E%84%E5%AE%9E%E7%8E%B0%E5%B0%8F%E7%BB%93/"/>
    <id>https://weizhimiao.github.io/2016/09/16/MySQL逻辑架构实现小结/</id>
    <published>2016-09-16T12:00:00.000Z</published>
    <updated>2016-09-16T08:42:10.000Z</updated>
    
    <content type="html"><![CDATA[<p>通常MySQL架构有两种划分，一种划为两层架构，另一种划为三层。<br>两层架构划为MySQL服务器层和存储引擎层，三层架构则把MySQL层又划为两层。</p>
<p><img src="http://n.sinaimg.cn/games/3ece443e/20160916/MySQLJiaGouTu1.png" alt="MySQL架构图"></p>
<a id="more"></a>
<h2 id="三层架构说明"><a href="#三层架构说明" class="headerlink" title="三层架构说明"></a>三层架构说明</h2><ul>
<li><p>第一层，用于连接处理、授权认证、安全认证等等。大多数基于客户端/服务器端的工具或者服务器都有类似架构。</p>
</li>
<li><p>第二层，是MySQL架构的核心部分。MySQL的大部分核心服务功能大都在这一层。包括查询解析、分析、优化、缓存以及所有的内置函数的实现，还有所有的跨存储引擎的功能都在这一层实现：存储过程、触发器、试图等。</p>
</li>
<li><p>第三层，存储引擎层。存储引擎负责MySQL中数据的存储和读取。每个存储引擎都有自己的优势和劣势。MySQL服务器层通过API与存储引擎进行通信。存储引擎本身是不会解析SQL，且不同的存储引擎之间也是不会相互通信。</p>
</li>
</ul>
<h2 id="MySQL服务器接收-处理一个查询请求的过程"><a href="#MySQL服务器接收-处理一个查询请求的过程" class="headerlink" title="MySQL服务器接收/处理一个查询请求的过程"></a>MySQL服务器接收/处理一个查询请求的过程</h2><ol>
<li><p>当MySQL服务器接收到一个查询请求，首先会对当前的连接请求进行认证，认证其用户名和密码信息。</p>
</li>
<li><p>连接成功之后，会继续验证该连接是否具有执行某个特定查询的权限。</p>
</li>
<li><p>所有的验证都通过，如果是 select 操作，MySQL会先检查查询缓存中是否存在该缓存，如果存在直接返回结果。不存在继续下一步。</p>
</li>
<li><p>解析查询，并创建内部数据结构（生成 解析树），然后对解析树进行各种优化（包括，重写查询，决定表的读取顺序、选择合适的索引等等）。</p>
</li>
<li><p>通过存储引擎存储或者提取结果。</p>
</li>
<li><p>如果是select操作，生成查询缓存。</p>
</li>
<li><p>返回结果。</p>
</li>
</ol>
<p>over~</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;通常MySQL架构有两种划分，一种划为两层架构，另一种划为三层。&lt;br&gt;两层架构划为MySQL服务器层和存储引擎层，三层架构则把MySQL层又划为两层。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://n.sinaimg.cn/games/3ece443e/20160916/MySQLJiaGouTu1.png&quot; alt=&quot;MySQL架构图&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="MySQL" scheme="https://weizhimiao.github.io/categories/MySQL/"/>
    
    
      <category term="MySQL逻辑架构" scheme="https://weizhimiao.github.io/tags/MySQL%E9%80%BB%E8%BE%91%E6%9E%B6%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>Apache中PHP支持模式小结</title>
    <link href="https://weizhimiao.github.io/2016/09/07/Apache%20%E4%B8%ADPHP%E6%94%AF%E6%8C%81%E6%A8%A1%E5%BC%8F/"/>
    <id>https://weizhimiao.github.io/2016/09/07/Apache 中PHP支持模式/</id>
    <published>2016-09-07T12:10:00.000Z</published>
    <updated>2016-09-08T05:28:54.000Z</updated>
    
    <content type="html"><![CDATA[<p>Apache通过不同的方式，能够实现对PHP支持。常见的几种支持方式有：</p>
<ul>
<li>模块支持（handler模式）</li>
<li>CGI模块</li>
<li>FastCGI模式，用Apache内置进程管理器</li>
<li>FastCGI模式，用php-fpm进程管理器</li>
</ul>
<a id="more"></a>
<h2 id="Apache安装、PHP安装、mod-fastcgi模块安装"><a href="#Apache安装、PHP安装、mod-fastcgi模块安装" class="headerlink" title="Apache安装、PHP安装、mod_fastcgi模块安装"></a>Apache安装、PHP安装、mod_fastcgi模块安装</h2><h3 id="Apache-安装"><a href="#Apache-安装" class="headerlink" title="Apache 安装"></a>Apache 安装</h3><p>略过···</p>
<h3 id="PHP-安装"><a href="#PHP-安装" class="headerlink" title="PHP 安装"></a>PHP 安装</h3><p>示例：安装PHP5.6</p>
<ol>
<li><p>下载、解压</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[root@iZ23a3ua2stZ ~]<span class="comment">#wget http://cn2.php.net/distributions/php-5.6.25.tar.gz</span></div><div class="line">[root@iZ23a3ua2stZ ~]<span class="comment">#tar -zxvf php-5.6.25.tar.gz</span></div></pre></td></tr></table></figure>
</li>
<li><p>./configure</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[root@iZ23a3ua2stZ ~]<span class="comment">#cd php-5.6.25</span></div><div class="line">[root@iZ23a3ua2stZ php-5.6.25]<span class="comment">#./configure --with-apxs2=/usr/local/apache2/bin/apxs --with-mysql --enable-fpm --prefix=/usr/local/php5.6</span></div></pre></td></tr></table></figure>
<p><code>--enable-fpm</code> 用来来激活对 FPM 的支持</p>
<p><code>--with-apxs2</code> 该参数作用是把php的解释模块编译成so 文件，并自动添加到 Apache的modules中，并自动在 <code>httpd.conf</code> 中加入对应的加载指令<code>LoadModule php5_module modules/libphp5.so</code></p>
<blockquote>
<p><strong>报错1：</strong> 在运行 <code>./configure</code> 时可能会报以下这样的错误。提示我们 运行不了 <code>apxs</code> 这个工具。</p>
</blockquote>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">Sorry, I cannot run apxs.  Possible reasons follow:</div><div class="line">1 Perl is not installed</div><div class="line">2 apxs was not found. Try to pass the path using --with-apxs2=/path/to/apxs</div><div class="line">3 Apache was not built using --enable-so (the apxs usage page is displayed)</div><div class="line">The output of /usr/<span class="built_in">local</span>/apache2/bin/apxs follows:</div><div class="line">./configure: /usr/<span class="built_in">local</span>/apache2/bin/apxs: /replace/with/path/to/perl/interpreter: bad interpreter: No such file or directory</div><div class="line">configure: error: Aborting</div></pre></td></tr></table></figure>
</li>
</ol>
<blockquote>
<p>之前我们在Apache模块化体系的小结中介绍过 <code>apxs</code> 实际是一个 perl 脚本。上面报错中 <code>/replace/with/path/to/perl/interpreter</code> 提示我们找不到这个文件，<br>这行实际是 perl 脚本的声明，我们需要将它改成我们服务器perl脚本的地址。</p>
</blockquote>
  <figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">[root@iZ23a3ua2stZ php-5.6.25]<span class="comment"># which perl</span></div><div class="line">/usr/bin/perl</div><div class="line">[root@iZ23a3ua2stZ php-5.6.25]<span class="comment"># vi /usr/local/apache2/bin/apxs</span></div><div class="line"><span class="comment">#将第一行 `#!/replace/with/path/to/perl/interpreter` 改成 `#!/usr/bin/perl`</span></div></pre></td></tr></table></figure>
<blockquote>
<p><strong>报错2：</strong> configure: error: xml2-config not found. Please check your libxml2 installation.<br>提示我们缺少 <code>libxml2</code>。安装 <code>libxml2</code>.<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[root@iZ23a3ua2stZ php-5.6.25]<span class="comment">#yum install libxml2</span></div><div class="line">[root@iZ23a3ua2stZ php-5.6.25]<span class="comment">#yum install libxml2-devel -y</span></div></pre></td></tr></table></figure></p>
</blockquote>
<p>  <code>./configure</code> 成功会有如下显示。</p>
  <figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">+--------------------------------------------------------------------+</div><div class="line">| License:                                                           |</div><div class="line">| This software is subject to the PHP License, available <span class="keyword">in</span> this     |</div><div class="line">| distribution <span class="keyword">in</span> the file LICENSE.  By continuing this installation |</div><div class="line">| process, you are bound by the terms of this license agreement.     |</div><div class="line">| If you <span class="keyword">do</span> not agree with the terms of this license, you must abort |</div><div class="line">| the installation process at this point.                            |</div><div class="line">+--------------------------------------------------------------------+</div><div class="line">Thank you <span class="keyword">for</span> using PHP.</div><div class="line">config.status: creating php5.spec</div><div class="line">config.status: creating main/build-defs.h</div><div class="line">config.status: creating scripts/phpize</div><div class="line">config.status: creating scripts/man1/phpize.1</div><div class="line">config.status: creating scripts/php-config</div><div class="line">config.status: creating scripts/man1/php-config.1</div><div class="line">config.status: creating sapi/cli/php.1</div><div class="line">config.status: creating sapi/fpm/php-fpm.conf</div><div class="line">config.status: creating sapi/fpm/init.d.php-fpm</div><div class="line">config.status: creating sapi/fpm/php-fpm.service</div><div class="line">config.status: creating sapi/fpm/php-fpm.8</div><div class="line">config.status: creating sapi/fpm/status.html</div><div class="line">config.status: creating sapi/cgi/php-cgi.1</div><div class="line">config.status: creating ext/phar/phar.1</div><div class="line">config.status: creating ext/phar/phar.phar.1</div><div class="line">config.status: creating main/php_config.h</div></pre></td></tr></table></figure>
<ol>
<li>编译<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[root@iZ23a3ua2stZ php-5.6.25]<span class="comment">#make &amp;&amp; make install</span></div></pre></td></tr></table></figure>
</li>
</ol>
<p>成功安装<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line">Build complete.</div><div class="line">Don&apos;t forget to run &apos;make test&apos;.</div><div class="line">Installing PHP SAPI module:       apache2handler</div><div class="line">/usr/local/apache2/build/instdso.sh SH_LIBTOOL=&apos;/usr/local/apache2/build/libtool&apos; libphp5.la /usr/local/apache2/modules</div><div class="line">/usr/local/apache2/build/libtool --mode=install install libphp5.la /usr/local/apache2/modules/</div><div class="line">libtool: install: install .libs/libphp5.so /usr/local/apache2/modules/libphp5.so</div><div class="line">libtool: install: install .libs/libphp5.lai /usr/local/apache2/modules/libphp5.la</div><div class="line">libtool: install: warning: remember to run `libtool --finish /root/php-5.6.25/libs&apos;</div><div class="line">chmod 755 /usr/local/apache2/modules/libphp5.so</div><div class="line">[activating module `php5&apos; in /usr/local/apache2/conf/httpd.conf]</div><div class="line">Installing shared extensions:     /usr/local/php5.6/lib/php/extensions/no-debug-zts-20131226/</div><div class="line">Installing PHP CLI binary:        /usr/local/php5.6/bin/</div><div class="line">Installing PHP CLI man page:      /usr/local/php5.6/php/man/man1/</div><div class="line">Installing PHP FPM binary:        /usr/local/php5.6/sbin/</div><div class="line">Installing PHP FPM config:        /usr/local/php5.6/etc/</div><div class="line">Installing PHP FPM man page:      /usr/local/php5.6/php/man/man8/</div><div class="line">Installing PHP FPM status page:   /usr/local/php5.6/php/php/fpm/</div><div class="line">Installing PHP CGI binary:        /usr/local/php5.6/bin/</div><div class="line">Installing PHP CGI man page:      /usr/local/php5.6/php/man/man1/</div><div class="line">Installing build environment:     /usr/local/php5.6/lib/php/build/</div><div class="line">Installing header files:           /usr/local/php5.6/include/php/</div><div class="line">Installing helper programs:       /usr/local/php5.6/bin/</div><div class="line">  program: phpize</div><div class="line">  program: php-config</div><div class="line">Installing man pages:             /usr/local/php5.6/php/man/man1/</div><div class="line">  page: phpize.1</div><div class="line">  page: php-config.1</div><div class="line">Installing PEAR environment:      /usr/local/php5.6/lib/php/</div><div class="line">[PEAR] Archive_Tar    - installed: 1.4.0</div><div class="line">[PEAR] Console_Getopt - installed: 1.4.1</div><div class="line">[PEAR] Structures_Graph- installed: 1.1.1</div><div class="line">[PEAR] XML_Util       - installed: 1.3.0</div><div class="line">[PEAR] PEAR           - installed: 1.10.1</div><div class="line">Wrote PEAR system config file at: /usr/local/php5.6/etc/pear.conf</div><div class="line">You may want to add: /usr/local/php5.6/lib/php to your php.ini include_path</div><div class="line">/root/php-5.6.25/build/shtool install -c ext/phar/phar.phar /usr/local/php5.6/bin</div><div class="line">ln -s -f phar.phar /usr/local/php5.6/bin/phar</div><div class="line">Installing PDO headers:           /usr/local/php5.6/include/php/ext/pdo/</div></pre></td></tr></table></figure></p>
<ol>
<li>设置配置文件<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cp php.ini-development /usr/local/php5.6/lib/php.ini</div></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="mod-fastcgi-模块安装"><a href="#mod-fastcgi-模块安装" class="headerlink" title="mod_fastcgi 模块安装"></a>mod_fastcgi 模块安装</h3><ol>
<li><p>下载、解压<br><a href="http://n.sinaimg.cn/games/3ece443e/20160907/mod_fastcgi-2.4.6.tar.gz" target="_blank" rel="external">mod_fastcgi-2.4.6.tar.gz</a></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">[root@iZ23a3ua2stZ ~]#wget http://n.sinaimg.cn/games/3ece443e/20160907/mod_fastcgi-2.4.6.tar.gz</div><div class="line">[root@iZ23a3ua2stZ ~]#tar -zxvf mod_fastcgi-2.4.6.tar.gz</div><div class="line">cd mod_fastcgi-2.4.6</div></pre></td></tr></table></figure>
</li>
<li><p>编译、安装</p>
<ul>
<li>查看安装说明<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">[root@iZ23a3ua2stZ ~]#cd mod_fastcgi-2.4.6</div><div class="line">[root@iZ23a3ua2stZ mod_fastcgi-2.4.6]#</div><div class="line">#查看 安装说明文件 (Apache 1.x请查看 INSTALL 文件)</div><div class="line">[root@iZ23a3ua2stZ mod_fastcgi-2.4.6]#vi INSTALL.AP2  </div><div class="line">···</div><div class="line">$ cd &lt;mod_fastcgi_dir&gt;</div><div class="line">$ cp Makefile.AP2 Makefile</div><div class="line">$ make</div><div class="line">$ make install</div><div class="line">If your Apache2 installation isn&apos;t in /usr/local/apache2, then</div><div class="line">set the top_dir variable when running make (or edit the</div><div class="line">Makefile), e.g.</div><div class="line">  $ make top_dir=/opt/httpd/2.0.40</div><div class="line">Add an entry to httpd.conf like this:</div><div class="line">  LoadModule fastcgi_module modules/mod_fastcgi.so</div><div class="line">···</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ol>
<p>虽然说明文件里描述的很清楚，但我们按照里面的步骤进行编译时，会产生报错。于是找了一大圈问题，发现在 <code>apache2.4</code> 下安装 <code>mod_fastcgi 2.4.6</code> 编译时汇报错，需要打个补丁。</p>
<ol>
<li><p>打补丁<br><a href="http://n.sinaimg.cn/games/3ece443e/20160907/byte-compile-against-apache24.diff" target="_blank" rel="external">补丁下载地址</a></p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[root@iZ23a3ua2stZ mod_fastcgi-2.4.6]<span class="comment">#wget http://n.sinaimg.cn/games/3ece443e/20160907/byte-compile-against-apache24.diff</span></div><div class="line">[root@iZ23a3ua2stZ mod_fastcgi-2.4.6]<span class="comment">#patch -p1 &lt; byte-compile-against-apache24.diff</span></div></pre></td></tr></table></figure>
</li>
<li><p>继续编译、安装</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[root@iZ23a3ua2stZ mod_fastcgi-2.4.6]#make</div><div class="line">[root@iZ23a3ua2stZ mod_fastcgi-2.4.6]#make install</div></pre></td></tr></table></figure>
</li>
</ol>
<p>然后查看<code>/usr/local/apache2/modules/</code> 下是否已经编译成功 <code>mod_fastcgi.so</code>，<br>并在 <code>httpd.conf</code> 中添加 <code>LoadModule fastcgi_module modules/mod_fastcgi.so</code> 指令。</p>
<h2 id="各种模式配置"><a href="#各种模式配置" class="headerlink" title="各种模式配置"></a>各种模式配置</h2><h3 id="模块模式（最简单）"><a href="#模块模式（最简单）" class="headerlink" title="模块模式（最简单）"></a>模块模式（最简单）</h3><ul>
<li><p>在 <code>httpd.conf</code> 中添加或者开启</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">LoadModule php5_module modules/libphp5.so</div></pre></td></tr></table></figure>
</li>
<li><p>然后在 <code>httpd.conf</code> 中找到 <code>&lt;IfModule mime_module&gt;</code> 配置段，在其中添加</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">AddType application/x-httpd-php .php</div><div class="line">AddType application/x-httpd-php-source .phps</div></pre></td></tr></table></figure>
</li>
<li><p>重启 Apache ,在站点目录下添加 <code>index.php</code></p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line">    phpinfo();</div><div class="line"> <span class="meta">?&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p>通过浏览器访问该文件，能够正确输出，则说明配置成功。</p>
<blockquote>
<p>这时 <code>phpinfo();</code> 输出的 <code>Server API</code> 应该为 <code>Apache 2.0 Handler</code>.</p>
</blockquote>
</li>
</ul>
<h3 id="CGI模式"><a href="#CGI模式" class="headerlink" title="CGI模式"></a>CGI模式</h3><ul>
<li>在 <code>httpd.conf</code> 中添加或者开启<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">LoadModule cgid_module modules/mod_cgid.so</div><div class="line">LoadModule actions_module modules/mod_actions.so</div></pre></td></tr></table></figure>
</li>
</ul>
<blockquote>
<p><code>mod_cgid</code> ,CGI 处理模块。在某些Unix操作系统上，在多线程服务器fork一个进程是一个代价非常大的操作，因为新进程将会复制父进程所有的线程。为了避免每次CGI调用都进行这样代价大的操作。mod_cgid 采用外部守护进程来负责分派子进程来运行CGI脚本。主服务器使用Unix套接字来与此守护进程进行通信。</p>
<p>如果在Apache编译过程中选择了多线程MPM，那么Apache将会默认安装mod_cgid模块，而不是mod_cgi。但在用户配置使用层面，mod_cgid 和 mod_cgi 基本相同，唯一例外的是，mod_cgid 通过指令 ScriptSock 给socket命名用于与CGI守护进程通信。</p>
<p><code>mod_actions</code> ,模块提供基于基于媒体类型或请求方法来执行CGI脚本的方法。该模块引入 <code>Action</code> 和 <code>Script</code> 两个指令。</p>
</blockquote>
<ul>
<li><p>然后在 <code>httpd.conf</code> 中找到 <code>&lt;IfModule mime_module&gt;</code> 配置段，在其中添加</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">AddHandler php-cgi .php</div><div class="line">Action php-cgi "/cgi-bin/php-cgi"</div></pre></td></tr></table></figure>
</li>
<li><p>然后在 <code>httpd.conf</code> 中找到 <code>&lt;IfModule cgid_module&gt;</code> 配置段，在其中添加</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;IfModule cgid_module&gt;</div><div class="line">    Scriptsock /var/run/cgid.sock</div><div class="line">&lt;/IfModule&gt;</div></pre></td></tr></table></figure>
</li>
<li><p>重启 Apache ,在站点目录下添加 <code>index.php</code></p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line">    phpinfo();</div><div class="line"> <span class="meta">?&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p>通过浏览器访问该文件，能够正确输出，则说明配置成功。</p>
<blockquote>
<p>这时 <code>phpinfo();</code> 输出的 <code>Server API</code> 应该为 <code>CGI/FastCGI</code>.</p>
</blockquote>
</li>
</ul>
<h3 id="FastCGI模式，用Apache内置进程管理器"><a href="#FastCGI模式，用Apache内置进程管理器" class="headerlink" title="FastCGI模式，用Apache内置进程管理器"></a>FastCGI模式，用Apache内置进程管理器</h3><ul>
<li><p>在 <code>httpd.conf</code> 中添加或者开启</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">LoadModule fastcgi_module modules/mod_fastcgi.so</div><div class="line">LoadModule actions_module modules/mod_actions.so</div></pre></td></tr></table></figure>
</li>
<li><p>然后在 <code>httpd.conf</code> 中添加 <code>&lt;IfModule fastcgi_module&gt;</code> 配置段</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;IfModule fastcgi_module&gt;</div><div class="line">   FastCgiServer /usr/local/apache2/cgi-bin/php-cgi -processes 20</div><div class="line">   AddType application/x-httpd-php .php</div><div class="line">   AddHandler php-fastcgi .php</div><div class="line">   Action php-fastcgi /cgi-bin/php-cgi</div><div class="line">&lt;/IfModule&gt;</div></pre></td></tr></table></figure>
</li>
</ul>
<blockquote>
<p><code>-processes 20</code> ,配置启动的进程数</p>
</blockquote>
<ul>
<li><p>重启 Apache ,执行 <code>ps aux | grep php</code> 查看相应 php-cgi 进程是否启动</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">[root@iZ23a3ua2stZ apache2]<span class="comment"># ps aux | grep php</span></div><div class="line">daemon   21382  0.0  0.5  42104  5604 ?        S    11:30   0:00 /usr/<span class="built_in">local</span>/apache2/cgi-bin/php-cgi</div><div class="line">daemon   21435  0.0  0.4  42104  4724 ?        S    11:30   0:00 /usr/<span class="built_in">local</span>/apache2/cgi-bin/php-cgi</div><div class="line">daemon   21436  0.0  0.4  42104  4732 ?        S    11:30   0:00 /usr/<span class="built_in">local</span>/apache2/cgi-bin/php-cgi</div><div class="line">daemon   21437  0.0  0.4  42104  4724 ?        S    11:30   0:00 /usr/<span class="built_in">local</span>/apache2/cgi-bin/php-cgi</div><div class="line">daemon   21438  0.0  0.4  42104  4724 ?        S    11:30   0:00 /usr/<span class="built_in">local</span>/apache2/cgi-bin/php-cgi</div><div class="line">daemon   21439  0.0  0.4  42104  4728 ?        S    11:30   0:00 /usr/<span class="built_in">local</span>/apache2/cgi-bin/php-cgi</div><div class="line">daemon   21440  0.0  0.4  42104  4728 ?        S    11:30   0:00 /usr/<span class="built_in">local</span>/apache2/cgi-bin/php-cgi</div><div class="line">daemon   21441  0.0  0.4  42104  4728 ?        S    11:30   0:00 /usr/<span class="built_in">local</span>/apache2/cgi-bin/php-cgi</div><div class="line">daemon   21442  0.0  0.4  42104  4728 ?        S    11:30   0:00 /usr/<span class="built_in">local</span>/apache2/cgi-bin/php-cgi</div><div class="line">daemon   21443  0.0  0.4  42104  4728 ?        S    11:30   0:00 /usr/<span class="built_in">local</span>/apache2/cgi-bin/php-cgi</div><div class="line">daemon   21444  0.0  0.4  42104  4728 ?        S    11:30   0:00 /usr/<span class="built_in">local</span>/apache2/cgi-bin/php-cgi</div><div class="line">daemon   21445  0.0  0.4  42104  4724 ?        S    11:30   0:00 /usr/<span class="built_in">local</span>/apache2/cgi-bin/php-cgi</div><div class="line">daemon   21446  0.0  0.4  42104  4728 ?        S    11:30   0:00 /usr/<span class="built_in">local</span>/apache2/cgi-bin/php-cgi</div><div class="line">daemon   21447  0.0  0.4  42104  4724 ?        S    11:30   0:00 /usr/<span class="built_in">local</span>/apache2/cgi-bin/php-cgi</div><div class="line">daemon   21448  0.0  0.4  42104  4728 ?        S    11:30   0:00 /usr/<span class="built_in">local</span>/apache2/cgi-bin/php-cgi</div><div class="line">daemon   21449  0.0  0.4  42104  4728 ?        S    11:31   0:00 /usr/<span class="built_in">local</span>/apache2/cgi-bin/php-cgi</div><div class="line">daemon   21450  0.0  0.4  42104  4724 ?        S    11:31   0:00 /usr/<span class="built_in">local</span>/apache2/cgi-bin/php-cgi</div><div class="line">daemon   21451  0.0  0.4  42104  4724 ?        S    11:31   0:00 /usr/<span class="built_in">local</span>/apache2/cgi-bin/php-cgi</div><div class="line">daemon   21452  0.0  0.4  42104  4732 ?        S    11:31   0:00 /usr/<span class="built_in">local</span>/apache2/cgi-bin/php-cgi</div><div class="line">daemon   21453  0.0  0.4  42104  4728 ?        S    11:31   0:00 /usr/<span class="built_in">local</span>/apache2/cgi-bin/php-cgi</div><div class="line">root     21455  0.0  0.0 112668   984 pts/0    S+   11:31   0:00 grep --color=auto php</div></pre></td></tr></table></figure>
</li>
<li><p>在站点目录下添加 <code>index.php</code></p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line">    phpinfo();</div><div class="line"> <span class="meta">?&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p>通过浏览器访问该文件，能够正确输出，则说明配置成功。</p>
<blockquote>
<p>这时 <code>phpinfo();</code> 输出的 <code>Server API</code> 应该为 <code>CGI/FastCGI</code>.</p>
</blockquote>
</li>
</ul>
<h3 id="FastCGI模式，使用php-fpm进程管理器"><a href="#FastCGI模式，使用php-fpm进程管理器" class="headerlink" title="FastCGI模式，使用php-fpm进程管理器"></a>FastCGI模式，使用php-fpm进程管理器</h3><ul>
<li><p>在 <code>httpd.conf</code> 中添加或者开启</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">LoadModule fastcgi_module modules/mod_fastcgi.so</div><div class="line">LoadModule actions_module modules/mod_actions.so</div></pre></td></tr></table></figure>
</li>
<li><p>然后在 <code>httpd.conf</code> 中添加 <code>&lt;IfModule fastcgi_module&gt;</code> 配置段</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;IfModule fastcgi_module&gt;</div><div class="line">   FastCgiExternalServer /usr/local/apache2/cgi-bin/php-cgi -host 127.0.0.1:9000</div><div class="line">   AddType application/x-httpd-php .php</div><div class="line">   AddHandler php-fastcgi .php</div><div class="line">   Action php-fastcgi /cgi-bin/php-cgi</div><div class="line">&lt;/IfModule&gt;</div></pre></td></tr></table></figure>
</li>
</ul>
<blockquote>
<p><code>-host 127.0.0.1:9000</code> ,是php-fpm的开启端口，所以我们还需要把php-fpm打开。</p>
</blockquote>
<ul>
<li>启动 <code>php-fpm</code><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[root@iZ23a3ua2stZ apache2]<span class="comment"># /usr/local/php5.6/sbin/php-fpm</span></div></pre></td></tr></table></figure>
</li>
</ul>
<blockquote>
<p>/usr/local/php/sbin/php-fpm{start|stop|quit|restart|reload|logrotate}</p>
<p>–start 启动php的fastcgi进程<br>–stop 强制终止php的fastcgi进程<br>–quit 平滑终止php的fastcgi进程<br>–restart 重启php的fastcgi进程<br>–reload 重新平滑加载php的php.ini<br>–logrotate 重新启用log文件</p>
</blockquote>
<ul>
<li><p>重启 Apache ,执行 <code>ps aux | grep php</code> 查看相应 php-cgi 进程是否启动</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">[root@iZ23a3ua2stZ apache2]<span class="comment"># ps aux | grep php</span></div><div class="line">[root@iZ23a3ua2stZ apache2]<span class="comment"># ps aux | grep php</span></div><div class="line">root     21680  0.0  0.3 147920  3660 ?        Ss   12:41   0:00 php-fpm: master process (/usr/<span class="built_in">local</span>/php5.6/etc/php-fpm.conf)</div><div class="line">nobody   21681  0.0  0.3 147920  3312 ?        S    12:41   0:00 php-fpm: pool www</div><div class="line">nobody   21682  0.0  0.4 147920  4888 ?        S    12:41   0:00 php-fpm: pool www</div><div class="line">root     21684  0.0  0.0 112664   980 pts/3    S+   12:42   0:00 grep --color=auto php</div></pre></td></tr></table></figure>
</li>
<li><p>在站点目录下添加 <code>index.php</code></p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line">    phpinfo();</div><div class="line"> <span class="meta">?&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p>通过浏览器访问该文件，能够正确输出，则说明配置成功。</p>
<blockquote>
<p>这时 <code>phpinfo();</code> 输出的 <code>Server API</code> 应该为 <code>FPM/FastCGI</code>.</p>
</blockquote>
</li>
</ul>
<h2 id="各种模式比较"><a href="#各种模式比较" class="headerlink" title="各种模式比较"></a>各种模式比较</h2><blockquote>
<p>有空再整理。。。</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Apache通过不同的方式，能够实现对PHP支持。常见的几种支持方式有：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;模块支持（handler模式）&lt;/li&gt;
&lt;li&gt;CGI模块&lt;/li&gt;
&lt;li&gt;FastCGI模式，用Apache内置进程管理器&lt;/li&gt;
&lt;li&gt;FastCGI模式，用php-fpm进程管理器&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="Apache" scheme="https://weizhimiao.github.io/categories/Apache/"/>
    
      <category term="PHP" scheme="https://weizhimiao.github.io/categories/Apache/PHP/"/>
    
    
      <category term="Apache" scheme="https://weizhimiao.github.io/tags/Apache/"/>
    
      <category term="PHP" scheme="https://weizhimiao.github.io/tags/PHP/"/>
    
      <category term="Apache&amp;PHP" scheme="https://weizhimiao.github.io/tags/Apache-PHP/"/>
    
  </entry>
  
  <entry>
    <title>Apache 虚拟主机配置</title>
    <link href="https://weizhimiao.github.io/2016/09/05/Apache%20%E8%99%9A%E6%8B%9F%E4%B8%BB%E6%9C%BA%E9%85%8D%E7%BD%AE/"/>
    <id>https://weizhimiao.github.io/2016/09/05/Apache 虚拟主机配置/</id>
    <published>2016-09-05T14:10:00.000Z</published>
    <updated>2016-09-06T15:17:20.000Z</updated>
    
    <content type="html"><![CDATA[<p>虚拟主机指的是在单一机器上运行多个网站。</p>
<ul>
<li>常见的共有三种不同的配置方式。<ul>
<li>基于域名</li>
<li>基于端口（需要增加相对应的 <code>Listen</code> 指令）</li>
<li>基于IP</li>
</ul>
</li>
<li>动态虚拟主机配置。</li>
</ul>
<a id="more"></a>
<h2 id="常规配置方式"><a href="#常规配置方式" class="headerlink" title="常规配置方式"></a>常规配置方式</h2><h3 id="在httpd-conf-文件中启用-httpd-vhost-conf-配置文件"><a href="#在httpd-conf-文件中启用-httpd-vhost-conf-配置文件" class="headerlink" title="在httpd.conf 文件中启用 httpd-vhost.conf 配置文件"></a>在<code>httpd.conf</code> 文件中启用 <code>httpd-vhost.conf</code> 配置文件</h3><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"># Virtual hosts</div><div class="line">Include conf/extra/httpd-vhosts.conf</div></pre></td></tr></table></figure>
<h3 id="配置-httpd-vhosts-conf"><a href="#配置-httpd-vhosts-conf" class="headerlink" title="配置 httpd-vhosts.conf"></a>配置 <code>httpd-vhosts.conf</code></h3><ol>
<li>基于域名配置<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">&lt;VirtualHost *:80&gt;</div><div class="line">    ServerName domain1.com</div><div class="line">    DocumentRoot  "D:\data\domain1.com"</div><div class="line">    &lt;Directory /&gt;</div><div class="line">        Options +Indexes +FollowSymLinks +ExecCGI</div><div class="line">        AllowOverride All</div><div class="line">        Order allow,deny</div><div class="line">        Allow from all</div><div class="line">        Require all granted</div><div class="line">    &lt;/Directory&gt;</div><div class="line">    DirectoryIndex index.php index.html</div><div class="line">&lt;/VirtualHost&gt;</div></pre></td></tr></table></figure>
</li>
</ol>
<p><strong>注：( <code>Require all granted</code> )</strong></p>
<blockquote>
<p>Apache 2.4 及以上版本访问控制与2.2有所变换，所以在2.4+的版本需要在目录下添加 <code>Require all granted</code> 否则会出现访问不到的情况。<br><a href="http://httpd.apache.org/docs/2.4/upgrading.html" target="_blank" rel="external">更多详情，点击查看</a></p>
</blockquote>
<ol>
<li><p>基于端口配置</p>
<ul>
<li><p>基于端口的配置需要先在 <code>httpd.conf</code> 中添加相应端口的 <code>Listen</code> 指令。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">#httpd.conf</div><div class="line">Listen 81</div></pre></td></tr></table></figure>
</li>
<li><p><code>httpd-vhosts.conf</code></p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">&lt;VirtualHost *:81&gt;</div><div class="line">    #ServerName 10.235.65.14:81</div><div class="line">    DocumentRoot  "D:\data\domain3.com"</div><div class="line">    &lt;Directory /&gt;</div><div class="line">        Options +Indexes +FollowSymLinks +ExecCGI</div><div class="line">        AllowOverride All</div><div class="line">        Order allow,deny</div><div class="line">        Allow from all</div><div class="line">        Require all granted</div><div class="line">    &lt;/Directory&gt;</div><div class="line">    DirectoryIndex index.php index.html</div><div class="line">&lt;/VirtualHost&gt;</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>基于IP地址配置</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">&lt;VirtualHost *:80&gt;</div><div class="line">    ServerName 10.235.65.14</div><div class="line">    DocumentRoot  "D:\data\domain2.com"</div><div class="line">    &lt;Directory /&gt;</div><div class="line">        Options +Indexes +FollowSymLinks +ExecCGI</div><div class="line">        AllowOverride All</div><div class="line">        Order allow,deny</div><div class="line">        Allow from all</div><div class="line">        Require all granted</div><div class="line">    &lt;/Directory&gt;</div><div class="line">    DirectoryIndex index.php index.html</div><div class="line">&lt;/VirtualHost&gt;</div></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h3><p>配置完成之后，需要重启 Apache 配置才会生效。在浏览器中输入相应的域名，IP或者端口进行查看，能正常输出我们分别设置的内容，则说明我们配置成功。</p>
<h2 id="动态虚拟主机配置"><a href="#动态虚拟主机配置" class="headerlink" title="动态虚拟主机配置"></a>动态虚拟主机配置</h2><p>上面谈到的虚拟主机配置方式，每次配置完成之后都必须重启 Apache 才能生效。并且当我们要配置多个虚拟主机时就需要增加多个 <code>&lt;VirtualHost &gt;···&lt;/VirtualHost&gt;</code> ,显得繁琐。那么有没有一种更好，更有效的方式来进行配置呢？</p>
<p><code>mod_vhost_alias</code> 模块为我们提供了一种动态配置虚拟主机的方式。我们只需设置一个目录，将不同的站点资源按照一定的规则放到该目录下即可。并且不用修改配置文件，且不用重新启动Apache服务器。</p>
<p>动态配置优缺点：</p>
<ul>
<li>优点：<ul>
<li>配置文件更小，意味着Apache启动会更快，并且占用内存更少。正重要的是，更小的配置结构更易于维护，我们人为配置出错的机会更小。</li>
<li>添加新的虚拟主机，我们只需要根据相应的规则在指定的，目录下面创建文件即可。不需要重新配置和启动Apache。</li>
</ul>
</li>
<li>缺点：<ul>
<li>无法针对每个虚拟主机设置不同的日志文件。如果我们有很多的虚拟主机这确实是一个非常糟糕的事情。我们可以选择将日志记录到一个管道或者FIFO，在另一端再将日志文件按照不同的虚拟主机进行分割。比如 <a href="http://httpd.apache.org/docs/current/programs/split-logfile.html" target="_blank" rel="external"><code>aplit-logfile</code></a> 工具。</li>
</ul>
</li>
</ul>
<h3 id="配置方法"><a href="#配置方法" class="headerlink" title="配置方法"></a>配置方法</h3><ul>
<li><p>准备</p>
<ul>
<li>在 <code>httpd.conf</code> 中开启 <code>mod_vhost_alias.so</code> 模块,并添加一个新的子配置文件 <code>httpd-vhost-alias.conf</code> 方便我们配置。<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">#开启 mod_vhost_alias.so 模块</div><div class="line">LoadModule vhost_alias_module libexec/apache2/mod_vhost_alias.so</div><div class="line">#去掉 LoadModule 前面的注释</div><div class="line">···</div><div class="line">#添加子配置文件</div><div class="line">#Include /private/etc/apache2/extra/httpd-vhost-alias.conf</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>配置</p>
<ul>
<li>打开子配置文件 <code>httpd-vhost-alias.conf</code> ，添加以下配置。<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">UseCanonicalName Off</div><div class="line">VirtualDocumentRoot /data1/www/%0</div><div class="line">&lt;Directory "/data1/www/"&gt;</div><div class="line">  Options None</div><div class="line">  AllowOverride None</div><div class="line">  Order allow,deny</div><div class="line">  Allow from all</div><div class="line">&lt;/Directory&gt;</div></pre></td></tr></table></figure>
</li>
</ul>
<p>保存，并重启 Apache 。</p>
</li>
<li><p>测试</p>
<ul>
<li>分别绑定不同的域名到服务器，并在 <code>/data1/www/</code> 目录下按照不同域名新建目录，将个站点的资源分别放进相应的目录。<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">127.0.0.1 domain1.com</div><div class="line">127.0.0.1 domain2.com</div><div class="line">127.0.0.1 domain3.com</div></pre></td></tr></table></figure>
</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">/data1/www/domain1.com/index.html   <span class="comment">#this is domain1.com test text</span></div><div class="line">/data1/www/domain2.com/index.html   <span class="comment">#this is domain2.com test text</span></div></pre></td></tr></table></figure>
<ul>
<li>浏览器分别访问 <code>domain1.com</code> 和 <code>domain2.com</code> ，查看是否是否能够正确显示出相应内容。</li>
<li>在 <code>/data1/www/</code> 目录下继续添加 <code>/data1/www/domain3.com/index.html</code> ,然后继续用浏览器访问 <code>domain3.com</code> ，查看是否能将 <code>/data1/www/domain3.com/index.html</code> 的内容输出。</li>
</ul>
</li>
</ul>
<ul>
<li><a href="http://httpd.apache.org/docs/current/vhosts/mass.html" target="_blank" rel="external">更多配置参数及方法，请查看</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;虚拟主机指的是在单一机器上运行多个网站。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;常见的共有三种不同的配置方式。&lt;ul&gt;
&lt;li&gt;基于域名&lt;/li&gt;
&lt;li&gt;基于端口（需要增加相对应的 &lt;code&gt;Listen&lt;/code&gt; 指令）&lt;/li&gt;
&lt;li&gt;基于IP&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;动态虚拟主机配置。&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="Apache" scheme="https://weizhimiao.github.io/categories/Apache/"/>
    
    
      <category term="Apache虚拟主机" scheme="https://weizhimiao.github.io/tags/Apache%E8%99%9A%E6%8B%9F%E4%B8%BB%E6%9C%BA/"/>
    
  </entry>
  
  <entry>
    <title>.htaccess 文件功能及配置介绍</title>
    <link href="https://weizhimiao.github.io/2016/09/05/htaccess%20%E6%96%87%E4%BB%B6%E5%8A%9F%E8%83%BD%E5%8F%8A%E9%85%8D%E7%BD%AE%E6%95%B4%E7%90%86/"/>
    <id>https://weizhimiao.github.io/2016/09/05/htaccess 文件功能及配置整理/</id>
    <published>2016-09-05T02:00:00.000Z</published>
    <updated>2016-09-05T11:44:28.000Z</updated>
    
    <content type="html"><![CDATA[<p>URL重定向是<code>.htaccess</code> 的重头戏，它可以将长地址转为短地址、将动态地址转为静态地址、重定向丢失的页面、防止盗链、实现自动语言转换等等。</p>
<p><strong>难点：</strong> 正则表达式的运用和理解。</p>
<a id="more"></a>
<h2 id="准备-mod-rewrite"><a href="#准备-mod-rewrite" class="headerlink" title="准备 mod_rewrite"></a>准备 mod_rewrite</h2><p>要实现上述功能，首先得装上mod_rewrite 模块，并确保启用了该模块。</p>
<p>一般我们会这样设置。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;IfModule mod_rewrite.c&gt;</div><div class="line">  Options +FollowSymlinks</div><div class="line">  RewriteEngine on</div><div class="line">  ...</div><div class="line"></div><div class="line">&lt;IfModule&gt;</div></pre></td></tr></table></figure></p>
<p><strong><em>Tips:</em></strong></p>
<ul>
<li>FollowSymlinks:必须启用，这是rewrite引擎的安全要求。</li>
<li>RewriteEngine：用于启用rewrite引擎。</li>
</ul>
<h2 id="URL重写及重定向"><a href="#URL重写及重定向" class="headerlink" title="URL重写及重定向"></a>URL重写及重定向</h2><p>利用<code>.htaccess</code> 文件可以实现对URL的重写（rewrite）与重定向（redirect）</p>
<ol>
<li>将<code>.html</code> 映射到<code>.php</code><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Options +FollowSymlinks</div><div class="line">RewriteEngine on</div><div class="line">RewriteRule ^(.*)\.html$ $1.php [NC]</div></pre></td></tr></table></figure>
</li>
</ol>
<p><strong><em>注</em></strong></p>
<ul>
<li>必须保证服务器上有对应的<code>.php</code> 文件，否则会报 404</li>
<li>浏览器和搜索引擎可同事用<code>.html</code> 和<code>.php</code> 访问到网页。</li>
<li>[NC] 表示不区分大小写</li>
</ul>
<ol>
<li>临时重定向（R=302）与永久重定向（R=301）<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">RewriteEngine on</div><div class="line">RewriteBase /</div><div class="line">RewriteRule ^(.*)\.html $1.php [R,NC,L]</div></pre></td></tr></table></figure>
</li>
</ol>
<p><strong><em>注</em></strong></p>
<ul>
<li><p>RewriteBase 定义了重写基准目录。</p>
<blockquote>
<p>例如，如虚拟机站点设在 /var/www目录下，删除这行这行将会导致重定向到 <a href="http://your-domain/var/www/1.php" target="_blank" rel="external">http://your-domain/var/www/1.php</a>. 显然这不是我们想要的。如果RewriteBase /base/，那么将会重定向到<a href="http://your-domain/base/1.php" target="_blank" rel="external">http://your-domain/base/1.php</a>.</p>
</blockquote>
</li>
<li><p>对于重写基准目录，我们还可以将 <code>$1.php</code> 变成 <code>/$1.php</code> 实现直接变换，这是就可以将 <code>RewriteBase</code> 省略。</p>
</li>
<li><p>字母<code>L</code>，表示如果能匹配到本条规则，则本条规则是最后一条（Last），忽略之后的规则。</p>
<p>永久重定向（R=301）</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">RewriteEngine on</div><div class="line">RewriteRule ^(.*)$ http://newdomain/$1 [R=301,NC,L]</div></pre></td></tr></table></figure>
</li>
</ul>
<ol>
<li><p>为什么要用重定向</p>
<ol>
<li>通过重定向，浏览器知道页面位置发生变化，从而会改变地址栏到新的地址。</li>
<li>通过重定向，搜索引擎能够发现位置发生变化，从而进行更新。</li>
<li>R=302，R=301都是亲搜索引擎的，是SEO的一个重要手段。</li>
<li><strong>URL重写用于将页面映射到本站的另一页面，而重写到另一个域名下，则安重定向处理。</strong></li>
</ol>
</li>
<li><p>长短地址处理   </p>
<blockquote>
<p>利用URL重写，方便实现长短地址转换。</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">RewriteEngine on</div><div class="line">RewriteRule ^grab /public/files/download/download.php</div></pre></td></tr></table></figure>
</li>
</ol>
<p>若访问 <a href="http://your-domain/grab?file=my.zip" target="_blank" rel="external">http://your-domain/grab?file=my.zip</a>, 则页面会实际执行该页面 <a href="http://your-domain/public/files/download/download.php?file=my.zip" target="_blank" rel="external">http://your-domain/public/files/download/download.php?file=my.zip</a></p>
<ol>
<li>去掉WWW<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">RewriteEngine on</div><div class="line">RewriteCond %&#123;HTTP_HOST&#125; ^(.*)$</div><div class="line">RewriteRule (.*) http://www\.%1/$1 [R=301,L]</div></pre></td></tr></table></figure>
</li>
</ol>
<p><strong><em>注:</em></strong></p>
<ul>
<li>RewriteCond 定义了规则的生效条件。即，一个RewriteRule规则之前可以有一个或者多个RewriteCond指令。</li>
<li>语法：RewriteCond TestString CondPattern [flags]</li>
</ul>
<ol>
<li><p>加上www</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">RewriteEngine on</div><div class="line">RewriteCond %&#123;HTTP_HOST&#125; ^(.*)$</div><div class="line">RewriteRule (.*) http://www\.%1/$1 [R=301,L]</div></pre></td></tr></table></figure>
</li>
<li><p>支持多域名访问</p>
<blockquote>
<p>如果有些主机不支持多域名，那么<code>.htaccess</code> 或许也可以解决。</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">#one.com</div><div class="line">RewriteCond %&#123;HTTP_HOST&#125; one.com</div><div class="line">RewriteCond %&#123;REQUEST_URI&#125; !^/one</div><div class="line">RewriteRule ^(.*)$ /one/$1 [L]</div><div class="line">#two.com</div><div class="line">RewriteCond %&#123;HTTP_HOST&#125; two.com</div><div class="line">RewriteCond %&#123;REQUEST_URI&#125; !^/two</div><div class="line">RewriteRule ^(.*)$ /two/$1 [L]</div></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="改写查询字符串-QUERY-STRING"><a href="#改写查询字符串-QUERY-STRING" class="headerlink" title="改写查询字符串 QUERY_STRING"></a>改写查询字符串 QUERY_STRING</h2><p>所谓查询字符串，就是值URL问号之后的部分。</p>
<ol>
<li>利用QSA转换 QUERY_STRING<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">RewriteEngine on</div><div class="line">RewriteRule /page/(.+) /page.php?page=$1 [QSA]</div></pre></td></tr></table></figure>
</li>
</ol>
<p><strong><em>注：</em></strong></p>
<ol>
<li>将会把 <code>/page/123?one=two</code> 映射到 <code>/page.php?page=123&amp;one=two</code>.</li>
<li>如果没有[QAS] 标志，则会映射到<code>page.php?page=123</code>.</li>
<li><p>如果没有用到小括号正则表达式，就不需要 QSA</p>
<blockquote>
<p>例，将 <code>/simple/flat/link</code> =&gt; server-side.php?first-var=flat&amp;second-var=link</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">RewriteEngine on</div><div class="line">RewriteRule ^/simple/([^/]+)/([^/]+)/? /server-side.php?first-var=$1&amp;second-var=$2 [QSA]</div></pre></td></tr></table></figure>
</li>
</ol>
<ol>
<li><p>利用RewriteCond 改写 QUERY_STRING</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">RewriteEngine On</div><div class="line">RewriteCond %&#123;QUERY_STRING&#125; foo=(.*)</div><div class="line">RewriteRule ^grab(.*) /page.php?bar=%1</div></pre></td></tr></table></figure>
<ul>
<li>该规则将访问请求<a href="http://mysite/grab?foo=bar转换为http://mysite/page.php?bar=bar" target="_blank" rel="external">http://mysite/grab?foo=bar转换为http://mysite/page.php?bar=bar</a></li>
<li>RewriteCond用于捕获查询字符串（QUERY_STRING）中变量foo的值，并存储在%1中</li>
<li>QUERY_STRING是Apache定义的“变量=值”向量（数组）</li>
</ul>
</li>
<li><p>RewriteCond与QSA双剑齐发</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">RewriteEngine On</div><div class="line">RewriteCond %&#123;QUERY_STRING&#125; foo=(.+)</div><div class="line">RewriteRule ^grab/(.*) /%1/index.php?file=$1 [QSA]</div></pre></td></tr></table></figure>
<ul>
<li>会把/grab/foobar.zip?level=5&amp;foo=bar 映射到 /bar/index.php?file=foobar.zip&amp;level=5&amp;foo=bar</li>
<li>转换后根目录是bar目录</li>
<li>foobar.zip?level=5中的“问号”变成了foobar.zip&amp;level=5中的“与”符号</li>
</ul>
</li>
<li><p>剥离查询字符串</p>
<blockquote>
<p>只需在要开始剥离的链接后面加个“问号”，并且不要启用QSA标志，就可剥离查询字符串</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">RewriteEngine On</div><div class="line"># Whatever QS is</div><div class="line">RewriteCond %&#123;QUERY_STRING&#125; .</div><div class="line"># I don&apos;t want it with Question mark</div><div class="line">RewriteRule foo.php(.*) /foo.php? [L]</div></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="访问控制"><a href="#访问控制" class="headerlink" title="访问控制"></a>访问控制</h2><ol>
<li><p>文件访问控制</p>
<blockquote>
<p>利用Order、Files及FilesMatch命令实现的访问控制可以满足大部分要求，但是当用户被拒绝时，他们看到的是硕大的“403 Forbidden”，如果你不想伤害用户的感情，就需要显示一些别的东西，通过Rewrite就可以实现这个特性：</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">RewriteEngine On</div><div class="line">RewriteCond %&#123;REQUEST_FILENAME&#125; !^(.+)\.css$</div><div class="line">RewriteCond %&#123;REQUEST_FILENAME&#125; !^(.+)\.js$</div><div class="line">RewriteCond %&#123;REQUEST_FILENAME&#125; !special.zip$</div><div class="line">RewriteRule ^(.+)$ /chat/ [NC]</div></pre></td></tr></table></figure>
<ul>
<li>该规则将仅允许用户请求.css, .js类型的文件，还有special.zip文件</li>
<li>RewriteRule 后面指定了限制规则：映射到/char/目录下处理</li>
<li>RewriteCond 后面的“感叹号”(!)起到了“否定”作用，它表明，对不满足后面正则表达式者应用RewriteRule规则，也就是对当前类型的文件将不应用规则</li>
<li>RewriteCond 之间是以逻辑“与”连接的，也就是只有当三个条件都不满足时才执行RewriteRule</li>
<li>该规则也会限制访问.htm, .jpg等格式</li>
<li>该规则不可以放在虚拟站点根目录（/）下，否则会死循环</li>
<li>如果是二级目录，如/test/，那么传入RewriteCond的参数是以/test/开始的，因此从(.+)获得的文件名也含有/test/，读者必须对此多加小心</li>
<li>要想仅获得文件名，可以将(.+)替换成([^/]+)，并且去掉符号^，如下所示：<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">RewriteEngine On</div><div class="line">RewriteCond %&#123;REQUEST_FILENAME&#125; !([^/]+)\.css$</div><div class="line">RewriteCond %&#123;REQUEST_FILENAME&#125; !([^/]+)\.js$</div><div class="line">RewriteRule ^(.+)$ /chat/ [NC]</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>用.htaccess阻止User-agent</p>
<blockquote>
<p>User-agent用于浏览器向服务器“自报家门”，更确切的说是所有HTTP客户端都得用User-agent向服务器“自报家门”，以便服务器对不同的客户端作出不同响应。比如，某站点可能需要对浏览器、搜索引擎crawl还有各类下载工具作出不同的响应。服务器就是通过所谓的User-agent进行区分的。<br>如果你的服务器提供某些资源的下载，那么你就必须多加小心诸如“迅雷”等下载软件，因为它们可能把你网站资源吸干，并且影响你的正常访客访问。</p>
</blockquote>
<p>为此，我们可以利用Rewrite限制某些UA的访问：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">RewriteEngine on</div><div class="line">RewriteCond %&#123;HTTP_USER_AGENT&#125; 2.0.50727 [NC]</div><div class="line">RewriteRule . abuse.txt [L]</div></pre></td></tr></table></figure>
<ul>
<li>该规则限制“迅雷”客户端下载资源，并将下载文件重置到abuse.txt</li>
<li>HTTP_USER_AGENT是Apache的内置变量</li>
<li>2.0.50727是迅雷User-agent的特征字符串</li>
<li>RewriteRule后面的“点”表示“任意URI”，也就是不管请求的是什么，都输出abuse.txt</li>
</ul>
<p>通常，我们不会仅限制一个UA。利用[OR]即可实现对多个UA作出统一处理：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">RewriteEngine on</div><div class="line">RewriteCond %&#123;HTTP_USER_AGENT&#125; 2.0.50727 [NC,OR]</div><div class="line">RewriteCond %&#123;HTTP_USER_AGENT&#125; ^BlackWidow [NC,OR]</div><div class="line"># etc..</div><div class="line">RewriteCond %&#123;HTTP_USER_AGENT&#125; ^Net\ Vampire [NC]</div><div class="line">RewriteRule . abuse.txt [L]</div></pre></td></tr></table></figure>
</li>
<li><p>用.htaccess阻止盗链(hot-linking)</p>
<blockquote>
<p>盗链，特别是图片，是非常可耻的！哪怕将图片复制到自己服务器上，也比盗用他人的图片链接来得光彩！</p>
</blockquote>
<p>.htaccess的Rewrite功能可以提供非常简单、有效的方法阻止这种可耻行为：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">RewriteEngine On</div><div class="line">RewriteCond %&#123;HTTP_REFERER&#125; !^$</div><div class="line">RewriteCond %&#123;HTTP_REFERER&#125; !^http://(www\.)?lesca\.me/ [NC]</div><div class="line">RewriteCond %&#123;REQUEST_URI&#125; !hotlink\.png [NC]</div><div class="line">RewriteRule .*\.(gif|jpg|png)$ /hotlink.png [NC]</div></pre></td></tr></table></figure>
</li>
</ol>
<p>简单解释一下该规则的功能：</p>
<ul>
<li>除本站以外其他网站都不得引用本站图片，具体可以理解为</li>
<li>如果引用站点为“空”或者是“本站”，或者，所引用对象是“hotlink.png”，那么就允许访问</li>
<li>再次提醒，RewriteCond之间默认的逻辑连接词是逻辑“与”</li>
<li>这里的难点是理解逻辑转换，即德·摩根定律</li>
</ul>
<h2 id="htaccess-缺点"><a href="#htaccess-缺点" class="headerlink" title="htaccess 缺点"></a>htaccess 缺点</h2><p>说了这么多<code>.htaccess</code> 可以实现这么多的功能，那么它有没有什么缺点呢?</p>
<p>答案是，当然有。由于开启了<code>.htaccess</code> 文件，当我们访问了一个地址对应到服务器端某个目录之后<code>Apache</code> 会遍历并解析每层目录下的<code>.htaccess</code> 文件，所有对服务器性能会有一定的影响。</p>
<p>但是具体影响有多大，要不要使用还需要看具体的环境。或者需要进行前后对比在进行选择。</p>
<h2 id="htaccess-生成工具"><a href="#htaccess-生成工具" class="headerlink" title="htaccess 生成工具"></a>htaccess 生成工具</h2><p>说了这么多，貌似真正配置起来还是非常麻烦。不用着急目前网上有非常多<code>htaccess</code> 在线生成工具，可大大方便我们进行完成各种配置。</p>
<p>如：<a href="http://htaccess.uuz.cc/" target="_blank" rel="external">smarty .htaccess :http://htaccess.uuz.cc/</a></p>
<p><a href="http://lesca.me/archives/htaccess-rewrite.html" target="_blank" rel="external">转自:Lesca技术宅</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;URL重定向是&lt;code&gt;.htaccess&lt;/code&gt; 的重头戏，它可以将长地址转为短地址、将动态地址转为静态地址、重定向丢失的页面、防止盗链、实现自动语言转换等等。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;难点：&lt;/strong&gt; 正则表达式的运用和理解。&lt;/p&gt;
    
    </summary>
    
      <category term="Apache" scheme="https://weizhimiao.github.io/categories/Apache/"/>
    
    
      <category term="Apache" scheme="https://weizhimiao.github.io/tags/Apache/"/>
    
      <category term=".htaccess" scheme="https://weizhimiao.github.io/tags/htaccess/"/>
    
  </entry>
  
  <entry>
    <title>Apache分层与模块化体系结构小结</title>
    <link href="https://weizhimiao.github.io/2016/08/26/Apache%E5%88%86%E5%B1%82%E4%B8%8E%E6%A8%A1%E5%9D%97%E5%8C%96%E7%BB%93%E6%9E%84%E4%BD%93%E7%B3%BB%E5%B0%8F%E7%BB%93/"/>
    <id>https://weizhimiao.github.io/2016/08/26/Apache分层与模块化结构体系小结/</id>
    <published>2016-08-26T02:10:00.000Z</published>
    <updated>2016-09-02T02:25:59.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Apache的分层体系结构"><a href="#Apache的分层体系结构" class="headerlink" title="Apache的分层体系结构"></a>Apache的分层体系结构</h2><p>最新版本的Apache按照其功能一般会被划分为五层，</p>
<ol>
<li><p>操作系统平台功能层</p>
<blockquote>
<p>各操作系统本身提供的底层功能，比如进程、线程管理,进程和线程之间通信、网络套接字通信、文件操作等</p>
</blockquote>
</li>
<li><p>可移植运行库层（操作系统适配层）</p>
<blockquote>
<p>封装不同操作系统的底层细节，向上提供统一的接口。</p>
</blockquote>
</li>
<li><p>Apache核心功能层</p>
<blockquote>
<p>提供最基本的HTTP服务功能，对其他模块提供对应的API。</p>
</blockquote>
</li>
<li><p>Apache可选功能层</p>
<blockquote>
<p>这一层通常指 Apache模块，Apache核心功能层提供不了的功能交给不同的Apache模块来处理。</p>
</blockquote>
</li>
<li><p>Apache第三方功能层</p>
<blockquote>
<p>Apache的一些模块中用到的一些第三方开发的类库等</p>
</blockquote>
</li>
</ol>
<p><img src="http://n.sinaimg.cn/games/3ece443e/20160826/apacheFenCengYuMoKuaiHuaTiXiJieGou.png" alt="Apache的分层体系结构"></p>
<a id="more"></a>
<p><strong>Apache源码目录结构简介</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">build/    #</div><div class="line">docs/     #包含一些相关文档</div><div class="line">include/  #包含一些必须的头文件</div><div class="line">modules/  #包含Apache的各种模块</div><div class="line">os/       #各种操作系统的依赖文件</div><div class="line">server/   #Apache核心功能（请求处理、协议处理、多处理模块mpm等）</div><div class="line">srclib/   #Apache开发和运行需要的基础库（Apr_util,apr,pcre）</div><div class="line">support/  #一些辅助工具等</div><div class="line">test/     #APR的测试函数</div></pre></td></tr></table></figure>
<h3 id="操作系统平台功能层"><a href="#操作系统平台功能层" class="headerlink" title="操作系统平台功能层"></a>操作系统平台功能层</h3><p>Apache实质上还是运行在操作系统上面的应用程序，因此必须使用操作系统本身提供的底层功能，比如进程和线程、进程和线程的通信，网络套接字通信和文件操作等。</p>
<h3 id="可移植运行库（操作系统适配层，APR）"><a href="#可移植运行库（操作系统适配层，APR）" class="headerlink" title="可移植运行库（操作系统适配层，APR）"></a>可移植运行库（操作系统适配层，APR）</h3><p>APR(Apache portable runtime) 是操作系统的适配层，通过APR也实现了Apache的跨平台。因为不同的操作系统提供的底层API不同，也就是实现同一个操作所用的函数方法不同，这时在Apache和操作系统中间设计一个APR，这样APR根据不同的操作系统分别实现一个相同的功能，这样apache可以调用APR的提供的一个API接口。</p>
<p>例如，如果Apache要创建一个进程，这时会调用 APR中的 apr_proc_create()函数，此时APR会自动识别操作系统的类型根据不同的类型调用操作系统通过的API，如是Unix系列则会调用unix中的fork()方法实现创建进程；如果是windows系统，则调用createProcess()创建进程。</p>
<p>所以，Apache在处理与操作系统有关的事物时，不用考虑是基于哪一个操作系统，直接用APR的统一API接口就可，具体的由APR来实现跨操作系统。</p>
<p>实际上任何应用程序都可以借助APR进行跨平台。</p>
<h3 id="Apache核心功能层"><a href="#Apache核心功能层" class="headerlink" title="Apache核心功能层"></a>Apache核心功能层</h3><ol>
<li>核心功能层主要实现Apache的基本功能和核心功能，包括读取和响应HTTP请求，处理HTTP协议；核心功能层包括核心程序和核心模块</li>
</ol>
<p><strong>核心程序</strong> 主要是实现Apache的基本功能：</p>
<ul>
<li>启动和终止apache</li>
<li>处理配置文件(config.c)</li>
<li>接受和处理HTTP连接</li>
<li>读取HTTP请求并对该请求进行处理</li>
<li>处理HTTP协议</li>
</ul>
<p>核心功能层另一个是 <strong>核心模块</strong></p>
<ol>
<li>Apache 最基本的核心功能由apache 核心完成，除此之外，核心无法提供的功能则全部由模块提供。为了允许这些模块能完成控制apache的处理，apache核心程序提供了对应的API；这些API是指每个模块中包含的一系列的函数(核心程序处理HTTP请求的时候用来将信息传递给模块)，以及一些列apr的函数。</li>
</ol>
<h3 id="Apache可选功能层"><a href="#Apache可选功能层" class="headerlink" title="Apache可选功能层"></a>Apache可选功能层</h3><p>Apache有很多模块，包括mod_ssl mod_proxy mod_perl ；apache的文件都是C语言开发的，如果有perl脚本写的模块，必须把mod_perl 模块加载，否则不能运行</p>
<h3 id="Apache第三方功能库"><a href="#Apache第三方功能库" class="headerlink" title="Apache第三方功能库"></a>Apache第三方功能库</h3><p>apahe的一些模块会使用到第三方的开发库，比如 mod_ssl 使用了 openssl；mod_perl 使用了perl 开发库，这些库并不属于apache，是第三方库。</p>
<h2 id="Apache模块化体系结构"><a href="#Apache模块化体系结构" class="headerlink" title="Apache模块化体系结构"></a>Apache模块化体系结构</h2><p>Apache体系结构的模块化特点，主要体现在第三层（核心功能层）与第四层（可选功能层）。Apache采用模块化体系结构，使它作为一个HTTP服务器的大部分功能都被分割为相互独立的模块，使我们能够通过增加或者删除模块就可以扩展和修改Apache的功能。</p>
<h3 id="核心模块-amp-可选模块"><a href="#核心模块-amp-可选模块" class="headerlink" title="核心模块&amp;可选模块"></a>核心模块&amp;可选模块</h3><p>Apache中大部分模块都是可选择的，这意味着这些模块的缺失至多影响Apache的功能完整性，而不影响起运行。但有两个模块是必须的，mod_core和mod_so。</p>
<h4 id="核心模块"><a href="#核心模块" class="headerlink" title="核心模块"></a>核心模块</h4><ul>
<li><strong>mod_core:</strong> 负责处理配置文件中的大部分配置指令，并根据这些指令运行Apache。</li>
<li><strong>mod_so:</strong> 负责动态加载其余的模块。没有该模块，其余的模块就无法被加载使用。</li>
<li><strong>MPM模块</strong> 即，多进程处理模块，虽然该模块是一个可选模块，但一般情况下，我们都会使用，所以我们将其也视为核心模块。<blockquote>
<p>前两个模块我们必须静态编译。mpm模块的话，当我们在编译Apache是已经确定使用某一MPM模块之后通过也可将其采用静态编译的方式进行编译。但是如果我们想要在Apache安装之后动态修改MPM模式的话，那么在Apache编译安装的时候，MPM模块就需要通过动态编译的方式进行编译安装。</p>
</blockquote>
</li>
</ul>
<h4 id="非核心模块"><a href="#非核心模块" class="headerlink" title="非核心模块"></a>非核心模块</h4><p>一些常见的可选模块：</p>
<ul>
<li><p>mod_alias</p>
<blockquote>
<p>Provides for mapping different parts of the host filesystem in the document tree and for URL redirection<br>为不同的url地址映射到文件系统的指定位置，即『起别名』</p>
</blockquote>
</li>
<li><p>mod_autoindex</p>
<blockquote>
<p>用于生成目录索引</p>
</blockquote>
</li>
<li><p>mod_cache</p>
<blockquote>
<p>RFC 2616标准的HTTP缓存的过滤器。是apache中基于URI键的内容动态缓冲(内存或磁盘)。<br>从Apache2.2起，mod_cache和mod_file_cache将不再是试验模块，它们已经足够稳定，可以用于实际生产中了。这些缓冲体系提供了一个强有力的途径来加速原始web服务器(origin webserver)和代理服务器(proxy)的HTTP处理速度。</p>
</blockquote>
</li>
<li><p>mod_cgi</p>
<blockquote>
<p> 执行cgi脚本</p>
</blockquote>
</li>
<li><p>mod_dir</p>
<blockquote>
<p>目录的索引可以来自两个来源：</p>
<ul>
<li>由用户编写的文件，通常被称为 index.html。该DirectoryIndex指令设置该文件的名称。这是由控制 mod_dir。</li>
<li>否则，由服务器生成的列表。这是通过提供mod_autoindex。</li>
</ul>
<p>这两种功能是分开的，这样如果你想你可以完全删除（或更换）自动索引生成。</p>
<p>当服务器收到一个URL请求的“斜线”重定向发出 <a href="http://servername/foo/dirname那里" target="_blank" rel="external">http://servername/foo/dirname那里</a> dirname是一个目录。目录需要一个结尾斜杠，所以mod_dir发出一个重定向 <a href="http://servername/foo/dirname/。" target="_blank" rel="external">http://servername/foo/dirname/。</a></p>
</blockquote>
</li>
<li><p>mod_filter</p>
<blockquote>
<p>该模块实现输出内容过滤器的智能，上下文相关的配置。例如，Apache可以被配置为处理不同的内容类型通过不同的过滤器，即使当内容类型是不是预先已知的（例如，在一个代理）。</p>
</blockquote>
</li>
<li><p>mod_include</p>
<blockquote>
<p>服务器端包含</p>
</blockquote>
</li>
<li><p>mod_isapi</p>
<blockquote>
<p>ISAPI Extensions within Apache for Windows<br>本模块实现了互联网服务扩展应用程序编程接口(Internet Server extension API)。本模块使得Windows上的Apache能有限地实现互联网服务扩展(比如调用ISAPI的动态连接库)。</p>
</blockquote>
</li>
<li><p>mod_mime</p>
<blockquote>
<p>关联请求的文件名的扩展名与文件的行为（处理器和过滤器）和内容（MIME类型，语言，字符集和编码)</p>
</blockquote>
</li>
<li><p>mod_mime_magic</p>
<blockquote>
<p>通过读取部分文件内容自动猜测文件的MIME类型<br>本模块采取Unix系统下file(1)命令相同的方法：检查文件开始的几个字节，来判定文件的MIME类型。它被作为当mod_mime无法解析时，用来处理的”第二道防线”。</p>
</blockquote>
</li>
<li><p>mod_proxy</p>
<blockquote>
<p>用于提供代理服务，能够支持的包括正向代理、反向代理、透明代理、缓存、负载均衡，HTTP代理、FTP代理、SSL代理等若干强大的功能.</p>
</blockquote>
</li>
<li><p>mod_rewrite</p>
<blockquote>
<p>提供了一个基于规则的重写动态URL重写引擎。</p>
</blockquote>
</li>
<li><p>mod_session</p>
<blockquote>
<p>会话支持</p>
</blockquote>
</li>
<li><p>mod_ssl</p>
<blockquote>
<p>提供使用安全套接字层（SSL）和传输层安全（TLS）协议强加密。（https协议必须）</p>
</blockquote>
</li>
<li><p>mod_status</p>
<blockquote>
<p>提供有关服务器活动和性能信息</p>
</blockquote>
</li>
<li><p>mod_vhost_alias</p>
<blockquote>
<p>虚拟主机配置支持</p>
</blockquote>
</li>
</ul>
<h3 id="静态模块-amp-动态模块"><a href="#静态模块-amp-动态模块" class="headerlink" title="静态模块&amp;动态模块"></a>静态模块&amp;动态模块</h3><h4 id="概念-amp-区别"><a href="#概念-amp-区别" class="headerlink" title="概念&amp;区别"></a>概念&amp;区别</h4><p><strong>什么是静态？</strong>  其实就是编译的时候所有的模块自己编译进 httpd 这个文件中 ，启动的时候这些模块就已经加载进来了，也就是可以使用了。</p>
<p>查看当前Apache通过静态编译的模块<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">[root@MyServer ~]# httpd -l</div><div class="line">Compiled in modules:</div><div class="line">core.c</div><div class="line">mod_so.c</div><div class="line">http_core.c</div><div class="line">event.c</div></pre></td></tr></table></figure></p>
<p><strong>那么什么是动态？</strong>  静态是直接编译进httpd中， 那么动态显然就不编译进去了，也就是你启动的时候根本不会加载这个模块， 而是给你一个module.so 文件，你一定要使用 loadmodule 这个语法来加载，这个模块才有效。</p>
<p><strong><em>配置方法：</em></strong><br>静态的模块通常在http.conf中用<ifmodule></ifmodule> 来配置，动态的要先loadmoule来加载，然后再<ifmodule></ifmodule>配置。<br>官方说静态的比动态的在性能方面多5%左右。</p>
<p><strong><em>比较：</em></strong><br>相对来说，静态的效率高些，而动态方式配置方面灵活。想想如果编译进去的C这个module你想升级或者去掉，静态方式的就只能重新编译Apache了。</p>
<p>下面这句在Apache源文件夹下运行，可以查看默认情况下Apache都给你装了那些module进去：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">./configure –help | grep disable</div></pre></td></tr></table></figure></p>
<p>####</p>
<h4 id="模块管理"><a href="#模块管理" class="headerlink" title="模块管理"></a>模块管理</h4><h5 id="1-模块的类型："><a href="#1-模块的类型：" class="headerlink" title="1. 模块的类型："></a>1. 模块的类型：</h5><ul>
<li>基本(B)模块默认包含，必须明确禁用；</li>
<li>扩展(E)/实验(X)模块默认不包含，必须明确启用。</li>
</ul>
<p>那么，针对以上这些类型的模块，在编译时有以下几种操作方式：</p>
<p><strong>–disable-MODULE</strong><br>禁用MODULE模块(仅用于基本模块)</p>
<p><strong>–enable-MODULE=shared</strong><br>将MODULE编译为DSO(可用于所有模块)</p>
<p><strong>–enable-MODULE=static</strong><br>将MODULE静态连接进核心(仅用于扩展和实验模块)</p>
<p><strong>–enable-mods-shared=MODULE-LIST</strong><br>将MODULE-LIST中的所有模块都编译成DSO(可用于所有模块)</p>
<p><strong>–enable-modules=MODULE-LIST</strong><br>将MODULE-LIST静态连接进核心(可用于所有模块)</p>
<p><strong><em>针对–enable-modules和–enable-mods-shared有两个懒办法就是 most参数和all参数，分别表示“很多的”和“所有”。</em></strong><br><strong>例如：</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">mod_alias是个基本模块，不想安装的话就： --disable-alias</div><div class="line">mod_rewrite是个扩展模块，想动态加载它：--enable-rewrite=shared，想静态加载就是：--enable-rewrite=static</div><div class="line">想静态编译mod_alias和mod_rewrite：--enable-modules=&apos;alias rewrite&apos;</div><div class="line">想动态编译mod_alias和mod_rewrite：--enable-mods-shared=&apos;alias rewrite&apos;</div></pre></td></tr></table></figure></p>
<h5 id="2-动态模块管理"><a href="#2-动态模块管理" class="headerlink" title="2. 动态模块管理"></a>2. 动态模块管理</h5><p><strong>Tips:</strong> 让Apache日后可以动态编译和加载模块：<br>如果想让Apache日后可以支持动态编译(DSO)更多的module，需要在初次安装时把so这个模块编译到核心（即，静态编译）。</p>
<blockquote>
<p>如果编译中包含任何DSO模块，则mod_so会被自动包含进核心。如果希望核心以后能够装载DSO，但不实际编译任何DSO模块，则需明确指定：</p>
<ul>
<li>针对apache1.x: –enable-module=so</li>
<li>针对apache2.x: –enable-so=static</li>
</ul>
</blockquote>
<p>针对Apache2.2.x的一些例子：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">最大化静态安装Apache:</div><div class="line">./configure --prefix=/usr/local/apache --enable-modules=all</div><div class="line">最大化动态安装Apache:</div><div class="line">./configure --prefix=/usr/local/apache --enable-mods-shared=all</div><div class="line">静态安装rewrite、动态安装deflate以及headers</div><div class="line">./configure --prefix=/usr/local/apache --enable-rewrite=static --enable-deflate=shared --enable-headers=shared</div><div class="line">不安装基本的alais，保留以后的扩展DSO能力：</div><div class="line">./configure --prefix=/usr/local/apache --enable-so=static --disable-alias</div></pre></td></tr></table></figure></p>
<h5 id="利用APXS工具动态为Apache编译新的DSO（动态共享对象）"><a href="#利用APXS工具动态为Apache编译新的DSO（动态共享对象）" class="headerlink" title="利用APXS工具动态为Apache编译新的DSO（动态共享对象）"></a>利用APXS工具动态为Apache编译新的DSO（动态共享对象）</h5><p>一般如果我们需要开启或者关闭某一些模块，只需要在 <code>httpd.conf</code> 中注释相应的模块的加载指令或者去掉指令前面的注释。<br>但如果我们需要的模块在 Apache编译安装的时候没有编译进去，我们可以用APXS工具来动态编译，并加入到Apache中。</p>
<p>APXS,是一个给Apache服务器编译和安装扩展模块的工具。即将一个或者多个源代码或者目标文件编译成一个动态共享对象（DSO），然后可以通过Apache的 LoadModule 指令加载运行。<br>因此，要使用该工具，我们的Apache必须支持DSO特性，即已经安装有mod_so 模块，否则安装会报错。</p>
<p>apxs命令选项说明：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">apxs -g [ -S name=value ] -n modname</div><div class="line">apxs -q [ -v ] [ -S name=value ] query ...</div><div class="line">apxs -c [ -S name=value ] [ -o dsofile ] [ -I incdir ] [ -D name=value ] [ -L libdir ] [ -l libname ] [ -Wc,compiler-flags ] [ -Wl,linker-flags ] files ...</div><div class="line">apxs -i [ -S name=value ] [ -n modname ] [ -a ] [ -A ] dso-file ...</div><div class="line">apxs -e [ -S name=value ] [ -n modname ] [ -a ] [ -A ] dso-file ...</div></pre></td></tr></table></figure></p>
<p>常用选项：</p>
<ul>
<li>-n modname<blockquote>
<p>明确的设置模块名称, -i(安装)和-g（模板生成）选项</p>
</blockquote>
</li>
</ul>
<p>执行选项：</p>
<ul>
<li>-q<blockquote>
<p>设置编译httpd时的变量和环境</p>
</blockquote>
</li>
</ul>
<p>配置选项：</p>
<ul>
<li>-S name=value<blockquote>
<p>此选项更改apxs的上述设置。</p>
</blockquote>
</li>
</ul>
<p>模板生成选项：</p>
<ul>
<li>-g<blockquote>
<p>该选项将生成一个子目录（名称将取决 -n设置），并会生成两个文件，一个要编译模块的源文件，用来创建模块或作为一个快速启动的apxs机制。另一个，用于编译和安装此模块，如mod_name.cMakefile</p>
</blockquote>
</li>
</ul>
<p>DSO 编译选项</p>
<ul>
<li><p>-c</p>
<blockquote>
<p>表明将进行编译操作。它首先编译C源文件(.c)，到对应的目标文件（.o），然后通过连接这些目标文件以及其余的目标文件（.a和.a）构建一个动态的共享对象dsofile</p>
</blockquote>
</li>
<li><p>-o dsofile</p>
<blockquote>
<p>明确规定创建动态共享对象文件名。如果没有指定，并且不能从文件名猜测到，则会生成 mod_unknow.so</p>
</blockquote>
</li>
<li><p>-D name=value</p>
<blockquote>
<p>直接传给编译命令自定义参数</p>
</blockquote>
</li>
<li><p>-L libdir</p>
<blockquote>
<p>设置编译时将要用到的自定义类库路径</p>
</blockquote>
</li>
<li><p>-l libname</p>
<blockquote>
<p>设置编译时用到的自定义类库名称</p>
</blockquote>
</li>
<li><p>-Wc，compiler-flags</p>
<blockquote>
<p>设置或添加本地编译器特定的选项</p>
</blockquote>
</li>
<li><p>-Wl，linker-flags</p>
<blockquote>
<p>设置或添加本地特定连接的选项。</p>
</blockquote>
</li>
<li><p>-p</p>
<blockquote>
<p>该选项将会使apxs 连接和引用apr/apr-util类库，使用apr/apr-util将会对编译非常有用。</p>
</blockquote>
</li>
</ul>
<p>DSO的安装和配置选项</p>
<ul>
<li><p>-i</p>
<blockquote>
<p>表明安装操作，安装一个或多个动态共享对象到服务器的模块目录</p>
</blockquote>
</li>
<li><p>-a</p>
<blockquote>
<p>自动添加 LoadModule 指令到 httpd.conf 配置文件，或者开启该指令。</p>
</blockquote>
</li>
<li><p>-A</p>
<blockquote>
<p>同 -a 选项，但创建的 LoadModule指令是被注释的状态，也就是说该模块已经准备就绪，但没开启。</p>
</blockquote>
</li>
<li><p>-e</p>
<blockquote>
<p>类似于 -a 和 -A 用来编辑 httpd.conf 而不安装该模块。</p>
</blockquote>
</li>
</ul>
<h5 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h5><p>示例：我们有一个可用的Apache 模块 mod_foo.c 想要编译进Apache的DSO。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ apxs -c mod_foo.c</div><div class="line">/path/to/libtool --mode=compile gcc ... -c mod_foo.c</div><div class="line">/path/to/libtool --mode=link gcc ... -o mod_foo.la mod_foo.slo</div><div class="line">$ _</div></pre></td></tr></table></figure></p>
<p>然后，在Apache的配置文件中加入 loadModule 指令加载此共享对象。为了简化该步骤 apxs 提供了自动更新配置文件的的功能选项(-a,-A)。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$ apxs -i -a mod_foo.la</div><div class="line">/path/to/instdso.sh mod_foo.la /path/to/apache/modules</div><div class="line">/path/to/libtool --mode=install cp mod_foo.la /path/to/apache/modules ... chmod 755 /path/to/apache/modules/mod_foo.so</div><div class="line">[activating module `foo&apos; in /path/to/apache/conf/httpd.conf]</div><div class="line">$ _</div></pre></td></tr></table></figure>
<p>这时，我们在httpd.conf 中就能看到这条指令。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">LoadModule foo_module modules/mod_foo.so</div></pre></td></tr></table></figure></p>
<p>如果没有使用 -a 选项自动添加，则需要手动添加进去。</p>
<p>如果想默认不开启该模块，可以使用 -A 选项。即<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ apxs -i -A mod_foo.c</div></pre></td></tr></table></figure></p>
<p><strong>apxs快速测试</strong></p>
<p>我们可以通过创建一个Apache的测试模块，通过对应的Makefile<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">$ apxs -g -n foo</div><div class="line">Creating [DIR] foo</div><div class="line">Creating [FILE] foo/Makefile</div><div class="line">Creating [FILE] foo/modules.mk</div><div class="line">Creating [FILE] foo/mod_foo.c</div><div class="line">Creating [FILE] foo/.deps</div><div class="line">$ _</div></pre></td></tr></table></figure></p>
<p>然后可以立即编译该测试模块到DSO，并加载到Apache。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">$ cd foo</div><div class="line">$ make all reload</div><div class="line">apxs -c mod_foo.c</div><div class="line">/path/to/libtool --mode=compile gcc ... -c mod_foo.c</div><div class="line">/path/to/libtool --mode=link gcc ... -o mod_foo.la mod_foo.slo</div><div class="line">apxs -i -a -n &quot;foo&quot; mod_foo.la</div><div class="line">/path/to/instdso.sh mod_foo.la /path/to/apache/modules</div><div class="line">/path/to/libtool --mode=install cp mod_foo.la /path/to/apache/modules ... chmod 755 /path/to/apache/modules/mod_foo.so</div><div class="line">[activating module `foo&apos; in /path/to/apache/conf/httpd.conf]</div><div class="line">apachectl restart</div><div class="line">/path/to/apache/sbin/apachectl restart: httpd not running, trying to start</div><div class="line">[Tue Mar 31 11:27:55 1998] [debug] mod_so.c(303): loaded module foo_module</div><div class="line">/path/to/apache/sbin/apachectl restart: httpd started</div><div class="line">$ _</div></pre></td></tr></table></figure>
<p>over~</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Apache的分层体系结构&quot;&gt;&lt;a href=&quot;#Apache的分层体系结构&quot; class=&quot;headerlink&quot; title=&quot;Apache的分层体系结构&quot;&gt;&lt;/a&gt;Apache的分层体系结构&lt;/h2&gt;&lt;p&gt;最新版本的Apache按照其功能一般会被划分为五层，&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;操作系统平台功能层&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;各操作系统本身提供的底层功能，比如进程、线程管理,进程和线程之间通信、网络套接字通信、文件操作等&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;可移植运行库层（操作系统适配层）&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;封装不同操作系统的底层细节，向上提供统一的接口。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Apache核心功能层&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;提供最基本的HTTP服务功能，对其他模块提供对应的API。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Apache可选功能层&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;这一层通常指 Apache模块，Apache核心功能层提供不了的功能交给不同的Apache模块来处理。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Apache第三方功能层&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Apache的一些模块中用到的一些第三方开发的类库等&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&quot;http://n.sinaimg.cn/games/3ece443e/20160826/apacheFenCengYuMoKuaiHuaTiXiJieGou.png&quot; alt=&quot;Apache的分层体系结构&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Apache" scheme="https://weizhimiao.github.io/categories/Apache/"/>
    
    
      <category term="Apache分层" scheme="https://weizhimiao.github.io/tags/Apache%E5%88%86%E5%B1%82/"/>
    
      <category term="Apache模块" scheme="https://weizhimiao.github.io/tags/Apache%E6%A8%A1%E5%9D%97/"/>
    
  </entry>
  
  <entry>
    <title>Apache性能监控</title>
    <link href="https://weizhimiao.github.io/2016/08/23/Apache%E6%80%A7%E8%83%BD%E7%9B%91%E6%8E%A7/"/>
    <id>https://weizhimiao.github.io/2016/08/23/Apache性能监控/</id>
    <published>2016-08-23T08:10:00.000Z</published>
    <updated>2016-08-24T03:16:28.000Z</updated>
    
    <content type="html"><![CDATA[<p>谈到服务器性能监控，目前市面上有很多成熟的关于性能监控的产品可供我们使用。比如 <a href="http://www.oneapm.com/ci/feature.html" target="_blank" rel="external">Cloud Insight</a><br>。但通过 Apache本身提供的监控模块或者通过一些简单的bash命令也能实现简单的监控。</p>
<a id="more"></a>
<h2 id="Linux下通过Server-status来监控Apache"><a href="#Linux下通过Server-status来监控Apache" class="headerlink" title="Linux下通过Server-status来监控Apache"></a>Linux下通过Server-status来监控Apache</h2><ol>
<li><p>加载 mod_status.so 模块</p>
<blockquote>
<p>mod_status, Apache状态管理模块</p>
</blockquote>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">#在httpd.conf中加入下面这句或将其前面注释去掉</div><div class="line">LoadModule status_module modules/server_status.so</div></pre></td></tr></table></figure>
</li>
<li><p>修改配置文件</p>
<ul>
<li><p>方式一：直接在 httpd.conf 底部添加以下配置</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&lt;location /c-server-status&gt;</div><div class="line">    setHandle Server-status</div><div class="line">    Order Deny,Allow</div><div class="line">    Deny from nothing</div><div class="line">    Allow from all</div><div class="line">&lt;/location&gt;</div><div class="line">ExtendedStatus on</div></pre></td></tr></table></figure>
</li>
<li><p>方式二：添加到子配置文件中<br>在 httpd.conf 中找到 <code>Include conf/extra/httpd-info.conf</code>,去掉<code>#</code>,<br>在 httpd-info.conf 文件中加入 方式一 中的内容。</p>
</li>
</ul>
<p><strong>Tips：</strong></p>
<ul>
<li><code>&lt;location /c-server-status&gt;</code>: 这个名字可以任意取，最好不要让别人猜到。</li>
<li><code>ExtendedStatus on</code>: 启用扩展状态。该设置仅能用于全局设置，不能在特定的虚拟主机中打开或者关闭。并且，启用该扩展会使服务器运行效率降低。</li>
</ul>
</li>
<li><p>重启Apache</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/usr/local/apache2/bin/httpd -k start|restart|stop</div></pre></td></tr></table></figure>
</li>
<li><p>访问页面</p>
<p><a href="http://your-domain/c-server-status" target="_blank" rel="external">http://your-domain/c-server-status</a></p>
<p><a href="http://your-domain/c-server-status?refresh=5" target="_blank" rel="external">http://your-domain/c-server-status?refresh=5</a></p>
<p><a href="http://www.apache.org/server-status" target="_blank" rel="external">官网示例</a></p>
</li>
<li><p>监控参数</p>
</li>
</ol>
<table>
<thead>
<tr>
<th>参数名称</th>
<th>参数描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>Total Accesses</td>
<td>服务器自启动来接收到的请求连接数</td>
</tr>
<tr>
<td>Total kBytes</td>
<td>传输的总数据量，单位是KB</td>
</tr>
<tr>
<td>CPULoad</td>
<td>NCPU负荷</td>
</tr>
<tr>
<td>Uptime</td>
<td>运行时间，单位秒</td>
</tr>
<tr>
<td>ReqPerSec</td>
<td>每秒请求数</td>
</tr>
<tr>
<td>BytesPerSec</td>
<td>每秒传输数据量，单位B/s</td>
</tr>
<tr>
<td>BytesPerReq</td>
<td>平均每个请求的数据传输量（事实上就是BytesPerSec/BytesPerSec）</td>
</tr>
<tr>
<td>BusyWorkers</td>
<td>在跑的进程数</td>
</tr>
<tr>
<td>IdleWorkers</td>
<td>空闲的进程数</td>
</tr>
</tbody>
</table>
<h2 id="Linux下通过命令来实现监控"><a href="#Linux下通过命令来实现监控" class="headerlink" title="Linux下通过命令来实现监控"></a>Linux下通过命令来实现监控</h2><ol>
<li>ps 查看httpd进程数<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ps -ef | grep httpd | wc -l</div></pre></td></tr></table></figure>
</li>
</ol>
<p>当连接数多了，他就会生出更多进程来处理请求。当然这结果包含 grep httpd 的进程输出，所以一般来说实际进程数比输出结果少1</p>
<ol>
<li>用netstat来查看当前连接数<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$netstat -ant | grep &quot;:80&quot; | wc -l</div></pre></td></tr></table></figure>
</li>
</ol>
<p>连接数目并不等于httpd线程数目，当然连接数目越多，httpd进程数就有可能数会增多。上面的返回结果数目，有可能包括多种连接状态，比如 LISTEN、ESTABLISHED、TIME_WAIT等等，可以加入状态关键字进一步过滤，得到想要的结果。</p>
<ol>
<li><p>实时检测httpd连接数</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">#watch -n 1 -d &quot;pgrep httpd|wc -l&quot;</div></pre></td></tr></table></figure>
</li>
<li><p>计算httpd进程占用内在的平均数</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">#ps aux|grep -v grep|awk &apos;/httpd/&#123;sum+=$6&#125;; END&#123;print sum/n&#125;&apos;</div></pre></td></tr></table></figure>
</li>
<li><p>查看Apache的并发请求数及期TCP连接状态</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">#netstat -n | awk &apos;/^tcp/&#123;++S[$NF]&#125;END&#123;for(a in S) print a, S[a]&#125;&apos;</div><div class="line">返回结果示例：</div><div class="line">LAST_ACK 5</div><div class="line">SYN_RECV 30       #表示正在等待处理的请求数；</div><div class="line">ESTABLISHED 1597  #表示正常数据传输状态；</div><div class="line">FIN_WAIT1 51</div><div class="line">FIN_WAIT2 504</div><div class="line">TIME_WAIT 1057    #表示处理完毕,等待超时结束的请求数</div></pre></td></tr></table></figure>
</li>
</ol>
<p>常见的连接状态</p>
<table>
<thead>
<tr>
<th>状态</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>CLOSED</td>
<td>无连接是活动的或正在进行</td>
</tr>
<tr>
<td>LISTEN</td>
<td>服务器在等待进入呼叫</td>
</tr>
<tr>
<td>SYN_RECV</td>
<td>一个连接请求已经到达,等待确认</td>
</tr>
<tr>
<td>SYN_SENT</td>
<td>应用已经开始,打开一个连接</td>
</tr>
<tr>
<td>ESTABLISHED</td>
<td>正常数据传输状态</td>
</tr>
<tr>
<td>FIN_WAIT1</td>
<td>应用说它已经完成</td>
</tr>
<tr>
<td>FIN_WAIT2</td>
<td>另一边已同意释放</td>
</tr>
<tr>
<td>ITMED_WAIT</td>
<td>等待所有分组死掉</td>
</tr>
<tr>
<td>CLOSING</td>
<td>两边同时尝试关闭</td>
</tr>
<tr>
<td>TIME_WAIT</td>
<td>另一边已初始化一个释放</td>
</tr>
<tr>
<td>LAST_ACK</td>
<td>等待所有分组死掉</td>
</tr>
</tbody>
</table>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;谈到服务器性能监控，目前市面上有很多成熟的关于性能监控的产品可供我们使用。比如 &lt;a href=&quot;http://www.oneapm.com/ci/feature.html&quot;&gt;Cloud Insight&lt;/a&gt;&lt;br&gt;。但通过 Apache本身提供的监控模块或者通过一些简单的bash命令也能实现简单的监控。&lt;/p&gt;
    
    </summary>
    
      <category term="Apache" scheme="https://weizhimiao.github.io/categories/Apache/"/>
    
    
      <category term="Apache 监控" scheme="https://weizhimiao.github.io/tags/Apache-%E7%9B%91%E6%8E%A7/"/>
    
  </entry>
  
  <entry>
    <title>Apache 并行处理模块小结</title>
    <link href="https://weizhimiao.github.io/2016/08/22/Apache%E5%A4%9A%E5%A4%84%E7%90%86%E6%A8%A1%E5%9D%97%E6%95%B4%E7%90%86/"/>
    <id>https://weizhimiao.github.io/2016/08/22/Apache多处理模块整理/</id>
    <published>2016-08-22T14:36:00.000Z</published>
    <updated>2016-08-24T03:16:32.000Z</updated>
    
    <content type="html"><![CDATA[<p>Apache 2.X  支持插入式并行处理模块，称为多路处理模块 MPM，（Multi-Processing Modules）它是一个用于选择和处理网络端口的绑定，接收请求并指派子进程处理来自客户端的请求的一个Apache模块。和其他Apache模块相比，它最大的区别是，在任何时间， 必须有一个，而且只有一个 MPM 加载到服务器中。</p>
<blockquote>
<p>原理就是增加服务器服务进程或线程数量，是服务器可同时处理更多用户请求。</p>
</blockquote>
<a id="more"></a>
<h2 id="如何为Apache选择并安装一个合适的MPM模块"><a href="#如何为Apache选择并安装一个合适的MPM模块" class="headerlink" title="如何为Apache选择并安装一个合适的MPM模块"></a>如何为Apache选择并安装一个合适的MPM模块</h2><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>MPM 必须在编译前夕，配置时指定，然后编译到服务器程序中。</p>
<p>即在执行 configure 时，使用参数 –with-mpm=NAME 来指定一个希望安装的MPM模块。NAME 是指定的 MPM 名称。</p>
<p>例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">./configure --prefix=/usr/local/apache2 --with-mpm=worker</div><div class="line">make &amp; make install</div></pre></td></tr></table></figure></p>
<p>或者也可以编译为支持指定的几种或者全部MPM，之后通过修改配置来更换具体使用哪种MPM。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">--enable-mpms-shared=&apos;prefork worker&apos;</div><div class="line">--enable-mpms-shared=all</div></pre></td></tr></table></figure></p>
<p>例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">./configure --prefix=/usr/local/apache2 --enable-mpms-shared=all</div><div class="line">···</div></pre></td></tr></table></figure></p>
<p>安装成功之后，会在modules文件夹下，自动编译出我们指定的MPM的so模块，在httpd.conf中修改Apache的多处理模式MPM可以切换不同MPM模块：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">#LoadModule mpm_prefork_module modules/mod_mpm_prefork.so</div><div class="line">LoadModule mpm_worker_module modules/mod_mpm_worker.so</div><div class="line">#LoadModule mpm_event_module modules/mod_mpm_event.so</div></pre></td></tr></table></figure></p>
<h3 id="如何查看当前使用的是哪种MPM模块"><a href="#如何查看当前使用的是哪种MPM模块" class="headerlink" title="如何查看当前使用的是哪种MPM模块"></a>如何查看当前使用的是哪种MPM模块</h3><ol>
<li><p>使用 ./httpd -l 来确定选择的 MPM。 此命令会列出编译到服务器程序中的所有模块，包括 MPM。例：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">$ httpd -l</div><div class="line">Compiled in modules:</div><div class="line">  core.c</div><div class="line">  mod_so.c</div><div class="line">  http_core.c</div><div class="line">  prefork.c</div></pre></td></tr></table></figure>
<p>如上显示，我们呢当前安装的是以prefork方式工作的MPM模块。</p>
</li>
<li><p>使用./httpd -V 来确定当前使用的MPM模块。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">$ httpd -V</div><div class="line">Server version: Apache/2.4.18 (Unix)</div><div class="line">Server built:   Feb 20 2016 20:03:19</div><div class="line">Server&apos;s Module Magic Number: 20120211:52</div><div class="line">Server loaded:  APR 1.4.8, APR-UTIL 1.5.2</div><div class="line">Compiled using: APR 1.4.8, APR-UTIL 1.5.2</div><div class="line">Architecture:   64-bit</div><div class="line">Server MPM:     prefork</div><div class="line">  threaded:     no</div><div class="line">    forked:     yes (variable process count)</div><div class="line">Server compiled with....</div><div class="line"> -D APR_HAS_SENDFILE</div><div class="line"> -D APR_HAS_MMAP</div><div class="line"> -D APR_HAVE_IPV6 (IPv4-mapped addresses enabled)</div><div class="line"> -D APR_USE_FLOCK_SERIALIZE</div><div class="line"> -D APR_USE_PTHREAD_SERIALIZE</div><div class="line"> -D SINGLE_LISTEN_UNSERIALIZED_ACCEPT</div><div class="line"> -D APR_HAS_OTHER_CHILD</div><div class="line"> -D AP_HAVE_RELIABLE_PIPED_LOGS</div><div class="line"> -D DYNAMIC_MODULE_LIMIT=256</div><div class="line"> -D HTTPD_ROOT=&quot;/usr&quot;</div><div class="line"> -D SUEXEC_BIN=&quot;/usr/bin/suexec&quot;</div><div class="line"> -D DEFAULT_PIDLOG=&quot;/private/var/run/httpd.pid&quot;</div><div class="line"> -D DEFAULT_SCOREBOARD=&quot;logs/apache_runtime_status&quot;</div><div class="line"> -D DEFAULT_ERRORLOG=&quot;logs/error_log&quot;</div><div class="line"> -D AP_TYPES_CONFIG_FILE=&quot;/private/etc/apache2/mime.types&quot;</div><div class="line"> -D SERVER_CONFIG_FILE=&quot;/private/etc/apache2/httpd.conf&quot;</div></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="常见的几种MPM模块以及它们之间的区别"><a href="#常见的几种MPM模块以及它们之间的区别" class="headerlink" title="常见的几种MPM模块以及它们之间的区别"></a>常见的几种MPM模块以及它们之间的区别</h2><p>如果我们在编译的时候没有明确选择使用哪种MPM模块，那么Apache将会根据不同的系统选择不同的MPM模块进行编译安装。</p>
<table>
<thead>
<tr>
<th>系统</th>
<th>默认MPM</th>
</tr>
</thead>
<tbody>
<tr>
<td>BeOS</td>
<td>beos</td>
</tr>
<tr>
<td>Netware</td>
<td>mpm_netware</td>
</tr>
<tr>
<td>OS/2</td>
<td>mpmt_os2</td>
</tr>
<tr>
<td>Unix</td>
<td>prefork</td>
</tr>
<tr>
<td>Windows</td>
<td>mpm_winnt</td>
</tr>
</tbody>
</table>
<p>对于类UNIX系统，根据不同的场景需要我们可以选择使用不同的MPM模块。</p>
<ul>
<li>prefork</li>
<li>worker</li>
<li>event</li>
</ul>
<h3 id="prefork-MPM"><a href="#prefork-MPM" class="headerlink" title="prefork MPM"></a>prefork MPM</h3><blockquote>
<p>非线程型的、预派生的MPM</p>
</blockquote>
<p><strong>原理：</strong> 启动之初，就预先fork一些子进程，然后等待请求进来。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"># prefork MPM</div><div class="line"># StartServers: number of server processes to start</div><div class="line"># MinSpareServers: minimum number of server processes which are kept spare</div><div class="line"># MaxSpareServers: maximum number of server processes which are kept spare</div><div class="line"># MaxRequestWorkers: maximum number of server processes allowed to start</div><div class="line"># MaxConnectionsPerChild: maximum number of connections a server process serves</div><div class="line">#                         before terminating</div><div class="line">&lt;IfModule mpm_prefork_module&gt;</div><div class="line">    StartServers             1  #推荐 小=默认，中=20~50，大=50~100</div><div class="line">    MinSpareServers          1  #推荐 与 StartServers 保持一致</div><div class="line">    MaxSpareServers         10  #推荐 小=20，中=30~80，大=80~120</div><div class="line">    MaxRequestWorkers      250  #推荐 小=500，中=500~1500，大=1500~3000</div><div class="line">    MaxConnectionsPerChild   0  #推荐 小=10000，中或大10000~50000</div><div class="line">    #ServerLimit           250  #推荐 与 MaxRequestWorkers 保持一致，当MaxRequestWorkers 值超过256，则需要增加该值配置</div><div class="line">&lt;/IfModule&gt;</div></pre></td></tr></table></figure></p>
<p>启动时建立<code>StartServers</code>个子进程，然后按每秒创建指数级个进程数，直到达到<code>MinSpareServers</code>个进程（最多增到每秒32个）。如果空闲进程大于<code>MaxSpareServers</code>，则检查kill掉一些空闲进程。</p>
<p><code>MaxRequestWorkers</code>指定Apache最多可以同时同时处理的请求数，即进程数，当请求数多余这个值之后，多余的请求就会进入请求队列等待处理（默认不能大于256）。但可以通过设定ServerLimit来增大限制数，serverlimit最大为20000。apache2.3.1之前的版本该参数叫 MaxClients 。当我们的服务器资源很多，但访问却很慢时，我们就可以试一下增大该值，来提高服务器的请求处理能力。<br><code>MaxConnectionsPerChild</code>每个子进程可处理的请求数。处理完之后子进程就会自动销毁。<code>0</code>表示无限，永不销毁。</p>
<ul>
<li>优点：成熟稳定，兼容所有新老模块。同时，不需要担心线程安全的问题。</li>
<li>缺点：相对于线程，进程相对占用更多的系统资源，消耗更多的内存。所以不擅长处理高并发请求。</li>
</ul>
<h3 id="worker-MPM"><a href="#worker-MPM" class="headerlink" title="worker MPM"></a>worker MPM</h3><blockquote>
<p>支持混合的多线程、多进程的MPM。相比于prefork，worker采用了多进程和多线程混合模式，所以在使用中它占据更少的内存，在高并发情况下表现更优秀。</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"># worker MPM</div><div class="line"># StartServers: initial number of server processes to start</div><div class="line"># MinSpareThreads: minimum number of worker threads which are kept spare</div><div class="line"># MaxSpareThreads: maximum number of worker threads which are kept spare</div><div class="line"># ThreadsPerChild: constant umber of worker threads in each server process</div><div class="line"># MaxRequestWorkers: maximum number of worker threads</div><div class="line"># MaxConnectionsPerChild: maximum number of connections a server process serves</div><div class="line">#                         before terminating</div><div class="line">&lt;IfModule mpm_worker_module&gt;</div><div class="line">    StartServers             3  #推荐 小=默认，中=3~5，大=5~10</div><div class="line">    MinSpareThreads         75  #推荐 小=默认，中=50~100，大=100~200</div><div class="line">    MaxSpareThreads        250  #推荐 小=默认，中=80~160，大=200~400</div><div class="line">    ThreadsPerChild         25  #推荐 小=默认，中=50~100，大=100~200</div><div class="line">    MaxRequestWorkers      400  #推荐 小=500，中=500~1500，大=1500~3000</div><div class="line">    MaxConnectionsPerChild   0  #推荐 小=10000，中或大=10000~50000</div><div class="line">    #ServerLimit           250  #推荐 当 MaxRequestWorkers/ThreadsPerChild 大于16时，则需要增加该值配置。并且该值必须大于等于MaxRequestWorkers/ThreadsPerChild 的值</div><div class="line">&lt;/IfModule&gt;</div></pre></td></tr></table></figure>
<p><code>ThreadsPerChild</code> 每个进程包含线程数<br><code>MaxSpareThreads</code> 定义最大空闲线程数，超过则清理</p>
<ul>
<li>优点：占用更少系统资源，高并发情况下表现更优秀。</li>
<li>缺点：必须考虑线程安全的问题。</li>
</ul>
<h3 id="event-MPM"><a href="#event-MPM" class="headerlink" title="event MPM"></a>event MPM</h3><blockquote>
<p>worker方式的升级版，也采用多进程和多线程混合模式，并且解决了在 <code>keep-alive</code> 情况下，长期被占用的线程的资源浪费问题。</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"># event MPM</div><div class="line"># StartServers: initial number of server processes to start</div><div class="line"># MinSpareThreads: minimum number of worker threads which are kept spare</div><div class="line"># MaxSpareThreads: maximum number of worker threads which are kept spare</div><div class="line"># ThreadsPerChild: constant number of worker threads in each server process</div><div class="line"># MaxRequestWorkers: maximum number of worker threads</div><div class="line"># MaxConnectionsPerChild: maximum number of connections a server process serves</div><div class="line">#                         before terminating</div><div class="line">&lt;IfModule mpm_event_module&gt;</div><div class="line">    StartServers             3</div><div class="line">    MinSpareThreads         75</div><div class="line">    MaxSpareThreads        250</div><div class="line">    ThreadsPerChild         25</div><div class="line">    MaxRequestWorkers      400</div><div class="line">    MaxConnectionsPerChild   0</div><div class="line">&lt;/IfModule&gt;</div></pre></td></tr></table></figure>
<ul>
<li>优点：更好的高并发请求处理能力。</li>
<li>缺点：兼容性问题可能不是很好（最新的官方自带的模块，已经全部支持event MPM了），需要Linux系统（Linux 2.6+）对EPoll的支持，才能启用</li>
</ul>
<p><strong>Tips：</strong></p>
<ul>
<li><strong><em>空闲子进程：</em></strong> 即没有正在处理请求的子进程。</li>
<li><strong><em>请求等待队列：</em></strong> 任何超过 MaxClients 或 MaxRequestWorkers 限制的请求都将进入到等待队列，直到收到 ListenBacklog 指令限制的最大值为止（默认 ListenBacklog 511）</li>
<li><strong><em>ServerLimit：</em></strong> 该值表示Apache允许创建的最大进程数。值得注意的是 Apache在编译的时候会有一个硬限制 ServerLimit 20000 ，你不能超过该值。该值如果设置过高，将会有过多的内存被分配，可能会导致Apache 无法启动或者不稳定的情况。</li>
</ul>
<h2 id="简单测试对比"><a href="#简单测试对比" class="headerlink" title="简单测试对比"></a>简单测试对比</h2><p>对上面三种模式，我们做简单的测试进行对比。</p>
<h3 id="静态页面"><a href="#静态页面" class="headerlink" title="静态页面"></a>静态页面</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">./ab -k -c 200 -n 200000 192.168.1.234/index.html</div></pre></td></tr></table></figure>
<p>结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">prefork：9556QPS</div><div class="line">worker ：11038QPS</div><div class="line">event ：10224QPS</div></pre></td></tr></table></figure></p>
<h3 id="PHP页面"><a href="#PHP页面" class="headerlink" title="PHP页面"></a>PHP页面</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">./ab -k -c 200 -n 200000 192.168.1.234/index.php  #echo &quot;hello world&quot;;</div></pre></td></tr></table></figure>
<p>结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">prefork：6094QPS</div><div class="line">worker ：7411QPS</div><div class="line">event ：7089QPS</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Apache 2.X  支持插入式并行处理模块，称为多路处理模块 MPM，（Multi-Processing Modules）它是一个用于选择和处理网络端口的绑定，接收请求并指派子进程处理来自客户端的请求的一个Apache模块。和其他Apache模块相比，它最大的区别是，在任何时间， 必须有一个，而且只有一个 MPM 加载到服务器中。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;原理就是增加服务器服务进程或线程数量，是服务器可同时处理更多用户请求。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Apache" scheme="https://weizhimiao.github.io/categories/Apache/"/>
    
    
      <category term="Apache Apache性能优化" scheme="https://weizhimiao.github.io/tags/Apache-Apache%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>hexo常用命令</title>
    <link href="https://weizhimiao.github.io/2016/08/12/hexo%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    <id>https://weizhimiao.github.io/2016/08/12/hexo常用命令/</id>
    <published>2016-08-12T12:00:00.000Z</published>
    <updated>2016-08-24T03:16:26.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="init"><a href="#init" class="headerlink" title="init"></a>init</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo init [folder]</div></pre></td></tr></table></figure>
<p>新建一个网站。如果没有设置 folder ，Hexo 默认在目前的文件夹建立网站。</p>
<h2 id="new"><a href="#new" class="headerlink" title="new"></a>new</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new [layout] &lt;title&gt;</div></pre></td></tr></table></figure>
<p>新建一篇文章。如果没有设置 layout 的话，默认使用 <code>_config.yml</code> 中的 default_layout 参数代替。如果标题包含空格的话，请使用引号括起来。</p>
<a id="more"></a>
<h2 id="generate"><a href="#generate" class="headerlink" title="generate"></a>generate</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>生成静态文件。</p>
<p>  选项    描述<br>  -d, –deploy    文件生成后立即部署网站<br>  -w, –watch    监视文件变动</p>
<h2 id="publish"><a href="#publish" class="headerlink" title="publish"></a>publish</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo publish [layout] &lt;filename&gt;</div></pre></td></tr></table></figure>
<p>发表草稿。</p>
<h2 id="server"><a href="#server" class="headerlink" title="server"></a>server</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>启动服务器。默认情况下，访问网址为： <a href="http://localhost:4000/。" target="_blank" rel="external">http://localhost:4000/。</a></p>
<p>  选项    描述<br>  -p, –port    重设端口<br>  -s, –static    只使用静态文件<br>  -l, –log    启动日记记录，使用覆盖记录格式</p>
<h2 id="deploy"><a href="#deploy" class="headerlink" title="deploy"></a>deploy</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>部署网站。</p>
<p>  参数    描述<br>  -g, –generate    部署之前预先生成静态文件</p>
<h2 id="render"><a href="#render" class="headerlink" title="render"></a>render</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo render &lt;file1&gt; [file2] ...</div></pre></td></tr></table></figure>
<p>渲染文件。</p>
<p>  参数    描述<br>  -o, –output    设置输出路径</p>
<h2 id="migrate"><a href="#migrate" class="headerlink" title="migrate"></a>migrate</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo migrate &lt;type&gt;</div></pre></td></tr></table></figure>
<p>从其他博客系统 迁移内容。</p>
<h2 id="clean"><a href="#clean" class="headerlink" title="clean"></a>clean</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo clean</div></pre></td></tr></table></figure>
<p>清除缓存文件 (db.json) 和已生成的静态文件 (public)。</p>
<h2 id="list"><a href="#list" class="headerlink" title="list"></a>list</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo list &lt;type&gt;</div></pre></td></tr></table></figure>
<p>列出网站资料。</p>
<h2 id="version"><a href="#version" class="headerlink" title="version"></a>version</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo version</div></pre></td></tr></table></figure>
<p>显示 Hexo 版本。</p>
<h2 id="选项"><a href="#选项" class="headerlink" title="选项"></a>选项</h2><h3 id="安全模式"><a href="#安全模式" class="headerlink" title="安全模式"></a>安全模式</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo --safe</div></pre></td></tr></table></figure>
<p>在安全模式下，不会载入插件和脚本。当您在安装新插件遭遇问题时，可以尝试以安全模式重新执行。</p>
<h3 id="调试模式"><a href="#调试模式" class="headerlink" title="调试模式"></a>调试模式</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo --debug</div></pre></td></tr></table></figure>
<p>在终端中显示调试信息并记录到 debug.log。当您碰到问题时，可以尝试用调试模式重新执行一次，并 提交调试信息到 GitHub。</p>
<h3 id="简洁模式"><a href="#简洁模式" class="headerlink" title="简洁模式"></a>简洁模式</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo --silent</div></pre></td></tr></table></figure>
<p>隐藏终端信息。</p>
<h3 id="自定义配置文件的路径"><a href="#自定义配置文件的路径" class="headerlink" title="自定义配置文件的路径"></a>自定义配置文件的路径</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo --config custom.yml</div></pre></td></tr></table></figure>
<p>自定义配置文件的路径，执行后将不再使用 <code>_config.yml</code>。</p>
<h3 id="显示草稿"><a href="#显示草稿" class="headerlink" title="显示草稿"></a>显示草稿</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo --draft</div></pre></td></tr></table></figure>
<p>显示 <code>source/_drafts</code> 文件夹中的草稿文章。</p>
<h3 id="自定义-CWD"><a href="#自定义-CWD" class="headerlink" title="自定义 CWD"></a>自定义 CWD</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo --cwd /path/to/cwd</div></pre></td></tr></table></figure>
<p>自定义当前工作目录（Current working directory）的路径。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;init&quot;&gt;&lt;a href=&quot;#init&quot; class=&quot;headerlink&quot; title=&quot;init&quot;&gt;&lt;/a&gt;init&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;$ hexo init [folder]&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;新建一个网站。如果没有设置 folder ，Hexo 默认在目前的文件夹建立网站。&lt;/p&gt;
&lt;h2 id=&quot;new&quot;&gt;&lt;a href=&quot;#new&quot; class=&quot;headerlink&quot; title=&quot;new&quot;&gt;&lt;/a&gt;new&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;$ hexo new [layout] &amp;lt;title&amp;gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;新建一篇文章。如果没有设置 layout 的话，默认使用 &lt;code&gt;_config.yml&lt;/code&gt; 中的 default_layout 参数代替。如果标题包含空格的话，请使用引号括起来。&lt;/p&gt;
    
    </summary>
    
    
      <category term="hexo" scheme="https://weizhimiao.github.io/tags/hexo/"/>
    
  </entry>
  
</feed>
