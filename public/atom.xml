<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>行云流水</title>
  <subtitle>却也碎碎念念</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://weizhimiao.github.io/"/>
  <updated>2016-10-22T16:06:38.000Z</updated>
  <id>https://weizhimiao.github.io/</id>
  
  <author>
    <name>zhimiao</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Xdebug之PHP脚本剖析</title>
    <link href="https://weizhimiao.github.io/2016/10/22/Xdebug%E4%B9%8BPHP%E8%84%9A%E6%9C%AC%E5%89%96%E6%9E%90/"/>
    <id>https://weizhimiao.github.io/2016/10/22/Xdebug之PHP脚本剖析/</id>
    <published>2016-10-22T12:30:00.000Z</published>
    <updated>2016-10-22T16:06:38.000Z</updated>
    
    <content type="html"><![CDATA[<p>Xdebug内置分析器允许您在脚本中找到瓶颈，并使用外部工具（如KCacheGrind或WinCacheGrind）可视化这些瓶颈。</p>
<a id="more"></a>
<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>Xdebug的Profiler是一个强大的工具，使您能够分析您的PHP代码并确定瓶颈，或者通常查看代码的哪些部分很慢，并可以使用速度提升。<br>Xdebug 2中的分析器以高速缓存磨削兼容文件的形式输出分析信息。这允许您使用优秀的KCacheGrind工具（Linux，KDE）来分析概要分析数据。</p>
<ul>
<li><p>如果你在Linux上，你可以安装KCacheGrind通过你最喜欢的包管理器。</p>
</li>
<li><p>如果你在Windows上，有预编译的QCacheGrind二进制文件可用。 （QCacheGrind是没有KDE绑定的KCacheGrind）。</p>
</li>
<li><p>如果你在Mac OSX上，还有如何构建QCacheGrind的说明。</p>
</li>
</ul>
<p>Windows的用户可以选择使用WinCacheGrind。该功能不同于KCacheGrind，因此在此页面上记录使用KCacheGrind的部分不适用于此程序。 WinCacheGrind目前不支持Xdebug 2.3引入的cachegrind文件的文件和函数压缩。</p>
<p>还有一个替代的配置文件信息呈现工具xdebugtoolkit，一个称为Webgrind的基于Web的前端，以及一个名为XCallGraph的基于Java的工具。</p>
<p>如果您不能使用KDE（或不想使用KDE），kcachegrind软件包也会附带一个perl脚本“ct_annotate”，该脚本从profiler跟踪文件生成ASCII输出。</p>
<h2 id="启动Profiler"><a href="#启动Profiler" class="headerlink" title="启动Profiler"></a>启动Profiler</h2><p>通过在php.ini中将xdebug.profiler_enable设置为1来启用分析。<br>这将指示Xdebug开始将分析信息写入使用xdebug.profiler_output_dir指令配置的转储目录。<br>生成的文件的名称始终以“cachegrind.out”开头。并以PHP（或Apache）进程的PID（进程ID）或包含最初调试的脚本的目录的crc32哈希结束。<br>请确保您的xdebug.profiler_output_dir中有足够的空间，因为分析器生成的信息量对于复杂脚本非常大，例如对于像eZ Publish这样的复杂应用程序，最多可以有500MB的空间。</p>
<p>您还可以选择性地启用分析器，将xdebug.profiler_enable_trigger设置为1.<br>如果设置为1，那么可以使用名为XDEBUG_PROFILE的GET / POST或COOKIE变量启用分析器。<br>可以用于启用调试器（请参阅HTTP调试会话）的FireFox 2扩展也可以与此设置一起使用。为了使触发器正常工作，xdebug.profiler_enable需要设置为0。</p>
<h2 id="分析Profiler"><a href="#分析Profiler" class="headerlink" title="分析Profiler"></a>分析Profiler</h2><p>生成配置文件信息文件后，可以使用 <a href="https://kcachegrind.github.io/" target="_blank" rel="external">KCacheGrind</a> 打开它：</p>
<p><img src="https://xdebug.org/images/docs/kc-open.png" alt="img"></p>
<p>一旦打开文件，您就可以在KCacheGrind的不同窗格中获得大量信息。在左侧，找到“Flat Profile”窗格，其中显示了脚本中按照此函数中的时间花费及其所有子项排序的所​​有函数。第二列“Self”显示此函数（没有其子项）的时间花费，第三列“Called”显示特定函数的调用频率，最后一列“Function”显示函数的名称。 Xdebug通过用“php ::”作为前缀来更改内部PHP函数名称，并且包含文件也以特殊方式处理。调用include（和include_one，require和require_once）后跟“::”和包含文件的文件名。在左边的截图中你可以看到“include :: / home / httpd / ez_34 / v …”，内部PHP函数的例子是“php :: mysql_query”。前两列中的数字可以是脚本的完整运行时间的百分比（如在示例中）或绝对时间（1单位是1 / 1,000,000秒）。您可以使用右侧显示的按钮在两种模式之间切换。</p>
<p><img src="https://xdebug.org/images/docs/kc-profile.png" alt="img"></p>
<p>右侧的窗格包含上窗格和下窗格。 上面的图显示了有关称为当前所选函数的函数的信息（“eztemplatedesignresource-&gt; executecompiledtemplate”）。下面的窗格显示当前所选函数调用的函数的信息。</p>
<p><img src="https://xdebug.org/images/docs/kc-right-call.png" alt="img"></p>
<p>上方窗格中的“成本”列显示从列表中的函数调用时当前所选函数的时间花费。 添加的“费用”列中的数字将始终为100％。 下方窗格中的“成本”列显示从列表中调用函数所花费的时间。 在添加此列表中的数字时，您很可能永远不会达到100％，因为所选的函数本身也需要时间来执行。</p>
<p><img src="https://xdebug.org/images/docs/kc-right-callers.png" alt="img"></p>
<p>“所有呼叫者”和“所有呼叫”选项卡不仅显示从其调用该函数的直接调用，而且还显示所有直接调用的函数调用，还显示函数调用更多级别上下调用。 左侧屏幕截图中的上部窗格显示了所有调用当前所选函数的函数，直接和间接地使用堆栈上它们之间的其他函数。 “距离”列显示列出的和当前选择的函数调用之间有多少个函数调用（-1）。 如果两个函数之间有不同的距离，则显示为一个范围（例如“5-24”）。 括号中的数字是中值距离。 下面的窗格是类似的，除了它显示从当前选择的函数调用的函数的信息，再次是直接或间接。</p>
<h2 id="相关的设置"><a href="#相关的设置" class="headerlink" title="相关的设置"></a>相关的设置</h2><h3 id="xdebug-profiler-append"><a href="#xdebug-profiler-append" class="headerlink" title="xdebug.profiler_append"></a>xdebug.profiler_append</h3><p>类型：整数，默认值：0</p>
<p>当此设置设置为1时，当新请求映射到同一文件时（不在xdebug.profiler_output_name设置上），将不会覆盖分析器文件，而是使用新配置文件附加文件。</p>
<h3 id="xdebug-profiler-enable"><a href="#xdebug-profiler-enable" class="headerlink" title="xdebug.profiler_enable"></a>xdebug.profiler_enable</h3><p>类型：整数，默认值：0</p>
<p>启用Xdebug的概要分析器，它在概要文件输出目录中创建文件。这些文件可以由KCacheGrind读取以可视化您的数据。<br>无法使用ini_set（）在脚本中设置此设置。如果要选择性地启用分析器，请将xdebug.profiler_enable_trigger设置为1，而不使用此设置。</p>
<h3 id="xdebug-profiler-enable-trigger"><a href="#xdebug-profiler-enable-trigger" class="headerlink" title="xdebug.profiler_enable_trigger"></a>xdebug.profiler_enable_trigger</h3><p>类型：整数，默认值：0</p>
<p>当此设置设置为1时，可以使用XDEBUG_PROFILE GET / POST参数触发剖析器文件的生成，或者设置名为XDEBUG_PROFILE的cookie。<br>这将然后将分析器数据写入定义的目录。为了防止profiler为每个请求生成概要文件文件，您需要将xdebug.profiler_enable设置为0.对触发器本身的访问可以通过xdebug.profiler_enable_trigger_value配置。</p>
<h3 id="xdebug-profiler-enable-trigger-value"><a href="#xdebug-profiler-enable-trigger-value" class="headerlink" title="xdebug.profiler_enable_trigger_value"></a>xdebug.profiler_enable_trigger_value</h3><p>类型：字符串，默认值：“”，在Xdebug&gt; 2.3中引入</p>
<p>此设置可用于限制谁可以使用xdebug.profiler_enable_trigger中概述的XDEBUG_PROFILE功能。当从空字符串的默认值更改时，cookie，GET或POST参数的值需要使用此设置匹配共享机密集，<br>以便分析器启动。</p>
<h3 id="xdebug-profiler-output-dir"><a href="#xdebug-profiler-output-dir" class="headerlink" title="xdebug.profiler_output_dir"></a>xdebug.profiler_output_dir</h3><p>类型：字符串，默认值：/ tmp</p>
<p>将写入分析器输出的目录，确保PHP将运行的用户具有对该目录的写入权限。无法使用ini_set（）在脚本中设置此设置。</p>
<h3 id="xdebug-profiler-output-name"><a href="#xdebug-profiler-output-name" class="headerlink" title="xdebug.profiler_output_name"></a>xdebug.profiler_output_name</h3><p>类型：字符串，默认值：cachegrind.out。％p</p>
<p>此设置确定用于将跟踪转储到的文件的名称。设置使用格式说明符指定格式，非常类似于sprintf（）和strftime（）。有几个格式说明符可以用于格式化文件名。</p>
<p>有关受支持的说明符，请参见 <a href="https://xdebug.org/docs/all_settings#trace_output_name" target="_blank" rel="external">xdebug.trace_output_name</a> 文档。</p>
<h2 id="相关函数"><a href="#相关函数" class="headerlink" title="相关函数"></a>相关函数</h2><h3 id="string-xdebug-get-profiler-filename（）"><a href="#string-xdebug-get-profiler-filename（）" class="headerlink" title="string xdebug get profiler filename（）"></a>string xdebug get profiler filename（）</h3><p>返回配置文件信息文件名</p>
<p>返回用于将配置文件信息保存到的文件的名称。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Xdebug内置分析器允许您在脚本中找到瓶颈，并使用外部工具（如KCacheGrind或WinCacheGrind）可视化这些瓶颈。&lt;/p&gt;
    
    </summary>
    
      <category term="PHP" scheme="https://weizhimiao.github.io/categories/PHP/"/>
    
    
      <category term="Xdebug" scheme="https://weizhimiao.github.io/tags/Xdebug/"/>
    
  </entry>
  
  <entry>
    <title>Xdebug之远程调试</title>
    <link href="https://weizhimiao.github.io/2016/10/22/Xdebug%E4%B9%8B%E8%BF%9C%E7%A8%8B%E8%B0%83%E8%AF%95/"/>
    <id>https://weizhimiao.github.io/2016/10/22/Xdebug之远程调试/</id>
    <published>2016-10-22T12:30:00.000Z</published>
    <updated>2016-10-22T16:07:44.000Z</updated>
    
    <content type="html"><![CDATA[<p>Xdebug为与运行PHP脚本交互的调试器客户端提供了一个接口。 本节介绍如何设置PHP和Xdebug来允许这一点，并介绍一些客户端。</p>
<a id="more"></a>
<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>Xdebug的（远程）调试器允许您检查数据结构，交互式地浏览和调试您的代码。 正在使用的协议是打开的，称为DBGp。 此协议在Xdebug 2中实现，并替换不再支持的旧的GDB类协议。</p>
<h2 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h2><p>Xdebug 2捆绑了一个用于DBGp协议的简单命令行客户端。 还有一些其他客户端实现（免费和商业）。 我不是任何这些的作者，所以请参考原作者的支持：</p>
<ul>
<li>Dev-PHP (IDE: Windows)</li>
<li>Eclipse plugin (IDE).</li>
<li>Emacs plugin (Editor Plugin).</li>
<li>KDevelop (IDE: Linux (KDE); Open Source).</li>
<li>ActiveState’s Komodo (IDE: Windows, Linux, Mac; Commercial).</li>
<li>MacGDBP (Standalone client for Mac OS X; Free)</li>
<li>NetBeans (IDE: Windows, Linux, Mac OS X and Solaris).</li>
<li>Notepad++ plugin (Editor: Windows).</li>
<li>WaterProof’s PHPEdit (IDE, from version 2.10: Windows; Commercial).</li>
<li>PHPEclipse (Editor Plugin).</li>
<li>Devsense’s PHP Tools for Visual Studio (MS Visual Studio Plugin; Commercial).</li>
<li>JetBrain’s PhpStorm (IDE; Commercial).</li>
<li>Protoeditor (Editor: Linux).</li>
<li>pugdebug (Standalone client for Linux, Windows and Mac OS X; Open Source).</li>
<li>VIM plugin (Editor Plugin).</li>
<li>jcx software’s VS.Php (MS Visual Studio Plugin; Commercial).</li>
<li>Xdebug Chrome App (Chrome Application; Open Source)</li>
<li>XDebugClient (Standalone client for Windows).</li>
</ul>
<p>用于调试的简单命令行客户机与debugclient目录中的Xdebug捆绑在一起。</p>
<h2 id="启动调试器"><a href="#启动调试器" class="headerlink" title="启动调试器"></a>启动调试器</h2><p>为了启用Xdebug的调试器，您需要在php.ini中进行一些配置设置。 这些设置为xdebug.remote_enable以启用调试器xdebug.remote_host和xdebug.remote_port来配置调试器应连接到的IP地址和端口。 还有一个xdebug.remote_connect_back设置，如果您的开发服务器与多个开发人员共享，则可以使用此设置。</p>
<p>如果希望调试器在发生错误情况（PHP错误或异常）时启动会话，则还需要更改xdebug.remote_mode设置。 此设置的允许值为“req”（默认值），这使得调试器在脚本启动时启动会话，或者“jit”，当会话只应在错误时启动。</p>
<p>完成所有这些设置后，Xdebug仍然不会在脚本运行时自动启动调试会话。 你需要激活Xdebug的调试器，你可以通过三种方式：</p>
<p>1、当从命令行运行脚本时，您需要设置一个环境变量，如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">export XDEBUG_CONFIG=&quot;idekey=session_name&quot;</div><div class="line">php myscript.php</div></pre></td></tr></table></figure></p>
<p>您还可以在此相同的环境变量中配置xdebug.remote_host，xdebug.remote_port，xdebug.remote_mode和xdebug.remote_handler，只要使用空格分隔值即可：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">export XDEBUG_CONFIG=&quot;idekey=session_name remote_host=localhost profiler_enable=1&quot;</div></pre></td></tr></table></figure></p>
<p>通过XDEBUG_CONFIG设置可以获得的所有设置也可以使用正常的php.ini设置进行设置。</p>
<p>2、如果要调试通过Web浏览器启动的脚本，只需将XDEBUG_SESSION_START = session_name作为参数添加到URL。 而不是使用GET参数，您还可以将XDEBUG_SESSION_START设置为POST参数，或通过cookie。 请参阅下一节，了解调试会话如何在浏览器窗口中工作。</p>
<p>3、通过Web服务器运行PHP时激活调试器的另一种方法是安装以下四个浏览器扩展之一。 它们中的每一个都允许您通过单击一个按钮来启用调试器。 当这些扩展是活动的，他们直接设置XDEBUG_SESSION cookie，而不是通过XDEBUG_SESSION_START进一步的HTTP调试会话中描述。 扩展名为：</p>
<ul>
<li><p>The easiest Xdebug</p>
<blockquote>
<p>这个扩展的Firefox是为了使IDE的调试更容易。 您可以在<a href="https://addons.mozilla.org/en-US/firefox/addon/the-easiest-xdebug/找到扩展程序。" target="_blank" rel="external">https://addons.mozilla.org/en-US/firefox/addon/the-easiest-xdebug/找到扩展程序。</a></p>
</blockquote>
</li>
<li><p>Xdebug Helper for Chrome</p>
<blockquote>
<p>Chrome的此扩展程序将帮助您通过一次点击启用/禁用调试和分析。 您可以在<a href="https://chrome.google.com/extensions/detail/eadndfjplgieldjbigjakmdgkmoaaaoc找到扩展程序。" target="_blank" rel="external">https://chrome.google.com/extensions/detail/eadndfjplgieldjbigjakmdgkmoaaaoc找到扩展程序。</a></p>
</blockquote>
</li>
<li><p>Xdebug Toggler for Safari</p>
<blockquote>
<p>Safari的这个扩展允许你从Safari中自动启动Xdebug调试。 你可以从Github <a href="https://github.com/benmatselby/xdebug-toggler获取它。" target="_blank" rel="external">https://github.com/benmatselby/xdebug-toggler获取它。</a></p>
</blockquote>
</li>
<li><p>Xdebug launcher for Opera</p>
<blockquote>
<p>这个扩展的Opera允许您从Opera启动Xdebug会话。</p>
</blockquote>
</li>
</ul>
<p>在你开始你的脚本之前，你需要告诉你的客户端它可以接收调试连接，请参考具体客户端的文档如何做到这一点。 要使用捆绑的客户端，只需在编译和安装后启动它。 您可以通过运行“debugclient”启动它。</p>
<p>当debugclient启动时，它将显示以下信息，然后等待，直到调试服务器启动连接：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">Xdebug Simple DBGp client (0.10.0)</div><div class="line">Copyright 2002-2007 by Derick Rethans.</div><div class="line">- libedit support: enabled</div><div class="line"></div><div class="line">Waiting for debug server to connect.</div></pre></td></tr></table></figure></p>
<p>在建立连接后，将显示调试服务器的输出：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">Connect</div><div class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;iso-8859-1&quot;?&gt;</div><div class="line">&lt;init xmlns=&quot;urn:debugger_protocol_v1&quot;</div><div class="line">      xmlns:xdebug=&quot;http://xdebug.org/dbgp/xdebug&quot;</div><div class="line">      fileuri=&quot;file:///home/httpd/www.xdebug.org/html/docs/index.php&quot;</div><div class="line">      language=&quot;PHP&quot;</div><div class="line">      protocol_version=&quot;1.0&quot;</div><div class="line">      appid=&quot;13202&quot;</div><div class="line">      idekey=&quot;derick&quot;&gt;</div><div class="line">  &lt;engine version=&quot;2.0.0RC4-dev&quot;&gt;&lt;![CDATA[Xdebug]]&gt;&lt;/engine&gt;</div><div class="line">  &lt;author&gt;&lt;![CDATA[Derick Rethans]]&gt;&lt;/author&gt;</div><div class="line">  &lt;url&gt;&lt;![CDATA[http://xdebug.org]]&gt;&lt;/url&gt;</div><div class="line">  &lt;copyright&gt;&lt;![CDATA[Copyright (c) 2002-2007 by Derick Rethans]]&gt;&lt;/copyright&gt;</div><div class="line">&lt;/init&gt;</div><div class="line">(cmd)</div></pre></td></tr></table></figure></p>
<p>现在，您可以使用DBGp文档页面中说明的命令集。 当脚本结束时，调试服务器与客户端断开连接，并且调试客户端在等待新连接时恢复。</p>
<h2 id="通讯建立"><a href="#通讯建立" class="headerlink" title="通讯建立"></a>通讯建立</h2><h3 id="使用静态IP-单个开发者"><a href="#使用静态IP-单个开发者" class="headerlink" title="使用静态IP /单个开发者"></a>使用静态IP /单个开发者</h3><p>通过远程调试，嵌入在PHP中的Xdebug就像客户端，而IDE作为服务器。 以下动画显示了通信通道的设置：</p>
<p><img src="https://xdebug.org/images/docs/dbgp-setup.gif" alt="img"></p>
<ul>
<li>服务器的IP是10.0.1.2，HTTP在端口80上</li>
<li>IDE在IP 10.0.1.42上，因此xdebug.remote_host设置为10.0.1.42</li>
<li>IDE侦听端口9000，因此xdebug.remote_port设置为9000</li>
<li>HTTP请求在运行IDE的计算机上启动</li>
<li>Xdebug连接到10.0.1.42:9000</li>
<li>调试运行，提供HTTP响应</li>
</ul>
<h3 id="与未知IP-多开发者"><a href="#与未知IP-多开发者" class="headerlink" title="与未知IP /多开发者"></a>与未知IP /多开发者</h3><p>如果使用xdebug.remote_connect_back，设置稍有不同：</p>
<p><img src="https://xdebug.org/images/docs/dbgp-setup2.gif" alt="img"></p>
<ul>
<li>服务器的IP是10.0.1.2，HTTP在端口80上</li>
<li>IDE处于未知IP，因此xdebug.remote_connect_back设置为1</li>
<li>IDE侦听端口9000，因此xdebug.remote_port设置为9000</li>
<li>发出HTTP请求后，Xdebug将从HTTP头中检测IP地址</li>
<li>Xdebug连接到端口9000上检测到的IP（10.0.1.42）</li>
<li>调试运行，提供HTTP响应</li>
</ul>
<h2 id="HTTP调试会话"><a href="#HTTP调试会话" class="headerlink" title="HTTP调试会话"></a>HTTP调试会话</h2><p>Xdebug包含通过浏览器启动时跟踪调试会话的功能：Cookie。 这是这样工作：</p>
<ul>
<li><p>当URL变量XDEBUG_SESSION_START = name附加到URL或通过具有相同名称的POST变量时，-Xdebug会发出名为“XDEBUG_SESSION”的cookie，并将值设置为XDEBUG_SESSION_START URL参数的值。 cookie的到期时间为1小时。 当连接到“idekey”属性中的debugclient时，DBGp协议也将此相同的值传递给init包。</p>
</li>
<li><p>当有一个GET（或POST）变量XDEBUG_SESSION_START或XDEBUG_SESSION cookie被设置时，Xdebug将尝试连接到一个调试客户端。</p>
</li>
<li><p>要停止调试会话（并销毁cookie），只需添加URL参数XDEBUG_SESSION_STOP即可。 Xdebug将不再尝试连接到调试客户端。</p>
</li>
</ul>
<h2 id="多用户调试"><a href="#多用户调试" class="headerlink" title="多用户调试"></a>多用户调试</h2><p>Xdebug仅允许您在执行远程调试时指定一个IP地址与xdebug.remote_host连接。它不会自动连接回浏览器运行的计算机的IP地址，除非您使用xdebug.remote_connect_back。</p>
<p>如果所有开发人员在同一（开发）服务器上的不同项目上工作，则可以通过Apache的.htaccess功能为每个目录设置xdebug.remote_host设置，方法是使用php_value xdebug.remote_host = 10.0.0.5。但是，对于多个开发人员在同一代码上工作的情况，.htaccess技巧不工作，因为代码所在的目录是相同的。</p>
<p>有两个解决方案。首先，你可以使用DBGp代理。有关如何使用此代理的概述，请参阅多个用户调试中的文章。您可以在ActiveState的网站上下载代理作为python远程调试包的一部分。 Komodo FAQ中还有一些文档。</p>
<p>其次，您可以使用Xdebug 2.1中引入的xdebug.remote_connect_back设置。</p>
<h2 id="实施细则"><a href="#实施细则" class="headerlink" title="实施细则"></a>实施细则</h2><p>Xdebug的DBGp协议的context_names命令的实现不依赖于栈级别。 在每个调试器会话期间返回的值总是相同的，因此，可以安全地缓存。</p>
<h2 id="相关的设置"><a href="#相关的设置" class="headerlink" title="相关的设置"></a>相关的设置</h2><h3 id="xdebug-extended-info"><a href="#xdebug-extended-info" class="headerlink" title="xdebug.extended_info"></a>xdebug.extended_info</h3><p>类型：整数，默认值：1</p>
<p>控制Xdebug是否应该为PHP解析器强制执行’extended_info’模式;这允许Xdebug使用远程调试器执行文件/行断点。当跟踪或剖析脚本时，通常希望关闭此选项，因为PHP生成的oparrays将增加大约三分之一的大小减慢脚本。此设置不能在带有ini_set（）的脚本中设置，但只能在php.ini中设置。</p>
<h3 id="xdebug-idekey"><a href="#xdebug-idekey" class="headerlink" title="xdebug.idekey"></a>xdebug.idekey</h3><p>类型：字符串，默认值：<em> complex </em></p>
<p>控制哪个IDE密钥Xdebug应该传递到DBGp调试器处理程序。默认值基于环境设置。首先查询环境设置DBGP_IDEKEY，然后查询USER和最后一个USERNAME。默认值设置为找到的第一个环境变量。如果找不到，则设置为默认的“”。如果设置此设置，它始终覆盖环境变量。</p>
<h3 id="xdebug-remote-addr-header"><a href="#xdebug-remote-addr-header" class="headerlink" title="xdebug.remote_addr_header"></a>xdebug.remote_addr_header</h3><p>类型：字符串，默认值：“”，在Xdebug&gt; 2.4中引入</p>
<p>如果xdebug.remote_addr_header配置为非空字符串，那么该值将用作$ SERVER超全局数组中的键，以确定用于查找用于“连接回”的IP地址或主机名的头。此设置仅与xdebug.remote_connect_back结合使用，否则将被忽略。</p>
<h3 id="xdebug-remote-autostart"><a href="#xdebug-remote-autostart" class="headerlink" title="xdebug.remote_autostart"></a>xdebug.remote_autostart</h3><p>类型：布尔值，默认值：0</p>
<p>通常，您需要使用特定的HTTP GET / POST变量来启动远程调试（请参阅远程调试）。当此设置设置为1时，Xdebug将始终尝试启动远程调试会话并尝试连接到客户端，即使GET / POST / COOKIE变量不存在。</p>
<h3 id="xdebug-remote-connect-back"><a href="#xdebug-remote-connect-back" class="headerlink" title="xdebug.remote_connect_back"></a>xdebug.remote_connect_back</h3><p>类型：boolean，默认值：0，在Xdebug&gt; 2.1中引入</p>
<p>如果启用，xdebug.remote_host设置将被忽略，Xdebug将尝试连接到发出HTTP请求的客户端。它检查$_SERVER [‘HTTP_X_FORWARDED_FOR’]和$_SERVER [‘REMOTE_ADDR’]变量以找出要使用的IP地址。</p>
<p>如果配置了xdebug.remote_addr_header，那么将在$_SERVER [‘HTTP_X_FORWARDED_FOR’]和$_SERVER [‘REMOTE_ADDR’]变量之前检查具有配置名称的$ SERVER变量。</p>
<p>此设置不适用于通过CLI进行调试，因为$ SERVER标题变量在那里不可用。</p>
<p>请注意，没有可用的过滤器，任何可以连接到Web服务器的人都能够启动调试会话，即使他们的地址与xdebug.remote_host不匹配。</p>
<h3 id="xdebug-remote-cookie-expire-time"><a href="#xdebug-remote-cookie-expire-time" class="headerlink" title="xdebug.remote_cookie_expire_time"></a>xdebug.remote_cookie_expire_time</h3><p>类型：整数，默认值：3600，在Xdebug&gt; 2.1中引入</p>
<p>此设置可用于增加（或减少）远程调试会话通过会话cookie保持活动的时间。</p>
<h3 id="xdebug-remote-enable"><a href="#xdebug-remote-enable" class="headerlink" title="xdebug.remote_enable"></a>xdebug.remote_enable</h3><p>类型：布尔值，默认值：0</p>
<p>此开关控制Xdebug是否应尝试联系正在侦听主机上的调试客户端，并使用设置xdebug.remote_host和xdebug.remote_port设置的端口。如果无法建立连接，脚本将继续，就像此设置为0。</p>
<h3 id="xdebug-remote-handler"><a href="#xdebug-remote-handler" class="headerlink" title="xdebug.remote_handler"></a>xdebug.remote_handler</h3><p>类型：字符串，默认值：dbgp</p>
<p>可以是“php3”选择旧的PHP 3式调试器输出，“gdb”启用GDB像调试器接口或’dbgp’ - 调试器协议。 DBGp协议是唯一支持的协议。</p>
<p>注意：Xdebug 2.1和更高版本只支持’db​​gp’作为协议。</p>
<h3 id="xdebug-remote-host"><a href="#xdebug-remote-host" class="headerlink" title="xdebug.remote_host"></a>xdebug.remote_host</h3><p>类型：字符串，默认值：localhost<br>选择运行调试客户端的主机，您可以使用主机名或IP地址。如果启用xdebug.remote_connect_back，将忽略此设置。</p>
<h3 id="xdebug-remote-log"><a href="#xdebug-remote-log" class="headerlink" title="xdebug.remote_log"></a>xdebug.remote_log</h3><p>类型：字符串，默认值：</p>
<p>如果设置为某个值，则将其用作所有远程调试器通信记录到的文件的文件名。 该文件始终以附加模式打开，因此默认情况下不会被覆盖。 没有可用的并发保护。 该文件的格式如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">Log opened at 2007-05-27 14:28:15</div><div class="line">-&gt; &lt;init xmlns=&quot;urn:debugger_protocol_v1&quot; xmlns:xdebug=&quot;http://xdebug.org/dbgp/x ... ight&gt;&lt;/init&gt;</div><div class="line"></div><div class="line">&lt;- step_into -i 1</div><div class="line">-&gt; &lt;response xmlns=&quot;urn:debugger_protocol_v1&quot; xmlns:xdebug=&quot;http://xdebug.org/db ... &gt;&lt;/response&gt;</div></pre></td></tr></table></figure></p>
<h3 id="xdebug-remote-mode"><a href="#xdebug-remote-mode" class="headerlink" title="xdebug.remote_mode"></a>xdebug.remote_mode</h3><p>类型：字符串，默认值：req</p>
<p>选择启动调试连接的时间。 此设置可以有两个不同的值：</p>
<ul>
<li><p>req</p>
<blockquote>
<p>一旦脚本启动，Xdebug将尝试连接到调试客户端。</p>
</blockquote>
</li>
<li><p>jit</p>
<blockquote>
<p>Xdebug只会在出现错误情况时尝试连接到调试客户端。</p>
</blockquote>
</li>
</ul>
<h3 id="xdebug-remote-port"><a href="#xdebug-remote-port" class="headerlink" title="xdebug.remote_port"></a>xdebug.remote_port</h3><p>类型：整数，默认值：9000</p>
<p>Xdebug尝试在远程主机上连接的端口。 端口9000是客户端和捆绑的debugclient的默认值。 由于许多客户端使用此端口号，最好保持此设置不变。</p>
<h2 id="相关函数"><a href="#相关函数" class="headerlink" title="相关函数"></a>相关函数</h2><h3 id="bool-xdebug-break（）"><a href="#bool-xdebug-break（）" class="headerlink" title="bool xdebug_break（）"></a>bool xdebug_break（）</h3><p>向调试客户端发出断点。</p>
<p>此函数使调试器在特定行上断开，就好像在此行上设置了正常的文件/行断点。</p>
<p>over~</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Xdebug为与运行PHP脚本交互的调试器客户端提供了一个接口。 本节介绍如何设置PHP和Xdebug来允许这一点，并介绍一些客户端。&lt;/p&gt;
    
    </summary>
    
      <category term="PHP" scheme="https://weizhimiao.github.io/categories/PHP/"/>
    
    
      <category term="Xdebug" scheme="https://weizhimiao.github.io/tags/Xdebug/"/>
    
  </entry>
  
  <entry>
    <title>Xdebug之变量显示功能</title>
    <link href="https://weizhimiao.github.io/2016/10/22/Xdebug%E4%B9%8B%E5%A0%86%E6%A0%88%E8%B7%9F%E8%B8%AA/"/>
    <id>https://weizhimiao.github.io/2016/10/22/Xdebug之堆栈跟踪/</id>
    <published>2016-10-22T12:30:00.000Z</published>
    <updated>2016-10-22T16:07:31.000Z</updated>
    
    <content type="html"><![CDATA[<p>当Xdebug被激活时，只要PHP决定显示通知，警告，错误等，它将显示一个堆栈跟踪。堆栈跟踪显示的信息以及它们的呈现方式可以配置为满足您的需要。</p>
<p>Xdebug在错误情况下显示的堆栈跟踪（如果display_errors在php.ini中设置为On）在它们显示的信息量上相当保守。 这是因为大量的信息可以减慢脚本的执行和在浏览器中呈现堆栈跟踪本身。 但是，可以使堆栈跟踪显示具有不同设置的更详细信息。</p>
<a id="more"></a>
<h2 id="堆栈跟踪中的变量"><a href="#堆栈跟踪中的变量" class="headerlink" title="堆栈跟踪中的变量"></a>堆栈跟踪中的变量</h2><p>默认情况下，Xdebug现在会在它生成的堆栈跟踪中显示变量信息。 在收集或显示时，可变信息可能需要相当多的资源。 然而，在许多情况下，显示变量信息是有用的，这就是为什么Xdebug具有设置xdebug.collect_params。 下面的脚本结合了该设置的不同值的输出结果，如下例所示。</p>
<p>示例：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span><span class="params">( $a )</span> </span>&#123;</div><div class="line">    <span class="keyword">for</span> ($i = <span class="number">1</span>; $i &lt; $a[<span class="string">'foo'</span>]; $i++) &#123;</div><div class="line">        <span class="keyword">if</span> ($i == <span class="number">500000</span>) xdebug_break();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">set_time_limit(<span class="number">1</span>);</div><div class="line">$c = <span class="keyword">new</span> stdClass;</div><div class="line">$c-&gt;bar = <span class="number">100</span>;</div><div class="line">$a = <span class="keyword">array</span>(</div><div class="line">    <span class="number">42</span> =&gt; <span class="keyword">false</span>, <span class="string">'foo'</span> =&gt; <span class="number">912124</span>,</div><div class="line">    $c, <span class="keyword">new</span> stdClass, fopen( <span class="string">'/etc/passwd'</span>, <span class="string">'r'</span> )</div><div class="line">);</div><div class="line">foo( $a );</div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure></p>
<p>结果:<br>xdebug.collect_params设置的不同值提供不同的输出，您可以在下面看到：</p>
<ul>
<li>default</li>
</ul>
<p><img src="http://n.sinaimg.cn/games/3ece443e/20161022/QQ20161022-0@2x.png" alt="default"></p>
<ul>
<li>1<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ini_set(&apos;xdebug.collect_params&apos;, &apos;1&apos;);</div></pre></td></tr></table></figure>
</li>
</ul>
<p><img src="http://n.sinaimg.cn/games/3ece443e/20161022/QQ20161022-1@2x.png" alt="default"></p>
<ul>
<li>2<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ini_set(&apos;xdebug.collect_params&apos;, &apos;2&apos;);</div></pre></td></tr></table></figure>
</li>
</ul>
<p><img src="http://n.sinaimg.cn/games/3ece443e/20161022/QQ20161022-2@2x.png" alt="default"></p>
<ul>
<li>3<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ini_set(&apos;xdebug.collect_params&apos;, &apos;3&apos;);</div></pre></td></tr></table></figure>
</li>
</ul>
<p><img src="http://n.sinaimg.cn/games/3ece443e/20161022/QQ20161022-3@2x.png" alt="default"></p>
<ul>
<li>4<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ini_set(&apos;xdebug.collect_params&apos;, &apos;4&apos;);</div></pre></td></tr></table></figure>
</li>
</ul>
<p><img src="http://n.sinaimg.cn/games/3ece443e/20161022/QQ20161022-4@2x.png" alt="default"></p>
<h2 id="附加信息"><a href="#附加信息" class="headerlink" title="附加信息"></a>附加信息</h2><p>除了显示传递给每个函数的变量的值之外，Xdebug还可以通过使用xdebug.dump_globals和xdebug.dump.* 设置来选择性地显示关于所选超级元素的信息。 设置xdebug.dump_once和xdebug.dump_undefined会稍微修改可用超级元素显示的时间和信息。 使用xdebug.show_local_vars设置，您可以指示Xdebug为用户定义的函数显示最顶层栈级中可用的所有变量。 下面的示例显示了这一点（脚本从上面的示例中使用）。</p>
<ul>
<li>default</li>
</ul>
<p><img src="http://n.sinaimg.cn/games/3ece443e/20161022/QQ20161022-5@2x.png" alt="default"></p>
<ul>
<li>dump_superglobals=1<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">ini_set(&apos;xdebug.collect_vars&apos;, &apos;on&apos;);</div><div class="line">ini_set(&apos;xdebug.collect_params&apos;, &apos;4&apos;);</div><div class="line">ini_set(&apos;xdebug.dump_globals&apos;, &apos;on&apos;);</div><div class="line">ini_set(&apos;xdebug.dump.SERVER&apos;, &apos;REQUEST_URI&apos;);</div></pre></td></tr></table></figure>
</li>
</ul>
<p><img src="http://n.sinaimg.cn/games/3ece443e/20161022/QQ20161022-6@2x.png" alt="default"></p>
<ul>
<li>show_local_vars=1<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">ini_set(&apos;xdebug.collect_vars&apos;, &apos;on&apos;);</div><div class="line">ini_set(&apos;xdebug.collect_params&apos;, &apos;4&apos;);</div><div class="line">ini_set(&apos;xdebug.dump_globals&apos;, &apos;on&apos;);</div><div class="line">ini_set(&apos;xdebug.dump.SERVER&apos;, &apos;REQUEST_URI&apos;);</div><div class="line">ini_set(&apos;xdebug.show_local_vars&apos;, &apos;on&apos;);</div></pre></td></tr></table></figure>
</li>
</ul>
<p><img src="http://n.sinaimg.cn/games/3ece443e/20161022/QQ20161022-8@2x.png" alt="default"></p>
<h2 id="相关设置"><a href="#相关设置" class="headerlink" title="相关设置"></a>相关设置</h2><h3 id="xdebug-cli-color"><a href="#xdebug-cli-color" class="headerlink" title="xdebug.cli_color"></a><strong>xdebug.cli_color</strong></h3><p>类型：整数，默认值：0，在Xdebug&gt; 2.2中引入</p>
<p>如果此设置为1，则Xdebug将在CLI模式下和输出为tty时对var_dumps和堆栈跟踪输出进行颜色。在Windows上，需要安装ANSICON工具。</p>
<p>如果设置为2，那么无论Xdebug是否连接到tty或是否安装了ANSICON，Xdebug都将始终对var_dumps和堆栈跟踪进行着色。在这种情况下，您可能会看到转义码。</p>
<p>有关更多信息，请参阅此<a href="http://drck.me/clicolor-9cr" target="_blank" rel="external">文章</a>。</p>
<h3 id="xdebug-collect-includes"><a href="#xdebug-collect-includes" class="headerlink" title="xdebug.collect_includes"></a><strong>xdebug.collect_includes</strong></h3><p>类型：布尔值，默认值：1</p>
<p>此设置默认为1，控制Xdebug是否应将include（），include_once（），require（）或require_once（）中使用的文件名写入跟踪文件。</p>
<h3 id="xdebug-collect-params"><a href="#xdebug-collect-params" class="headerlink" title="xdebug.collect_params"></a><strong>xdebug.collect_params</strong></h3><p>类型：整数，默认值：0</p>
<p>此设置默认为0，控制在函数跟踪或堆栈跟踪中记录函数调用时，Xdebug是否应收集传递给函数的参数。</p>
<p>该设置默认为0，因为对于非常大的脚本，它可能使用大量的内存，因此使巨量脚本无法运行。您可以最安全地打开此设置，但是您可以预期在具有大量函数调用和/或巨大的数据结构作为参数的脚本中存在一些问题。</p>
<p>Xdebug 2不会有增加的内存使用这个问题，因为它永远不会将此信息存储在内存中。相反，它将只被写入磁盘。这意味着您需要查看磁盘使用情况。</p>
<p>此设置可以有四个不同的值。对于每个值，示出了不同量的信息。下面你将看到每个值提供什么信息。另请参见功能堆栈跟踪的几个截图的介绍。</p>
<table>
<thead>
<tr>
<th>值</th>
<th>显示参数信息</th>
</tr>
</thead>
<tbody>
<tr>
<td>0</td>
<td>无。</td>
</tr>
<tr>
<td>1</td>
<td>元素的类型和数量（f.e. string（6），array（8））。</td>
</tr>
<tr>
<td>2</td>
<td>元素的类型和数量，带有完整信息的工具提示1。在CLI版本的PHP它不会有工具提示，而不是在输出文件。</td>
</tr>
<tr>
<td>3</td>
<td>完全变量内容（具有由xdebug.var_display_max_children，xdebug.var_display_max_data和xdebug.var_display_max_depth设置的限制）。</td>
</tr>
<tr>
<td>4</td>
<td>完全变量内容和变量名称。</td>
</tr>
<tr>
<td>5</td>
<td>PHP序列化变量内容，没有名称。 （Xdebug 2.3中的新功能）</td>
</tr>
</tbody>
</table>
<h3 id="xdebug-collect-vars"><a href="#xdebug-collect-vars" class="headerlink" title="xdebug.collect_vars"></a><strong>xdebug.collect_vars</strong></h3><p>类型：布尔值，默认值：0</p>
<p>此设置告诉Xdebug收集有关在某个范围中使用哪些变量的信息。 这个分析可能很慢，因为Xdebug必须逆向工程PHP的操作码数组。 此设置不会记录不同变量具有的值，因为使用xdebug.collect_params。 仅当您希望使用xdebug_get_declared_vars（）时，才需要启用此设置。</p>
<h3 id="xdebug-dump"><a href="#xdebug-dump" class="headerlink" title="xdebug.dump.*"></a><strong>xdebug.dump.*</strong></h3><p>类型：字符串，默认值：空</p>
<p>*可以是COOKIE，FILES，GET，POST，REQUEST，SERVER，SESSION中的任何一个。 这七个设置控制当发生错误情况时来自超级溶剂的数据。</p>
<p>每个php.ini设置可以包括一个逗号分隔的变量从这个超级全局转储，或*所有的。 请确保您在此设置中不添加空格。</p>
<p>为了在发生错误时转储REMOTE_ADDR和REQUEST_METHOD，以及所有GET参数，请添加以下设置：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">xdebug.dump.SERVER = REMOTE_ADDR,REQUEST_METHOD</div><div class="line">xdebug.dump.GET = *</div></pre></td></tr></table></figure></p>
<h3 id="xdebug-dump-globals"><a href="#xdebug-dump-globals" class="headerlink" title="xdebug.dump_globals"></a><strong>xdebug.dump_globals</strong></h3><p>类型：布尔值，默认值：1</p>
<p>控制是否应显示由xdebug.dump.*设置定义的超级元素的值。</p>
<h3 id="xdebug-dump-once"><a href="#xdebug-dump-once" class="headerlink" title="xdebug.dump_once"></a><strong>xdebug.dump_once</strong></h3><p>类型：布尔值，默认值：1</p>
<p>控制是否应在所有错误情况（设置为0）或仅在第一个（设置为1）上转储超级元素的值。</p>
<h3 id="xdebug-dump-undefined"><a href="#xdebug-dump-undefined" class="headerlink" title="xdebug.dump_undefined"></a><strong>xdebug.dump_undefined</strong></h3><p>类型：布尔值，默认值：0<br>如果要从超级元组转储未定义的值，您应该将此设置设置为1，否则将其设置为0。</p>
<h3 id="xdebug-file-link-format"><a href="#xdebug-file-link-format" class="headerlink" title="xdebug.file_link_format"></a><strong>xdebug.file_link_format</strong></h3><p>类型：字符串，默认值：，在Xdebug&gt; 2.1中引入</p>
<p>此设置确定在使用文件名的堆栈跟踪显示中进行的链接的格式。 这允许IDE设置一个链接协议，通过单击Xdebug在堆栈跟踪中显示的文件名，可以直接转到行和文件。 示例格式可能如下所示：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">myide://%f@%l</div></pre></td></tr></table></figure></p>
<p>可能的格式说明符是：</p>
<table>
<thead>
<tr>
<th>说明符</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr>
<td>％f</td>
<td>文件名</td>
</tr>
<tr>
<td>％l</td>
<td>行号</td>
</tr>
</tbody>
</table>
<p>对于各种IDE / OSses，有一些关于如何使这项工作的指示：</p>
<p>Linux上的Firefox</p>
<ul>
<li>打开about：config</li>
<li>添加一个新的布尔设置“network.protocol-handler.expose.xdebug”并将其设置为“false”</li>
<li>将以下内容添加到shell脚本〜/ bin / ff-xdebug.sh中：<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#! /bin/sh</span></div><div class="line">f=`<span class="built_in">echo</span> <span class="variable">$1</span> | cut <span class="_">-d</span> @ <span class="_">-f</span> 1 | sed <span class="string">'s/xdebug:\/\///'</span>`</div><div class="line">l=`<span class="built_in">echo</span> <span class="variable">$1</span> | cut <span class="_">-d</span> @ <span class="_">-f</span> 2`</div></pre></td></tr></table></figure>
</li>
</ul>
<p>添加（取决于你有komodo，vim vs netbeans）：<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">komodo <span class="variable">$f</span> <span class="_">-l</span> <span class="variable">$l</span></div><div class="line">gvim --remote-tab +<span class="variable">$l</span> <span class="variable">$f</span></div><div class="line">netbeans <span class="string">"<span class="variable">$f</span>:<span class="variable">$l</span>"</span></div></pre></td></tr></table></figure></p>
<ul>
<li>使用chmod + x〜/ bin / ff-xdebug.sh来使脚本可执行</li>
<li>将xdebug.file_link_format设置为xdebug：//％f @％l</li>
</ul>
<p>Windows和netbeans</p>
<ul>
<li>创建文件netbeans.bat并将其保存在您的路径（C：\ Windows）：<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">@echo off</div><div class="line">setlocal enableextensions enabledelayedexpansion</div><div class="line">set NETBEANS=%1</div><div class="line">set FILE=%~2</div><div class="line">%NETBEANS% --nosplash --console suppress --open &quot;%FILE:~19%&quot;</div><div class="line">nircmd win activate process netbeans.exe</div></pre></td></tr></table></figure>
</li>
</ul>
<p>注意：如果没有nircmd，请删除最后一行。</p>
<ul>
<li>将以下代码保存在netbeans protocol.reg中：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">Windows Registry Editor Version 5.00</div><div class="line"></div><div class="line">[HKEY_CLASSES_ROOT\netbeans]</div><div class="line">&quot;URL Protocol&quot;=&quot;&quot;</div><div class="line">@=&quot;URL:Netbeans Protocol&quot;</div><div class="line"></div><div class="line">[HKEY_CLASSES_ROOT\netbeans\DefaultIcon]</div><div class="line">@=&quot;\&quot;C:\\Program Files\\NetBeans 7.1.1\\bin\\netbeans.exe,1\&quot;&quot;</div><div class="line"></div><div class="line">[HKEY_CLASSES_ROOT\netbeans\shell]</div><div class="line"></div><div class="line">[HKEY_CLASSES_ROOT\netbeans\shell\open]</div><div class="line"></div><div class="line">[HKEY_CLASSES_ROOT\netbeans\shell\open\command]</div><div class="line">@=&quot;\&quot;C:\\Windows\\netbeans.bat\&quot; \&quot;C:\\Program Files\\NetBeans 7.1.1\\bin\\netbeans.exe\&quot; \&quot;%1\&quot;&quot;</div></pre></td></tr></table></figure>
<p>注意：确保更改Netbeans（两次）的路径以及netbeans.bat批处理文件（如果将其保存在C：\Windows 以外的其他位置）。</p>
<p>Double click on the netbeans_protocol.reg file to import it into the registry.<br>Set the xdebug.file_link_format setting to</p>
<ul>
<li><p>双击netbeans protocol.reg文件将其导入到注册表中。</p>
</li>
<li><p>将xdebug.file_link_format设置设置为<code>xdebug.file_link_format = &quot;netbeans://open/?f=%f:%l&quot;</code></p>
</li>
</ul>
<h3 id="xdebug-manual-url"><a href="#xdebug-manual-url" class="headerlink" title="xdebug.manual_url"></a><strong>xdebug.manual_url</strong></h3><p>类型：字符串，默认值：http：//www.php.net，在Xdebug &lt;2.2.1中引入</p>
<p>这是从函数跟踪和错误消息到函数的手册页的链接的基本URL。建议将此设置设置为使用最近的镜像。</p>
<h3 id="xdebug-show-exception-trace"><a href="#xdebug-show-exception-trace" class="headerlink" title="xdebug.show_exception_trace"></a><strong>xdebug.show_exception_trace</strong></h3><p>类型：整数，默认值：0</p>
<p>当此设置设置为1时，每当引发异常时，即使此异常实际被捕获，Xdebug也将显示堆栈跟踪。</p>
<h3 id="xdebug-show-local-vars"><a href="#xdebug-show-local-vars" class="headerlink" title="xdebug.show_local_vars"></a><strong>xdebug.show_local_vars</strong></h3><p>类型：整数，默认值：0</p>
<p>当这个设置设置为某事！= 0 Xdebug的错误情况下生成的堆栈转储也将显示最顶层范围中的所有变量。请注意，这可能会生成大量的信息，因此默认情况下关闭。</p>
<h3 id="xdebug-show-mem-delta"><a href="#xdebug-show-mem-delta" class="headerlink" title="xdebug.show_mem_delta"></a><strong>xdebug.show_mem_delta</strong></h3><p>类型：整数，默认值：0</p>
<p>当这个设置设置为某些！= 0 Xdebug的人类可读的生成的跟踪文件将显示在函数调用之间的内存使用的差异。如果Xdebug配置为生成计算机可读的跟踪文件，则它们将始终显示此信息。</p>
<h3 id="xdebug-var-display-max-children"><a href="#xdebug-var-display-max-children" class="headerlink" title="xdebug.var_display_max_children"></a><strong>xdebug.var_display_max_children</strong></h3><p>类型：整数，默认值：128</p>
<p>控制使用xdebug_var_dump（），xdebug.show_local_vars或通过函数跟踪显示变量时显示的数组子元素和对象的属性的数量。</p>
<p>要禁用任何限制，请使用-1作为值。</p>
<p>此设置对通过远程调试功能发送到客户端的子项数没有任何影响。</p>
<h3 id="xdebug-var-display-max-data"><a href="#xdebug-var-display-max-data" class="headerlink" title="xdebug.var_display_max_data"></a><strong>xdebug.var_display_max_data</strong></h3><p>类型：整数，默认值：512</p>
<p>控制使用xdebug_var_dump（），xdebug.show_local_vars或通过函数跟踪显示变量时显示的最大字符串长度。</p>
<p>要禁用任何限制，请使用-1作为值。</p>
<p>此设置对通过远程调试功能发送到客户端的子项数没有任何影响。</p>
<h3 id="xdebug-var-display-max-depth"><a href="#xdebug-var-display-max-depth" class="headerlink" title="xdebug.var_display_max_depth"></a><strong>xdebug.var_display_max_depth</strong></h3><p>类型：整数，默认值：3</p>
<p>当使用xdebug_var_dump（），xdebug.show_local_vars或通过函数跟踪显示变量时，控制数组元素和对象属性的嵌套级别数。</p>
<p>您可以选择的最大值为1023.您还可以使用-1作为值来选择此最大数。</p>
<p>此设置对通过远程调试功能发送到客户端的子项数没有任何影响。</p>
<h2 id="相关函数"><a href="#相关函数" class="headerlink" title="相关函数"></a>相关函数</h2><h3 id="array-xdebug-get-declared-vars（）"><a href="#array-xdebug-get-declared-vars（）" class="headerlink" title="array xdebug_get_declared_vars（）"></a><strong>array xdebug_get_declared_vars（）</strong></h3><p>返回声明的变量</p>
<p>返回一个数组，其中每个元素是在当前范围中定义的变量名称。 需要启用xdebug.collect_vars设置。</p>
<p>Example:<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line">    <span class="class"><span class="keyword">class</span> <span class="title">strings</span> </span>&#123;</div><div class="line">        <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">fix_strings</span><span class="params">($a, $b)</span> </span>&#123;</div><div class="line">            <span class="keyword">foreach</span> ($b <span class="keyword">as</span> $item) &#123;</div><div class="line">            &#125;</div><div class="line">            var_dump(xdebug_get_declared_vars());</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    strings::fix_strings(<span class="keyword">array</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>), <span class="keyword">array</span>(<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>));</div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure></p>
<p>Returns:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">array</div><div class="line">  0 =&gt; string &apos;a&apos; (length=1)</div><div class="line">  1 =&gt; string &apos;b&apos; (length=1)</div><div class="line">  2 =&gt; string &apos;item&apos; (length=4)</div></pre></td></tr></table></figure></p>
<p>在5.1之前的PHP版本中，变量名“a”不在返回的数组中，因为它在调用函数xdebug_get_declared_vars（）的作用域中不使用。</p>
<h3 id="array-xdebug-get-function-stack（）"><a href="#array-xdebug-get-function-stack（）" class="headerlink" title="array xdebug_get_function_stack（）"></a><strong>array xdebug_get_function_stack（）</strong></h3><p>返回有关堆栈的信息</p>
<p>返回类似于此点的堆栈跟踪的数组。 示例脚本：</p>
<p>Example:<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line">    <span class="class"><span class="keyword">class</span> <span class="title">strings</span> </span>&#123;</div><div class="line">        <span class="function"><span class="keyword">function</span> <span class="title">fix_string</span><span class="params">($a)</span></span></div><div class="line">        &#123;</div><div class="line">            var_dump(xdebug_get_function_stack());</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">function</span> <span class="title">fix_strings</span><span class="params">($b)</span> </span>&#123;</div><div class="line">            <span class="keyword">foreach</span> ($b <span class="keyword">as</span> $item) &#123;</div><div class="line">                <span class="keyword">$this</span>-&gt;fix_string($item);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    $s = <span class="keyword">new</span> strings();</div><div class="line">    $ret = $s-&gt;fix_strings(<span class="keyword">array</span>(<span class="string">'Derick'</span>));</div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure></p>
<p>Returns:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">array</div><div class="line">  0 =&gt;</div><div class="line">    array</div><div class="line">      &apos;function&apos; =&gt; string &apos;&#123;main&#125;&apos; (length=6)</div><div class="line">      &apos;file&apos; =&gt; string &apos;/var/www/xdebug_get_function_stack.php&apos; (length=63)</div><div class="line">      &apos;line&apos; =&gt; int 0</div><div class="line">      &apos;params&apos; =&gt;</div><div class="line">        array</div><div class="line">          empty</div><div class="line">  1 =&gt;</div><div class="line">    array</div><div class="line">      &apos;function&apos; =&gt; string &apos;fix_strings&apos; (length=11)</div><div class="line">      &apos;class&apos; =&gt; string &apos;strings&apos; (length=7)</div><div class="line">      &apos;file&apos; =&gt; string &apos;/var/www/xdebug_get_function_stack.php&apos; (length=63)</div><div class="line">      &apos;line&apos; =&gt; int 18</div><div class="line">      &apos;params&apos; =&gt;</div><div class="line">        array</div><div class="line">          &apos;b&apos; =&gt; string &apos;array (0 =&gt; &apos;Derick&apos;)&apos; (length=21)</div><div class="line">  2 =&gt;</div><div class="line">    array</div><div class="line">      &apos;function&apos; =&gt; string &apos;fix_string&apos; (length=10)</div><div class="line">      &apos;class&apos; =&gt; string &apos;strings&apos; (length=7)</div><div class="line">      &apos;file&apos; =&gt; string &apos;/var/www/xdebug_get_function_stack.php&apos; (length=63)</div><div class="line">      &apos;line&apos; =&gt; int 12</div><div class="line">      &apos;params&apos; =&gt;</div><div class="line">        array</div><div class="line">          &apos;a&apos; =&gt; string &apos;&apos;Derick&apos;&apos; (length=8)</div></pre></td></tr></table></figure></p>
<h3 id="array-xdebug-get-monitored-functions（）"><a href="#array-xdebug-get-monitored-functions（）" class="headerlink" title="array xdebug_get_monitored_functions（）"></a><strong>array xdebug_get_monitored_functions（）</strong></h3><p>返回有关受监视函数的信息</p>
<p>在2.4版本中引入</p>
<p>返回一个结构，其中包含有关在脚本中执行受监视函数的位置的信息。 以下示例显示如何使用此和返回的信息：</p>
<p>Example:<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"><span class="comment">/* Start the function monitor for strrev and array_push: */</span></div><div class="line">xdebug_start_function_monitor( [ <span class="string">'strrev'</span>, <span class="string">'array_push'</span> ] );</div><div class="line"></div><div class="line"><span class="comment">/* Run some code: */</span></div><div class="line"><span class="keyword">echo</span> strrev(<span class="string">"yes!"</span>), <span class="string">"\n"</span>;</div><div class="line"></div><div class="line"><span class="keyword">echo</span> strrev(<span class="string">"yes!"</span>), <span class="string">"\n"</span>;</div><div class="line"></div><div class="line">var_dump(xdebug_get_monitored_functions());</div><div class="line">xdebug_stop_function_monitor();</div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure></p>
<p>Returns:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">/tmp/monitor-example.php:10:</div><div class="line">array(2) &#123;</div><div class="line">  [0] =&gt;</div><div class="line">  array(3) &#123;</div><div class="line">    &apos;function&apos; =&gt;</div><div class="line">    string(6) &quot;strrev&quot;</div><div class="line">    &apos;filename&apos; =&gt;</div><div class="line">    string(24) &quot;/tmp/monitor-example.php&quot;</div><div class="line">    &apos;lineno&apos; =&gt;</div><div class="line">    int(6)</div><div class="line">  &#125;</div><div class="line">  [1] =&gt;</div><div class="line">  array(3) &#123;</div><div class="line">    &apos;function&apos; =&gt;</div><div class="line">    string(6) &quot;strrev&quot;</div><div class="line">    &apos;filename&apos; =&gt;</div><div class="line">    string(24) &quot;/tmp/monitor-example.php&quot;</div><div class="line">    &apos;lineno&apos; =&gt;</div><div class="line">    int(8)</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="integer-xdebug-get-stack-depth（）"><a href="#integer-xdebug-get-stack-depth（）" class="headerlink" title="integer xdebug_get_stack_depth（）"></a><strong>integer xdebug_get_stack_depth（）</strong></h3><p>返回当前堆栈深度级别</p>
<p>返回堆栈深度级别。 脚本的主体是级别0，每个包含和/或函数调用将向堆栈深度级别添加一个。</p>
<h3 id="none-xdebug-print-function-stack-string-message-int-options"><a href="#none-xdebug-print-function-stack-string-message-int-options" class="headerlink" title="none xdebug_print_function_stack( [ string message [, int options ] ] )"></a><strong>none xdebug_print_function_stack( [ string message [, int options ] ] )</strong></h3><p>显示当前函数栈</p>
<p>以类似于Xdebug在错误情况下显示的方式显示当前函数堆栈。</p>
<p>“message”参数允许您使用自己的头部替换消息。 （在Xdebug 2.1中引入）。</p>
<p>Example:<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span><span class="params">( $far, $out )</span></span></div><div class="line">&#123;</div><div class="line">    xdebug_print_function_stack( <span class="string">'Your own message'</span> );</div><div class="line">&#125;</div><div class="line">foo( <span class="number">42</span>, <span class="number">3141592654</span> );</div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure></p>
<p>Returns:</p>
<p><img src="http://n.sinaimg.cn/games/3ece443e/20161022/QQ20161022-9@2x.png" alt="img"></p>
<p>位掩码“options”允许您配置一些额外的选项。 目前支持以下选项：</p>
<ul>
<li>XDEBUG_STACK_NO_DESC<blockquote>
<p>如果设置了此选项，则打印的堆栈跟踪将不具有标题。 如果要从自己的错误处理程序打印堆栈跟踪，否则打印位置是从中调用xdebug_print_function_stack（）时，这是有用的。 （在Xdebug 2.3中引入）。</p>
</blockquote>
</li>
</ul>
<h3 id="void-xdebug-start-function-monitor（array-list-of-functions-to-monitor）"><a href="#void-xdebug-start-function-monitor（array-list-of-functions-to-monitor）" class="headerlink" title="void xdebug_start_function_monitor（array $ list_of_functions_to_monitor）"></a><strong>void xdebug_start_function_monitor（array $ list_of_functions_to_monitor）</strong></h3><p>开始功能监控</p>
<p>在2.4版本中引入</p>
<p>此函数开始监视列表中给出的函数作为此函数的参数。 函数监视允许您找到代码中提供的作为参数的函数在哪里调用。 这可以用于跟踪使用旧的或不鼓励的函数的位置。</p>
<p>Example:<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line">xdebug_start_function_monitor( [ <span class="string">'strrev'</span>, <span class="string">'array_push'</span> ] );</div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure></p>
<p>您还可以向定义要监视的函数的数组添加类方法和静态方法。 例如，要捕获对DramModel :: canSee的静态调用和对Whisky-&gt; drink的动态调用，您将启动监视器：</p>
<p>Example:<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line">xdebug_start_function_monitor( [ <span class="string">'DramModel::canSee'</span>, <span class="string">'Whisky-&gt;drink'</span>] );</div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure></p>
<p>定义的函数区分大小写，并且不会捕获对静态方法的动态调用。</p>
<h3 id="void-xdebug-stop-function-monitor（）"><a href="#void-xdebug-stop-function-monitor（）" class="headerlink" title="void xdebug_stop_function_monitor（）"></a><strong>void xdebug_stop_function_monitor（）</strong></h3><p>停止监视功能</p>
<p>在2.4版本中引入</p>
<p>此功能停止功能监视器。 为了获得受监视函数的列表，您需要使用xdebug_get_monitored_functions（）函数。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;当Xdebug被激活时，只要PHP决定显示通知，警告，错误等，它将显示一个堆栈跟踪。堆栈跟踪显示的信息以及它们的呈现方式可以配置为满足您的需要。&lt;/p&gt;
&lt;p&gt;Xdebug在错误情况下显示的堆栈跟踪（如果display_errors在php.ini中设置为On）在它们显示的信息量上相当保守。 这是因为大量的信息可以减慢脚本的执行和在浏览器中呈现堆栈跟踪本身。 但是，可以使堆栈跟踪显示具有不同设置的更详细信息。&lt;/p&gt;
    
    </summary>
    
      <category term="PHP" scheme="https://weizhimiao.github.io/categories/PHP/"/>
    
    
      <category term="Xdebug" scheme="https://weizhimiao.github.io/tags/Xdebug/"/>
    
  </entry>
  
  <entry>
    <title>Xdebug之变量显示功能</title>
    <link href="https://weizhimiao.github.io/2016/10/22/Xdebug%E4%B9%8B%E5%8F%98%E9%87%8F%E6%98%BE%E7%A4%BA%E5%8A%9F%E8%83%BD/"/>
    <id>https://weizhimiao.github.io/2016/10/22/Xdebug之变量显示功能/</id>
    <published>2016-10-22T12:30:00.000Z</published>
    <updated>2016-10-22T16:07:20.000Z</updated>
    
    <content type="html"><![CDATA[<p>Xdebug替换了PHP的var_dump（）函数来显示变量。 Xdebug的版本包括不同类型的不同颜色，并且限制了数组元素/对象属性的数量，最大深度和字符串长度。 还有一些其他函数处理可变显示。</p>
<a id="more"></a>
<p>有一些设置控制Xdebug修改的var_dump（）函数的输出：</p>
<ul>
<li>xdebug.var_display_max_children，</li>
<li>xdebug.var_display_max_data</li>
<li><p>xdebug.var_display_max_depth</p>
<p>这三个设置的效果最好用一个例子。 下面的脚本运行四次，每次使用不同的设置。 您可以使用选项卡查看差异。</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">test</span> </span>&#123;</div><div class="line">    <span class="keyword">public</span> $pub = <span class="keyword">false</span>;</div><div class="line">    <span class="keyword">private</span> $priv = <span class="keyword">true</span>;</div><div class="line">    <span class="keyword">protected</span> $prot = <span class="number">42</span>;</div><div class="line">&#125;</div><div class="line">$t = <span class="keyword">new</span> test;</div><div class="line">$t-&gt;pub = $t;</div><div class="line">$data = <span class="keyword">array</span>(</div><div class="line">    <span class="string">'one'</span> =&gt; <span class="string">'a somewhat long string!'</span>,</div><div class="line">    <span class="string">'two'</span> =&gt; <span class="keyword">array</span>(</div><div class="line">        <span class="string">'two.one'</span> =&gt; <span class="keyword">array</span>(</div><div class="line">            <span class="string">'two.one.zero'</span> =&gt; <span class="number">210</span>,</div><div class="line">            <span class="string">'two.one.one'</span> =&gt; <span class="keyword">array</span>(</div><div class="line">                <span class="string">'two.one.one.zero'</span> =&gt; <span class="number">3.141592564</span>,</div><div class="line">                <span class="string">'two.one.one.one'</span>  =&gt; <span class="number">2.7</span>,</div><div class="line">            ),</div><div class="line">        ),</div><div class="line">    ),</div><div class="line">    <span class="string">'three'</span> =&gt; $t,</div><div class="line">    <span class="string">'four'</span> =&gt; range(<span class="number">0</span>, <span class="number">5</span>),</div><div class="line">);</div><div class="line">var_dump( $data );</div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p>默认</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">array</div><div class="line">  &apos;one&apos; =&gt; string &apos;a somewhat long string!&apos; (length=23)</div><div class="line">  &apos;two&apos; =&gt;</div><div class="line">    array</div><div class="line">      &apos;two.one&apos; =&gt;</div><div class="line">        array</div><div class="line">          &apos;two.one.zero&apos; =&gt; int 210</div><div class="line">          &apos;two.one.one&apos; =&gt;</div><div class="line">            array</div><div class="line">              ...</div><div class="line">  &apos;three&apos; =&gt;</div><div class="line">    object(test)[1]</div><div class="line">      public &apos;pub&apos; =&gt;</div><div class="line">        &amp;object(test)[1]</div><div class="line">      private &apos;priv&apos; =&gt; boolean true</div><div class="line">      protected &apos;prot&apos; =&gt; int 42</div><div class="line">  &apos;four&apos; =&gt;</div><div class="line">    array</div><div class="line">      0 =&gt; int 0</div><div class="line">      1 =&gt; int 1</div><div class="line">      2 =&gt; int 2</div><div class="line">      3 =&gt; int 3</div><div class="line">      4 =&gt; int 4</div><div class="line">      5 =&gt; int 5</div></pre></td></tr></table></figure>
</li>
<li><p>children=2</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">array</div><div class="line">  &apos;one&apos; =&gt; string &apos;a somewhat long string!&apos; (length=23)</div><div class="line">  &apos;two&apos; =&gt;</div><div class="line">    array</div><div class="line">      &apos;two.one&apos; =&gt;</div><div class="line">        array</div><div class="line">          &apos;two.one.zero&apos; =&gt; int 210</div><div class="line">          &apos;two.one.one&apos; =&gt;</div><div class="line">            array</div><div class="line">              ...</div><div class="line">  more elements...</div></pre></td></tr></table></figure>
</li>
<li><p>data=16</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">array</div><div class="line">  &apos;one&apos; =&gt; string &apos;a somewhat long &apos;... (length=23)</div><div class="line">  &apos;two&apos; =&gt;</div><div class="line">    array</div><div class="line">      &apos;two.one&apos; =&gt;</div><div class="line">        array</div><div class="line">          &apos;two.one.zero&apos; =&gt; int 210</div><div class="line">          &apos;two.one.one&apos; =&gt;</div><div class="line">            array</div><div class="line">              ...</div><div class="line">  &apos;three&apos; =&gt;</div><div class="line">    object(test)[1]</div><div class="line">      public &apos;pub&apos; =&gt;</div><div class="line">        &amp;object(test)[1]</div><div class="line">      private &apos;priv&apos; =&gt; boolean true</div><div class="line">      protected &apos;prot&apos; =&gt; int 42</div><div class="line">  &apos;four&apos; =&gt;</div><div class="line">    array</div><div class="line">      0 =&gt; int 0</div><div class="line">      1 =&gt; int 1</div><div class="line">      2 =&gt; int 2</div><div class="line">      3 =&gt; int 3</div><div class="line">      4 =&gt; int 4</div><div class="line">      5 =&gt; int 5</div></pre></td></tr></table></figure>
</li>
<li><p>depth=2</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">array</div><div class="line">  &apos;one&apos; =&gt; string &apos;a somewhat long string!&apos; (length=23)</div><div class="line">  &apos;two&apos; =&gt;</div><div class="line">    array</div><div class="line">      &apos;two.one&apos; =&gt;</div><div class="line">        array</div><div class="line">          ...</div><div class="line">  &apos;three&apos; =&gt;</div><div class="line">    object(test)[1]</div><div class="line">      public &apos;pub&apos; =&gt;</div><div class="line">        &amp;object(test)[1]</div><div class="line">      private &apos;priv&apos; =&gt; boolean true</div><div class="line">      protected &apos;prot&apos; =&gt; int 42</div><div class="line">  &apos;four&apos; =&gt;</div><div class="line">    array</div><div class="line">      0 =&gt; int 0</div><div class="line">      1 =&gt; int 1</div><div class="line">      2 =&gt; int 2</div><div class="line">      3 =&gt; int 3</div><div class="line">      4 =&gt; int 4</div><div class="line">      5 =&gt; int 5</div></pre></td></tr></table></figure>
</li>
<li><p>children=3, data=8, depth=1</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">array</div><div class="line">  &apos;one&apos; =&gt; string &apos;a somewh&apos;... (length=23)</div><div class="line">  &apos;two&apos; =&gt;</div><div class="line">    array</div><div class="line">      ...</div><div class="line">  &apos;three&apos; =&gt;</div><div class="line">    object(test)[1]</div><div class="line">      ...</div><div class="line">  more elements...</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="相关设置"><a href="#相关设置" class="headerlink" title="相关设置"></a>相关设置</h2><h3 id="xdebug-cli-color"><a href="#xdebug-cli-color" class="headerlink" title="xdebug.cli_color"></a><strong>xdebug.cli_color</strong></h3><p>类型：整数，默认值：0，在Xdebug&gt; 2.2中引入</p>
<ul>
<li><p>如果此设置为1，则Xdebug将在CLI模式下和输出为tty时对var_dumps和堆栈跟踪输出进行颜色。在Windows上，需要安装ANSICON工具。</p>
</li>
<li><p>如果设置为2，那么无论Xdebug是否连接到tty或是否安装了ANSICON，Xdebug都将始终对var_dumps和堆栈跟踪进行着色。在这种情况下，您可能会看到转义码。</p>
</li>
</ul>
<p>有关更多信息，请参阅此<a href="http://drck.me/clicolor-9cr" target="_blank" rel="external">文章</a>。</p>
<h3 id="xdebug-overload-var-dump"><a href="#xdebug-overload-var-dump" class="headerlink" title="xdebug.overload_var_dump"></a><strong>xdebug.overload_var_dump</strong></h3><p>类型：boolean，默认值：2，在Xdebug&gt; 2.1中引入</p>
<ul>
<li><p>默认情况下，当html_errors php.ini设置为1或2时，Xdebug会自动重载var_dump（）并显示变量。</p>
</li>
<li><p>如果您不想要，可以将此设置设置为0，但首先检查它是否不是更聪明的关闭html_errors。</p>
</li>
<li><p>您也可以使用2作为此设置的值。除了格式化var_dump（）输出很好，它还将添加文件名和行号到输出。还尊重xdebug.file_link_format设置。 （Xdebug 2.3中的新功能）</p>
</li>
</ul>
<p>在Xdebug 2.4之前，此设置的默认值为1。</p>
<h3 id="xdebug-var-display-max-children"><a href="#xdebug-var-display-max-children" class="headerlink" title="xdebug.var_display_max_children"></a><strong>xdebug.var_display_max_children</strong></h3><p>类型：整数，默认值：128</p>
<p>控制使用xdebug_var_dump（），xdebug.show_local_vars或通过函数跟踪显示变量时显示的数组子元素和对象的属性的数量。</p>
<ul>
<li>要禁用任何限制，请使用-1作为值。</li>
</ul>
<p>此设置对通过远程调试功能发送到客户端的子项数没有任何影响。</p>
<h3 id="xdebug-var-display-max-data"><a href="#xdebug-var-display-max-data" class="headerlink" title="xdebug.var_display_max_data"></a><strong>xdebug.var_display_max_data</strong></h3><p>类型：整数，默认值：512</p>
<p>控制使用xdebug_var_dump（），xdebug.show_local_vars或通过函数跟踪显示变量时显示的最大字符串长度。</p>
<ul>
<li>要禁用任何限制，请使用-1作为值。</li>
</ul>
<p>此设置对通过远程调试功能发送到客户端的子项数没有任何影响。</p>
<h3 id="xdebug-var-display-max-depth"><a href="#xdebug-var-display-max-depth" class="headerlink" title="xdebug.var_display_max_depth"></a><strong>xdebug.var_display_max_depth</strong></h3><p>类型：整数，默认值：3</p>
<p>当使用xdebug_var_dump（），xdebug.show_local_vars或通过函数跟踪显示变量时，控制数组元素和对象属性的嵌套级别数。</p>
<ul>
<li>您可以选择的最大值为1023.您还可以使用-1作为值来选择此最大数。</li>
</ul>
<p>此设置对通过远程调试功能发送到客户端的子项数没有任何影响。</p>
<h2 id="相关函数"><a href="#相关函数" class="headerlink" title="相关函数"></a>相关函数</h2><h3 id="void-var-dump（-mixture-var-，…-）"><a href="#void-var-dump（-mixture-var-，…-）" class="headerlink" title="void var_dump（[mixture var [，…]]）"></a><strong>void var_dump（[mixture var [，…]]）</strong></h3><blockquote>
<p>显示有关变量的详细信息</p>
</blockquote>
<p>此函数由Xdebug重载，请参阅xdebug_var_dump（）的说明。</p>
<h3 id="void-xdebug-debug-zval（-string-varname-，…-）"><a href="#void-xdebug-debug-zval（-string-varname-，…-）" class="headerlink" title="void xdebug_debug_zval（[string varname [，…]]）"></a><strong>void xdebug_debug_zval（[string varname [，…]]）</strong></h3><blockquote>
<p>显示有关变量的信息</p>
</blockquote>
<p>此函数显示有关一个或多个变量的结构化信息，包括其类型，值和引用计数信息。使用值递归地探索数组。这个函数的实现不同于PHP的debug_zval_dump（）函数，以解决该函数的问题，因为变量本身实际上传递给函数。 Xdebug的版本是更好的，因为它使用变量名称来查找内部符号表中的变量，并直接访问所有的属性，而不必处理实际传递一个变量到一个函数。结果是，该函数返回的信息比PHP自己的用于显示zval信息的函数准确得多。</p>
<p>从Xdebug 2.3开始支持除了简单变量名（例如下面的“a [2]”）之外的任何东西。</p>
<p>Example:<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line">    $a = <span class="keyword">array</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>);</div><div class="line">    $b =&amp; $a;</div><div class="line">    $c =&amp; $a[<span class="number">2</span>];</div><div class="line"></div><div class="line">    xdebug_debug_zval(<span class="string">'a'</span>);</div><div class="line">    xdebug_debug_zval(<span class="string">"a[2]"</span>);</div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure></p>
<p>结果：(refcount:引用次数，)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">a: (refcount=2, is_ref=1)=array (</div><div class="line">	0 =&gt; (refcount=1, is_ref=0)=1,</div><div class="line">	1 =&gt; (refcount=1, is_ref=0)=2,</div><div class="line">	2 =&gt; (refcount=2, is_ref=1)=3)</div><div class="line">a[2]: (refcount=2, is_ref=1)=3</div></pre></td></tr></table></figure></p>
<h3 id="void-xdebug-debug-zval-stdout（-string-varname-，…-）"><a href="#void-xdebug-debug-zval-stdout（-string-varname-，…-）" class="headerlink" title="void xdebug_debug_zval_stdout（[string varname [，…]]）"></a><strong>void xdebug_debug_zval_stdout（[string varname [，…]]）</strong></h3><blockquote>
<p>将有关变量的信息返回到stdout。</p>
</blockquote>
<p>此函数显示有关一个或多个变量的结构化信息，包括其类型，值和引用计数信息。 使用值递归地探索数组。 与xdebug_debug_zval（）的区别在于，该信息不通过Web服务器API层显示，而是直接显示在stdout上（因此，在Apache以单进程模式运行时，它会在控制台上运行）。</p>
<p>Example:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;?php</div><div class="line">    $a = array(1, 2, 3);</div><div class="line">    $b =&amp; $a;</div><div class="line">    $c =&amp; $a[2];</div><div class="line"></div><div class="line">    xdebug_debug_zval_stdout(&apos;a&apos;);</div></pre></td></tr></table></figure></p>
<p>返回：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">a: (refcount=2, is_ref=1)=array (</div><div class="line">	0 =&gt; (refcount=1, is_ref=0)=1,</div><div class="line">	1 =&gt; (refcount=1, is_ref=0)=2,</div><div class="line">	2 =&gt; (refcount=2, is_ref=1)=3)</div></pre></td></tr></table></figure></p>
<h3 id="void-xdebug-dump-superglobals（）"><a href="#void-xdebug-dump-superglobals（）" class="headerlink" title="void xdebug_dump_superglobals（）"></a><strong>void xdebug_dump_superglobals（）</strong></h3><blockquote>
<p>显示有关超级全局的信息</p>
</blockquote>
<p>此函数转储指定的超级全局元素的值通过php.ini中的xdebug.dump.*选项。 对于下面的示例，php.ini中的设置是：</p>
<p>Example:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">xdebug.dump.GET=*</div><div class="line">xdebug.dump.SERVER=REMOTE_ADDR</div><div class="line"></div><div class="line">Query string:</div><div class="line">?var=fourty%20two&amp;array[a]=a&amp;array[9]=b</div></pre></td></tr></table></figure></p>
<p>结果：<br><img src="http://n.sinaimg.cn/games/3ece443e/20161022/8F0658D7-C951-4B12-BC74-92E15E31C44C.png" alt="img"></p>
<h3 id="void-xdebug-var-dump（-mixed-var-，…-）"><a href="#void-xdebug-var-dump（-mixed-var-，…-）" class="headerlink" title="void xdebug_var_dump（[mixed var [，…]]）"></a><strong>void xdebug_var_dump（[mixed var [，…]]）</strong></h3><blockquote>
<p>显示有关变量的详细信息</p>
</blockquote>
<p>此函数显示有关包含其类型和值的一个或多个表达式的结构化信息。 使用值递归地探索数组。 请参阅变量显示功能的介绍，其中php.ini设置影响此功能。</p>
<p>Example:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">&lt;?php</div><div class="line">ini_set(&apos;xdebug.var_display_max_children&apos;, 3 );</div><div class="line">$c = new stdClass;</div><div class="line">$c-&gt;foo = &apos;bar&apos;;</div><div class="line">$c-&gt;file = fopen( &apos;/etc/passwd&apos;, &apos;r&apos; );</div><div class="line">var_dump(</div><div class="line">    array(</div><div class="line">        array(TRUE, 2, 3.14, &apos;foo&apos;),</div><div class="line">        &apos;object&apos; =&gt; $c</div><div class="line">    )</div><div class="line">);</div><div class="line">?&gt;</div></pre></td></tr></table></figure></p>
<p>结果<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">array</div><div class="line">  0 =&gt;</div><div class="line">    array</div><div class="line">      0 =&gt; boolean true</div><div class="line">      1 =&gt; int 2</div><div class="line">      2 =&gt; float 3.14</div><div class="line">      more elements...</div><div class="line">  &apos;object&apos; =&gt;</div><div class="line">    object(stdClass)[1]</div><div class="line">      public &apos;foo&apos; =&gt; string &apos;bar&apos; (length=3)</div><div class="line">      public &apos;file&apos; =&gt; resource(3, stream)</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Xdebug替换了PHP的var_dump（）函数来显示变量。 Xdebug的版本包括不同类型的不同颜色，并且限制了数组元素/对象属性的数量，最大深度和字符串长度。 还有一些其他函数处理可变显示。&lt;/p&gt;
    
    </summary>
    
      <category term="PHP" scheme="https://weizhimiao.github.io/categories/PHP/"/>
    
    
      <category term="Xdebug" scheme="https://weizhimiao.github.io/tags/Xdebug/"/>
    
  </entry>
  
  <entry>
    <title>Xdebug之函数轨迹跟踪</title>
    <link href="https://weizhimiao.github.io/2016/10/22/Xdebug%E4%B9%8B%E5%87%BD%E6%95%B0%E8%BD%A8%E8%BF%B9%E8%B7%9F%E8%B8%AA/"/>
    <id>https://weizhimiao.github.io/2016/10/22/Xdebug之函数轨迹跟踪/</id>
    <published>2016-10-22T12:30:00.000Z</published>
    <updated>2016-10-22T16:07:06.000Z</updated>
    
    <content type="html"><![CDATA[<p>Xdebug允许您记录所有函数调用，包括参数和返回值到不同格式的文件。</p>
<p>那些所谓的“函数跟踪”可以帮助当你是新的一个应用程序，或当你试图找出当你的应用程序运行时究竟是怎么回事。<br>函数跟踪还可以选择显示传递给函数和方法的变量的值，以及返回值。 在默认跟踪中，这两个元素不可用。</p>
<a id="more"></a>
<h2 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h2><p>有三种输出格式。 一个是作为一个人类可读的跟踪，另一个更适合计算机程序，因为它更容易解析，最后一个使用HTML格式化跟踪。 您可以使用xdebug.trace_format设置在两种不同的格式之间切换。 有一些设置控制哪些信息写入跟踪文件。 有一些设置包括变量（xdebug.collect_params）和包括返回值（xdebug.collect_return）例如。 下面的示例显示了不同设置对人类可读功能轨迹的影响。</p>
<p>脚本<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line">$str = <span class="string">"Xdebug"</span>;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">ret_ord</span><span class="params">( $c )</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">return</span> ord( $c );</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">foreach</span> ( str_split( $str ) <span class="keyword">as</span> $char )</div><div class="line">&#123;</div><div class="line">    <span class="keyword">echo</span> $char, <span class="string">": "</span>, ret_ord( $char ), <span class="string">"\n"</span>;</div><div class="line">&#125;</div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure></p>
<p>结果：</p>
<p>以下是使用xdebug.collect_params设置的不同设置的结果。 因为这不是一个Web环境,值2没有任何意义，因为工具提示不工作在文本文件。</p>
<ul>
<li><p>default</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">TRACE START [2007-05-06 14:37:06]</div><div class="line">    0.0003     114112   -&gt; &#123;main&#125;() ../trace.php:0</div><div class="line">    0.0004     114272     -&gt; str_split() ../trace.php:8</div><div class="line">    0.0153     117424     -&gt; ret_ord() ../trace.php:10</div><div class="line">    0.0165     117584       -&gt; ord() ../trace.php:5</div><div class="line">    0.0166     117584     -&gt; ret_ord() ../trace.php:10</div><div class="line">    0.0167     117584       -&gt; ord() ../trace.php:5</div><div class="line">    0.0168     117584     -&gt; ret_ord() ../trace.php:10</div><div class="line">    0.0168     117584       -&gt; ord() ../trace.php:5</div><div class="line">    0.0170     117584     -&gt; ret_ord() ../trace.php:10</div><div class="line">    0.0170     117584       -&gt; ord() ../trace.php:5</div><div class="line">    0.0172     117584     -&gt; ret_ord() ../trace.php:10</div><div class="line">    0.0172     117584       -&gt; ord() ../trace.php:5</div><div class="line">    0.0173     117584     -&gt; ret_ord() ../trace.php:10</div><div class="line">    0.0174     117584       -&gt; ord() ../trace.php:5</div><div class="line">    0.0177      41152</div><div class="line">TRACE END   [2007-05-06 14:37:07]</div></pre></td></tr></table></figure>
</li>
<li><p>collect_params=1</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">TRACE START [2007-05-06 14:37:11]</div><div class="line">    0.0003     114112   -&gt; &#123;main&#125;() ../trace.php:0</div><div class="line">    0.0004     114272     -&gt; str_split(string(6)) ../trace.php:8</div><div class="line">    0.0007     117424     -&gt; ret_ord(string(1)) ../trace.php:10</div><div class="line">    0.0007     117584       -&gt; ord(string(1)) ../trace.php:5</div><div class="line">    0.0009     117584     -&gt; ret_ord(string(1)) ../trace.php:10</div><div class="line">    0.0009     117584       -&gt; ord(string(1)) ../trace.php:5</div><div class="line">    0.0010     117584     -&gt; ret_ord(string(1)) ../trace.php:10</div><div class="line">    0.0011     117584       -&gt; ord(string(1)) ../trace.php:5</div><div class="line">    0.0012     117584     -&gt; ret_ord(string(1)) ../trace.php:10</div><div class="line">    0.0013     117584       -&gt; ord(string(1)) ../trace.php:5</div><div class="line">    0.0014     117584     -&gt; ret_ord(string(1)) ../trace.php:10</div><div class="line">    0.0014     117584       -&gt; ord(string(1)) ../trace.php:5</div><div class="line">    0.0016     117584     -&gt; ret_ord(string(1)) ../trace.php:10</div><div class="line">    0.0016     117584       -&gt; ord(string(1)) ../trace.php:5</div><div class="line">    0.0019      41152</div><div class="line">TRACE END   [2007-05-06 14:37:11]</div></pre></td></tr></table></figure>
</li>
<li><p>collect_params=3</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">TRACE START [2007-05-06 14:37:13]</div><div class="line">    0.0003     114112   -&gt; &#123;main&#125;() ../trace.php:0</div><div class="line">    0.0004     114272     -&gt; str_split(&apos;Xdebug&apos;) ../trace.php:8</div><div class="line">    0.0007     117424     -&gt; ret_ord(&apos;X&apos;) ../trace.php:10</div><div class="line">    0.0007     117584       -&gt; ord(&apos;X&apos;) ../trace.php:5</div><div class="line">    0.0009     117584     -&gt; ret_ord(&apos;d&apos;) ../trace.php:10</div><div class="line">    0.0009     117584       -&gt; ord(&apos;d&apos;) ../trace.php:5</div><div class="line">    0.0010     117584     -&gt; ret_ord(&apos;e&apos;) ../trace.php:10</div><div class="line">    0.0011     117584       -&gt; ord(&apos;e&apos;) ../trace.php:5</div><div class="line">    0.0012     117584     -&gt; ret_ord(&apos;b&apos;) ../trace.php:10</div><div class="line">    0.0013     117584       -&gt; ord(&apos;b&apos;) ../trace.php:5</div><div class="line">    0.0014     117584     -&gt; ret_ord(&apos;u&apos;) ../trace.php:10</div><div class="line">    0.0014     117584       -&gt; ord(&apos;u&apos;) ../trace.php:5</div><div class="line">    0.0016     117584     -&gt; ret_ord(&apos;g&apos;) ../trace.php:10</div><div class="line">    0.0016     117584       -&gt; ord(&apos;g&apos;) ../trace.php:5</div><div class="line">    0.0019      41152</div><div class="line">TRACE END   [2007-05-06 14:37:13]</div></pre></td></tr></table></figure>
</li>
<li><p>collect_params=4</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">TRACE START [2007-05-06 14:37:16]</div><div class="line">    0.0003     114112   -&gt; &#123;main&#125;() ../trace.php:0</div><div class="line">    0.0004     114272     -&gt; str_split(&apos;Xdebug&apos;) ../trace.php:8</div><div class="line">    0.0007     117424     -&gt; ret_ord($c = &apos;X&apos;) ../trace.php:10</div><div class="line">    0.0007     117584       -&gt; ord(&apos;X&apos;) ../trace.php:5</div><div class="line">    0.0009     117584     -&gt; ret_ord($c = &apos;d&apos;) ../trace.php:10</div><div class="line">    0.0009     117584       -&gt; ord(&apos;d&apos;) ../trace.php:5</div><div class="line">    0.0010     117584     -&gt; ret_ord($c = &apos;e&apos;) ../trace.php:10</div><div class="line">    0.0011     117584       -&gt; ord(&apos;e&apos;) ../trace.php:5</div><div class="line">    0.0012     117584     -&gt; ret_ord($c = &apos;b&apos;) ../trace.php:10</div><div class="line">    0.0013     117584       -&gt; ord(&apos;b&apos;) ../trace.php:5</div><div class="line">    0.0014     117584     -&gt; ret_ord($c = &apos;u&apos;) ../trace.php:10</div><div class="line">    0.0014     117584       -&gt; ord(&apos;u&apos;) ../trace.php:5</div><div class="line">    0.0016     117584     -&gt; ret_ord($c = &apos;g&apos;) ../trace.php:10</div><div class="line">    0.0016     117584       -&gt; ord(&apos;g&apos;) ../trace.php:5</div><div class="line">    0.0019      41152</div><div class="line">TRACE END   [2007-05-06 14:37:16]</div></pre></td></tr></table></figure>
</li>
</ul>
<p>除了xdebug.collect_params设置，还有另一些影响跟踪文件输出的设置。<br>第一个选项卡“默认”显示与上面的默认值相同。<br>第二个选项卡“show_mem_delta = 1”还显示输出文件中两个不同行之间的内存使用差异。</p>
<p>在“collect return = 1”选项卡上，所有函数调用的返回值也是可见的。 这使用xdebug.collect返回设置打开。</p>
<p>名为“collect assignments = 1”的选项卡显示可变分配，可以使用xdebug.collect分配设置打开。</p>
<p>最后一个选项卡显示不同的输出格式，更容易解析，但更难阅读。<br>因此，如果有一个额外的工具来解释跟踪文件，xdebug.trace_format设置是非常有用的。</p>
<ul>
<li><p>default</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">TRACE START [2007-05-06 14:37:06]</div><div class="line">    0.0003     114112   -&gt; &#123;main&#125;() ../trace.php:0</div><div class="line">    0.0004     114272     -&gt; str_split() ../trace.php:8</div><div class="line">    0.0153     117424     -&gt; ret_ord() ../trace.php:10</div><div class="line">    0.0165     117584       -&gt; ord() ../trace.php:5</div><div class="line">    0.0166     117584     -&gt; ret_ord() ../trace.php:10</div><div class="line">    0.0167     117584       -&gt; ord() ../trace.php:5</div><div class="line">    0.0168     117584     -&gt; ret_ord() ../trace.php:10</div><div class="line">    0.0168     117584       -&gt; ord() ../trace.php:5</div><div class="line">    0.0170     117584     -&gt; ret_ord() ../trace.php:10</div><div class="line">    0.0170     117584       -&gt; ord() ../trace.php:5</div><div class="line">    0.0172     117584     -&gt; ret_ord() ../trace.php:10</div><div class="line">    0.0172     117584       -&gt; ord() ../trace.php:5</div><div class="line">    0.0173     117584     -&gt; ret_ord() ../trace.php:10</div><div class="line">    0.0174     117584       -&gt; ord() ../trace.php:5</div><div class="line">    0.0177      41152</div><div class="line">TRACE END   [2007-05-06 14:37:07]</div></pre></td></tr></table></figure>
</li>
<li><p>show_mem_delta=1</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">TRACE START [2007-05-06 14:37:26]</div><div class="line">    0.0003     114112  +114112   -&gt; &#123;main&#125;() ../trace.php:0</div><div class="line">    0.0004     114272     +160     -&gt; str_split(&apos;Xdebug&apos;) ../trace.php:8</div><div class="line">    0.0007     117424    +3152     -&gt; ret_ord($c = &apos;X&apos;) ../trace.php:10</div><div class="line">    0.0007     117584     +160       -&gt; ord(&apos;X&apos;) ../trace.php:5</div><div class="line">    0.0009     117584       +0     -&gt; ret_ord($c = &apos;d&apos;) ../trace.php:10</div><div class="line">    0.0009     117584       +0       -&gt; ord(&apos;d&apos;) ../trace.php:5</div><div class="line">    0.0011     117584       +0     -&gt; ret_ord($c = &apos;e&apos;) ../trace.php:10</div><div class="line">    0.0011     117584       +0       -&gt; ord(&apos;e&apos;) ../trace.php:5</div><div class="line">    0.0013     117584       +0     -&gt; ret_ord($c = &apos;b&apos;) ../trace.php:10</div><div class="line">    0.0013     117584       +0       -&gt; ord(&apos;b&apos;) ../trace.php:5</div><div class="line">    0.0014     117584       +0     -&gt; ret_ord($c = &apos;u&apos;) ../trace.php:10</div><div class="line">    0.0015     117584       +0       -&gt; ord(&apos;u&apos;) ../trace.php:5</div><div class="line">    0.0016     117584       +0     -&gt; ret_ord($c = &apos;g&apos;) ../trace.php:10</div><div class="line">    0.0017     117584       +0       -&gt; ord(&apos;g&apos;) ../trace.php:5</div><div class="line">    0.0019      41152</div><div class="line">TRACE END   [2007-05-06 14:37:26]</div></pre></td></tr></table></figure>
</li>
<li><p>collect_return=1</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">TRACE START [2007-05-06 14:37:35]</div><div class="line">    0.0003     114112   -&gt; &#123;main&#125;() ../trace.php:0</div><div class="line">    0.0004     114272     -&gt; str_split(&apos;Xdebug&apos;) ../trace.php:8</div><div class="line">                          &gt;=&gt; array (0 =&gt; &apos;X&apos;, 1 =&gt; &apos;d&apos;, 2 =&gt; &apos;e&apos;, 3 =&gt; &apos;b&apos;, 4 =&gt; &apos;u&apos;, 5 =&gt; &apos;g&apos;)</div><div class="line">    0.0007     117424     -&gt; ret_ord($c = &apos;X&apos;) ../trace.php:10</div><div class="line">    0.0007     117584       -&gt; ord(&apos;X&apos;) ../trace.php:5</div><div class="line">                            &gt;=&gt; 88</div><div class="line">                          &gt;=&gt; 88</div><div class="line">    0.0009     117584     -&gt; ret_ord($c = &apos;d&apos;) ../trace.php:10</div><div class="line">    0.0009     117584       -&gt; ord(&apos;d&apos;) ../trace.php:5</div><div class="line">                            &gt;=&gt; 100</div><div class="line">                          &gt;=&gt; 100</div><div class="line">    0.0011     117584     -&gt; ret_ord($c = &apos;e&apos;) ../trace.php:10</div><div class="line">    0.0011     117584       -&gt; ord(&apos;e&apos;) ../trace.php:5</div><div class="line">                            &gt;=&gt; 101</div><div class="line">                          &gt;=&gt; 101</div><div class="line">    0.0013     117584     -&gt; ret_ord($c = &apos;b&apos;) ../trace.php:10</div><div class="line">    0.0013     117584       -&gt; ord(&apos;b&apos;) ../trace.php:5</div><div class="line">                            &gt;=&gt; 98</div><div class="line">                          &gt;=&gt; 98</div><div class="line">    0.0015     117584     -&gt; ret_ord($c = &apos;u&apos;) ../trace.php:10</div><div class="line">    0.0016     117584       -&gt; ord(&apos;u&apos;) ../trace.php:5</div><div class="line">                            &gt;=&gt; 117</div><div class="line">                          &gt;=&gt; 117</div><div class="line">    0.0017     117584     -&gt; ret_ord($c = &apos;g&apos;) ../trace.php:10</div><div class="line">    0.0018     117584       -&gt; ord(&apos;g&apos;) ../trace.php:5</div><div class="line">                            &gt;=&gt; 103</div><div class="line">                          &gt;=&gt; 103</div><div class="line">                        &gt;=&gt; 1</div><div class="line">    0.0021      41152</div><div class="line">TRACE END   [2007-05-06 14:37:35]</div></pre></td></tr></table></figure>
</li>
<li><p>trace_format=1</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">Version: 2.0.0RC4-dev</div><div class="line">TRACE START [2007-05-06 18:29:01]</div><div class="line">1	0	0	0.010870	114112	&#123;main&#125;	1	../trace.php	0</div><div class="line">2	1	0	0.032009	114272	str_split	0	../trace.php	8</div><div class="line">2	1	1	0.032073	116632</div><div class="line">2	2	0	0.033505	117424	ret_ord	1	../trace.php	10</div><div class="line">3	3	0	0.033531	117584	ord	0	../trace.php	5</div><div class="line">3	3	1	0.033551	117584</div><div class="line">2	2	1	0.033567	117584</div><div class="line">2	4	0	0.033718	117584	ret_ord	1	../trace.php	10</div><div class="line">3	5	0	0.033740	117584	ord	0	../trace.php	5</div><div class="line">3	5	1	0.033758	117584</div><div class="line">2	4	1	0.033770	117584</div><div class="line">2	6	0	0.033914	117584	ret_ord	1	../trace.php	10</div><div class="line">3	7	0	0.033936	117584	ord	0	../trace.php	5</div><div class="line">3	7	1	0.033953	117584</div><div class="line">2	6	1	0.033965	117584</div><div class="line">2	8	0	0.034108	117584	ret_ord	1	../trace.php	10</div><div class="line">3	9	0	0.034130	117584	ord	0	../trace.php	5</div><div class="line">3	9	1	0.034147	117584</div><div class="line">2	8	1	0.034160	117584</div><div class="line">2	10	0	0.034302	117584	ret_ord	1	../trace.php	10</div><div class="line">3	11	0	0.034325	117584	ord	0	../trace.php	5</div><div class="line">3	11	1	0.034342	117584</div><div class="line">2	10	1	0.034354	117584</div><div class="line">2	12	0	0.034497	117584	ret_ord	1	../trace.php	10</div><div class="line">3	13	0	0.034519	117584	ord	0	../trace.php	5</div><div class="line">3	13	1	0.034536	117584</div><div class="line">2	12	1	0.034549	117584</div><div class="line">1	0	1	0.034636	117584</div><div class="line">TRACE END   [2007-05-06 18:29:01]</div></pre></td></tr></table></figure>
</li>
</ul>
<p><strong>VIM语法文件</strong></p>
<p>Xdebug附带了语法高亮显示跟踪文件的VIM语法文件：xt.vim。<br>为了使VIM能够识别这种新格式，您需要执行以下步骤：</p>
<ol>
<li>复制 xt.vim 文件到 ~/.vim/syntax</li>
<li>修改, 或者创建, ~/.vim/filetype.vim 并添加下列内容<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">augroup filetypedetect</div><div class="line">au BufNewFile,BufRead *.xt  setf xt</div><div class="line">augroup END</div></pre></td></tr></table></figure>
</li>
</ol>
<p>使用这些设置，打开的跟踪文件看起来像：</p>
<p><img src="http://n.sinaimg.cn/games/3ece443e/20161022/QQ20161022-10@2x.png" alt="img"></p>
<h2 id="相关的设置"><a href="#相关的设置" class="headerlink" title="相关的设置"></a>相关的设置</h2><h3 id="xdebug-auto-trace"><a href="#xdebug-auto-trace" class="headerlink" title="xdebug.auto_trace"></a><strong>xdebug.auto_trace</strong></h3><p>类型：布尔值，默认值：0</p>
<p>当此设置设置为on时，将在脚本运行之前启用函数调用的跟踪。这使得可以跟踪auto_prepend_file中的代码。</p>
<h3 id="xdebug-collect-assignments"><a href="#xdebug-collect-assignments" class="headerlink" title="xdebug.collect_assignments"></a><strong>xdebug.collect_assignments</strong></h3><p>类型：boolean，默认值：0，在Xdebug&gt; 2.1中引入</p>
<p>此设置（默认为0）控制Xdebug是否应向函数轨迹添加变量分配。</p>
<h3 id="xdebug-collect-includes"><a href="#xdebug-collect-includes" class="headerlink" title="xdebug.collect_includes"></a><strong>xdebug.collect_includes</strong></h3><p>类型：布尔值，默认值：1</p>
<p>此设置默认为1，控制Xdebug是否应将include（），include_once（），require（）或require_once（）中使用的文件名写入跟踪文件。</p>
<h3 id="xdebug-collect-params"><a href="#xdebug-collect-params" class="headerlink" title="xdebug.collect_params"></a><strong>xdebug.collect_params</strong></h3><p>类型：整数，默认值：0</p>
<p>此设置默认为0，控制在函数跟踪或堆栈跟踪中记录函数调用时，Xdebug是否应收集传递给函数的参数。</p>
<p>该设置默认为0，因为对于非常大的脚本，它可能使用大量的内存，因此使巨量脚本无法运行。您可以最安全地打开此设置，但是您可以预期在具有大量函数调用和/或巨大的数据结构作为参数的脚本中存在一些问题。 Xdebug 2不会有增加的内存使用这个问题，因为它永远不会将此信息存储在内存中。相反，它将只被写入磁盘。这意味着您需要查看磁盘使用情况。</p>
<p>此设置可以有四个不同的值。对于每个值，示出了不同量的信息。下面你将看到每个值提供什么信息。另请参见功能堆栈跟踪的几个截图的介绍。</p>
<table>
<thead>
<tr>
<th>显示的值</th>
<th>参数信息</th>
</tr>
</thead>
<tbody>
<tr>
<td>0</td>
<td>无。</td>
</tr>
<tr>
<td>1</td>
<td>元素的类型和数量（f.e. string（6），array（8））。</td>
</tr>
<tr>
<td>2</td>
<td>元素的类型和数量，带有完整信息的工具提示1。1在CLI版本的PHP中，它不会有工具提示，也不会在输出文件中。</td>
</tr>
<tr>
<td>3</td>
<td>完全变量内容（具有由xdebug.var_display_max_children，xdebug.var_display_max_data和xdebug.var_display_max_depth设置的限制）。</td>
</tr>
<tr>
<td>4</td>
<td>完全变量内容和变量名。</td>
</tr>
<tr>
<td>5</td>
<td>PHP序列化变量内容，没有名称。 （Xdebug 2.3中的新功能）</td>
</tr>
</tbody>
</table>
<h3 id="xdebug-collect-return"><a href="#xdebug-collect-return" class="headerlink" title="xdebug.collect_return"></a><strong>xdebug.collect_return</strong></h3><p>类型：布尔值，默认值：0</p>
<p>此设置默认为0，控制Xdebug是否应将函数调用的返回值写入跟踪文件。</p>
<p>对于计算机化的跟踪文件（xdebug.trace_format = 1），这只能从Xdebug 2.3起。</p>
<h3 id="xdebug-show-mem-delta"><a href="#xdebug-show-mem-delta" class="headerlink" title="xdebug.show_mem_delta"></a><strong>xdebug.show_mem_delta</strong></h3><p>类型：整数，默认值：0</p>
<p>当这个设置设置为某些！= 0 Xdebug的人类可读的生成的跟踪文件将显示在函数调用之间的内存使用的差异。如果Xdebug配置为生成计算机可读的跟踪文件，则它们将始终显示此信息。</p>
<h3 id="xdebug-trace-enable-trigger"><a href="#xdebug-trace-enable-trigger" class="headerlink" title="xdebug.trace_enable_trigger"></a><strong>xdebug.trace_enable_trigger</strong></h3><p>类型：boolean，默认值：0，在Xdebug&gt; 2.2中引入</p>
<p>当此设置设置为1时，可以使用XDEBUG_TRACE GET / POST参数触发跟踪文件的生成，或者设置名为XDEBUG_TRACE的cookie。然后将跟踪数据写入定义的目录。为了防止Xdebug为每个请求生成跟踪文件，您需要将xdebug.auto_trace设置为0.对触发器本身的访问可以通过xdebug.trace_enable_trigger_value配置。</p>
<h3 id="xdebug-trace-enable-trigger-value"><a href="#xdebug-trace-enable-trigger-value" class="headerlink" title="xdebug.trace_enable_trigger_value"></a><strong>xdebug.trace_enable_trigger_value</strong></h3><p>类型：字符串，默认值：“”，在Xdebug&gt; 2.3中引入</p>
<p>此设置可用于限制谁可以使用xdebug.trace_enable_trigger中概述的XDEBUG_TRACE功能。当从空字符串的默认值更改时，cookie，GET或POST参数的值需要使用此设置匹配共享机密集，以便生成跟踪文件。</p>
<h3 id="xdebug-trace-format"><a href="#xdebug-trace-format" class="headerlink" title="xdebug.trace_format"></a><strong>xdebug.trace_format</strong></h3><p>类型：整数，默认值：0</p>
<p>跟踪文件的格式。</p>
<table>
<thead>
<tr>
<th>值</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>0</td>
<td>显示一个人工可读的缩进跟踪文件，具有：时间索引，内存使用，内存增量（如果设置xdebug.show_mem_delta启用），级别，函数名称，函数参数（如果设置xdebug.collect_params启用），文件名和行 数。</td>
</tr>
<tr>
<td>1</td>
<td>写入具有两个不同记录的计算机可读格式。 有不同的记录用于输入堆栈帧，并留下堆栈帧。 下表列出了每种记录类型中的字段。 字段是制表符分隔的。</td>
</tr>
<tr>
<td>2</td>
<td>写入以（简单）HTML格式化的跟踪。</td>
</tr>
</tbody>
</table>
<h3 id="xdebug-trace-options"><a href="#xdebug-trace-options" class="headerlink" title="xdebug.trace_options"></a><strong>xdebug.trace_options</strong></h3><p>类型：整数，默认值：0</p>
<p>当设置为’1’时，跟踪文件将被附加到，而不是在后续请求中被覆盖。</p>
<h3 id="xdebug-trace-output-dir"><a href="#xdebug-trace-output-dir" class="headerlink" title="xdebug.trace_output_dir"></a><strong>xdebug.trace_output_dir</strong></h3><p>类型：字符串，默认值：/ tmp</p>
<p>将写入跟踪文件的目录，确保PHP将运行的用户具有对该目录的写入权限。</p>
<h3 id="xdebug-trace-output-name"><a href="#xdebug-trace-output-name" class="headerlink" title="xdebug.trace_output_name"></a><strong>xdebug.trace_output_name</strong></h3><p>类型：字符串，默认值：trace。％c</p>
<p>此设置确定用于将跟踪转储到的文件的名称。 设置使用格式说明符指定格式，非常类似于sprintf（）和strftime（）。 有几个格式说明符可以用于格式化文件名。 “.xt”扩展名总是自动添加。</p>
<p>可能的格式说明符是：</p>
<table>
<thead>
<tr>
<th>指定符</th>
<th>含义</th>
<th>示例格式</th>
<th>示例文件名</th>
</tr>
</thead>
<tbody>
<tr>
<td>%c</td>
<td>crc32 of the current working directory</td>
<td>trace.%c</td>
<td>trace.1258863198.xt</td>
</tr>
<tr>
<td>%p</td>
<td>pid</td>
<td>trace.%p</td>
<td>trace.5174.xt</td>
</tr>
<tr>
<td>%r</td>
<td>random number</td>
<td>trace.%r</td>
<td>trace.072db0.xt</td>
</tr>
<tr>
<td>%s</td>
<td>script name 这一个不可用于跟踪文件名。</td>
<td>cachegrind.out.%s</td>
<td>cachegrind.out._home_httpd_html_test_xdebug_test_php</td>
</tr>
<tr>
<td>%t</td>
<td>timestamp (seconds)</td>
<td>trace.%t</td>
<td>trace.1179434742.xt</td>
</tr>
<tr>
<td>%u</td>
<td>timestamp (microseconds)</td>
<td>trace.%u</td>
<td>trace.1179434749_642382.xt</td>
</tr>
<tr>
<td>%H</td>
<td>$_SERVER[‘HTTP_HOST’]</td>
<td>trace.%H</td>
<td>trace.kossu.xt</td>
</tr>
<tr>
<td>%R</td>
<td>$_SERVER[‘REQUEST_URI’]</td>
<td>trace.%R</td>
<td>trace._test_xdebug_test_php_var=1_var2=2.xt</td>
</tr>
<tr>
<td>%U</td>
<td>$_SERVER[‘UNIQUE_ID’] 版本2.2中的新功能。 这个由Apache mod_unique_id模块设置</td>
<td>trace.%U</td>
<td>trace.TRX4n38AAAEAAB9gBFkAAAAB.xt</td>
</tr>
<tr>
<td>%S</td>
<td>session_id (from $_COOKIE if set)</td>
<td>trace.%S</td>
<td>trace.c70c1ec2375af58f74b390bbdd2a679d.xt</td>
</tr>
<tr>
<td>%%</td>
<td>literal %</td>
<td>trace.%%</td>
<td>trace.%%.xt</td>
</tr>
</tbody>
</table>
<h3 id="xdebug-var-display-max-children"><a href="#xdebug-var-display-max-children" class="headerlink" title="xdebug.var_display_max_children"></a><strong>xdebug.var_display_max_children</strong></h3><p>类型：整数，默认值：128</p>
<p>控制使用xdebug_var_dump（），xdebug.show_local_vars或通过函数跟踪显示变量时显示的数组子元素和对象的属性的数量。</p>
<p>要禁用任何限制，请使用-1作为值。</p>
<p>此设置对通过远程调试功能发送到客户端的子项数没有任何影响。</p>
<h3 id="xdebug-var-display-max-data"><a href="#xdebug-var-display-max-data" class="headerlink" title="xdebug.var_display_max_data"></a><strong>xdebug.var_display_max_data</strong></h3><p>类型：整数，默认值：512</p>
<p>控制使用xdebug_var_dump（），xdebug.show_local_vars或通过函数跟踪显示变量时显示的最大字符串长度。</p>
<p>要禁用任何限制，请使用-1作为值。</p>
<p>此设置对通过远程调试功能发送到客户端的子项数没有任何影响。</p>
<h3 id="xdebug-var-display-max-depth"><a href="#xdebug-var-display-max-depth" class="headerlink" title="xdebug.var_display_max_depth"></a><strong>xdebug.var_display_max_depth</strong></h3><p>类型：整数，默认值：3</p>
<p>当使用xdebug_var_dump（），xdebug.show_local_vars或通过函数跟踪显示变量时，控制数组元素和对象属性的嵌套级别数。</p>
<p>您可以选择的最大值为1023.您还可以使用-1作为值来选择此最大数。</p>
<p>此设置对通过远程调试功能发送到客户端的子项数没有任何影响。</p>
<h2 id="相关函数"><a href="#相关函数" class="headerlink" title="相关函数"></a>相关函数</h2><h3 id="string-xdebug-get-tracefile-name（）"><a href="#string-xdebug-get-tracefile-name（）" class="headerlink" title="string xdebug_get_tracefile_name（）"></a><strong>string xdebug_get_tracefile_name（）</strong></h3><p>返回函数跟踪文件的名称</p>
<p>返回用于跟踪此脚本的输出的文件的名称。这在启用xdebug.auto_trace时非常有用。</p>
<h3 id="string-xdebug-start-trace（-string-trace-file-，integer-options-）"><a href="#string-xdebug-start-trace（-string-trace-file-，integer-options-）" class="headerlink" title="string xdebug_start_trace（[string trace_file [，integer options]]）"></a><strong>string xdebug_start_trace（[string trace_file [，integer options]]）</strong></h3><p>启动新的函数跟踪</p>
<p>启动跟踪从此点到trace_file参数中的文件的函数调用。如果未指定文件名，则跟踪文件将放置在由xdebug.trace_output_dir设置配置的目录中。</p>
<p>如果文件名称作为第一个参数，则名称相对于当前工作目录。此当前工作目录可能与您预期的不同，因此，如果指定文件名，请使用绝对路径。使用PHP函数getcwd（）来找出当前工作目录是什么。</p>
<p>跟踪文件的名称为“{trace_file} .xt”。如果启用了xdebug.auto_trace，则文件名的格式为“{filename} .xt”，其中“{filename}”部分取决于xdebug.trace_output_name设置。 options参数是一个位域;目前有三个选项：</p>
<ul>
<li><p>XDEBUG_TRACE_APPEND（1）</p>
<blockquote>
<p>使追踪文件在追加模式而不是覆盖模式下打开</p>
</blockquote>
</li>
<li><p>XDEBUG_TRACE_COMPUTERIZED（2）</p>
<blockquote>
<p>创建具有1“xdebug.trace_format”下描述的格式的跟踪文件。</p>
</blockquote>
</li>
<li><p>XDEBUG_TRACE_HTML（4）</p>
<blockquote>
<p>将跟踪文件创建为HTML表</p>
</blockquote>
</li>
<li><p>XDEBUG_TRACE_NAKED_FILENAME（8）</p>
<blockquote>
<p>通常，Xdebug总是将“.xt”添加到文件名的末尾，该文件名作为第一个参数传递给此函数。 如果设置了XDEBUG_TRACE_NAKED_FILENAME标志，则不会添加“.xt”。 （Xdebug 2.3中的新功能）。</p>
</blockquote>
</li>
</ul>
<p>与Xdebug 1不同，Xdebug 2不会在内存中存储函数调用，但始终只写入磁盘以减轻对已用内存的压力。 设置xdebug.collect_includes，xdebug.collect_params和xdebug.collect_return影响什么信息记录到跟踪文件，设置xdebug.trace_format影响跟踪文件的格式。<br>从此函数返回Xdebug跟踪的完整路径和文件名。 这将是您传入的文件名（可能添加了“.xt”），或者如果没有传入文件名，则为自动生成的文件名。</p>
<h3 id="string-xdebug-start-trace（）"><a href="#string-xdebug-start-trace（）" class="headerlink" title="string xdebug_start_trace（）"></a><strong>string xdebug_start_trace（）</strong></h3><p>停止当前函数轨迹</p>
<p>停止跟踪函数调用并关闭跟踪文件。</p>
<p>该函数返回写入跟踪的文件的文件名。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Xdebug允许您记录所有函数调用，包括参数和返回值到不同格式的文件。&lt;/p&gt;
&lt;p&gt;那些所谓的“函数跟踪”可以帮助当你是新的一个应用程序，或当你试图找出当你的应用程序运行时究竟是怎么回事。&lt;br&gt;函数跟踪还可以选择显示传递给函数和方法的变量的值，以及返回值。 在默认跟踪中，这两个元素不可用。&lt;/p&gt;
    
    </summary>
    
      <category term="PHP" scheme="https://weizhimiao.github.io/categories/PHP/"/>
    
    
      <category term="Xdebug" scheme="https://weizhimiao.github.io/tags/Xdebug/"/>
    
  </entry>
  
  <entry>
    <title>Xdebug之常见问题</title>
    <link href="https://weizhimiao.github.io/2016/10/22/Xdebug%E4%B9%8B%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/"/>
    <id>https://weizhimiao.github.io/2016/10/22/Xdebug之常见问题/</id>
    <published>2016-10-22T12:30:00.000Z</published>
    <updated>2016-10-22T16:06:16.000Z</updated>
    
    <content type="html"><![CDATA[<ul>
<li><p>xdebug的使用</p>
</li>
<li><p>xdebug的编译安装</p>
</li>
</ul>
<a id="more"></a>
<h2 id="xdebug的使用"><a href="#xdebug的使用" class="headerlink" title="xdebug的使用"></a>xdebug的使用</h2><p>问：phpinfo（）报告Xdebug已安装和启用，但我仍然不会得到任何堆栈跟踪时发生错误。</p>
<p>A1：你必须搜索所有的PHP库，并包含任何“set_error<em>handler”调用的文件。如果有任何，你必须将其注释掉，或者更改handler函数的主体以调用xdebug</em> * api函数。</p>
<p>A2：您没有在php.ini中将display_errors设置为1</p>
<hr>
<p>问：Xdebug不格式化输出。</p>
<p>A：确保php.ini中的PHP的html_errors设置为1</p>
<hr>
<p>问：调试客户端没有收到任何连接，我怎么办？</p>
<p>A：您可能忘记设置环境变量或向URL中添加必要的信息。有关详细信息，请参阅文档。</p>
<p>A：您检查过防火墙设置了吗？确保Xdebug正在侦听的端口（默认为9000）未被阻止。</p>
<p>A：你使用FastCGI，可能是通过FPM（FastCGI过程管理器）？它默认使用相同的端口作为Xdebug（9000），因此您需要将其中一个更改为不同的数字。在Xdebug，你可以使用xdebug.remote_port。</p>
<p>A：如果你使用SELinux运行，你应该确保它不会阻止连接;查找关于name_connect或与Xdebug端口相关的任何警告。您可能必须明确允许访问。访问此网站或搜索“selinux name_connect apache”有关如何执行此操作的详细信息</p>
<h2 id="xdebug的编译安装"><a href="#xdebug的编译安装" class="headerlink" title="xdebug的编译安装"></a>xdebug的编译安装</h2><p>问：我没有phpize工具。</p>
<p>答：Debian和Ubuntu用户需要用apt安装php5-dev软件包。</p>
<hr>
<p>问：如何处理：Xdebug需要Zend Engine API版本xxxxxxxx。安装的Zend Engine API版本2xxxxxxxx较新。</p>
<p>A：此消息意味着您正在尝试加载Xdebug的PHP版本，它不是为它构建的。如果你自己编译PHP，很可能是因为你编译Xdebug对PHP头，属于你运行的不同的PHP版本。例如，你使用PHP 5.3，你使用的头仍然是PHP 5.2。如果你使用一个预编译的二进制文件，那么你使用的是错误的。</p>
<p>要诊断这是否是您的问题，请执行以下步骤：</p>
<ul>
<li><p>通过查看phpinfo（）（或“php -i”）输出，检查您正在运行的PHP版本的“Zend Extension”API号。您可以在输出的顶部找到它，与PHP徽标和PHP版本在同一个块中。例如，对于PHP 5.2，数字是“220060519”，对于PHP 5.3，它是“220090626”。</p>
</li>
<li><p>当您完成编译步骤时，检查“phpize”的输出。您要查找的数字是在“Zend Extension Api No”的行上。</p>
</li>
</ul>
<p>如果上面的两个数字不匹配，你正在使用错误的PHP头文件进行编译。请参阅下一个常见问题条目以确定要使用的phpize。</p>
<hr>
<p>问：Xdebug仅作为PHP扩展加载，而不是作为Zend扩展。<br>定制的安装指导可能已指向此条目。</p>
<p>为了使Xdebug正常工作，包括断点等，它需要它作为Zend扩展加载，而不只是作为一个普通的PHP扩展。有些安装工具（PEAR / PECL）有时建议您使用extension = xdebug.so加载Xdebug。这是不正确的。为了解决这个问题，请在顶部块中“加载配置文件”和“其他.ini文件解析”下列出的任何INI文件中查找一行extension = xdebug.so。删除此行，并返回到定制安装说明。</p>
<hr>
<p>问：我如何找到使用哪个phpize？</p>
<p>A：运行：“phpize –help”。这将显示phpize的完整路径。此路径应该与您具有CLI二进制文件“php-config”和安装的“pear”和“pecl”二进制文件的路径相同。如果你运行“php-config –version”它应该显示与你运行的PHP版本相同。如果它不匹配，并且可能在路径上找到错误的“phpize”二进制，您可以运行configure如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">/full/path/to/php/bin/phpize</div><div class="line">./configure --with-php-config=/full/path/to/php/bin/php-config</div></pre></td></tr></table></figure>
<hr>
<p>问：我使用XAMPP，但我似乎不能得到打包的xdebug扩展正常工作。</p>
<p>A：如果你取消注释“extension = php_xdebug.dll”行，这是预期的。 Xdebug需要加载zend_extension_ts =“C：\ path \ to \ php_xdebug.dll”指令。 你也可能必须禁用加载Zend优化器，因为它默认情况下启用，并且不能很好地与Xdebug。 因此，查找php.ini中的相关条目，并将其注释掉。 从PHP 5.3起，您总是需要使用zend_extension PHP.ini设置名称，而不是zend_extension_ts。<br>问：在Debian，我看到以下问题与Xdebug的构建….任何修复？</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">/usr/lib/libc_nonshared.a(stat.oS)(.text.__i686.get_pc_thunk.bx+0x0):</div><div class="line">In function `__i686.get_pc_thunk.bx&apos;:</div><div class="line">: multiple definition of `__i686.get_pc_thunk.bx&apos;</div><div class="line">/usr/lib/gcc-lib/i486-linux/3.3.5/crtbeginS.o</div><div class="line">(.gnu.linkonce.t.__i686.get_pc_thunk.bx+0x0): first defined here</div><div class="line">collect2: ld returned 1 exit status</div><div class="line">make: *** [xdebug.la] Error 1</div></pre></td></tr></table></figure>
<p>A：这是Debian本身的问题，有关更多信息，请参阅<a href="http://www.xdebug.org/archives/xdebug-general/0825.html" target="_blank" rel="external">此处</a>和<a href="http://www.xdebug.org/archives/xdebug-general/0825.html" target="_blank" rel="external">此处</a>。</p>
]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;&lt;p&gt;xdebug的使用&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;xdebug的编译安装&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="PHP" scheme="https://weizhimiao.github.io/categories/PHP/"/>
    
    
      <category term="Xdebug" scheme="https://weizhimiao.github.io/tags/Xdebug/"/>
    
  </entry>
  
  <entry>
    <title>Xdebug之代码覆盖率分析</title>
    <link href="https://weizhimiao.github.io/2016/10/22/Xdebug%E4%B9%8B%E4%BB%A3%E7%A0%81%E8%A6%86%E7%9B%96%E7%8E%87%E5%88%86%E6%9E%90/"/>
    <id>https://weizhimiao.github.io/2016/10/22/Xdebug之代码覆盖率分析/</id>
    <published>2016-10-22T12:30:00.000Z</published>
    <updated>2016-10-22T16:06:51.000Z</updated>
    
    <content type="html"><![CDATA[<p>代码覆盖率告诉您在请求期间已执行了哪些行的脚本（或一组脚本）。 有了这些信息，你可以找出你的单元测试有多好。</p>
<a id="more"></a>
<h2 id="相关设置"><a href="#相关设置" class="headerlink" title="相关设置"></a>相关设置</h2><h3 id="xdebug-coverage-enable"><a href="#xdebug-coverage-enable" class="headerlink" title="xdebug.coverage_enable"></a>xdebug.coverage_enable</h3><p>类型：boolean，默认值：1，在Xdebug&gt; = 2.2中引入</p>
<p>如果此设置设置为0，则Xdebug不会设置内部结构以允许代码覆盖。 这加快了Xdebug相当有点，但当然，代码覆盖率分析将不工作。</p>
<h2 id="相关函数"><a href="#相关函数" class="headerlink" title="相关函数"></a>相关函数</h2><h3 id="boolean-xdebug-code-coverage-started（）"><a href="#boolean-xdebug-code-coverage-started（）" class="headerlink" title="boolean xdebug_code_coverage_started（）"></a>boolean xdebug_code_coverage_started（）</h3><p>返回代码覆盖是否处于活动状态。</p>
<p>返回代码覆盖是否已开始。</p>
<p>Example:</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line">    var_dump(xdebug_code_coverage_started());</div><div class="line"></div><div class="line">    xdebug_start_code_coverage();</div><div class="line"></div><div class="line">    var_dump(xdebug_code_coverage_started());</div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure>
<p>Returns:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">bool(false)</div><div class="line">bool(true)</div></pre></td></tr></table></figure>
<h3 id="array-xdebug-get-code-coverage（）"><a href="#array-xdebug-get-code-coverage（）" class="headerlink" title="array xdebug_get_code_coverage（）"></a>array xdebug_get_code_coverage（）</h3><p>返回代码覆盖率信息</p>
<p>返回一个结构，其中包含有关在脚本中执行哪些行（包括include文件）的信息。 以下示例显示了一个特定文件的代码覆盖率：</p>
<p>Example:<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line">    xdebug_start_code_coverage();</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">a</span><span class="params">($a)</span> </span>&#123;</div><div class="line">        <span class="keyword">echo</span> $a * <span class="number">2.5</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">b</span><span class="params">($count)</span> </span>&#123;</div><div class="line">        <span class="keyword">for</span> ($i = <span class="number">0</span>; $i &lt; $count; $i++) &#123;</div><div class="line">            a($i + <span class="number">0.17</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    b(<span class="number">6</span>);</div><div class="line">    b(<span class="number">10</span>);</div><div class="line"></div><div class="line">    var_dump(xdebug_get_code_coverage());</div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure></p>
<p>Returns:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">array</div><div class="line">  &apos;/home/httpd/html/test/xdebug/docs/xdebug_get_code_coverage.php&apos; =&gt;</div><div class="line">    array</div><div class="line">      5 =&gt; int 1</div><div class="line">      6 =&gt; int 1</div><div class="line">      7 =&gt; int 1</div><div class="line">      9 =&gt; int 1</div><div class="line">      10 =&gt; int 1</div><div class="line">      11 =&gt; int 1</div><div class="line">      12 =&gt; int 1</div><div class="line">      13 =&gt; int 1</div><div class="line">      15 =&gt; int 1</div><div class="line">      16 =&gt; int 1</div><div class="line">      18 =&gt; int 1</div></pre></td></tr></table></figure></p>
<h3 id="void-xdebug-start-code-coverage（-int-options-）"><a href="#void-xdebug-start-code-coverage（-int-options-）" class="headerlink" title="void xdebug_start_code_coverage（[int options]）"></a>void xdebug_start_code_coverage（[int options]）</h3><p>开始代码覆盖</p>
<p>此函数开始收集代码覆盖的信息。 收集的信息包括一个二维数组，其主要索引为执行的文件名，辅助键为行号。 元素中的值表示行是否已执行或它是否具有不可达行。</p>
<p>每行的返回值为：</p>
<ul>
<li><p>1：这行被执行</p>
</li>
<li><p>-1：此行未执行</p>
</li>
<li><p>-2：这行没有可执行代码就可以了</p>
</li>
</ul>
<p>值-1仅在启用XDEBUG_CC_UNUSED时返回，并且仅当启用了XDEBUG_CC_UNUSED和XDEBUG_CC_DEAD_CODE时才返回值-2。</p>
<p>此函数有两个选项，用作位字段：</p>
<ul>
<li><p>XDEBUG_CC_UNUSED</p>
<blockquote>
<p>启用代码扫描，以确定哪行有可执行代码。 如果没有这个选项，返回的数组将只包含实际执行的行。</p>
</blockquote>
</li>
<li><p>XDEBUG_CC_DEAD_CODE</p>
<blockquote>
<p>启用分支分析以确定是否可以执行代码。<br>启用这些选项会使代码覆盖率显着降低。<br>您可以使用以下示例中所示的选项。</p>
</blockquote>
</li>
</ul>
<p>Example:<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line">xdebug_start_code_coverage( XDEBUG_CC_UNUSED | XDEBUG_CC_DEAD_CODE );</div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure></p>
<h3 id="void-xdebug-stop-code-coverage（-int-cleanup-true-）"><a href="#void-xdebug-stop-code-coverage（-int-cleanup-true-）" class="headerlink" title="void xdebug_stop_code_coverage（[int cleanup = true]）"></a>void xdebug_stop_code_coverage（[int cleanup = true]）</h3><p>停止代码覆盖</p>
<p>此功能停止收集信息，内存中的信息将被销毁。 如果传递“false”作为参数，那么代码覆盖率信息不会被销毁，因此您可以再次使用xdebug_start_code_coverage（）函数恢复信息收集。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;代码覆盖率告诉您在请求期间已执行了哪些行的脚本（或一组脚本）。 有了这些信息，你可以找出你的单元测试有多好。&lt;/p&gt;
    
    </summary>
    
      <category term="PHP" scheme="https://weizhimiao.github.io/categories/PHP/"/>
    
    
      <category term="Xdebug" scheme="https://weizhimiao.github.io/tags/Xdebug/"/>
    
  </entry>
  
  <entry>
    <title>PHP程序调试之Xdebug</title>
    <link href="https://weizhimiao.github.io/2016/10/22/PHP%E7%A8%8B%E5%BA%8F%E8%B0%83%E8%AF%95%E4%B9%8BXdebug/"/>
    <id>https://weizhimiao.github.io/2016/10/22/PHP程序调试之Xdebug/</id>
    <published>2016-10-22T10:30:00.000Z</published>
    <updated>2016-10-22T16:09:21.000Z</updated>
    
    <content type="html"><![CDATA[<p>Xdebug是一个开放源代码的PHP程序调试器(即一个Debug工具)，可以用来跟踪，调试和分析PHP程序的运行状况。</p>
<a id="more"></a>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">$ tar -zxvf xdebug-2.4.1.tgz</div><div class="line">$ cd xdebug-2.4.1</div><div class="line">$ /usr/local/bin/phpize</div><div class="line">$ ./configure</div><div class="line">$ make</div><div class="line">$ make install</div><div class="line">Installing shared extensions:     /usr/local/Cellar/php54/5.4.45_6/lib/php/extensions/no-debug-non-zts-20100525/</div></pre></td></tr></table></figure>
<p>在<code>/usr/local/Cellar/php54/5.4.45_6/lib/php/extensions/no-debug-non-zts-20100525/</code> 查看<code>xdebug.so</code>是否已经生成</p>
<p>注：<code>/usr/local/Cellar/php54/5.4.45_6/lib/php/extensions/no-debug-non-zts-20100525/</code> 不同的PHP版本路径不同，也不一定要放在该路径，可以在zend_extension_ts中自行指定xdebug.so所在位置。</p>
<h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>修改配置文件 php.ini</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">[XDebug]  </div><div class="line">zend_extension =&quot;/usr/local/Cellar/php54/5.4.45_6/lib/php/extensions/no-debug-non-zts-20100525/xdebug.so&quot;  </div><div class="line"></div><div class="line">xdebug.remote_handler=dbgp  </div><div class="line">;开启远程调试  </div><div class="line">xdebug.remote_enable = On  </div><div class="line">;远程主机  </div><div class="line">xdebug.remote_host=localhost  </div><div class="line">;主机端口  </div><div class="line">xdebug.remote_port=9000  </div><div class="line">;开启自动跟踪  </div><div class="line">xdebug.auto_trace = On  </div><div class="line">;开启异常跟踪  </div><div class="line">xdebug.show_exception_trace = On  </div><div class="line">;开启远程调试自动启动  </div><div class="line">xdebug.remote_autostart = On  </div><div class="line">;收集变量   </div><div class="line">xdebug.collect_vars = On  </div><div class="line">;收集返回值   </div><div class="line">xdebug.collect_return = On  </div><div class="line">;收集参数   </div><div class="line">xdebug.collect_params = On  </div><div class="line">;设定函数调用监测信息的输出文件的路径。</div><div class="line">;xdebug.trace_output_dir=&quot;/home/xdebug_log&quot;  </div><div class="line">;显示局部变量  </div><div class="line">xdebug.show_local_vars = On  </div><div class="line">xdebug.profiler_enable = On  </div><div class="line">;设定效能监测信息输出文件的路径。</div><div class="line">;xdebug.profiler_output_dir =&quot;/home/xdebug_log&quot;  </div><div class="line">xdebug.trace_enable_trigger =On</div></pre></td></tr></table></figure>
<p>注：xdebug是一个zend扩展，所以要用zend_extension来加载，不能使用extensions来加载</p>
<p>运行<code>php -m</code>查看xdebug模块是否已经加载</p>
<h3 id="其他配置选项说明："><a href="#其他配置选项说明：" class="headerlink" title="其他配置选项说明："></a>其他配置选项说明：</h3><h4 id="日志"><a href="#日志" class="headerlink" title="日志"></a>日志</h4><p>xdebug.trace_output_dir</p>
<blockquote>
<p>日志追踪输出目录</p>
<p>类型：字符串，默认值：/tmp</p>
<p>确保php运行用户对该目录有写权限</p>
</blockquote>
<p>xdebug.trace_output_name</p>
<blockquote>
<p>日志文件名，xdebug提供了一系列的标识符，生成相应格式的文件名</p>
<p>类型: string, 默认值: trace.%c</p>
<p>此设置确定用于将跟踪转储到的文件的名称。 设置使用格式说明符指定格式，非常类似于sprintf（）和strftime（）。 有几个格式说明符可以用于格式化文件名。 “.xt”扩展名总是自动添加。</p>
</blockquote>
<p>可能的格式说明符是：</p>
<table>
<thead>
<tr>
<th>说明</th>
<th>含义</th>
<th>示例</th>
<th>对应文件名</th>
</tr>
</thead>
<tbody>
<tr>
<td>%c</td>
<td>crc32 of the current working directory</td>
<td>trace.%c</td>
<td>trace.1258863198.xt</td>
</tr>
<tr>
<td>%p</td>
<td>pid</td>
<td>trace.%p</td>
<td>trace.5174.xt</td>
</tr>
<tr>
<td>%r</td>
<td>random number</td>
<td>trace.%r</td>
<td>trace.072db0.xt</td>
</tr>
<tr>
<td>%s</td>
<td>script name</td>
<td>cachegrind.out.%s</td>
<td>cachegrind.out._home_httpd_html_test_xdebug_test_php</td>
</tr>
<tr>
<td>%t</td>
<td>timestamp (seconds)</td>
<td>trace.%t</td>
<td>trace.1179434742.xt</td>
</tr>
<tr>
<td>%u</td>
<td>timestamp (microseconds)</td>
<td>trace.%u</td>
<td>trace.1179434749_642382.xt</td>
</tr>
<tr>
<td>%H</td>
<td>$_SERVER[‘HTTP_HOST’]</td>
<td>trace.%H</td>
<td>trace.kossu.xt</td>
</tr>
<tr>
<td>%R</td>
<td>$_SERVER[‘REQUEST_URI’]</td>
<td>trace.%R</td>
<td>trace._test_xdebug_test_php_var=1_var2=2.xt</td>
</tr>
<tr>
<td>%U</td>
<td>$_SERVER[‘UNIQUE_ID’] 3</td>
<td>trace.%U</td>
<td>trace.TRX4n38AAAEAAB9gBFkAAAAB.xt</td>
</tr>
<tr>
<td>%S</td>
<td>session_id (from $_COOKIE if set)</td>
<td>trace.%S</td>
<td>trace.c70c1ec2375af58f74b390bbdd2a679d.xt</td>
</tr>
<tr>
<td>%%</td>
<td>literal %</td>
<td>trace.%%</td>
<td>trace.%%.xt</td>
</tr>
</tbody>
</table>
<p>xdebug.trace_options</p>
<blockquote>
<p>记录添加到文件中方式：</p>
<p>类型：整数，默认值：0</p>
<p>当设置为’1’时，跟踪文件将被附加到，而不是在后续请求中被覆盖。</p>
</blockquote>
<h4 id="显示数据"><a href="#显示数据" class="headerlink" title="显示数据"></a>显示数据</h4><p>xdebug.collect_params</p>
<blockquote>
<p>类型：整数，默认值：0</p>
<p>此设置默认为0，控制function的参数显示选项</p>
<ul>
<li>0    不显示.</li>
<li>1    参数类型，值  (例如：array(9))</li>
<li>2    同上1，只是在CLI模式下略微有区别</li>
<li>3    所有变量内容</li>
<li>4    所有变量内容和变量名(例如：array(0 =&gt; 9))</li>
<li>5    PHP序列化变量内容，没有名称。 （Xdebug 2.3中的新功能）</li>
</ul>
</blockquote>
<p>xdebug.collect_return</p>
<blockquote>
<p>类型：布尔值，默认值：0</p>
<p>此设置默认为0，控制Xdebug是否应将函数调用的返回值写入跟踪文件。</p>
<p>对于计算机化的跟踪文件（xdebug.trace_format = 1），这只能从Xdebug 2.3起。</p>
</blockquote>
<p>xdebug.collect_vars</p>
<blockquote>
<p>类型：布尔值，默认值：0</p>
<p>此设置告诉Xdebug收集有关在某个范围中使用哪些变量的信息。 这个分析可能很慢，因为Xdebug必须逆向工程PHP的操作码数组。 此设置不会记录不同变量具有的值，因为使用xdebug.collect_params。 仅当您希望使用xdebug_get_declared_vars（）时，才需要启用此设置。</p>
<p>显示当前作用域使用了哪些变量，显示变量名，该选项不会记录变量的值，如果需要，使用xdebug.collect_params</p>
</blockquote>
<p>xdebug.collect_assignments</p>
<blockquote>
<p>类型：boolean，默认值：0，在Xdebug&gt; 2.1中引入</p>
<p>此设置（默认为0）控制Xdebug是否应向函数轨迹添加变量分配。</p>
<p>1 = 添加一行显示变量赋值（若为1，形如$a = 1;这类Assignment Expression会在trace文件里显示）</p>
</blockquote>
<h4 id="格式"><a href="#格式" class="headerlink" title="格式"></a>格式</h4><p>xdebug.trace_format</p>
<blockquote>
<p>类型：整数，默认值：0</p>
<ul>
<li>0 = 人可读. 从左至右每列分别表示：时间点, 内存, 内存差 (需要设置xdebug.show_mem_delta=1), 等级, 函数名,函数参数 (需要设置，xdebug.collect_params=1，只要是非零), 当前代码行所在文件名 , 行号;</li>
<li>1 = 机器可读[1]. 需要借助第三方app，例如：xdebug trace file parser 或者 xdebug trace viewer; 2 = html格式 即table，用browser打开，显示table</li>
</ul>
</blockquote>
<p>xdebug.show_mem_delta</p>
<blockquote>
<p>类型：整数，默认值：0</p>
<p>当这个设置设置为某些！= 0 Xdebug的人类可读的生成的跟踪文件将显示在函数调用之间的内存使用的差异。 如果Xdebug配置为生成计算机可读的跟踪文件，则它们将始终显示此信息。</p>
<ul>
<li>1 = 显示每次函数调用内存消耗（内存差）</li>
</ul>
</blockquote>
<h4 id="行为"><a href="#行为" class="headerlink" title="行为"></a>行为</h4><p>xdebug.auto_trace</p>
<blockquote>
<p>类型：布尔值，默认值：0</p>
<p>当此设置设置为on时，将在脚本运行之前启用函数调用的跟踪。 这使得可以跟踪auto_prepend_file中的代码。</p>
<p>1 = 打开自动追踪. （追踪方式有2种，一种是自动追踪，所有php脚本运行时，都会产生trace文件；另一种是触发方式追踪，如下）</p>
</blockquote>
<p>xdebug.trace_enable_trigger[2]</p>
<blockquote>
<p>类型：boolean，默认值：0，在Xdebug&gt; 2.2中引入</p>
<p>当此设置设置为1时，可以使用XDEBUG_TRACE GET / POST参数触发跟踪，或者设置名为XDEBUG_TRACE的cookie。 然后将跟踪数据写入定义的目录。 为了防止Xdebug为每个请求生成跟踪文件，您需要将xdebug.auto_trace设置为0.对触发器本身的访问可以通过xdebug.trace_enable_trigger_value配置。</p>
<p>1 = 使用 XDEBUG_TRACE GET/POST 触发追踪, 或者通过设置cookie XDEBUG_TRACE. 为了避免每次请求时，都会生成相应trace追踪文件，你需要把auto_trace设置为0</p>
<p>注：该特性只在2.2+版本才能设置<br>[xdebug-general] Re: Is trace_enable_trigger defunct?</p>
</blockquote>
<h4 id="限制"><a href="#限制" class="headerlink" title="限制"></a>限制</h4><p>xdebug.var_display_max_depth</p>
<blockquote>
<p>类型：整数，默认值：3</p>
<p>当使用xdebug_var_dump（），xdebug.show_local_vars或通过函数跟踪显示变量时，控制数组元素和对象属性的嵌套级别数。</p>
<p>您可以选择的最大值为1023.您还可以使用-1作为值来选择此最大数。</p>
<p>此设置对通过远程调试功能发送到客户端的子项数没有任何影响。</p>
<p>数组和对象元素显示深度：主要用在数组嵌套，对象属性嵌套时，显示几级的元素内容. Default 3.</p>
</blockquote>
<p>xdebug.var_display_max_data</p>
<blockquote>
<p>变量值为字符串时显示多长. Default 512.</p>
<p>类型：整数，默认值：512<br>控制使用xdebug_var_dump（），xdebug.show_local_vars或通过函数跟踪显示变量时显示的最大字符串长度。</p>
<p>要禁用任何限制，请使用-1作为值。</p>
<p>此设置对通过远程调试功能发送到客户端的子项数没有任何影响。</p>
</blockquote>
<p>xdebug.var_display_max_children</p>
<blockquote>
<p>数组和对象元素显示的个数. Default 128</p>
<p>类型：整数，默认值：128<br>控制使用xdebug_var_dump（），xdebug.show_local_vars或通过函数跟踪显示变量时显示的数组子元素和对象的属性的数量。</p>
<p>要禁用任何限制，请使用-1作为值。</p>
<p>此设置对通过远程调试功能发送到客户端的子项数没有任何影响。</p>
</blockquote>
<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>一些常用到的xdebug函数</p>
<table>
<thead>
<tr>
<th>Function</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>void xdebug_enable()</td>
<td>手动打开，相当于xdebug.default_enable=on</td>
</tr>
<tr>
<td>void var_dump()</td>
<td>覆写php提供的var_dump，出错时，显示函数堆栈信息，（前提：php.ini里html_errors为1），使用xdebug.overload_var_dump 设置是否覆写</td>
</tr>
<tr>
<td>void xdebug_start_trace( string trace_file_path [, integer options] )</td>
<td>手动控制需要追踪的代码段 trace_file_path ：文件路径（相对或绝对，若为空）.如果为空，或者不传参， 使用xdebug.trace_output_dir设置的目录options ：XDEBUG_TRACE_APPEND: 1 = 追加文件内容末尾, 0 = 覆写该文件 XDEBUG_TRACE_COMPUTERIZED:2 =同 xdebug.trace_format=1 .XDEBUG_TRACE_HTML: 4 = 输出HTML表格，浏览器打开为一table</td>
</tr>
<tr>
<td>void xdebug_stop_trace()</td>
<td>停止追踪，代码追踪在该行停止</td>
</tr>
<tr>
<td>string xdebug_get_tracefile_name()</td>
<td>获得输出文件名，与 xdebug.auto_trace配合使用.</td>
</tr>
<tr>
<td>void xdebug_var_dump([mixed var[,…]])</td>
<td>输出变量详细信息，相当于php里的var_dump，具体显示请看这里xdebug.show_local_vars     默认为0，不显示；非零时，在php执行出错时，显示出错代码所在作用域所有本地变量（注：这会产生大量信息，因此默认是closed），具体显示差别如下图[3]</td>
</tr>
<tr>
<td>array xdebug_get_declared_vars()</td>
<td>显示当前作用域中已声明的变量</td>
</tr>
<tr>
<td>array xdebug_get_code_coverage()</td>
<td>显示某一段代码内，代码执行到哪些行[4]</td>
</tr>
</tbody>
</table>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Xdebug是一个开放源代码的PHP程序调试器(即一个Debug工具)，可以用来跟踪，调试和分析PHP程序的运行状况。&lt;/p&gt;
    
    </summary>
    
      <category term="PHP" scheme="https://weizhimiao.github.io/categories/PHP/"/>
    
    
      <category term="Xdebug" scheme="https://weizhimiao.github.io/tags/Xdebug/"/>
    
  </entry>
  
  <entry>
    <title>apache上运行PHP的几种方式汇总</title>
    <link href="https://weizhimiao.github.io/2016/10/21/apache%E4%B8%8A%E8%BF%90%E8%A1%8CPHP%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E5%BC%8F%E6%B1%87%E6%80%BB/"/>
    <id>https://weizhimiao.github.io/2016/10/21/apache上运行PHP的几种方式汇总/</id>
    <published>2016-10-21T14:40:00.000Z</published>
    <updated>2016-10-21T15:01:13.000Z</updated>
    
    <content type="html"><![CDATA[<p>之前也有整理过一篇 「apache中PHP的几种支持模式」的blog，但是感觉还是比较混乱，很多问题没有理清楚，一些方式也没有整理到。所以今天通过这篇blog再整理一下。</p>
<ul>
<li><p>Using proxy_fcgi and php-fpm (for apache 2.4)</p>
</li>
<li><p>Using php with fastcgi (for 2.2 and older)</p>
</li>
<li><p>Using php with fcgid (for 2.2 and older)</p>
</li>
<li><p>Using mod_php as a DSO with a threaded mpm (2.0 and newer)</p>
</li>
<li><p>Using mod_php as a DSO (deprecated)</p>
</li>
</ul>
<a id="more"></a>
<h2 id="Using-proxy-fcgi-and-php-fpm-for-apache-2-4"><a href="#Using-proxy-fcgi-and-php-fpm-for-apache-2-4" class="headerlink" title="Using proxy_fcgi and php-fpm (for apache 2.4)"></a>Using proxy_fcgi and php-fpm (for apache 2.4)</h2><p>此方法优先于所有其他方案，适用于Apache 2.4及更高版本。 它还允许线程mpm，如event或worker，这将显著减少对服务器的RAM需求。</p>
<p>详情见<a href="https://weizhimiao.github.io/2016/10/20/High-performance%20PHP%20on%20apache%20httpd%202.4.x%20using%20mod_proxy_fcgi%20and%20php-fpm/">httpd 2.4.x上使用mod_proxy_fcgi和php-fpm实现高性能PHP</a></p>
<h2 id="Using-php-with-fastcgi-for-2-2-and-older"><a href="#Using-php-with-fastcgi-for-2-2-and-older" class="headerlink" title="Using php with fastcgi (for 2.2 and older)"></a>Using php with fastcgi (for 2.2 and older)</h2><p>此方法适用于2.2及更高版本。 它还允许线程mpm，如event或worker，这将显著减少对服务器的RAM需求。</p>
<p>本文的范围是讨论使用Apache httpd 2.2和php的可能配置。在大多数情况下使用mod_php不是一个可行的解决方案，因为它引入了对每个httpd进程增加的RAM需求的可扩展性问题。另外，此外，它排除了使用线程MPM，因为php扩展在许多情况下不是线程安全的。</p>
<p>理想的配置是轻线程httpd进程，与外部fastcgi服务器（如PHP-FPM）通信。</p>
<p>第一个使用mod_fastcgi的方案<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">Alias /php5.fcgi /var/www/fcgi/php5.fcgi</div><div class="line">FastCGIExternalServer /var/www/fcgi/php5.fcgi -flush -host 127.0.0.1:9000</div><div class="line"># 创建一个新的处理程序名称并将其用于PHP文件</div><div class="line">AddHandler my-fastcgi .php</div><div class="line">#  *.php的请求实际上作为参数馈送到php-fastcgi</div><div class="line">Action my-fastcgi /php5.fcgi</div><div class="line">&lt;Directory &quot;/var/www/fcgi/&quot;&gt;</div><div class="line">  Order deny,allow</div><div class="line">  Deny from all</div><div class="line">  &lt;Files &quot;php5.fcgi&quot;&gt;</div><div class="line">    Order allow,deny</div><div class="line">    Allow from all</div><div class="line">  &lt;/Files&gt;</div><div class="line">&lt;/Directory&gt;</div></pre></td></tr></table></figure></p>
<h2 id="Using-php-with-fcgid-for-2-2-and-older"><a href="#Using-php-with-fcgid-for-2-2-and-older" class="headerlink" title="Using php with fcgid (for 2.2 and older)"></a>Using php with fcgid (for 2.2 and older)</h2><p>此方法适用于2.0或2.2版本。 它允许线程mpm，如worker，这将显着减少您的服务器上的RAM要求。 而mod_fcgid是一个官方的Apache模块。</p>
<h3 id="Why"><a href="#Why" class="headerlink" title="Why ?"></a>Why ?</h3><ul>
<li>因为mod_php迫使你加载prefork MPM，这是低效的。</li>
<li>因为mod_php将被加载到httpd内存中，即使在服务静态页面</li>
<li>2013年发布的大多数发行版提供了预编译的包，让您可以使用fcgi运行php。 这只是一个配置问题。</li>
<li>mod_fcgid是一个官方Apache模块，可在 <a href="http://httpd.apache.org/mod_fcgid/" target="_blank" rel="external">http://httpd.apache.org/mod_fcgid/</a> 查看</li>
</ul>
<h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><ul>
<li>巨大的性能提升，在CPU和内存消耗</li>
<li>PHP运行在一个单独的进程</li>
</ul>
<h3 id="不在fcgid上运行php的情况"><a href="#不在fcgid上运行php的情况" class="headerlink" title="不在fcgid上运行php的情况"></a>不在fcgid上运行php的情况</h3><p>如果你运行httpd 2.4，你应该考虑<a href="http://wiki.apache.org/httpd/PHP-FPM" target="_blank" rel="external">PHP-FPM</a></p>
<h3 id="快速体验"><a href="#快速体验" class="headerlink" title="快速体验"></a>快速体验</h3><p>按照所有步骤，或许最终会丢失一些东西。</p>
<p>1、摆脱mod_php。 你需要从你的配置中注释掉“LoadModule php5_module”。<br>在debian上，只要运行“apt-get remove libapache2-mod-php5”</p>
<p>2、Install mod_fcgid<br>在 debian上, “apt-get install libapache2-mod-fcgid”</p>
<p>3、Install PHP as CGI<br>在 debian上, “apt-get install php5-cgi”</p>
<p>编写一个小封装包，例如：/usr/local/bin/php-wrapper<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">#!/bin/sh</div><div class="line"></div><div class="line"># Set desired PHP_FCGI_* environment variables.</div><div class="line"></div><div class="line"># Example:</div><div class="line"></div><div class="line"># PHP FastCGI processes exit after 1000 requests by default.</div><div class="line"></div><div class="line">PHP_FCGI_MAX_REQUESTS=1000</div><div class="line"></div><div class="line">export PHP_FCGI_MAX_REQUESTS</div><div class="line"></div><div class="line"># Replace with the path to your FastCGI-enabled PHP executable</div><div class="line"></div><div class="line">exec /usr/lib/cgi-bin/php5</div></pre></td></tr></table></figure></p>
<p>确保它是可读的和可执行的apache user/group.</p>
<p>5、修改配置 httpd.conf<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">LoadModule fcgid_module /usr/lib/apache2/modules/mod_fcgid.so</div><div class="line"></div><div class="line">AddHandler fcgid-script .php</div><div class="line"></div><div class="line">FcgidWrapper /usr/local/bin/php-wrapper .php</div></pre></td></tr></table></figure></p>
<p>6、用多线程MPM替换prefork MPM，例如worker。</p>
<p>在debian上，只需运行“apt-get install apache2-mpm-worker”</p>
<h3 id="常见问题-It-doesn’t-work"><a href="#常见问题-It-doesn’t-work" class="headerlink" title="常见问题/It doesn’t work"></a>常见问题/It doesn’t work</h3><p>不要惊慌。 检查apache错误日志。</p>
<p>PHP文件被下载，不解释<br>PHP files are downloaded, not interpreted</p>
<p>If you have a handler already set for PHP, it may be conflicting. So you can try something like : “grep -ri handler /etc/httpd | grep php” depending on the result, you may need to comment out some config you are having.</p>
<p>如果您已经为PHP设置了处理程序，则可能会发生冲突。 所以你可以尝试类似：“grep -ri handler /etc/httpd | grep php”根据结果，你可能需要注释掉一些存在配置。</p>
<h3 id="更多选项"><a href="#更多选项" class="headerlink" title="更多选项"></a>更多选项</h3><p>请参考： <a href="http://httpd.apache.org/mod_fcgid/mod/mod_fcgid.html#upgrade" target="_blank" rel="external">http://httpd.apache.org/mod_fcgid/mod/mod_fcgid.html#upgrade</a></p>
<h2 id="Using-mod-php-as-a-DSO-with-a-threaded-mpm-2-0-and-newer"><a href="#Using-mod-php-as-a-DSO-with-a-threaded-mpm-2-0-and-newer" class="headerlink" title="Using mod_php as a DSO with a threaded mpm (2.0 and newer)"></a>Using mod_php as a DSO with a threaded mpm (2.0 and newer)</h2><p>这种方法与下一个配方相同，只是可以使用event或worker等线程化的mpm。主要的要求是php系统库和DSO必须用线程安全标志（重新）编译。</p>
<p>如果使用apache httpd 2.0或更早版本，必须重新编译才能更改mpm。 对于2.4，加载适当的mpm模块后缀。</p>
<p>必须特别注意确保工作程序经常重启（MaxConnectionsPerChild&gt; 0），因为子进程仍然容易出现php内存泄漏，并且进程可能消耗大量RAM并耗尽可用的系统资源。</p>
<p>这可能是所有最少使用的方法，由于维护一个线程安全的php库是一件非常头痛的事，并且因为大多数linux发行版不发运这些包。</p>
<h2 id="Using-mod-php-as-a-DSO-deprecated"><a href="#Using-mod-php-as-a-DSO-deprecated" class="headerlink" title="Using mod_php as a DSO (deprecated)"></a>Using mod_php as a DSO (deprecated)</h2><p>此方法是最早和可能是最慢的配置。 它适合2.2版本和更旧，并要求使用prefork mpm。</p>
<h3 id="为什么你不应该使用mod-php与prefork-mpm了"><a href="#为什么你不应该使用mod-php与prefork-mpm了" class="headerlink" title="为什么你不应该使用mod_php与prefork mpm了"></a>为什么你不应该使用mod_php与prefork mpm了</h3><ul>
<li>mod_php始终加载到每个httpd进程中。 即使当httpd服务静态/非php内容。</li>
<li>mod_php不是线程安全的，并且迫使你坚持使用prefork mpm（多进程，没有线程），这可能是最慢的配置</li>
</ul>
<h3 id="如何使用"><a href="#如何使用" class="headerlink" title="如何使用"></a>如何使用</h3><p>首先，必须加载模块：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">LoadModule php5_module lib/httpd/modules/libphp5.so</div></pre></td></tr></table></figure></p>
<p>然后，添加dso的处理程序：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"># Then, configure the handler for all files that end with .php</div><div class="line"># A regexp such as \.(php|php4|php5)$ can also be used to support more extensions</div><div class="line">&lt;FilesMatch \.php$&gt;</div><div class="line">  SetHandler application/x-httpd-php</div><div class="line">&lt;/FilesMatch&gt;</div></pre></td></tr></table></figure>
<p>参考:</p>
<p><a href="http://www.php.net/manual/en/install.unix.apache2.php" target="_blank" rel="external">官方php安装和配置说明</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;之前也有整理过一篇 「apache中PHP的几种支持模式」的blog，但是感觉还是比较混乱，很多问题没有理清楚，一些方式也没有整理到。所以今天通过这篇blog再整理一下。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Using proxy_fcgi and php-fpm (for apache 2.4)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Using php with fastcgi (for 2.2 and older)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Using php with fcgid (for 2.2 and older)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Using mod_php as a DSO with a threaded mpm (2.0 and newer)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Using mod_php as a DSO (deprecated)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="Apache" scheme="https://weizhimiao.github.io/categories/Apache/"/>
    
    
  </entry>
  
  <entry>
    <title>httpd 2.4.x上使用mod_proxy_fcgi和php-fpm实现高性能PHP</title>
    <link href="https://weizhimiao.github.io/2016/10/20/High-performance%20PHP%20on%20apache%20httpd%202.4.x%20using%20mod_proxy_fcgi%20and%20php-fpm/"/>
    <id>https://weizhimiao.github.io/2016/10/20/High-performance PHP on apache httpd 2.4.x using mod_proxy_fcgi and php-fpm/</id>
    <published>2016-10-20T14:40:00.000Z</published>
    <updated>2016-10-21T03:14:14.000Z</updated>
    
    <content type="html"><![CDATA[<p>内容</p>
<ul>
<li>apache httpd 2.4.x上使用mod_proxy_fcgi和php-fpm实现高性能PHP<ul>
<li>php-fpm</li>
<li>apache httpd 2.4<ul>
<li>TCP套接字（IP和端口）方法</li>
<li>unix域套接字（UDS）方法</li>
<li>通过代理程序处理</li>
<li>先睹为快<ul>
<li>一个简单的例子</li>
<li>一个更灵活的例子</li>
</ul>
</li>
<li>性能和陷阱</li>
<li>警告</li>
</ul>
</li>
</ul>
</li>
</ul>
<a id="more"></a>
<p>apache httpd 2.4.x上使用mod_proxy_fcgi和php-fpm实现高性能PHP</p>
<p>随着apache httpd 2.4的发布，我们已经获得了一些非常整洁的功能关于apache和php：运行PHP作为一个fastCGI进程服务器的能力，并且这个fastCGI服务器可以直接从apache中通过一个专用的模块代理来实现 （mod_proxy_fcgi.）</p>
<blockquote>
<p>从2010年初的版本5.3.3开始，PHP已经将php-fpm fastCGI进程管理器合并到其代码库中，现在（从5.4.1开始）相当稳定。<br>php-fpm ， <a href="http://php-fpm.org/" target="_blank" rel="external">http://php-fpm.org/</a></p>
</blockquote>
<p>这意味着我们现在可以运行安全，快速和可靠的PHP代码，只给apache httpd和php.net版本使用; 没有更多的混乱像suphp、suexec 或者 mod_php。</p>
<h2 id="php-fpm"><a href="#php-fpm" class="headerlink" title="php-fpm"></a>php-fpm</h2><p>准备：</p>
<ul>
<li><p>安装软件包</p>
</li>
<li><p>编辑配置文件</p>
</li>
<li><p>控制服务守护程序。</p>
</li>
</ul>
<p>从5.3.3版本开始，PHP现在在源代码中包括fastCGI进程管理器（php-fpm）。<br>您的发行版或操作系统将其包含在库存PHP包中，或将其作为附加包提供;<br>我们可以通过向./configure选项添加“–enable-fpm”从源代码构建它。</p>
<p>这为我们提供了一个新的二进制文件，称为php-fpm，一个名为php-fpm.conf的默认配置文件安装在/ etc中。</p>
<p>此文件中的默认值是可以启动的，但请注意，你在本地安装的时候可能会有修改，其位置也可能会变。</p>
<p>在这个配置文件中，您可以创建任意数量的fastcgi“池”，这些池由它们侦听的IP和端口定义，就像apache虚拟主机一样。</p>
<p>每个池中最重要的设置是TCP套接字（IP和端口）或unix域套接字（UDS）php-fpm将监听接收fastCGI请求; 这是使用listen选项配置的。</p>
<p>默认池[www]，配置为listen 127.0.0.1:9000：它将只响应本地环回网络接口（localhost）上的请求，在TCP端口9000上。</p>
<p>另外，有趣的是 per-pool 的user和group选项，他们允许在指定的uid和gid下运行特定的fpm池。再见 suphp！</p>
<p>让我们使用默认值作为运行并启动php-fpm守护进程; 如果您的发行版使用提供的init脚本，请运行</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/etc/init.d/php-fpm start</div></pre></td></tr></table></figure>
<p>如果没有，请手动启动<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">php-fpm -y /path/to/php-fpm.conf -c /path/to/custom/php.ini</div></pre></td></tr></table></figure></p>
<p>如果你不提供php-fpm自己的php.ini文件，将使用全局php.ini。记住这一点，当你想要包括更多或更少的扩展比如CLI或CGI二进制使用，或需要改变一些其他值。</p>
<p>你可以使用php [admin]（flag | value）以同样的方式包含每个池的php.ini值，方法与以前在apache中为mod_php定义的一样。</p>
<p>有关所有可能的配置选项，请<a href="http://www.php.net/manual/en/install.fpm.configuration.php" target="_blank" rel="external">参阅fpm的官方PHP文档</a>。</p>
<p>更改php-fpm.conf的loging选项，方便我们查看错误信息<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">error_log /var/log/php-fpm.log</div></pre></td></tr></table></figure></p>
<p>如果不设置php-fpm日志文件，将按照php.ini中定义的方式记录错误。</p>
<blockquote>
<p>note:我们可以强制 php-fpm 重新加载它的配置文件，通过想php-fpm发送 SIGUSR2 信号。SIGUSR1将循环日志文件（完美的logrotate脚本！）一些实验很漫长</p>
</blockquote>
<p>注意：如果php-fpm在启动的时候没有出现报错，那么它就已经在监听端口等待连接了。</p>
<h2 id="apache-httpd-2-4"><a href="#apache-httpd-2-4" class="headerlink" title="apache httpd 2.4"></a>apache httpd 2.4</h2><p>准备：</p>
<ul>
<li><p>编辑httpd.conf</p>
</li>
<li><p>理解vhost上下文</p>
</li>
<li><p>理解URL到文件系统命名空间映射</p>
</li>
<li><p>控制apache httpd守护进程</p>
</li>
</ul>
<p>这个版本的apache httpd引入了两个值得注意的特性：一个新的代理模块专门用于fastCGI（mod_proxy_fcgi），并将 event MPM作为默认的apache进程管理器。</p>
<p>与以前版本的worker MPM一样，当使用非线程安全的第三方PHP扩展时，此MPM的线程模型会导致问题。</p>
<p>自从apache 2.2发布以来，这已经成为mod_php用户的一个祸根，实际上迫使他们将fastcgi解决方案拼凑在一起，或者使用更慢和内存饥饿的prefork MPM。</p>
<p>要使用PHP fastCGI进程管理器工作，我们将使用一个新模块mod_proxy_fcgi，该模块专用于与（可能是外部）fastCGI服务器通信。</p>
<p>确保您在httpd.conf中包含proxy_fcgi模块，以便我们可以使用其功能; 因为这需要基本代理模块，请确保两者都加载（取消注释）：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">LoadModule proxy_module modules/mod_proxy.so</div><div class="line">LoadModule proxy_fcgi_module modules/mod_proxy_fcgi.so</div></pre></td></tr></table></figure>
<p>现在，有不同的方法实际转发请求的.php文件到这个模块，从转发所有的请求（使用ProxyPass），到只转发非常特定，或者通过重写文件或模式（使用带有[P]标志的mod_rewrite）的方法。</p>
<p>我们选择介于复杂性和灵活性之间的方法（使用ProxyPassMatch），因为它允许您为特定vhost的所有PHP内容设置一个规则，但只会代理.php文件（或包含.php的urls）。</p>
<h3 id="TCP套接字（IP和端口）方法"><a href="#TCP套接字（IP和端口）方法" class="headerlink" title="TCP套接字（IP和端口）方法"></a>TCP套接字（IP和端口）方法</h3><p>编辑所选主机的配置，并向其中添加以下行：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">ProxyPassMatch ^/(.*\.php(/.*)?)$ fcgi://127.0.0.1:9000/path/to/your/documentroot/$1</div><div class="line">DirectoryIndex /index.php index.php</div></pre></td></tr></table></figure></p>
<p>说明：<br>ProxyPassMatch</p>
<blockquote>
<p>只有与指定的正则表达式模式匹配的代理内容; 在这种情况下：</p>
</blockquote>
<p>^/(.*.php(/.*)?)$</p>
<blockquote>
<p>从文档根开始，匹配以.php结尾的所有内容（使用点转义），可选地后跟一个斜杠和您喜欢的任何继续路径（一些应用程序使用这个所谓的PathInfo将参数传递给php脚本）。</p>
<p>^和$符号用于锚定URL的绝对开始和结束，以确保请求中的任何字符都不会转义我们的模式匹配。</p>
<p>嵌套括号使我们能够将整个请求URI（减去前导斜杠）引用为$ 1，同时仍然保持尾随pathinfo可选。</p>
</blockquote>
<p>fcgi://127.0.0.1:9000</p>
<blockquote>
<p>通过mod_proxy_fcgi，使用fastCGI协议，转发到我们的php-fpm守护程序正在侦听的端口。<br>这确定哪个fastcgi池将服务由此规则代理的请求。</p>
</blockquote>
<p>/path/to/your/documentroot/</p>
<blockquote>
<p><strong>重要！</strong>  这必须与您的php文件的真实文件系统位置完全匹配，因为这是php-fpm守护程序将查找它们的位置。<br>php-fpm只是解释传递给它的php文件; 它不是一个Web服务器，也不了解您的Web服务器的命名空间，虚拟主机布局或别名。</p>
<p><strong>重要！</strong>  请再看一遍以上内容</p>
</blockquote>
<p>$1</p>
<blockquote>
<p>从原始请求扩展到整个请求URI，减去前导斜杠（因为我们已经添加了上面的。）</p>
</blockquote>
<p>DirectoryIndex /index.php index.php</p>
<blockquote>
<p>对根目录/的请求，需要用默认索引文件映射到fcgi上。</p>
<p>没有解决这个问题可能导致一个空白响应，通常被称为WSOD（死亡白屏），特别是如果仅代理包含php扩展名的请求URI，如本示例。</p>
<p>处理流程将首先将针对/的请求映射到/index.php或相对于当前请求uri的任何其他index.php文件，然后正确地代理到PHP-FPM后端。</p>
</blockquote>
<h3 id="unix域套接字（UDS）方法"><a href="#unix域套接字（UDS）方法" class="headerlink" title="unix域套接字（UDS）方法"></a>unix域套接字（UDS）方法</h3><p>编辑所选主机的配置，并向其中添加以下行：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ProxyPassMatch ^/(.*\.php(/.*)?)$ unix:/path/to/socket.sock|fcgi://127.0.0.1:9000/path/to/your/documentroot/</div></pre></td></tr></table></figure>
<p>unix:/path/to/socket.sock</p>
<blockquote>
<p>您的fpm套接字的路径</p>
<p><strong>请注意</strong>，使用此方法，捕获的请求URI（$ 1）不会在路径之后传递</p>
</blockquote>
<h3 id="Proxy-via-handler-通过代理程序处理"><a href="#Proxy-via-handler-通过代理程序处理" class="headerlink" title="Proxy via handler(通过代理程序处理)"></a>Proxy via handler(通过代理程序处理)</h3><p>使用这种方法，您可以在代理到php-fpm后端之前检查资源的存在。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">＃定义工作器将提高性能</div><div class="line">＃在这种情况下，重新使用worker（依赖于fcgi应用程序的支持）</div><div class="line">＃如果你有足够的空闲工作，这只会略微提高性能</div><div class="line">&lt;Proxy &quot;fcgi://localhost:9000/&quot; enablereuse=on max=10&gt;</div><div class="line">&lt;/Proxy&gt;</div><div class="line">&lt;FilesMatch &quot;\.php$&quot;&gt;</div><div class="line">    # 选择以下方法之一</div><div class="line">    # 1、使用标准的TCP套接字</div><div class="line">    # SetHandler &quot;proxy:fcgi://localhost:9000&quot;</div><div class="line">    # 2、如果您的版本的httpd是2.4.9或更新版本（或具有后端功能），您可以使用unix域套接字</div><div class="line">    # SetHandler &quot;proxy:unix:/path/to/app.sock|fcgi://localhost:9000&quot;</div><div class="line">&lt;/FilesMatch&gt;</div></pre></td></tr></table></figure></p>
<h3 id="For-the-impatient"><a href="#For-the-impatient" class="headerlink" title="For the impatient"></a>For the impatient</h3><h4 id="Very-simple-example"><a href="#Very-simple-example" class="headerlink" title="Very simple example"></a>Very simple example</h4><p>首先, 创建一个文件/var/www/info.php 内容如下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;?php phpinfo() ?&gt;</div></pre></td></tr></table></figure></p>
<p>假设/ var / www是现有vhost的DocumentRoot。</p>
<p>在此vhost内，添加以下行：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ProxyPassMatch ^/info$ fcgi://127.0.0.1:9000/var/www/info.php</div></pre></td></tr></table></figure></p>
<p>使用apachectl优雅重新加载apache，您现在可以使用<a href="http://example.com/info调用phpinfo页面" target="_blank" rel="external">http://example.com/info调用phpinfo页面</a></p>
<p>这是一个非常简单的示例，将一个唯一的URL映射到单个PHP文件。</p>
<h4 id="A-more-flexible-example"><a href="#A-more-flexible-example" class="headerlink" title="A more flexible example"></a>A more flexible example</h4><p>要使用其真实的php文件位置将vhost中的所有.php文件代理到fcgi服务器，您可以使用更灵活的匹配：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ProxyPassMatch ^/(.*\.php)$ fcgi://127.0.0.1:9000/var/www/$1</div></pre></td></tr></table></figure></p>
<p>同样，假设/ var / www是所讨论的vhost的DocumentRoot.</p>
<p>Reload apache with apachectl graceful and you can now call up the phpinfo page using <a href="http://example.com/yourscript.php" target="_blank" rel="external">http://example.com/yourscript.php</a><br>使用apachectl优雅重新加载apache，您现在可以使用<a href="http://example.com/yourscript.php调用phpinfo页面" target="_blank" rel="external">http://example.com/yourscript.php调用phpinfo页面</a></p>
<h3 id="性能和陷阱"><a href="#性能和陷阱" class="headerlink" title="性能和陷阱"></a>性能和陷阱</h3><p>mod_proxy_fcgi现在支持unix域套接字自2.4.9（ [Unix域套接字支持mod_proxy_fcgi](<a href="https://issues.apache.org/bugzilla/show_bug.cgi?id=54101））" target="_blank" rel="external">https://issues.apache.org/bugzilla/show_bug.cgi?id=54101））</a></p>
<p>这是很容易占满你的系统的可用套接字，通过ulimits等等。一些提示，以避免这一点：</p>
<p>使用太多的套接字将导致apache给出一个（（(99)Cannot assign requested address:）的错误。 这意味着您的操作系统不允许创建新的套接字。</p>
<p>在linux上，可以使用/ proc / sys / net / ipv4 / tcp_tw_reuse 建立尽可能多的套接字，但是在NAT之后将会出现很多有关使用这些套接字的警告。</p>
<p>确保修改ulimit并允许apache用户和php-fpm用户都有足够的打开文件和进程。 ulimit -n 和 ulimit -u（nofile，最大文件打开数＆nproc，最大进程数）</p>
<p>如果php-fpm没有足够大的nproc（最大进程数），它将退出（代码255，没有php 5.3的附加信息），没有附加消息。</p>
<p>如果php-fpm没有足够大的nofile（最大文件打开数），你可能无法获得每个子进程的日志记录，如上所示。 它会在一般的错误日志中给出。</p>
<p>如果apache和php-fpm作为同一用户运行（不必要或不推荐），且nproc太小，apache将无法启动，并显示以下消息（11）Resource temporarily unavailable：AH02162：setuid: unable to change to uid: 600</p>
<p><strong>警告：</strong> 当ProxyPass向另一个服务器（在这种情况下，php-fpm守护程序）的请求，身份验证限制和放置在目录块或.htaccess文件中的其他配置可能被绕过。</p>
<h3 id="Caveats（警告）"><a href="#Caveats（警告）" class="headerlink" title="Caveats（警告）"></a>Caveats（警告）</h3><p>有人可能会指出，贪婪的ProxyPassMatch伪指令可能允许由HTTP客户端上传的某些恶意内容。</p>
<p>这不是一个全面的安全文件，而是将指出一个可能的注入向量，可以从本文档中的指令生成。</p>
<p>例如，<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/uploads/malicious.jpg/lalalaalala.php</div></pre></td></tr></table></figure></p>
<p>将导致php-fpm处理该文件（/uploads/malicious.jpg），并且没有某些健全性检查，可能导致被攻击的服务器。</p>
<p>这当然不推荐。 使用php上传的内容应该安全地保存在DocumentRoot之外，并且应该仔细检查pathinfo。</p>
<p>此外，php-fpm应检查是否允许调用脚本。</p>
<p>如果这样的限制不能容易地实现，则可以在用RewriteCond或FallbackResource在代理之前执行检查，以确保URI不被HTTP客户端改变。</p>
<p><a href="http://wiki.apache.org/httpd/PHP-FPM" target="_blank" rel="external">【原文】</a></p>
<p>over~</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;内容&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;apache httpd 2.4.x上使用mod_proxy_fcgi和php-fpm实现高性能PHP&lt;ul&gt;
&lt;li&gt;php-fpm&lt;/li&gt;
&lt;li&gt;apache httpd 2.4&lt;ul&gt;
&lt;li&gt;TCP套接字（IP和端口）方法&lt;/li&gt;
&lt;li&gt;unix域套接字（UDS）方法&lt;/li&gt;
&lt;li&gt;通过代理程序处理&lt;/li&gt;
&lt;li&gt;先睹为快&lt;ul&gt;
&lt;li&gt;一个简单的例子&lt;/li&gt;
&lt;li&gt;一个更灵活的例子&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;性能和陷阱&lt;/li&gt;
&lt;li&gt;警告&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="PHP" scheme="https://weizhimiao.github.io/categories/PHP/"/>
    
    
      <category term="PHP-FPM" scheme="https://weizhimiao.github.io/tags/PHP-FPM/"/>
    
      <category term="mod_proxy_fcgi" scheme="https://weizhimiao.github.io/tags/mod-proxy-fcgi/"/>
    
  </entry>
  
  <entry>
    <title>PHP常见设计模式之策略模式</title>
    <link href="https://weizhimiao.github.io/2016/10/19/PHP%E5%B8%B8%E8%A7%81%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F/"/>
    <id>https://weizhimiao.github.io/2016/10/19/PHP常见设计模式之策略模式/</id>
    <published>2016-10-19T14:40:00.000Z</published>
    <updated>2016-10-20T03:15:50.000Z</updated>
    
    <content type="html"><![CDATA[<p>策略模式允许类的使用者为这个类根据需要注入不同的依赖。通常情况下，这些依赖表现为对象、闭包或者回调方式，他们完成类所必要的要求以执行预期行为。</p>
<a id="more"></a>
<h2 id="UML设计"><a href="#UML设计" class="headerlink" title="UML设计"></a>UML设计</h2><p><img src="http://n.sinaimg.cn/games/3ece443e/20161020/CeLueMoShi-YiLaiZhuRu.png" alt="策略模式"></p>
<h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><p>对于每一个依赖，我们可以指定一个setter方法（添加一个getter方法更好），它将接收可以满足依赖要求的参数。</p>
<p>示例：使用策略设计模式实现一个日志类<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Log</span></span>&#123;</div><div class="line"></div><div class="line">  <span class="keyword">protected</span> $engine = <span class="keyword">false</span>;</div><div class="line"></div><div class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">add</span><span class="params">($logArr)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span>(!<span class="keyword">$this</span>-&gt;engine)&#123;</div><div class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="keyword">Exception</span>( <span class="string">"unable to write log. no engine set"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    $logArr[<span class="string">'datetime'</span>] = time();</div><div class="line">    <span class="keyword">$this</span>-&gt;engine-&gt;add($logArr);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">setEngine</span><span class="params">(Log_Engine_Interface $engin)</span></span>&#123;</div><div class="line">    <span class="keyword">$this</span>-&gt;engine = $engin;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getEngine</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;engine;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>现在我们用Log类，传入我们希望使用的任何一种数据存储引擎。</p>
<p>我们先定义一个接口或者抽象类，通过接口或者类的类型提示，确保每个驱动程序都符合要求。这里我们用接口来进行约束，使用add()给日志添加一个事件。<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Log_Engine_Interface</span></span>&#123;</div><div class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">add</span><span class="params">(array $LogData)</span></span>;</div><div class="line">&#125;</div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure></p>
<p>之后我们来定义一个引擎。</p>
<p>基于文件的存储引擎<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Log_Engine_File</span> <span class="keyword">implements</span> <span class="title">Log_Engine_Interface</span></span>&#123;</div><div class="line"></div><div class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">add</span><span class="params">(array $data)</span></span>&#123;</div><div class="line">    $line = json_encode($data).PHP_EOL;</div><div class="line"></div><div class="line">    $location = <span class="string">"/var/log/app_file_log.log"</span>;</div><div class="line">    <span class="keyword">if</span>(!file_put_contents($location, $line, FILE_APPEND))&#123;</div><div class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="keyword">Exception</span>( <span class="string">"an error occurred writing to file. "</span>);</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>接下来我们就可在程序中调用Log类：</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line">  $engine = <span class="keyword">new</span> Log_Engine_File();</div><div class="line"></div><div class="line">  $log = <span class="keyword">new</span> Log();</div><div class="line">  $log-&gt;setEngine($engine);</div><div class="line"></div><div class="line">  $logData = <span class="keyword">array</span>(</div><div class="line">    <span class="string">"user"</span> =&gt; <span class="string">"zhangsan"</span>,</div><div class="line">    <span class="string">"action"</span> =&gt; <span class="string">"spend"</span>,</div><div class="line">    <span class="string">"msg"</span> =&gt; <span class="string">"....."</span></div><div class="line">  );</div><div class="line">  $log-&gt;add($logData);</div></pre></td></tr></table></figure>
<p>当然我们可以还可以和注册表模式结合起来，使之更加方便我们使用。</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line">  $engine = <span class="keyword">new</span> Log_Engine_File();</div><div class="line"></div><div class="line">  $log = <span class="keyword">new</span> Log();</div><div class="line">  $log-&gt;setEngine($engine);</div><div class="line"></div><div class="line">  <span class="comment">//加入到注册表，方便我们随时使用</span></div><div class="line">  Register::add($log);</div></pre></td></tr></table></figure>
<p>策略模式的伟大之处在于它不像工厂模式，日志类无需知道每一个不同的存储引擎的相关具体内容。这就意味着任何使用日志类的开发者都可以添加他们自己的存储引擎，只需要相应的存储引擎符合接口就行。例如我们可以继续给日志类增加MySQL存储引擎、Memcache存储引擎等等。</p>
<p>over~</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;策略模式允许类的使用者为这个类根据需要注入不同的依赖。通常情况下，这些依赖表现为对象、闭包或者回调方式，他们完成类所必要的要求以执行预期行为。&lt;/p&gt;
    
    </summary>
    
      <category term="PHP" scheme="https://weizhimiao.github.io/categories/PHP/"/>
    
    
      <category term="设计模式" scheme="https://weizhimiao.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="策略模式" scheme="https://weizhimiao.github.io/tags/%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>PHP常见设计模式之观察者模式</title>
    <link href="https://weizhimiao.github.io/2016/10/18/PHP%E5%B8%B8%E8%A7%81%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F/"/>
    <id>https://weizhimiao.github.io/2016/10/18/PHP常见设计模式之观察者模式/</id>
    <published>2016-10-18T14:40:00.000Z</published>
    <updated>2016-10-18T14:37:53.000Z</updated>
    
    <content type="html"><![CDATA[<p>观察者模式类似于javascript的事件。其核心在于允许我们的应用程序注册一个回调，当某个特定的事件发生时便会触发它。在javascript中，这些事件由单机（onclick）、页面加载（onload）、或者鼠标移动（onmousevoer）等动作组成。</p>
<p>观察者设计模式能够是我们更便利地创建查看目标对象状态的对象，并且提供与核心对象非耦合的指定功能性。</p>
<p>观察者设计模式使用场景（插件系统、缓存系统）</p>
<ul>
<li>对一个对象状态的更新，需要其他对象同步更新，而且其他对象的数量动态可变。<br>-</li>
<li>对象仅需要将自己的更新通知给其他对象而不需要知道其他对象的细节。</li>
</ul>
<a id="more"></a>
<h3 id="UML设计"><a href="#UML设计" class="headerlink" title="UML设计"></a>UML设计</h3><p><img src="http://n.sinaimg.cn/games/3ece443e/20161018/GuanChaZheMoShi.png" alt="观察者模式"></p>
<p>说明：我们通过一个名为Event的类实现，这个类共有两个方法：</p>
<ul>
<li>registerCallBack（）,这个方法允许我们使用规定的名称附加许多回调到一个事件中。</li>
<li>trigger（）,这个方法将会触发刚才命名的事件，并调用该事件已注册的任何回调。</li>
</ul>
<h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><p>event.php<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Event</span></span>&#123;</div><div class="line"></div><div class="line">  <span class="keyword">static</span> <span class="keyword">protected</span> $callbacks = <span class="keyword">array</span>();</div><div class="line"></div><div class="line">  <span class="keyword">static</span> <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">registerCallBack</span><span class="params">($eventName， $callback)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span>(!is_callable($callback))&#123;</div><div class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="keyword">Exception</span>(<span class="string">"Invalid callback"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    $eventName = strtolower($eventName);</div><div class="line">    <span class="keyword">self</span>::$callbacks[$eventName][] = $callback；</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="keyword">static</span> <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">trigger</span><span class="params">($eventName, $data)</span></span>&#123;</div><div class="line">    $eventName = strtolower($eventName);</div><div class="line">    <span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="keyword">self</span>::$callbacks[$eventName]))&#123;</div><div class="line">      <span class="keyword">foreach</span>($self::$callbacks[$eventName] <span class="keyword">as</span> $callback )&#123;</div><div class="line">          <span class="comment">//回调可以是一个函数（包括匿名函数（闭包））、也可以是一个定义过__invoke()的对象</span></div><div class="line">          $callback($data);</div><div class="line">      &#125;</div><div class="line">    &#125;  </div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>回调事件注册后将会被保存到Event类的静态受保护的Event::$callbacks属性中，成为一个以事件名作为Key的多为数组。如下所示，<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"><span class="keyword">array</span>(</div><div class="line">  <span class="string">"eventName"</span> =&gt; <span class="keyword">array</span>(</div><div class="line">    <span class="string">"callback 1"</span>,</div><div class="line">    <span class="string">"callback 2"</span></div><div class="line">    ...</div><div class="line">    ),</div><div class="line">    ...</div><div class="line">  );</div></pre></td></tr></table></figure></p>
<p>当触发一个事件时，我们仅遍历事件的Event::$callbacks子数组，然后依次调用每个回调。</p>
<h3 id="使用示例"><a href="#使用示例" class="headerlink" title="使用示例"></a>使用示例</h3><p>1、先定义一个MyDataRecord类表示数据层的一部分。这个类有个save（）方法，我们在save（）方法中添加一个save事件，每当我们调用它时，就会触发一个save事件，<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyDataRecord</span></span>&#123;</div><div class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">save</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="comment">//保存操作...</span></div><div class="line"></div><div class="line">    <span class="comment">//触发 save 事件</span></div><div class="line">    Event::trigger(<span class="string">"save"</span>,<span class="keyword">array</span>(<span class="string">"Hello"</span>, <span class="string">"world"</span>));</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>2、接着我们创建回调，用事件名save通过Event::registerCallBack()来注册它。<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line">Event::registerCallBack(<span class="string">"save"</span>, <span class="function"><span class="keyword">function</span><span class="params">($data)</span></span>&#123;</div><div class="line">  <span class="keyword">echo</span> <span class="string">"Clear Cache"</span>.PHP_EOL;</div><div class="line">  var_dump($data);</div><div class="line">  &#125;);</div></pre></td></tr></table></figure></p>
<p>3、现在每当调用MyDataRecord-&gt;save();方法时，都将使回调生效。<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"><span class="comment">//实例化一个daterecord类</span></div><div class="line">$data = <span class="keyword">new</span> MyDataRecord();</div><div class="line">$data-&gt;save();</div></pre></td></tr></table></figure></p>
<p>运行结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">Clear Cache</div><div class="line">array(2)&#123;</div><div class="line">  [0] =&gt;</div><div class="line">  string(5) &quot;Hello&quot;</div><div class="line">  [1] =&gt;</div><div class="line">  string(5) &quot;world&quot;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="更多"><a href="#更多" class="headerlink" title="更多"></a>更多</h3><p>1、同一个事件我们可以注册多个回调，这些回调将会通过FIFO（先进先出）来调用。</p>
<p>2、回调可以是一个函数（包括匿名函数，又称闭包），也可以是定义过 <code>__invoke()</code> 魔术方法的对象。<code>__invoke()</code>方法的作用是当我们试图将当前的这个对象作为函数使用时，这个方法就会自动调用。</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"><span class="comment">//Logger callback</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">LogCallback</span></span>&#123;</div><div class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__invoke</span><span class="params">($data)</span></span>&#123;</div><div class="line">    <span class="keyword">echo</span> <span class="string">"Log Data"</span>.PHP_EOL;</div><div class="line">    var_dump($data);</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//注册 log callback</span></div><div class="line">Event::registerCallBack(<span class="string">"save"</span>, <span class="keyword">new</span> LogCallback());</div><div class="line"></div><div class="line"><span class="comment">//注册 clear cache callback</span></div><div class="line">Event::registerCallBack(<span class="string">"save"</span>, <span class="function"><span class="keyword">function</span><span class="params">($data)</span></span>&#123;</div><div class="line">  <span class="keyword">echo</span> <span class="string">"Clear cache"</span>.PHP_EOL;</div><div class="line">  var_dump($data);</div><div class="line">  &#125;);</div><div class="line"></div><div class="line"><span class="comment">//实例化一个 data record</span></div><div class="line">$data = <span class="keyword">new</span> MyDataRecord();</div><div class="line">$data-&gt;save();</div></pre></td></tr></table></figure>
<p>运行结果如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">Log Data</div><div class="line">array(2)&#123;</div><div class="line">  [0] =&gt;</div><div class="line">  string(5) &quot;Hello&quot;</div><div class="line">  [1] =&gt;</div><div class="line">  string(5) &quot;world&quot;</div><div class="line">&#125;</div><div class="line">Clear Cache</div><div class="line">array(2)&#123;</div><div class="line">  [0] =&gt;</div><div class="line">  string(5) &quot;Hello&quot;</div><div class="line">  [1] =&gt;</div><div class="line">  string(5) &quot;world&quot;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>over~</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;观察者模式类似于javascript的事件。其核心在于允许我们的应用程序注册一个回调，当某个特定的事件发生时便会触发它。在javascript中，这些事件由单机（onclick）、页面加载（onload）、或者鼠标移动（onmousevoer）等动作组成。&lt;/p&gt;
&lt;p&gt;观察者设计模式能够是我们更便利地创建查看目标对象状态的对象，并且提供与核心对象非耦合的指定功能性。&lt;/p&gt;
&lt;p&gt;观察者设计模式使用场景（插件系统、缓存系统）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;对一个对象状态的更新，需要其他对象同步更新，而且其他对象的数量动态可变。&lt;br&gt;-&lt;/li&gt;
&lt;li&gt;对象仅需要将自己的更新通知给其他对象而不需要知道其他对象的细节。&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="PHP" scheme="https://weizhimiao.github.io/categories/PHP/"/>
    
    
      <category term="设计模式" scheme="https://weizhimiao.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="观察者模式" scheme="https://weizhimiao.github.io/tags/%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>PHP中is_func函数汇总</title>
    <link href="https://weizhimiao.github.io/2016/10/18/PHP%E4%B8%ADis_function%E5%87%BD%E6%95%B0%E6%B1%87%E6%80%BB/"/>
    <id>https://weizhimiao.github.io/2016/10/18/PHP中is_function函数汇总/</id>
    <published>2016-10-18T10:30:00.000Z</published>
    <updated>2016-10-18T08:33:39.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://n.sinaimg.cn/games/3ece443e/20161018/is_func.png" alt="PHP中is_func函数汇总"></p>
<a id="more"></a>
<h2 id="is-float"><a href="#is-float" class="headerlink" title="is_float"></a>is_float</h2><blockquote>
<p>(PHP 4, PHP 5, PHP 7)</p>
<p>is_float — 检测变量是否是浮点型</p>
</blockquote>
<p>描述<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">bool is_float ( mixed $var )</div></pre></td></tr></table></figure></p>
<p>如果 var 是 float 则返回 TRUE，否则返回 FALSE。</p>
<h2 id="is-soap-fault"><a href="#is-soap-fault" class="headerlink" title="is_soap_fault"></a>is_soap_fault</h2><blockquote>
<p>is_soap_fault — 检查SOAP调用是否失败</p>
</blockquote>
<p>说明<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">bool is_soap_fault ( mixed $object )</div></pre></td></tr></table></figure></p>
<p>此函数用于检查SOAP调用是否失败，但不使用异常。 要使用它，请创建一个SoapClient对象，将异常选项设置为零或FALSE。 在这种情况下，SOAP方法将返回封装故障详细信息（faultcode，faultstring，faultactor和faultdetails）的特殊SoapFault对象。</p>
<p>如果未设置异常，那么SOAP调用将在错误时抛出异常。 is_soap_fault（）检查给定的参数是否是SoapFault对象。</p>
<h2 id="is-bool"><a href="#is-bool" class="headerlink" title="is_bool"></a>is_bool</h2><blockquote>
<p>(PHP 4, PHP 5, PHP 7)</p>
<p>is_bool — 检测变量是否是布尔型</p>
</blockquote>
<p>描述<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">bool is_bool ( mixed $var )</div></pre></td></tr></table></figure></p>
<p>如果 var 是 boolean 则返回 TRUE。</p>
<h2 id="is-integer"><a href="#is-integer" class="headerlink" title="is_integer"></a>is_integer</h2><blockquote>
<p>(PHP 4, PHP 5, PHP 7)</p>
<p>is_integer — is_int() 的别名</p>
</blockquote>
<p>描述</p>
<p>此函数是 is_int() 的别名函数。</p>
<h2 id="is-dir"><a href="#is-dir" class="headerlink" title="is_dir"></a>is_dir</h2><blockquote>
<p>(PHP 4, PHP 5, PHP 7)</p>
<p>is_dir — 判断给定文件名是否是一个目录</p>
</blockquote>
<p>说明<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">bool is_dir ( string $filename )</div></pre></td></tr></table></figure></p>
<p>判断给定文件名是否是一个目录。</p>
<h2 id="is-writeable"><a href="#is-writeable" class="headerlink" title="is_writeable"></a>is_writeable</h2><blockquote>
<p>(PHP 4, PHP 5, PHP 7)</p>
<p>is_writeable — is_writable() 的别名</p>
</blockquote>
<p>说明</p>
<p>此函数是该函数的别名：is_writable()。</p>
<h2 id="is-real"><a href="#is-real" class="headerlink" title="is_real"></a>is_real</h2><blockquote>
<p>(PHP 4, PHP 5, PHP 7)</p>
<p>is_real — is_float() 的别名</p>
</blockquote>
<p>描述</p>
<p>此函数是 is_float() 的别名函数。</p>
<h2 id="is-file"><a href="#is-file" class="headerlink" title="is_file"></a>is_file</h2><blockquote>
<p>(PHP 4, PHP 5, PHP 7)</p>
<p>is_file — 判断给定文件名是否为一个正常的文件</p>
</blockquote>
<p>说明<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">bool is_file ( string $filename )</div></pre></td></tr></table></figure></p>
<p>判断给定文件名是否为一个正常的文件。</p>
<h2 id="is-subclass-of"><a href="#is-subclass-of" class="headerlink" title="is_subclass_of"></a>is_subclass_of</h2><blockquote>
<p>(PHP 4, PHP 5, PHP 7)</p>
<p>is_subclass_of — 如果此对象是该类的子类，则返回 TRUE</p>
</blockquote>
<p>说明<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">bool is_subclass_of ( object $object , string $class_name )</div></pre></td></tr></table></figure></p>
<p>如果对象 object 所属类是类 class_name 的子类，则返回 TRUE，否则返回 FALSE。</p>
<h2 id="is-tainted"><a href="#is-tainted" class="headerlink" title="is_tainted"></a>is_tainted</h2><blockquote>
<p>(PECL taint &gt;=0.1.0)</p>
<p>is_tainted — 检查字符串是否被污染</p>
</blockquote>
<p>说明<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">bool is_tainted ( string $string )</div></pre></td></tr></table></figure></p>
<p>检查字符串是否被污染</p>
<h2 id="is-resource"><a href="#is-resource" class="headerlink" title="is_resource"></a>is_resource</h2><blockquote>
<p>(PHP 4, PHP 5, PHP 7)</p>
<p>is_resource — 检测变量是否为资源类型</p>
</blockquote>
<p>描述<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">bool is_resource ( mixed $var )</div></pre></td></tr></table></figure></p>
<p>如果给出的参数 var 是 resource 类型，is_resource() 返回 TRUE，否则返回 FALSE。</p>
<p>PHP中<a href="http://php.net/manual/zh/resource.php" target="_blank" rel="external">资源类型列表</a></p>
<h2 id="is-readable"><a href="#is-readable" class="headerlink" title="is_readable"></a>is_readable</h2><blockquote>
<p>(PHP 4, PHP 5, PHP 7)</p>
<p>is_readable — 判断给定文件名是否可读</p>
</blockquote>
<p>说明<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">bool is_readable ( string $filename )</div></pre></td></tr></table></figure></p>
<p>判断给定文件名是否存在并且可读。</p>
<h2 id="is-writable"><a href="#is-writable" class="headerlink" title="is_writable"></a>is_writable</h2><blockquote>
<p>(PHP 4, PHP 5, PHP 7)</p>
<p>is_writable — 判断给定的文件名是否可写</p>
</blockquote>
<p>说明<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">bool is_writable ( string $filename )</div></pre></td></tr></table></figure></p>
<p>如果文件存在并且可写则返回 TRUE。filename 参数可以是一个允许进行是否可写检查的目录名。</p>
<p><strong>记住 PHP 也许只能以运行 webserver 的用户名（通常为 ‘nobody’）来访问文件。不计入安全模式的限制。</strong></p>
<h2 id="is-scalar"><a href="#is-scalar" class="headerlink" title="is_scalar"></a>is_scalar</h2><blockquote>
<p>PHP 4 &gt;= 4.0.5, PHP 5, PHP 7)</p>
<p>is_scalar — 检测变量是否是一个标量</p>
</blockquote>
<p>描述<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">bool is_scalar ( mixed $var )</div></pre></td></tr></table></figure></p>
<p>如果给出的变量参数 var 是一个标量，is_scalar() 返回 TRUE，否则返回 FALSE。</p>
<p>标量变量是指那些包含了 integer、float、string 或 boolean的变量，而 array、object 和 resource 则不是标量。</p>
<h2 id="is-long"><a href="#is-long" class="headerlink" title="is_long"></a>is_long</h2><blockquote>
<p>(PHP 4, PHP 5, PHP 7)</p>
<p>is_long — is_int() 的别名</p>
</blockquote>
<p>描述</p>
<p>此函数是 is_int() 的别名函数。</p>
<h2 id="is-double"><a href="#is-double" class="headerlink" title="is_double"></a>is_double</h2><blockquote>
<p>(PHP 4, PHP 5, PHP 7)</p>
<p>is_double — is_float() 的别名</p>
</blockquote>
<p>描述</p>
<p>此函数是 is_float() 的别名函数。</p>
<h2 id="is-array"><a href="#is-array" class="headerlink" title="is_array"></a>is_array</h2><blockquote>
<p>(PHP 4, PHP 5, PHP 7)</p>
<p>is_array — 检测变量是否是数组</p>
</blockquote>
<p>描述<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">bool is_array ( mixed $var )</div></pre></td></tr></table></figure></p>
<p>如果 var 是 array，则返回 TRUE，否则返回 FALSE。</p>
<h2 id="is-object"><a href="#is-object" class="headerlink" title="is_object"></a>is_object</h2><blockquote>
<p>(PHP 4, PHP 5, PHP 7)</p>
<p>is_object — 检测变量是否是一个对象</p>
</blockquote>
<p>描述<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">bool is_object ( mixed $var )</div></pre></td></tr></table></figure></p>
<p>如果 var 是一个 object 则返回 TRUE，否则返回 FALSE。</p>
<h2 id="is-null"><a href="#is-null" class="headerlink" title="is_null"></a>is_null</h2><blockquote>
<p>(PHP 4 &gt;= 4.0.4, PHP 5, PHP 7)</p>
<p>is_null — 检测变量是否为 NULL</p>
</blockquote>
<p>描述<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">bool is_null ( mixed $var )</div></pre></td></tr></table></figure></p>
<p>如果 var 是 null 则返回 TRUE，否则返回 FALSE。</p>
<p>查看 NULL 类型获知变量什么时候被认为是 NULL，而什么时候不是。</p>
<p>特殊的 NULL 值表示一个变量没有值。NULL 类型唯一可能的值就是 NULL。在下列情况下一个变量被认为是 NULL：</p>
<ul>
<li><p>被赋值为 NULL。</p>
</li>
<li><p>尚未被赋值。</p>
</li>
<li><p>被 unset()。</p>
</li>
</ul>
<h2 id="is-string"><a href="#is-string" class="headerlink" title="is_string"></a>is_string</h2><blockquote>
<p>(PHP 4, PHP 5, PHP 7)</p>
<p>is_string — 检测变量是否是字符串</p>
</blockquote>
<p>描述<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">bool is_string ( mixed $var )</div></pre></td></tr></table></figure></p>
<p>如果 var 是 string 则返回 TRUE，否则返回 FALSE。</p>
<h2 id="is-finite"><a href="#is-finite" class="headerlink" title="is_finite"></a>is_finite</h2><blockquote>
<p>(PHP 4 &gt;= 4.2.0, PHP 5, PHP 7)</p>
<p>is_finite — 判断是否为有限值</p>
</blockquote>
<p>说明<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">bool is_finite ( float $val )</div></pre></td></tr></table></figure></p>
<p>检查 val 是否是是本机平台上浮点数所允许范围中的一个合法的有限值。</p>
<h2 id="is-callable"><a href="#is-callable" class="headerlink" title="is_callable"></a>is_callable</h2><blockquote>
<p>(PHP 4 &gt;= 4.0.6, PHP 5, PHP 7)</p>
<p>is_callable — 检测参数是否为合法的可调用结构</p>
</blockquote>
<p>说明<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">bool is_callable ( callable $name [, bool $syntax_only = false [, string &amp;$callable_name ]] )</div></pre></td></tr></table></figure></p>
<p>验证变量的内容能否作为函数调用。 这可以检查包含有效函数名的变量，或者一个数组，包含了正确编码的对象以及函数名。</p>
<h2 id="is-numeric"><a href="#is-numeric" class="headerlink" title="is_numeric"></a>is_numeric</h2><blockquote>
<p>(PHP 4, PHP 5, PHP 7)</p>
<p>is_numeric — 检测变量是否为数字或数字字符串</p>
</blockquote>
<p>描述<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">bool is_numeric ( mixed $var )</div></pre></td></tr></table></figure></p>
<p>如果 var 是数字和数字字符串则返回 TRUE，否则返回 FALSE。</p>
<h2 id="is-infinite"><a href="#is-infinite" class="headerlink" title="is_infinite"></a>is_infinite</h2><blockquote>
<p>(PHP 4 &gt;= 4.2.0, PHP 5, PHP 7)</p>
<p>is_infinite — 判断是否为无限值</p>
</blockquote>
<p>说明<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">bool is_infinite ( float $val )</div></pre></td></tr></table></figure></p>
<p>如果 val 为无穷大（正的或负的），例如 log(0) 的结果或者任何超出本平台的浮点数范围的值，则返回 TRUE。</p>
<h2 id="is-executable"><a href="#is-executable" class="headerlink" title="is_executable"></a>is_executable</h2><blockquote>
<p>(PHP 4, PHP 5, PHP 7)</p>
<p>is_executable — 判断给定文件名是否可执行</p>
</blockquote>
<p>说明<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">bool is_executable ( string $filename )</div></pre></td></tr></table></figure></p>
<p>判断给定文件名是否可执行。</p>
<h2 id="is-int"><a href="#is-int" class="headerlink" title="is_int"></a>is_int</h2><blockquote>
<p>(PHP 4, PHP 5, PHP 7)</p>
<p>is_int — 检测变量是否是整数</p>
</blockquote>
<p>描述 ¶<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">bool is_int ( mixed $var )</div></pre></td></tr></table></figure></p>
<p>如果 var 是 integer 则返回 TRUE，否则返回 FALSE。</p>
<p><strong>Note:</strong><br>若想测试一个变量是否是数字或数字字符串（如表单输入，它们通常为字符串），必须使用 is_numeric()。</p>
<h2 id="is-nan"><a href="#is-nan" class="headerlink" title="is_nan"></a>is_nan</h2><blockquote>
<p>(PHP 4 &gt;= 4.2.0, PHP 5, PHP 7)</p>
<p>is_nan — 判断是否为合法数值</p>
</blockquote>
<p>说明<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">bool is_nan ( float $val )</div></pre></td></tr></table></figure></p>
<p>如果 val 为“非数值”，例如 acos(1.01) 的结果，则返回 TRUE。</p>
<h2 id="is-link"><a href="#is-link" class="headerlink" title="is_link"></a>is_link</h2><blockquote>
<p>(PHP 4, PHP 5, PHP 7)</p>
<p>is_link — 判断给定文件名是否为一个符号连接</p>
</blockquote>
<p>说明<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">bool is_link ( string $filename )</div></pre></td></tr></table></figure></p>
<p>判断给定文件名是否为一个符号连接。</p>
<h2 id="is-uploaded-file"><a href="#is-uploaded-file" class="headerlink" title="is_uploaded_file"></a>is_uploaded_file</h2><blockquote>
<p>(PHP 4 &gt;= 4.0.3, PHP 5, PHP 7)</p>
<p>is_uploaded_file — 判断文件是否是通过 HTTP POST 上传的</p>
</blockquote>
<p>说明<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">bool is_uploaded_file ( string $filename )</div></pre></td></tr></table></figure></p>
<p>如果 filename 所给出的文件是通过 HTTP POST 上传的则返回 TRUE。这可以用来确保恶意的用户无法欺骗脚本去访问本不能访问的文件，例如 /etc/passwd。</p>
<p><strong>这种检查显得格外重要</strong>，如果上传的文件有可能会造成对用户或本系统的其他用户显示其内容的话。</p>
<p>为了能使 is_uploaded_file() 函数正常工作，变量指定类似于 $_FILES[‘userfile’][‘tmp_name’] 的变量，而在从客户端上传的文件名 $_FILES[‘userfile’][‘name’] 不能正常运作。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://n.sinaimg.cn/games/3ece443e/20161018/is_func.png&quot; alt=&quot;PHP中is_func函数汇总&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="PHP" scheme="https://weizhimiao.github.io/categories/PHP/"/>
    
    
  </entry>
  
  <entry>
    <title>PHP常见设计模式之工厂模式</title>
    <link href="https://weizhimiao.github.io/2016/10/14/PHP%E5%B8%B8%E8%A7%81%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/"/>
    <id>https://weizhimiao.github.io/2016/10/14/PHP常见设计模式之工厂模式/</id>
    <published>2016-10-14T13:00:00.000Z</published>
    <updated>2016-10-14T09:41:06.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是工厂模式"><a href="#什么是工厂模式" class="headerlink" title="什么是工厂模式"></a>什么是工厂模式</h2><p>工厂模式是我们最常用的实例化对象模式了，顾名思义工厂设计模式，就是用于制造对象的一种设计模式，是一种用来代替new操作的一种模式。</p>
<p>其的最大价值在于它可以将多个对象设置封装成单一、简单的方法调用。</p>
<p>对外提供获取某个对象的新实例的接口，同时使调用代码避免确定实际实例化基类的步骤。</p>
<a id="more"></a>
<h2 id="工厂模式的应用和使用场景"><a href="#工厂模式的应用和使用场景" class="headerlink" title="工厂模式的应用和使用场景"></a>工厂模式的应用和使用场景</h2><p>通常情况下，虽然我们很少使用工厂模式，但它仍然最适合初始化基于驱动安装的许多变种中的一种。例如，不同的配置、会话或缓存存储引擎。例如，当我们设置一个日志对象时，我们需要设置日志类型（如，基于文本、MySQL或者其他）、日志的位置、以及类似于凭证条目。</p>
<h2 id="工厂模式的实现"><a href="#工厂模式的实现" class="headerlink" title="工厂模式的实现"></a>工厂模式的实现</h2><h3 id="UML设计"><a href="#UML设计" class="headerlink" title="UML设计"></a>UML设计</h3><p><img src="http://n.sinaimg.cn/games/3ece443e/20161014/GongChangMoShiUMLTu.png" alt="UML设计图"></p>
<p>说明：</p>
<ul>
<li>三个基类Log_File、Log_Mysql、Log_Sqlite,都具有名为dosomething()的公用方法，该方法采用他们各自独特的方式执行具体的逻辑。且其返回类型也应该完全相同。</li>
<li>Log_factory类用于创建下面三个任意一个基类的实例，并将其返回至代码流。</li>
</ul>
<h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><p>工厂类Log_factory实现<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Log_factory</span></span>&#123;</div><div class="line"></div><div class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getLog</span><span class="params">($type = <span class="string">'file'</span>, array $options)</span></span>&#123;</div><div class="line">    $type = strtolower($type);</div><div class="line"></div><div class="line">    $class = <span class="string">"Log_"</span>.unfirst($type);</div><div class="line">    <span class="keyword">require_once</span> str_replace(<span class="string">'_'</span>, DIRECTORY_SEPARATOR, $class).<span class="string">'.php'</span>;</div><div class="line"></div><div class="line">    $log = <span class="keyword">new</span> $class($options);</div><div class="line">    <span class="keyword">switch</span>($type)&#123;</div><div class="line">      <span class="keyword">case</span> <span class="string">'file'</span>:</div><div class="line">        $log-&gt;setPath($options[<span class="string">'location'</span>]);</div><div class="line">        <span class="keyword">break</span>;</div><div class="line">      <span class="keyword">case</span> <span class="string">'mysql'</span>:</div><div class="line">        $log-&gt;setUser($options[<span class="string">'username'</span>]);</div><div class="line">        $log-&gt;setPassword($options[<span class="string">'password'</span>]);</div><div class="line">        $log-&gt;setDBname($options[<span class="string">'location'</span>]);</div><div class="line">        <span class="keyword">break</span>;</div><div class="line">      <span class="keyword">case</span> <span class="string">'sqlite'</span>:</div><div class="line">        $log-&gt;setDBPath($options[<span class="string">'location'</span>]);</div><div class="line">        <span class="keyword">break</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> $log;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><strong>Tips:</strong><br>在实际应用中，我们可以把getLog()方法生成的对象添加到Registry，这样就不用一遍又一遍的实例化这些对象。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;什么是工厂模式&quot;&gt;&lt;a href=&quot;#什么是工厂模式&quot; class=&quot;headerlink&quot; title=&quot;什么是工厂模式&quot;&gt;&lt;/a&gt;什么是工厂模式&lt;/h2&gt;&lt;p&gt;工厂模式是我们最常用的实例化对象模式了，顾名思义工厂设计模式，就是用于制造对象的一种设计模式，是一种用来代替new操作的一种模式。&lt;/p&gt;
&lt;p&gt;其的最大价值在于它可以将多个对象设置封装成单一、简单的方法调用。&lt;/p&gt;
&lt;p&gt;对外提供获取某个对象的新实例的接口，同时使调用代码避免确定实际实例化基类的步骤。&lt;/p&gt;
    
    </summary>
    
      <category term="PHP" scheme="https://weizhimiao.github.io/categories/PHP/"/>
    
    
      <category term="设计模式" scheme="https://weizhimiao.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="工厂模式" scheme="https://weizhimiao.github.io/tags/%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>PHP常见设计模式之注册表模式</title>
    <link href="https://weizhimiao.github.io/2016/10/14/PHP%E5%B8%B8%E8%A7%81%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E6%B3%A8%E5%86%8C%E8%A1%A8%E6%A8%A1%E5%BC%8F/"/>
    <id>https://weizhimiao.github.io/2016/10/14/PHP常见设计模式之注册表模式/</id>
    <published>2016-10-14T12:40:00.000Z</published>
    <updated>2016-10-14T08:03:27.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是注册表模式"><a href="#什么是注册表模式" class="headerlink" title="什么是注册表模式"></a>什么是注册表模式</h2><p>注册表（registry）模式仅是一个单独的全局类，在我们需要时允许代码检索一个对象的相同实例，也可以在我们需要的时候创建另一个实例。</p>
<p>注册表就像是一个对象库，只要我们随时签入或者签出对象，而不必担心因为将这些对象保留太久而引起功能障碍。</p>
<p>我们认为注册表模式中最简单的方式就是键/值存储，键作为一个对象的实例，而值就是实例本身。当我们需要管理键/值对的数组时，这个模式便开始发挥功效，存储最早实例化的实例，并且返回一个引用到请求中的同一个实例。</p>
<h2 id="注册表模式和单例模式的关系"><a href="#注册表模式和单例模式的关系" class="headerlink" title="注册表模式和单例模式的关系"></a>注册表模式和单例模式的关系</h2><p>相同点：</p>
<blockquote>
<p>和单例模式一样，注册表模式也是用于访问全局可重用的对象；</p>
</blockquote>
<p>区别：</p>
<blockquote>
<p>注册表模式不负责创建对象，纯粹用于保持全局存储，可以容纳任何数量的相同类的实例。这使得它非常适合类似于数据库连接和配置对象等的采用单例模式满足不了其需求的情况。</p>
</blockquote>
<a id="more"></a>
<h2 id="注册表模式的实现"><a href="#注册表模式的实现" class="headerlink" title="注册表模式的实现"></a>注册表模式的实现</h2><p>示例，<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Registry</span></span>&#123;</div><div class="line"></div><div class="line">  <span class="keyword">private</span> <span class="keyword">static</span> $_store = <span class="keyword">array</span>();</div><div class="line"></div><div class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">add</span><span class="params">($object, $name = null)</span></span>&#123;</div><div class="line">    $name = (!is_null($name)) ? $name : get_class($object);</div><div class="line">    $name = strtolower($name);</div><div class="line"></div><div class="line">    $return = <span class="keyword">null</span>;</div><div class="line">    <span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="keyword">self</span>::$_store[$name]))&#123;</div><div class="line">      $return = <span class="keyword">self</span>::$_store[$name];</div><div class="line">    &#125; <span class="keyword">else</span>&#123;</div><div class="line">      <span class="keyword">self</span>::$_store[$name] = $object;</div><div class="line">      $return = <span class="keyword">self</span>::$_store[$name];</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> $return;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">get</span><span class="params">($name)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span>(!<span class="keyword">self</span>::contains($name))&#123;</div><div class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="keyword">Exception</span>(<span class="string">"object does not exist in registry"</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">self</span>::$_store[$name];</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">contains</span><span class="params">($name)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span>(!<span class="keyword">isset</span>(<span class="keyword">self</span>::$_store[$name]))&#123;</div><div class="line">      <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">remove</span><span class="params">($name)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span>(<span class="keyword">self</span>::contains($name))&#123;</div><div class="line">      <span class="keyword">unset</span>(<span class="keyword">self</span>::$_store[$name]);</div><div class="line">    &#125;</div><div class="line">  &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>注册表模式的4个实现方法：</p>
<ul>
<li>Registry::set(),添加一个对象到注册表，你可以指定一个名称（为多个实例）或者使用默认的类名（为单例，与行为类似）</li>
<li>Registry::get(),从注册表的名字中检索一个对象</li>
<li>Registry::contains(),在注册表中检查一个对象是否存在</li>
<li>Registry::unset(),通过对象名在注册表中删除一个对象</li>
</ul>
<h2 id="注册表模式的应用"><a href="#注册表模式的应用" class="headerlink" title="注册表模式的应用"></a>注册表模式的应用</h2><p>创建了Registry类之后，我们可以通过两种方式来使用它。</p>
<ul>
<li>外部</li>
<li>内部</li>
</ul>
<p>示例，两种方式的数据库连接代码。</p>
<h3 id="外部"><a href="#外部" class="headerlink" title="外部"></a>外部</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line">  $read = <span class="keyword">new</span> DBReadConnection();</div><div class="line">  Registry::add($read);</div><div class="line"></div><div class="line">  $write = <span class="keyword">new</span> DBWriteConnection();</div><div class="line">  Registry::add($wite);</div><div class="line"></div><div class="line">  <span class="comment">//在之后的任何代码中，我们可以通过以下方式获得对应实例</span></div><div class="line">  $read = Registry::get(<span class="string">'DBReadConnection'</span>);</div><div class="line">  $write = Registry::get(<span class="string">'DBWriteConnection'</span>);</div></pre></td></tr></table></figure>
<p>在这个示例中，我们没有传入实例名称，而是通过使用类名从注册表中提取对象。<br>在Registry类能访问到的任何地方该对象都可用。</p>
<h3 id="内部"><a href="#内部" class="headerlink" title="内部"></a>内部</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">DBConnection</span> <span class="title">extend</span> <span class="title">PDO</span></span>&#123;</div><div class="line">  <span class="keyword">public</span> statuc <span class="function"><span class="keyword">function</span> <span class="title">getInstance</span><span class="params">($name = null)</span></span>&#123;</div><div class="line">    $class = get_called_class();</div><div class="line"></div><div class="line">    $name = (!is_null($name)) ? $name : $class;</div><div class="line">    $name = strtolower($name);</div><div class="line">    <span class="keyword">if</span>(!Registry::contains($name))&#123;</div><div class="line">      $instance = <span class="keyword">new</span> $class();</div><div class="line">      Registry::add($instance, $name);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> Registry::get($name);</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">DBWriteConnection</span> <span class="title">extend</span> <span class="title">DBConnection</span></span>&#123;</div><div class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__contruct</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">parent</span>::_contruct(APP_DB_DSN, APP_DB_USER, APP_DB_PWD);</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">DBReadConnection</span> <span class="title">extend</span> <span class="title">DBConnection</span></span>&#123;</div><div class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__contruct</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">parent</span>::_contruct(APP_DB_DSN, APP_DB_USER, APP_DB_PWD);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>要使用这些代码，我们只需在任一读或者写连接类中调用DBConnection::getInstance()即可，就像<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line">  <span class="comment">//获得一个读实例</span></div><div class="line">  $read_db = DBReadConnection::getInstance();</div><div class="line">  <span class="comment">//获得一个写实例</span></div><div class="line">  $write_db  = DBWriteConnection::getInstance();</div><div class="line"></div><div class="line">  <span class="comment">//获得另一个读实例</span></div><div class="line">  $another_read_db = DBReadConnection::getInstance(<span class="string">"another_db"</span>);</div></pre></td></tr></table></figure></p>
<p>在某些方面，这是一个单例模式和工厂模式的混合物。</p>
<h2 id="注册的若干问题"><a href="#注册的若干问题" class="headerlink" title="注册的若干问题"></a>注册的若干问题</h2><p>对于外部注册表，你不能延迟加载；也就是说，在我们使用之前，必须初始化注册表中的每一个对象。如果操作顺序变得更为复杂，我们可能就会错过某个对象而产生预料之外的错误。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;什么是注册表模式&quot;&gt;&lt;a href=&quot;#什么是注册表模式&quot; class=&quot;headerlink&quot; title=&quot;什么是注册表模式&quot;&gt;&lt;/a&gt;什么是注册表模式&lt;/h2&gt;&lt;p&gt;注册表（registry）模式仅是一个单独的全局类，在我们需要时允许代码检索一个对象的相同实例，也可以在我们需要的时候创建另一个实例。&lt;/p&gt;
&lt;p&gt;注册表就像是一个对象库，只要我们随时签入或者签出对象，而不必担心因为将这些对象保留太久而引起功能障碍。&lt;/p&gt;
&lt;p&gt;我们认为注册表模式中最简单的方式就是键/值存储，键作为一个对象的实例，而值就是实例本身。当我们需要管理键/值对的数组时，这个模式便开始发挥功效，存储最早实例化的实例，并且返回一个引用到请求中的同一个实例。&lt;/p&gt;
&lt;h2 id=&quot;注册表模式和单例模式的关系&quot;&gt;&lt;a href=&quot;#注册表模式和单例模式的关系&quot; class=&quot;headerlink&quot; title=&quot;注册表模式和单例模式的关系&quot;&gt;&lt;/a&gt;注册表模式和单例模式的关系&lt;/h2&gt;&lt;p&gt;相同点：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;和单例模式一样，注册表模式也是用于访问全局可重用的对象；&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;区别：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;注册表模式不负责创建对象，纯粹用于保持全局存储，可以容纳任何数量的相同类的实例。这使得它非常适合类似于数据库连接和配置对象等的采用单例模式满足不了其需求的情况。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="PHP" scheme="https://weizhimiao.github.io/categories/PHP/"/>
    
    
      <category term="设计模式" scheme="https://weizhimiao.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="注册表模式" scheme="https://weizhimiao.github.io/tags/%E6%B3%A8%E5%86%8C%E8%A1%A8%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>PHP常见设计模式之单例模式</title>
    <link href="https://weizhimiao.github.io/2016/10/14/PHP%E5%B8%B8%E8%A7%81%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/"/>
    <id>https://weizhimiao.github.io/2016/10/14/PHP常见设计模式之单例模式/</id>
    <published>2016-10-14T12:00:00.000Z</published>
    <updated>2016-10-14T08:02:28.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是单例模式"><a href="#什么是单例模式" class="headerlink" title="什么是单例模式"></a>什么是单例模式</h2><p>当我们实例化一个对象时，他可以确保我们实例化的这个类将仅有一个实例，并且我们在我们的代码中的任何地方都可以轻易的召回相同的对象。</p>
<p>就是说，当我们使用单例模式第一次调用对象时，他就会被实例化，之后每一次调用都将会返回同一个对象。</p>
<p>单例模式通常用于对象，它代表在应用程序不同部分被再三使用的资源，而且始终为同一对象。</p>
<p>常见的示例包括数据库连接和配置信息。</p>
<a id="more"></a>
<h2 id="为什么要使用单例模式"><a href="#为什么要使用单例模式" class="headerlink" title="为什么要使用单例模式"></a>为什么要使用单例模式</h2><p>单例模式最重要的方面就是在于对创建示例的限制能力。如果不这样做的话，应用程序中同一个对象可能会被创建多个实例，可能会造成资源的浪费。</p>
<h2 id="实现方式"><a href="#实现方式" class="headerlink" title="实现方式"></a>实现方式</h2><p>通过创建私有的构造器来实现限制对象创建实例的能力。示例，<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Database</span> <span class="title">extend</span> <span class="title">PDO</span></span>&#123;</div><div class="line"></div><div class="line">  <span class="comment">//私有静态变量，用来保存单例实例</span></div><div class="line">  <span class="keyword">private</span> <span class="keyword">static</span> $_instance = <span class="keyword">null</span>;</div><div class="line"></div><div class="line">  <span class="comment">//私有构造函数，保证这个类只能被本省的静态发放实例化</span></div><div class="line">  <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">_contruct</span><span class="params">()</span></span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">//调用PDO的构造函数</span></div><div class="line">    <span class="keyword">parent</span>::_contruct(APP_DB_DSN, APP_DB_USER, APP_DB_PWD);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="comment">//获得单例实例的方法。如果实例已经存在，则直接返回；否则先构造一个，然后返回；</span></div><div class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">getInstance</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">if</span>(!(<span class="keyword">self</span>::$_instance <span class="keyword">instanceof</span> Database))&#123;</div><div class="line">      <span class="keyword">self</span>::$_instance = <span class="keyword">new</span> Database();</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">self</span>::$_instance;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>实现单例的三个关键点：</p>
<ul>
<li>使用一个静态成员来保持一个单例实例。在这个例子中，我们有一个私有的DB::$_instance属性。</li>
<li>然后，一个私有的构造函数将决定这个类只能被本身所包含的静态方法实例化。</li>
<li>DB::getInstance()静态方法将用于数据库类。当他被调用时，DB::getInstance()将实例化一个Database类的对象并将这个对象指定给DB::$_instance属性，然后返回这个对象，或只返回先前已经实例化的对象。</li>
</ul>
<p>我们之所以使用单例模式，是因为静态方法可以在全局范围内被访问，无论哪里，当我们需要一个数据库连接时，只需要调用DB::getInstance()即可。</p>
<h2 id="使用单例模式的问题"><a href="#使用单例模式的问题" class="headerlink" title="使用单例模式的问题"></a>使用单例模式的问题</h2><p><strong>尽管单例思想很伟大，但当我们确实需要多个实例的时候，其局限性就显而易见。</strong></p>
<blockquote>
<p>比如，我们拆分了数据库之后，就需要在不同的服务器上进行读写操作。而这时单例就满足不了我们的需求了。</p>
</blockquote>
<p>所以单例模式不恰当的使用就会抑制自身的发展和重用。所以当想通过一个类创建两个实例，我们可以考虑通过注册表模式来实现。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;什么是单例模式&quot;&gt;&lt;a href=&quot;#什么是单例模式&quot; class=&quot;headerlink&quot; title=&quot;什么是单例模式&quot;&gt;&lt;/a&gt;什么是单例模式&lt;/h2&gt;&lt;p&gt;当我们实例化一个对象时，他可以确保我们实例化的这个类将仅有一个实例，并且我们在我们的代码中的任何地方都可以轻易的召回相同的对象。&lt;/p&gt;
&lt;p&gt;就是说，当我们使用单例模式第一次调用对象时，他就会被实例化，之后每一次调用都将会返回同一个对象。&lt;/p&gt;
&lt;p&gt;单例模式通常用于对象，它代表在应用程序不同部分被再三使用的资源，而且始终为同一对象。&lt;/p&gt;
&lt;p&gt;常见的示例包括数据库连接和配置信息。&lt;/p&gt;
    
    </summary>
    
      <category term="PHP" scheme="https://weizhimiao.github.io/categories/PHP/"/>
    
    
      <category term="设计模式" scheme="https://weizhimiao.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="单例模式" scheme="https://weizhimiao.github.io/tags/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>大话MySQL性能优化</title>
    <link href="https://weizhimiao.github.io/2016/10/13/%E5%A4%A7%E8%AF%9DMySQL%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
    <id>https://weizhimiao.github.io/2016/10/13/大话MySQL性能优化/</id>
    <published>2016-10-13T10:30:00.000Z</published>
    <updated>2016-10-13T09:25:46.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://n.sinaimg.cn/games/3ece443e/20161013/MySQLXingNenDiaoYou.jpg" alt="MYSQL性能优化"></p>
<p>性能是MySQL一直引以为豪的一点。在性能和功能两个方面，MySQL第一考虑的还是性能。</p>
<a id="more"></a>
<h2 id="影响MySQL性能的相关因素"><a href="#影响MySQL性能的相关因素" class="headerlink" title="影响MySQL性能的相关因素"></a>影响MySQL性能的相关因素</h2><h3 id="商业需求对性能的影响"><a href="#商业需求对性能的影响" class="headerlink" title="商业需求对性能的影响"></a>商业需求对性能的影响</h3><p>对于某一些功能在整个系统中是画蛇添足的，那么这些需求就可能会影响系统性能。比如，一个论坛要求对在线人数进行实时统计。</p>
<h3 id="系统架构及实现对性能的影响"><a href="#系统架构及实现对性能的影响" class="headerlink" title="系统架构及实现对性能的影响"></a>系统架构及实现对性能的影响</h3><p>服务器调优</p>
<p>应用程序调优</p>
<ul>
<li>不可是存储到数据库的数据<ul>
<li>二进制多媒体数据</li>
<li>流水队列数据</li>
<li>超大文本数据</li>
</ul>
</li>
<li>合理的利用应用层Cache（适合Cache的数据有：）<ul>
<li>系统的各种配置和规则数据</li>
<li>活跃用户的基本信息数据</li>
<li>活跃用户的个性化定制信息数据</li>
<li>准实时的统计信息</li>
<li>其他一些访问频繁但变更很少的数据</li>
</ul>
</li>
<li>数据层实现精简</li>
<li>过度依赖数据库SQL语句功能</li>
<li>常见的架构设计不当带来的性能问题和资源浪费<ul>
<li>Cache系统设计不合理，导致Cache命中率低下</li>
<li>过度依赖面向对象</li>
<li>对可扩展性的过度追求（促使系统设计的时候对象拆分的过于分散，造成系统中出现大量的join语句）</li>
<li>对数据库的过于依赖（将不适合存储在数据库中的数据存储在数据库中）</li>
<li>过度理想化系统的用户体验（使大量非核心业务消耗大量系统资源）</li>
</ul>
</li>
</ul>
<h3 id="Query语句对性能的影响"><a href="#Query语句对性能的影响" class="headerlink" title="Query语句对性能的影响"></a>Query语句对性能的影响</h3><h4 id="分析手段"><a href="#分析手段" class="headerlink" title="分析手段"></a>分析手段</h4><ul>
<li><p>explain</p>
<blockquote>
<p>分析选项：</p>
<ul>
<li>索引（key），query语句中是用到的索引</li>
<li>row中的rows，查找的记录数</li>
</ul>
</blockquote>
</li>
<li><p>profiling</p>
<blockquote>
<p>先打开profiling；set profiling=1；</p>
<p>查看profiling信息：show profiling \G;</p>
<p>show profile CPU,BLOCK IO FOR query 1(2);</p>
<p>分析选项</p>
<ul>
<li>CPU IO消耗</li>
</ul>
</blockquote>
</li>
</ul>
<h4 id="MySQL的锁机制"><a href="#MySQL的锁机制" class="headerlink" title="MySQL的锁机制"></a>MySQL的锁机制</h4><blockquote>
<p><strong>锁机制的目的：</strong> 保证数据的一致完整性</p>
<p><strong>锁机制的影响：</strong> 直接影响一个数据库系统的并发处理能力和性能</p>
</blockquote>
<ul>
<li><p>行级锁（row-level）</p>
<blockquote>
<p><strong>优点：</strong> 锁定对象的粒度最小，发生锁定资源争用的概率就最小，能给予最大可能的并发处理能力。</p>
<p><strong>缺点：</strong> 由于粒度最小，所以每次获得锁和释放锁需要做的工作也最多。带来的消耗也就最大。另外，容易发生死锁。</p>
</blockquote>
</li>
<li><p>表级锁（table-level）</p>
<blockquote>
<p><strong>优点：</strong> 最大粒度的锁定机制。所以逻辑简单，实现也较为容易。获得锁和释放锁的速度也很快。而且能很好的避免死锁问题。</p>
<p><strong>缺点：</strong> 出现锁定资源争用的概率会提高，导致并发处理能力大打折扣。</p>
</blockquote>
</li>
<li><p>页级锁（page-level）</p>
<blockquote>
<p>介于row-level和table-level二者之间。</p>
</blockquote>
</li>
</ul>
<h4 id="合理的应用锁机制"><a href="#合理的应用锁机制" class="headerlink" title="合理的应用锁机制"></a>合理的应用锁机制</h4><p>MyISAM表锁优化</p>
<blockquote>
<p>关键：提高并发度</p>
</blockquote>
<ul>
<li>缩短锁定时间，即query的执行时间要尽可能的短<ul>
<li>尽量减少大的、复杂的query，将复杂的query拆分</li>
<li>尽可能的建立高效索引，使数据的检索更加迅速</li>
<li>尽量让MySQL的表只存放必要的信息，控制字段类型</li>
</ul>
</li>
<li>分离能并行的操作<ul>
<li>关键：Concurrent insert（并发插入特性）</li>
<li>打开 Concurrent_insert功能，选项有0，1和2。具体说明如下：</li>
<li>concurrent_insert=2,无论MyISAM表数据文件中间部分是否存在因删除而留下的空闲空间，都允许在尾部进行concurrent insert操作。</li>
<li>concurrent_insert=1,当MyISAM表数据文件中间部分不存在因删除而留下的空闲空间，可以在尾部进行concurrent insert操作。</li>
<li>concurrent_insert=0,无论MyISAM表数据文件中间部分是否存在因删除而留下的空闲空间，都不允许在尾部进行concurrent insert操作。</li>
<li>建议：如果数据删除的肯呢个性很小，则建议将concurrent_insert设置成1，如不在乎浪费少量空间设置成2也可以。但当有少量删除时，设置成1更合适。</li>
</ul>
</li>
<li>读写优先级设置<ul>
<li>默认，写的优先级大于读的优先级</li>
<li>参数选项，low_priority_updates=1(将写的优先级调低)</li>
</ul>
</li>
</ul>
<p>InnoDB行锁优化</p>
<ul>
<li>尽可能让所有的数据检索都通过索引来完成，避免InnoDB因为无法通过索引键加锁升级成为表级锁定</li>
<li>合理设计索引，让InnoDB加锁是尽可能准确，尽可能缩小锁定范围</li>
<li>尽可能的减少基于范围的数据检索过滤条件</li>
<li>尽量控制事务的大小，尽量减少锁定的资源量和锁定的时间长度</li>
<li>尽量使用级别低的事务隔离级别，减少MySQL因为事务隔离带来的附加成本</li>
<li>尽可能减少死锁产生的概率<ul>
<li>类似业务模块中，尽可能用相同的访问顺序来访问，防止产生死锁</li>
<li>同一事务中，尽可能一次锁定所有需要的资源</li>
<li>对于非常容易产生死锁的业务部分，可以尝试升级锁定粒度，通过表级锁定减少死锁产生的概率</li>
</ul>
</li>
<li><p>系统锁定争用情况的查询</p>
<ul>
<li><p>标记锁定争用状态变量</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">mysql&gt; show status like &apos;table%&apos;</div><div class="line">variable_name value</div><div class="line">table_lock_immediate 100  //产生标记锁定次数</div><div class="line">table_lock_waited 0       //出现标记锁定争用出现的等待的次数</div></pre></td></tr></table></figure>
</li>
<li><p>行级锁定争用状态变量</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">mysql&gt; show status like &apos;innodb_row_lock%&apos;</div><div class="line">innodb_row_lock_current_waits 0   //当前正在等待锁定的数量</div><div class="line">innodb_row_lock_time 3999999      //从系统启动到现在锁定的总时间长度</div><div class="line">innodb_row_lock_time_avg 36666    //每次等待所花费平均时间</div><div class="line">innodb_row_lock_time_max 122222   //从启动到现在等待最长一次所花时间长度</div><div class="line">innodb_row_lock_waits 20          //从启动到现在共等待的次数</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
<h2 id="垂直和水平联合切分的使用"><a href="#垂直和水平联合切分的使用" class="headerlink" title="垂直和水平联合切分的使用"></a>垂直和水平联合切分的使用</h2><p>优点：</p>
<ul>
<li>充分利用垂直切分和水平切分各自的优势，而避免各自的缺陷</li>
<li>让系统扩展性得到最大提升</li>
</ul>
<p>缺点：</p>
<ul>
<li>数据库系统架构比较复杂，使维护难度更大</li>
<li>应用程序架构也相对更复杂</li>
</ul>
<h2 id="合理的设计并利用索引"><a href="#合理的设计并利用索引" class="headerlink" title="合理的设计并利用索引"></a>合理的设计并利用索引</h2><h3 id="MySQL常用的四种索引类型"><a href="#MySQL常用的四种索引类型" class="headerlink" title="MySQL常用的四种索引类型"></a>MySQL常用的四种索引类型</h3><ul>
<li>B-tree索引</li>
<li>Hash索引</li>
<li>Fulltext索引</li>
<li>Rtree索引</li>
</ul>
<h3 id="索引的弊端"><a href="#索引的弊端" class="headerlink" title="索引的弊端"></a>索引的弊端</h3><ul>
<li>增加了更新所带来的IO量，和调整索引导致的计算量</li>
<li>占用存储空间，并会跟数据量的增加而增加</li>
</ul>
<h3 id="如何判断是否需要索引"><a href="#如何判断是否需要索引" class="headerlink" title="如何判断是否需要索引"></a>如何判断是否需要索引</h3><ul>
<li>较频繁作为查询条件的字段应该创建索引</li>
<li>唯一性太差的字段不适合做单独的索引，即使它频繁作为查询条件</li>
<li>更新非常频繁的字段不适合做索引</li>
<li>不会出现在where子句中的字段不适合做索引</li>
</ul>
<h3 id="MySQL索引的限制"><a href="#MySQL索引的限制" class="headerlink" title="MySQL索引的限制"></a>MySQL索引的限制</h3><ul>
<li>MyISAM存储引擎索引键长度总和长度不能超过1000字节</li>
<li>Text和Blob类型的字段只能创建前缀索引</li>
<li>使用不等于（!= 或 &lt;&gt; ）的时候MySQL无法使用索引</li>
<li>过滤字段使用了函数运算后（如，abs（culumn）），MySQL无法使用索引</li>
<li>join语句中join条件字段类型不一致不能使用索引</li>
<li>使用LIKE操作的时候，如果条件以通配符开始（如，’%abc’）MySQL无法使用索引</li>
<li>使用非等值查询时，MySQL无法使用索引</li>
</ul>
<h2 id="Query的优化"><a href="#Query的优化" class="headerlink" title="Query的优化"></a>Query的优化</h2><h3 id="优化更需要优化的query"><a href="#优化更需要优化的query" class="headerlink" title="优化更需要优化的query"></a>优化更需要优化的query</h3><p>高并发低消耗的query（相对）对整个系统的影响远比低并发高消耗的query要大。</p>
<h3 id="定位优化对象的性能瓶颈（profiling）"><a href="#定位优化对象的性能瓶颈（profiling）" class="headerlink" title="定位优化对象的性能瓶颈（profiling）"></a>定位优化对象的性能瓶颈（profiling）</h3><ul>
<li>IO，数据访问方面</li>
<li>CPU，数据运算（如分组、排序）</li>
</ul>
<h3 id="明确优化手段"><a href="#明确优化手段" class="headerlink" title="明确优化手段"></a>明确优化手段</h3><p>优化更偏向与对系统功能比较重要的query</p>
<h3 id="从explain入手"><a href="#从explain入手" class="headerlink" title="从explain入手"></a>从explain入手</h3><p>获取一个query在当前状态的数据库中的执行计划</p>
<h3 id="多用profile"><a href="#多用profile" class="headerlink" title="多用profile"></a>多用profile</h3><h3 id="永远用小结果集驱动大结果集"><a href="#永远用小结果集驱动大结果集" class="headerlink" title="永远用小结果集驱动大结果集"></a>永远用小结果集驱动大结果集</h3><h3 id="尽可能在索引中完成排序"><a href="#尽可能在索引中完成排序" class="headerlink" title="尽可能在索引中完成排序"></a>尽可能在索引中完成排序</h3><h3 id="只需取出自己需要的column"><a href="#只需取出自己需要的column" class="headerlink" title="只需取出自己需要的column"></a>只需取出自己需要的column</h3><h3 id="仅适用最有效的过滤条件"><a href="#仅适用最有效的过滤条件" class="headerlink" title="仅适用最有效的过滤条件"></a>仅适用最有效的过滤条件</h3><p>where字句中的条件并非越多越好</p>
<h3 id="尽可能的避免复杂的join查询和子查询"><a href="#尽可能的避免复杂的join查询和子查询" class="headerlink" title="尽可能的避免复杂的join查询和子查询"></a>尽可能的避免复杂的join查询和子查询</h3><p>query语句涉及的表越多，需要锁定的资源就越多，所阻塞的其他线程也就越多。</p>
<h3 id="其他优化"><a href="#其他优化" class="headerlink" title="其他优化"></a>其他优化</h3><h4 id="join的实现与优化"><a href="#join的实现与优化" class="headerlink" title="join的实现与优化"></a>join的实现与优化</h4><p>join是一种算法，即大名鼎鼎的Nested Loop Join。它是通过驱动表的结果集作为循环基础数据，然后一条一条的通过该结果集中的数据作为过滤条件到下一个表中查询数据，然后合并结果。</p>
<ul>
<li><p>尽可能的Join语句中的Nested Loop的循环次数</p>
<blockquote>
<p>最有效的方法只有一个：让驱动表的结果集尽可能的小。即『永远用小结果集驱动大结果集』</p>
</blockquote>
</li>
<li><p>优先优化Nested Loop的内层循环</p>
</li>
<li>保证Join语句中被驱动表上的join字段已经被索引</li>
<li>当无法保证被驱动表join字段被索引且内存充足的前提下，不要太吝啬joinBuffer的设置</li>
</ul>
<h4 id="order-by的优化"><a href="#order-by的优化" class="headerlink" title="order by的优化"></a>order by的优化</h4><ul>
<li>加大max_length_for_sort_data参数的设置</li>
<li>去掉不必要的返回字段</li>
<li>增大sort_buffer_size参数设置</li>
</ul>
<h4 id="Schema设计优化"><a href="#Schema设计优化" class="headerlink" title="Schema设计优化"></a>Schema设计优化</h4><ul>
<li>范式理论</li>
<li>十度冗余，尽量减少join</li>
</ul>
<h4 id="大字段垂直拆分"><a href="#大字段垂直拆分" class="headerlink" title="大字段垂直拆分"></a>大字段垂直拆分</h4><p>什么样的字段适合</p>
<ul>
<li>大字段（比如，文章内容、帖子内容、产品的介绍、小说内容等）</li>
<li>表中和其他字段比较，访问明显要少的字段</li>
</ul>
<p>优点</p>
<ul>
<li>数据库拆分简单明了，拆分规则明确</li>
<li>应用程序模块清晰明了，整合容易</li>
<li>数据维护方便易行，容易定位</li>
</ul>
<p>缺点</p>
<ul>
<li>部分表关联无法在数据库级别完成，需要在程序中完成</li>
<li>对于访问极其频繁且数据量超大的表任然存在性能瓶颈，不一定满足要求</li>
<li>事务处理相对更为复杂</li>
<li>切分达到一定程度后，扩展性会收到限制</li>
<li>过度切分可能会带来系统过度复杂而难以维护</li>
</ul>
<h4 id="大表水平拆分"><a href="#大表水平拆分" class="headerlink" title="大表水平拆分"></a>大表水平拆分</h4><p>基于类型的分拆优化</p>
<p>优点</p>
<ul>
<li>表关联基本能在数据库端完成</li>
<li>不会存在某些超大型数据量和高负载的表遇到的瓶颈问题</li>
<li>应用程序端整体架构改动相对较少</li>
<li>事务处理相对简单</li>
<li>只要切分规则能够定义好，基本上较难遇到扩展性限制</li>
</ul>
<p>缺点</p>
<ul>
<li>切分规则相对更为复杂，很难抽象出一个能够满足整个数据库的切分规则</li>
<li>后期数据的维护难度有所增加，人为手工定位数据更困难</li>
<li>应用系统各模块耦合度较高，可能会对后面数据的迁移、拆分造成一定困难</li>
</ul>
<h2 id="MySQL的备份与恢复"><a href="#MySQL的备份与恢复" class="headerlink" title="MySQL的备份与恢复"></a>MySQL的备份与恢复</h2><p>备份使用场景</p>
<ul>
<li>数据丢失应用场景<ul>
<li>人为操作事务造成的某些数据丢失</li>
<li>如那件Bug造成的数据部分丢失或者全部丢失</li>
<li>硬件故障造成的数据部分或者全部丢失</li>
<li>安全漏洞被入侵数据被恶意破坏</li>
</ul>
</li>
<li>非数据丢失应用场景<ul>
<li>特殊应用场景下基于时间点恢复</li>
<li>开发测试环境数据库搭建</li>
<li>相同数据库的新环境搭建</li>
<li>数据库或者数据迁移</li>
</ul>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://n.sinaimg.cn/games/3ece443e/20161013/MySQLXingNenDiaoYou.jpg&quot; alt=&quot;MYSQL性能优化&quot;&gt;&lt;/p&gt;
&lt;p&gt;性能是MySQL一直引以为豪的一点。在性能和功能两个方面，MySQL第一考虑的还是性能。&lt;/p&gt;
    
    </summary>
    
      <category term="MySQL" scheme="https://weizhimiao.github.io/categories/MySQL/"/>
    
    
      <category term="性能优化" scheme="https://weizhimiao.github.io/tags/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>大型网站技术架构剖析</title>
    <link href="https://weizhimiao.github.io/2016/10/13/%E5%A4%A7%E5%9E%8B%E7%BD%91%E7%AB%99%E6%8A%80%E6%9C%AF%E6%9E%B6%E6%9E%84%E5%89%96%E6%9E%90/"/>
    <id>https://weizhimiao.github.io/2016/10/13/大型网站技术架构剖析/</id>
    <published>2016-10-13T02:30:00.000Z</published>
    <updated>2016-10-13T03:02:10.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://n.sinaimg.cn/games/3ece443e/20161013/DaXingWangZhanJiShuJiaGouPouXi.jpg" alt="大型网站技术架构剖析"></p>
<h2 id="大型网站系统特点"><a href="#大型网站系统特点" class="headerlink" title="大型网站系统特点"></a>大型网站系统特点</h2><ul>
<li>高并发，大流量</li>
<li>高可用</li>
<li>海量数据</li>
<li>用户分布广泛，网络情况复杂</li>
<li>安全环境恶略</li>
<li>需求快速变更，发布频繁</li>
<li>渐进式发展</li>
</ul>
<a id="more"></a>
<h2 id="大型网站发展演化过程"><a href="#大型网站发展演化过程" class="headerlink" title="大型网站发展演化过程"></a>大型网站发展演化过程</h2><h3 id="一台服务器"><a href="#一台服务器" class="headerlink" title="一台服务器"></a>一台服务器</h3><p>特点：没人</p>
<p>应用程序、数据库、文件都在一个服务器。</p>
<h3 id="应用服务器和数据服务器分离"><a href="#应用服务器和数据服务器分离" class="headerlink" title="应用服务器和数据服务器分离"></a>应用服务器和数据服务器分离</h3><p>应用服务器</p>
<ul>
<li>处理大量业务</li>
<li>需要更快更强的CPU</li>
</ul>
<p>数据服务器</p>
<ul>
<li>需要快速磁盘检索和数据缓存</li>
<li>需要更快的磁盘和更大的内存</li>
</ul>
<p>文件服务器</p>
<ul>
<li>需要更大的硬盘</li>
</ul>
<h3 id="使用缓存改善网站性能"><a href="#使用缓存改善网站性能" class="headerlink" title="使用缓存改善网站性能"></a>使用缓存改善网站性能</h3><ul>
<li>本地缓存</li>
<li>远程缓存（分布式缓存）</li>
</ul>
<h3 id="使用应用服务器集群改善并发处理能力"><a href="#使用应用服务器集群改善并发处理能力" class="headerlink" title="使用应用服务器集群改善并发处理能力"></a>使用应用服务器集群改善并发处理能力</h3><ul>
<li>负载均衡服务器</li>
<li>用户服务器集群</li>
</ul>
<h3 id="数据库读写分离"><a href="#数据库读写分离" class="headerlink" title="数据库读写分离"></a>数据库读写分离</h3><p>利用数据库的主从热备份，来实现数据库的读写分离。从而改善数据库的负载压力。</p>
<h3 id="使用反向代理和CDN加速网站响应"><a href="#使用反向代理和CDN加速网站响应" class="headerlink" title="使用反向代理和CDN加速网站响应"></a>使用反向代理和CDN加速网站响应</h3><blockquote>
<p>基本原理都是缓存（都可以缓存一些静态资源）</p>
</blockquote>
<p>反向代理服务器</p>
<ul>
<li>缓存用户请求资源</li>
</ul>
<p>CDN服务器</p>
<ul>
<li>目的：尽早返回数据给用户</li>
</ul>
<h3 id="使用分布式文件系统和分布式数据库系统"><a href="#使用分布式文件系统和分布式数据库系统" class="headerlink" title="使用分布式文件系统和分布式数据库系统"></a>使用分布式文件系统和分布式数据库系统</h3><p>分布式数据库是网站数据库拆分的最后手段。不到万不得已的时网站更常用的拆分手段是业务拆分。</p>
<h3 id="使用NoSQL和搜索引擎"><a href="#使用NoSQL和搜索引擎" class="headerlink" title="使用NoSQL和搜索引擎"></a>使用NoSQL和搜索引擎</h3><p>应对更复杂的存储和检索需求</p>
<h3 id="业务拆分"><a href="#业务拆分" class="headerlink" title="业务拆分"></a>业务拆分</h3><blockquote>
<p>应对日益复杂的业务场景</p>
</blockquote>
<p>拆分方法</p>
<ul>
<li>根据产品线拆分成不同的应用</li>
</ul>
<p>应用产品之间的关系</p>
<ul>
<li>超链接</li>
<li>消息队列进行数据分发</li>
<li>访问同一个数据存储系统</li>
</ul>
<h3 id="分布式服务"><a href="#分布式服务" class="headerlink" title="分布式服务"></a>分布式服务</h3><p>通过分布式服务调用公用业务服务完成具体业务需要</p>
<h2 id="大型网站架构模式"><a href="#大型网站架构模式" class="headerlink" title="大型网站架构模式"></a>大型网站架构模式</h2><h3 id="分层"><a href="#分层" class="headerlink" title="分层"></a>分层</h3><ul>
<li>应用层</li>
<li>服务层</li>
<li>数据层</li>
</ul>
<h3 id="分割"><a href="#分割" class="headerlink" title="分割"></a>分割</h3><p>对不同的层继续进行垂直的分割</p>
<h3 id="分布式"><a href="#分布式" class="headerlink" title="分布式"></a>分布式</h3><blockquote>
<p>分层、分割的主要目的就是为了便于分布式部署。</p>
<p>分布式就是为了用更多的计算机来完成同样的功能</p>
</blockquote>
<ul>
<li>分布式应用和服务</li>
<li>分布式静态资源</li>
<li>分布式数据和存储</li>
<li>分布式计算</li>
<li>分布式配置</li>
<li>分布式文件系统</li>
</ul>
<h3 id="集群"><a href="#集群" class="headerlink" title="集群"></a>集群</h3><blockquote>
<p>多台服务器部署相同应用构成一个集群。通过负载均衡设备对外提供服务</p>
</blockquote>
<p>有点：</p>
<ul>
<li>提高系统并发访问量</li>
<li>提高系统可用性（冗余）</li>
</ul>
<h3 id="缓存"><a href="#缓存" class="headerlink" title="缓存"></a>缓存</h3><blockquote>
<p>改善性能的第一手段</p>
</blockquote>
<ul>
<li>内容分发网络CDN</li>
<li>反向代理</li>
<li>本地缓存</li>
<li>分布式缓存</li>
</ul>
<h3 id="异步"><a href="#异步" class="headerlink" title="异步"></a>异步</h3><ul>
<li>共享内存队列（单服务器）</li>
<li>分布式消息队列(分布式系统)</li>
</ul>
<h3 id="冗余"><a href="#冗余" class="headerlink" title="冗余"></a>冗余</h3><p>访问和负载很小的服务器也至少要部署两台构成集群。目的就是实现服务的高可用。</p>
<h3 id="自动化"><a href="#自动化" class="headerlink" title="自动化"></a>自动化</h3><ul>
<li>自动化报警</li>
<li>自动化失效转移</li>
<li>自动化失效恢复</li>
<li>自动化降级</li>
<li>自动化分配资源</li>
</ul>
<h3 id="安全"><a href="#安全" class="headerlink" title="安全"></a>安全</h3><ul>
<li>身份认证</li>
<li>加密</li>
<li>验证码识别</li>
<li>对于XSS，SQL注入，进行编码转换等</li>
<li>敏感信息过滤</li>
<li>风险控制</li>
</ul>
<h2 id="网站性能测试优化"><a href="#网站性能测试优化" class="headerlink" title="网站性能测试优化"></a>网站性能测试优化</h2><h3 id="性能测试指标"><a href="#性能测试指标" class="headerlink" title="性能测试指标"></a>性能测试指标</h3><ul>
<li>响应时间</li>
<li>并发数</li>
<li>吞吐量</li>
<li>性能计数器</li>
</ul>
<h3 id="性能测试方法"><a href="#性能测试方法" class="headerlink" title="性能测试方法"></a>性能测试方法</h3><ul>
<li>性能测试</li>
<li>负载测试</li>
<li>压力测试</li>
<li>稳定性测试</li>
</ul>
<h3 id="常见优化手段"><a href="#常见优化手段" class="headerlink" title="常见优化手段"></a>常见优化手段</h3><p>用户视角</p>
<ul>
<li>优化页面HTML样式</li>
<li>利用浏览器的并发和异步</li>
<li>调整浏览器缓存策略</li>
<li>CDN和反向代理</li>
</ul>
<p>开发人员</p>
<ul>
<li>使用缓存加速数据读取速度</li>
<li>使用集群提高系统吞吐能力</li>
<li>使用异步消息加速响应及实现消峰</li>
<li>优化代码改善程序性能</li>
</ul>
<p>运维人员</p>
<ul>
<li>优化骨干网</li>
<li>使用高性价比定制服务器</li>
<li>使用虚拟化技术优化资源利用</li>
</ul>
<h3 id="网站性能优化"><a href="#网站性能优化" class="headerlink" title="网站性能优化"></a>网站性能优化</h3><p>web性能优化</p>
<ul>
<li>减少HTTP请求（合并css、javascript、图片）</li>
<li>使用浏览器缓存（使用Cache-Control和Expire属性）</li>
<li>启用压缩（减少网络数据传输量）</li>
<li>减少页面阻塞（CSS文件尽量放在最上面，javascript放在最下面）</li>
<li>减少Cookie传输</li>
<li>CDN加速</li>
<li>反向代理<ul>
<li>安全</li>
<li>加速web请求（可以缓存一些静态资源）</li>
<li>负载均衡</li>
</ul>
</li>
</ul>
<p>应用服务器优化</p>
<ul>
<li>分布式缓存</li>
<li><p>异步操作（消息队列）</p>
<blockquote>
<p>原则：任何可以晚点在做的事都可以晚点再做</p>
</blockquote>
</li>
<li><p>使用集群</p>
<blockquote>
<p>使用负载均衡技术来构建</p>
</blockquote>
</li>
</ul>
<p>存储服务器优化</p>
<ul>
<li>访问频繁的页面不应该访问数据库（如首页，最好是静态的）</li>
<li>谨慎使用锁操作</li>
<li>对缓存的管理提高到和其他服务器一样的级别</li>
<li>大文件小文件分别对待</li>
</ul>
<h2 id="大型网站架构设计误区"><a href="#大型网站架构设计误区" class="headerlink" title="大型网站架构设计误区"></a>大型网站架构设计误区</h2><ul>
<li>一味追求大公司的解决方案</li>
<li>为了技术而技术</li>
<li>企图用技术解决所有问题</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://n.sinaimg.cn/games/3ece443e/20161013/DaXingWangZhanJiShuJiaGouPouXi.jpg&quot; alt=&quot;大型网站技术架构剖析&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;大型网站系统特点&quot;&gt;&lt;a href=&quot;#大型网站系统特点&quot; class=&quot;headerlink&quot; title=&quot;大型网站系统特点&quot;&gt;&lt;/a&gt;大型网站系统特点&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;高并发，大流量&lt;/li&gt;
&lt;li&gt;高可用&lt;/li&gt;
&lt;li&gt;海量数据&lt;/li&gt;
&lt;li&gt;用户分布广泛，网络情况复杂&lt;/li&gt;
&lt;li&gt;安全环境恶略&lt;/li&gt;
&lt;li&gt;需求快速变更，发布频繁&lt;/li&gt;
&lt;li&gt;渐进式发展&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="架构" scheme="https://weizhimiao.github.io/categories/%E6%9E%B6%E6%9E%84/"/>
    
    
  </entry>
  
  <entry>
    <title>PHP魔术方法小结</title>
    <link href="https://weizhimiao.github.io/2016/10/12/PHP%E7%9A%84MVC%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0/"/>
    <id>https://weizhimiao.github.io/2016/10/12/PHP的MVC设计与实现/</id>
    <published>2016-10-12T14:30:00.000Z</published>
    <updated>2016-10-13T03:03:13.000Z</updated>
    
    <content type="html"><![CDATA[<p>MVC模式，即模型-试图-控制器模式，是将应用程序划分成不同层次的一种方式。</p>
<p>即，</p>
<table>
<thead>
<tr>
<th>C</th>
<th>Control</th>
<th>控制器层</th>
<th>负责业务逻辑的处理。根据用户的请求确定用户可以做什么。之后，调用模型执行操作获得数据。最后调用视图将操作结果呈现给用户。</th>
</tr>
</thead>
<tbody>
<tr>
<td>M</td>
<td>Model</td>
<td>模型层</td>
<td>负责加工处理数据 返回结果。</td>
</tr>
<tr>
<td>V</td>
<td>View</td>
<td>视图层</td>
<td>负责接收信息和显示信息。</td>
</tr>
</tbody>
</table>
<p>一个典型MVC应用程序流程图</p>
<p><img src="http://n.sinaimg.cn/games/3ece443e/20161013/mvcYingYongChengXuLiuChengTu.png" alt="典型MVC应用程序流程图"></p>
<a id="more"></a>
<h2 id="简单实现："><a href="#简单实现：" class="headerlink" title="简单实现："></a>简单实现：</h2><h3 id="文件结构："><a href="#文件结构：" class="headerlink" title="文件结构："></a>文件结构：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">$ tree shop         </div><div class="line">shop</div><div class="line">├── Control</div><div class="line">│   ├── FlinkControl.class.php</div><div class="line">│   ├── GoodsControl.class.php</div><div class="line">│   ├── IndexControl.class.php</div><div class="line">│   ├── NewsControl.class.php</div><div class="line">│   ├── OrderControl.class.php</div><div class="line">│   └── UserControl.class.php</div><div class="line">├── Model</div><div class="line">│   ├── MemcacheModel.class.php</div><div class="line">│   └── MysqlModel.class.php</div><div class="line">├── Org</div><div class="line">│   └── Vcode.class.php</div><div class="line">├── Views</div><div class="line">├── index.php</div><div class="line">└── readme</div><div class="line"></div><div class="line">4 directories, 11 files</div></pre></td></tr></table></figure>
<h3 id="说明："><a href="#说明：" class="headerlink" title="说明："></a>说明：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Model  文件夹    模型层的Model类（操作数据 MYSQL、Memcached...）</div><div class="line">Org    文件夹	  模型层的其他类(不操作数据 分页/验证码...)</div><div class="line">Controls文件夹	  控制器层的类</div><div class="line">Views  文件夹	  视图层(html页面)</div></pre></td></tr></table></figure>
<h3 id="主要文件内容："><a href="#主要文件内容：" class="headerlink" title="主要文件内容："></a>主要文件内容：</h3><p>index.php</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line">	<span class="comment">//类的自动加载</span></div><div class="line">	<span class="function"><span class="keyword">function</span> <span class="title">__autoload</span><span class="params">($className)</span></span>&#123;</div><div class="line"></div><div class="line">		<span class="comment">//包含控制器的类</span></div><div class="line">		<span class="keyword">if</span>(strtolower(substr($className,<span class="number">-7</span>))==<span class="string">'control'</span>)&#123;</div><div class="line">			<span class="keyword">include</span> <span class="string">'Control/'</span>.$className.<span class="string">'.class.php'</span>;</div><div class="line">		&#125;<span class="keyword">elseif</span>(strtolower(substr($className,<span class="number">-5</span>))==<span class="string">'model'</span>)&#123;</div><div class="line">			<span class="keyword">include</span> <span class="string">'Model/'</span>.$className.<span class="string">'.class.php'</span>;</div><div class="line">		&#125;<span class="keyword">else</span>&#123;</div><div class="line">			<span class="keyword">include</span> <span class="string">'Org/'</span>.$className.<span class="string">'.class.php'</span>;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">//如何调用控制器</span></div><div class="line">	<span class="comment">//index.php?m=user&amp;a=add      表示调用用户类中的添加用户方法</span></div><div class="line">	<span class="comment">//index.php?m=goods&amp;a=drop    表示调用商品类中的删除商品方法</span></div><div class="line"></div><div class="line">	<span class="comment">//index.php?m=user&amp;a=add  </span></div><div class="line"></div><div class="line">	<span class="comment">//m=user -&gt;调用UserControl类</span></div><div class="line">	$class=!<span class="keyword">empty</span>($_GET[<span class="string">'m'</span>])?strtolower($_GET[<span class="string">'m'</span>]):<span class="string">'Index'</span>;<span class="comment">//$class=user;</span></div><div class="line">	$class=ucfirst($class);<span class="comment">//$class=User;</span></div><div class="line">	$class.=<span class="string">'Control'</span>;<span class="comment">//$class=UserControl</span></div><div class="line"></div><div class="line">	<span class="comment">//a=add -&gt; add</span></div><div class="line">	$method=!<span class="keyword">empty</span>($_GET[<span class="string">'a'</span>])?strtolower($_GET[<span class="string">'a'</span>]):<span class="string">'index'</span>;</div><div class="line">	$one=<span class="keyword">new</span> $class;</div><div class="line">	$one-&gt;$method();</div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure>
<p>Control/UserControl.class.php</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line">	<span class="class"><span class="keyword">class</span> <span class="title">UserControl</span></span>&#123;</div><div class="line">		<span class="comment">//控制器不需用属性！！！1</span></div><div class="line"></div><div class="line">		<span class="comment">//默认的方法index</span></div><div class="line">		<span class="function"><span class="keyword">function</span> <span class="title">index</span><span class="params">()</span></span>&#123;</div><div class="line">      <span class="comment">//实例化一个模型层的扩展类</span></div><div class="line">			<span class="keyword">echo</span> <span class="keyword">new</span> Vcode;</div><div class="line">			<span class="keyword">echo</span> <span class="string">'显示用户列表'</span>;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="comment">//添加用户</span></div><div class="line">		<span class="function"><span class="keyword">function</span> <span class="title">add</span><span class="params">()</span></span>&#123;</div><div class="line">      <span class="comment">//调用Model 查询友情连接信息</span></div><div class="line">			$mysql=<span class="keyword">new</span> MysqlModel;</div><div class="line">			<span class="comment">//调用Model类的方法</span></div><div class="line">			$mysql-&gt;insert();</div><div class="line"></div><div class="line">			<span class="keyword">echo</span> <span class="string">'添加用户操作'</span>;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="comment">//删除用户</span></div><div class="line">		<span class="function"><span class="keyword">function</span> <span class="title">drop</span><span class="params">()</span></span>&#123;</div><div class="line">			<span class="keyword">echo</span> <span class="string">'删除用户操作'</span>;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="comment">//修改用户</span></div><div class="line">		<span class="function"><span class="keyword">function</span> <span class="title">mod</span><span class="params">()</span></span>&#123;</div><div class="line">			<span class="keyword">echo</span> <span class="string">'修改用户操作'</span>;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="comment">//查询用户</span></div><div class="line">		<span class="function"><span class="keyword">function</span> <span class="title">show</span><span class="params">()</span></span>&#123;</div><div class="line">			<span class="keyword">echo</span> <span class="string">'查询用户操作'</span>;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">	&#125;</div></pre></td></tr></table></figure>
<p>Model/MysqlModel.class.php</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"></div><div class="line">	<span class="class"><span class="keyword">class</span> <span class="title">MysqlModel</span></span>&#123;</div><div class="line"></div><div class="line">		<span class="comment">//连接数据库的方法</span></div><div class="line">		<span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span></span>&#123;</div><div class="line">			<span class="keyword">echo</span> <span class="string">'连接数据库中&lt;br&gt;'</span>;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="comment">//使用数据库进行查询操作</span></div><div class="line">		<span class="function"><span class="keyword">function</span> <span class="title">select</span><span class="params">()</span></span>&#123;</div><div class="line">			<span class="keyword">echo</span> <span class="string">'使用数据库进行查询操作&lt;br&gt;'</span>;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="comment">//使用数据库进行删除操作</span></div><div class="line">		<span class="function"><span class="keyword">function</span> <span class="title">delete</span><span class="params">()</span></span>&#123;</div><div class="line">			<span class="keyword">echo</span> <span class="string">'使用数据库进行删除操作&lt;br&gt;'</span>;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="comment">//使用数据库进行修改操作</span></div><div class="line">		<span class="function"><span class="keyword">function</span> <span class="title">update</span><span class="params">()</span></span>&#123;</div><div class="line">			<span class="keyword">echo</span> <span class="string">'使用数据库进行修改操作&lt;br&gt;'</span>;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="comment">//使用数据库进行添加操作</span></div><div class="line">		<span class="function"><span class="keyword">function</span> <span class="title">insert</span><span class="params">()</span></span>&#123;</div><div class="line">			<span class="keyword">echo</span> <span class="string">'使用数据库进行添加操作&lt;br&gt;'</span>;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="function"><span class="keyword">function</span> <span class="title">__destruct</span><span class="params">()</span></span>&#123;</div><div class="line">			<span class="keyword">echo</span> <span class="string">'断开数据库连接'</span>;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">	&#125;</div></pre></td></tr></table></figure>
<p>Org/Vcode.class.php</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line">	<span class="class"><span class="keyword">class</span>  <span class="title">Vcode</span> </span>&#123;</div><div class="line">		<span class="keyword">private</span> $width;                               <span class="comment">//验证码图片的宽度</span></div><div class="line">		<span class="keyword">private</span> $height;                              <span class="comment">//验证码图片的高度</span></div><div class="line">		<span class="keyword">private</span> $codeNum;                             <span class="comment">//验证码字符的个数</span></div><div class="line">		<span class="keyword">private</span> $disturbColorNum;                     <span class="comment">//干扰元素数量</span></div><div class="line">		<span class="keyword">private</span> $checkCode;                           <span class="comment">//验证码字符</span></div><div class="line">		<span class="keyword">private</span> $image;                               <span class="comment">//验证码资源</span></div><div class="line"></div><div class="line">		<span class="comment">/**</span></div><div class="line">		 * 构造方法用来实例化验证码对象，并为一些成员属性初使化       </div><div class="line">		 * <span class="doctag">@param</span>	int	$width		设置验证码图片的宽度，默认宽度值为80像素        </div><div class="line">		 * <span class="doctag">@param</span>	int	$height		设置验证码图片的高度，默认高度值为20像素       </div><div class="line">		 * <span class="doctag">@param</span>	int	$codeNum	设置验证码中字母和数字的个数，默认个数为4个  </div><div class="line">		 */</div><div class="line">		<span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($width=<span class="number">80</span>, $height=<span class="number">20</span>, $codeNum=<span class="number">4</span>)</span> </span>&#123;</div><div class="line">			<span class="keyword">$this</span>-&gt;width=$width;                     <span class="comment">//为成员属性width初使化</span></div><div class="line">			<span class="keyword">$this</span>-&gt;height=$height;                     <span class="comment">//为成员属性height初使化</span></div><div class="line">			<span class="keyword">$this</span>-&gt;codeNum=$codeNum;               <span class="comment">//为成员属性codeNum初使化</span></div><div class="line">			$number=floor($height*$width/<span class="number">15</span>);</div><div class="line">			<span class="keyword">if</span>($number &gt; <span class="number">240</span>-$codeNum)</div><div class="line">				<span class="keyword">$this</span>-&gt;disturbColorNum=<span class="number">240</span>-$codeNum;</div><div class="line">			<span class="keyword">else</span></div><div class="line">				<span class="keyword">$this</span>-&gt;disturbColorNum=$number;</div><div class="line">			<span class="keyword">$this</span>-&gt;checkCode=<span class="keyword">$this</span>-&gt;createCheckCode();  <span class="comment">//为成员属性checkCode初使化</span></div><div class="line">		&#125;</div><div class="line">		<span class="comment">/**</span></div><div class="line">		 * 用于输出验证码图片，也向服务器的SESSION中保存了验证码</div><div class="line">		 * 使用echo 输出对象即可</div><div class="line">		 * <span class="doctag">@return</span> string	验证码</div><div class="line">		 */</div><div class="line"></div><div class="line">		<span class="function"><span class="keyword">function</span> <span class="title">__toString</span><span class="params">()</span></span>&#123;</div><div class="line">			$_SESSION[<span class="string">"code"</span>]=strtoupper(<span class="keyword">$this</span>-&gt;checkCode);  <span class="comment">//加到session中</span></div><div class="line">			<span class="keyword">$this</span>-&gt;outImg();              <span class="comment">//输出验证码</span></div><div class="line">			<span class="keyword">return</span> <span class="string">''</span>;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">outImg</span><span class="params">()</span></span>&#123;                       <span class="comment">//通过访问该方法向浏览器中输出图像</span></div><div class="line">			<span class="keyword">$this</span>-&gt;getCreateImage();                 <span class="comment">//调用内部方法创建画布并对其进行初使化</span></div><div class="line">			<span class="keyword">$this</span>-&gt;setDisturbColor();                 <span class="comment">//向图像中设置一些干扰像素</span></div><div class="line">			<span class="keyword">$this</span>-&gt;outputText();                     <span class="comment">//向图像中输出随机的字符串</span></div><div class="line">			<span class="keyword">$this</span>-&gt;outputImage();                    <span class="comment">//生成相应格式的图像并输出</span></div><div class="line">		&#125;</div><div class="line"></div><div class="line"></div><div class="line">		<span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">getCreateImage</span><span class="params">()</span></span>&#123;              <span class="comment">//用来创建图像资源，并初使化背影</span></div><div class="line">			<span class="keyword">$this</span>-&gt;image=imagecreatetruecolor(<span class="keyword">$this</span>-&gt;width,<span class="keyword">$this</span>-&gt;height);</div><div class="line"></div><div class="line">			$backColor = imagecolorallocate(<span class="keyword">$this</span>-&gt;image, rand(<span class="number">225</span>,<span class="number">255</span>),rand(<span class="number">225</span>,<span class="number">255</span>),rand(<span class="number">225</span>,<span class="number">255</span>));    <span class="comment">//背景色（随机）</span></div><div class="line">			 @imagefill(<span class="keyword">$this</span>-&gt;image, <span class="number">0</span>, <span class="number">0</span>, $backColor);</div><div class="line"></div><div class="line">			$border=imageColorAllocate(<span class="keyword">$this</span>-&gt;image, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</div><div class="line">			imageRectangle(<span class="keyword">$this</span>-&gt;image,<span class="number">0</span>,<span class="number">0</span>,<span class="keyword">$this</span>-&gt;width<span class="number">-1</span>,<span class="keyword">$this</span>-&gt;height<span class="number">-1</span>,$border);</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">createCheckCode</span><span class="params">()</span></span>&#123;           </div><div class="line">			<span class="comment">//随机生成用户指定个数的字符串,去掉了容易混淆的字符oOLlz和数字012</span></div><div class="line">			$code=<span class="string">"3456789abcdefghijkmnpqrstuvwxyABCDEFGHIJKMNPQRSTUVWXY"</span>;</div><div class="line">			<span class="keyword">for</span>($i=<span class="number">0</span>;$i&lt;<span class="keyword">$this</span>-&gt;codeNum;$i++) &#123;</div><div class="line">				$char=$code&#123;rand(<span class="number">0</span>,strlen($code)<span class="number">-1</span>)&#125;;</div><div class="line"></div><div class="line">				$ascii.=$char;</div><div class="line">			&#125;</div><div class="line">			<span class="keyword">return</span> $ascii;</div><div class="line"></div><div class="line">		&#125;</div><div class="line">		<span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">setDisturbColor</span><span class="params">()</span> </span>&#123;    </div><div class="line">			<span class="comment">//设置干扰像素，向图像中输出不同颜色的100个点</span></div><div class="line">			<span class="keyword">for</span>($i=<span class="number">0</span>; $i&lt;=<span class="keyword">$this</span>-&gt;disturbColorNum; $i++) &#123;</div><div class="line">				$color = imagecolorallocate(<span class="keyword">$this</span>-&gt;image, rand(<span class="number">0</span>,<span class="number">255</span>), rand(<span class="number">0</span>,<span class="number">255</span>), rand(<span class="number">0</span>,<span class="number">255</span>));</div><div class="line">   				imagesetpixel(<span class="keyword">$this</span>-&gt;image,rand(<span class="number">1</span>,<span class="keyword">$this</span>-&gt;width<span class="number">-2</span>),rand(<span class="number">1</span>,<span class="keyword">$this</span>-&gt;height<span class="number">-2</span>),$color);</div><div class="line">			&#125;</div><div class="line"></div><div class="line">			<span class="keyword">for</span>($i=<span class="number">0</span>; $i&lt;<span class="number">10</span>; $i++)&#123;</div><div class="line">				$color=imagecolorallocate(<span class="keyword">$this</span>-&gt;image,rand(<span class="number">0</span>,<span class="number">255</span>),rand(<span class="number">0</span>,<span class="number">255</span>),rand(<span class="number">0</span>,<span class="number">255</span>));</div><div class="line">				imagearc(<span class="keyword">$this</span>-&gt;image,rand(<span class="number">-10</span>,<span class="keyword">$this</span>-&gt;width),rand(<span class="number">-10</span>,<span class="keyword">$this</span>-&gt;height),rand(<span class="number">30</span>,<span class="number">300</span>),rand(<span class="number">20</span>,<span class="number">200</span>),<span class="number">55</span>,<span class="number">44</span>,$color);</div><div class="line">			&#125;  </div><div class="line">		&#125;</div><div class="line"></div><div class="line"></div><div class="line">		<span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">outputText</span><span class="params">()</span> </span>&#123;       </div><div class="line">			<span class="comment">//随机颜色、随机摆放、随机字符串向图像中输出</span></div><div class="line">			<span class="keyword">for</span> ($i=<span class="number">0</span>;$i&lt;=<span class="keyword">$this</span>-&gt;codeNum;$i++) &#123;</div><div class="line">				$fontcolor = imagecolorallocate(<span class="keyword">$this</span>-&gt;image, rand(<span class="number">0</span>,<span class="number">128</span>), rand(<span class="number">0</span>,<span class="number">128</span>), rand(<span class="number">0</span>,<span class="number">128</span>));</div><div class="line">				$fontSize=rand(<span class="number">3</span>,<span class="number">5</span>);</div><div class="line">				$x = floor(<span class="keyword">$this</span>-&gt;width/<span class="keyword">$this</span>-&gt;codeNum)*$i+<span class="number">3</span>;</div><div class="line">   				$y = rand(<span class="number">0</span>,<span class="keyword">$this</span>-&gt;height-imagefontheight($fontSize));</div><div class="line">				imagechar(<span class="keyword">$this</span>-&gt;image, $fontSize, $x, $y, <span class="keyword">$this</span>-&gt;checkCode&#123;$i&#125;, $fontcolor);</div><div class="line"> 			  &#125;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">outputImage</span><span class="params">()</span></span>&#123;              </div><div class="line">			<span class="comment">//自动检测GD支持的图像类型，并输出图像</span></div><div class="line">			<span class="keyword">if</span>(imagetypes() &amp; IMG_GIF)&#123;          <span class="comment">//判断生成GIF格式图像的函数是否存在</span></div><div class="line">				header(<span class="string">"Content-type: image/gif"</span>);  <span class="comment">//发送标头信息设置MIME类型为image/gif</span></div><div class="line">				imagegif(<span class="keyword">$this</span>-&gt;image);           <span class="comment">//以GIF格式将图像输出到浏览器</span></div><div class="line">			&#125;<span class="keyword">elseif</span>(imagetypes() &amp; IMG_JPG)&#123;      <span class="comment">//判断生成JPG格式图像的函数是否存在</span></div><div class="line">				header(<span class="string">"Content-type: image/jpeg"</span>); <span class="comment">//发送标头信息设置MIME类型为image/jpeg</span></div><div class="line">				imagejpeg(<span class="keyword">$this</span>-&gt;image, <span class="string">""</span>, <span class="number">0.5</span>);   <span class="comment">//以JPEN格式将图像输出到浏览器</span></div><div class="line">			&#125;<span class="keyword">elseif</span>(imagetypes() &amp; IMG_PNG)&#123;     <span class="comment">//判断生成PNG格式图像的函数是否存在</span></div><div class="line">				header(<span class="string">"Content-type: image/png"</span>);  <span class="comment">//发送标头信息设置MIME类型为image/png</span></div><div class="line">				imagepng(<span class="keyword">$this</span>-&gt;image);          <span class="comment">//以PNG格式将图像输出到浏览器</span></div><div class="line">			&#125;<span class="keyword">elseif</span>(imagetypes() &amp; IMG_WBMP)&#123;   <span class="comment">//判断生成WBMP格式图像的函数是否存在</span></div><div class="line">				 header(<span class="string">"Content-type: image/vnd.wap.wbmp"</span>);   <span class="comment">//发送标头为image/wbmp</span></div><div class="line">				 imagewbmp(<span class="keyword">$this</span>-&gt;image);       <span class="comment">//以WBMP格式将图像输出到浏览器</span></div><div class="line">			&#125;<span class="keyword">else</span>&#123;                              <span class="comment">//如果没有支持的图像类型</span></div><div class="line">				<span class="keyword">die</span>(<span class="string">"PHP不支持图像创建！"</span>);    <span class="comment">//不输出图像，输出一错误消息，并退出程序</span></div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		<span class="function"><span class="keyword">function</span> <span class="title">__destruct</span><span class="params">()</span></span>&#123;                      <span class="comment">//当对象结束之前销毁图像资源释放内存</span></div><div class="line"> 			imagedestroy(<span class="keyword">$this</span>-&gt;image);            <span class="comment">//调用GD库中的方法销毁图像资源</span></div><div class="line">		&#125;</div><div class="line">	&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;MVC模式，即模型-试图-控制器模式，是将应用程序划分成不同层次的一种方式。&lt;/p&gt;
&lt;p&gt;即，&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;C&lt;/th&gt;
&lt;th&gt;Control&lt;/th&gt;
&lt;th&gt;控制器层&lt;/th&gt;
&lt;th&gt;负责业务逻辑的处理。根据用户的请求确定用户可以做什么。之后，调用模型执行操作获得数据。最后调用视图将操作结果呈现给用户。&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;M&lt;/td&gt;
&lt;td&gt;Model&lt;/td&gt;
&lt;td&gt;模型层&lt;/td&gt;
&lt;td&gt;负责加工处理数据 返回结果。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;V&lt;/td&gt;
&lt;td&gt;View&lt;/td&gt;
&lt;td&gt;视图层&lt;/td&gt;
&lt;td&gt;负责接收信息和显示信息。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;一个典型MVC应用程序流程图&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://n.sinaimg.cn/games/3ece443e/20161013/mvcYingYongChengXuLiuChengTu.png&quot; alt=&quot;典型MVC应用程序流程图&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="PHP" scheme="https://weizhimiao.github.io/categories/PHP/"/>
    
    
      <category term="MVC" scheme="https://weizhimiao.github.io/tags/MVC/"/>
    
  </entry>
  
  <entry>
    <title>PHP扩展与应用库(PEAR)</title>
    <link href="https://weizhimiao.github.io/2016/10/12/PHP%E6%89%A9%E5%B1%95%E4%B8%8E%E5%BA%94%E7%94%A8%E5%BA%93(PEAR)/"/>
    <id>https://weizhimiao.github.io/2016/10/12/PHP扩展与应用库(PEAR)/</id>
    <published>2016-10-12T12:30:00.000Z</published>
    <updated>2016-10-13T03:04:02.000Z</updated>
    
    <content type="html"><![CDATA[<p>PEAR（the PHP Extension and Application Repository），PHP扩展与应用库。它是一个PHP扩展及应用的一个代码仓库。所有的扩展均以PHP代码的形式出现，功能强大，安装简单，甚至可以改改就用。使用的时候，要在代码中进行Include才能够使用。</p>
<p>官网：</p>
<p><a href="http://pear.php.net" target="_blank" rel="external">http://pear.php.net</a></p>
<a id="more"></a>
<h2 id="PEAR安装和使用"><a href="#PEAR安装和使用" class="headerlink" title="PEAR安装和使用"></a>PEAR安装和使用</h2><p>在官网上有说明详细的安装信息，这里作简单说明。<br><a href="http://pear.php.net/manual/en/about-pear.php" target="_blank" rel="external">http://pear.php.net/manual/en/about-pear.php</a></p>
<h3 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h3><p>#curl -o go-pear.php  <a href="http://pear.php.net/go-pear" target="_blank" rel="external">http://pear.php.net/go-pear</a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ curl -o go-pear.php  http://pear.php.net/go-pear</div><div class="line">  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current</div><div class="line">                                 Dload  Upload   Total   Spent    Left  Speed</div><div class="line">100 88959  100 88959    0     0  43329      0  0:00:02  0:00:02 --:--:-- 43352</div></pre></td></tr></table></figure></p>
<h3 id="运行go-pear-php"><a href="#运行go-pear-php" class="headerlink" title="运行go-pear.php"></a>运行go-pear.php</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"># /usr/local/php5/bin/php go-pear.php</div></pre></td></tr></table></figure>
<h3 id="利用PEAR安装PHPDOC"><a href="#利用PEAR安装PHPDOC" class="headerlink" title="利用PEAR安装PHPDOC"></a>利用PEAR安装PHPDOC</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">$ pear install phpdoc/phpDocumentor-alpha</div><div class="line">Attempting to discover channel &quot;phpdoc&quot;...</div><div class="line">Attempting fallback to https instead of http on channel &quot;phpdoc&quot;...</div><div class="line">unknown channel &quot;phpdoc&quot; in &quot;phpdoc/phpDocumentor-alpha&quot;</div><div class="line">invalid package name/package file &quot;phpdoc/phpDocumentor-alpha&quot;</div><div class="line">install failed</div></pre></td></tr></table></figure>
<p>如出现上面错误，需要我们增加一个phpDocumentor pear渠道<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ pear channel-discover pear.phpdoc.org</div><div class="line">Adding Channel &quot;pear.phpdoc.org&quot; succeeded</div><div class="line">Discovery of channel &quot;pear.phpdoc.org&quot; succeeded</div></pre></td></tr></table></figure></p>
<p>重新安装<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$ pear install phpdoc/phpDocumentor-alpha</div><div class="line">downloading phpDocumentor-2.8.5.tgz ...</div><div class="line">Starting to download phpDocumentor-2.8.5.tgz (8,184,822 bytes)</div><div class="linedone: 8,184,822 bytes</div><div class="line">install ok: channel://pear.phpdoc.org/phpDocumentor-2.8.5</div></pre></td></tr></table></figure></p>
<p>查看是否安装成功<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ phpdoc -V</div><div class="line">phpDocumentor version 2.8.5</div></pre></td></tr></table></figure></p>
<h2 id="PEAR常用功能及命令"><a href="#PEAR常用功能及命令" class="headerlink" title="PEAR常用功能及命令"></a>PEAR常用功能及命令</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div></pre></td><td class="code"><pre><div class="line">$ phpdoc --help</div><div class="line">Usage:</div><div class="line"> project:run [-t|--target[=&quot;...&quot;]] [--cache-folder[=&quot;...&quot;]] [-f|--filename[=&quot;...&quot;]] [-d|--directory[=&quot;...&quot;]] [--encoding[=&quot;...&quot;]] [-e|--extensions[=&quot;...&quot;]] [-i|--ignore[=&quot;...&quot;]] [--ignore-tags[=&quot;...&quot;]] [--hidden] [--ignore-symlinks] [-m|--markers[=&quot;...&quot;]] [--title[=&quot;...&quot;]] [--force] [--validate] [--visibility[=&quot;...&quot;]] [--defaultpackagename[=&quot;...&quot;]] [--sourcecode] [-p|--progressbar] [--template[=&quot;...&quot;]] [--parseprivate] [--log[=&quot;...&quot;]]</div><div class="line"></div><div class="line">Aliases: run</div><div class="line">Options:</div><div class="line"> --target (-t)         模板文件生成路径</div><div class="line"> --cache-folder        缓存文件路径</div><div class="line"> --filename (-f)       要解析的文件的逗号分隔列表。 通配符？ 和*（支持多个值）</div><div class="line"> --directory (-d)      逗号分隔的目录列表（递归）解析（允许多个值）</div><div class="line"> --encoding            编码用于解释源文件</div><div class="line"> --extensions (-e)     以逗号分隔的解析扩展列表，默认为php，php3和phtml（允许多个值）</div><div class="line"> --ignore (-i)         以逗号分隔的将被忽略的文件和目录（相对于源代码目录）列表。 通配符*和？ 支持（允许多个值）</div><div class="line"> --ignore-tags         将忽略的逗号分隔的标签列表，默认为none。 package，subpackage和ignore不能被忽略。 （允许多个值）</div><div class="line"> --hidden              使用此选项可以告诉phpDocumentor解析以句点（。）开头的文件和目录，默认情况下这些被忽略</div><div class="line"> --ignore-symlinks     忽略到其他文件或目录的符号链接，默认值为on</div><div class="line"> --markers (-m)        要过滤的标记/标记的逗号分隔列表（允许多个值）</div><div class="line"> --title               设置此项目的标题; 默认是phpDocumentor标志</div><div class="line"> --force               强制完整构建文档，不会增加现有文档</div><div class="line"> --validate            使用PHP Lint验证每个处理的文件，成本很高的性能</div><div class="line"> --visibility          指定应在文档中显示的解析可见性（逗号分隔，例如“public，protected”）（允许多个值）</div><div class="line"> --defaultpackagename  用于默认软件包的名称。(default: &quot;Default&quot;)</div><div class="line"> --sourcecode          是否包含语法高亮的源代码</div><div class="line"> --progressbar (-p)    是否显示进度条; 将自动静默记录到stdout</div><div class="line"> --template            要使用的模板的名称（可选）（允许多个值）</div><div class="line"> --parseprivate        是否解析标记有@internal标签的DocBlocks</div><div class="line"> --log                 要写入的日志文件</div><div class="line"> --help (-h)           显示此帮助消息</div><div class="line"> --quiet (-q)          不输出任何消息</div><div class="line"> --verbose (-v|vv|vvv) 增加消息的详细程度：1用于正常输出，2用于更详细的输出，3用于调试</div><div class="line"> --version (-V)        显示此应用程序版本</div><div class="line"> --ansi                强制ANSI输出</div><div class="line"> --no-ansi             禁用ANSI输出</div><div class="line"> --no-interaction (-n) 不要问任何互动问题</div><div class="line"> --config (-c)         自定义配置文件的位置</div><div class="line"></div><div class="line">Help:</div><div class="line">  phpDocumentor从PHP源文件创建文档。 最简单的方法</div><div class="line">  使用它是：</div><div class="line"></div><div class="line">     $ phpdoc run -d [directory to parse] -t [output directory]</div><div class="line"></div><div class="line"> 这将解析在&lt;directory to parse&gt;中以.php，.php3和.phtml结尾的每个文件，然后在&lt;output directory&gt;中输出一个包含易于阅读的文档的HTML网站。</div><div class="line"></div><div class="line"> phpDocumentor will try to look for a phpdoc.dist.xml or phpdoc.xml file in your</div><div class="line"> current working directory and use that to override the default settings if</div><div class="line"> present. In the configuration file can you specify the same settings (and</div><div class="line"> more) as the command line provides.</div><div class="line"></div><div class="line">phpDocumentor将尝试在当前工作目录中查找phpdoc.dist.xml或phpdoc.xml文件，</div><div class="line">并使用该文件覆盖默认设置（如果存在）。 在配置文件中，您可以指定与命令行提供的相同的设置（和更多）。</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"> Other commands</div><div class="line"> 除了这个命令phpDocumentor还支持附加命令：</div><div class="line"></div><div class="line"> Available commands:</div><div class="line">   help</div><div class="line">   list</div><div class="line">   parse</div><div class="line">   run</div><div class="line">   transform</div><div class="line"> project</div><div class="line">   project:parse</div><div class="line">   project:run</div><div class="line">   project:transform</div><div class="line"> template</div><div class="line">   template:generate</div><div class="line">   template:list</div><div class="line">   template:package</div><div class="line"></div><div class="line">您可以使用list命令获取更详细的命令列表，并通过在命令名前添加help来获取帮助。</div></pre></td></tr></table></figure>
<h2 id="常用的PEAR模块简介"><a href="#常用的PEAR模块简介" class="headerlink" title="常用的PEAR模块简介"></a>常用的PEAR模块简介</h2><ul>
<li><p>Benchmark/Timer 测试你的一段php代码的运行效率  </p>
</li>
<li><p>Benchmark/Benchmark_Iterate 测试你某个函数循环执行时的性能  </p>
</li>
<li><p>Cache/Output 可以将你的php脚本的输出进行缓存，可以使用多种方式缓存（存在文件，数据库或者是共享内存中）,如果使用这个模块有可能增大服务器的负载，所以，如果你想通过动态脚本的缓存来提供效率，不妨使用Zend optimize,这个模块未必适合  </p>
</li>
<li><p>Cache/Graphics 可以将你需要动态输出的图片进行缓存  </p>
</li>
<li><p>Console/Getopt 命令行参数的处理模块  </p>
</li>
<li><p>CMD 一个虚拟的shell，可以用它来运行一些系统的命令  </p>
</li>
<li><p>Crypt/CBC 实现Perl Crypt::CBC 模块的仿真  </p>
</li>
<li><p>Crypt/HCEMD5 实现Perl Crypt::HCE_MD5 模块的功能  </p>
</li>
<li><p>Date/Calc 实现日期的相关操作  </p>
</li>
<li><p>Date/Human Human历法的转换  </p>
</li>
<li><p>DB 提供统一的、抽象的数据库操作层，后端支持多种数据库  </p>
</li>
<li><p>File/Find 文件查找  </p>
</li>
<li><p>File/Passwd 操纵password类的文件，如password,httppass,cvspassword  </p>
</li>
<li><p>File/SearchReplace 在文件中查找替换字符串  </p>
</li>
<li><p>HTML/Form 可以在html中快速地创建form  </p>
</li>
<li><p>HTML/IT 实现模板定制，动态生成页面的功能，类似phplib中的模板功能，但是要简单易用  </p>
</li>
<li><p>HTML/ITX 实现对IT的扩展功能，可以更加灵活地定制你的模板，实现更复杂的操作  </p>
</li>
<li><p>HTML/Processor XML_Parser的扩展，使之可以应用于html文件的操作  </p>
</li>
<li><p>HTTP/Compress 用于Php 输出缓冲机制的一个包装类，同时可以对缓冲的内容进行压缩存储  </p>
</li>
<li><p>Image/Remote 无需把整个图片都下载到本地就可以获取远端系统的图片的信息，  </p>
</li>
<li><p>Log/composite Horde对log抽象类做的一个扩展，可以使多个日志处理对象能够获得同一个日志事件。注意，Log目录下面的模块都是Horde项目的一部分，大部分都是抽象的超类  </p>
</li>
<li><p>Log/file 将日志信息写入文件  </p>
</li>
<li><p>Log/mcal 将信息发送到本地或远端的日程管理软件-mcal的数据库中  </p>
</li>
<li><p>Log/observer Horder中Observer的一个超类  </p>
</li>
<li><p>Log/sql 将日志信息发送到sql数据库中  </p>
</li>
<li><p>Log/syslog 将信息发送到syslog中  </p>
</li>
<li><p>Mail/RFC822 检查一个email地址是否是合法的rf822 email地址  </p>
</li>
<li><p>Mail/sendmail 使用sendmail来发送信件  </p>
</li>
<li><p>Mail/smtp 使用smtp服务器来发送信件  </p>
</li>
<li><p>Math/Fraction 处理分形的数学计算  </p>
</li>
<li><p>Math/Util 计算最大公约数  </p>
</li>
<li><p>NET/Curl 对php的Curl扩展所作的面向对象的包装  </p>
</li>
<li><p>NET/Dig 操纵dig，进行dns相关的查询操作  </p>
</li>
<li><p>NET/SMTP 使用NET/Socket实现SMTP协议  </p>
</li>
<li><p>NET/Socket 通用的Socket类，实现了常用的socket操作的包装  </p>
</li>
<li><p>Numbers/Roman 阿拉伯数字和罗马数字的相互转换  </p>
</li>
<li><p>Payment/Verisign 实现和Verisign支付网关的交互  </p>
</li>
<li><p>Pear 提供Pear模块的2个基本类，PEAR 和PEARError类  </p>
</li>
<li><p>PEAR/Installer pear的安装类，提供Perl中的CPAN模块类似的功能  </p>
</li>
<li><p>PHPDoc 从php代码中自动生成API文档  </p>
</li>
<li><p>Schedule/at 和Unix 上的AT守护进程进行交互  </p>
</li>
<li><p>XML/Parser 基于php的xml扩展所作的xml的解析器  </p>
</li>
<li><p>XML/Render 将xml文档生成其它的格式（html,pdf),这只是一个抽象类，在最新的pear cvs代码中已经有了html的实现  </p>
</li>
<li><p>XML/RPC 用php实现xml-rpc的一个抽象类，在最新的pear cvs代码中已经有了xml/RPC/Server的实现  </p>
</li>
</ul>
<h2 id="PEAR与PECL关系"><a href="#PEAR与PECL关系" class="headerlink" title="PEAR与PECL关系"></a>PEAR与PECL关系</h2><p>PEAR（the PHP Extension and Application Repository），PHP扩展与应用库。它是一个PHP扩展及应用的一个代码仓库。</p>
<p>PECL（PHP Extension Community Library），PHP的扩展库。它提供了一系列已知的扩展库，由C、C++等其他语言编写而成，以.so形式出现，.so 为共享库,是shared object,用于动态连接的,和dll差不多，为比PEAR更快，但是与PEAR不同的是，PECL需要在服务器上配置并被注册到主机中。</p>
<p>基于他们的实现方式不同，在使用时候也有不同。</p>
<p>Pear：是PHP的扩展代码包，所有的扩展均以PHP代码的形式出现，功能强大，安装简单，甚至可以改改就用。使用的时候，要在代码中进行Include才能够使用。</p>
<p>Pecl：是PHP的标准扩展，可以补充实际开发中所需的功能，所有的扩展都需要安装，在Windows下面以Dll的形式出现，在linux下面，需要单独进行编译，它的表现形式为根据PHP官方的标准用C语言写成，尽管源码开放但是一般人无法随意更改源码。</p>
<p><strong>最直接的表述：Pear是PHP的上层扩展，Pecl是PHP的底层扩展。</strong></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;PEAR（the PHP Extension and Application Repository），PHP扩展与应用库。它是一个PHP扩展及应用的一个代码仓库。所有的扩展均以PHP代码的形式出现，功能强大，安装简单，甚至可以改改就用。使用的时候，要在代码中进行Include才能够使用。&lt;/p&gt;
&lt;p&gt;官网：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://pear.php.net&quot;&gt;http://pear.php.net&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="PHP" scheme="https://weizhimiao.github.io/categories/PHP/"/>
    
    
      <category term="PEAR" scheme="https://weizhimiao.github.io/tags/PEAR/"/>
    
  </entry>
  
</feed>
