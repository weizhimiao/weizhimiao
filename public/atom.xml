<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>行云流水</title>
  <subtitle>却也碎碎念念</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://weizhimiao.github.io/"/>
  <updated>2016-08-24T03:16:28.000Z</updated>
  <id>https://weizhimiao.github.io/</id>
  
  <author>
    <name>zhimiao</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Apache性能监控</title>
    <link href="https://weizhimiao.github.io/2016/08/23/Apache%E6%80%A7%E8%83%BD%E7%9B%91%E6%8E%A7/"/>
    <id>https://weizhimiao.github.io/2016/08/23/Apache性能监控/</id>
    <published>2016-08-23T08:10:00.000Z</published>
    <updated>2016-08-24T03:16:28.000Z</updated>
    
    <content type="html"><![CDATA[<p>谈到服务器性能监控，目前市面上有很多成熟的关于性能监控的产品可供我们使用。比如 <a href="http://www.oneapm.com/ci/feature.html" target="_blank" rel="external">Cloud Insight</a><br>。但通过 Apache本身提供的监控模块或者通过一些简单的bash命令也能实现简单的监控。</p>
<a id="more"></a>
<h2 id="Linux下通过Server-status来监控Apache"><a href="#Linux下通过Server-status来监控Apache" class="headerlink" title="Linux下通过Server-status来监控Apache"></a>Linux下通过Server-status来监控Apache</h2><ol>
<li><p>加载 mod_status.so 模块</p>
<blockquote>
<p>mod_status, Apache状态管理模块</p>
</blockquote>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">#在httpd.conf中加入下面这句或将其前面注释去掉</div><div class="line">LoadModule status_module modules/server_status.so</div></pre></td></tr></table></figure>
</li>
<li><p>修改配置文件</p>
<ul>
<li><p>方式一：直接在 httpd.conf 底部添加以下配置</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&lt;location /c-server-status&gt;</div><div class="line">    setHandle Server-status</div><div class="line">    Order Deny,Allow</div><div class="line">    Deny from nothing</div><div class="line">    Allow from all</div><div class="line">&lt;/location&gt;</div><div class="line">ExtendedStatus on</div></pre></td></tr></table></figure>
</li>
<li><p>方式二：添加到子配置文件中<br>在 httpd.conf 中找到 <code>Include conf/extra/httpd-info.conf</code>,去掉<code>#</code>,<br>在 httpd-info.conf 文件中加入 方式一 中的内容。</p>
</li>
</ul>
<p><strong>Tips：</strong></p>
<ul>
<li><code>&lt;location /c-server-status&gt;</code>: 这个名字可以任意取，最好不要让别人猜到。</li>
<li><code>ExtendedStatus on</code>: 启用扩展状态。该设置仅能用于全局设置，不能在特定的虚拟主机中打开或者关闭。并且，启用该扩展会使服务器运行效率降低。</li>
</ul>
</li>
<li><p>重启Apache</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/usr/local/apache2/bin/httpd -k start|restart|stop</div></pre></td></tr></table></figure>
</li>
<li><p>访问页面</p>
<p><a href="http://your-domain/c-server-status" target="_blank" rel="external">http://your-domain/c-server-status</a></p>
<p><a href="http://your-domain/c-server-status?refresh=5" target="_blank" rel="external">http://your-domain/c-server-status?refresh=5</a></p>
<p><a href="http://www.apache.org/server-status" target="_blank" rel="external">官网示例</a></p>
</li>
<li><p>监控参数</p>
</li>
</ol>
<table>
<thead>
<tr>
<th>参数名称</th>
<th>参数描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>Total Accesses</td>
<td>服务器自启动来接收到的请求连接数</td>
</tr>
<tr>
<td>Total kBytes</td>
<td>传输的总数据量，单位是KB</td>
</tr>
<tr>
<td>CPULoad</td>
<td>NCPU负荷</td>
</tr>
<tr>
<td>Uptime</td>
<td>运行时间，单位秒</td>
</tr>
<tr>
<td>ReqPerSec</td>
<td>每秒请求数</td>
</tr>
<tr>
<td>BytesPerSec</td>
<td>每秒传输数据量，单位B/s</td>
</tr>
<tr>
<td>BytesPerReq</td>
<td>平均每个请求的数据传输量（事实上就是BytesPerSec/BytesPerSec）</td>
</tr>
<tr>
<td>BusyWorkers</td>
<td>在跑的进程数</td>
</tr>
<tr>
<td>IdleWorkers</td>
<td>空闲的进程数</td>
</tr>
</tbody>
</table>
<h2 id="Linux下通过命令来实现监控"><a href="#Linux下通过命令来实现监控" class="headerlink" title="Linux下通过命令来实现监控"></a>Linux下通过命令来实现监控</h2><ol>
<li>ps 查看httpd进程数<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ps -ef | grep httpd | wc -l</div></pre></td></tr></table></figure>
</li>
</ol>
<p>当连接数多了，他就会生出更多进程来处理请求。当然这结果包含 grep httpd 的进程输出，所以一般来说实际进程数比输出结果少1</p>
<ol>
<li>用netstat来查看当前连接数<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$netstat -ant | grep &quot;:80&quot; | wc -l</div></pre></td></tr></table></figure>
</li>
</ol>
<p>连接数目并不等于httpd线程数目，当然连接数目越多，httpd进程数就有可能数会增多。上面的返回结果数目，有可能包括多种连接状态，比如 LISTEN、ESTABLISHED、TIME_WAIT等等，可以加入状态关键字进一步过滤，得到想要的结果。</p>
<ol>
<li><p>实时检测httpd连接数</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">#watch -n 1 -d &quot;pgrep httpd|wc -l&quot;</div></pre></td></tr></table></figure>
</li>
<li><p>计算httpd进程占用内在的平均数</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">#ps aux|grep -v grep|awk &apos;/httpd/&#123;sum+=$6&#125;; END&#123;print sum/n&#125;&apos;</div></pre></td></tr></table></figure>
</li>
<li><p>查看Apache的并发请求数及期TCP连接状态</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">#netstat -n | awk &apos;/^tcp/&#123;++S[$NF]&#125;END&#123;for(a in S) print a, S[a]&#125;&apos;</div><div class="line">返回结果示例：</div><div class="line">LAST_ACK 5</div><div class="line">SYN_RECV 30       #表示正在等待处理的请求数；</div><div class="line">ESTABLISHED 1597  #表示正常数据传输状态；</div><div class="line">FIN_WAIT1 51</div><div class="line">FIN_WAIT2 504</div><div class="line">TIME_WAIT 1057    #表示处理完毕,等待超时结束的请求数</div></pre></td></tr></table></figure>
</li>
</ol>
<p>常见的连接状态</p>
<table>
<thead>
<tr>
<th>状态</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>CLOSED</td>
<td>无连接是活动的或正在进行</td>
</tr>
<tr>
<td>LISTEN</td>
<td>服务器在等待进入呼叫</td>
</tr>
<tr>
<td>SYN_RECV</td>
<td>一个连接请求已经到达,等待确认</td>
</tr>
<tr>
<td>SYN_SENT</td>
<td>应用已经开始,打开一个连接</td>
</tr>
<tr>
<td>ESTABLISHED</td>
<td>正常数据传输状态</td>
</tr>
<tr>
<td>FIN_WAIT1</td>
<td>应用说它已经完成</td>
</tr>
<tr>
<td>FIN_WAIT2</td>
<td>另一边已同意释放</td>
</tr>
<tr>
<td>ITMED_WAIT</td>
<td>等待所有分组死掉</td>
</tr>
<tr>
<td>CLOSING</td>
<td>两边同时尝试关闭</td>
</tr>
<tr>
<td>TIME_WAIT</td>
<td>另一边已初始化一个释放</td>
</tr>
<tr>
<td>LAST_ACK</td>
<td>等待所有分组死掉</td>
</tr>
</tbody>
</table>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;谈到服务器性能监控，目前市面上有很多成熟的关于性能监控的产品可供我们使用。比如 &lt;a href=&quot;http://www.oneapm.com/ci/feature.html&quot;&gt;Cloud Insight&lt;/a&gt;&lt;br&gt;。但通过 Apache本身提供的监控模块或者通过一些简单的bash命令也能实现简单的监控。&lt;/p&gt;
    
    </summary>
    
      <category term="Apache" scheme="https://weizhimiao.github.io/categories/Apache/"/>
    
    
      <category term="Apache 监控" scheme="https://weizhimiao.github.io/tags/Apache-%E7%9B%91%E6%8E%A7/"/>
    
  </entry>
  
  <entry>
    <title>Apache 并行处理模块小结</title>
    <link href="https://weizhimiao.github.io/2016/08/22/Apache%E5%A4%9A%E5%A4%84%E7%90%86%E6%A8%A1%E5%9D%97%E6%95%B4%E7%90%86/"/>
    <id>https://weizhimiao.github.io/2016/08/22/Apache多处理模块整理/</id>
    <published>2016-08-22T14:36:00.000Z</published>
    <updated>2016-08-24T03:16:32.000Z</updated>
    
    <content type="html"><![CDATA[<p>Apache 2.X  支持插入式并行处理模块，称为多路处理模块 MPM，（Multi-Processing Modules）它是一个用于选择和处理网络端口的绑定，接收请求并指派子进程处理来自客户端的请求的一个Apache模块。和其他Apache模块相比，它最大的区别是，在任何时间， 必须有一个，而且只有一个 MPM 加载到服务器中。</p>
<blockquote>
<p>原理就是增加服务器服务进程或线程数量，是服务器可同时处理更多用户请求。</p>
</blockquote>
<a id="more"></a>
<h2 id="如何为Apache选择并安装一个合适的MPM模块"><a href="#如何为Apache选择并安装一个合适的MPM模块" class="headerlink" title="如何为Apache选择并安装一个合适的MPM模块"></a>如何为Apache选择并安装一个合适的MPM模块</h2><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>MPM 必须在编译前夕，配置时指定，然后编译到服务器程序中。</p>
<p>即在执行 configure 时，使用参数 –with-mpm=NAME 来指定一个希望安装的MPM模块。NAME 是指定的 MPM 名称。</p>
<p>例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">./configure --prefix=/usr/local/apache2 --with-mpm=worker</div><div class="line">make &amp; make install</div></pre></td></tr></table></figure></p>
<p>或者也可以编译为支持指定的几种或者全部MPM，之后通过修改配置来更换具体使用哪种MPM。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">--enable-mpms-shared=&apos;prefork worker&apos;</div><div class="line">--enable-mpms-shared=all</div></pre></td></tr></table></figure></p>
<p>例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">./configure --prefix=/usr/local/apache2 --enable-mpms-shared=all</div><div class="line">···</div></pre></td></tr></table></figure></p>
<p>安装成功之后，会在modules文件夹下，自动编译出我们指定的MPM的so模块，在httpd.conf中修改Apache的多处理模式MPM可以切换不同MPM模块：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">#LoadModule mpm_prefork_module modules/mod_mpm_prefork.so</div><div class="line">LoadModule mpm_worker_module modules/mod_mpm_worker.so</div><div class="line">#LoadModule mpm_event_module modules/mod_mpm_event.so</div></pre></td></tr></table></figure></p>
<h3 id="如何查看当前使用的是哪种MPM模块"><a href="#如何查看当前使用的是哪种MPM模块" class="headerlink" title="如何查看当前使用的是哪种MPM模块"></a>如何查看当前使用的是哪种MPM模块</h3><ol>
<li><p>使用 ./httpd -l 来确定选择的 MPM。 此命令会列出编译到服务器程序中的所有模块，包括 MPM。例：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">$ httpd -l</div><div class="line">Compiled in modules:</div><div class="line">  core.c</div><div class="line">  mod_so.c</div><div class="line">  http_core.c</div><div class="line">  prefork.c</div></pre></td></tr></table></figure>
<p>如上显示，我们呢当前安装的是以prefork方式工作的MPM模块。</p>
</li>
<li><p>使用./httpd -V 来确定当前使用的MPM模块。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">$ httpd -V</div><div class="line">Server version: Apache/2.4.18 (Unix)</div><div class="line">Server built:   Feb 20 2016 20:03:19</div><div class="line">Server&apos;s Module Magic Number: 20120211:52</div><div class="line">Server loaded:  APR 1.4.8, APR-UTIL 1.5.2</div><div class="line">Compiled using: APR 1.4.8, APR-UTIL 1.5.2</div><div class="line">Architecture:   64-bit</div><div class="line">Server MPM:     prefork</div><div class="line">  threaded:     no</div><div class="line">    forked:     yes (variable process count)</div><div class="line">Server compiled with....</div><div class="line"> -D APR_HAS_SENDFILE</div><div class="line"> -D APR_HAS_MMAP</div><div class="line"> -D APR_HAVE_IPV6 (IPv4-mapped addresses enabled)</div><div class="line"> -D APR_USE_FLOCK_SERIALIZE</div><div class="line"> -D APR_USE_PTHREAD_SERIALIZE</div><div class="line"> -D SINGLE_LISTEN_UNSERIALIZED_ACCEPT</div><div class="line"> -D APR_HAS_OTHER_CHILD</div><div class="line"> -D AP_HAVE_RELIABLE_PIPED_LOGS</div><div class="line"> -D DYNAMIC_MODULE_LIMIT=256</div><div class="line"> -D HTTPD_ROOT=&quot;/usr&quot;</div><div class="line"> -D SUEXEC_BIN=&quot;/usr/bin/suexec&quot;</div><div class="line"> -D DEFAULT_PIDLOG=&quot;/private/var/run/httpd.pid&quot;</div><div class="line"> -D DEFAULT_SCOREBOARD=&quot;logs/apache_runtime_status&quot;</div><div class="line"> -D DEFAULT_ERRORLOG=&quot;logs/error_log&quot;</div><div class="line"> -D AP_TYPES_CONFIG_FILE=&quot;/private/etc/apache2/mime.types&quot;</div><div class="line"> -D SERVER_CONFIG_FILE=&quot;/private/etc/apache2/httpd.conf&quot;</div></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="常见的几种MPM模块以及它们之间的区别"><a href="#常见的几种MPM模块以及它们之间的区别" class="headerlink" title="常见的几种MPM模块以及它们之间的区别"></a>常见的几种MPM模块以及它们之间的区别</h2><p>如果我们在编译的时候没有明确选择使用哪种MPM模块，那么Apache将会根据不同的系统选择不同的MPM模块进行编译安装。</p>
<table>
<thead>
<tr>
<th>系统</th>
<th>默认MPM</th>
</tr>
</thead>
<tbody>
<tr>
<td>BeOS</td>
<td>beos</td>
</tr>
<tr>
<td>Netware</td>
<td>mpm_netware</td>
</tr>
<tr>
<td>OS/2</td>
<td>mpmt_os2</td>
</tr>
<tr>
<td>Unix</td>
<td>prefork</td>
</tr>
<tr>
<td>Windows</td>
<td>mpm_winnt</td>
</tr>
</tbody>
</table>
<p>对于类UNIX系统，根据不同的场景需要我们可以选择使用不同的MPM模块。</p>
<ul>
<li>prefork</li>
<li>worker</li>
<li>event</li>
</ul>
<h3 id="prefork-MPM"><a href="#prefork-MPM" class="headerlink" title="prefork MPM"></a>prefork MPM</h3><blockquote>
<p>非线程型的、预派生的MPM</p>
</blockquote>
<p><strong>原理：</strong> 启动之初，就预先fork一些子进程，然后等待请求进来。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"># prefork MPM</div><div class="line"># StartServers: number of server processes to start</div><div class="line"># MinSpareServers: minimum number of server processes which are kept spare</div><div class="line"># MaxSpareServers: maximum number of server processes which are kept spare</div><div class="line"># MaxRequestWorkers: maximum number of server processes allowed to start</div><div class="line"># MaxConnectionsPerChild: maximum number of connections a server process serves</div><div class="line">#                         before terminating</div><div class="line">&lt;IfModule mpm_prefork_module&gt;</div><div class="line">    StartServers             1  #推荐 小=默认，中=20~50，大=50~100</div><div class="line">    MinSpareServers          1  #推荐 与 StartServers 保持一致</div><div class="line">    MaxSpareServers         10  #推荐 小=20，中=30~80，大=80~120</div><div class="line">    MaxRequestWorkers      250  #推荐 小=500，中=500~1500，大=1500~3000</div><div class="line">    MaxConnectionsPerChild   0  #推荐 小=10000，中或大10000~50000</div><div class="line">    #ServerLimit           250  #推荐 与 MaxRequestWorkers 保持一致，当MaxRequestWorkers 值超过256，则需要增加该值配置</div><div class="line">&lt;/IfModule&gt;</div></pre></td></tr></table></figure></p>
<p>启动时建立<code>StartServers</code>个子进程，然后按每秒创建指数级个进程数，直到达到<code>MinSpareServers</code>个进程（最多增到每秒32个）。如果空闲进程大于<code>MaxSpareServers</code>，则检查kill掉一些空闲进程。</p>
<p><code>MaxRequestWorkers</code>指定Apache最多可以同时同时处理的请求数，即进程数，当请求数多余这个值之后，多余的请求就会进入请求队列等待处理（默认不能大于256）。但可以通过设定ServerLimit来增大限制数，serverlimit最大为20000。apache2.3.1之前的版本该参数叫 MaxClients 。当我们的服务器资源很多，但访问却很慢时，我们就可以试一下增大该值，来提高服务器的请求处理能力。<br><code>MaxConnectionsPerChild</code>每个子进程可处理的请求数。处理完之后子进程就会自动销毁。<code>0</code>表示无限，永不销毁。</p>
<ul>
<li>优点：成熟稳定，兼容所有新老模块。同时，不需要担心线程安全的问题。</li>
<li>缺点：相对于线程，进程相对占用更多的系统资源，消耗更多的内存。所以不擅长处理高并发请求。</li>
</ul>
<h3 id="worker-MPM"><a href="#worker-MPM" class="headerlink" title="worker MPM"></a>worker MPM</h3><blockquote>
<p>支持混合的多线程、多进程的MPM。相比于prefork，worker采用了多进程和多线程混合模式，所以在使用中它占据更少的内存，在高并发情况下表现更优秀。</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"># worker MPM</div><div class="line"># StartServers: initial number of server processes to start</div><div class="line"># MinSpareThreads: minimum number of worker threads which are kept spare</div><div class="line"># MaxSpareThreads: maximum number of worker threads which are kept spare</div><div class="line"># ThreadsPerChild: constant umber of worker threads in each server process</div><div class="line"># MaxRequestWorkers: maximum number of worker threads</div><div class="line"># MaxConnectionsPerChild: maximum number of connections a server process serves</div><div class="line">#                         before terminating</div><div class="line">&lt;IfModule mpm_worker_module&gt;</div><div class="line">    StartServers             3  #推荐 小=默认，中=3~5，大=5~10</div><div class="line">    MinSpareThreads         75  #推荐 小=默认，中=50~100，大=100~200</div><div class="line">    MaxSpareThreads        250  #推荐 小=默认，中=80~160，大=200~400</div><div class="line">    ThreadsPerChild         25  #推荐 小=默认，中=50~100，大=100~200</div><div class="line">    MaxRequestWorkers      400  #推荐 小=500，中=500~1500，大=1500~3000</div><div class="line">    MaxConnectionsPerChild   0  #推荐 小=10000，中或大=10000~50000</div><div class="line">    #ServerLimit           250  #推荐 当 MaxRequestWorkers/ThreadsPerChild 大于16时，则需要增加该值配置。并且该值必须大于等于MaxRequestWorkers/ThreadsPerChild 的值</div><div class="line">&lt;/IfModule&gt;</div></pre></td></tr></table></figure>
<p><code>ThreadsPerChild</code> 每个进程包含线程数<br><code>MaxSpareThreads</code> 定义最大空闲线程数，超过则清理</p>
<ul>
<li>优点：占用更少系统资源，高并发情况下表现更优秀。</li>
<li>缺点：必须考虑线程安全的问题。</li>
</ul>
<h3 id="event-MPM"><a href="#event-MPM" class="headerlink" title="event MPM"></a>event MPM</h3><blockquote>
<p>worker方式的升级版，也采用多进程和多线程混合模式，并且解决了在 <code>keep-alive</code> 情况下，长期被占用的线程的资源浪费问题。</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"># event MPM</div><div class="line"># StartServers: initial number of server processes to start</div><div class="line"># MinSpareThreads: minimum number of worker threads which are kept spare</div><div class="line"># MaxSpareThreads: maximum number of worker threads which are kept spare</div><div class="line"># ThreadsPerChild: constant number of worker threads in each server process</div><div class="line"># MaxRequestWorkers: maximum number of worker threads</div><div class="line"># MaxConnectionsPerChild: maximum number of connections a server process serves</div><div class="line">#                         before terminating</div><div class="line">&lt;IfModule mpm_event_module&gt;</div><div class="line">    StartServers             3</div><div class="line">    MinSpareThreads         75</div><div class="line">    MaxSpareThreads        250</div><div class="line">    ThreadsPerChild         25</div><div class="line">    MaxRequestWorkers      400</div><div class="line">    MaxConnectionsPerChild   0</div><div class="line">&lt;/IfModule&gt;</div></pre></td></tr></table></figure>
<ul>
<li>优点：更好的高并发请求处理能力。</li>
<li>缺点：兼容性问题可能不是很好（最新的官方自带的模块，已经全部支持event MPM了），需要Linux系统（Linux 2.6+）对EPoll的支持，才能启用</li>
</ul>
<p><strong>Tips：</strong></p>
<ul>
<li><strong><em>空闲子进程：</em></strong> 即没有正在处理请求的子进程。</li>
<li><strong><em>请求等待队列：</em></strong> 任何超过 MaxClients 或 MaxRequestWorkers 限制的请求都将进入到等待队列，直到收到 ListenBacklog 指令限制的最大值为止（默认 ListenBacklog 511）</li>
<li><strong><em>ServerLimit：</em></strong> 该值表示Apache允许创建的最大进程数。值得注意的是 Apache在编译的时候会有一个硬限制 ServerLimit 20000 ，你不能超过该值。该值如果设置过高，将会有过多的内存被分配，可能会导致Apache 无法启动或者不稳定的情况。</li>
</ul>
<h2 id="简单测试对比"><a href="#简单测试对比" class="headerlink" title="简单测试对比"></a>简单测试对比</h2><p>对上面三种模式，我们做简单的测试进行对比。</p>
<h3 id="静态页面"><a href="#静态页面" class="headerlink" title="静态页面"></a>静态页面</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">./ab -k -c 200 -n 200000 192.168.1.234/index.html</div></pre></td></tr></table></figure>
<p>结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">prefork：9556QPS</div><div class="line">worker ：11038QPS</div><div class="line">event ：10224QPS</div></pre></td></tr></table></figure></p>
<h3 id="PHP页面"><a href="#PHP页面" class="headerlink" title="PHP页面"></a>PHP页面</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">./ab -k -c 200 -n 200000 192.168.1.234/index.php  #echo &quot;hello world&quot;;</div></pre></td></tr></table></figure>
<p>结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">prefork：6094QPS</div><div class="line">worker ：7411QPS</div><div class="line">event ：7089QPS</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Apache 2.X  支持插入式并行处理模块，称为多路处理模块 MPM，（Multi-Processing Modules）它是一个用于选择和处理网络端口的绑定，接收请求并指派子进程处理来自客户端的请求的一个Apache模块。和其他Apache模块相比，它最大的区别是，在任何时间， 必须有一个，而且只有一个 MPM 加载到服务器中。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;原理就是增加服务器服务进程或线程数量，是服务器可同时处理更多用户请求。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Apache" scheme="https://weizhimiao.github.io/categories/Apache/"/>
    
    
      <category term="Apache Apache性能优化" scheme="https://weizhimiao.github.io/tags/Apache-Apache%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>hexo常用命令</title>
    <link href="https://weizhimiao.github.io/2016/08/12/hexo%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    <id>https://weizhimiao.github.io/2016/08/12/hexo常用命令/</id>
    <published>2016-08-12T12:00:00.000Z</published>
    <updated>2016-08-24T03:16:26.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="init"><a href="#init" class="headerlink" title="init"></a>init</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo init [folder]</div></pre></td></tr></table></figure>
<p>新建一个网站。如果没有设置 folder ，Hexo 默认在目前的文件夹建立网站。</p>
<h2 id="new"><a href="#new" class="headerlink" title="new"></a>new</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new [layout] &lt;title&gt;</div></pre></td></tr></table></figure>
<p>新建一篇文章。如果没有设置 layout 的话，默认使用 <code>_config.yml</code> 中的 default_layout 参数代替。如果标题包含空格的话，请使用引号括起来。</p>
<a id="more"></a>
<h2 id="generate"><a href="#generate" class="headerlink" title="generate"></a>generate</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>生成静态文件。</p>
<p>  选项    描述<br>  -d, –deploy    文件生成后立即部署网站<br>  -w, –watch    监视文件变动</p>
<h2 id="publish"><a href="#publish" class="headerlink" title="publish"></a>publish</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo publish [layout] &lt;filename&gt;</div></pre></td></tr></table></figure>
<p>发表草稿。</p>
<h2 id="server"><a href="#server" class="headerlink" title="server"></a>server</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>启动服务器。默认情况下，访问网址为： <a href="http://localhost:4000/。" target="_blank" rel="external">http://localhost:4000/。</a></p>
<p>  选项    描述<br>  -p, –port    重设端口<br>  -s, –static    只使用静态文件<br>  -l, –log    启动日记记录，使用覆盖记录格式</p>
<h2 id="deploy"><a href="#deploy" class="headerlink" title="deploy"></a>deploy</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>部署网站。</p>
<p>  参数    描述<br>  -g, –generate    部署之前预先生成静态文件</p>
<h2 id="render"><a href="#render" class="headerlink" title="render"></a>render</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo render &lt;file1&gt; [file2] ...</div></pre></td></tr></table></figure>
<p>渲染文件。</p>
<p>  参数    描述<br>  -o, –output    设置输出路径</p>
<h2 id="migrate"><a href="#migrate" class="headerlink" title="migrate"></a>migrate</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo migrate &lt;type&gt;</div></pre></td></tr></table></figure>
<p>从其他博客系统 迁移内容。</p>
<h2 id="clean"><a href="#clean" class="headerlink" title="clean"></a>clean</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo clean</div></pre></td></tr></table></figure>
<p>清除缓存文件 (db.json) 和已生成的静态文件 (public)。</p>
<h2 id="list"><a href="#list" class="headerlink" title="list"></a>list</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo list &lt;type&gt;</div></pre></td></tr></table></figure>
<p>列出网站资料。</p>
<h2 id="version"><a href="#version" class="headerlink" title="version"></a>version</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo version</div></pre></td></tr></table></figure>
<p>显示 Hexo 版本。</p>
<h2 id="选项"><a href="#选项" class="headerlink" title="选项"></a>选项</h2><h3 id="安全模式"><a href="#安全模式" class="headerlink" title="安全模式"></a>安全模式</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo --safe</div></pre></td></tr></table></figure>
<p>在安全模式下，不会载入插件和脚本。当您在安装新插件遭遇问题时，可以尝试以安全模式重新执行。</p>
<h3 id="调试模式"><a href="#调试模式" class="headerlink" title="调试模式"></a>调试模式</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo --debug</div></pre></td></tr></table></figure>
<p>在终端中显示调试信息并记录到 debug.log。当您碰到问题时，可以尝试用调试模式重新执行一次，并 提交调试信息到 GitHub。</p>
<h3 id="简洁模式"><a href="#简洁模式" class="headerlink" title="简洁模式"></a>简洁模式</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo --silent</div></pre></td></tr></table></figure>
<p>隐藏终端信息。</p>
<h3 id="自定义配置文件的路径"><a href="#自定义配置文件的路径" class="headerlink" title="自定义配置文件的路径"></a>自定义配置文件的路径</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo --config custom.yml</div></pre></td></tr></table></figure>
<p>自定义配置文件的路径，执行后将不再使用 <code>_config.yml</code>。</p>
<h3 id="显示草稿"><a href="#显示草稿" class="headerlink" title="显示草稿"></a>显示草稿</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo --draft</div></pre></td></tr></table></figure>
<p>显示 <code>source/_drafts</code> 文件夹中的草稿文章。</p>
<h3 id="自定义-CWD"><a href="#自定义-CWD" class="headerlink" title="自定义 CWD"></a>自定义 CWD</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo --cwd /path/to/cwd</div></pre></td></tr></table></figure>
<p>自定义当前工作目录（Current working directory）的路径。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;init&quot;&gt;&lt;a href=&quot;#init&quot; class=&quot;headerlink&quot; title=&quot;init&quot;&gt;&lt;/a&gt;init&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;$ hexo init [folder]&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;新建一个网站。如果没有设置 folder ，Hexo 默认在目前的文件夹建立网站。&lt;/p&gt;
&lt;h2 id=&quot;new&quot;&gt;&lt;a href=&quot;#new&quot; class=&quot;headerlink&quot; title=&quot;new&quot;&gt;&lt;/a&gt;new&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;$ hexo new [layout] &amp;lt;title&amp;gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;新建一篇文章。如果没有设置 layout 的话，默认使用 &lt;code&gt;_config.yml&lt;/code&gt; 中的 default_layout 参数代替。如果标题包含空格的话，请使用引号括起来。&lt;/p&gt;
    
    </summary>
    
    
      <category term="hexo" scheme="https://weizhimiao.github.io/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>Apache的安装</title>
    <link href="https://weizhimiao.github.io/2016/08/09/Apache%E5%AE%89%E8%A3%85%E6%B1%87%E6%80%BB/"/>
    <id>https://weizhimiao.github.io/2016/08/09/Apache安装汇总/</id>
    <published>2016-08-09T06:00:00.000Z</published>
    <updated>2016-08-24T03:16:30.000Z</updated>
    
    <content type="html"><![CDATA[<p>Apache是世界使用排名第一的Web服务器软件。它可以运行在几乎所有广泛使用的计算机平台上，由于其跨平台和安全性被广泛使用，是最流行的Web服务器端软件之一。<br>Apache的安装无外乎两种方式：</p>
<ul>
<li>二进制包安装</li>
<li>源码包安装</li>
</ul>
<a id="more"></a>
<p>接下来我将会演示和记录通过源码包来安装apache到服务器。<br>环境：阿里云 Centos 7.2 64</p>
<h2 id="安装前准备工作"><a href="#安装前准备工作" class="headerlink" title="安装前准备工作"></a>安装前准备工作</h2><p>通过源码包安装，我们需要将源码编译成计算机运行的二进制，因此我们需要编译工具。</p>
<h3 id="gcc安装"><a href="#gcc安装" class="headerlink" title="gcc安装"></a>gcc安装</h3><p>GNU编译器套件（GNU Compiler Collection）包括C、C++、Objective-C、Fortran、Java、Ada和Go语言的前端，也包括了这些语言的库（如libstdc++、libgcj等等）。GCC的初衷是为GNU操作系统专门编写的一款编译器。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">[root@iZ28v78hcmrZ ~]# gcc</div><div class="line">gcc: 致命错误：没有输入文件</div><div class="line">编译中断。</div><div class="line">[root@iZ28v78hcmrZ ~]# yum install gcc</div><div class="line">···</div><div class="line">作为依赖被升级:</div><div class="line">  cpp.x86_64 0:4.8.5-4.el7            gcc-c++.x86_64 0:4.8.5-4.el7            gcc-gfortran.x86_64 0:4.8.5-4.el7    libgcc.x86_64 0:4.8.5-4.el7</div><div class="line">  libgfortran.x86_64 0:4.8.5-4.el7    libgomp.x86_64 0:4.8.5-4.el7            libquadmath.x86_64 0:4.8.5-4.el7     libquadmath-devel.x86_64 0:4.8.5-4.el7</div><div class="line">  libstdc++.x86_64 0:4.8.5-4.el7      libstdc++-devel.x86_64 0:4.8.5-4.el7</div><div class="line"></div><div class="line">完毕！</div><div class="line">[root@iZ28v78hcmrZ ~]#</div></pre></td></tr></table></figure></p>
<h3 id="APR、APR-UTIL-安装"><a href="#APR、APR-UTIL-安装" class="headerlink" title="APR、APR-UTIL 安装"></a>APR、APR-UTIL 安装</h3><p>APR （全称：Apache Portable Runtime）可移植运行时库、APR-UTIL（全称：Apache Portable Runtime Utility Library）可移植运行时工具库。它们的作用是使得对平台细节的处理进行下移。对于应用程序而言，它们根本就不需要考虑具体的平台，不管是Unix、Linux还是Window，应用程序执行的接口基本都是统一一致的。<br>APR的目标则是希望安全合并所有的能够合并的代码而不需要牺牲性能，为大多数平台提供所有的APR特性支持，包括Win32、OS/2、BeOS、Darwin、Linux等等。</p>
<p>关于apr和apr-util，apache可以使用系统已经安装的版本，也可以不实用系统提供的版本。具体方法是分别下载apr和apr-util，解压到apache源码包中的srclib/apr和srclib/apr-util路径中（路径中不包含版本号等信息），在编译源码包之前的./configure 过程中使用 –with-included-apr 选项</p>
<h3 id="PRCE-Perl-Compatible-Regular-Expressions-Library-Perl兼容的正则表达式库"><a href="#PRCE-Perl-Compatible-Regular-Expressions-Library-Perl兼容的正则表达式库" class="headerlink" title="PRCE (Perl-Compatible Regular Expressions Library,Perl兼容的正则表达式库)"></a>PRCE (Perl-Compatible Regular Expressions Library,Perl兼容的正则表达式库)</h3><p>PCRE(Perl Compatible Regular Expressions)是一个用C语言编写的正则表达式函数库。<br>PCRE被广泛使用在许多开源软件之中，最著名的莫过于Apache HTTP服务器和PHP脚本语言、R脚本语言，此外，正如从其名字所能看到的，PCRE也是perl语言的缺省正则库。</p>
<p><a href="https://sourceforge.net/projects/pcre/files/" target="_blank" rel="external">PCRE 下载网址</a></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line">#解压</div><div class="line">[root@iZ94m2e99jtZ ~]# tar -zxvf pcre-8.38.tar.gz</div><div class="line">[root@iZ94m2e99jtZ ~]# cd pcre-8.38</div><div class="line">[root@iZ94m2e99jtZ pcre-8.38]# ./configure</div><div class="line">···</div><div class="line">pcre-8.38 configuration summary:</div><div class="line"></div><div class="line">    Install prefix .................. : /usr/local</div><div class="line">    C preprocessor .................. : gcc -E</div><div class="line">    C compiler ...................... : gcc</div><div class="line">    C++ preprocessor ................ : g++ -E</div><div class="line">    C++ compiler .................... : g++</div><div class="line">    Linker .......................... : /usr/bin/ld -m elf_x86_64</div><div class="line">    C preprocessor flags ............ :</div><div class="line">    C compiler flags ................ : -g -O2 -fvisibility=hidden</div><div class="line">    C++ compiler flags .............. : -O2 -fvisibility=hidden -fvisibility-inlines-hidden</div><div class="line">    Linker flags .................... :</div><div class="line">    Extra libraries ................. :</div><div class="line"></div><div class="line">    Build 8 bit pcre library ........ : yes</div><div class="line">    Build 16 bit pcre library ....... : no</div><div class="line">    Build 32 bit pcre library ....... : no</div><div class="line">    Build C++ library ............... : yes</div><div class="line">    Enable JIT compiling support .... : no</div><div class="line">    Enable UTF-8/16/32 support ...... : no</div><div class="line">    Unicode properties .............. : no</div><div class="line">    Newline char/sequence ........... : lf</div><div class="line">    \R matches only ANYCRLF ......... : no</div><div class="line">    EBCDIC coding ................... : no</div><div class="line">    EBCDIC code for NL .............. : n/a</div><div class="line">    Rebuild char tables ............. : no</div><div class="line">    Use stack recursion ............. : yes</div><div class="line">    POSIX mem threshold ............. : 10</div><div class="line">    Internal link size .............. : 2</div><div class="line">    Nested parentheses limit ........ : 250</div><div class="line">    Match limit ..................... : 10000000</div><div class="line">    Match limit recursion ........... : MATCH_LIMIT</div><div class="line">    Build shared libs ............... : yes</div><div class="line">    Build static libs ............... : yes</div><div class="line">    Use JIT in pcregrep ............. : no</div><div class="line">    Buffer size for pcregrep ........ : 20480</div><div class="line">    Link pcregrep with libz ......... : no</div><div class="line">    Link pcregrep with libbz2 ....... : no</div><div class="line">    Link pcretest with libedit ...... : no</div><div class="line">    Link pcretest with libreadline .. : no</div><div class="line">    Valgrind support ................ : no</div><div class="line">    Code coverage ................... : no</div><div class="line"></div><div class="line">[root@iZ94m2e99jtZ pcre-8.38]# make &amp; make install</div></pre></td></tr></table></figure>
<p><strong>Tips</strong><br>在编译pcre时可能会出现这样的：configure: error: You need a C++ compiler for C++ support.提示我们缺少一个C++ 的编译器，需要我们再安装一个C++的编译器。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[root@iZ94m2e99jtZ pcre-8.38]# yum install gcc-c++</div></pre></td></tr></table></figure></p>
<h3 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h3><p><a href="http://apr.apache.org/" target="_blank" rel="external">apr、apr-uitl官网</a></p>
<p><a href="http://mirrors.hust.edu.cn/apache//apr/apr-1.5.2.tar.gz" target="_blank" rel="external">apr 下载地址</a></p>
<p><a href="http://mirrors.hust.edu.cn/apache//apr/apr-util-1.5.4.tar.gz" target="_blank" rel="external">apr-uitl 下载地址</a></p>
<p><a href="http://mirrors.tuna.tsinghua.edu.cn/apache//httpd/httpd-2.4.23.tar.gz" target="_blank" rel="external">apache 源码包</a></p>
<p>下载、解压、将apr和apr-util分别复制到httpd-2.4.23/srclib/apr和httpd-2.4.23/srclib/apr-util中</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">[root@iZ94m2e99jtZ ~]# wget http://mirrors.hust.edu.cn/apache//apr/apr-1.5.2.tar.gz</div><div class="line">[root@iZ94m2e99jtZ ~]# wget  http://mirrors.hust.edu.cn/apache//apr/apr-util-1.5.4.tar.gz</div><div class="line">[root@iZ94m2e99jtZ ~]# wget http://mirrors.tuna.tsinghua.edu.cn/apache//httpd/httpd-2.4.23.tar.gz</div><div class="line"></div><div class="line">[root@iZ94m2e99jtZ ~]# tar -zxvf apr-1.5.2.tar.gz</div><div class="line">[root@iZ94m2e99jtZ ~]# tar -zxvf apr-util-1.5.4.tar.gz</div><div class="line">[root@iZ94m2e99jtZ ~]# tar -zxvf httpd-2.4.23.tar.gz</div><div class="line"></div><div class="line">[root@iZ94m2e99jtZ ~]# ll</div><div class="line">总用量 10088</div><div class="line">drwxr-xr-x 27 1000  1000    4096 4月  25 2015 apr-1.5.2</div><div class="line">-rw-r--r--  1 root root  1031613 4月  29 2015 apr-1.5.2.tar.gz</div><div class="line">drwxr-xr-x 19 1000  1000    4096 9月  17 2014 apr-util-1.5.4</div><div class="line">-rw-r--r--  1 root root   874044 9月  20 2014 apr-util-1.5.4.tar.gz</div><div class="line">drwxr-xr-x 11  501 games    4096 7月   1 01:15 httpd-2.4.23</div><div class="line">-rw-r--r--  1 root root  8406575 7月   5 03:50 httpd-2.4.23.tar.gz</div><div class="line">[root@iZ94m2e99jtZ ~]#</div><div class="line"></div><div class="line">[root@iZ94m2e99jtZ ~]# cp -r  apr-1.5.2 httpd-2.4.23/srclib/apr</div><div class="line">[root@iZ94m2e99jtZ ~]# cp -r  apr-util-1.5.4 httpd-2.4.23/srclib/apr-util</div></pre></td></tr></table></figure>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><h3 id="Configuring-the-source-tree"><a href="#Configuring-the-source-tree" class="headerlink" title="Configuring the source tree"></a>Configuring the source tree</h3><p>如果使用所有默认选项，只需键入的./configure即可，但一般我们根据自己的需求来修改一些配置。</p>
<p>其中最重要的选项应该是apache的安装位置的配置项 –prefix ；<br>此外，我们可以指定哪些功能被启用和禁用模块要包含在Apache中。apache配备了一个广泛的默认包含的模块。它们将被编译为可以装载或在运行时卸载共享对象（的DSO）。您也可以选择通过选项–enable-模块=静态编译静态模块。</p>
<p>额外的模块使用–enable模块选项，其中模块与除去mod_个串并转换为破折号任何下划线模块的名称启用。<br>同样，我们可以禁用与–disable模块选件模块。使用这些选项的时候，因为配置无法警告你，如果你指定的模块不存在要小心;它会简单地忽略选项。 此外，有时需要提供的配置脚本与你的编译器，库和头文件的位置额外信息。这是通过两种环境变量或命令行选项来配置完成。有关详细信息，请参考配置页面。或使用–help选项调用配置。</p>
<p><a href="http://httpd.apache.org/docs/2.4/programs/configure.html#installationdirectories" target="_blank" rel="external">Apache 官方配置说明</a></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div><div class="line">230</div><div class="line">231</div><div class="line">232</div><div class="line">233</div><div class="line">234</div><div class="line">235</div><div class="line">236</div><div class="line">237</div><div class="line">238</div><div class="line">239</div><div class="line">240</div><div class="line">241</div><div class="line">242</div><div class="line">243</div><div class="line">244</div><div class="line">245</div><div class="line">246</div><div class="line">247</div><div class="line">248</div><div class="line">249</div><div class="line">250</div><div class="line">251</div><div class="line">252</div><div class="line">253</div><div class="line">254</div><div class="line">255</div><div class="line">256</div><div class="line">257</div><div class="line">258</div><div class="line">259</div><div class="line">260</div><div class="line">261</div><div class="line">262</div><div class="line">263</div><div class="line">264</div><div class="line">265</div><div class="line">266</div><div class="line">267</div><div class="line">268</div></pre></td><td class="code"><pre><div class="line">概要</div><div class="line"></div><div class="line">你应该叫configure从分布的根目录中的脚本。</div><div class="line"></div><div class="line">./configure [OPTION]... [VAR=VALUE]...</div><div class="line"></div><div class="line">要指定环境变量（例如CC， CFLAGS......），它们指定为 。请参见下面 的一些有用的变量的说明。VAR=VALUE</div><div class="line"></div><div class="line">最佳</div><div class="line">选项</div><div class="line"></div><div class="line">配置选项</div><div class="line">安装目录</div><div class="line">系统类型</div><div class="line">可选功能</div><div class="line">支持程序的选项</div><div class="line">配置选项</div><div class="line">下列选项影响的行为 configure本身。</div><div class="line"></div><div class="line">-C</div><div class="line">--config-cache</div><div class="line">这是一个别名 --cache-file=config.cache</div><div class="line">--cache-file=FILE</div><div class="line">测试结果将在文件中缓存文件。此选项默认为禁用 ​​。</div><div class="line">-h</div><div class="line">--help [short|recursive]</div><div class="line">输出的帮助和退出。随着说法short只是具体 ​​到这个包的选项将显示出来。参数 recursive显示所有包含包的简短帮助。</div><div class="line">-n</div><div class="line">--no-create</div><div class="line">该configure脚本运行正常，但不创建输出文件。这是有用的生成makefile文件编译前检查测试结果。</div><div class="line">-q</div><div class="line">--quiet</div><div class="line">不打印checking ...在配置过程的消息。</div><div class="line">--srcdir=DIR</div><div class="line">定义目录DIR是源文件目录。默认为所在目录configure的位置，或父目录。</div><div class="line">--silent</div><div class="line">与...一样 --quiet</div><div class="line">-V</div><div class="line">- 版</div><div class="line">显示版权信息并退出。</div><div class="line">安装目录</div><div class="line">这些选项定义安装目录。安装树取决于所选的布局。</div><div class="line"></div><div class="line">--prefix=PREFIX</div><div class="line">在安装结构无关的文件PREFIX。默认安装目录设置为 /usr/local/apache2。</div><div class="line">--exec-prefix=EPREFIX</div><div class="line">在安装体系相关的文件EPREFIX。默认安装目录设置为 PREFIX目录。</div><div class="line">默认情况下，make install将安装所有文件 /usr/local/apache2/bin，/usr/local/apache2/lib 等等。您可以指定以外的安装前缀 /usr/local/apache2使用--prefix，例如--prefix=$HOME。</div><div class="line"></div><div class="line">定义一个目录布局</div><div class="line">--enable-layout=LAYOUT</div><div class="line">配置源代码和编译脚本的假设基础上的布局安装树布局。这使您可以分别指定为Apache HTTP服务器安装在每个类型的文件的位置。该config.layout 文件包含几个示例配置，你还可以创建下面的例子中你自己的自定义配置。该文件中的不同布局分为&lt;Layout FOO&gt;...&lt;/Layout&gt;部分，并通过名称简称为中FOO，默认布局Apache。</div><div class="line">安装目录微调</div><div class="line">为了更好地控制安装目录中，使用下面的选项。请注意，目录默认被设置 autoconf，并通过相应布局设置被覆盖。</div><div class="line"></div><div class="line">--bindir=DIR</div><div class="line">在用户安装可执行文件DIR。用户可执行文件都支持这样的程序htpasswd， dbmmanage等等。这对于网站管理员有用。默认情况下DIR设置为 EPREFIX/bin。</div><div class="line">--datadir=DIR</div><div class="line">在安装只读体系结构无关的数据DIR。默认datadir设置为 PREFIX/share。此选项是提供 autoconf与当前未使用。</div><div class="line">--includedir=DIR</div><div class="line">在安装C头文件DIR。默认 includedir设置为 EPREFIX/include。</div><div class="line">--infodir=DIR</div><div class="line">在安装info文档DIR。默认infodir设置为 PREFIX/info。此选项当前未使用。</div><div class="line">--libdir=DIR</div><div class="line">在安装目标代码库DIR。默认 libdir设置为 EPREFIX/lib。</div><div class="line">--libexecdir=DIR</div><div class="line">在安装程序的可执行文件（例如，共享模块） DIR。默认libexecdir设置为 EPREFIX/modules。</div><div class="line">--localstatedir=DIR</div><div class="line">在安装修改的单机数据DIR。默认localstatedir设置为 PREFIX/var。此选项是提供 autoconf与当前未使用。</div><div class="line">--mandir=DIR</div><div class="line">在安装该男子文档DIR。默认 mandir设置为 EPREFIX/man。</div><div class="line">--oldincludedir=DIR</div><div class="line">在非GCC安装C头文件DIR。默认oldincludedir设置为 /usr/include。此选项是提供 autoconf与当前未使用。</div><div class="line">--sbindir=DIR</div><div class="line">在系统中安装管理员可执行DIR。这些都是服务器程序，如httpd， apachectl，suexec等，这些都需要运行在Apache HTTP服务器。默认 sbindir设置为 EPREFIX/sbin。</div><div class="line">--sharedstatedir=DIR</div><div class="line">在安装修改的架构无关的数据DIR。默认sharedstatedir设置为 PREFIX/com。此选项是提供 autoconf与当前未使用。</div><div class="line">--sysconfdir=DIR</div><div class="line">安装只读的单机数据，如服务器配置文件httpd.conf，mime.types等在 DIR。默认sysconfdir设置为 PREFIX/conf。</div><div class="line">系统类型</div><div class="line">这些选项用于交叉编译Apache HTTP服务器到另一个系统上运行。在正常的情况下，建立和运行在同一系统上的服务器时，不使用这些选项。</div><div class="line"></div><div class="line">--build=BUILD</div><div class="line">定义系统类型上的工具正在建立该系统。它默认为脚本的结果 config.guess。</div><div class="line">--host=HOST</div><div class="line">定义系统类型的服务器将运行，系统的 HOST默认为BUILD。</div><div class="line">--target=TARGET</div><div class="line">配置构建编译器系统类型 目标。它默认为HOST。此选项被提供autoconf，而不是必要的Apache HTTP服务器。</div><div class="line">可选功能</div><div class="line">这些选项用于微调您的HTTP服务器将具备的功能。</div><div class="line"></div><div class="line">一般语法</div><div class="line">一般来说，你可以使用下面的语法来启用或禁用功能：</div><div class="line"></div><div class="line">--disable-FEATURE</div><div class="line">不包括特征。这是相同的 。--enable-FEATURE=no</div><div class="line">--enable-FEATURE[=ARG]</div><div class="line">包括特征。为默认值ARG 为yes。</div><div class="line">--enable-MODULE=shared</div><div class="line">相应的模块将被建设成为DSO模块。默认情况下启用的模块是动态链接的。</div><div class="line">--enable-MODULE=static</div><div class="line">相应的模块将被静态链接。</div><div class="line">注意</div><div class="line"></div><div class="line">configure不会抱怨 ，即使富不存在，所以你需要仔细类型。 --enable-foo</div><div class="line">选择模块编译</div><div class="line">大多数模块由默认编译并已被明确或通过使用关键字禁用few （见--enable-modules，--enable-mods-shared 并且--enable-mods-static下面进一步解释）或--enable-modules=none作为一组被删除。</div><div class="line"></div><div class="line">其它模块默认不编译并已被明确或通过使用关键字启用all或 reallyall可用。</div><div class="line"></div><div class="line">要了解哪些模块是默认编译，运行 ./configure -h或./configure --help 下看Optional Features。假设你有兴趣mod_example1和 mod_example2，你看这个：</div><div class="line"></div><div class="line">可选功能：</div><div class="line">  ...</div><div class="line">  --disable-例1示例模块1</div><div class="line">  --enable-例题例如模块2</div><div class="line">  ...</div><div class="line">然后mod_example1是默认启用的，你就可以使用--disable-example1不编译。 mod_example2默认情况下禁用，你就可以使用--enable-example2 编译它。</div><div class="line"></div><div class="line">多道处理模块</div><div class="line">多道处理模块，或的MPM，实现了服务器的基本行为。单个MPM必须为了使服务器的功能被激活。出现在可用MPM列表 模块索引页。</div><div class="line"></div><div class="line">的MPM可以建成为数字存储示波器的动态加载或静态与服务器相连，并使用下列选项被启用：</div><div class="line"></div><div class="line">--with-mpm=MPM</div><div class="line">选择适合您的服务器的默认MPM。如果MPM的构建为DSO模块（见--enable-mpms-shared），该指令选择将默认的配置文件中加载的MPM。否则，这个指令选择唯一可用的MPM，这将静态链接到服务器。</div><div class="line"></div><div class="line">如果省略此选项，默认的MPM为您的操作系统将被使用。</div><div class="line"></div><div class="line">--enable-mpms-shared=MPM-LIST</div><div class="line">使动态共享模块的MPM的列表。这些模块之一必须动态使用加载 LoadModule指令。</div><div class="line"></div><div class="line">MPM-LIST是加了引号的MPM名称的空格分隔的列表。例如：</div><div class="line"></div><div class="line">--enable-mpms-shared=&apos;prefork worker&apos;</div><div class="line">此外，您还可以使用特殊关键字all，这将选择支持在当前平台上动态加载所有的MPM和他们建立的DSO模块。例如：</div><div class="line"></div><div class="line">--enable-mpms-shared=all</div><div class="line">第三方模块</div><div class="line">要添加其他第三方模块使用下列选项：</div><div class="line"></div><div class="line">--with-module=module-type:module-file[, module-type:module-file]</div><div class="line">添加一个或多个第三方的模块，以静态链接模块列表。该模块的源文件module-file 将在搜索 你的Apache HTTP服务器的源代码树的子目录。如果没有找到有它正在考虑模块文件是一个绝对文件路径，并尝试将源文件复制到 模块式子目录。如果子目录不存在，它将被创建并与标准的填充 。modules/module-typeconfigureMakefile.in</div><div class="line"></div><div class="line">此选项很有用添加由一个源文件小的外部组件。对于更复杂的模块，你应该阅读供应商的文档。</div><div class="line"></div><div class="line">注意</div><div class="line"></div><div class="line">如果你想建立一个DSO模块，而不是一个静态链接使用apxs。</div><div class="line">累积和其他选项</div><div class="line">--enable-maintainer-mode</div><div class="line">打开调试和编译时警告，并加载所有编译的模块。</div><div class="line">--enable-mods-shared=MODULE-LIST</div><div class="line">定义启用并建立动态共享模块模块的列表。这意味着，这些模块必须通过使用动态加载 LoadModule指令。</div><div class="line"></div><div class="line">MODULE-LIST是加了引号的modulenames空格分隔列表。该模块名称没有给出前面mod_。例如：</div><div class="line"></div><div class="line">--enable-mods-shared=&apos;headers rewrite dav&apos;</div><div class="line">此外，您还可以使用特殊的关键字reallyall， all，most和few。例如，</div><div class="line"></div><div class="line">--enable-mods-shared=most</div><div class="line">将编译大多数模块，并将其建设成为DSO模块，</div><div class="line"></div><div class="line">--enable-mods-shared=few</div><div class="line">将只编译一个非常基本的模块组。</div><div class="line"></div><div class="line">默认设置为most。</div><div class="line"></div><div class="line">在LoadModule对所选择的模块的指令将在主配置文件中自动生成。默认情况下，所有的指令都只是由一个配置要求或明确选择的模块被注释掉--enable-foo的说法。您可以更改设置启用或关闭加载的模块LoadModule的指令 httpd.conf。此外， LoadModule所有构建的模块的指令可通过配置选项被激活 --enable-load-all-modules。</div><div class="line"></div><div class="line">--enable-mods-static=MODULE-LIST</div><div class="line">此选项的行为类似--enable-mods-shared，但在给定的模块静态链接。这意味着，这些模块将始终存在，同时运行httpd。他们不必被加载LoadModule。</div><div class="line">--enable-modules=MODULE-LIST</div><div class="line">此选项的行为等来--enable-mods-shared，并且还将动态地链接的给定模块。特殊关键字none禁用所有模块的版本。</div><div class="line">--enable-v4-mapped</div><div class="line">允许IPv6的套接字来处理IPv4连接。</div><div class="line">--with-port=PORT</div><div class="line">这定义上的端口httpd会听。生成配置文件时，该端口号用于 httpd.conf。默认值是80。</div><div class="line">--with-program-name</div><div class="line">定义一个替代的可执行文件名 ​​称。默认值是 httpd。</div><div class="line">可选包</div><div class="line">这些选项用于定义可选包。</div><div class="line"></div><div class="line">一般语法</div><div class="line">一般来说，你可以使用下面的语法定义一个可选包：</div><div class="line"></div><div class="line">--with-PACKAGE[=ARG]</div><div class="line">使用包PACKAGE。为默认值 ARG为yes。</div><div class="line">--without-PACKAGE</div><div class="line">不要使用包PACKAGE。这是相同的 。此选项所提供 ，但对于Apache HTTP服务器不是非常有用。--with-PACKAGE=noautoconf</div><div class="line">特定软件包</div><div class="line">--with-apr=DIR|FILE</div><div class="line">在Apache可移植运行时（APR）是httpd的源代码分发的一部分，将自动与HTTP服务器共同建立。如果您想使用已安装的年利率，而不是你要告诉configure路径的 apr-config脚本。你可以设置绝对路径和名称或目录切换到安装四月apr-config必须在该目录或子目录中存在 bin。</div><div class="line">--with-apr-util=DIR|FILE</div><div class="line">Apache可移植运行实用程序（APU）是httpd的源代码分发的一部分，将自动与HTTP服务器共同建立。如果您想使用已安装的APU，而不是你要告诉configure路径的 apu-config脚本。你可以设置绝对路径和名称或目录切换到安装APU，apu-config必须在该目录或子目录中存在 bin。</div><div class="line">--with-ssl=DIR</div><div class="line">如果mod_ssl已启用configure 已安装的OpenSSL的搜索。您可以将目录路径设置为SSL / TLS工具包来代替。</div><div class="line">--with-z=DIR</div><div class="line">configure已安装的自动搜索 zlib，如果你的源配置需要一个库（例如，当mod_deflate使能）。您可以设置压缩库的目录路径来代替。</div><div class="line">Apache HTTP服务器的一些特性，如 mod_authn_dbm和mod_rewrite的DBM RewriteMap使用简单的键/值对数据库信息的快速查询。SDBM被包括在APU，所以这个数据库是始终可用。如果您想使用其他数据库类型，可以使用下面的选项，以使它们：</div><div class="line"></div><div class="line">--with-gdbm[=path]</div><div class="line">如果没有路径指定，configure将搜索在平时的搜索路径GNU DBM安装的包含文件和库。一个明确的 路径会导致configure在寻找 path/lib，并 path/include为相关的文件。最后，路径可以指定用冒号隔开具体包括和库路径。</div><div class="line">--with-ndbm[=path]</div><div class="line">像--with-gdbm，但搜索新DBM安装。</div><div class="line">--with-berkeley-db[=path]</div><div class="line">像--with-gdbm，但搜索一个Berkeley DB的安装。</div><div class="line">注意</div><div class="line"></div><div class="line">由APU提供，并通过其配置脚本传递的DBM选项。他们利用确定已安装的APU时是无用的--with-apr-util。</div><div class="line">您可以使用自己的HTTP服务器一起使用一个以上的DBM实现。该拨款DBM类型将每次运行时配置中配置。</div><div class="line">支持程序的选项</div><div class="line">--enable-static-support</div><div class="line">构建支持二进制文件的静态链接的版本。这意味着，一个独立的可执行文件将集成所有必要的库来构建。否则，支持二进制文件默认情况下，动态链接。</div><div class="line">--enable-suexec</div><div class="line">使用此选项可启用suexec，它允许您设置UID和GID的催生过程。除非你了解你的服务器上运行的SUID二进制的所有安全隐患，请勿使用此选项。更多选项来配置suexec介绍如下。</div><div class="line">这可以通过使用下列选项来创建一个单一的支持程序的静态链接二进制文件：</div><div class="line"></div><div class="line">--enable-static-ab</div><div class="line">建立一个静态链接的版本ab。</div><div class="line">--enable-static-checkgid</div><div class="line">建立一个静态链接的版本checkgid。</div><div class="line">--enable-static-htdbm</div><div class="line">建立一个静态链接的版本htdbm。</div><div class="line">--enable-static-htdigest</div><div class="line">建立一个静态链接的版本htdigest。</div><div class="line">--enable-static-htpasswd</div><div class="line">建立一个静态链接的版本htpasswd。</div><div class="line">--enable-static-logresolve</div><div class="line">建立一个静态链接的版本logresolve。</div><div class="line">--enable-static-rotatelogs</div><div class="line">建立一个静态链接的版本rotatelogs。</div><div class="line">suexec 配置选项</div><div class="line">下列选项用于微调的行为suexec。参见配置和安装suEXEC的 进一步的信息。</div><div class="line"></div><div class="line">--with-suexec-bin</div><div class="line">这定义的路径suexec二进制文件。默认值是--sbindir（见安装目录微调）。</div><div class="line">--with-suexec-caller</div><div class="line">这定义允许呼叫的用户suexec。它应该是相同下，用户 httpd正常运行。</div><div class="line">--with-suexec-docroot</div><div class="line">这个定义下的目录树suexec允许访问的可执行文件。默认值是 --datadir/htdocs。</div><div class="line">--with-suexec-gidmin</div><div class="line">这个定义的最低GID成为目标用户 suexec。默认值是100。</div><div class="line">--with-suexec-logfile</div><div class="line">这个定义的文件名suexec​​日志文件。默认情况下，日志文件被命名为suexec_log，位于 --logfiledir。</div><div class="line">--with-suexec-safepath</div><div class="line">定义环境变量的值PATH由启动的进 ​​程进行设置suexec。默认值是/usr/local/bin:/usr/bin:/bin。</div><div class="line">--with-suexec-userdir</div><div class="line">此定义包含所有可执行文件的用户目录下的子目录suexec的访问是允许的。当你想使用此设置时必须 suexec使用特定用户目录在一起（如所提供的mod_userdir）。默认值是 public_html。</div><div class="line">--with-suexec-uidmin</div><div class="line">它定义为最低的UID允许为目标用户 suexec。默认值是100。</div><div class="line">--with-suexec-umask</div><div class="line">设置umask由启动的进 ​​程 suexec。它默认为您的系统设置。</div><div class="line">最佳</div><div class="line">环境变量</div><div class="line"></div><div class="line">有一些有用的环境变量覆盖所作出的选择 configure，或帮助它找到库和程序与非标准名称或位置。</div><div class="line"></div><div class="line">CC</div><div class="line">定义要用于编译的C编译器的命令。</div><div class="line">CFLAGS</div><div class="line">要使用编译设置C编译器的标志。</div><div class="line">CPP</div><div class="line">定义C预处理命令使用。</div><div class="line">CPPFLAGS</div><div class="line">将C / C ++预处理器的标志，例如 ，如果你在一个非标准目录头了includedir。-Iincludedir</div><div class="line">LDFLAGS</div><div class="line">设置连接器选项，例如，如果你在一个非标准目录库LIBDIR。-Llibdir</div></pre></td></tr></table></figure>
<p><strong><em>示例：</em></strong><br>这里是一个典型的例子编译Apache，安装树/ SW /包装/与特定的编译器和标志，加上两个额外的模块阿帕奇mod_ldap模块和mod_lua</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ CC=&quot;pgcc&quot; CFLAGS=&quot;-O2&quot; \</div><div class="line">./configure --prefix=/sw/pkg/apache \</div><div class="line">--enable-ldap=shared \</div><div class="line">--enable-lua=shared</div></pre></td></tr></table></figure>
<p>我们本次采用基本的默认设置 来进行安装<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[root@iZ94m2e99jtZ ~]# cd httpd-2.4.23</div><div class="line">[root@iZ94m2e99jtZ httpd-2.4.23]# ./configure  --with-included-apr</div></pre></td></tr></table></figure></p>
<h3 id="Build"><a href="#Build" class="headerlink" title="Build"></a>Build</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[root@iZ94m2e99jtZ httpd-2.4.23]# make</div></pre></td></tr></table></figure>
<h3 id="Install"><a href="#Install" class="headerlink" title="Install"></a>Install</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">[root@iZ94m2e99jtZ httpd-2.4.23]# make install</div><div class="line">···</div><div class="line">Installing configuration files</div><div class="line">mkdir /usr/local/apache2/conf</div><div class="line">mkdir /usr/local/apache2/conf/extra</div><div class="line">mkdir /usr/local/apache2/conf/original</div><div class="line">mkdir /usr/local/apache2/conf/original/extra</div><div class="line">Installing HTML documents</div><div class="line">mkdir /usr/local/apache2/htdocs</div><div class="line">Installing error documents</div><div class="line">mkdir /usr/local/apache2/error</div><div class="line">Installing icons</div><div class="line">mkdir /usr/local/apache2/icons</div><div class="line">mkdir /usr/local/apache2/logs</div><div class="line">Installing CGIs</div><div class="line">mkdir /usr/local/apache2/cgi-bin</div><div class="line">Installing header files</div><div class="line">Installing build system files</div><div class="line">Installing man pages and online manual</div><div class="line">mkdir /usr/local/apache2/man</div><div class="line">mkdir /usr/local/apache2/man/man1</div><div class="line">mkdir /usr/local/apache2/man/man8</div><div class="line">mkdir /usr/local/apache2/manual</div></pre></td></tr></table></figure>
<h3 id="Customize（定制）"><a href="#Customize（定制）" class="headerlink" title="Customize（定制）"></a>Customize（定制）</h3><p>接下来，我们可以通过在 /usr/local/apache2/conf 目录，编辑配置文件来自定义我们的Apache HTTP服务器。</p>
<p><a href="http://httpd.apache.org/docs/2.4/zh-cn/mod/directives.html" target="_blank" rel="external">配置指令快速参考索引</a></p>
<h3 id="Testinh-测试"><a href="#Testinh-测试" class="headerlink" title="Testinh(测试)"></a>Testinh(测试)</h3><p>启动Apache服务器<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">[root@iZ94m2e99jtZ httpd-2.4.23]# /usr/local/apache2/bin/apachectl -k start</div><div class="line"></div><div class="line">[root@iZ94m2e99jtZ httpd-2.4.23]# ps aux | grep httpd</div><div class="line">root     15386  0.0  0.2  70556  2188 ?        Ss   11:53   0:00 /usr/local/apache2/bin/httpd -k start</div><div class="line">daemon   15387  0.0  0.4 359520  4260 ?        Sl   11:53   0:00 /usr/local/apache2/bin/httpd -k start</div><div class="line">daemon   15388  0.0  0.4 359520  4260 ?        Sl   11:53   0:00 /usr/local/apache2/bin/httpd -k start</div><div class="line">daemon   15389  0.0  0.4 359520  4256 ?        Sl   11:53   0:00 /usr/local/apache2/bin/httpd -k start</div><div class="line">root     15472  0.0  0.0 112664   972 pts/0    S+   11:53   0:00 grep --color=auto httpd</div></pre></td></tr></table></figure></p>
<p>浏览器访问：<a href="http://IP地址" target="_blank" rel="external">http://IP地址</a></p>
<p>当出现『It works!』字样说明我们已经安装成功</p>
<p><strong><em>注意</em></strong> 如果通过浏览器访问不到，可能是请求服务器防火墙给拦截了，所以我们需要在防火墙里将我们用到的80端口给放行。<br>我以我当前Centos7 的系统为例，Centos7现在默认的防火墙是firewalld，Centos6以及6以前的版本则使用的是iptables，所以具体设置方法还请自己去搜索。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">[root@iZ94m2e99jtZ ~]# firewall-cmd  --permanent --zone=public --add-port=80/tcp  #将80端口开放</div><div class="line">success</div><div class="line">[root@iZ94m2e99jtZ ~]# firewall-cmd  --reload #重新加载防火墙配置</div><div class="line">success</div></pre></td></tr></table></figure></p>
<h2 id="日常管理"><a href="#日常管理" class="headerlink" title="日常管理"></a>日常管理</h2><p>一般常见的管理方式有两种</p>
<ul>
<li>直接通过httpd命令来管理</li>
<li>通过apachectl来管理<br><strong><em>Tips</em></strong> apachetl其实一个是对httpd命令进行了封装sh脚本</li>
</ul>
<h3 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">#通过apachectl来管理</div><div class="line">[root@iZ94m2e99jtZ ~]# /usr/local/apache2/bin/apachectl -k start  #启动</div><div class="line">[root@iZ94m2e99jtZ ~]# /usr/local/apache2/bin/apachectl -k restart  #重启</div><div class="line">[root@iZ94m2e99jtZ ~]# /usr/local/apache2/bin/apachectl -k stop  #停止</div><div class="line"></div><div class="line">#直接通过httpd命令来管理</div><div class="line">[root@iZ94m2e99jtZ ~]# /usr/local/apache2/bin/httpd -k start|restart|graceful|graceful-stop|stop</div></pre></td></tr></table></figure>
<h3 id="具体参数"><a href="#具体参数" class="headerlink" title="具体参数"></a>具体参数</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">Usage: /usr/local/apache2/bin/httpd [-D name] [-d directory] [-f file]</div><div class="line">                                    [-C &quot;directive&quot;] [-c &quot;directive&quot;]</div><div class="line">                                    [-k start|restart|graceful|graceful-stop|stop]</div><div class="line">                                    [-v] [-V] [-h] [-l] [-L] [-t] [-T] [-S] [-X]</div><div class="line">Options:</div><div class="line">  -D name            : define a name for use in &lt;IfDefine name&gt; directives</div><div class="line">  -d directory       : specify an alternate initial ServerRoot</div><div class="line">  -f file            : specify an alternate ServerConfigFile</div><div class="line">  -C &quot;directive&quot;     : process directive before reading config files</div><div class="line">  -c &quot;directive&quot;     : process directive after reading config files</div><div class="line">  -e level           : show startup errors of level (see LogLevel)</div><div class="line">  -E file            : log startup errors to file</div><div class="line">  -v                 : show version number</div><div class="line">  -V                 : show compile settings</div><div class="line">  -h                 : list available command line options (this page)</div><div class="line">  -l                 : list compiled in modules</div><div class="line">  -L                 : list available configuration directives</div><div class="line">  -t -D DUMP_VHOSTS  : show parsed vhost settings</div><div class="line">  -t -D DUMP_RUN_CFG : show parsed run settings</div><div class="line">  -S                 : a synonym for -t -D DUMP_VHOSTS -D DUMP_RUN_CFG</div><div class="line">  -t -D DUMP_MODULES : show all loaded modules</div><div class="line">  -M                 : a synonym for -t -D DUMP_MODULES</div><div class="line">  -t -D DUMP_INCLUDES: show all included configuration files</div><div class="line">  -t                 : run syntax check for config files</div><div class="line">  -T                 : start without DocumentRoot(s) check</div><div class="line">  -X                 : debug mode (only one worker, do not detach)</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Apache是世界使用排名第一的Web服务器软件。它可以运行在几乎所有广泛使用的计算机平台上，由于其跨平台和安全性被广泛使用，是最流行的Web服务器端软件之一。&lt;br&gt;Apache的安装无外乎两种方式：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;二进制包安装&lt;/li&gt;
&lt;li&gt;源码包安装&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="Apache" scheme="https://weizhimiao.github.io/categories/Apache/"/>
    
    
      <category term="Web服务器" scheme="https://weizhimiao.github.io/tags/Web%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
      <category term="Apache" scheme="https://weizhimiao.github.io/tags/Apache/"/>
    
  </entry>
  
  <entry>
    <title>Web性能优化随笔</title>
    <link href="https://weizhimiao.github.io/2016/07/31/Web%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E9%9A%8F%E7%AC%94/"/>
    <id>https://weizhimiao.github.io/2016/07/31/Web性能优化随笔/</id>
    <published>2016-07-31T06:22:23.000Z</published>
    <updated>2016-08-24T03:16:22.000Z</updated>
    
    <content type="html"><![CDATA[<p>谈到web性能优化，一般我们可以把它分为两个部分来讲，页面加载（Page Speed）和页面渲染（Page Performance）。</p>
<a id="more"></a>
<h1 id="页面加载"><a href="#页面加载" class="headerlink" title="页面加载"></a>页面加载</h1><h2 id="加快服务器脚本的计算速度"><a href="#加快服务器脚本的计算速度" class="headerlink" title="加快服务器脚本的计算速度"></a>加快服务器脚本的计算速度</h2><ul>
<li>动态内容缓存</li>
<li>数据缓存</li>
<li>动态内容静态化</li>
<li>选择适合的web服务器软件（Apache、nginx等）</li>
<li>数据库优化</li>
<li>等等···</li>
</ul>
<h2 id="压缩源码和图片"><a href="#压缩源码和图片" class="headerlink" title="压缩源码和图片"></a>压缩源码和图片</h2><ul>
<li>Js 混淆压缩</li>
<li>CSS 普通压缩</li>
<li>JPG 根据具体质量压缩到50%~70%</li>
<li>PNG 色彩压缩、去除一些格式信息等</li>
</ul>
<h2 id="选择合适的图片"><a href="#选择合适的图片" class="headerlink" title="选择合适的图片"></a>选择合适的图片</h2><ul>
<li>颜色较多，则使用JPG格式</li>
<li>颜色较少，则使用PNG格式</li>
<li>尽量使用WebP、SVG</li>
</ul>
<blockquote>
<p>总之就是，尽量减少每一个资源的体积</p>
</blockquote>
<h2 id="合并静态资源"><a href="#合并静态资源" class="headerlink" title="合并静态资源"></a>合并静态资源</h2><p>合并CSS、Javascript和小图片</p>
<blockquote>
<p>尽量减少同一域下的HTTP请求数</p>
</blockquote>
<h2 id="开启服务器短的Gzip压缩"><a href="#开启服务器短的Gzip压缩" class="headerlink" title="开启服务器短的Gzip压缩"></a>开启服务器短的Gzip压缩</h2><p>Gzip开启以后会将输出到用户浏览器的数据进行压缩的处理，这样就会减小通过网络传输的数据量，提高浏览的速度。所以Gzip对文本资源非常有效。</p>
<h2 id="使用CDN"><a href="#使用CDN" class="headerlink" title="使用CDN"></a>使用CDN</h2><p>一些公用的静态资源（比如jquery、angular、bootstrap等）。使用这些公用的静态资源一方面可以增加页面文件并发下载量，另一方面还能和其他网站共享这些缓存。</p>
<h2 id="尽可能缓存静态资源"><a href="#尽可能缓存静态资源" class="headerlink" title="尽可能缓存静态资源"></a>尽可能缓存静态资源</h2><p>尽可能延长静态资源的缓存时间，不但能使频繁访问网站的用户更快的访问，还能减轻服务器压力。至于静态资源的更新，则可以结合<code>修改文件名和+版本号</code>的方式来确保资源更新时，用户会加载到新的内容。</p>
<h2 id="尽可能将CSS文件放在页面头部，JavaScript放在页面底部"><a href="#尽可能将CSS文件放在页面头部，JavaScript放在页面底部" class="headerlink" title="尽可能将CSS文件放在页面头部，JavaScript放在页面底部"></a>尽可能将CSS文件放在页面头部，JavaScript放在页面底部</h2><p>应为javascript在加载的时候会出现阻塞，所以为避免出现阻塞页面渲染，让页面页面出现长时间空白，尽量将Javascript文件放在页面底部。</p>
<h1 id="页面渲染"><a href="#页面渲染" class="headerlink" title="页面渲染"></a>页面渲染</h1><h2 id="关键渲染路径"><a href="#关键渲染路径" class="headerlink" title="关键渲染路径"></a>关键渲染路径</h2><p><img src="https://sfault-image.b0.upaiyun.com/315/063/3150630289-5766c21f45ef4_articlex" alt="CRP"></p>
<blockquote>
<p>上图是浏览器渲染的关键路径，首先，让我们从浏览器解析一个页面开始吧。</p>
</blockquote>
<ul>
<li><strong><em>转化</em></strong>： 浏览器从磁盘或网络读取 HTML 的原始字节，浏览器会将这段原始文件按照相应编码规范进行解码（现在一般为 utf-8）。</li>
<li><strong><em>符号化</em></strong>： 根据 W3C 标准转化为对应的符号（一般在尖括号内）。</li>
<li><strong><em>DOM 构建</em></strong>：HTML 解析器会解析其中的 tag 标签，生成 token ，遇到 CSS 或 JS 会发送相应请求。HTML 解析时阻塞主进程的，CSS 一般也是阻塞主进程的（媒体查询时例外），也就是说它们在解析过程中是无法做出响应的。而 JS 手动添加 async 后达到异步加载，根据 token 生成相应 DOM 树。</li>
<li><strong><em>CSSDOM 构建</em></strong>：添加 CSS 样式生成 CSSDOM 树。</li>
<li><strong><em>渲染树构建</em></strong>：从 DOM 树的根节点开始，遍历每个可见的节点，给每个可见节点找到相应匹配的 CSSOM 规则，并应用这些规则，连带其内容及计算的样式。</li>
<li><strong><em>样式计算</em></strong>：浏览器会将所有的相对位置转换成绝对位置等一系列的样式计算。</li>
<li><strong><em>布局</em></strong>：浏览器将元素进行定位、布局。</li>
<li><strong><em>绘制</em></strong>：绘制元素样式，颜色、背景、大小、边框等。</li>
<li><strong><em>合成</em></strong>：将各层合成到一起、显示在屏幕上。</li>
</ul>
<p><img src="https://sfault-image.b0.upaiyun.com/951/893/951893846-5766c220cc68c_articlex" alt=""></p>
<p>如果我们是做一个动画，一般会用 JS 更改相应样式，接着浏览器就会经历 JS 运行、样式计算、布局、绘制、合成等多个重要步骤（后面还会讲到这个步骤实际过程中可以更长或者更短）。那么要做的优化就是在这几个步骤中进行优化并且尽量去掉中间的耗时步骤。<br><img src="https://sfault-image.b0.upaiyun.com/396/985/3969857354-5766c2228ceed_articlex" alt=""></p>
<h3 id="优化JavaScript的执行"><a href="#优化JavaScript的执行" class="headerlink" title="优化JavaScript的执行"></a>优化JavaScript的执行</h3><ul>
<li>函数的输入事件处理</li>
<li>优化处理</li>
</ul>
<h3 id="样式计算"><a href="#样式计算" class="headerlink" title="样式计算"></a>样式计算</h3><ul>
<li>减小选择器的复杂性</li>
<li>减少样式的计算量</li>
</ul>
<h3 id="布局"><a href="#布局" class="headerlink" title="布局"></a>布局</h3><ul>
<li>避免触发布局</li>
<li>使用Flexbox布局</li>
<li>避免强制同步布局事件</li>
<li>避免快速连续的布局</li>
</ul>
<h3 id="绘制"><a href="#绘制" class="headerlink" title="绘制"></a>绘制</h3><ul>
<li>提升移动或渐变元素的绘制层</li>
<li>仔细规划动画和简化绘制的复杂度</li>
</ul>
<h3 id="合成"><a href="#合成" class="headerlink" title="合成"></a>合成</h3><ul>
<li>使用transform/opacity实现动画效果</li>
<li>管理渲染层、避免过多数量的层</li>
</ul>
<h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><ul>
<li>关注趋势，今天很多的性能瓶颈很可能在将来都不再是问题。</li>
<li>充分利用工具 Chrome DevTools。</li>
<li>不要进行微优化，有时花上很短的带来的性能提升却很小，对于日常快速迭代的业务是没必要这样做的。</li>
</ul>
<p><a href="https://segmentfault.com/a/1190000005754881" target="_blank" rel="external">更多详细关于页面渲染的内容，请查看</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;谈到web性能优化，一般我们可以把它分为两个部分来讲，页面加载（Page Speed）和页面渲染（Page Performance）。&lt;/p&gt;
    
    </summary>
    
      <category term="Web" scheme="https://weizhimiao.github.io/categories/Web/"/>
    
    
      <category term="Web" scheme="https://weizhimiao.github.io/tags/Web/"/>
    
      <category term="性能优化" scheme="https://weizhimiao.github.io/tags/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
    
  </entry>
  
</feed>
