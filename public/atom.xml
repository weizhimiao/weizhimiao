<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>行云流水</title>
  <subtitle>却也碎碎念念</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://weizhimiao.github.io/"/>
  <updated>2016-10-13T09:25:46.000Z</updated>
  <id>https://weizhimiao.github.io/</id>
  
  <author>
    <name>zhimiao</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>大话MySQL性能优化</title>
    <link href="https://weizhimiao.github.io/2016/10/13/%E5%A4%A7%E8%AF%9DMySQL%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
    <id>https://weizhimiao.github.io/2016/10/13/大话MySQL性能优化/</id>
    <published>2016-10-13T10:30:00.000Z</published>
    <updated>2016-10-13T09:25:46.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://n.sinaimg.cn/games/3ece443e/20161013/MySQLXingNenDiaoYou.jpg" alt="MYSQL性能优化"></p>
<p>性能是MySQL一直引以为豪的一点。在性能和功能两个方面，MySQL第一考虑的还是性能。</p>
<a id="more"></a>
<h2 id="影响MySQL性能的相关因素"><a href="#影响MySQL性能的相关因素" class="headerlink" title="影响MySQL性能的相关因素"></a>影响MySQL性能的相关因素</h2><h3 id="商业需求对性能的影响"><a href="#商业需求对性能的影响" class="headerlink" title="商业需求对性能的影响"></a>商业需求对性能的影响</h3><p>对于某一些功能在整个系统中是画蛇添足的，那么这些需求就可能会影响系统性能。比如，一个论坛要求对在线人数进行实时统计。</p>
<h3 id="系统架构及实现对性能的影响"><a href="#系统架构及实现对性能的影响" class="headerlink" title="系统架构及实现对性能的影响"></a>系统架构及实现对性能的影响</h3><p>服务器调优</p>
<p>应用程序调优</p>
<ul>
<li>不可是存储到数据库的数据<ul>
<li>二进制多媒体数据</li>
<li>流水队列数据</li>
<li>超大文本数据</li>
</ul>
</li>
<li>合理的利用应用层Cache（适合Cache的数据有：）<ul>
<li>系统的各种配置和规则数据</li>
<li>活跃用户的基本信息数据</li>
<li>活跃用户的个性化定制信息数据</li>
<li>准实时的统计信息</li>
<li>其他一些访问频繁但变更很少的数据</li>
</ul>
</li>
<li>数据层实现精简</li>
<li>过度依赖数据库SQL语句功能</li>
<li>常见的架构设计不当带来的性能问题和资源浪费<ul>
<li>Cache系统设计不合理，导致Cache命中率低下</li>
<li>过度依赖面向对象</li>
<li>对可扩展性的过度追求（促使系统设计的时候对象拆分的过于分散，造成系统中出现大量的join语句）</li>
<li>对数据库的过于依赖（将不适合存储在数据库中的数据存储在数据库中）</li>
<li>过度理想化系统的用户体验（使大量非核心业务消耗大量系统资源）</li>
</ul>
</li>
</ul>
<h3 id="Query语句对性能的影响"><a href="#Query语句对性能的影响" class="headerlink" title="Query语句对性能的影响"></a>Query语句对性能的影响</h3><h4 id="分析手段"><a href="#分析手段" class="headerlink" title="分析手段"></a>分析手段</h4><ul>
<li><p>explain</p>
<blockquote>
<p>分析选项：</p>
<ul>
<li>索引（key），query语句中是用到的索引</li>
<li>row中的rows，查找的记录数</li>
</ul>
</blockquote>
</li>
<li><p>profiling</p>
<blockquote>
<p>先打开profiling；set profiling=1；</p>
<p>查看profiling信息：show profiling \G;</p>
<p>show profile CPU,BLOCK IO FOR query 1(2);</p>
<p>分析选项</p>
<ul>
<li>CPU IO消耗</li>
</ul>
</blockquote>
</li>
</ul>
<h4 id="MySQL的锁机制"><a href="#MySQL的锁机制" class="headerlink" title="MySQL的锁机制"></a>MySQL的锁机制</h4><blockquote>
<p><strong>锁机制的目的：</strong> 保证数据的一致完整性</p>
<p><strong>锁机制的影响：</strong> 直接影响一个数据库系统的并发处理能力和性能</p>
</blockquote>
<ul>
<li><p>行级锁（row-level）</p>
<blockquote>
<p><strong>优点：</strong> 锁定对象的粒度最小，发生锁定资源争用的概率就最小，能给予最大可能的并发处理能力。</p>
<p><strong>缺点：</strong> 由于粒度最小，所以每次获得锁和释放锁需要做的工作也最多。带来的消耗也就最大。另外，容易发生死锁。</p>
</blockquote>
</li>
<li><p>表级锁（table-level）</p>
<blockquote>
<p><strong>优点：</strong> 最大粒度的锁定机制。所以逻辑简单，实现也较为容易。获得锁和释放锁的速度也很快。而且能很好的避免死锁问题。</p>
<p><strong>缺点：</strong> 出现锁定资源争用的概率会提高，导致并发处理能力大打折扣。</p>
</blockquote>
</li>
<li><p>页级锁（page-level）</p>
<blockquote>
<p>介于row-level和table-level二者之间。</p>
</blockquote>
</li>
</ul>
<h4 id="合理的应用锁机制"><a href="#合理的应用锁机制" class="headerlink" title="合理的应用锁机制"></a>合理的应用锁机制</h4><p>MyISAM表锁优化</p>
<blockquote>
<p>关键：提高并发度</p>
</blockquote>
<ul>
<li>缩短锁定时间，即query的执行时间要尽可能的短<ul>
<li>尽量减少大的、复杂的query，将复杂的query拆分</li>
<li>尽可能的建立高效索引，使数据的检索更加迅速</li>
<li>尽量让MySQL的表只存放必要的信息，控制字段类型</li>
</ul>
</li>
<li>分离能并行的操作<ul>
<li>关键：Concurrent insert（并发插入特性）</li>
<li>打开 Concurrent_insert功能，选项有0，1和2。具体说明如下：</li>
<li>concurrent_insert=2,无论MyISAM表数据文件中间部分是否存在因删除而留下的空闲空间，都允许在尾部进行concurrent insert操作。</li>
<li>concurrent_insert=1,当MyISAM表数据文件中间部分不存在因删除而留下的空闲空间，可以在尾部进行concurrent insert操作。</li>
<li>concurrent_insert=0,无论MyISAM表数据文件中间部分是否存在因删除而留下的空闲空间，都不允许在尾部进行concurrent insert操作。</li>
<li>建议：如果数据删除的肯呢个性很小，则建议将concurrent_insert设置成1，如不在乎浪费少量空间设置成2也可以。但当有少量删除时，设置成1更合适。</li>
</ul>
</li>
<li>读写优先级设置<ul>
<li>默认，写的优先级大于读的优先级</li>
<li>参数选项，low_priority_updates=1(将写的优先级调低)</li>
</ul>
</li>
</ul>
<p>InnoDB行锁优化</p>
<ul>
<li>尽可能让所有的数据检索都通过索引来完成，避免InnoDB因为无法通过索引键加锁升级成为表级锁定</li>
<li>合理设计索引，让InnoDB加锁是尽可能准确，尽可能缩小锁定范围</li>
<li>尽可能的减少基于范围的数据检索过滤条件</li>
<li>尽量控制事务的大小，尽量减少锁定的资源量和锁定的时间长度</li>
<li>尽量使用级别低的事务隔离级别，减少MySQL因为事务隔离带来的附加成本</li>
<li>尽可能减少死锁产生的概率<ul>
<li>类似业务模块中，尽可能用相同的访问顺序来访问，防止产生死锁</li>
<li>同一事务中，尽可能一次锁定所有需要的资源</li>
<li>对于非常容易产生死锁的业务部分，可以尝试升级锁定粒度，通过表级锁定减少死锁产生的概率</li>
</ul>
</li>
<li><p>系统锁定争用情况的查询</p>
<ul>
<li><p>标记锁定争用状态变量</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">mysql&gt; show status like &apos;table%&apos;</div><div class="line">variable_name value</div><div class="line">table_lock_immediate 100  //产生标记锁定次数</div><div class="line">table_lock_waited 0       //出现标记锁定争用出现的等待的次数</div></pre></td></tr></table></figure>
</li>
<li><p>行级锁定争用状态变量</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">mysql&gt; show status like &apos;innodb_row_lock%&apos;</div><div class="line">innodb_row_lock_current_waits 0   //当前正在等待锁定的数量</div><div class="line">innodb_row_lock_time 3999999      //从系统启动到现在锁定的总时间长度</div><div class="line">innodb_row_lock_time_avg 36666    //每次等待所花费平均时间</div><div class="line">innodb_row_lock_time_max 122222   //从启动到现在等待最长一次所花时间长度</div><div class="line">innodb_row_lock_waits 20          //从启动到现在共等待的次数</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
<h2 id="垂直和水平联合切分的使用"><a href="#垂直和水平联合切分的使用" class="headerlink" title="垂直和水平联合切分的使用"></a>垂直和水平联合切分的使用</h2><p>优点：</p>
<ul>
<li>充分利用垂直切分和水平切分各自的优势，而避免各自的缺陷</li>
<li>让系统扩展性得到最大提升</li>
</ul>
<p>缺点：</p>
<ul>
<li>数据库系统架构比较复杂，使维护难度更大</li>
<li>应用程序架构也相对更复杂</li>
</ul>
<h2 id="合理的设计并利用索引"><a href="#合理的设计并利用索引" class="headerlink" title="合理的设计并利用索引"></a>合理的设计并利用索引</h2><h3 id="MySQL常用的四种索引类型"><a href="#MySQL常用的四种索引类型" class="headerlink" title="MySQL常用的四种索引类型"></a>MySQL常用的四种索引类型</h3><ul>
<li>B-tree索引</li>
<li>Hash索引</li>
<li>Fulltext索引</li>
<li>Rtree索引</li>
</ul>
<h3 id="索引的弊端"><a href="#索引的弊端" class="headerlink" title="索引的弊端"></a>索引的弊端</h3><ul>
<li>增加了更新所带来的IO量，和调整索引导致的计算量</li>
<li>占用存储空间，并会跟数据量的增加而增加</li>
</ul>
<h3 id="如何判断是否需要索引"><a href="#如何判断是否需要索引" class="headerlink" title="如何判断是否需要索引"></a>如何判断是否需要索引</h3><ul>
<li>较频繁作为查询条件的字段应该创建索引</li>
<li>唯一性太差的字段不适合做单独的索引，即使它频繁作为查询条件</li>
<li>更新非常频繁的字段不适合做索引</li>
<li>不会出现在where子句中的字段不适合做索引</li>
</ul>
<h3 id="MySQL索引的限制"><a href="#MySQL索引的限制" class="headerlink" title="MySQL索引的限制"></a>MySQL索引的限制</h3><ul>
<li>MyISAM存储引擎索引键长度总和长度不能超过1000字节</li>
<li>Text和Blob类型的字段只能创建前缀索引</li>
<li>使用不等于（!= 或 &lt;&gt; ）的时候MySQL无法使用索引</li>
<li>过滤字段使用了函数运算后（如，abs（culumn）），MySQL无法使用索引</li>
<li>join语句中join条件字段类型不一致不能使用索引</li>
<li>使用LIKE操作的时候，如果条件以通配符开始（如，’%abc’）MySQL无法使用索引</li>
<li>使用非等值查询时，MySQL无法使用索引</li>
</ul>
<h2 id="Query的优化"><a href="#Query的优化" class="headerlink" title="Query的优化"></a>Query的优化</h2><h3 id="优化更需要优化的query"><a href="#优化更需要优化的query" class="headerlink" title="优化更需要优化的query"></a>优化更需要优化的query</h3><p>高并发低消耗的query（相对）对整个系统的影响远比低并发高消耗的query要大。</p>
<h3 id="定位优化对象的性能瓶颈（profiling）"><a href="#定位优化对象的性能瓶颈（profiling）" class="headerlink" title="定位优化对象的性能瓶颈（profiling）"></a>定位优化对象的性能瓶颈（profiling）</h3><ul>
<li>IO，数据访问方面</li>
<li>CPU，数据运算（如分组、排序）</li>
</ul>
<h3 id="明确优化手段"><a href="#明确优化手段" class="headerlink" title="明确优化手段"></a>明确优化手段</h3><p>优化更偏向与对系统功能比较重要的query</p>
<h3 id="从explain入手"><a href="#从explain入手" class="headerlink" title="从explain入手"></a>从explain入手</h3><p>获取一个query在当前状态的数据库中的执行计划</p>
<h3 id="多用profile"><a href="#多用profile" class="headerlink" title="多用profile"></a>多用profile</h3><h3 id="永远用小结果集驱动大结果集"><a href="#永远用小结果集驱动大结果集" class="headerlink" title="永远用小结果集驱动大结果集"></a>永远用小结果集驱动大结果集</h3><h3 id="尽可能在索引中完成排序"><a href="#尽可能在索引中完成排序" class="headerlink" title="尽可能在索引中完成排序"></a>尽可能在索引中完成排序</h3><h3 id="只需取出自己需要的column"><a href="#只需取出自己需要的column" class="headerlink" title="只需取出自己需要的column"></a>只需取出自己需要的column</h3><h3 id="仅适用最有效的过滤条件"><a href="#仅适用最有效的过滤条件" class="headerlink" title="仅适用最有效的过滤条件"></a>仅适用最有效的过滤条件</h3><p>where字句中的条件并非越多越好</p>
<h3 id="尽可能的避免复杂的join查询和子查询"><a href="#尽可能的避免复杂的join查询和子查询" class="headerlink" title="尽可能的避免复杂的join查询和子查询"></a>尽可能的避免复杂的join查询和子查询</h3><p>query语句涉及的表越多，需要锁定的资源就越多，所阻塞的其他线程也就越多。</p>
<h3 id="其他优化"><a href="#其他优化" class="headerlink" title="其他优化"></a>其他优化</h3><h4 id="join的实现与优化"><a href="#join的实现与优化" class="headerlink" title="join的实现与优化"></a>join的实现与优化</h4><p>join是一种算法，即大名鼎鼎的Nested Loop Join。它是通过驱动表的结果集作为循环基础数据，然后一条一条的通过该结果集中的数据作为过滤条件到下一个表中查询数据，然后合并结果。</p>
<ul>
<li><p>尽可能的Join语句中的Nested Loop的循环次数</p>
<blockquote>
<p>最有效的方法只有一个：让驱动表的结果集尽可能的小。即『永远用小结果集驱动大结果集』</p>
</blockquote>
</li>
<li><p>优先优化Nested Loop的内层循环</p>
</li>
<li>保证Join语句中被驱动表上的join字段已经被索引</li>
<li>当无法保证被驱动表join字段被索引且内存充足的前提下，不要太吝啬joinBuffer的设置</li>
</ul>
<h4 id="order-by的优化"><a href="#order-by的优化" class="headerlink" title="order by的优化"></a>order by的优化</h4><ul>
<li>加大max_length_for_sort_data参数的设置</li>
<li>去掉不必要的返回字段</li>
<li>增大sort_buffer_size参数设置</li>
</ul>
<h4 id="Schema设计优化"><a href="#Schema设计优化" class="headerlink" title="Schema设计优化"></a>Schema设计优化</h4><ul>
<li>范式理论</li>
<li>十度冗余，尽量减少join</li>
</ul>
<h4 id="大字段垂直拆分"><a href="#大字段垂直拆分" class="headerlink" title="大字段垂直拆分"></a>大字段垂直拆分</h4><p>什么样的字段适合</p>
<ul>
<li>大字段（比如，文章内容、帖子内容、产品的介绍、小说内容等）</li>
<li>表中和其他字段比较，访问明显要少的字段</li>
</ul>
<p>优点</p>
<ul>
<li>数据库拆分简单明了，拆分规则明确</li>
<li>应用程序模块清晰明了，整合容易</li>
<li>数据维护方便易行，容易定位</li>
</ul>
<p>缺点</p>
<ul>
<li>部分表关联无法在数据库级别完成，需要在程序中完成</li>
<li>对于访问极其频繁且数据量超大的表任然存在性能瓶颈，不一定满足要求</li>
<li>事务处理相对更为复杂</li>
<li>切分达到一定程度后，扩展性会收到限制</li>
<li>过度切分可能会带来系统过度复杂而难以维护</li>
</ul>
<h4 id="大表水平拆分"><a href="#大表水平拆分" class="headerlink" title="大表水平拆分"></a>大表水平拆分</h4><p>基于类型的分拆优化</p>
<p>优点</p>
<ul>
<li>表关联基本能在数据库端完成</li>
<li>不会存在某些超大型数据量和高负载的表遇到的瓶颈问题</li>
<li>应用程序端整体架构改动相对较少</li>
<li>事务处理相对简单</li>
<li>只要切分规则能够定义好，基本上较难遇到扩展性限制</li>
</ul>
<p>缺点</p>
<ul>
<li>切分规则相对更为复杂，很难抽象出一个能够满足整个数据库的切分规则</li>
<li>后期数据的维护难度有所增加，人为手工定位数据更困难</li>
<li>应用系统各模块耦合度较高，可能会对后面数据的迁移、拆分造成一定困难</li>
</ul>
<h2 id="MySQL的备份与恢复"><a href="#MySQL的备份与恢复" class="headerlink" title="MySQL的备份与恢复"></a>MySQL的备份与恢复</h2><p>备份使用场景</p>
<ul>
<li>数据丢失应用场景<ul>
<li>人为操作事务造成的某些数据丢失</li>
<li>如那件Bug造成的数据部分丢失或者全部丢失</li>
<li>硬件故障造成的数据部分或者全部丢失</li>
<li>安全漏洞被入侵数据被恶意破坏</li>
</ul>
</li>
<li>非数据丢失应用场景<ul>
<li>特殊应用场景下基于时间点恢复</li>
<li>开发测试环境数据库搭建</li>
<li>相同数据库的新环境搭建</li>
<li>数据库或者数据迁移</li>
</ul>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://n.sinaimg.cn/games/3ece443e/20161013/MySQLXingNenDiaoYou.jpg&quot; alt=&quot;MYSQL性能优化&quot;&gt;&lt;/p&gt;
&lt;p&gt;性能是MySQL一直引以为豪的一点。在性能和功能两个方面，MySQL第一考虑的还是性能。&lt;/p&gt;
    
    </summary>
    
      <category term="MySQL" scheme="https://weizhimiao.github.io/categories/MySQL/"/>
    
    
      <category term="性能优化" scheme="https://weizhimiao.github.io/tags/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>大型网站技术架构剖析</title>
    <link href="https://weizhimiao.github.io/2016/10/13/%E5%A4%A7%E5%9E%8B%E7%BD%91%E7%AB%99%E6%8A%80%E6%9C%AF%E6%9E%B6%E6%9E%84%E5%89%96%E6%9E%90/"/>
    <id>https://weizhimiao.github.io/2016/10/13/大型网站技术架构剖析/</id>
    <published>2016-10-13T02:30:00.000Z</published>
    <updated>2016-10-13T03:02:10.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://n.sinaimg.cn/games/3ece443e/20161013/DaXingWangZhanJiShuJiaGouPouXi.jpg" alt="大型网站技术架构剖析"></p>
<h2 id="大型网站系统特点"><a href="#大型网站系统特点" class="headerlink" title="大型网站系统特点"></a>大型网站系统特点</h2><ul>
<li>高并发，大流量</li>
<li>高可用</li>
<li>海量数据</li>
<li>用户分布广泛，网络情况复杂</li>
<li>安全环境恶略</li>
<li>需求快速变更，发布频繁</li>
<li>渐进式发展</li>
</ul>
<a id="more"></a>
<h2 id="大型网站发展演化过程"><a href="#大型网站发展演化过程" class="headerlink" title="大型网站发展演化过程"></a>大型网站发展演化过程</h2><h3 id="一台服务器"><a href="#一台服务器" class="headerlink" title="一台服务器"></a>一台服务器</h3><p>特点：没人</p>
<p>应用程序、数据库、文件都在一个服务器。</p>
<h3 id="应用服务器和数据服务器分离"><a href="#应用服务器和数据服务器分离" class="headerlink" title="应用服务器和数据服务器分离"></a>应用服务器和数据服务器分离</h3><p>应用服务器</p>
<ul>
<li>处理大量业务</li>
<li>需要更快更强的CPU</li>
</ul>
<p>数据服务器</p>
<ul>
<li>需要快速磁盘检索和数据缓存</li>
<li>需要更快的磁盘和更大的内存</li>
</ul>
<p>文件服务器</p>
<ul>
<li>需要更大的硬盘</li>
</ul>
<h3 id="使用缓存改善网站性能"><a href="#使用缓存改善网站性能" class="headerlink" title="使用缓存改善网站性能"></a>使用缓存改善网站性能</h3><ul>
<li>本地缓存</li>
<li>远程缓存（分布式缓存）</li>
</ul>
<h3 id="使用应用服务器集群改善并发处理能力"><a href="#使用应用服务器集群改善并发处理能力" class="headerlink" title="使用应用服务器集群改善并发处理能力"></a>使用应用服务器集群改善并发处理能力</h3><ul>
<li>负载均衡服务器</li>
<li>用户服务器集群</li>
</ul>
<h3 id="数据库读写分离"><a href="#数据库读写分离" class="headerlink" title="数据库读写分离"></a>数据库读写分离</h3><p>利用数据库的主从热备份，来实现数据库的读写分离。从而改善数据库的负载压力。</p>
<h3 id="使用反向代理和CDN加速网站响应"><a href="#使用反向代理和CDN加速网站响应" class="headerlink" title="使用反向代理和CDN加速网站响应"></a>使用反向代理和CDN加速网站响应</h3><blockquote>
<p>基本原理都是缓存（都可以缓存一些静态资源）</p>
</blockquote>
<p>反向代理服务器</p>
<ul>
<li>缓存用户请求资源</li>
</ul>
<p>CDN服务器</p>
<ul>
<li>目的：尽早返回数据给用户</li>
</ul>
<h3 id="使用分布式文件系统和分布式数据库系统"><a href="#使用分布式文件系统和分布式数据库系统" class="headerlink" title="使用分布式文件系统和分布式数据库系统"></a>使用分布式文件系统和分布式数据库系统</h3><p>分布式数据库是网站数据库拆分的最后手段。不到万不得已的时网站更常用的拆分手段是业务拆分。</p>
<h3 id="使用NoSQL和搜索引擎"><a href="#使用NoSQL和搜索引擎" class="headerlink" title="使用NoSQL和搜索引擎"></a>使用NoSQL和搜索引擎</h3><p>应对更复杂的存储和检索需求</p>
<h3 id="业务拆分"><a href="#业务拆分" class="headerlink" title="业务拆分"></a>业务拆分</h3><blockquote>
<p>应对日益复杂的业务场景</p>
</blockquote>
<p>拆分方法</p>
<ul>
<li>根据产品线拆分成不同的应用</li>
</ul>
<p>应用产品之间的关系</p>
<ul>
<li>超链接</li>
<li>消息队列进行数据分发</li>
<li>访问同一个数据存储系统</li>
</ul>
<h3 id="分布式服务"><a href="#分布式服务" class="headerlink" title="分布式服务"></a>分布式服务</h3><p>通过分布式服务调用公用业务服务完成具体业务需要</p>
<h2 id="大型网站架构模式"><a href="#大型网站架构模式" class="headerlink" title="大型网站架构模式"></a>大型网站架构模式</h2><h3 id="分层"><a href="#分层" class="headerlink" title="分层"></a>分层</h3><ul>
<li>应用层</li>
<li>服务层</li>
<li>数据层</li>
</ul>
<h3 id="分割"><a href="#分割" class="headerlink" title="分割"></a>分割</h3><p>对不同的层继续进行垂直的分割</p>
<h3 id="分布式"><a href="#分布式" class="headerlink" title="分布式"></a>分布式</h3><blockquote>
<p>分层、分割的主要目的就是为了便于分布式部署。</p>
<p>分布式就是为了用更多的计算机来完成同样的功能</p>
</blockquote>
<ul>
<li>分布式应用和服务</li>
<li>分布式静态资源</li>
<li>分布式数据和存储</li>
<li>分布式计算</li>
<li>分布式配置</li>
<li>分布式文件系统</li>
</ul>
<h3 id="集群"><a href="#集群" class="headerlink" title="集群"></a>集群</h3><blockquote>
<p>多台服务器部署相同应用构成一个集群。通过负载均衡设备对外提供服务</p>
</blockquote>
<p>有点：</p>
<ul>
<li>提高系统并发访问量</li>
<li>提高系统可用性（冗余）</li>
</ul>
<h3 id="缓存"><a href="#缓存" class="headerlink" title="缓存"></a>缓存</h3><blockquote>
<p>改善性能的第一手段</p>
</blockquote>
<ul>
<li>内容分发网络CDN</li>
<li>反向代理</li>
<li>本地缓存</li>
<li>分布式缓存</li>
</ul>
<h3 id="异步"><a href="#异步" class="headerlink" title="异步"></a>异步</h3><ul>
<li>共享内存队列（单服务器）</li>
<li>分布式消息队列(分布式系统)</li>
</ul>
<h3 id="冗余"><a href="#冗余" class="headerlink" title="冗余"></a>冗余</h3><p>访问和负载很小的服务器也至少要部署两台构成集群。目的就是实现服务的高可用。</p>
<h3 id="自动化"><a href="#自动化" class="headerlink" title="自动化"></a>自动化</h3><ul>
<li>自动化报警</li>
<li>自动化失效转移</li>
<li>自动化失效恢复</li>
<li>自动化降级</li>
<li>自动化分配资源</li>
</ul>
<h3 id="安全"><a href="#安全" class="headerlink" title="安全"></a>安全</h3><ul>
<li>身份认证</li>
<li>加密</li>
<li>验证码识别</li>
<li>对于XSS，SQL注入，进行编码转换等</li>
<li>敏感信息过滤</li>
<li>风险控制</li>
</ul>
<h2 id="网站性能测试优化"><a href="#网站性能测试优化" class="headerlink" title="网站性能测试优化"></a>网站性能测试优化</h2><h3 id="性能测试指标"><a href="#性能测试指标" class="headerlink" title="性能测试指标"></a>性能测试指标</h3><ul>
<li>响应时间</li>
<li>并发数</li>
<li>吞吐量</li>
<li>性能计数器</li>
</ul>
<h3 id="性能测试方法"><a href="#性能测试方法" class="headerlink" title="性能测试方法"></a>性能测试方法</h3><ul>
<li>性能测试</li>
<li>负载测试</li>
<li>压力测试</li>
<li>稳定性测试</li>
</ul>
<h3 id="常见优化手段"><a href="#常见优化手段" class="headerlink" title="常见优化手段"></a>常见优化手段</h3><p>用户视角</p>
<ul>
<li>优化页面HTML样式</li>
<li>利用浏览器的并发和异步</li>
<li>调整浏览器缓存策略</li>
<li>CDN和反向代理</li>
</ul>
<p>开发人员</p>
<ul>
<li>使用缓存加速数据读取速度</li>
<li>使用集群提高系统吞吐能力</li>
<li>使用异步消息加速响应及实现消峰</li>
<li>优化代码改善程序性能</li>
</ul>
<p>运维人员</p>
<ul>
<li>优化骨干网</li>
<li>使用高性价比定制服务器</li>
<li>使用虚拟化技术优化资源利用</li>
</ul>
<h3 id="网站性能优化"><a href="#网站性能优化" class="headerlink" title="网站性能优化"></a>网站性能优化</h3><p>web性能优化</p>
<ul>
<li>减少HTTP请求（合并css、javascript、图片）</li>
<li>使用浏览器缓存（使用Cache-Control和Expire属性）</li>
<li>启用压缩（减少网络数据传输量）</li>
<li>减少页面阻塞（CSS文件尽量放在最上面，javascript放在最下面）</li>
<li>减少Cookie传输</li>
<li>CDN加速</li>
<li>反向代理<ul>
<li>安全</li>
<li>加速web请求（可以缓存一些静态资源）</li>
<li>负载均衡</li>
</ul>
</li>
</ul>
<p>应用服务器优化</p>
<ul>
<li>分布式缓存</li>
<li><p>异步操作（消息队列）</p>
<blockquote>
<p>原则：任何可以晚点在做的事都可以晚点再做</p>
</blockquote>
</li>
<li><p>使用集群</p>
<blockquote>
<p>使用负载均衡技术来构建</p>
</blockquote>
</li>
</ul>
<p>存储服务器优化</p>
<ul>
<li>访问频繁的页面不应该访问数据库（如首页，最好是静态的）</li>
<li>谨慎使用锁操作</li>
<li>对缓存的管理提高到和其他服务器一样的级别</li>
<li>大文件小文件分别对待</li>
</ul>
<h2 id="大型网站架构设计误区"><a href="#大型网站架构设计误区" class="headerlink" title="大型网站架构设计误区"></a>大型网站架构设计误区</h2><ul>
<li>一味追求大公司的解决方案</li>
<li>为了技术而技术</li>
<li>企图用技术解决所有问题</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://n.sinaimg.cn/games/3ece443e/20161013/DaXingWangZhanJiShuJiaGouPouXi.jpg&quot; alt=&quot;大型网站技术架构剖析&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;大型网站系统特点&quot;&gt;&lt;a href=&quot;#大型网站系统特点&quot; class=&quot;headerlink&quot; title=&quot;大型网站系统特点&quot;&gt;&lt;/a&gt;大型网站系统特点&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;高并发，大流量&lt;/li&gt;
&lt;li&gt;高可用&lt;/li&gt;
&lt;li&gt;海量数据&lt;/li&gt;
&lt;li&gt;用户分布广泛，网络情况复杂&lt;/li&gt;
&lt;li&gt;安全环境恶略&lt;/li&gt;
&lt;li&gt;需求快速变更，发布频繁&lt;/li&gt;
&lt;li&gt;渐进式发展&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="架构" scheme="https://weizhimiao.github.io/categories/%E6%9E%B6%E6%9E%84/"/>
    
    
  </entry>
  
  <entry>
    <title>PHP魔术方法小结</title>
    <link href="https://weizhimiao.github.io/2016/10/12/PHP%E7%9A%84MVC%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0/"/>
    <id>https://weizhimiao.github.io/2016/10/12/PHP的MVC设计与实现/</id>
    <published>2016-10-12T14:30:00.000Z</published>
    <updated>2016-10-13T03:03:13.000Z</updated>
    
    <content type="html"><![CDATA[<p>MVC模式，即模型-试图-控制器模式，是将应用程序划分成不同层次的一种方式。</p>
<p>即，</p>
<table>
<thead>
<tr>
<th>C</th>
<th>Control</th>
<th>控制器层</th>
<th>负责业务逻辑的处理。根据用户的请求确定用户可以做什么。之后，调用模型执行操作获得数据。最后调用视图将操作结果呈现给用户。</th>
</tr>
</thead>
<tbody>
<tr>
<td>M</td>
<td>Model</td>
<td>模型层</td>
<td>负责加工处理数据 返回结果。</td>
</tr>
<tr>
<td>V</td>
<td>View</td>
<td>视图层</td>
<td>负责接收信息和显示信息。</td>
</tr>
</tbody>
</table>
<p>一个典型MVC应用程序流程图</p>
<p><img src="http://n.sinaimg.cn/games/3ece443e/20161013/mvcYingYongChengXuLiuChengTu.png" alt="典型MVC应用程序流程图"></p>
<a id="more"></a>
<h2 id="简单实现："><a href="#简单实现：" class="headerlink" title="简单实现："></a>简单实现：</h2><h3 id="文件结构："><a href="#文件结构：" class="headerlink" title="文件结构："></a>文件结构：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">$ tree shop         </div><div class="line">shop</div><div class="line">├── Control</div><div class="line">│   ├── FlinkControl.class.php</div><div class="line">│   ├── GoodsControl.class.php</div><div class="line">│   ├── IndexControl.class.php</div><div class="line">│   ├── NewsControl.class.php</div><div class="line">│   ├── OrderControl.class.php</div><div class="line">│   └── UserControl.class.php</div><div class="line">├── Model</div><div class="line">│   ├── MemcacheModel.class.php</div><div class="line">│   └── MysqlModel.class.php</div><div class="line">├── Org</div><div class="line">│   └── Vcode.class.php</div><div class="line">├── Views</div><div class="line">├── index.php</div><div class="line">└── readme</div><div class="line"></div><div class="line">4 directories, 11 files</div></pre></td></tr></table></figure>
<h3 id="说明："><a href="#说明：" class="headerlink" title="说明："></a>说明：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Model  文件夹    模型层的Model类（操作数据 MYSQL、Memcached...）</div><div class="line">Org    文件夹	  模型层的其他类(不操作数据 分页/验证码...)</div><div class="line">Controls文件夹	  控制器层的类</div><div class="line">Views  文件夹	  视图层(html页面)</div></pre></td></tr></table></figure>
<h3 id="主要文件内容："><a href="#主要文件内容：" class="headerlink" title="主要文件内容："></a>主要文件内容：</h3><p>index.php</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line">	<span class="comment">//类的自动加载</span></div><div class="line">	<span class="function"><span class="keyword">function</span> <span class="title">__autoload</span><span class="params">($className)</span></span>&#123;</div><div class="line"></div><div class="line">		<span class="comment">//包含控制器的类</span></div><div class="line">		<span class="keyword">if</span>(strtolower(substr($className,<span class="number">-7</span>))==<span class="string">'control'</span>)&#123;</div><div class="line">			<span class="keyword">include</span> <span class="string">'Control/'</span>.$className.<span class="string">'.class.php'</span>;</div><div class="line">		&#125;<span class="keyword">elseif</span>(strtolower(substr($className,<span class="number">-5</span>))==<span class="string">'model'</span>)&#123;</div><div class="line">			<span class="keyword">include</span> <span class="string">'Model/'</span>.$className.<span class="string">'.class.php'</span>;</div><div class="line">		&#125;<span class="keyword">else</span>&#123;</div><div class="line">			<span class="keyword">include</span> <span class="string">'Org/'</span>.$className.<span class="string">'.class.php'</span>;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">//如何调用控制器</span></div><div class="line">	<span class="comment">//index.php?m=user&amp;a=add      表示调用用户类中的添加用户方法</span></div><div class="line">	<span class="comment">//index.php?m=goods&amp;a=drop    表示调用商品类中的删除商品方法</span></div><div class="line"></div><div class="line">	<span class="comment">//index.php?m=user&amp;a=add  </span></div><div class="line"></div><div class="line">	<span class="comment">//m=user -&gt;调用UserControl类</span></div><div class="line">	$class=!<span class="keyword">empty</span>($_GET[<span class="string">'m'</span>])?strtolower($_GET[<span class="string">'m'</span>]):<span class="string">'Index'</span>;<span class="comment">//$class=user;</span></div><div class="line">	$class=ucfirst($class);<span class="comment">//$class=User;</span></div><div class="line">	$class.=<span class="string">'Control'</span>;<span class="comment">//$class=UserControl</span></div><div class="line"></div><div class="line">	<span class="comment">//a=add -&gt; add</span></div><div class="line">	$method=!<span class="keyword">empty</span>($_GET[<span class="string">'a'</span>])?strtolower($_GET[<span class="string">'a'</span>]):<span class="string">'index'</span>;</div><div class="line">	$one=<span class="keyword">new</span> $class;</div><div class="line">	$one-&gt;$method();</div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure>
<p>Control/UserControl.class.php</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line">	<span class="class"><span class="keyword">class</span> <span class="title">UserControl</span></span>&#123;</div><div class="line">		<span class="comment">//控制器不需用属性！！！1</span></div><div class="line"></div><div class="line">		<span class="comment">//默认的方法index</span></div><div class="line">		<span class="function"><span class="keyword">function</span> <span class="title">index</span><span class="params">()</span></span>&#123;</div><div class="line">      <span class="comment">//实例化一个模型层的扩展类</span></div><div class="line">			<span class="keyword">echo</span> <span class="keyword">new</span> Vcode;</div><div class="line">			<span class="keyword">echo</span> <span class="string">'显示用户列表'</span>;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="comment">//添加用户</span></div><div class="line">		<span class="function"><span class="keyword">function</span> <span class="title">add</span><span class="params">()</span></span>&#123;</div><div class="line">      <span class="comment">//调用Model 查询友情连接信息</span></div><div class="line">			$mysql=<span class="keyword">new</span> MysqlModel;</div><div class="line">			<span class="comment">//调用Model类的方法</span></div><div class="line">			$mysql-&gt;insert();</div><div class="line"></div><div class="line">			<span class="keyword">echo</span> <span class="string">'添加用户操作'</span>;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="comment">//删除用户</span></div><div class="line">		<span class="function"><span class="keyword">function</span> <span class="title">drop</span><span class="params">()</span></span>&#123;</div><div class="line">			<span class="keyword">echo</span> <span class="string">'删除用户操作'</span>;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="comment">//修改用户</span></div><div class="line">		<span class="function"><span class="keyword">function</span> <span class="title">mod</span><span class="params">()</span></span>&#123;</div><div class="line">			<span class="keyword">echo</span> <span class="string">'修改用户操作'</span>;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="comment">//查询用户</span></div><div class="line">		<span class="function"><span class="keyword">function</span> <span class="title">show</span><span class="params">()</span></span>&#123;</div><div class="line">			<span class="keyword">echo</span> <span class="string">'查询用户操作'</span>;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">	&#125;</div></pre></td></tr></table></figure>
<p>Model/MysqlModel.class.php</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"></div><div class="line">	<span class="class"><span class="keyword">class</span> <span class="title">MysqlModel</span></span>&#123;</div><div class="line"></div><div class="line">		<span class="comment">//连接数据库的方法</span></div><div class="line">		<span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span></span>&#123;</div><div class="line">			<span class="keyword">echo</span> <span class="string">'连接数据库中&lt;br&gt;'</span>;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="comment">//使用数据库进行查询操作</span></div><div class="line">		<span class="function"><span class="keyword">function</span> <span class="title">select</span><span class="params">()</span></span>&#123;</div><div class="line">			<span class="keyword">echo</span> <span class="string">'使用数据库进行查询操作&lt;br&gt;'</span>;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="comment">//使用数据库进行删除操作</span></div><div class="line">		<span class="function"><span class="keyword">function</span> <span class="title">delete</span><span class="params">()</span></span>&#123;</div><div class="line">			<span class="keyword">echo</span> <span class="string">'使用数据库进行删除操作&lt;br&gt;'</span>;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="comment">//使用数据库进行修改操作</span></div><div class="line">		<span class="function"><span class="keyword">function</span> <span class="title">update</span><span class="params">()</span></span>&#123;</div><div class="line">			<span class="keyword">echo</span> <span class="string">'使用数据库进行修改操作&lt;br&gt;'</span>;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="comment">//使用数据库进行添加操作</span></div><div class="line">		<span class="function"><span class="keyword">function</span> <span class="title">insert</span><span class="params">()</span></span>&#123;</div><div class="line">			<span class="keyword">echo</span> <span class="string">'使用数据库进行添加操作&lt;br&gt;'</span>;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="function"><span class="keyword">function</span> <span class="title">__destruct</span><span class="params">()</span></span>&#123;</div><div class="line">			<span class="keyword">echo</span> <span class="string">'断开数据库连接'</span>;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">	&#125;</div></pre></td></tr></table></figure>
<p>Org/Vcode.class.php</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line">	<span class="class"><span class="keyword">class</span>  <span class="title">Vcode</span> </span>&#123;</div><div class="line">		<span class="keyword">private</span> $width;                               <span class="comment">//验证码图片的宽度</span></div><div class="line">		<span class="keyword">private</span> $height;                              <span class="comment">//验证码图片的高度</span></div><div class="line">		<span class="keyword">private</span> $codeNum;                             <span class="comment">//验证码字符的个数</span></div><div class="line">		<span class="keyword">private</span> $disturbColorNum;                     <span class="comment">//干扰元素数量</span></div><div class="line">		<span class="keyword">private</span> $checkCode;                           <span class="comment">//验证码字符</span></div><div class="line">		<span class="keyword">private</span> $image;                               <span class="comment">//验证码资源</span></div><div class="line"></div><div class="line">		<span class="comment">/**</span></div><div class="line">		 * 构造方法用来实例化验证码对象，并为一些成员属性初使化       </div><div class="line">		 * <span class="doctag">@param</span>	int	$width		设置验证码图片的宽度，默认宽度值为80像素        </div><div class="line">		 * <span class="doctag">@param</span>	int	$height		设置验证码图片的高度，默认高度值为20像素       </div><div class="line">		 * <span class="doctag">@param</span>	int	$codeNum	设置验证码中字母和数字的个数，默认个数为4个  </div><div class="line">		 */</div><div class="line">		<span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($width=<span class="number">80</span>, $height=<span class="number">20</span>, $codeNum=<span class="number">4</span>)</span> </span>&#123;</div><div class="line">			<span class="keyword">$this</span>-&gt;width=$width;                     <span class="comment">//为成员属性width初使化</span></div><div class="line">			<span class="keyword">$this</span>-&gt;height=$height;                     <span class="comment">//为成员属性height初使化</span></div><div class="line">			<span class="keyword">$this</span>-&gt;codeNum=$codeNum;               <span class="comment">//为成员属性codeNum初使化</span></div><div class="line">			$number=floor($height*$width/<span class="number">15</span>);</div><div class="line">			<span class="keyword">if</span>($number &gt; <span class="number">240</span>-$codeNum)</div><div class="line">				<span class="keyword">$this</span>-&gt;disturbColorNum=<span class="number">240</span>-$codeNum;</div><div class="line">			<span class="keyword">else</span></div><div class="line">				<span class="keyword">$this</span>-&gt;disturbColorNum=$number;</div><div class="line">			<span class="keyword">$this</span>-&gt;checkCode=<span class="keyword">$this</span>-&gt;createCheckCode();  <span class="comment">//为成员属性checkCode初使化</span></div><div class="line">		&#125;</div><div class="line">		<span class="comment">/**</span></div><div class="line">		 * 用于输出验证码图片，也向服务器的SESSION中保存了验证码</div><div class="line">		 * 使用echo 输出对象即可</div><div class="line">		 * <span class="doctag">@return</span> string	验证码</div><div class="line">		 */</div><div class="line"></div><div class="line">		<span class="function"><span class="keyword">function</span> <span class="title">__toString</span><span class="params">()</span></span>&#123;</div><div class="line">			$_SESSION[<span class="string">"code"</span>]=strtoupper(<span class="keyword">$this</span>-&gt;checkCode);  <span class="comment">//加到session中</span></div><div class="line">			<span class="keyword">$this</span>-&gt;outImg();              <span class="comment">//输出验证码</span></div><div class="line">			<span class="keyword">return</span> <span class="string">''</span>;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">outImg</span><span class="params">()</span></span>&#123;                       <span class="comment">//通过访问该方法向浏览器中输出图像</span></div><div class="line">			<span class="keyword">$this</span>-&gt;getCreateImage();                 <span class="comment">//调用内部方法创建画布并对其进行初使化</span></div><div class="line">			<span class="keyword">$this</span>-&gt;setDisturbColor();                 <span class="comment">//向图像中设置一些干扰像素</span></div><div class="line">			<span class="keyword">$this</span>-&gt;outputText();                     <span class="comment">//向图像中输出随机的字符串</span></div><div class="line">			<span class="keyword">$this</span>-&gt;outputImage();                    <span class="comment">//生成相应格式的图像并输出</span></div><div class="line">		&#125;</div><div class="line"></div><div class="line"></div><div class="line">		<span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">getCreateImage</span><span class="params">()</span></span>&#123;              <span class="comment">//用来创建图像资源，并初使化背影</span></div><div class="line">			<span class="keyword">$this</span>-&gt;image=imagecreatetruecolor(<span class="keyword">$this</span>-&gt;width,<span class="keyword">$this</span>-&gt;height);</div><div class="line"></div><div class="line">			$backColor = imagecolorallocate(<span class="keyword">$this</span>-&gt;image, rand(<span class="number">225</span>,<span class="number">255</span>),rand(<span class="number">225</span>,<span class="number">255</span>),rand(<span class="number">225</span>,<span class="number">255</span>));    <span class="comment">//背景色（随机）</span></div><div class="line">			 @imagefill(<span class="keyword">$this</span>-&gt;image, <span class="number">0</span>, <span class="number">0</span>, $backColor);</div><div class="line"></div><div class="line">			$border=imageColorAllocate(<span class="keyword">$this</span>-&gt;image, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</div><div class="line">			imageRectangle(<span class="keyword">$this</span>-&gt;image,<span class="number">0</span>,<span class="number">0</span>,<span class="keyword">$this</span>-&gt;width<span class="number">-1</span>,<span class="keyword">$this</span>-&gt;height<span class="number">-1</span>,$border);</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">createCheckCode</span><span class="params">()</span></span>&#123;           </div><div class="line">			<span class="comment">//随机生成用户指定个数的字符串,去掉了容易混淆的字符oOLlz和数字012</span></div><div class="line">			$code=<span class="string">"3456789abcdefghijkmnpqrstuvwxyABCDEFGHIJKMNPQRSTUVWXY"</span>;</div><div class="line">			<span class="keyword">for</span>($i=<span class="number">0</span>;$i&lt;<span class="keyword">$this</span>-&gt;codeNum;$i++) &#123;</div><div class="line">				$char=$code&#123;rand(<span class="number">0</span>,strlen($code)<span class="number">-1</span>)&#125;;</div><div class="line"></div><div class="line">				$ascii.=$char;</div><div class="line">			&#125;</div><div class="line">			<span class="keyword">return</span> $ascii;</div><div class="line"></div><div class="line">		&#125;</div><div class="line">		<span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">setDisturbColor</span><span class="params">()</span> </span>&#123;    </div><div class="line">			<span class="comment">//设置干扰像素，向图像中输出不同颜色的100个点</span></div><div class="line">			<span class="keyword">for</span>($i=<span class="number">0</span>; $i&lt;=<span class="keyword">$this</span>-&gt;disturbColorNum; $i++) &#123;</div><div class="line">				$color = imagecolorallocate(<span class="keyword">$this</span>-&gt;image, rand(<span class="number">0</span>,<span class="number">255</span>), rand(<span class="number">0</span>,<span class="number">255</span>), rand(<span class="number">0</span>,<span class="number">255</span>));</div><div class="line">   				imagesetpixel(<span class="keyword">$this</span>-&gt;image,rand(<span class="number">1</span>,<span class="keyword">$this</span>-&gt;width<span class="number">-2</span>),rand(<span class="number">1</span>,<span class="keyword">$this</span>-&gt;height<span class="number">-2</span>),$color);</div><div class="line">			&#125;</div><div class="line"></div><div class="line">			<span class="keyword">for</span>($i=<span class="number">0</span>; $i&lt;<span class="number">10</span>; $i++)&#123;</div><div class="line">				$color=imagecolorallocate(<span class="keyword">$this</span>-&gt;image,rand(<span class="number">0</span>,<span class="number">255</span>),rand(<span class="number">0</span>,<span class="number">255</span>),rand(<span class="number">0</span>,<span class="number">255</span>));</div><div class="line">				imagearc(<span class="keyword">$this</span>-&gt;image,rand(<span class="number">-10</span>,<span class="keyword">$this</span>-&gt;width),rand(<span class="number">-10</span>,<span class="keyword">$this</span>-&gt;height),rand(<span class="number">30</span>,<span class="number">300</span>),rand(<span class="number">20</span>,<span class="number">200</span>),<span class="number">55</span>,<span class="number">44</span>,$color);</div><div class="line">			&#125;  </div><div class="line">		&#125;</div><div class="line"></div><div class="line"></div><div class="line">		<span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">outputText</span><span class="params">()</span> </span>&#123;       </div><div class="line">			<span class="comment">//随机颜色、随机摆放、随机字符串向图像中输出</span></div><div class="line">			<span class="keyword">for</span> ($i=<span class="number">0</span>;$i&lt;=<span class="keyword">$this</span>-&gt;codeNum;$i++) &#123;</div><div class="line">				$fontcolor = imagecolorallocate(<span class="keyword">$this</span>-&gt;image, rand(<span class="number">0</span>,<span class="number">128</span>), rand(<span class="number">0</span>,<span class="number">128</span>), rand(<span class="number">0</span>,<span class="number">128</span>));</div><div class="line">				$fontSize=rand(<span class="number">3</span>,<span class="number">5</span>);</div><div class="line">				$x = floor(<span class="keyword">$this</span>-&gt;width/<span class="keyword">$this</span>-&gt;codeNum)*$i+<span class="number">3</span>;</div><div class="line">   				$y = rand(<span class="number">0</span>,<span class="keyword">$this</span>-&gt;height-imagefontheight($fontSize));</div><div class="line">				imagechar(<span class="keyword">$this</span>-&gt;image, $fontSize, $x, $y, <span class="keyword">$this</span>-&gt;checkCode&#123;$i&#125;, $fontcolor);</div><div class="line"> 			  &#125;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">outputImage</span><span class="params">()</span></span>&#123;              </div><div class="line">			<span class="comment">//自动检测GD支持的图像类型，并输出图像</span></div><div class="line">			<span class="keyword">if</span>(imagetypes() &amp; IMG_GIF)&#123;          <span class="comment">//判断生成GIF格式图像的函数是否存在</span></div><div class="line">				header(<span class="string">"Content-type: image/gif"</span>);  <span class="comment">//发送标头信息设置MIME类型为image/gif</span></div><div class="line">				imagegif(<span class="keyword">$this</span>-&gt;image);           <span class="comment">//以GIF格式将图像输出到浏览器</span></div><div class="line">			&#125;<span class="keyword">elseif</span>(imagetypes() &amp; IMG_JPG)&#123;      <span class="comment">//判断生成JPG格式图像的函数是否存在</span></div><div class="line">				header(<span class="string">"Content-type: image/jpeg"</span>); <span class="comment">//发送标头信息设置MIME类型为image/jpeg</span></div><div class="line">				imagejpeg(<span class="keyword">$this</span>-&gt;image, <span class="string">""</span>, <span class="number">0.5</span>);   <span class="comment">//以JPEN格式将图像输出到浏览器</span></div><div class="line">			&#125;<span class="keyword">elseif</span>(imagetypes() &amp; IMG_PNG)&#123;     <span class="comment">//判断生成PNG格式图像的函数是否存在</span></div><div class="line">				header(<span class="string">"Content-type: image/png"</span>);  <span class="comment">//发送标头信息设置MIME类型为image/png</span></div><div class="line">				imagepng(<span class="keyword">$this</span>-&gt;image);          <span class="comment">//以PNG格式将图像输出到浏览器</span></div><div class="line">			&#125;<span class="keyword">elseif</span>(imagetypes() &amp; IMG_WBMP)&#123;   <span class="comment">//判断生成WBMP格式图像的函数是否存在</span></div><div class="line">				 header(<span class="string">"Content-type: image/vnd.wap.wbmp"</span>);   <span class="comment">//发送标头为image/wbmp</span></div><div class="line">				 imagewbmp(<span class="keyword">$this</span>-&gt;image);       <span class="comment">//以WBMP格式将图像输出到浏览器</span></div><div class="line">			&#125;<span class="keyword">else</span>&#123;                              <span class="comment">//如果没有支持的图像类型</span></div><div class="line">				<span class="keyword">die</span>(<span class="string">"PHP不支持图像创建！"</span>);    <span class="comment">//不输出图像，输出一错误消息，并退出程序</span></div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		<span class="function"><span class="keyword">function</span> <span class="title">__destruct</span><span class="params">()</span></span>&#123;                      <span class="comment">//当对象结束之前销毁图像资源释放内存</span></div><div class="line"> 			imagedestroy(<span class="keyword">$this</span>-&gt;image);            <span class="comment">//调用GD库中的方法销毁图像资源</span></div><div class="line">		&#125;</div><div class="line">	&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;MVC模式，即模型-试图-控制器模式，是将应用程序划分成不同层次的一种方式。&lt;/p&gt;
&lt;p&gt;即，&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;C&lt;/th&gt;
&lt;th&gt;Control&lt;/th&gt;
&lt;th&gt;控制器层&lt;/th&gt;
&lt;th&gt;负责业务逻辑的处理。根据用户的请求确定用户可以做什么。之后，调用模型执行操作获得数据。最后调用视图将操作结果呈现给用户。&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;M&lt;/td&gt;
&lt;td&gt;Model&lt;/td&gt;
&lt;td&gt;模型层&lt;/td&gt;
&lt;td&gt;负责加工处理数据 返回结果。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;V&lt;/td&gt;
&lt;td&gt;View&lt;/td&gt;
&lt;td&gt;视图层&lt;/td&gt;
&lt;td&gt;负责接收信息和显示信息。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;一个典型MVC应用程序流程图&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://n.sinaimg.cn/games/3ece443e/20161013/mvcYingYongChengXuLiuChengTu.png&quot; alt=&quot;典型MVC应用程序流程图&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="PHP" scheme="https://weizhimiao.github.io/categories/PHP/"/>
    
    
      <category term="MVC" scheme="https://weizhimiao.github.io/tags/MVC/"/>
    
  </entry>
  
  <entry>
    <title>PHP扩展与应用库(PEAR)</title>
    <link href="https://weizhimiao.github.io/2016/10/12/PHP%E6%89%A9%E5%B1%95%E4%B8%8E%E5%BA%94%E7%94%A8%E5%BA%93(PEAR)/"/>
    <id>https://weizhimiao.github.io/2016/10/12/PHP扩展与应用库(PEAR)/</id>
    <published>2016-10-12T12:30:00.000Z</published>
    <updated>2016-10-13T03:04:02.000Z</updated>
    
    <content type="html"><![CDATA[<p>PEAR（the PHP Extension and Application Repository），PHP扩展与应用库。它是一个PHP扩展及应用的一个代码仓库。所有的扩展均以PHP代码的形式出现，功能强大，安装简单，甚至可以改改就用。使用的时候，要在代码中进行Include才能够使用。</p>
<p>官网：</p>
<p><a href="http://pear.php.net" target="_blank" rel="external">http://pear.php.net</a></p>
<a id="more"></a>
<h2 id="PEAR安装和使用"><a href="#PEAR安装和使用" class="headerlink" title="PEAR安装和使用"></a>PEAR安装和使用</h2><p>在官网上有说明详细的安装信息，这里作简单说明。<br><a href="http://pear.php.net/manual/en/about-pear.php" target="_blank" rel="external">http://pear.php.net/manual/en/about-pear.php</a></p>
<h3 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h3><p>#curl -o go-pear.php  <a href="http://pear.php.net/go-pear" target="_blank" rel="external">http://pear.php.net/go-pear</a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ curl -o go-pear.php  http://pear.php.net/go-pear</div><div class="line">  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current</div><div class="line">                                 Dload  Upload   Total   Spent    Left  Speed</div><div class="line">100 88959  100 88959    0     0  43329      0  0:00:02  0:00:02 --:--:-- 43352</div></pre></td></tr></table></figure></p>
<h3 id="运行go-pear-php"><a href="#运行go-pear-php" class="headerlink" title="运行go-pear.php"></a>运行go-pear.php</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"># /usr/local/php5/bin/php go-pear.php</div></pre></td></tr></table></figure>
<h3 id="利用PEAR安装PHPDOC"><a href="#利用PEAR安装PHPDOC" class="headerlink" title="利用PEAR安装PHPDOC"></a>利用PEAR安装PHPDOC</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">$ pear install phpdoc/phpDocumentor-alpha</div><div class="line">Attempting to discover channel &quot;phpdoc&quot;...</div><div class="line">Attempting fallback to https instead of http on channel &quot;phpdoc&quot;...</div><div class="line">unknown channel &quot;phpdoc&quot; in &quot;phpdoc/phpDocumentor-alpha&quot;</div><div class="line">invalid package name/package file &quot;phpdoc/phpDocumentor-alpha&quot;</div><div class="line">install failed</div></pre></td></tr></table></figure>
<p>如出现上面错误，需要我们增加一个phpDocumentor pear渠道<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ pear channel-discover pear.phpdoc.org</div><div class="line">Adding Channel &quot;pear.phpdoc.org&quot; succeeded</div><div class="line">Discovery of channel &quot;pear.phpdoc.org&quot; succeeded</div></pre></td></tr></table></figure></p>
<p>重新安装<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$ pear install phpdoc/phpDocumentor-alpha</div><div class="line">downloading phpDocumentor-2.8.5.tgz ...</div><div class="line">Starting to download phpDocumentor-2.8.5.tgz (8,184,822 bytes)</div><div class="linedone: 8,184,822 bytes</div><div class="line">install ok: channel://pear.phpdoc.org/phpDocumentor-2.8.5</div></pre></td></tr></table></figure></p>
<p>查看是否安装成功<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ phpdoc -V</div><div class="line">phpDocumentor version 2.8.5</div></pre></td></tr></table></figure></p>
<h2 id="PEAR常用功能及命令"><a href="#PEAR常用功能及命令" class="headerlink" title="PEAR常用功能及命令"></a>PEAR常用功能及命令</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div></pre></td><td class="code"><pre><div class="line">$ phpdoc --help</div><div class="line">Usage:</div><div class="line"> project:run [-t|--target[=&quot;...&quot;]] [--cache-folder[=&quot;...&quot;]] [-f|--filename[=&quot;...&quot;]] [-d|--directory[=&quot;...&quot;]] [--encoding[=&quot;...&quot;]] [-e|--extensions[=&quot;...&quot;]] [-i|--ignore[=&quot;...&quot;]] [--ignore-tags[=&quot;...&quot;]] [--hidden] [--ignore-symlinks] [-m|--markers[=&quot;...&quot;]] [--title[=&quot;...&quot;]] [--force] [--validate] [--visibility[=&quot;...&quot;]] [--defaultpackagename[=&quot;...&quot;]] [--sourcecode] [-p|--progressbar] [--template[=&quot;...&quot;]] [--parseprivate] [--log[=&quot;...&quot;]]</div><div class="line"></div><div class="line">Aliases: run</div><div class="line">Options:</div><div class="line"> --target (-t)         模板文件生成路径</div><div class="line"> --cache-folder        缓存文件路径</div><div class="line"> --filename (-f)       要解析的文件的逗号分隔列表。 通配符？ 和*（支持多个值）</div><div class="line"> --directory (-d)      逗号分隔的目录列表（递归）解析（允许多个值）</div><div class="line"> --encoding            编码用于解释源文件</div><div class="line"> --extensions (-e)     以逗号分隔的解析扩展列表，默认为php，php3和phtml（允许多个值）</div><div class="line"> --ignore (-i)         以逗号分隔的将被忽略的文件和目录（相对于源代码目录）列表。 通配符*和？ 支持（允许多个值）</div><div class="line"> --ignore-tags         将忽略的逗号分隔的标签列表，默认为none。 package，subpackage和ignore不能被忽略。 （允许多个值）</div><div class="line"> --hidden              使用此选项可以告诉phpDocumentor解析以句点（。）开头的文件和目录，默认情况下这些被忽略</div><div class="line"> --ignore-symlinks     忽略到其他文件或目录的符号链接，默认值为on</div><div class="line"> --markers (-m)        要过滤的标记/标记的逗号分隔列表（允许多个值）</div><div class="line"> --title               设置此项目的标题; 默认是phpDocumentor标志</div><div class="line"> --force               强制完整构建文档，不会增加现有文档</div><div class="line"> --validate            使用PHP Lint验证每个处理的文件，成本很高的性能</div><div class="line"> --visibility          指定应在文档中显示的解析可见性（逗号分隔，例如“public，protected”）（允许多个值）</div><div class="line"> --defaultpackagename  用于默认软件包的名称。(default: &quot;Default&quot;)</div><div class="line"> --sourcecode          是否包含语法高亮的源代码</div><div class="line"> --progressbar (-p)    是否显示进度条; 将自动静默记录到stdout</div><div class="line"> --template            要使用的模板的名称（可选）（允许多个值）</div><div class="line"> --parseprivate        是否解析标记有@internal标签的DocBlocks</div><div class="line"> --log                 要写入的日志文件</div><div class="line"> --help (-h)           显示此帮助消息</div><div class="line"> --quiet (-q)          不输出任何消息</div><div class="line"> --verbose (-v|vv|vvv) 增加消息的详细程度：1用于正常输出，2用于更详细的输出，3用于调试</div><div class="line"> --version (-V)        显示此应用程序版本</div><div class="line"> --ansi                强制ANSI输出</div><div class="line"> --no-ansi             禁用ANSI输出</div><div class="line"> --no-interaction (-n) 不要问任何互动问题</div><div class="line"> --config (-c)         自定义配置文件的位置</div><div class="line"></div><div class="line">Help:</div><div class="line">  phpDocumentor从PHP源文件创建文档。 最简单的方法</div><div class="line">  使用它是：</div><div class="line"></div><div class="line">     $ phpdoc run -d [directory to parse] -t [output directory]</div><div class="line"></div><div class="line"> 这将解析在&lt;directory to parse&gt;中以.php，.php3和.phtml结尾的每个文件，然后在&lt;output directory&gt;中输出一个包含易于阅读的文档的HTML网站。</div><div class="line"></div><div class="line"> phpDocumentor will try to look for a phpdoc.dist.xml or phpdoc.xml file in your</div><div class="line"> current working directory and use that to override the default settings if</div><div class="line"> present. In the configuration file can you specify the same settings (and</div><div class="line"> more) as the command line provides.</div><div class="line"></div><div class="line">phpDocumentor将尝试在当前工作目录中查找phpdoc.dist.xml或phpdoc.xml文件，</div><div class="line">并使用该文件覆盖默认设置（如果存在）。 在配置文件中，您可以指定与命令行提供的相同的设置（和更多）。</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"> Other commands</div><div class="line"> 除了这个命令phpDocumentor还支持附加命令：</div><div class="line"></div><div class="line"> Available commands:</div><div class="line">   help</div><div class="line">   list</div><div class="line">   parse</div><div class="line">   run</div><div class="line">   transform</div><div class="line"> project</div><div class="line">   project:parse</div><div class="line">   project:run</div><div class="line">   project:transform</div><div class="line"> template</div><div class="line">   template:generate</div><div class="line">   template:list</div><div class="line">   template:package</div><div class="line"></div><div class="line">您可以使用list命令获取更详细的命令列表，并通过在命令名前添加help来获取帮助。</div></pre></td></tr></table></figure>
<h2 id="常用的PEAR模块简介"><a href="#常用的PEAR模块简介" class="headerlink" title="常用的PEAR模块简介"></a>常用的PEAR模块简介</h2><ul>
<li><p>Benchmark/Timer 测试你的一段php代码的运行效率  </p>
</li>
<li><p>Benchmark/Benchmark_Iterate 测试你某个函数循环执行时的性能  </p>
</li>
<li><p>Cache/Output 可以将你的php脚本的输出进行缓存，可以使用多种方式缓存（存在文件，数据库或者是共享内存中）,如果使用这个模块有可能增大服务器的负载，所以，如果你想通过动态脚本的缓存来提供效率，不妨使用Zend optimize,这个模块未必适合  </p>
</li>
<li><p>Cache/Graphics 可以将你需要动态输出的图片进行缓存  </p>
</li>
<li><p>Console/Getopt 命令行参数的处理模块  </p>
</li>
<li><p>CMD 一个虚拟的shell，可以用它来运行一些系统的命令  </p>
</li>
<li><p>Crypt/CBC 实现Perl Crypt::CBC 模块的仿真  </p>
</li>
<li><p>Crypt/HCEMD5 实现Perl Crypt::HCE_MD5 模块的功能  </p>
</li>
<li><p>Date/Calc 实现日期的相关操作  </p>
</li>
<li><p>Date/Human Human历法的转换  </p>
</li>
<li><p>DB 提供统一的、抽象的数据库操作层，后端支持多种数据库  </p>
</li>
<li><p>File/Find 文件查找  </p>
</li>
<li><p>File/Passwd 操纵password类的文件，如password,httppass,cvspassword  </p>
</li>
<li><p>File/SearchReplace 在文件中查找替换字符串  </p>
</li>
<li><p>HTML/Form 可以在html中快速地创建form  </p>
</li>
<li><p>HTML/IT 实现模板定制，动态生成页面的功能，类似phplib中的模板功能，但是要简单易用  </p>
</li>
<li><p>HTML/ITX 实现对IT的扩展功能，可以更加灵活地定制你的模板，实现更复杂的操作  </p>
</li>
<li><p>HTML/Processor XML_Parser的扩展，使之可以应用于html文件的操作  </p>
</li>
<li><p>HTTP/Compress 用于Php 输出缓冲机制的一个包装类，同时可以对缓冲的内容进行压缩存储  </p>
</li>
<li><p>Image/Remote 无需把整个图片都下载到本地就可以获取远端系统的图片的信息，  </p>
</li>
<li><p>Log/composite Horde对log抽象类做的一个扩展，可以使多个日志处理对象能够获得同一个日志事件。注意，Log目录下面的模块都是Horde项目的一部分，大部分都是抽象的超类  </p>
</li>
<li><p>Log/file 将日志信息写入文件  </p>
</li>
<li><p>Log/mcal 将信息发送到本地或远端的日程管理软件-mcal的数据库中  </p>
</li>
<li><p>Log/observer Horder中Observer的一个超类  </p>
</li>
<li><p>Log/sql 将日志信息发送到sql数据库中  </p>
</li>
<li><p>Log/syslog 将信息发送到syslog中  </p>
</li>
<li><p>Mail/RFC822 检查一个email地址是否是合法的rf822 email地址  </p>
</li>
<li><p>Mail/sendmail 使用sendmail来发送信件  </p>
</li>
<li><p>Mail/smtp 使用smtp服务器来发送信件  </p>
</li>
<li><p>Math/Fraction 处理分形的数学计算  </p>
</li>
<li><p>Math/Util 计算最大公约数  </p>
</li>
<li><p>NET/Curl 对php的Curl扩展所作的面向对象的包装  </p>
</li>
<li><p>NET/Dig 操纵dig，进行dns相关的查询操作  </p>
</li>
<li><p>NET/SMTP 使用NET/Socket实现SMTP协议  </p>
</li>
<li><p>NET/Socket 通用的Socket类，实现了常用的socket操作的包装  </p>
</li>
<li><p>Numbers/Roman 阿拉伯数字和罗马数字的相互转换  </p>
</li>
<li><p>Payment/Verisign 实现和Verisign支付网关的交互  </p>
</li>
<li><p>Pear 提供Pear模块的2个基本类，PEAR 和PEARError类  </p>
</li>
<li><p>PEAR/Installer pear的安装类，提供Perl中的CPAN模块类似的功能  </p>
</li>
<li><p>PHPDoc 从php代码中自动生成API文档  </p>
</li>
<li><p>Schedule/at 和Unix 上的AT守护进程进行交互  </p>
</li>
<li><p>XML/Parser 基于php的xml扩展所作的xml的解析器  </p>
</li>
<li><p>XML/Render 将xml文档生成其它的格式（html,pdf),这只是一个抽象类，在最新的pear cvs代码中已经有了html的实现  </p>
</li>
<li><p>XML/RPC 用php实现xml-rpc的一个抽象类，在最新的pear cvs代码中已经有了xml/RPC/Server的实现  </p>
</li>
</ul>
<h2 id="PEAR与PECL关系"><a href="#PEAR与PECL关系" class="headerlink" title="PEAR与PECL关系"></a>PEAR与PECL关系</h2><p>PEAR（the PHP Extension and Application Repository），PHP扩展与应用库。它是一个PHP扩展及应用的一个代码仓库。</p>
<p>PECL（PHP Extension Community Library），PHP的扩展库。它提供了一系列已知的扩展库，由C、C++等其他语言编写而成，以.so形式出现，.so 为共享库,是shared object,用于动态连接的,和dll差不多，为比PEAR更快，但是与PEAR不同的是，PECL需要在服务器上配置并被注册到主机中。</p>
<p>基于他们的实现方式不同，在使用时候也有不同。</p>
<p>Pear：是PHP的扩展代码包，所有的扩展均以PHP代码的形式出现，功能强大，安装简单，甚至可以改改就用。使用的时候，要在代码中进行Include才能够使用。</p>
<p>Pecl：是PHP的标准扩展，可以补充实际开发中所需的功能，所有的扩展都需要安装，在Windows下面以Dll的形式出现，在linux下面，需要单独进行编译，它的表现形式为根据PHP官方的标准用C语言写成，尽管源码开放但是一般人无法随意更改源码。</p>
<p><strong>最直接的表述：Pear是PHP的上层扩展，Pecl是PHP的底层扩展。</strong></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;PEAR（the PHP Extension and Application Repository），PHP扩展与应用库。它是一个PHP扩展及应用的一个代码仓库。所有的扩展均以PHP代码的形式出现，功能强大，安装简单，甚至可以改改就用。使用的时候，要在代码中进行Include才能够使用。&lt;/p&gt;
&lt;p&gt;官网：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://pear.php.net&quot;&gt;http://pear.php.net&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="PHP" scheme="https://weizhimiao.github.io/categories/PHP/"/>
    
    
      <category term="PEAR" scheme="https://weizhimiao.github.io/tags/PEAR/"/>
    
  </entry>
  
  <entry>
    <title>Linux常用工具命令之rsync</title>
    <link href="https://weizhimiao.github.io/2016/10/08/Linux%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7%E5%91%BD%E4%BB%A4%E4%B9%8Brsync/"/>
    <id>https://weizhimiao.github.io/2016/10/08/Linux常用工具命令之rsync/</id>
    <published>2016-10-08T14:30:00.000Z</published>
    <updated>2016-10-08T15:29:20.000Z</updated>
    
    <content type="html"><![CDATA[<p>rsync命令是一个远程数据同步工具，可通过LAN/WAN快速同步多台主机间的文件。<br>rsync使用所谓的“rsync算法”来使本地和远程两个主机之间的文件达到同步，这个算法只传送两个文件的不同部分，而不是每次都整份传送，因此速度相当快。<br>rsync是一个功能非常强大的工具，其命令也有很多功能特色选项，我们下面就对它的选项一一进行分析说明。</p>
<a id="more"></a>
<h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">rsync [OPTION]... SRC DEST</div><div class="line">rsync [OPTION]... SRC [USER@]host:DEST</div><div class="line">rsync [OPTION]... [USER@]HOST:SRC DEST</div><div class="line">rsync [OPTION]... [USER@]HOST::SRC DEST</div><div class="line">rsync [OPTION]... SRC [USER@]HOST::DEST</div><div class="line">rsync [OPTION]... rsync://[USER@]HOST[:PORT]/SRC [DEST]</div></pre></td></tr></table></figure>
<p>对应于以上六种命令格式,rsync有六种不同的工作模式:</p>
<ol>
<li><p>拷贝本地文件。当SRC和DES路径信息都不包含有单个冒号”:”分隔符时就启动这种工作模式。如: <code>rsync­ -a /data /backup</code></p>
</li>
<li><p>使用一个远程shell程序(如rsh、ssh)来实现将本地机器的内容拷贝到远程机器。当DST路径地址包含单个冒 号”:”分隔符时启动该模式。如: <code>rsync­ -avz *.c foo:src</code></p>
</li>
<li><p>使用一个远程shell程序(如rsh、ssh)来实现将远程机器的内容拷贝到本地机器。当SRC地址路径包含单个冒 号”:”分隔符时启动该模式。如: <code>rsync -­avz foo:src/bar /data</code></p>
</li>
<li><p>从远程rsync服务器中拷贝文件到本地机。当SRC路径信息包含”::”分隔符时启动该模式。如: <code>rsync- ­av root@192.168.78.192::www /databack</code></p>
</li>
<li><p>从本地机器拷贝文件到远程rsync服务器中。当DST路径信息包含”::”分隔符时启动该模式。如: <code>rsync­- av /databack root@192.168.78.192::www</code></p>
</li>
<li><p>列远程机的文件列表。这类似于rsync传输,不过只要在命令中省略掉本地机信息即可。如: <code>rsync­ -v rsync://192.168.78.192/www</code></p>
</li>
</ol>
<h2 id="选项"><a href="#选项" class="headerlink" title="选项"></a>选项</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div></pre></td><td class="code"><pre><div class="line">­-v, --­­verbose 详细模式输出。</div><div class="line">­-q, ­­--quiet 精简输出模式。</div><div class="line">­-c, ­­--checksum 打开校验开关,强制对文件传输进行校验。</div><div class="line">­-a, ­­--archive 归档模式,表示以递归方式传输文件,并保持所有文件属性,等于­rlptgoD。 ­</div><div class="line">-r, ­­--recursive 对子目录以递归模式处理。</div><div class="line">-­R, ­­--relative 使用相对路径信息。</div><div class="line">­-b, ­­--backup 创建备份,也就是对于目的已经存在有同样的文件名时,将老的文件重新命名为~filename。可以使用­­ suffix选项来指定不同的备份文件前缀。</div><div class="line">--­­backup­-dir 将备份文件(如~filename)存放在在目录下。</div><div class="line">-­suffix=SUFFIX 定义备份文件前缀。</div><div class="line">­-u, ­­--update 仅仅进行更新,也就是跳过所有已经存在于DST,并且文件时间晚于要备份的文件,不覆盖更新的文件。 ­</div><div class="line">-l, ­­--links 保留软链结。</div><div class="line">-­L, ­­--copy-links 想对待常规文件一样处理软链结。</div><div class="line">­--­copy-­unsafe-­links 仅仅拷贝指向SRC路径目录树以外的链结。</div><div class="line">­­--safe-­links 忽略指向SRC路径目录树以外的链结。</div><div class="line">­-H, ­­--hard-­links 保留硬链结。</div><div class="line">­-p, ­­--perms 保持文件权限。</div><div class="line">­-o, ­­--owner 保持文件属主信息。</div><div class="line">­-g, ­­--group 保持文件属组信息。</div><div class="line">­-D, ­­--devices 保持设备文件信息。</div><div class="line">­-t, ­­--times 保持文件时间信息。</div><div class="line">­-S, ­­--sparse 对稀疏文件进行特殊处理以节省DST的空间。</div><div class="line">­-n, ­­--dry­-run现实哪些文件将被传输。</div><div class="line">­-w, ­­--whole-file 拷贝文件,不进行增量检测。</div><div class="line">­-x, ­­-one-file-system 不要跨越文件系统边界。</div><div class="line">­-B, ­­--block­-size=SIZE 检验算法使用的块尺寸,默认是700字节。</div><div class="line">­-e, ­­--rsh=command 指定使用rsh、ssh方式进行数据同步。</div><div class="line">­--­rsync-path=PATH 指定远程服务器上的rsync命令所在路径信息。</div><div class="line">­-C, ­­--cvs-­exclude 使用和CVS一样的方法自动忽略文件,用来排除那些不希望传输的文件。</div><div class="line">­­--existing 仅仅更新那些已经存在于DST的文件,而不备份那些新创建的文件。</div><div class="line">­­--delete 删除那些DST中SRC没有的文件。</div><div class="line">­­--delete-­excluded 同样删除接收端那些被该选项指定排除的文件。</div><div class="line">­­--delete-after 传输结束以后再删除。</div><div class="line">­­--ignore-­errors 及时出现IO错误也进行删除。</div><div class="line">­­--max-delete=NUM 最多删除NUM个文件。</div><div class="line">­­--partial 保留那些因故没有完全传输的文件,以是加快随后的再次传输。</div><div class="line">­­--force 强制删除目录,即使不为空。</div><div class="line">­­--numeric-ids 不将数字的用户和组id匹配为用户名和组名。</div><div class="line">­­--timeout=time ip超时时间,单位为秒。</div><div class="line">­-I, --­­ignore-times 不跳过那些有同样的时间和长度的文件。</div><div class="line">­­--size-­only 当决定是否要备份文件时,仅仅察看文件大小而不考虑文件时间。</div><div class="line">­­--modify-­window=NUM 决定文件是否时间相同时使用的时间戳窗口,默认为0。</div><div class="line">­-T --­­temp-dir=DIR 在DIR中创建临时文件。</div><div class="line">­­--compare-­dest=DIR 同样比较DIR中的文件来决定是否需要备份。</div><div class="line">­-P等同于 ­--­partial。</div><div class="line">­­-progress 显示备份过程。</div><div class="line">­-z, ­--­compress 对备份的文件在传输时进行压缩处理。</div><div class="line">­­--exclude=PATTERN 指定排除不需要传输的文件模式。</div><div class="line">­­--include=PATTERN 指定不排除而需要传输的文件模式。</div><div class="line">­­--exclude-­from=FILE 排除FILE中指定模式的文件。</div><div class="line">­­--include-­from=FILE 不排除FILE指定模式匹配的文件。</div><div class="line">­­--version 打印版本信息。</div><div class="line">­­--address 绑定到特定的地址。</div><div class="line">­­--config=FILE 指定其他的配置文件,不使用默认的rsyncd.conf文件。</div><div class="line">­­--port=PORT 指定其他的rsync服务端口。</div><div class="line">­­--blocking-io 对远程shell使用阻塞IO。</div><div class="line">­--stats 给出某些文件的传输状态。</div><div class="line"></div><div class="line">­­--progress 在传输时现实传输过程。</div><div class="line">­­--log-­format=formAT 指定日志文件格式。</div><div class="line">­­--password­-file=FILE 从FILE中得到密码。</div><div class="line">­­--bwlimit=KBPS 限制I/O带宽,KBytes per second。</div><div class="line">-­h, --­­help 显示帮助信息。</div></pre></td></tr></table></figure>
<h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><h3 id="SSH方式"><a href="#SSH方式" class="headerlink" title="SSH方式"></a>SSH方式</h3><p>首先在服务端启动ssh服务:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">service sshd start</div><div class="line">启动 sshd: [确定]</div></pre></td></tr></table></figure></p>
<h3 id="使用rsync进行同步"><a href="#使用rsync进行同步" class="headerlink" title="使用rsync进行同步"></a>使用rsync进行同步</h3><p>接下来就可以在客户端使用rsync命令来备份服务端上的数据了,SSH方式是通过系统用户来进行备份的,如下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">rsync ­vzrtopg ­­progress ­e ssh ­­delete work@172.16.78.192:/www/* /databack/experiment/rsync</div><div class="line">work@172.16.78.192&apos;s password:</div><div class="line">receiving file list ...</div><div class="line">5 files to consider</div><div class="line">test/</div><div class="line">a</div><div class="line">0 100% 0.00kB/s 527:35:41 (1, 20.0% of 5) b</div><div class="line">67 100% 65.43kB/s 0:00:00 (2, 40.0% of 5) c</div><div class="line">0 100% 0.00kB/s 527:35:41 (3, 60.0% of 5) dd</div><div class="line">100663296 100% 42.22MB/s 0:00:02 (4, 80.0% of 5) sent 96 bytes received 98190 bytes 11563.06 bytes/sec total size is 100663363 speedup is 1024.19</div></pre></td></tr></table></figure></p>
<p>上面的信息描述了整个的备份过程,以及总共备份数据的大小。</p>
<h3 id="后台服务方式"><a href="#后台服务方式" class="headerlink" title="后台服务方式"></a>后台服务方式</h3><p>启动rsync服务,编辑 /etc/xinetd.d/rsync文件,将其中的 disable=yes改为 disable=no,并重启 xinetd服务,如下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">vi /etc/xinetd.d/rsync</div><div class="line">#default: off</div><div class="line"># description: The rsync server is a good addition to an ftp server, as it \ # allows crc checksumming etc.</div><div class="line">service rsync &#123;</div><div class="line">disable = no</div><div class="line">socket_type = stream</div><div class="line">wait = no</div><div class="line">user = root</div><div class="line">server = /usr/bin/rsync</div><div class="line">server_args = ­­daemon</div><div class="line">log_on_failure += USERID</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">/etc/init.d/xinetd restart</div><div class="line">停止 xinetd: [确定]</div><div class="line">启动 xinetd: [确定]</div></pre></td></tr></table></figure>
<p>创建配置文件,默认安装好rsync程序后,并不会自动创建rsync的主配置文件,需要手工来创建,其主配置文件<br>为“/etc/rsyncd.conf”,创建该文件并插入如下内容:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">vi /etc/rsyncd.conf</div><div class="line">uid=root</div><div class="line">gid=root</div><div class="line">max connections=4</div><div class="line">log file=/var/log/rsyncd.log pid file=/var/run/rsyncd.pid lock file=/var/run/rsyncd.lock secrets file=/etc/rsyncd.passwd hosts deny=172.16.78.0/22</div><div class="line">[www]</div><div class="line">comment= backup web path=/www</div><div class="line">read only = no exclude=test</div><div class="line">auth users=work</div></pre></td></tr></table></figure></p>
<p>创建密码文件,采用这种方式不能使用系统用户对客户端进行认证,所以需要创建一个密码文件,其格式 为“username:password”,用户名可以和密码可以随便定义,最好不要和系统帐户一致,同时要把创建的密码文 件权限设置为600,这在前面的模块参数做了详细介绍。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">echo &quot;work:abc123&quot; &gt; /etc/rsyncd.passwd</div><div class="line">chmod 600 /etc/rsyncd.passwd</div></pre></td></tr></table></figure>
<p>备份,完成以上工作,现在就可以对数据进行备份了,如下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">rsync ­avz ­­progress ­­delete work@172.16.78.192::www /databack/experiment/rsync</div><div class="line">Password:</div><div class="line">receiving file list ...</div><div class="line">6 files to consider</div><div class="line">./ files...</div><div class="line">a</div><div class="line">0 100% 0.00kB/s 528:20:41 (1, 50.0% of 6)</div><div class="line">b</div><div class="line">67 100% 65.43kB/s 0:00:00 (2, 66.7% of 6)</div><div class="line">c</div><div class="line">0 100% 0.00kB/s 528:20:41 (3, 83.3% of 6)</div><div class="line">dd</div><div class="line">100663296 100% 37.49MB/s 0:00:02 (4, 100.0% of 6) sent 172 bytes received 98276 bytes 17899.64 bytes/sec total size is 150995011 speedup is 1533.75</div></pre></td></tr></table></figure></p>
<p>恢复,当服务器的数据出现问题时,那么这时就需要通过客户端的数据对服务端进行恢复,但前提是服务端允许客 户端有写入权限,否则也不能在客户端直接对服务端进行恢复,使用rsync对数据进行恢复的方法如下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">rsync ­avz ­­progress /databack/experiment/rsync/ work@172.16.78.192::www</div><div class="line">Password:</div><div class="line">building file list ...</div><div class="line">6 files to consider</div><div class="line">./</div><div class="line">a</div><div class="line">b</div><div class="line">67 100% 0.00kB/s 0:00:00 (2, 66.7% of 6)</div><div class="line">c</div><div class="line">sent 258 bytes received 76 bytes 95.43 bytes/sec total size is 150995011 speedup is 452080.87</div></pre></td></tr></table></figure></p>
<p>来自: <a href="http://man.linuxde.net/rsync" target="_blank" rel="external">http://man.linuxde.net/rsync</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;rsync命令是一个远程数据同步工具，可通过LAN/WAN快速同步多台主机间的文件。&lt;br&gt;rsync使用所谓的“rsync算法”来使本地和远程两个主机之间的文件达到同步，这个算法只传送两个文件的不同部分，而不是每次都整份传送，因此速度相当快。&lt;br&gt;rsync是一个功能非常强大的工具，其命令也有很多功能特色选项，我们下面就对它的选项一一进行分析说明。&lt;/p&gt;
    
    </summary>
    
      <category term="Linux" scheme="https://weizhimiao.github.io/categories/Linux/"/>
    
    
      <category term="rsync" scheme="https://weizhimiao.github.io/tags/rsync/"/>
    
  </entry>
  
  <entry>
    <title>PHP输出缓冲区</title>
    <link href="https://weizhimiao.github.io/2016/10/07/PHP%E8%BE%93%E5%87%BA%E7%BC%93%E5%86%B2%E5%8C%BA/"/>
    <id>https://weizhimiao.github.io/2016/10/07/PHP输出缓冲区/</id>
    <published>2016-10-07T13:30:00.000Z</published>
    <updated>2016-10-08T15:27:45.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是缓冲区"><a href="#什么是缓冲区" class="headerlink" title="什么是缓冲区?"></a>什么是缓冲区?</h2><p>简单而言,缓冲区的作用就是,把输入或者输出的内容先放进内存,而不显示或者读取.</p>
<p>其实缓冲区最本质的作用就是,协调高速CPU和相对缓慢的IO设备(磁盘等)的运作.</p>
<h2 id="PHP在执行的时候-在什么地方有用到缓冲区"><a href="#PHP在执行的时候-在什么地方有用到缓冲区" class="headerlink" title="PHP在执行的时候,在什么地方有用到缓冲区?"></a>PHP在执行的时候,在什么地方有用到缓冲区?</h2><p>想要了解PHP的缓冲区,就要知道执行PHP的时候,缓冲区被设置到了什么地方.</p>
<p>当执行PHP的时候,如果碰到了echo print_r之类的会输出数据的代码,PHP就会将要输出的数据放到PHP自身的缓冲区,等待输出.</p>
<p>当PHP自身的缓冲区接到指令,指示要输出缓冲区的内容时,将会把缓冲区内的数据输出到apache上, apache接受到PHP输出的数据,然后再把该数据存在到apache自身的缓冲区内,等到输出。</p>
<p>当apache接受到指令,只是要输出缓冲区的内容时, 将会把缓冲区的内容输出,返回到浏览器.</p>
<p>由此可见,PHP要输出数据的时候,将会经过两个缓冲区(先是自身的,然后是apache的),再返回到浏览器.</p>
<a id="more"></a>
<h2 id="缓冲区在PHP中起到什么作用"><a href="#缓冲区在PHP中起到什么作用" class="headerlink" title="缓冲区在PHP中起到什么作用?"></a>缓冲区在PHP中起到什么作用?</h2><h3 id="最常见的就是在使用header函数之前"><a href="#最常见的就是在使用header函数之前" class="headerlink" title="最常见的就是在使用header函数之前"></a>最常见的就是在使用header函数之前</h3><p>header();函数要求在其之前不能有输出。如在header之前有输出时会报错： Cannot modify header information – headers already sent by;</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">echo &quot;this is test&quot;;</div><div class="line">header(&quot;LOCATION http://www.baidu.com&quot;);</div></pre></td></tr></table></figure>
<p>出现这个错误的原因是, 在header之前已经输出了某些数据,而输出这些数据的同时, apache将会同时发送一个响应状态到浏览器上(既然有输出,即这个请求是有效的),而其后你又再次使用header函数发送http头,则会返回这个错误,错误的意思是:HTTP头已经发送出去了,你不能对他再做修改.</p>
<p>为什么使用缓冲区可以避免这个错误呢?</p>
<p>因为header函数是不受缓冲区影响的,当一碰到header函数的时候,PHP马上执行apache发送这一个http头都浏览器.<br>而输出的数据PHP打开输出缓冲区后, 这些数据将会存放在缓冲区,等待输出.这样就可以避免了之前所发生的错误.</p>
<h3 id="通过PHP写文件下载程序的时候"><a href="#通过PHP写文件下载程序的时候" class="headerlink" title="通过PHP写文件下载程序的时候."></a>通过PHP写文件下载程序的时候.</h3><p>为了让文件下载更安全,同时提高更多的可控性,很多朋友都喜欢用PHP写文件下载页面.</p>
<p>其原理很简单,就是通过fwrite把文件内容读出并显示,然后通过header来发送HTTP头,让浏览器知道这是一个附件,这样就可以达到提供下载的效果.</p>
<p>如果用上面的办法提供下载页面,会碰到一个效率问题,如果一个文件很大,假设为100M,那么在不开启缓冲区输出的情况下,必须要把100M数据全部读出,然后一次返回到页面上,如果这样做,用户将会在所有数据读完之后才会得到响应,降低了用户体验感.</p>
<p>如果开启了输出缓冲区,当PHP程序读完文件的某一段,然后马上输出到apache,然后让apache马上返回到浏览器,这样就可以减少用户等待时间.</p>
<p>那后面的数据怎么办呢?</p>
<p>我们可以写一个while循环,一直一段一段地读取文件，每读一段,就马上输出,直到把文件全部输出为止,这样浏览器就可以持续地接受到数据,而不必等到所有文件读取完毕.</p>
<p>另外,该做法还解决了另外一个很严重的问题.</p>
<p>例如一个文件是100M,如果不开启缓冲区的情况下,则需要把100M文件全部读入内存,然后再输出.</p>
<p>但是,如果PHP程序做了内存限制呢?<br>为了保证服务器的稳定,管理员通常会把PHP的执行内存设一个限制(通过php.ini总的memory_limit, 其默认值是8M), 也就是每个PHP程序使用的内存不能使用超过这个值的内存.</p>
<p>假设该值为8M,而要读入的文件是100M,根本就没有足够的内存来读入该文件.这个时候,我们就需要用到上面的办法来解决这个问题,每次只读某一段,这样就可以避免了内存的限制</p>
<h3 id="静态文件缓存"><a href="#静态文件缓存" class="headerlink" title="静态文件缓存"></a>静态文件缓存</h3><p>现在很多公司有这么一个需求, 就是某一个页面在第一次访问的时候,会执行PHP,然后把显示的内容返回到浏览器,同时需要把这次显示的内容保存到服务器上,这样下次访问的时候,就直接把保存在服务器上的文件直接显示,而不需要通过PHP来做操作这就是所谓的”静态页面缓存”.</p>
<p>那怎么样才能做到把内容返回到浏览器的同时把数据保存到服务器上呢?</p>
<p>这就要用到输出缓冲区了.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">ob_start();</div><div class="line">echo &apos;aaa&apos;;</div><div class="line">$string = ob_get_contents();</div><div class="line">file_put_contents(&apos;a.html&apos;, $string);</div><div class="line">ob_flush();</div><div class="line">flush();</div></pre></td></tr></table></figure>
<h2 id="与输出缓冲区有关的配置"><a href="#与输出缓冲区有关的配置" class="headerlink" title="与输出缓冲区有关的配置"></a>与输出缓冲区有关的配置</h2><p>在PHP.INI中,有两个跟缓冲区紧密相关的配置项</p>
<h3 id="output-buffering"><a href="#output-buffering" class="headerlink" title="output_buffering"></a>output_buffering</h3><p>该配置直接影响的是php本身的缓冲区,有3种配置参数.on/off/xK(x为某个整型数值);<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">on    - 开启缓冲区</div><div class="line">off    - 关闭缓冲区</div><div class="line">256k    - 开启缓冲区,而且当缓冲区的内容超过256k的时候,自动刷新缓冲区(把数据发送到apache);</div></pre></td></tr></table></figure></p>
<h3 id="implicit-flush"><a href="#implicit-flush" class="headerlink" title="implicit_flush"></a>implicit_flush</h3><p>该配置直接影响apache的缓冲区,有2种配置参数. on/off<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">on    - 自动刷新apache缓冲区,也就是,当php发送数据到apache的缓冲区的时候,不需要等待其他指令,直接就把输出返回到浏览器</div><div class="line">off    - 不自动刷新apache缓冲区,接受到数据后,等待刷新指令</div></pre></td></tr></table></figure></p>
<h2 id="与缓冲区有关的函数"><a href="#与缓冲区有关的函数" class="headerlink" title="与缓冲区有关的函数"></a>与缓冲区有关的函数</h2><ul>
<li><p>ob_implicit_flush</p>
<blockquote>
<p>作用和implicit_flush一样,是否自动刷新apache的缓冲区</p>
</blockquote>
</li>
<li><p>flush</p>
<blockquote>
<p>作用是发送指令到apache,让apache刷新自身的输出缓冲区.</p>
</blockquote>
</li>
<li><p>ob_start</p>
<blockquote>
<p>打开输出缓冲区,无论php.ini的文件如何配置,如果使用该函数,即使output_buffering设置成off,也会打开输出缓冲区</p>
<p>ob_start函数还接受一个参数,该参数是一个函数的回调,意思是,在输入缓冲区内容之前,需要使用调用传递进来的参数把缓冲区的内容处理一次,再放入缓冲区内</p>
</blockquote>
</li>
<li><p>ob_flush</p>
<blockquote>
<p>指示php本身刷新自身的缓冲区,把数据发送到apache</p>
</blockquote>
</li>
<li><p>ob_clean</p>
<blockquote>
<p>清除php缓冲区里面的内容</p>
</blockquote>
</li>
<li><p>ob_end_clean</p>
<blockquote>
<p>清除php缓冲区内的内容,并且关闭输出缓冲区</p>
</blockquote>
</li>
<li><p>ob_end_flush</p>
<blockquote>
<p>把php自身的缓冲区里的内容发送到apache,并把清除自身缓冲区内的内容</p>
</blockquote>
</li>
<li><p>ob_get_clean</p>
<blockquote>
<p>获取缓冲区的内容之后,清除缓冲区.</p>
</blockquote>
</li>
<li><p>ob_get_contents</p>
<blockquote>
<p>获取输出缓冲区里的内容</p>
</blockquote>
</li>
<li><p>ob_get_flush</p>
<blockquote>
<p>获取缓冲区里的内容,并且把这些内容发送到apache</p>
</blockquote>
</li>
<li><p>ob_get_length</p>
<blockquote>
<p>获取缓冲区里内容的长度</p>
</blockquote>
</li>
<li><p>ob_list_handlers</p>
<blockquote>
<p>获取运行ob_start时,所回调的函数名称, 例如:</p>
</blockquote>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">ob_start(‘ob_gzhandler’);</div><div class="line">print_r(ob_list_handlers);</div></pre></td></tr></table></figure>
<p>将打印出ob_gzhandler;</p>
<ul>
<li>ob_gzhandler<blockquote>
<p>该函数的作用是作为ob_start的回调参数, 在缓冲区刷新之前,会调用该函数对数据进行到底gzip或者deflate压缩.这个函数需要zlib扩展的支持.</p>
</blockquote>
</li>
</ul>
<h2 id="使用缓冲区的相关内容"><a href="#使用缓冲区的相关内容" class="headerlink" title="使用缓冲区的相关内容"></a>使用缓冲区的相关内容</h2><ul>
<li><p>ob_flush和flush的次序关系.</p>
<blockquote>
<p>上面的分析可以看出,ob_flush是和php自身相关的,而flush操作的是apache的缓冲区,所有我们在使用这两个函数的时候,需要先执行ob_flush,<br>再执行flush,因为我们需要先把数据从PHP上发送到apache,然后再由apache返回到浏览器.如果php还没有把数据刷新到apache,就调用了flush,则apache无任何数据返回到浏览器.</p>
</blockquote>
</li>
<li><p>有的浏览器,如果接受到的字符太少,则不会把数据显示出来</p>
<blockquote>
<p>例如老版的IE(必须要大于256k才显示).这样就会造成一个疑问, 明明在php和apache都进行了刷新缓冲区的操作,但是浏览器就是没有出现自己想要的数据,也许就是这个原因造成的.所以才测试的时候,可以在输出数据的后面加上多个空格,以填满数据,确定不会浏览器造成这类诡异的问题.</p>
</blockquote>
</li>
<li><p>有些webserver,他自身的输出缓冲区会有一些限制</p>
<blockquote>
<p>比如nginx,他有一个配置fastcgi_buffer_size 4k, 就是是表明,当自身的输出缓冲区的内容达到4K才会刷新,所以为了保证内容的数据,可以添加以下代码,保证内容长度</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;?php</div><div class="line">  echo str_repeat(&quot; &quot;,4096);</div><div class="line">?&gt;</div></pre></td></tr></table></figure>
</blockquote>
</li>
<li><p>在apache中,如果你开启了mod_gzip的压缩模块,这样可能会导致你的flush函数刷新不成功</p>
<blockquote>
<p>其原因是,mod_gzip有自己的输出缓冲区,当php执行了flush函数,指示apache刷新输出缓冲区,但是内容需要压缩,apache就把内容输出到自身的mod_gzip模块,mod_gzip也有自身的输出 缓冲区,他也不会马上输出,所以造成了内容不能马上输出.为了改善这个情况,可以关闭mod_gzip模块,或者在httpd.conf增加以下内容,以禁止压缩</p>
</blockquote>
</li>
</ul>
<p>转自：<a href="http://www.keepmyway.com/index.php/124.html" target="_blank" rel="external">http://www.keepmyway.com/index.php/124.html</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;什么是缓冲区&quot;&gt;&lt;a href=&quot;#什么是缓冲区&quot; class=&quot;headerlink&quot; title=&quot;什么是缓冲区?&quot;&gt;&lt;/a&gt;什么是缓冲区?&lt;/h2&gt;&lt;p&gt;简单而言,缓冲区的作用就是,把输入或者输出的内容先放进内存,而不显示或者读取.&lt;/p&gt;
&lt;p&gt;其实缓冲区最本质的作用就是,协调高速CPU和相对缓慢的IO设备(磁盘等)的运作.&lt;/p&gt;
&lt;h2 id=&quot;PHP在执行的时候-在什么地方有用到缓冲区&quot;&gt;&lt;a href=&quot;#PHP在执行的时候-在什么地方有用到缓冲区&quot; class=&quot;headerlink&quot; title=&quot;PHP在执行的时候,在什么地方有用到缓冲区?&quot;&gt;&lt;/a&gt;PHP在执行的时候,在什么地方有用到缓冲区?&lt;/h2&gt;&lt;p&gt;想要了解PHP的缓冲区,就要知道执行PHP的时候,缓冲区被设置到了什么地方.&lt;/p&gt;
&lt;p&gt;当执行PHP的时候,如果碰到了echo print_r之类的会输出数据的代码,PHP就会将要输出的数据放到PHP自身的缓冲区,等待输出.&lt;/p&gt;
&lt;p&gt;当PHP自身的缓冲区接到指令,指示要输出缓冲区的内容时,将会把缓冲区内的数据输出到apache上, apache接受到PHP输出的数据,然后再把该数据存在到apache自身的缓冲区内,等到输出。&lt;/p&gt;
&lt;p&gt;当apache接受到指令,只是要输出缓冲区的内容时, 将会把缓冲区的内容输出,返回到浏览器.&lt;/p&gt;
&lt;p&gt;由此可见,PHP要输出数据的时候,将会经过两个缓冲区(先是自身的,然后是apache的),再返回到浏览器.&lt;/p&gt;
    
    </summary>
    
      <category term="PHP" scheme="https://weizhimiao.github.io/categories/PHP/"/>
    
    
  </entry>
  
  <entry>
    <title>PHP项目权限控制实现小结</title>
    <link href="https://weizhimiao.github.io/2016/10/07/PHP%E9%A1%B9%E7%9B%AE%E6%9D%83%E9%99%90%E6%8E%A7%E5%88%B6%E5%AE%9E%E7%8E%B0%E5%B0%8F%E7%BB%93/"/>
    <id>https://weizhimiao.github.io/2016/10/07/PHP项目权限控制实现小结/</id>
    <published>2016-10-07T12:00:00.000Z</published>
    <updated>2016-10-07T09:49:06.000Z</updated>
    
    <content type="html"><![CDATA[<p>RBAC，Role Based Access Control,基于角色的访问控制。实体关系如下：</p>
<p><img src="http://n.sinaimg.cn/games/3ece443e/20161007/RBACShiTiGuanXi.png" alt="RBAC实体关系"></p>
<a id="more"></a>
<h2 id="实现逻辑设计"><a href="#实现逻辑设计" class="headerlink" title="实现逻辑设计"></a>实现逻辑设计</h2><p>用户表，user</p>
<ul>
<li>id,用户标识</li>
<li>username，用户名</li>
<li>passwd，密码</li>
<li>status,状态</li>
</ul>
<p>角色表，role</p>
<ul>
<li>id,角色标识</li>
<li>name，角色名称</li>
<li>desc，角色描述</li>
<li>status，状态</li>
</ul>
<p>权限节点表，node</p>
<ul>
<li>id，权限节点标识</li>
<li>name，权限名称</li>
<li>title，权限描述</li>
<li>status，状态</li>
<li>sort，排序</li>
<li>pid，父标识</li>
<li>level，层级（一般，1、项目，2、模块（类），3、操作（方法））</li>
</ul>
<p>用户角色关系表，role_user</p>
<ul>
<li>id，关系标识</li>
<li>role_id,角色标识</li>
<li>user_id,用户标识</li>
</ul>
<p>角色权限关系表, access</p>
<ul>
<li>id，关系标识</li>
<li>role_id，角色标识</li>
<li>node_id，权限标识</li>
</ul>
<h2 id="实现过程"><a href="#实现过程" class="headerlink" title="实现过程"></a>实现过程</h2><p>角色 –&gt; 权限节点 –&gt; 角色权限关系 –&gt; 用户 –&gt; 角色用户关系</p>
<p>角色：</p>
<ul>
<li>创建角色</li>
<li>角色管理</li>
</ul>
<p>权限</p>
<ul>
<li>添加权限节点</li>
<li>权限管理</li>
</ul>
<p>权限节点列表的『权限结构』的递归显示问题，可用无限制分类来实现。</p>
<p>无限制分类简单实现<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Tree</span></span>&#123;</div><div class="line">  <span class="keyword">static</span> <span class="keyword">public</span> $treeList = <span class="keyword">array</span>();  <span class="comment">//存放无限制分类结果</span></div><div class="line"></div><div class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">create</span><span class="params">($data, $pid=<span class="number">0</span>)</span></span>&#123;</div><div class="line">    <span class="keyword">foreach</span> ($data <span class="keyword">as</span> $key =&gt; $value) &#123;</div><div class="line">      <span class="keyword">if</span>($value[<span class="string">'pid'</span>] == $pid)&#123;</div><div class="line">          <span class="keyword">self</span>::$treeList[] = $value;</div><div class="line">          <span class="keyword">unset</span>($data[$key]);</div><div class="line">          <span class="keyword">self</span>::$create($data, $value[<span class="string">'id'</span>]);</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">self</span>::$treeList;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>角色权限关系</p>
<ul>
<li>添加角色-权限节点关系（添加角色新权限时，必须先删除原来的权限设置）</li>
<li>管理角色-权限节点关系</li>
</ul>
<p>用户：</p>
<ul>
<li>添加用户</li>
<li>用户管理</li>
</ul>
<p>用户角色关系</p>
<ul>
<li>添加用户-角色关系</li>
<li>管理用户-角色关系</li>
</ul>
<h2 id="权限控制应用"><a href="#权限控制应用" class="headerlink" title="权限控制应用"></a>权限控制应用</h2><p>实现权限控制方法步骤：</p>
<ol>
<li>通过用户-角色关系表，获得用户所属角色</li>
<li>从权限表中，获得所有权限列表，并应用无限级分类实现分类排序</li>
<li>根据用户角色，通过角色-权限关系表获得当前拥有的权限几点信息</li>
<li>组合所有权限列表，和当前拥有的权限数据，在所有权限节点列表中标识当前用户是否具有对各个节点的权限。去除当前用户没有权限操作的权限节点。将当前的权限信息保存到当前用户的会话中。</li>
<li>用户进行操作各个权限节点时，首先检测当前的操作是否在会话中的权限信息中存在。不存在则按照权限不足处理，存在则继续进行操作。</li>
</ol>
<p>over~</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;RBAC，Role Based Access Control,基于角色的访问控制。实体关系如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://n.sinaimg.cn/games/3ece443e/20161007/RBACShiTiGuanXi.png&quot; alt=&quot;RBAC实体关系&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="PHP" scheme="https://weizhimiao.github.io/categories/PHP/"/>
    
    
      <category term="权限控制" scheme="https://weizhimiao.github.io/tags/%E6%9D%83%E9%99%90%E6%8E%A7%E5%88%B6/"/>
    
      <category term="RBAC" scheme="https://weizhimiao.github.io/tags/RBAC/"/>
    
  </entry>
  
  <entry>
    <title>Linux常用命令</title>
    <link href="https://weizhimiao.github.io/2016/10/06/Linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    <id>https://weizhimiao.github.io/2016/10/06/Linux常用命令/</id>
    <published>2016-10-06T14:30:00.000Z</published>
    <updated>2016-10-07T13:34:14.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Linux命令格式"><a href="#Linux命令格式" class="headerlink" title="Linux命令格式"></a>Linux命令格式</h2><p>格式：命令    [选项]    [参数]</p>
<p>例如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">#ls 	-list 	显示目录下内容</div></pre></td></tr></table></figure></p>
<blockquote>
<p>命令操作的对象（文件、目录、用户、进程）<br>Linux中以”.”开头的文件是隐藏文件</p>
</blockquote>
<p>提示符：[root@localhost src]#</p>
<blockquote>
<p>[当前登录用户@主机名 当前所在目录]#</p>
<h1 id="超级用户"><a href="#超级用户" class="headerlink" title="超级用户"></a>超级用户</h1><p>$    普通用户</p>
</blockquote>
<p>当前所在目录：    用户家目录</p>
<blockquote>
<p>   管理员        /root<br>   普通用户        /home/用户名</p>
</blockquote>
<p><strong>tips：</strong></p>
<blockquote>
<p>ctrl +  c        强制终止<br>ctrl+l            清屏<br>ctrl+u        光标删除到行首<br>ctrl+a        光标移动到行首<br>ctrl+e        光标移动到行尾</p>
</blockquote>
<a id="more"></a>
<h2 id="目录操作命令"><a href="#目录操作命令" class="headerlink" title="目录操作命令"></a>目录操作命令</h2><p><strong>切换所在目录</strong></p>
<p><code>cd</code></p>
<p>例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">cd  /usr/local/src</div><div class="line">cd   ~	或cd	  	进入当前用户的家目录</div><div class="line">cd  -		进入上次目录</div><div class="line">cd  ..		进入上一级目录</div><div class="line">cd  .		进入当前目录</div></pre></td></tr></table></figure></p>
<p><strong>显示当前所在目录</strong></p>
<p><code>pwd</code></p>
<p><strong>建立目录</strong></p>
<p><code>mkdir</code></p>
<p>例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mkdir  	-p  11/22/33/44		递归建立目录</div></pre></td></tr></table></figure></p>
<p><strong>删除目录</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">rmdir	目录		只能删除空目录</div><div class="line"></div><div class="line">rm	文件名		删除文件</div><div class="line">rm	-rf	目录		删除文件和目录</div><div class="line">		-f	强制</div><div class="line">		-r	递归、删除目录</div></pre></td></tr></table></figure></p>
<p><strong>显示指定目录下的所有内容的目录树</strong></p>
<p>tree    目录名</p>
<p>例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">tree	/var/</div></pre></td></tr></table></figure></p>
<h2 id="文件操作命令"><a href="#文件操作命令" class="headerlink" title="文件操作命令"></a>文件操作命令</h2><p><strong>创建空文件或修改文件时间</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">touch  文件名</div></pre></td></tr></table></figure></p>
<p><strong>删除</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">rm  –rf  文件名</div><div class="line">		-f	强制</div><div class="line">		-r	删除目录</div></pre></td></tr></table></figure></p>
<p><strong>查看文件内容</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">cat	文件名		（从头到尾）</div><div class="line">		-n	列出行号</div><div class="line">more	文件名		（分屏显示文件内容）</div><div class="line">空格向下翻		b  向上翻		q  退出</div><div class="line">head	文件名		（显示文件头几行）</div><div class="line">	head  –n  行数	文件名	指定显示文件头几行</div><div class="line">	head  -20  文件名</div></pre></td></tr></table></figure></p>
<p><strong>链接文件</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">ln  -s  源文件   目标文件		（文件名都必须写绝对路径）</div><div class="line">链接文件相当于windows中的快捷方式，链接文件和源文件修改一个两个都变，删除原文件，软链接打不开。</div></pre></td></tr></table></figure></p>
<h2 id="文件和目录都能操作的命令"><a href="#文件和目录都能操作的命令" class="headerlink" title="文件和目录都能操作的命令"></a>文件和目录都能操作的命令</h2><p><strong>删除文件或目录</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">rm</div></pre></td></tr></table></figure></p>
<p><strong>复制</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">cp  源文件   目标文件</div><div class="line">		-r	复制目录</div><div class="line">		-p	带文件属性复制</div><div class="line">		-d	若源文件为链接文件，则复制链接属性</div><div class="line">		-a	相当于  -pdr</div><div class="line">例：</div><div class="line">cp   aa  /tmp/			原名复制</div><div class="line">cp  aa  /tmp/bb			改名复制</div></pre></td></tr></table></figure></p>
<p><strong>剪切或改名</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">mv	源文件   目标位置</div><div class="line">剪切目录不需要加“-r”选项（特殊）</div><div class="line">例：</div><div class="line">mv  /root/aa  /tmp/	剪切</div><div class="line">mv  aa  bb			改名</div></pre></td></tr></table></figure></p>
<h2 id="权限管理"><a href="#权限管理" class="headerlink" title="权限管理"></a>权限管理</h2><p><strong>权限位</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">-rw-r--r--   1   root root     0 08-11 01:45 aa</div></pre></td></tr></table></figure></p>
<p>权限位是十位<br>第一位：代表文件类型</p>
<blockquote>
<p>-    普通文件<br>   d    目录文件<br>   f    链接文件</p>
</blockquote>
<p>常见的文件类型就有以上3种，Linux和Unix系统中共有7种文件类型，分别有</p>
<pre><code>-    Block        块设备文件，如某个磁盘分区，软驱和光驱等。
-    Char        字符设备，如键盘、打印机等。
-    Dir        目录类型，目录也是文件的一种。
-    Fifo        命名管道，常用于将信息从一个进程传递到另一个进程。
-    File        普通文件。
-    Link        符号链接文件，即指向文件指针的指针。
-    Unknown    未知类型
</code></pre><p>其他九位：属主权限u        属主权限g        其他人权限o</p>
<pre><code>-    r    读        4
-    w    写        2
-    x    执行        1
</code></pre><p><strong>修改权限</strong></p>
<p>chmod</p>
<blockquote>
<p>格式：chmod  {u,g,o }{+,-,=}{w,r,x} 文件名或目录</p>
</blockquote>
<p>例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">chmod  u+x  aa</div><div class="line">chmod u-x  aa</div><div class="line">chmod  g+w,o-r   aa</div><div class="line">chmod  u=rwx  aa</div><div class="line">chmod  755  aa</div><div class="line">chmod  644  aa</div></pre></td></tr></table></figure></p>
<p><strong>权限对于文件和目录的意义</strong></p>
<p>对于文件的意义</p>
<ul>
<li>r：读取文件的内容。cat、more、head、tail</li>
<li>w：编辑、修改文件内容。vi、echo</li>
<li>x：可执行</li>
</ul>
<p>对于目录的意义</p>
<ul>
<li>r：可以查询目录下的文件名。ls</li>
<li>w：具有修改目录结构的权限。比如新建文件和目录，删除此目录下文件和目录，剪切等操作。touch、mv、cp</li>
<li>x：可以进入目录    。    cd</li>
</ul>
<p>对于目录来说，r和x权限一般是一起给的，及对于目录的权限一般至少会给到6.</p>
<p><strong>更改文件或目录的属主和属组命令</strong></p>
<p>chown</p>
<blockquote>
<p>格式：chown  用户名  文件名  </p>
</blockquote>
<p>例<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">chown user1  aa</div><div class="line">chown  user1：user1   aa	（更改属主的同时改变属主）</div></pre></td></tr></table></figure></p>
<h2 id="帮助命令"><a href="#帮助命令" class="headerlink" title="帮助命令"></a>帮助命令</h2><p><strong>查找命令的的帮助</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">man  命令名</div></pre></td></tr></table></figure></p>
<p><strong>查看常见的选项</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">命令  --help</div></pre></td></tr></table></figure></p>
<p>Tips：Linux中通配符和正则的使用原则：</p>
<ul>
<li><p>在搜索目录或者文件名时Linux使用的是通配符，如find.        </p>
<blockquote>
<p>Find:    在系统当中搜索符合条件的文件名，如果需要匹配，使用通配符匹配<br>通配符是完全匹配</p>
</blockquote>
</li>
<li><p>在搜索文件中的内容是，Linux使用的事正则表达式，如grep.        </p>
<blockquote>
<p>Grep：    在文件当中搜索符合条件的字符串，如果需要匹配，使用正则表达式匹配<br>正则表达是包含匹配</p>
</blockquote>
</li>
</ul>
<h2 id="查找命令"><a href="#查找命令" class="headerlink" title="查找命令"></a>查找命令</h2><p><strong>查找命令的命令，同时查看帮助文档的位置</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">whereis</div><div class="line">格式：whereis   命令</div></pre></td></tr></table></figure>
<p><strong>搜索命令</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">find</div><div class="line">格式：find   查找位置   -name   文件名</div><div class="line">例</div><div class="line">find /   -name   aabbcc    </div><div class="line">		-user   用户名		按属主用户查找文件</div><div class="line">		-group   组名		按属组组名查找文件</div><div class="line">		-nouser			查找没有属主的文件</div><div class="line">按照文件属性查找：</div><div class="line">		-name			按照文件名</div><div class="line">		-size 				文件大小。+50k：大于50k，-50k：小雨50k，50k：等于50k	（可用的单位有k，M）</div><div class="line">		-type				文件类型。（f:普通文件，l：链接文件，d目录文件）</div><div class="line">		-perm	644		按文件的权限值查找。</div><div class="line">		-iname			文件名查找，不区分大小写</div><div class="line">		-inum				按照文件i节点查找</div><div class="line">在查找出的结果中，直接进行命令操作。</div><div class="line">find  /var/log/   -mtime   +10  -exec   rm  -rf  &#123;&#125;  \;	查找出十天前修改的文件名删除</div><div class="line">find   /root  -inum   112033   -exec  ls   -l   &#123;&#125;  \;	用文件i节点查找到文件并且显示文件的长格式。</div></pre></td></tr></table></figure></p>
<p><strong>查找文件中的字符串</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">grep</div><div class="line">原理：先把命令操作的结果存在文件中，然后后面的命令去操作文件</div><div class="line">格式：grep  “字符串”   文件名</div><div class="line">例：</div><div class="line">grep  -i  “root” /etc/passwd</div><div class="line">		-i	忽略大小写</div><div class="line">		-v	反向选择</div><div class="line">比较：</div><div class="line">find：在系统当中搜索符合条件的文件名，如果需要匹配，使用通配符匹配。通配符是完全匹配。</div><div class="line">grep：在文件当中搜索符合条件的字符串，如果需要匹配，使用正则表达式匹配，正则表达式是包含匹配</div></pre></td></tr></table></figure></p>
<p><strong>管道符</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">命令1  |  命令2  |   命令3		命令1的执行结果，作为命令2执行的执行条件，以此类推。</div><div class="line">例：</div><div class="line">netstat   -an  |  grep  ESTABLISHED  |  wc  -l	统计正在连接的网络连接的个数</div><div class="line">cat  文件名  |  grep  “字符串”  	提取含有字符串的行</div><div class="line">ls  -l  /etc  |  more 		分屏显示ls内容</div><div class="line">ll  /etc、  |  grep  my</div></pre></td></tr></table></figure></p>
<h2 id="压缩和解压缩"><a href="#压缩和解压缩" class="headerlink" title="压缩和解压缩"></a>压缩和解压缩</h2><p>Linux中常见的压缩包格式</p>
<blockquote>
<p>.gz        bz2        Linux可以识别的常见压缩格式<br>.tar.gz    .tar.bz2    常见的压缩和打包命令</p>
</blockquote>
<p><strong>压缩打包命令</strong></p>
<ul>
<li><p>压缩同时打包</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">tar  -zcvf   压缩文件名	源文件</div><div class="line">tar  -zcvf  aa.tar.gz   aa</div><div class="line">	-z:识别.gz格式</div><div class="line">	-c:压缩</div><div class="line">	-v:显示压缩过程</div><div class="line">	-f:指定压缩包名</div></pre></td></tr></table></figure>
</li>
<li><p>解压缩同时解打包</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">tar   -zxvf  压缩文件名</div><div class="line">	-x: 解压缩</div></pre></td></tr></table></figure>
</li>
<li><p>压缩同时打包</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">tar  -jcvf  压缩文件名	源文件</div><div class="line">	-j：识别.tar.gz2文件格式</div></pre></td></tr></table></figure>
</li>
<li><p>解打包同时解压缩</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">tar  -jxvf  aa.tar.bz2</div></pre></td></tr></table></figure>
</li>
<li><p>查看不解包</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">tar   -ztvf   aa.tar.gz</div><div class="line">tar  -jtvf   aa.tar.bz2</div><div class="line">	-t:  只查看，不解压</div></pre></td></tr></table></figure>
</li>
<li><p>解压到指定压缩位置</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">tar  -jxvf  root.tar.bz2   -C  /tmp/  	（-C一定要写在后边）</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="关闭和重启命令"><a href="#关闭和重启命令" class="headerlink" title="关闭和重启命令"></a>关闭和重启命令</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">shutdown		没有特殊情况建议使用此命令来关机</div><div class="line">shutdown  -h  now	立刻关机</div><div class="line">	-h	关机</div><div class="line">	-r 	重启</div><div class="line"></div><div class="line">reboot 重启命令</div></pre></td></tr></table></figure>
<h2 id="挂载命令"><a href="#挂载命令" class="headerlink" title="挂载命令"></a>挂载命令</h2><p>Linux下所有的存储设备都必须挂载使用，包括硬盘</p>
<ul>
<li><p>挂载</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">mount</div><div class="line">设备文件：</div><div class="line">	/dev/sda1		第一个SCSI硬盘的第一个分区</div><div class="line">	/dev/cdrom		光盘（链接）</div><div class="line">	/dev/hdc		光盘		CentOS 5.5</div><div class="line">	/dev/sr0		光盘		CentOS6.x</div><div class="line">mount  -t  文件系统  设备描述文件   挂载点（已经存在的空目录）</div><div class="line">mount  -t iso9660  /dev/cdrom  /mnt/cdrom(-t iso9660也可省略)</div><div class="line">mount  /dev/cdrom  /mnt/cdrom</div><div class="line"></div><div class="line">fdisk  -l		列出指定的外围设备的分区表状况</div><div class="line">mount  -t  vfat  /dev/sdb1  /mnt/usb</div></pre></td></tr></table></figure>
</li>
<li><p>卸载</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">umount</div><div class="line">umount    /dev/cdrom  </div><div class="line">umount   /mnt/cdrom</div><div class="line">强调：退出挂载目录，才能卸载</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="网络命令"><a href="#网络命令" class="headerlink" title="网络命令"></a>网络命令</h2><p>ping测试网络连通性<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ping   -c  次数  ip 	（测试网络的通畅）</div></pre></td></tr></table></figure></p>
<p>ifconfig        查询本机网络信息</p>
<blockquote>
<p>   -a    列出所有的网卡信息（包括没启动的）</p>
</blockquote>
<h2 id="输出重定向和多命令顺序执行"><a href="#输出重定向和多命令顺序执行" class="headerlink" title="输出重定向和多命令顺序执行"></a>输出重定向和多命令顺序执行</h2><p>输出重定向 把应该输出到屏幕的输出，重定向到文件。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&gt;	覆盖</div><div class="line">&gt;&gt;	追加</div><div class="line">ls  &gt;  aa		覆盖到aa</div><div class="line">ls  &gt;&gt;  aa		追加到aa</div><div class="line">ls  gdlslga  2&gt;&gt;aa		错误信息输出到aa		</div><div class="line">强调：错误输出，不能有空格</div></pre></td></tr></table></figure></p>
<p>错误信息重定向<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">ls  &gt;&gt;  aa  2&gt;&amp;1		错误和正确都输入到aa，可以追加</div><div class="line">		2&gt;&amp;1		把标准错误重定向到标准正确输出</div><div class="line"></div><div class="line">ls  &gt;&gt;  aa  2&gt;&gt;/tmp/bb		正确信息输入aa，错误信息输入bb</div></pre></td></tr></table></figure></p>
<h2 id="补充命令"><a href="#补充命令" class="headerlink" title="补充命令"></a>补充命令</h2><p>date  查看系统时间<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">date 		</div><div class="line">date	-s   20140701		设定日期</div><div class="line">date	-s	09:30:00		设定时间</div></pre></td></tr></table></figure></p>
<p>du统计目录大小<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">-sh	目录名		统计目录大小</div><div class="line">-s		和</div><div class="line">-h		习惯单位</div></pre></td></tr></table></figure></p>
<p>netstat<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">netstat  		查看网络状态的命令</div><div class="line">	-t	查看TCP端口</div><div class="line">	-u	查看UDP端口</div><div class="line">	-l	监听</div><div class="line">	-n	以IP地址和端口号显示，不用域名和服务名显示</div><div class="line">	-a	查询所有连接</div><div class="line">例</div><div class="line">netstat  -tlun</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Linux命令格式&quot;&gt;&lt;a href=&quot;#Linux命令格式&quot; class=&quot;headerlink&quot; title=&quot;Linux命令格式&quot;&gt;&lt;/a&gt;Linux命令格式&lt;/h2&gt;&lt;p&gt;格式：命令    [选项]    [参数]&lt;/p&gt;
&lt;p&gt;例如：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;#ls 	-list 	显示目录下内容&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;命令操作的对象（文件、目录、用户、进程）&lt;br&gt;Linux中以”.”开头的文件是隐藏文件&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;提示符：[root@localhost src]#&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;[当前登录用户@主机名 当前所在目录]#&lt;/p&gt;
&lt;h1 id=&quot;超级用户&quot;&gt;&lt;a href=&quot;#超级用户&quot; class=&quot;headerlink&quot; title=&quot;超级用户&quot;&gt;&lt;/a&gt;超级用户&lt;/h1&gt;&lt;p&gt;$    普通用户&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;当前所在目录：    用户家目录&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;   管理员        /root&lt;br&gt;   普通用户        /home/用户名&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;tips：&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;ctrl +  c        强制终止&lt;br&gt;ctrl+l            清屏&lt;br&gt;ctrl+u        光标删除到行首&lt;br&gt;ctrl+a        光标移动到行首&lt;br&gt;ctrl+e        光标移动到行尾&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Linux" scheme="https://weizhimiao.github.io/categories/Linux/"/>
    
    
  </entry>
  
  <entry>
    <title>Linux网络配置</title>
    <link href="https://weizhimiao.github.io/2016/10/06/Linux%E7%BD%91%E7%BB%9C%E9%85%8D%E7%BD%AE/"/>
    <id>https://weizhimiao.github.io/2016/10/06/Linux网络配置/</id>
    <published>2016-10-06T14:30:00.000Z</published>
    <updated>2016-10-07T13:59:08.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://n.sinaimg.cn/games/3ece443e/20161007/ifconfig.png" alt="Linux网络配置"></p>
<a id="more"></a>
<p>##虚拟机网卡的配置（IP地址的配置）</p>
<h3 id="IP地址的配置"><a href="#IP地址的配置" class="headerlink" title="IP地址的配置"></a>IP地址的配置</h3><p>给Linux配置IP<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">setup  进行IP地址的设置</div><div class="line">service network restart</div></pre></td></tr></table></figure></p>
<p>手工启动Linux网卡<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">vi  /etc/sysconfig/network-scripts/ifcfg-eth0		编辑网卡配置文件</div></pre></td></tr></table></figure></p>
<p>配置文件内容如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">DEVICE=eth0</div><div class="line">IPADDR=192.168.140.158</div><div class="line">GATEWAY=192.168.140.1</div><div class="line">NETMASK=255.255.255.0</div><div class="line">HWADDR=00:0c:29:41:c7:1f</div><div class="line">UUID=&quot;60bfdea1-c598-4dc8-bf93-da162ea4fb41&quot;</div><div class="line">TYPE=Ethernet</div><div class="line">BOOTPROTO=none</div><div class="line">IPV6INIT=no</div><div class="line">ONBOOT=yes</div><div class="line">USERCTL=no</div></pre></td></tr></table></figure></p>
<p>修改如下配置项：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">ONBOOT=no		改为</div><div class="line">ONBOOT=yes		（是否开机启动）</div></pre></td></tr></table></figure></p>
<p>修改UUID</p>
<blockquote>
<p>解决虚拟机网卡不通：（需要进行如下修改）</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">vi  /etc/sysconfig/network-scripts/ifcfg-eth0</div></pre></td></tr></table></figure>
<p>删除MAC地址行<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">rm –rf /etc/udev/rules.d/70-persistent-net.rules</div></pre></td></tr></table></figure></p>
<p>删除网卡和MAC地址绑定文件<br>重启系统<br>修改虚拟机配置</p>
<blockquote>
<p>网卡连接方式改为桥接模式<br>确定桥接到有线网卡上<br>（桥接方式是虚拟机和真实机共享使用本机的真实物理网卡，故采用这种方式vMare0和8的这两块虚拟网卡可以同时禁掉）</p>
</blockquote>
<h2 id="Linux网络配置"><a href="#Linux网络配置" class="headerlink" title="Linux网络配置"></a>Linux网络配置</h2><h3 id="IP地址配置（3种方法，推介使用地3种）"><a href="#IP地址配置（3种方法，推介使用地3种）" class="headerlink" title="IP地址配置（3种方法，推介使用地3种）"></a>IP地址配置（3种方法，推介使用地3种）</h3><ol>
<li><p>setup</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">service   network  restart</div></pre></td></tr></table></figure>
</li>
<li><p>ifconfig  eth0  ip    netmask       临时生效</p>
</li>
<li>修改网卡配置文件</li>
</ol>
<p><strong>网卡信息文件：<code>/etc/sysconfig/network-scripts/ifcfg-eth0</code> 文件内容如下：</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">DEVICE=eth0					网卡设备名</div><div class="line">BOOTPROTO=none				是否自动获取IP。none：不生效					static：手动		dhcp：动态获取IP</div><div class="line">BROADCAST=192.168.140.255			广播地址</div><div class="line">HWADDR=00:0c:29:21:80:48			mac地址</div><div class="line">IPADDR=192.168.140.253			IP地址</div><div class="line">IPV6INIT=yes					IPv6开启</div><div class="line">IPV6_AUTOCONF=yes				IPv6获取</div><div class="line">NETMASK=255.255.255.0				掩码</div><div class="line">NETWORK=192.168.140.0				网段</div><div class="line">ONBOOT=yes					网卡开机启动</div><div class="line">TYPE=Ethernet					以太网</div><div class="line">GATEWAY=192.168.140.1				网关</div></pre></td></tr></table></figure></p>
<p>如果是采用DHCP方式获取IP信息，则可以只填写上述用橙色标记的配置项即可。<br>修改配置文件后，需要重启服务（如service  network  restart）</p>
<p><strong>主机名配置文件</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/etc/sysconfig/network		永久生效，但是要重启</div></pre></td></tr></table></figure></p>
<p>文件内容如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">NETWORKING=yes</div><div class="line">HOSTNAME=localhost.localdomain</div></pre></td></tr></table></figure></p>
<p>另外，还可以用命令进行修改，不过只能临时生效<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">hostname  sc		将用户名修改为sc</div><div class="line">hostname		查看主机名</div></pre></td></tr></table></figure></p>
<p><strong>DNS配置文件</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/etc/resolv.conf</div></pre></td></tr></table></figure></p>
<p>文件内容如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">nameserver  202.106.0.20</div><div class="line">如有多个DNS服务器地址，可在IP地址后面直接加，并以“，”分割，或者再起下一行写入“nameserver  xx.xx.xx.xx”</div></pre></td></tr></table></figure></p>
<h3 id="网络命令"><a href="#网络命令" class="headerlink" title="网络命令"></a>网络命令</h3><ol>
<li><p>ifconfig        查看网卡信息</p>
<blockquote>
<p>   -a     全部（包括没有启动的）</p>
</blockquote>
</li>
<li><p>ifup  eth0        快速开启</p>
<blockquote>
<p>   ifdown    eth0        快速关闭</p>
</blockquote>
</li>
<li><p>netstat   -an        查看所有网络连接</p>
<blockquote>
<p>netstat  -tlun        查看TCP和UDP协议监听的端口</p>
<p>   netstat   -rn        查看路由default：默认路由（网关）</p>
</blockquote>
</li>
<li><p>route        查看路由</p>
<blockquote>
<p>   route  add   default   gw    192.168.140.1     手工设定网关，临时生效<br>   route  del    default   gw  192.168.190.6       删除网关</p>
</blockquote>
</li>
<li><p>ping    IP    探测网络畅通</p>
</li>
<li><p>traceroute    ip或域名        探测到目的地址的路径（Linux命令）</p>
<blockquote>
<p>   tracert   ip       （windows命令）</p>
</blockquote>
</li>
<li><p>tcpdump</p>
<blockquote>
<p>   tcpdump -i eth0 -nnX port 21        抓取eth0网卡  21端口的传输信息</p>
</blockquote>
</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://n.sinaimg.cn/games/3ece443e/20161007/ifconfig.png&quot; alt=&quot;Linux网络配置&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Linux" scheme="https://weizhimiao.github.io/categories/Linux/"/>
    
    
  </entry>
  
  <entry>
    <title>Linux目录结构介绍</title>
    <link href="https://weizhimiao.github.io/2016/10/06/Linux%E7%9B%AE%E5%BD%95%E7%BB%93%E6%9E%84%E4%BB%8B%E7%BB%8D/"/>
    <id>https://weizhimiao.github.io/2016/10/06/Linux目录结构介绍/</id>
    <published>2016-10-06T14:30:00.000Z</published>
    <updated>2016-10-07T14:50:52.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://www.centoscn.com/uploads/allimg58981378314368.jpg" alt="Linux目录结构"></p>
<a id="more"></a>
<h2 id="Linux常见目录"><a href="#Linux常见目录" class="headerlink" title="Linux常见目录"></a>Linux常见目录</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line">/		根目录</div><div class="line">/bin		命令保存目录（普通用户就可以读取的命令）</div><div class="line">/boot		启动目录，启动相关文件</div><div class="line">/dev		设备文件保存目录</div><div class="line">/etc		配置文件保存目录</div><div class="line">/etc/rc.d		主要在记录一些开关机过程中的 scripts 档案， scripts 有点像是 DOS 下的批次档（.bat檔名）</div><div class="line">/etc/rc.d/init.d	所以服务预设的启动 scripts 都是放在这里的，例如要启动与关闭 iptables 的话，可以：</div><div class="line">/etc/rc.d/init.d/iptables start</div><div class="line">/etc/rc.d/init.d/iptables stop</div><div class="line">/etc/xinetd.d		这个路径在较新的 Linux distribution 当中才有，由于早期的版本用来开启服务的档案是 inetd.conf ，但是在较新的版本中，开启服务的项目已经变成使用 xinetd.conf 这个档案，因此，你若需要启动一些额外的服务的话，在 Mandrake 9.0 或者是 Red Hat 7.0 以后就要到 /etc/xinetd.d 这个目录下了。</div><div class="line">/etc/X11	这是与 X windows 有关的设定文件所在的目录，尤其里面的 XF86Config-4 更是重要呢！</div><div class="line">/etc/opt/		/opt/的配置文件</div><div class="line">/etc/sgml/		SGML的配置文件</div><div class="line">/etc/xml/		XML的配置文件</div><div class="line">/home		普通用户的家目录</div><div class="line">/lib		系统库保存目录</div><div class="line">/mnt		系统挂载目录（空目录）（一般建议将光盘、U盘等都关在在此目录下）</div><div class="line">/media		挂载目录（空目录）</div><div class="line">/root		超级用户的家目录</div><div class="line">/tmp		临时目录</div><div class="line">/sbin		命令保存目录（超级用户才能使用的目录）</div><div class="line">/proc		直接写入内存的</div><div class="line">/proc/cpuinfo		关于处理器的信息，如类型、厂家、型号和性能等</div><div class="line">/proc/devices		当前运行内核所配置的所有设备清单</div><div class="line">/proc/dma		当前正在使用的DMA通道。/proc/filesystems 当前运行内核所配置的文件系统</div><div class="line">/proc/interrupts		正在使用的中断，和曾经有多少个中断</div><div class="line">/proc/ioports		当前正在使用的I/O端口</div><div class="line">/sys		同上</div><div class="line">/usr		系统软件资源目录</div><div class="line">/usr/bin/		系统命令（普通用户）</div><div class="line">/usr/sbin/		系统命令（超级用户）</div><div class="line">/usr/locate/		源码包安装的软件存放目录</div><div class="line">/usr/X11		同/usr/X11R6 （/usr/X11R6的符号连接）</div><div class="line">/usr/X11R6		X Window System存放相关档案的目录</div><div class="line">/usr/X11R6/bin		大量的小X-WINDOWS应用程序（也可能是一些在其它子目录下大执行文件的符号连接）</div><div class="line">/usr/include		一些套件的header檔。基本上，当我们在以 tarball 方式（ *.tar.gz 的方式安装软件）安装某些数据时，会使用到的一些函式库都在这个目录底下喔！</div><div class="line">/usr/lib		内含许多程序与子程序所需的函式库。</div><div class="line">/usr/local		在你安装完了 Linux 之后，基本上所有的配备你都有了，但是软件总是可以升级的，例如你要升级你的 proxy 服务，则通常软件预设的安装地方就是在 /usr/local 中（ local 是『当地』的意思），同时，安装完毕之后所得到的执行文件，为了与系统原先的执行文件有分别，因此升级后的执行档通常摆在 /usr/local/bin 这个地方。</div><div class="line">/usr/local/bin		可能是用户安装的小的应用程序，和一些在/usr/local目录下大应用程序的符号连接</div><div class="line">/usr/share/doc		放置一些系统说明文件的地方，例如你安装了 lilo 了，那么在该目录底下找一找，就可以查到 lilo 的说明文件了！很是便利！</div><div class="line">/usr/share/man		放置一些程序的说明文件的地方，那是什么？呵呵！就是你使用 man 的时候，会去查询的路径呀！例如你使用 man ls 这个指令时，就会查出 /usr/share/man/man1/ls.1.bz2 这个说明档的内容啰！</div><div class="line">/usr/src		这是放置核心原始码的预设目录，未来我们要编译核心的时候，就必须到这个目录底下呦！</div><div class="line">/var		系统相关文档内容</div><div class="line">/var/log/	系统日志位置</div><div class="line">/var/spool/mail/		系统默认邮箱位置</div><div class="line">/var/lib/mysql/		默认安装的mysql的库文件目录</div><div class="line">/ost+found /		分区的复目录（当系统非正常关机时，可以进行恢复，每个分区都会有这样一个lost+found目录）系统不正常产生错误时，会将一些遗失的片段放置于此目录下，通常这个目录会自动出现在装置目录下。例如你加装一棵硬盘于 /disk 中，那在这个目录下就会自动产生一个这样的目录 /disk/lost+found</div></pre></td></tr></table></figure>
<h2 id="etc-目录"><a href="#etc-目录" class="headerlink" title="/etc/目录"></a>/etc/目录</h2><p>特定主机系统范围内的配置文件：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">/etc/rc /etc/rc.d		启动、或改变运行级时运行的scripts或scripts的目录.</div><div class="line">/etc/rc*.d</div><div class="line">/etc/hosts			本地域名解析文件</div><div class="line">/etc/sysconfig/network	IP、掩码、网关、主机名配置</div><div class="line">/etc/resolv.conf		DNS服务器配置</div><div class="line">/etc/fstab			开机自动挂载系统，所有分区开机都会自动挂载</div><div class="line">/etc/inittab	设定系统启动时Init进程将把系统设置成什么样的runlevel及加载相关的启动文件配置</div><div class="line">/etc/exports			设置NFS系统用的配置文件路径</div><div class="line">/etc/init.d			这个目录来存放系统启动脚本</div><div class="line">/etc/profile,</div><div class="line">/etc/csh.login,</div><div class="line">/etc/csh.cshrc		全局系统环境配置变量</div><div class="line">/etc/issue			认证前的输出信息，默认输出版本内核信息</div><div class="line">/etc/motd			设置认证后的输出信息，</div><div class="line">/etc/mtab		当前安装的文件系统列表.由scripts初始化，并由mount 命令自动更新.需要一个当前安装的文件系统的列表时使用，例如df 命令</div><div class="line">/etc/group			类似/etc/passwd ，但说明的不是用户而是组.</div><div class="line">/etc/passwd		用户数据库，其中的域给出了用户名、真实姓名、家目录、加密的口令和用户的其他信息.</div><div class="line">/etc/shadow		在安装了影子口令软件的系统上的影子口令文件.影子口令文件将</div><div class="line">/etc/passwd 		文件中的加密口令移动到/etc/shadow 中，而后者只对root可读.这使破译口令更困难.</div><div class="line">/etc/sudoers			可以sudo命令的配置文件</div><div class="line">/etc/syslog.conf		系统日志参数配置</div><div class="line">/etc/login.defs		设置用户帐号限制的文件</div><div class="line">/etc/securetty		确认安全终端，即哪个终端允许root登录.一般只列出虚拟控制台，这样就不可能(至少很困难)通过modem或网络闯入系统并得到超级用户特权.</div><div class="line">/etc/printcap			类似/etc/termcap ，但针对打印机.语法不同.</div><div class="line">/etc/shells		列出可信任的shell.chsh 命令允许用户在本文件指定范围内改变登录shell.提供一台机器FTP服务的服务进程ftpd 检查用户shell是否列在 /etc/shells 文件中，如果不是将不允许该用户登录.</div><div class="line">/etc/xinetd.d		如果服务器是通过xinetd模式运行的，它的脚本要放在这个目录下。有些系统没有这个目录，比如Slackware，有些老的版本也没有。在Redhat Fedora中比较新的版本中存在。</div><div class="line">/etc/opt/			/opt/的配置文件</div><div class="line">/etc/X11/			X_Window系统(版本11)的配置文件</div><div class="line">/etc/sgml/			SGML的配置文件</div><div class="line">/etc/xml/			XML的配置文件</div><div class="line">/etc/skel/			默认创建用户时，把该目录拷贝到家目录下</div></pre></td></tr></table></figure>
<h2 id="usr-目录"><a href="#usr-目录" class="headerlink" title="/usr/目录"></a>/usr/目录</h2><p>默认软件都会存于该目录下。用于存储只读用户数据的第二层次；包含绝大多数的用户工具和应用程序。</p>
<h2 id="var-目录"><a href="#var-目录" class="headerlink" title="/var/目录"></a>/var/目录</h2><p>/var 包括系统一般运行时要改变的数据.每个系统是特定的，即不通过网络与其他计算机共享.</p>
<h2 id="proc-目录"><a href="#proc-目录" class="headerlink" title="/proc/目录"></a>/proc/目录</h2><p>虚拟文件系统，将内核与进程状态归档为文本文件（系统信息都存放这目录下）。</p>
<p>例如：uptime、 network。在Linux中，对应Procfs格式挂载。该目录下文件只能看不能改（包括root）</p>
<h2 id="dev-目录"><a href="#dev-目录" class="headerlink" title="/dev/目录"></a>/dev/目录</h2><p>设备文件分为两种：</p>
<ul>
<li>块设备文件(b)</li>
<li>字符设备文件(c)</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://www.centoscn.com/uploads/allimg58981378314368.jpg&quot; alt=&quot;Linux目录结构&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Linux" scheme="https://weizhimiao.github.io/categories/Linux/"/>
    
    
  </entry>
  
  <entry>
    <title>Linux系统的简介和安装</title>
    <link href="https://weizhimiao.github.io/2016/10/06/Linux%E7%AE%80%E4%BB%8B/"/>
    <id>https://weizhimiao.github.io/2016/10/06/Linux简介/</id>
    <published>2016-10-06T14:30:00.000Z</published>
    <updated>2016-10-07T13:39:11.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Linux简介"><a href="#Linux简介" class="headerlink" title="Linux简介"></a>Linux简介</h2><h3 id="Unix发展史"><a href="#Unix发展史" class="headerlink" title="Unix发展史"></a>Unix发展史</h3><p>1965年，美国麻省理工学院（MIT）、通用电气公司（GE）及AT&amp;T的贝尔实验室联合开发Multics工程计划，其目标是开发一种交互式的具有多道程序处理能力的分时操作系统，但因Multics追求的目标过于庞大复杂，项目进度远远落后于计划，最后贝尔实验室宣布退出。</p>
<p>1969年，美国贝尔实验室的肯.汤普森在DEC PDP-7机器上开发出了UNIX系统</p>
<p>1971年，肯.汤普森的同事丹尼斯.里奇发明了C语言；1973年，UNIX系统的绝大部分源代码用C语言重写，这为提高UNIX系统的可移植性打下基础</p>
<a id="more"></a>
<h3 id="常见的Unix"><a href="#常见的Unix" class="headerlink" title="常见的Unix"></a>常见的Unix</h3><ul>
<li>AIX        IBM</li>
<li>HP-UX        HP</li>
<li>Solaris        SUN</li>
</ul>
<h3 id="Linux的发展史"><a href="#Linux的发展史" class="headerlink" title="Linux的发展史"></a>Linux的发展史</h3><p>由Andrew S. Tanenbaum（谭宁邦）发明。MINIX最初发布于1987年，开放全部源代码给大学教学和研究工作。2000年重新改为BSD授权，成为自由和开放源码软件。<br>Linus Torvalds（李纳斯.托瓦兹），1991年，他在芬兰的赫尔辛基大学用Minix操作平台建立了一个新的操作系统的内核，他把它叫做Linux。</p>
<h3 id="常见的Linux"><a href="#常见的Linux" class="headerlink" title="常见的Linux"></a>常见的Linux</h3><p>Linux的各种版本多大上千种，主要可以分为两大类：</p>
<ul>
<li><p>一类是Red Hat系列，主要有Fedora、RHEL、CentOS、SUSE、gentoo、红旗、Mandriva、turboLinux、REHL enterprise。</p>
</li>
<li><p>还有一类是以debian和ubuntu为代表的系列</p>
</li>
</ul>
<h3 id="Linux特点"><a href="#Linux特点" class="headerlink" title="Linux特点"></a>Linux特点</h3><ul>
<li>开源、免费</li>
<li>稳定</li>
<li>安全</li>
</ul>
<h3 id="Linux的应用领域："><a href="#Linux的应用领域：" class="headerlink" title="Linux的应用领域："></a>Linux的应用领域：</h3><ul>
<li>基于Linux的网站服务器</li>
<li>电影娱乐业（特别是在特效制作上）</li>
<li>嵌入式领域</li>
<li>手机、平板电脑</li>
<li>其他嵌入式领域</li>
</ul>
<h2 id="Linux安装"><a href="#Linux安装" class="headerlink" title="Linux安装"></a>Linux安装</h2><p>Linux安装步骤：</p>
<blockquote>
<ul>
<li><p>分区：把大硬盘分为小的逻辑分区</p>
</li>
<li><p>格式化：写入文件系统</p>
</li>
<li><p>分区设备文件名：给每个分区定义设备文件名</p>
</li>
<li><p>挂载：给每个分区分配挂载点</p>
</li>
</ul>
</blockquote>
<h3 id="Linux磁盘分区："><a href="#Linux磁盘分区：" class="headerlink" title="Linux磁盘分区："></a>Linux磁盘分区：</h3><p>分区类型</p>
<ul>
<li>主分区，由于硬盘的限制，一个硬盘最多只能有4个主分区。</li>
<li>扩展分区，一个硬盘上最多只能有一个扩展分区，主分区和扩展分区加起来一个硬盘也最多有4个，且扩展分区当中不能直接写入数据，只能包含逻辑分区。</li>
<li>逻辑分区，逻辑分区只能建立在扩展分区之上。逻辑分区可以有多个。</li>
</ul>
<p>Linux分区表示：</p>
<ul>
<li>/dev/hda1<blockquote>
<p>   hd:    IDE硬盘    sd：    SCSI硬盘或者SATA硬盘<br>   a：    第一块硬盘<br>   1：    第一个分区</p>
</blockquote>
</li>
</ul>
<h3 id="Linux分区格式化（写入文件系统）"><a href="#Linux分区格式化（写入文件系统）" class="headerlink" title="Linux分区格式化（写入文件系统）"></a>Linux分区格式化（写入文件系统）</h3><p>文件系统类型</p>
<ul>
<li>Windows系统一般有一下文件系统：<ul>
<li>FAT16</li>
<li>FAT32</li>
<li>NTFS</li>
</ul>
</li>
</ul>
<ul>
<li>Linux系统有一下几种文件系统：<ul>
<li>EXT2</li>
<li>EXT3</li>
<li>EXT4</li>
</ul>
</li>
</ul>
<p>Inode        i节点（每个文件都有一个唯一的数字标识来唯一标识该文件）</p>
<blockquote>
<p>注意：每个i节点可以表示的硬盘空间的大小有限，一个小文件可能用一个i节点就可表示，但当一个文件非常大时，就可能对应着好多个i节点。</p>
</blockquote>
<p>Block        数据存储的最小单元（一般大小为4Kb）</p>
<p>格式化又称为逻辑格式化，它是指根据用户选定的文件系统，在磁盘的特定区域写入特定数据，在分区中画出一片用于存放文件分配表、目录表等用于文件管理的磁盘空间。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Linux简介&quot;&gt;&lt;a href=&quot;#Linux简介&quot; class=&quot;headerlink&quot; title=&quot;Linux简介&quot;&gt;&lt;/a&gt;Linux简介&lt;/h2&gt;&lt;h3 id=&quot;Unix发展史&quot;&gt;&lt;a href=&quot;#Unix发展史&quot; class=&quot;headerlink&quot; title=&quot;Unix发展史&quot;&gt;&lt;/a&gt;Unix发展史&lt;/h3&gt;&lt;p&gt;1965年，美国麻省理工学院（MIT）、通用电气公司（GE）及AT&amp;amp;T的贝尔实验室联合开发Multics工程计划，其目标是开发一种交互式的具有多道程序处理能力的分时操作系统，但因Multics追求的目标过于庞大复杂，项目进度远远落后于计划，最后贝尔实验室宣布退出。&lt;/p&gt;
&lt;p&gt;1969年，美国贝尔实验室的肯.汤普森在DEC PDP-7机器上开发出了UNIX系统&lt;/p&gt;
&lt;p&gt;1971年，肯.汤普森的同事丹尼斯.里奇发明了C语言；1973年，UNIX系统的绝大部分源代码用C语言重写，这为提高UNIX系统的可移植性打下基础&lt;/p&gt;
    
    </summary>
    
      <category term="Linux" scheme="https://weizhimiao.github.io/categories/Linux/"/>
    
    
  </entry>
  
  <entry>
    <title>Linux中的用户和用户组管理</title>
    <link href="https://weizhimiao.github.io/2016/10/06/Linux%E4%B8%AD%E7%9A%84%E7%94%A8%E6%88%B7%E5%92%8C%E7%94%A8%E6%88%B7%E7%BB%84%E7%AE%A1%E7%90%86/"/>
    <id>https://weizhimiao.github.io/2016/10/06/Linux中的用户和用户组管理/</id>
    <published>2016-10-06T14:30:00.000Z</published>
    <updated>2016-10-07T14:41:03.000Z</updated>
    
    <content type="html"><![CDATA[<p>用户账号的管理主要涉及到用户账号的添加、删除和修改。<br>添加用户账号就是在系统中创建一个新账号，然后为新账号分配用户号、用户组、主目录和登录Shell等。</p>
<a id="more"></a>
<h2 id="关于用户管理的配置文件说明"><a href="#关于用户管理的配置文件说明" class="headerlink" title="关于用户管理的配置文件说明"></a>关于用户管理的配置文件说明</h2><h3 id="用户信息文件："><a href="#用户信息文件：" class="headerlink" title="用户信息文件："></a>用户信息文件：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/etc/passwd</div></pre></td></tr></table></figure>
<p>文件内容：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">root:x:0:0:root:/root:/bin/bash</div><div class="line"></div><div class="line">第一位：用户名</div><div class="line">第二位：密码位（只是一个密码标志，真实密码并不是存在这）</div><div class="line">第三位：UID	用户ID</div><div class="line">		0	超级管理员</div><div class="line">		1-499	系统用户（伪用户）</div><div class="line">		&gt;500	普通用户</div><div class="line">第四位：GID	初始组ID</div><div class="line">第五位：用户说明</div><div class="line">第六位：家目录</div><div class="line">第七位：用户登录之后的权限</div></pre></td></tr></table></figure>
<h3 id="影子文件："><a href="#影子文件：" class="headerlink" title="影子文件："></a>影子文件：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/etc/shadow</div></pre></td></tr></table></figure>
<p>文件内容：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">root:$6$w5RBeFe7Y1bixrQR$tp0zHL1bMmAVv0SAS56LsCOyZ4KUj3V0GI0dRZ4KSlf.ggisV7dwiQ8s5xebcZghVDxwlYTjN6qKGU9zRc.En1:16247:0:99999:7:::</div></pre></td></tr></table></figure>
<p>说明：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">#</div><div class="line"># 第一字段：用户名（也被称为登录名），在/etc/shadow中，用户名和/etc/passwd 是相同的，</div><div class="line"># 这样就把passwd 和shadow中用的用户记录联系在一起；这个字段是非空的；</div><div class="line">#</div><div class="line"># 第二字段：密码（已被加密），如果是有些用户在这段是x，表示这个用户不能登录到系统；这个字段是非空的；</div><div class="line">#</div><div class="line"># 第三字段：上次修改口令的时间；这个时间是从1970年01月01日算起到最近一次修改口令的时间间隔（天数），</div><div class="line"># 您可以通过passwd 来修改用户的密码，然后查看/etc/shadow中此字段的变化；</div><div class="line">#</div><div class="line"># 第四字段：两次修改口令间隔最少的天数；如果设置为0,则禁用此功能；也就是说用户必须经过多少天才能修改其口令；</div><div class="line"># 此项功能用处不是太大；默认值是通过/etc/login.defs文件定义中获取，PASS_MIN_DAYS 中有定义；</div><div class="line">#</div><div class="line"># 第五字段：两次修改口令间隔最多的天数；这个能增强管理员管理用户口令的时效性，应该说在增强了系统的安全性；</div><div class="line"># 如果是系统默认值，是在添加用户时由/etc/login.defs文件定义中获取，在PASS_MAX_DAYS 中定义；</div><div class="line">#</div><div class="line"># 第六字段：提前多少天警告用户口令将过期；当用户登录系统后，系统登录程序提醒用户口令将要作废；</div><div class="line"># 如果是系统默认值，是在添加用户时由/etc/login.defs文件定义中获取，在PASS_WARN_AGE 中定义；</div><div class="line">#</div><div class="line"># 第七字段：在口令过期之后多少天禁用此用户；此字段表示用户口令作废多少天后，系统会禁用此用户，</div><div class="line"># 也就是说系统会不能再让此用户登录，也不会提示用户过期，是完全禁用；</div><div class="line">#</div><div class="line"># 第八字段：用户过期日期；此字段指定了用户作废的天数（从1970年的1月1日开始的天数），</div><div class="line"># 如果这个字段的值为空，帐号永久可用；</div><div class="line">#</div><div class="line"># 第九字段：保留字段，目前为空，以备将来Linux发展之用；</div></pre></td></tr></table></figure>
<h3 id="组信息文件："><a href="#组信息文件：" class="headerlink" title="组信息文件："></a>组信息文件：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/etc/group</div></pre></td></tr></table></figure>
<p>文件内容：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">bin:x:1:bin,daemon</div><div class="line">组名：组密码位：组ID：组中的附加用户</div><div class="line">初始组：每个用户初始组只能有一个，初始组只能有一个，一般都是和用户名相同的组作为初始组</div><div class="line">附加组：每个用户可以属于多个附加组。要把用户加入组，都是加入附加组</div></pre></td></tr></table></figure>
<h2 id="添加用户"><a href="#添加用户" class="headerlink" title="添加用户"></a>添加用户</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">useradd	用户名</div><div class="line">useradd  选项    用户名		</div><div class="line">		-g	组名		指定初始组（但最好不要手动指定）</div><div class="line">		-G	组名		指定附加组（把用户加入组，使用附加组）</div><div class="line">		-c	说明		添加说明</div><div class="line">		-d	目录		手工指定家目录</div><div class="line">		-s	/bin/bash	手工指定用户登录后之后的权限</div></pre></td></tr></table></figure>
<p>例：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">useradd  -g  aa  bb   		添加bb用户，同时指定初始组aa</div><div class="line">useradd   -G   user1   aa		添加用户aa，指定附加组为user1</div></pre></td></tr></table></figure>
<h2 id="设定密码"><a href="#设定密码" class="headerlink" title="设定密码"></a>设定密码</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">passwd	用户名</div><div class="line">passwd		改变当前用户密码（普通用户只能通过这种方式来更改自己的密码）</div><div class="line">passwd	root	更改root的密码</div></pre></td></tr></table></figure>
<h2 id="删除密码"><a href="#删除密码" class="headerlink" title="删除密码"></a>删除密码</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">userdel	-r  用户名</div><div class="line">		    -r 	连带家目录一起删除</div></pre></td></tr></table></figure>
<h2 id="添加组"><a href="#添加组" class="headerlink" title="添加组"></a>添加组</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">groupadd	组名</div></pre></td></tr></table></figure>
<h2 id="删除组"><a href="#删除组" class="headerlink" title="删除组"></a>删除组</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">groupdel	组名		注意：组中没有初始用户</div></pre></td></tr></table></figure>
<h2 id="把已经存在的用户加入组"><a href="#把已经存在的用户加入组" class="headerlink" title="把已经存在的用户加入组"></a>把已经存在的用户加入组</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">gpasswd	-a  用户名   组名	用户加入组</div><div class="line">gpasswd	-d  用户名  组名	把用户从组中删除</div></pre></td></tr></table></figure>
<h2 id="查看用户相关信息"><a href="#查看用户相关信息" class="headerlink" title="查看用户相关信息"></a>查看用户相关信息</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">id   用户名		显示用户的UID，初始组，和附加组</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">例#id   sc   </div><div class="line">uid=0(root) gid=0(root) 组=0(root)</div></pre></td></tr></table></figure>
<h2 id="用户间的相互切换"><a href="#用户间的相互切换" class="headerlink" title="用户间的相互切换"></a>用户间的相互切换</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">su  -  用户名		切换用户身份</div><div class="line">  	-	连带环境变量一起切换</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;用户账号的管理主要涉及到用户账号的添加、删除和修改。&lt;br&gt;添加用户账号就是在系统中创建一个新账号，然后为新账号分配用户号、用户组、主目录和登录Shell等。&lt;/p&gt;
    
    </summary>
    
      <category term="Linux" scheme="https://weizhimiao.github.io/categories/Linux/"/>
    
    
  </entry>
  
  <entry>
    <title>Linux文件和目录权限小结</title>
    <link href="https://weizhimiao.github.io/2016/10/06/Linux%E6%96%87%E4%BB%B6%E5%92%8C%E7%9B%AE%E5%BD%95%E6%9D%83%E9%99%90%E5%B0%8F%E7%BB%93/"/>
    <id>https://weizhimiao.github.io/2016/10/06/Linux文件和目录权限小结/</id>
    <published>2016-10-06T14:30:00.000Z</published>
    <updated>2016-10-07T14:55:11.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="普通权限"><a href="#普通权限" class="headerlink" title="普通权限"></a>普通权限</h2><p>文件的权限：    - r  w  -  -  w  x  r  -  x<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">第一位：文件的类型</div><div class="line">    -：文件</div><div class="line">    d：文件夹</div><div class="line">    l：连接</div><div class="line">    c：字符设备文件</div><div class="line">    b：块设备</div><div class="line">    s：套接口文件</div><div class="line">第二位：所有者读权限</div><div class="line">第三位：所有者写权限</div><div class="line">第四位：所有者执行权限</div><div class="line">第五位：所有者组读权限</div><div class="line">第六位：所有者组写权限</div><div class="line">第七位：所有者组执行权限</div><div class="line">第八位：其他组读权限</div><div class="line">第九位：其他组写权限</div><div class="line">第十位：其他组执行权限</div><div class="line">r		4</div><div class="line">w		2</div><div class="line">x		1</div></pre></td></tr></table></figure></p>
<a id="more"></a>
<h2 id="特殊权限（SUID-SGID-SBIT）"><a href="#特殊权限（SUID-SGID-SBIT）" class="headerlink" title="特殊权限（SUID/SGID/SBIT）"></a>特殊权限（SUID/SGID/SBIT）</h2><p>先来看看两个特殊的文件与目录<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">[root@yufei ~]# ls -l /usr/bin/passwd</div><div class="line">-rwsr-xr-x. 1 root root 26968 Jan 29  2010 /usr/bin/passwd</div><div class="line">[root@yufei ~]# ls -l /usr/bin/wall</div><div class="line">-r-xr-sr-x. 1 root tty 10932 Apr 27  2010 /usr/bin/wall</div><div class="line">[root@yufei ~]# ls -ld /tmp/</div><div class="line">drwxrwxrwt. 7 root root 4096 Jan 20 11:00 /tmp/</div></pre></td></tr></table></figure></p>
<p>第一个passwd命令在所有者的地方多了一个s，<br>第二个wall命令在用户组的位置多了一个s，<br>第三个tmp目录，多了一个t。</p>
<p>这是为什么呢？下面我们就来具体看看，这些特殊的权限是什么意思？如何设置？</p>
<h3 id="特殊权限的介绍Set-UID"><a href="#特殊权限的介绍Set-UID" class="headerlink" title="特殊权限的介绍Set UID**"></a>特殊权限的介绍Set UID**</h3><p>当s这个标志出现在文件所有者的x权限上时，如/usr/bin/passwd这个文件的权限状态：“-rwsr-xr-x.”，此时就被称为Set UID，简称为SUID。那么这个特殊权限的特殊性的作用是什么呢？</p>
<ul>
<li>1、SUID权限仅对二进制程序(binary program)有效；</li>
<li>2、执行者对于该程序需要具有x的可执行权限；</li>
<li>3、本权限仅在执行该程序的过程中有效(run-time)；</li>
<li>4、执行者将具有该程序拥有者(owner)的权限。</li>
</ul>
<p>SUID的目的就是：让本来没有相应权限的用户运行这个程序时，可以访问他没有权限访问的资源。passwd就是一个很鲜明的例子，下面我们就来了解一下这相passwd执行的过程。</p>
<p>我们知道，系统中的用户密码是保存在/etc/shadow中的，而这个文件的权限是———-. （这个权限和以前版本的RHEL也有差别，以前的是-r——–）。其实有没有r权限不重要，因为我们的root用户是拥有最高的权限，什么都能干了。关键是要把密码写入到/etc/shadow中。我们知道，除了root用户能修改密码外，用户自己同样也能修改密码，为什么没有写入权限，还能修改密码，就是因为这个SUID功能。</p>
<p>下面就是passwd这个命令的执行过程</p>
<ul>
<li>1、因为/usr/bin/passwd的权限对任何的用户都是可以执行的，所以系统中每个用户都可以执行此命令。</li>
<li>2、而/usr/bin/passwd这个文件的权限是属于root的。</li>
<li>3、当某个用户执行/usr/bin/passwd命令的时候，就拥有了root的权限了。</li>
<li>4、于是某个用户就可以借助root用户的权力，来修改了/etc/shadow文件了。</li>
<li>5、最后，把密码修改成功。</li>
</ul>
<p>注：这个SUID只能运行在二进制的程序上（系统中的一些命令），不能用在脚本上（script），因为脚本还是把很多的程序集合到一起来执行，而不是脚本自身在执行。同样，这个SUID也不能放到目录上，放上也是无效的。</p>
<h3 id="Set-GID"><a href="#Set-GID" class="headerlink" title="Set GID"></a>Set GID</h3><p>我们前面讲过，当s这个标志出现在文件所有者的x权限上时，则就被称为Set UID。那么把这个s放到文件的所属用户组x位置上的话，就是SGID。如开头的/usr/bin/wall命令。<br>那么SGID的功能是什么呢？和SUID一样，只是SGID是获得该程序所属用户组的权限。</p>
<p>这相SGID有几点需要我们注意：</p>
<ul>
<li>1、SGID对二进制程序有用；</li>
<li>2、程序执行者对于该程序来说，需具备x的权限；</li>
<li>3、SGID主要用在目录上；<br>理解了SUID，我想SGID也很容易理解。如果用户在此目录下具有w权限的话，若使用者在此目录下建立新文件，则新文件的群组与此目录的群组相同。</li>
</ul>
<h3 id="Sticky-Bit"><a href="#Sticky-Bit" class="headerlink" title="Sticky Bit"></a>Sticky Bit</h3><p>这个就是针对others来设置的了，和上面两个一样，只是功能不同而已。</p>
<p>SBIT（Sticky Bit）目前只针对目录有效，对于目录的作用是：当用户在该目录下建立文件或目录时，仅有自己与 root才有权力删除。</p>
<p>最具有代表的就是/tmp目录，任何人都可以在/tmp内增加、修改文件（因为权限全是rwx），但仅有该文件/目录建立者与 root能够删除自己的目录或文件。</p>
<p><strong>注：这个SBIT对文件不起作用。</strong></p>
<h3 id="SUID-SGID-SBIT权限设置"><a href="#SUID-SGID-SBIT权限设置" class="headerlink" title="SUID/SGID/SBIT权限设置"></a>SUID/SGID/SBIT权限设置</h3><p>和我们前面说的rwx差不多，也有两种方式，一种是以字符，一种是以数字。</p>
<ul>
<li>4 为 SUID ＝ u+s</li>
<li>2 为 SGID ＝ g+s</li>
<li>1 为 SBIT ＝ o+t</li>
</ul>
<p>下面我们就来看看如何设置，并看看达到的效果。</p>
<h4 id="先看SUID的作用及设置"><a href="#先看SUID的作用及设置" class="headerlink" title="先看SUID的作用及设置"></a>先看SUID的作用及设置</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">[root@yufei ~]# cd /tmp/</div><div class="line">[root@yufei tmp]# cp /usr/bin/passwd ./</div><div class="line">[root@yufei tmp]# mkdir testdir</div></pre></td></tr></table></figure>
<p>上面两步是在/tmp目录下创建passwd文件和testdir目录</p>
<p>下面看看这两个的权限<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">[root@yufei tmp]# ls -l passwd ; ls -ld testdir/</div><div class="line">-rwxr-xr-x. 1 root root 26968 Jan 20 23:27 passwd</div><div class="line">drwxr-xr-x. 2 root root 4096 Jan 20 19:25 testdir/</div></pre></td></tr></table></figure></p>
<p>我们切换到yufei用户，然后修改自己的密码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">[root@yufei tmp]# su yufei</div><div class="line">[yufei@yufei tmp]$ ./passwd</div><div class="line">Changing password for user yufei.</div><div class="line">Changing password for yufei.</div><div class="line">(current) UNIX password:</div><div class="line">New password:           </div><div class="line">Retype new password:</div><div class="line">passwd: Authentication token manipulation error</div></pre></td></tr></table></figure></p>
<p>发现上面的yufei改不了自己的密码，为什么呢？就是因为没有权限把密码写入到/etc/shadow中。想让普通用户能修改/etc/shadow的话，那就需要用到SUID了。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">[yufei@yufei tmp]$ su root</div><div class="line">Password:</div><div class="line">[root@yufei tmp]# chmod u+s passwd</div><div class="line">[root@yufei tmp]# ls -l passwd</div><div class="line">-rwsr-xr-x. 1 root root 26968 Jan 20 23:27 passwd</div></pre></td></tr></table></figure></p>
<p>看到有SUID权限了，下面再来修改yufei自己的密码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">[yufei@yufei tmp]$ ./passwd</div><div class="line">Changing password for user yufei.</div><div class="line">Changing password for yufei.</div><div class="line">(current) UNIX password:</div><div class="line">New password:</div><div class="line">Retype new password:</div><div class="line">passwd: all authentication tokens updated successfully.</div></pre></td></tr></table></figure></p>
<p>我们发现已经成功了。</p>
<p>我想这一下，你对SUID的作用已经了解了吧。</p>
<p>如果想把这个改回来（就是把SUID的权限去掉），我们用数字方式来设置<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">[root@yufei tmp]# chmod 0755 passwd</div><div class="line">[root@yufei tmp]# ls -l passwd</div><div class="line">-rwxr-xr-x. 1 root root 26968 Jan 20 23:27 passwd</div></pre></td></tr></table></figure></p>
<p>OK这样就改过来了，这个数字的原理和我们前面讲的rwx是一样的，只是在最前面设置相应的数字而已。</p>
<p><strong>注：在普通用户修改自己的密码是，密码要设置的复杂点，否则的话，通过不了认证，普通用户和root用户的权限是不同的。</strong></p>
<h4 id="再看SGID的作用及设置"><a href="#再看SGID的作用及设置" class="headerlink" title="再看SGID的作用及设置"></a>再看SGID的作用及设置</h4><p>我们以前面建立的/tmp/testdir为例子<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">[root@yufei tmp]# ls -ld testdir/</div><div class="line">[root@yufei tmp]# chmod 757 testdir/</div><div class="line">[root@yufei tmp]# ls -ld testdir/</div><div class="line">drwxr-xrwx. 2 root root 4096 Jan 20 19:25 testdir/</div></pre></td></tr></table></figure></p>
<p>这时候，任何用户对此目录都有写入权限，那么我们就在这个目录里面创建文件与目录，并看看他们的权限如何<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">[root@yufei tmp]# su yufei</div><div class="line">[yufei@yufei tmp]$ touch testdir/file1</div><div class="line">[yufei@yufei tmp]$ mkdir testdir/dir1</div><div class="line">[yufei@yufei tmp]$ ls -l testdir</div><div class="line">total 0</div><div class="line">drw-rw-r–. 1 yufei yufei 0 Jan 21 10:33 dir1</div><div class="line">-rw-rw-r–. 1 yufei yufei 0 Jan 21 10:33 file1</div></pre></td></tr></table></figure></p>
<p>这时候的文件与目录权限都是创建者的本身<br>下面我们就来看看，把这个目录加上SGID权限后，再创建文件与目录，会是什么样的效果<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">[yufei@yufei tmp]$ su root</div><div class="line">Password:</div><div class="line">[root@yufei tmp]# chmod g+s testdir/</div><div class="line">[root@yufei tmp]# ls -ld testdir/</div><div class="line">drwxr-srwx. 2 root root 4096 Jan 21 10:33 testdir/</div><div class="line">[root@yufei tmp]# su yufei</div><div class="line">[yufei@yufei tmp]$ touch testdir/file2</div><div class="line">[yufei@yufei tmp]$ mkdir testdir/dir2</div><div class="line">[yufei@yufei tmp]$ ls -l testdir/</div><div class="line">total 0</div><div class="line">drw-rw-r–. 1 yufei yufei 0 Jan 21 10:33 dir1</div><div class="line">drw-rw-r–. 1 yufei root  0 Jan 21 10:36 dir2</div><div class="line">-rw-rw-r–. 1 yufei yufei 0 Jan 21 10:33 file1</div><div class="line">-rw-rw-r–. 1 yufei root  0 Jan 21 10:35 file2</div><div class="line">[yufei@yufei tmp]$ ls -ld testdir/</div><div class="line">drwxr-srwx. 2 root root 4096 Jan 21 10:36 testdir/</div></pre></td></tr></table></figure></p>
<p>这时候我们就发现，file2和dir2的用户组变成了root了，也就是他们上层目录testdir这个目录的所属用户组。<br>这个应用，应用在一个项目的共同开发上，是很方便的。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">[yufei@yufei tmp]$ su root</div><div class="line">Password:</div><div class="line">[root@yufei tmp]# chmod g-s testdir/</div><div class="line">[yufei@yufei tmp]$ ls -ld testdir/</div><div class="line">drwxr-xrwx. 2 root root 4096 Jan 21 10:36 testdir/</div></pre></td></tr></table></figure></p>
<p>这样就还原了</p>
<h4 id="最后我们来看SBIT的作用及设置"><a href="#最后我们来看SBIT的作用及设置" class="headerlink" title="最后我们来看SBIT的作用及设置"></a>最后我们来看SBIT的作用及设置</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">[root@yufei tmp]# rm -fr testdir/*</div><div class="line">[root@yufei tmp]# ls -ld testdir/</div><div class="line">drwxr-xrwx. 2 root root 4096 Jan 21 11:42 testdir/</div></pre></td></tr></table></figure>
<p>清空/tmp/testdir/目录里面的全部内容。</p>
<p>我们切换成普通用户，然后再里面创建文件，至少需要两个普通用户来测试这个，如果没有的话，就自己建立。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">[root@yufei tmp]# su yufei</div><div class="line">[yufei@yufei tmp]$ touch testdir/yufei_file</div><div class="line">[yufei@yufei tmp]$ ls -l testdir/</div><div class="line">total 0</div><div class="line">-rw-rw-r– 1 yufei yufei 0 Jan 21 11:45 yufei_file</div></pre></td></tr></table></figure></p>
<p>这时候我们建立了一个文件，我们换成另外一个用户<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">[yufei@yufei tmp]$ suopsers</div><div class="line">Password:</div><div class="line">[opsers@yufei tmp]$ ls -ld testdir/</div><div class="line">drwxr-xrwx. 2 root root 4096 Jan 21 11:45 testdir/</div></pre></td></tr></table></figure></p>
<p>我们看到，虽然其他用户对yufei_file只有只读权限，但由于yufei_file所在的目录，对其他人是全部的权限，所以，我们换其他用户还是可以删除这个文件的，看操作<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[opsers@yufei tmp]$ rm -f testdir/yufei_file</div><div class="line">[opsers@yufei tmp]$ ls testdir/</div></pre></td></tr></table></figure></p>
<p>发现我们已经删除了这个不属于我们的权限。<br>下面我们就给这个目录加上SBIT权限，再来看看效果<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">[opsers@yufei tmp]$ su root</div><div class="line">Password:</div><div class="line">[root@yufei tmp]# chmod o+t testdir</div><div class="line">[root@yufei tmp]# ls -ld testdir/</div><div class="line">drwxr-xrwt. 2 root root 4096 Jan 21 11:49 testdir/</div></pre></td></tr></table></figure></p>
<p>再一次切换普通用户，创建文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">[root@yufei tmp]# su yufei</div><div class="line">[yufei@yufei tmp]$ touch testdir/yufei_file</div><div class="line">[yufei@yufei tmp]$ ls -l testdir/yufei_file</div><div class="line">-rw-rw-r– 1 yufei yufei 0 Jan 21 11:51 testdir/yufei_file</div></pre></td></tr></table></figure></p>
<p>这个文件的权限还是和第一次创建的时候是一样的，我们再换成其他的用户，看看能不能再次删除这个文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">[yufei@yufei tmp]$ su opsers</div><div class="line">Password:</div><div class="line">[opsers@yufei tmp]$ rm -f testdir/yufei_file</div><div class="line">rm: cannot remove `testdir/yufei_file’: Operation not permitted</div></pre></td></tr></table></figure></p>
<p>看到提示，说权限不够了，只能由这个文件的创建者或root用户才能删除。这个我们就不演示了。<br>如果要还原权限的话，<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">[opsers@yufei tmp]$ su root</div><div class="line">Password:</div><div class="line">[root@yufei tmp]# chmod o-t testdir</div><div class="line">[root@yufei tmp]# ls -ld testdir/</div><div class="line">drwxr-xrwx. 2 root root 4096 Jan 21 11:51 testdir/</div></pre></td></tr></table></figure></p>
<p>两个需要注意的问题</p>
<p>OK，关于SUID/SGID/SBIT这些特殊权限的应用和作用我们已经完了。但如果你仔细一点的话，会发现，我并没有用数字方式来更改这个特殊的权限，为什么呢？且看下面的分析。</p>
<h3 id="question"><a href="#question" class="headerlink" title="question"></a>question</h3><h4 id="问题1：用数字改变目录的特殊权限，不起作用。"><a href="#问题1：用数字改变目录的特殊权限，不起作用。" class="headerlink" title="问题1：用数字改变目录的特殊权限，不起作用。**"></a>问题1：用数字改变目录的特殊权限，不起作用。**</h4><p>我们把/tmp/下面，我们自己建立的实验文件删除<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[root@yufei tmp]# rm -fr testdir/</div><div class="line">[root@yufei tmp]# rm -fr passwd</div></pre></td></tr></table></figure></p>
<p>然后再重新创建一个文件和目录，<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">[root@yufei tmp]# cp /usr/bin/passwd ./</div><div class="line">[root@yufei tmp]# mkdir testdir</div><div class="line">[root@yufei tmp]# ls -l passwd ;ls -ld testdir/</div><div class="line">-rwxr-xr-x 1 root root 26968 Jan 21 12:00 passwd</div><div class="line">drwxr-xr-x 2 root root 4096 Jan 21 12:00 testdir/</div></pre></td></tr></table></figure></p>
<p>下面我们就来用数字方式来更改这三个特殊的权限，看看会有什么样的结果<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">[root@yufei tmp]# chmod 4755 passwd</div><div class="line">[root@yufei tmp]# chmod 3755 testdir/</div><div class="line">[root@yufei tmp]# ls -l passwd ;ls -ld testdir/</div><div class="line">-rwsr-xr-x 1 root root 26968 Jan 21 12:00 passwd</div><div class="line">drwxr-sr-x 2 root root 4096 Jan 21 12:00 testdir/</div></pre></td></tr></table></figure></p>
<p>发现用这种方式增加这三个特殊权限没有问题，那么我们再把权限改回去看看<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">[root@yufei tmp]# chmod 0755 passwd</div><div class="line">[root@yufei tmp]# chmod 0755 testdir/</div><div class="line">[root@yufei tmp]# ls -l passwd ;ls -ld testdir/</div><div class="line">-rwxr-xr-x 1 root root 26968 Jan 21 12:00 passwd</div><div class="line">drwxr-sr-x 2 root root 4096 Jan 21 12:00 testdir/</div></pre></td></tr></table></figure></p>
<p>我们发现，对文件，权限是改回去了，而对于目录，只改回去了SBIT的权限，对SUID和SGID改不回去。这是RHEL6上的实验结果，可能是出于安全性的考虑吗？这个我就不清楚了，也找不到相关的资料。</p>
<p>所以说，建议大家还是用最明了的方式，直接用+-来更改，无论方法如何，最终能得到结果就OK了。哈哈……</p>
<h4 id="问题2：为什么会有大写的S和T。"><a href="#问题2：为什么会有大写的S和T。" class="headerlink" title="问题2：为什么会有大写的S和T。"></a>问题2：为什么会有大写的S和T。</h4><p>还是用上面的文件和目录<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">[root@yufei tmp]# ls -l passwd ;ls -ld testdir/</div><div class="line">-rwxr-xr-x 1 root root 26968 Jan 21 12:00 passwd</div><div class="line">drwxr-sr-x 2 root root 4096 Jan 21 12:00 testdir/</div></pre></td></tr></table></figure></p>
<p>我们把passwd和testdir的x权限去掉<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">[root@yufei tmp]# chmod u-x passwd</div><div class="line">[root@yufei tmp]# chmod o-x testdir/</div><div class="line">[root@yufei tmp]# ls -l passwd ;ls -ld testdir/</div><div class="line">-rw-r-xr-x 1 root root 26968 Jan 21 12:00 passwd</div><div class="line">drwxr-sr– 2 root root 4096 Jan 21 12:00 testdir/</div></pre></td></tr></table></figure></p>
<p>再给他们加上SUID和SBIT权限<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">[root@yufei tmp]# chmod u+s passwd</div><div class="line">[root@yufei tmp]# chmod o+t testdir/</div><div class="line">[root@yufei tmp]# ls -l passwd ;ls -ld testdir/</div><div class="line">-rwSr-xr-x 1 root root 26968 Jan 21 12:00 passwd</div><div class="line">drwxr-sr-T 2 root root 4096 Jan 21 12:00 testdir/</div></pre></td></tr></table></figure></p>
<p>我们看到，这时候的小s和小t已经变成了大S和大T了，为什么呢？因为他们这个位置没有了x权限，如果没有了x权限，根据我们上面讲的内容，其实，这个特殊的权限就相当于一个空的权限，没有意义。也就是说，如果你看到特殊权限位置上变成了大写的了，那么，就说明，这里有问题，需要排除。</p>
<h2 id="ACL权限（用来解决用户权限身份不足的问题）"><a href="#ACL权限（用来解决用户权限身份不足的问题）" class="headerlink" title="ACL权限（用来解决用户权限身份不足的问题）"></a>ACL权限（用来解决用户权限身份不足的问题）</h2><p>问题：只要使用ACL权限递归赋予权限，就很有可能出现权限溢出的危险（应为文件和目录的wrx权限含义是不同的）</p>
<p>举例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">/www</div><div class="line">	sc --&gt; root</div><div class="line">	61 --&gt;  fgroup</div><div class="line">	o</div><div class="line">	770</div></pre></td></tr></table></figure></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">[root@localhost ~]# mkdir /www</div><div class="line">[root@localhost ~]# chmod 770 /www/</div><div class="line">[root@localhost ~]# groupadd fgroup</div><div class="line">[root@localhost ~]# gpasswd -a sc fgroup</div></pre></td></tr></table></figure>
<p>正在将用户“sc”加入到“fgroup”组中<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[root@localhost ~]# gpasswd -a aa fgroup</div></pre></td></tr></table></figure></p>
<p>正在将用户“aa”加入到“fgroup”组中<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">[root@localhost ~]# chown root:fgroup  /www</div><div class="line">[root@localhost ~]# ll -d  /www/</div><div class="line">drwxrwx--- 2 root fgroup 4096 04-25 14:56 /www/</div></pre></td></tr></table></figure></p>
<h3 id="getfacl-文件名-查询文件的acl权限"><a href="#getfacl-文件名-查询文件的acl权限" class="headerlink" title="getfacl  文件名        查询文件的acl权限"></a>getfacl  文件名        查询文件的acl权限</h3><h3 id="setfacl-选项-文件名-设定acl权限"><a href="#setfacl-选项-文件名-设定acl权限" class="headerlink" title="setfacl  选项  文件名        设定acl权限"></a>setfacl  选项  文件名        设定acl权限</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">	-m			设定权限</div><div class="line">	-b			删除权限</div><div class="line">setfacl  -m  u:用户名:权限   文件名</div><div class="line">setfacl  -m  g:组名：权限   文件名</div><div class="line">setfacl  -m u:aa:rwx  /test		给test目录赋予aa是读写执行的acl权限</div><div class="line"></div><div class="line">setfacl -m u:cc:rx -R soft/		赋予递归acl权限，只能赋予目录</div><div class="line">		-R  递归</div><div class="line">setfacl  -b  /test		删除acl权限</div></pre></td></tr></table></figure>
<h3 id="setfacl-m-d-u-aa-rwx-R-test-acl默认权限。"><a href="#setfacl-m-d-u-aa-rwx-R-test-acl默认权限。" class="headerlink" title="setfacl  -m d:u:aa:rwx -R /test    acl默认权限。"></a>setfacl  -m d:u:aa:rwx -R /test    acl默认权限。</h3><blockquote>
<p>注意：默认权限只能赋予目录</p>
<p>注意：如果给目录赋予acl权限，两条命令都要输入</p>
</blockquote>
<ul>
<li>-R 递归</li>
<li>-m  u:用户名：-R 权限        只对已经存在的文件生效</li>
<li>-m  d:u:用户名：-R 权限        只对未来要新建的文件生效</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;普通权限&quot;&gt;&lt;a href=&quot;#普通权限&quot; class=&quot;headerlink&quot; title=&quot;普通权限&quot;&gt;&lt;/a&gt;普通权限&lt;/h2&gt;&lt;p&gt;文件的权限：    - r  w  -  -  w  x  r  -  x&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;第一位：文件的类型&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    -：文件&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    d：文件夹&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    l：连接&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    c：字符设备文件&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    b：块设备&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    s：套接口文件&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;第二位：所有者读权限&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;第三位：所有者写权限&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;第四位：所有者执行权限&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;第五位：所有者组读权限&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;第六位：所有者组写权限&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;第七位：所有者组执行权限&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;第八位：其他组读权限&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;第九位：其他组写权限&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;第十位：其他组执行权限&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;r		4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;w		2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;x		1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Linux" scheme="https://weizhimiao.github.io/categories/Linux/"/>
    
    
  </entry>
  
  <entry>
    <title>PHP魔术方法小结</title>
    <link href="https://weizhimiao.github.io/2016/10/06/PHP%E9%AD%94%E6%9C%AF%E6%96%B9%E6%B3%95%E5%B0%8F%E7%BB%93/"/>
    <id>https://weizhimiao.github.io/2016/10/06/PHP魔术方法小结/</id>
    <published>2016-10-06T14:30:00.000Z</published>
    <updated>2016-10-07T13:24:03.000Z</updated>
    
    <content type="html"><![CDATA[<p>魔术方法：</p>
<blockquote>
<p>一种特殊的函数</p>
</blockquote>
<a id="more"></a>
<h2 id="构造方法：-construct-或者和类名同名的方法"><a href="#构造方法：-construct-或者和类名同名的方法" class="headerlink" title="构造方法： __construct()  或者和类名同名的方法"></a>构造方法： __construct()  或者和类名同名的方法</h2><p>触发时机：在对象实例化的时候自动触发。</p>
<p>作用：初始化成员属性</p>
<p>参数：可以有，可以没有，取决于设定和逻辑</p>
<p>返回值：没有</p>
<p>注意：如果构造方法具有参数，且参数没有默认值，在实例化对象时，必须在类名()内添加对应的实参值。</p>
<h2 id="析构方法-destruct"><a href="#析构方法-destruct" class="headerlink" title="析构方法 __destruct()"></a>析构方法 __destruct()</h2><p>触发时机： 在销毁对象的时候自动触发(unset或者页面执行完毕)</p>
<p>作用：回收对象使用过程中的资源。</p>
<p>参数：没有</p>
<p>返回值：没有</p>
<h2 id="get"><a href="#get" class="headerlink" title="__get()"></a>__get()</h2><p>触发时机：访问私有成员属性的时候自动触发</p>
<p>功能：1.防止报错  2.为私有属性访问提供后门</p>
<p>参数：1个    访问的私有属性名称</p>
<p>返回值：可以有，可以没有</p>
<h2 id="set"><a href="#set" class="headerlink" title="__set()"></a>__set()</h2><p>触发时机: 对私有成员属性进行设置值的时候自动触发</p>
<p>功能:1.屏蔽错误  2.为私有成员属性设置</p>
<p>参数: 2个   1私有成员属性名  2 要设置的值</p>
<p>返回值:无</p>
<h2 id="isset"><a href="#isset" class="headerlink" title="__isset()"></a>__isset()</h2><p>触发时机:对私有成员属性进行isset检测时自动触发</p>
<p>功能: 1.代替对象外部的isset检测，返回结果</p>
<p>参数: 1个   1私有成员属性名</p>
<p>返回值:有  一般返回 isset(属性)结果</p>
<h2 id="unset"><a href="#unset" class="headerlink" title="__unset()"></a>__unset()</h2><p>触发时机:在对象外部对私有成员属性进行unset操作时自动触发</p>
<p>功能: 1.代替对象外部的unset操作，返回结果</p>
<p>参数: 1个   1私有成员属性名</p>
<p>返回值:无</p>
<h2 id="sleep"><a href="#sleep" class="headerlink" title="__sleep()"></a>__sleep()</h2><p>触发时机：在对象进行串行化操作时触发.</p>
<p>功能：指定需要串行化的成员属性.</p>
<p>参数:无</p>
<p>返回值: 需要返回一个数组类型，每个元素都是需要串行化的成员属性名.</p>
<h2 id="wakeup"><a href="#wakeup" class="headerlink" title="__wakeup()"></a>__wakeup()</h2><p>触发时机：.在对象进行反串行化时自动触发</p>
<p>功能：.反串行化时自动修改部分成员属性值.</p>
<p>参数:无</p>
<p>返回值: 无</p>
<h2 id="tostring"><a href="#tostring" class="headerlink" title="__tostring()"></a>__tostring()</h2><p>触发时机：对一个对象进行echo操作时 自动触发</p>
<p>功能：简化操作或者为对象输出值</p>
<p>参数:无</p>
<p>返回值:必须有且必须为字符串类型.</p>
<h2 id="clone"><a href="#clone" class="headerlink" title="__clone()"></a>__clone()</h2><p>触发时机:对对象进行克隆操作时自动触发</p>
<p>功能：修改克隆之后的对象的部分属性值.</p>
<p>参数:无</p>
<p>返回值:无</p>
<p>注意：对象的赋值默认就是引用赋值，不能通过赋值操作获取一个新的对象，获取新对象的操作应该使用克隆操作</p>
<p>格式： 变量=clone 对象变量</p>
<h2 id="call（）"><a href="#call（）" class="headerlink" title="__call（）"></a>__call（）</h2><p>触发时机:    调用了类中不存在的方法时自动触发</p>
<p>功能：1.屏蔽错误  2.为不存在的方法定义个一个功能.</p>
<p>参数:2个   1 不存在的方法名   2所有的实参组成的数组</p>
<p>返回值:可有可无(根据实际功能来看)</p>
<h2 id="autoload-唯一一个类外部的魔术方法"><a href="#autoload-唯一一个类外部的魔术方法" class="headerlink" title="__autoload()(唯一一个类外部的魔术方法)"></a>__autoload()(唯一一个类外部的魔术方法)</h2><p>触发时机:    当页面中需要一个 类而该类不存在时自动触发</p>
<p>功能：实现类的自动加载.</p>
<p>参数1个 不存在的类名</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;魔术方法：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;一种特殊的函数&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="PHP" scheme="https://weizhimiao.github.io/categories/PHP/"/>
    
    
  </entry>
  
  <entry>
    <title>Linux常见的配置文件</title>
    <link href="https://weizhimiao.github.io/2016/10/06/Linux%E5%B8%B8%E8%A7%81%E7%9A%84%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/"/>
    <id>https://weizhimiao.github.io/2016/10/06/Linux常见的配置文件/</id>
    <published>2016-10-06T12:00:00.000Z</published>
    <updated>2016-10-07T14:43:46.000Z</updated>
    
    <content type="html"><![CDATA[<p>在Linux中我们经常需要修改各种配置文件，例如，启动引导程序配置文件、系统启动文件核脚本、网络配置文件、文件系统配置文件、文件服务程序配置文件等等。</p>
<a id="more"></a>
<h2 id="etc-passwd-用户信息配置文件"><a href="#etc-passwd-用户信息配置文件" class="headerlink" title="/etc/passwd    用户信息配置文件"></a>/etc/passwd    用户信息配置文件</h2><ul>
<li>文件作用：保存Linux用户信息</li>
<li>文件内容：<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">root:x:0:0:root:/root:/bin/bash</div></pre></td></tr></table></figure>
</li>
</ul>
<p>说明：</p>
<ul>
<li>第一位：用户名</li>
<li>第二位：密码位（只是一个密码标志，真实密码并不是存在这）</li>
<li><p>第三位：UID    用户ID</p>
<blockquote>
<p>   0    超级管理员<br>   1-499    系统用户（伪用户）<br>   >500    普通用户</p>
</blockquote>
</li>
<li><p>第四位：GID    初始组ID</p>
</li>
<li>第五位：用户说明</li>
<li>第六位：家目录</li>
<li>第七位：用户登录之后的权限<blockquote>
<p>常见的两种权限：</p>
<p>   /bin/bash</p>
<p>   /sbin/nologin伪用户，不能进行登陆</p>
</blockquote>
</li>
</ul>
<h2 id="etc-shadow-影子文件"><a href="#etc-shadow-影子文件" class="headerlink" title="/etc/shadow    影子文件"></a>/etc/shadow    影子文件</h2><ul>
<li>文件作用：保存用户密码，及密码的有效期</li>
<li>文件内容：<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">root:$6$w5RBeFe7Y1bixrQR$tp0zHL1bMmAVv0SAS56LsCOyZ4KUj3V0GI0dRZ4KSlf.ggisV7dwiQ8s5xebcZghVDxwlYTjN6qKGU9zRc.En1:16247:0:99999:7:::</div></pre></td></tr></table></figure>
</li>
</ul>
<p>说明：</p>
<ul>
<li><p>第一字段：用户名（也被称为登录名），在/etc/shadow中，用户名和/etc/passwd 是相同的，这样就把passwd 和shadow中用的用户记录联系在一起；这个字段是非空的</p>
</li>
<li><p>第二字段：密码（已被加密），如果是有些用户在这段是x，表示这个用户不能登录到系统；这个字段是非空的</p>
</li>
<li><p>第三字段：上次修改口令的时间；这个时间是从1970年01月01日算起到最近一次修改口令的时间间隔（天数），您可以通过passwd 来修改用户的密码，然后查看/etc/shadow中此字段的变化</p>
</li>
<li><p>第四字段：两次修改口令间隔最少的天数；如果设置为0,则禁用此功能；也就是说用户必须经过多少天才能修改其口令；此项功能用处不是太大；默认值是通过/etc/login.defs文件定义中获取，PASS_MIN_DAYS 中有定义</p>
</li>
<li><p>第五字段：两次修改口令间隔最多的天数；这个能增强管理员管理用户口令的时效性，应该说在增强了系统的安全性；如果是系统默认值，是在添加用户时由/etc/login.defs文件定义中获取，在PASS_MAX_DAYS 中定义</p>
</li>
<li><p>第六字段：提前多少天警告用户口令将过期；当用户登录系统后，系统登录程序提醒用户口令将要作废；如果是系统默认值，是在添加用户时由/etc/login.defs文件定义中获取，在PASS_WARN_AGE 中定义</p>
</li>
<li><p>第七字段：在口令过期之后多少天禁用此用户；此字段表示用户口令作废多少天后，系统会禁用此用户，也就是说系统会不能再让此用户登录，也不会提示用户过期，是完全禁用</p>
</li>
<li><p>第八字段：用户过期日期；此字段指定了用户作废的天数（从1970年的1月1日开始的天数），如果这个字段的值为空，帐号永久可用</p>
</li>
<li><p>第九字段：保留字段，目前为空，以备将来Linux发展之用</p>
</li>
</ul>
<h2 id="etc-group-用户组配置文件"><a href="#etc-group-用户组配置文件" class="headerlink" title="/etc/group    用户组配置文件"></a>/etc/group    用户组配置文件</h2><ul>
<li>文件作用：用户组配置</li>
<li>文件内容：<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">root:x:0:</div><div class="line">bin:x:1:bin,daemon</div></pre></td></tr></table></figure>
</li>
</ul>
<p>说明：</p>
<ul>
<li><p>组名：组密码位：组ID：组中的附加用户</p>
</li>
<li><p>初始组：每个用户初始组只能有一个，初始组只能有一个，一般都是和用户名相同的组作为初始组</p>
</li>
<li><p>附加组：每个用户可以属于多个附加组。要把用户加入组，都是加入附加组</p>
</li>
</ul>
<h2 id="etc-sysconfig-network-scripts-ifcfg-eth0-网卡信息文件"><a href="#etc-sysconfig-network-scripts-ifcfg-eth0-网卡信息文件" class="headerlink" title="/etc/sysconfig/network-scripts/ifcfg-eth0    网卡信息文件"></a>/etc/sysconfig/network-scripts/ifcfg-eth0    网卡信息文件</h2><ul>
<li>文件作用：保存网卡配置</li>
<li>文件内容：<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">DEVICE=eth0					网卡设备名</div><div class="line">BOOTPROTO=none				是否自动获取IP。none：不生效					static：手动		dhcp：动态获取IP</div><div class="line">BROADCAST=192.168.140.255			广播地址</div><div class="line">HWADDR=00:0c:29:21:80:48			mac地址</div><div class="line">IPADDR=192.168.140.253			IP地址</div><div class="line">IPV6INIT=yes					IPv6开启</div><div class="line">IPV6_AUTOCONF=yes				IPv6获取</div><div class="line">NETMASK=255.255.255.0				掩码</div><div class="line">NETWORK=192.168.140.0				网段</div><div class="line">ONBOOT=yes					网卡开机启动</div><div class="line">TYPE=Ethernet					以太网</div><div class="line">GATEWAY=192.168.140.1				网关</div></pre></td></tr></table></figure>
</li>
</ul>
<p>说明：</p>
<ul>
<li><p>如果是采用DHCP方式获取IP信息，则可以只填写上述用橙色标记的配置项即可。</p>
</li>
<li><p>修改配置文件后，需要重启服务（如service  network  restart）。</p>
</li>
</ul>
<h2 id="etc-udev-rules-d-70-persistent-net-rules-网卡和MAC地址绑定文件"><a href="#etc-udev-rules-d-70-persistent-net-rules-网卡和MAC地址绑定文件" class="headerlink" title="/etc/udev/rules.d/70-persistent-net.rules    网卡和MAC地址绑定文件"></a>/etc/udev/rules.d/70-persistent-net.rules    网卡和MAC地址绑定文件</h2><ul>
<li>文件作用：绑定网卡和MAC地址</li>
<li>文件内容：<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">SUBSYSTEM==&quot;net&quot;, ACTION==&quot;add&quot;, DRIVERS==&quot;?*&quot;, ATTR&#123;address&#125;==&quot;00:0c:29:41:c7:1f&quot;, ATTR&#123;type&#125;==&quot;1&quot;, KERNEL==&quot;eth*&quot;, NAME=&quot;eth0&quot;</div></pre></td></tr></table></figure>
</li>
</ul>
<p>说明：</p>
<ul>
<li>当虚拟机网卡不通是，有时需要删除<code>/etc/sysconfig/network-scripts/ifcfg-eth0</code> 中的MAC地址行，并且要删掉此文件。</li>
</ul>
<h2 id="etc-inittab-系统默认运行级别配置文件"><a href="#etc-inittab-系统默认运行级别配置文件" class="headerlink" title="/etc/inittab    系统默认运行级别配置文件"></a>/etc/inittab    系统默认运行级别配置文件</h2><ul>
<li>文件作用：设置默认系统运行级别。</li>
<li>文件内容：<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">id:3:initdefault:</div></pre></td></tr></table></figure>
</li>
</ul>
<p>说明：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">运行级别可分为：</div><div class="line"># Default runlevel. The runlevels used are:</div><div class="line">#   0 - halt (Do NOT set initdefault to this)</div><div class="line">#   1 - Single user mode</div><div class="line">#   2 - Multiuser, without NFS (The same as 3, if you do not have networking)</div><div class="line">#   3 - Full multiuser mode	命令行</div><div class="line">#   4 - unused</div><div class="line">#   5 - X11			图形界面</div><div class="line">#   6 - reboot (Do NOT set initdefault to this)</div></pre></td></tr></table></figure></p>
<h2 id="etc-rc-local—-gt-etc-rc-d-rc-local-自启动程序配置文件"><a href="#etc-rc-local—-gt-etc-rc-d-rc-local-自启动程序配置文件" class="headerlink" title="/etc/rc.local—-&gt;/etc/rc.d/rc.local    自启动程序配置文件"></a>/etc/rc.local—-&gt;/etc/rc.d/rc.local    自启动程序配置文件</h2><ul>
<li>文件作用：设置自启动程序，系统启动时会一次执行该文件中的命令</li>
<li>文件内容<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"># This script will be executed *after* all the other init scripts.</div><div class="line"># You can put your own initialization stuff in here if you don&apos;t</div><div class="line"># want to do the full Sys V style init stuff.</div><div class="line">touch /var/lock/subsys/local</div><div class="line">ulimit -SHn 65535</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="etc-services-所有系统常见端口"><a href="#etc-services-所有系统常见端口" class="headerlink" title="/etc/services    所有系统常见端口"></a>/etc/services    所有系统常见端口</h2><ul>
<li>文件作用：显示系统常见的端口及绑定的协议</li>
</ul>
<h2 id="etc-sysconfig-network-主机名配置文件"><a href="#etc-sysconfig-network-主机名配置文件" class="headerlink" title="/etc/sysconfig/network        主机名配置文件"></a>/etc/sysconfig/network        主机名配置文件</h2><ul>
<li>文件作用：配置主机名，永久保存</li>
<li>文件内容：<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">NETWORKING=yes</div><div class="line">HOSTNAME=localhost.localdomain</div></pre></td></tr></table></figure>
</li>
</ul>
<p>说明：</p>
<ul>
<li>建议不要更改。</li>
</ul>
<h2 id="etc-resolv-conf-DNS配置文件"><a href="#etc-resolv-conf-DNS配置文件" class="headerlink" title="/etc/resolv.conf        DNS配置文件"></a>/etc/resolv.conf        DNS配置文件</h2><ul>
<li>文件作用：设置ＤＮＳ服务器</li>
<li>文件内容：<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">nameserver  202.106.0.20</div></pre></td></tr></table></figure>
</li>
</ul>
<p>说明：</p>
<ul>
<li>如有多个DNS服务器地址，可在IP地址后面直接加，并以“，”分割，或者再起下一行写入“nameserver  xx.xx.xx.xx”</li>
</ul>
<h2 id="etc-vimrc-vim配置文件"><a href="#etc-vimrc-vim配置文件" class="headerlink" title="/etc/vimrc vim配置文件"></a>/etc/vimrc vim配置文件</h2><p>别名配置文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">~.bashrc</div></pre></td></tr></table></figure></p>
<h2 id="etc-selinux-config-seLinux的配置文件"><a href="#etc-selinux-config-seLinux的配置文件" class="headerlink" title="/etc/selinux/config seLinux的配置文件"></a>/etc/selinux/config seLinux的配置文件</h2><ul>
<li>文件内容<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"># This file controls the state of SELinux on the system.</div><div class="line"># SELINUX= can take one of these three values:</div><div class="line">#     enforcing - SELinux security policy is enforced.</div><div class="line">#     permissive - SELinux prints warnings instead of enforcing.</div><div class="line">#     disabled - No SELinux policy is loaded.</div><div class="line">SELINUX=disabled</div><div class="line"># SELINUXTYPE= can take one of these two values:</div><div class="line">#     targeted - Targeted processes are protected,</div><div class="line">#     mls - Multi Level Security protection.</div><div class="line">SELINUXTYPE=targeted</div></pre></td></tr></table></figure>
</li>
</ul>
<p>关闭seLinux</p>
<ul>
<li>将配置文件中seLinux项改为SELINUX=disabled，然后重启Linux。</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在Linux中我们经常需要修改各种配置文件，例如，启动引导程序配置文件、系统启动文件核脚本、网络配置文件、文件系统配置文件、文件服务程序配置文件等等。&lt;/p&gt;
    
    </summary>
    
      <category term="Linux" scheme="https://weizhimiao.github.io/categories/Linux/"/>
    
    
  </entry>
  
  <entry>
    <title>ElasticSearch整理</title>
    <link href="https://weizhimiao.github.io/2016/10/05/ElasticSearch%E6%95%B4%E7%90%86/"/>
    <id>https://weizhimiao.github.io/2016/10/05/ElasticSearch整理/</id>
    <published>2016-10-05T13:00:00.000Z</published>
    <updated>2016-10-08T09:36:44.000Z</updated>
    
    <content type="html"><![CDATA[<p>ElasticSearch是由Shay Banon发起的一个开源搜索服务器项目。由于其分布式特性和实时搜索能力，成为当前搜索和数据分析解决方案领域的重要成员。</p>
<p><img src="http://n.sinaimg.cn/games/3ece443e/20161006/ElasticSearch.png" alt="ElasticSearch"></p>
<a id="more"></a>
<h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><p>索引</p>
<blockquote>
<p>索引（index）是ElasticSearch存放数据的一种逻辑结构。类比关系型数据库中的数据表。</p>
</blockquote>
<p>文档</p>
<blockquote>
<p>文档（document）是ElasticSearch中存储的主要实体。每个ElasticSearch文档类比关系型数据库中数据表的没一行数据。<br>文档由字段（行数据的列）组成，一个文档由多个字段组成，并且ElasticSearch允许一个字段重复出现多次，该类型字段被称为多只字段。每个字段对应一种类型（字符串型、数值型、日期型等），并且ElasticSearch可以自动确定字段类型。不同于关系型数据库，ElasticSearch的文档结构可以是不固定的。即不同的文档可以有不同的字段集合。</p>
</blockquote>
<p>文档类型</p>
<blockquote>
<p>ElasticSearch中，一个索引可以存储许多不同用途的对象。按照不同的用途我们可以将文档划分成不同的类型加以区分。</p>
</blockquote>
<p>节点和集群</p>
<blockquote>
<p>ElasticSearch既可以作为一个独立搜索服务器工作，也支持多台一起协作进行运行，构成一个集群（cluster），其中的每个服务器被称为节点（node）。ElasticSearch可以通过索引分片,将海量的数据进行分割并分布到不同的节点，来实现更强的可用性和更高的性能。</p>
</blockquote>
<p>分片</p>
<blockquote>
<p>对于存储大规模的文档，ElasticSearch会将数据进行切分，每部分切成一个单独的Apache Lucene索引，称为分片（shared）。每个分片可以存储在集群的不同的节点上，当一个查询需要用到多个分片时，ElasticSearch会将请求发送至多个分片，之后结果进行合并。</p>
</blockquote>
<p>副本</p>
<blockquote>
<p>分片副本是对原始分片的一个拷贝，每个主分片可以有零个或者多个副分片。当主分片丢失时，副分片就会被提升为主分片。启用分片副本功能，可以提高查询的吞吐或实现系统的高可用性。</p>
</blockquote>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><h3 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h3><p>JDK6+</p>
<p>JDK的安装方式比较简单，只需将下载回来的程序包解压到相应的目录即可。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">wget http://download.oracle.com/otn-pub/java/jdk/8u101-b13/jdk-8u101-linux-x64.tar.gz</div><div class="line">mkdir /usr/local/java</div><div class="line">tar -zxf jdk-8u101-linux-x64.tar.gz -C /usr/local/java/</div></pre></td></tr></table></figure></p>
<p>设置JDK的环境变量，如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"># tail -3 ~/.bash_profile</div><div class="line">export JAVA_HOME=/usr/local/java/jdk1.8.0_101</div><div class="line">export PATH=$PATH:$JAVA_HOME/bin</div><div class="line">exportCLASSPATH=.:$JAVA_HOME/lib/tools.jar:$JAVA_HOME/lib/dt.jar:$CLASSPATH</div></pre></td></tr></table></figure></p>
<p>重新加载环境变量<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"># source .bash_profile</div></pre></td></tr></table></figure></p>
<p>在Shell提示符中执行java –version命令，显示如下结果，说明安装成功：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"># java -version</div><div class="line">java version &quot;1.8.0_45&quot;</div><div class="line">Java(TM) SE Runtime Environment (build 1.8.0_45-b14)</div><div class="line">Java HotSpot(TM) 64-Bit Server VM (build 25.45-b02,mixed mode)</div></pre></td></tr></table></figure></p>
<h3 id="安装Elasticsearch"><a href="#安装Elasticsearch" class="headerlink" title="安装Elasticsearch"></a>安装Elasticsearch</h3><p>下载Elasticsearch后，解压到对应的目录就完成Elasticsearch的安装。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"># wget https://download.elasticsearch.org/elasticsearch/elasticsearch/elasticsearch-1.7.0.zip</div><div class="line"># unzip elasticsearch-1.7.0.zip</div><div class="line"># mv elasticsearch-1.7.0 /usr/local/elasticsearch</div></pre></td></tr></table></figure></p>
<h3 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">elasticsearch/</div><div class="line">├── bin</div><div class="line">│   ...#运行elasticsearch和进行插件管理所需的脚本</div><div class="line">├── config</div><div class="line">│   ...#elasticsearch配置文件所在目录</div><div class="line">├── data</div><div class="line">│   ...#存储elasticsearch用到的数据</div><div class="line">├── lib</div><div class="line">│   ...#elasticsearch运行中用到的库</div><div class="line">├── LICENSE.txt</div><div class="line">├── logs</div><div class="line">│   ...#存储elasticsearch运行中产生的事件信息和错误信息</div><div class="line">├── nohup</div><div class="line">├── NOTICE.txt</div><div class="line">└── README.textile</div><div class="line"></div><div class="line">10 directories, 60 files</div></pre></td></tr></table></figure>
<h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>所有的配置文件都位于config目录下。该目录下包含两个文件。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">├── config</div><div class="line">│   ├── elasticsearch.yml</div><div class="line">│   └── logging.yml</div></pre></td></tr></table></figure></p>
<p>elasticsearch.yml</p>
<blockquote>
<p>负责设置服务器的默认配置。<br>比较重要的两个值cluster.name 和 node.name.</p>
<ul>
<li>cluster.name,保存的是集群名称。通过集群名称可以区分不同的集群。配置具有相同名称的节点将尝试组成一个集群。</li>
<li>node.name，节点名称。我们也可以不指定该名称，elasticsearch会自动为节点选择一个唯一名称。但每次启动时这个唯一名称会发生改变。</li>
</ul>
</blockquote>
<p>其他配置<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div><div class="line">230</div><div class="line">231</div><div class="line">232</div><div class="line">233</div><div class="line">234</div><div class="line">235</div><div class="line">236</div><div class="line">237</div><div class="line">238</div><div class="line">239</div><div class="line">240</div><div class="line">241</div><div class="line">242</div><div class="line">243</div><div class="line">244</div><div class="line">245</div><div class="line">246</div><div class="line">247</div><div class="line">248</div><div class="line">249</div><div class="line">250</div><div class="line">251</div><div class="line">252</div><div class="line">253</div><div class="line">254</div><div class="line">255</div><div class="line">256</div><div class="line">257</div><div class="line">258</div><div class="line">259</div><div class="line">260</div><div class="line">261</div><div class="line">262</div><div class="line">263</div><div class="line">264</div><div class="line">265</div><div class="line">266</div><div class="line">267</div><div class="line">268</div><div class="line">269</div><div class="line">270</div><div class="line">271</div><div class="line">272</div><div class="line">273</div><div class="line">274</div><div class="line">275</div><div class="line">276</div><div class="line">277</div><div class="line">278</div><div class="line">279</div><div class="line">280</div><div class="line">281</div><div class="line">282</div><div class="line">283</div><div class="line">284</div><div class="line">285</div><div class="line">286</div><div class="line">287</div><div class="line">288</div><div class="line">289</div><div class="line">290</div><div class="line">291</div><div class="line">292</div><div class="line">293</div><div class="line">294</div><div class="line">295</div><div class="line">296</div><div class="line">297</div><div class="line">298</div><div class="line">299</div><div class="line">300</div><div class="line">301</div><div class="line">302</div><div class="line">303</div><div class="line">304</div><div class="line">305</div><div class="line">306</div><div class="line">307</div><div class="line">308</div><div class="line">309</div><div class="line">310</div><div class="line">311</div><div class="line">312</div><div class="line">313</div><div class="line">314</div><div class="line">315</div><div class="line">316</div><div class="line">317</div><div class="line">318</div><div class="line">319</div><div class="line">320</div><div class="line">321</div><div class="line">322</div><div class="line">323</div><div class="line">324</div><div class="line">325</div><div class="line">326</div><div class="line">327</div><div class="line">328</div><div class="line">329</div><div class="line">330</div><div class="line">331</div><div class="line">332</div><div class="line">333</div><div class="line">334</div><div class="line">335</div><div class="line">336</div><div class="line">337</div><div class="line">338</div><div class="line">339</div><div class="line">340</div><div class="line">341</div><div class="line">342</div><div class="line">343</div><div class="line">344</div><div class="line">345</div><div class="line">346</div><div class="line">347</div><div class="line">348</div><div class="line">349</div><div class="line">350</div><div class="line">351</div><div class="line">352</div><div class="line">353</div><div class="line">354</div><div class="line">355</div><div class="line">356</div><div class="line">357</div><div class="line">358</div><div class="line">359</div><div class="line">360</div><div class="line">361</div><div class="line">362</div><div class="line">363</div><div class="line">364</div><div class="line">365</div><div class="line">366</div><div class="line">367</div><div class="line">368</div><div class="line">369</div><div class="line">370</div><div class="line">371</div><div class="line">372</div><div class="line">373</div><div class="line">374</div><div class="line">375</div><div class="line">376</div><div class="line">377</div><div class="line">378</div><div class="line">379</div><div class="line">380</div><div class="line">381</div></pre></td><td class="code"><pre><div class="line">##################### Elasticsearch Configuration Example #####################</div><div class="line"></div><div class="line">＃此文件包含各种配置设置的概述，</div><div class="line">＃针对操作人员。应用程序开发人员应该</div><div class="line">＃在咨询&lt;http://elasticsearch.org/guide&gt;指南。</div><div class="line">#</div><div class="line">＃安装过程被覆盖在</div><div class="line">＃&lt;http://elasticsearch.org/guide/en/elasticsearch/reference/current/setup.html&gt;。</div><div class="line">#</div><div class="line">＃Elasticsearch附带了大多数设置合理的默认值，</div><div class="line">＃所以你可以尝试使用它而不用修改。</div><div class="line">#</div><div class="line">＃大多数时候，这些默认值是蛮好的运行生产</div><div class="line">＃集群。如果你正在微调群集，或者想知道的某些配置选项＃效果，请_DO ask_上</div><div class="line">＃邮件列表或IRC频道[http://elasticsearch.org/community。</div><div class="line">#</div><div class="line">＃配置中的任何元素都可以用环境变量替换</div><div class="line">＃通过将它们放置在$ &#123;...&#125;符号。 例如：</div><div class="line">#</div><div class="line">#node.rack: $&#123;RACK_ENV_VAR&#125;</div><div class="line"></div><div class="line">＃有关支持的格式和配置文件信息语法，请参阅</div><div class="line">＃&lt;http://elasticsearch.org/guide/en/elasticsearch/reference/current/setup-configuration.html&gt;</div><div class="line"></div><div class="line">################################### Cluster 集群###################################</div><div class="line"></div><div class="line">＃集群名称标识群集的自动发现。如果你在同一个网络上的正在运行多个群集，请确保您使用的是唯一的名称。</div><div class="line">＃</div><div class="line">＃cluster.name：elasticsearch</div><div class="line"></div><div class="line">#################################### Node 节点#####################################</div><div class="line"></div><div class="line"></div><div class="line">＃节点名称是在启动时动态生成的，但你也可以手动配置它们。你可以给这个节点起一个特定的名称：</div><div class="line">＃</div><div class="line">#node.name: &quot;Franz Kafka&quot;</div><div class="line"></div><div class="line">＃每个节点可以被配置为允许或拒绝称为集群主节点，</div><div class="line">＃和允许或拒绝来存储数据。</div><div class="line">＃</div><div class="line">＃允许此节点可以作为主节点（默认启用）：</div><div class="line">＃</div><div class="line">#node.master: true</div><div class="line">#</div><div class="line"># 允许此节点可以用来存储数据（默认启用）：</div><div class="line">#</div><div class="line">#node.data: true</div><div class="line"></div><div class="line"></div><div class="line">＃你可以利用这些设置，以设计高级集群拓扑。</div><div class="line">＃</div><div class="line">＃1，你想这个节点永远不会成为一个主节点，只保存数据。这将是群集的“主力”。</div><div class="line">＃</div><div class="line">＃</div><div class="line">#node.master: false</div><div class="line">#node.data: true</div><div class="line">#</div><div class="line">＃2，你要这个节点只能作为主：不存储任何数据和有免费的资源。这将是群集的“协调员”。</div><div class="line">＃</div><div class="line">＃</div><div class="line">#node.master: true</div><div class="line">#node.data: false</div><div class="line">#</div><div class="line">＃3，你希望这个节点是不是主数据节点，但可以充当“搜索负载平衡器”（取从节点的数据，聚集结果等）</div><div class="line">＃</div><div class="line">#node.master: false</div><div class="line">#node.data: false</div><div class="line"></div><div class="line"></div><div class="line">＃使用群集健康状况API[http://localhost:9200/_cluster/health]，</div><div class="line">＃节点信息API[http://localhost:9200/_nodes]或GUI工具</div><div class="line">＃如&lt;http://www.elasticsearch.org/overview/marvel/&gt;</div><div class="line">＃&lt;http://github.com/karmi/elasticsearch-paramedic&gt;</div><div class="line">＃&lt;http://github.com/lukas-vlcek/bigdesk&gt;和</div><div class="line">＃&lt;http://mobz.github.com/elasticsearch-head&gt;检查群集状态。</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">＃一个节点可以有与之关联的通用属性，可用于定制分片分配过滤，或分配意识。</div><div class="line">＃</div><div class="line">＃属性是一个简单的键值对，类似node.key：值，下面是一个例子：</div><div class="line">＃</div><div class="line">#node.rack: rack314</div><div class="line"></div><div class="line">＃默认情况下，多个节点被允许从相同的安装位置</div><div class="line"># 如果要禁用的话，设置如下：</div><div class="line">#node.max_local_storage_nodes: 1</div><div class="line"></div><div class="line"></div><div class="line">#################################### Index 索引####################################</div><div class="line"></div><div class="line">#</div><div class="line">＃您可以设置一些选项（如分片/副本选项，映射或分析器的定义，事务日志设置...）对全局参数，在这个文件中。</div><div class="line">#</div><div class="line"># Note, that it makes more sense to configure index settings specifically for</div><div class="line"># a certain index, either when creating it or by using the index templates API.</div><div class="line">#</div><div class="line">＃请注意，它更有意义专门配置索引设置</div><div class="line">＃某个具体的索引，创造它或使用该索引模板API。</div><div class="line"># See &lt;http://elasticsearch.org/guide/en/elasticsearch/reference/current/index-modules.html&gt; and</div><div class="line"># &lt;http://elasticsearch.org/guide/en/elasticsearch/reference/current/indices-create-index.html&gt;</div><div class="line"># for more information.</div><div class="line"></div><div class="line"></div><div class="line"># 设置一个索引的分片（副本）数量（默认 5）</div><div class="line">#</div><div class="line">#index.number_of_shards: 5</div><div class="line"></div><div class="line">＃设置索引（默认值为1）的副本（额外副本）数量：</div><div class="line">＃</div><div class="line">#index.number_of_replicas: 1</div><div class="line"></div><div class="line"># Note, that for development on a local machine, with small indices, it usually</div><div class="line"># makes sense to &quot;disable&quot; the distributed features:</div><div class="line">#</div><div class="line">＃注意，对于在本地机器，它通常比较小的值。禁用分布式特点是很有必要的</div><div class="line">＃</div><div class="line">#index.number_of_shards: 1</div><div class="line">#index.number_of_replicas: 0</div><div class="line"></div><div class="line"></div><div class="line">＃这些设置直接影响索引和搜索操作的性能</div><div class="line">＃在集群中。假设你有足够多的机器来保存分片及</div><div class="line">＃副本，经验法则是：</div><div class="line">#</div><div class="line"># 1. 更多的分片能提高索引效率，一个大的索引允许存储在不同的服务器上</div><div class="line"># 2. 更多的副本能够提高搜索效率，并且能够增强系统的可用性</div><div class="line">#</div><div class="line">#  &quot;number_of_shards&quot; 对于一个索引不能动态修改设置一次.</div><div class="line">#</div><div class="line"># T &quot;number_of_replicas&quot; 可以增加或者减少在任何时候，通过索引更新或者api操作</div><div class="line">#</div><div class="line"># Elasticsearch takes care about load balancing, relocating, gathering the</div><div class="line"># results from nodes, etc. Experiment with different settings to fine-tune</div><div class="line"># your setup.</div><div class="line"></div><div class="line">＃Elasticsearch需要关心负载均衡，搬迁，从节点收集结果，等。</div><div class="line"># 你可以通过不断的微调进行设置</div><div class="line"></div><div class="line">＃使用索引状态API（&lt;http://localhost:9200/A/_status&gt;）检查</div><div class="line">＃索引状态。</div><div class="line"></div><div class="line"></div><div class="line">#################################### Paths ####################################</div><div class="line"></div><div class="line"># 路径包含目录配置（此文件并logging.yml）：</div><div class="line">#path.conf: /path/to/conf</div><div class="line"></div><div class="line"># 索引数据存储路径配置</div><div class="line">#path.data: /path/to/data</div><div class="line">#</div><div class="line">＃可以任选地包括一个以上的位置，方便扩展和使用。 例如：</div><div class="line">#</div><div class="line">#path.data: /path/to/data1,/path/to/data2</div><div class="line"></div><div class="line"># 临时文件路径：</div><div class="line">#</div><div class="line">#path.work: /path/to/work</div><div class="line"></div><div class="line"># 日志文件路径:</div><div class="line">#</div><div class="line">#path.logs: /path/to/logs</div><div class="line"></div><div class="line"># 插件安装目录</div><div class="line">#</div><div class="line">#path.plugins: /path/to/plugins</div><div class="line"></div><div class="line"></div><div class="line">#################################### Plugin ###################################</div><div class="line"></div><div class="line"># 如果这里列出的插件没有安装用于当前节点，该节点将无法启动。</div><div class="line">#</div><div class="line">#plugin.mandatory: mapper-attachments,lang-groovy</div><div class="line"></div><div class="line"></div><div class="line">################################### Memory ####################################</div><div class="line"></div><div class="line">＃Elasticsearch表现不佳时，JVM启动交换：你应该确保它永远不会_交换。</div><div class="line">#</div><div class="line"># 将此属性设置为true锁定内存：</div><div class="line">#</div><div class="line">#bootstrap.mlockall: true</div><div class="line"></div><div class="line"></div><div class="line"># 确保ES_MIN_MEM和ES_MAX_MEM环境变量设置</div><div class="line">＃为相同的值，并且该机器有足够的内存来分配</div><div class="line">＃为Elasticsearch，留出足够的内存为操作系统本身。</div><div class="line">＃</div><div class="line">#</div><div class="line"># You should also make sure that the Elasticsearch process is allowed to lock</div><div class="line"># the memory, eg. by using `ulimit -l unlimited`.</div><div class="line"># 你还应该确保该Elasticsearch允许进程锁定内存</div><div class="line">＃例如。通过使用`ulimit -l unlimited`。</div><div class="line"></div><div class="line">############################## Network And HTTP ###############################</div><div class="line"></div><div class="line"></div><div class="line">＃Elasticsearch，默认情况下，本身绑定到0.0.0.0地址，并监听</div><div class="line">＃端口[9200-9300] HTTP流量和端口[9300-9400]节点到节点</div><div class="line">＃沟通。（范围意味着，如果端口忙，它会自动将</div><div class="line">＃尝试下口）。</div><div class="line"></div><div class="line"># 设置绑定专用地址（IPv4或IPv6）：</div><div class="line">#network.bind_host: 192.168.0.1</div><div class="line"></div><div class="line">＃设置其他节点将使用与该节点通信的地址。否则</div><div class="line">＃，它会自动的产生。它必须指向一个实际的IP地址。</div><div class="line">#</div><div class="line">#network.publish_host: 192.168.0.1</div><div class="line"></div><div class="line"># 同时设置“bind_host&apos;和&apos;publish_host”：</div><div class="line">#</div><div class="line">#network.host: 192.168.0.1</div><div class="line"></div><div class="line"># 设置一个自定义的节点间通讯端口，（默认为 9300）</div><div class="line">#transport.tcp.port: 9300</div><div class="line"></div><div class="line"># 启用节点间通讯压缩</div><div class="line">#</div><div class="line">#transport.tcp.compress: true</div><div class="line"></div><div class="line"># 设置自定义端口侦听HTTP流量：</div><div class="line">#</div><div class="line">#http.port: 9200</div><div class="line"></div><div class="line"># 设置自定义允许的内容长度：</div><div class="line">#</div><div class="line">#http.max_content_length: 100mb</div><div class="line"></div><div class="line"># 完全禁用HTTP：</div><div class="line">#</div><div class="line">#http.enabled: false</div><div class="line"></div><div class="line"></div><div class="line">################################### Gateway ###################################</div><div class="line"></div><div class="line"></div><div class="line">＃网关允许持收集集群之间的群集状态</div><div class="line">＃集群中每个状态改变（例如添加一个索引），都将会存储</div><div class="line">＃在网关，并且当集群首次启动时，</div><div class="line">＃它会从网关读出其状态。</div><div class="line"></div><div class="line"></div><div class="line">＃有几种类型的网关实现的。欲了解更多信息，请参阅</div><div class="line"># &lt;http://elasticsearch.org/guide/en/elasticsearch/reference/current/modules-gateway.html&gt;.</div><div class="line"></div><div class="line">＃默认网关类型为“本地”网关（推荐）：</div><div class="line">#</div><div class="line">#gateway.type: local</div><div class="line"></div><div class="line"># 设置当集群崩溃时，如何重新启动并恢复进程（使用共享网关时，尽可能多的使用本地数据）</div><div class="line"></div><div class="line"># 允许恢复后，在一个集群中有N个节点：</div><div class="line">#</div><div class="line">#gateway.recover_after_nodes: 1</div><div class="line"></div><div class="line">＃设置超时时间，在启动恢复过程中，前面设置的N个节点全部重启（接受时间值）：</div><div class="line">#</div><div class="line"></div><div class="line">#gateway.recover_after_time: 5m</div><div class="line"></div><div class="line">＃设置在一个句群众预计的节点数</div><div class="line">#一旦这些N个节点全部启用（满足recover_after_nodes），立即开始恢复过程（无需等待恢复时间后到期）：</div><div class="line">#</div><div class="line">#gateway.expected_nodes: 2</div><div class="line"></div><div class="line"></div><div class="line">############################# Recovery Throttling 恢复节流 #############################</div><div class="line"></div><div class="line"></div><div class="line">＃这些设置可以控制碎片分配的过程，在节点恢复期间、副本定位、重新平衡，或添加和删除节点时</div><div class="line"></div><div class="line"></div><div class="line">#</div><div class="line"># 设置一个节点上同时恢复数量</div><div class="line"># 1. 初步恢复期间</div><div class="line">#</div><div class="line">#cluster.routing.allocation.node_initial_primaries_recoveries: 4</div><div class="line">#</div><div class="line"># 2. 在添加/删除节点，再平衡期间</div><div class="line">#</div><div class="line">#cluster.routing.allocation.node_concurrent_recoveries: 2</div><div class="line"></div><div class="line"># 设置一个恢复时的吞吐量值（如100MB，默认20MB）</div><div class="line">#</div><div class="line">#indices.recovery.max_bytes_per_sec: 20mb</div><div class="line"></div><div class="line"></div><div class="line"># 设置一个并发流数量限制，在同级别的分片恢复时</div><div class="line">#</div><div class="line">#indices.recovery.concurrent_streams: 5</div><div class="line"></div><div class="line"></div><div class="line">################################## Discovery 发现##################################</div><div class="line"></div><div class="line"></div><div class="line">＃发现基础设施，确保节点可以在群集内找到和主节点的选举。是默认是通过多播方式来进行发现。</div><div class="line"></div><div class="line"># 设置一个节点确保能在集群内发现N个其他合格的节点能成为主节点。</div><div class="line"></div><div class="line">#discovery.zen.minimum_master_nodes: 1</div><div class="line"></div><div class="line"></div><div class="line"># 设置一个过期时间，在通过ping发现其他节点时</div><div class="line"># 在一个较差的网络环境中设置一个较长的值，可以最大限度的减少报错</div><div class="line"></div><div class="line">#discovery.zen.ping.timeout: 3s</div><div class="line"></div><div class="line"># 更多的信息，请看</div><div class="line"># &lt;http://elasticsearch.org/guide/en/elasticsearch/reference/current/modules-discovery-zen.html&gt;</div><div class="line"></div><div class="line"></div><div class="line">＃单播发现允许明确地控制哪些节点将被用于发现群集。它可以在多播不存在，或限制集群通信时使用。</div><div class="line">#</div><div class="line"># 1. 多播发现（默认启用）</div><div class="line">#</div><div class="line">#discovery.zen.ping.multicast.enabled: false</div><div class="line">#</div><div class="line"># 2. 配置一个初始清单在集群的主节点上，为了发现一个刚启用的节点</div><div class="line">#</div><div class="line">#discovery.zen.ping.unicast.hosts: [&quot;host1&quot;, &quot;host2:port&quot;]</div><div class="line"></div><div class="line"># 为了发现 ，EC2允许使用AWS EC2 API</div><div class="line"># 你必须安装云AWS插件启用EC2发现。</div><div class="line">#</div><div class="line"># 更多信息请查看</div><div class="line"># &lt;http://elasticsearch.org/guide/en/elasticsearch/reference/current/modules-discovery-ec2.html&gt;</div><div class="line">#</div><div class="line"># See &lt;http://elasticsearch.org/tutorials/elasticsearch-on-ec2/&gt;</div><div class="line"># 一步一步的教程</div><div class="line"></div><div class="line"># 为了发现 ，GCE发现允许使用谷歌Compute Engine的API</div><div class="line">#</div><div class="line"># 你必须安装云GCE GCE插件启用的发现。</div><div class="line">#</div><div class="line"># For more information, see &lt;https://github.com/elasticsearch/elasticsearch-cloud-gce&gt;.</div><div class="line"></div><div class="line"># Azure的发现允许以执行发现使用Azure的API。</div><div class="line">#</div><div class="line"># 你必须安装云cloud-azure插件启用的发现。</div><div class="line"># For more information, see &lt;https://github.com/elasticsearch/elasticsearch-cloud-azure&gt;.</div><div class="line"></div><div class="line">################################## Slow Log ##################################</div><div class="line"></div><div class="line"># 分片级查询并会的对应等级的日志</div><div class="line"></div><div class="line">#index.search.slowlog.threshold.query.warn: 10s</div><div class="line">#index.search.slowlog.threshold.query.info: 5s</div><div class="line">#index.search.slowlog.threshold.query.debug: 2s</div><div class="line">#index.search.slowlog.threshold.query.trace: 500ms</div><div class="line"></div><div class="line">#index.search.slowlog.threshold.fetch.warn: 1s</div><div class="line">#index.search.slowlog.threshold.fetch.info: 800ms</div><div class="line">#index.search.slowlog.threshold.fetch.debug: 500ms</div><div class="line">#index.search.slowlog.threshold.fetch.trace: 200ms</div><div class="line"></div><div class="line">#index.indexing.slowlog.threshold.index.warn: 10s</div><div class="line">#index.indexing.slowlog.threshold.index.info: 5s</div><div class="line">#index.indexing.slowlog.threshold.index.debug: 2s</div><div class="line">#index.indexing.slowlog.threshold.index.trace: 500ms</div><div class="line"></div><div class="line">################################## GC Logging ################################</div><div class="line"></div><div class="line">#monitor.jvm.gc.young.warn: 1000ms</div><div class="line">#monitor.jvm.gc.young.info: 700ms</div><div class="line">#monitor.jvm.gc.young.debug: 400ms</div><div class="line"></div><div class="line">#monitor.jvm.gc.old.warn: 10s</div><div class="line">#monitor.jvm.gc.old.info: 5s</div><div class="line">#monitor.jvm.gc.old.debug: 2s</div><div class="line"></div><div class="line">################################## Security ################################</div><div class="line"></div><div class="line"># Uncomment if you want to enable JSONP as a valid return transport on the</div><div class="line"># http server. With this enabled, it may pose a security risk, so disabling</div><div class="line"># it unless you need it is recommended (it is disabled by default).</div><div class="line"></div><div class="line">＃不推荐，如果要启用JSONP作为HTTP服务器上的返回。</div><div class="line">#启用此功能，它可能会带来安全风险，因此禁用它，除非你需要的建议（它被默认禁用）。</div><div class="line"></div><div class="line">#http.jsonp.enable: true</div></pre></td></tr></table></figure></p>
<p>logging.yml</p>
<blockquote>
<p>定义多少信息写入系统日志、定义日志文件，并定期创建新文件</p>
</blockquote>
<h3 id="管理"><a href="#管理" class="headerlink" title="管理"></a>管理</h3><p>启动Elasticsearch<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"># /usr/local/elasticsearch/bin/elasticsearch  -d</div></pre></td></tr></table></figure></p>
<blockquote>
<p>-d 表示将进程放入后台运行</p>
</blockquote>
<p>或者通过nohup命令<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"># nohup /usr/local/elasticsearch/bin/elasticsearch &gt; nohup</div></pre></td></tr></table></figure></p>
<p>将elasticsearch设置成开机自启动<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"># echo &quot;nohup /usr/local/elasticsearch/bin/elasticsearch &gt; nohup&quot; &gt; /etc/rc.local</div></pre></td></tr></table></figure></p>
<p>确认elasticsearch的9200端口已监听，说明elasticsearch已成功运行</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"># netstat -anp |grep :9200</div><div class="line">tcp        0      0 :::9200                     :::*                        LISTEN      3362/java</div></pre></td></tr></table></figure>
<p>如何关闭elasticsearch</p>
<ul>
<li>方法一：如果节点与控制台相连并且当前elasticsearch是使用-f选项运行，则只需要按下Ctrl+C组合键即可</li>
<li>方法二：通过发送TERM信号来终止服务器进程 kill -9 进程ID</li>
<li>方法三：使用REST API</li>
</ul>
<p>关闭整个集群<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"># curl -XPOST http://localhost:9200/_cluster/nodes/_shutdown</div></pre></td></tr></table></figure></p>
<p>关闭单个节点<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"># curl -XPOST  http://127.0.0.1:9200/_cluster/nodes/2ens0yuEQ12G6ct1UDpihQ/_shutdown</div></pre></td></tr></table></figure></p>
<p>2ens0yuEQ12G6ct1UDpihQ ，为要关闭的节点标志符</p>
<p>查看节点标志符，可以从elasticsearch日志中或者通过REST API中获得<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"># curl http://localhost:9200/_nodes/?pretty</div><div class="line">&#123;</div><div class="line">  &quot;cluster_name&quot; : &quot;elasticsearch&quot;,</div><div class="line">  &quot;nodes&quot; : &#123;</div><div class="line">    &quot;13QfvIdATEurGAhVAlO6tQ&quot; : &#123;</div><div class="line">      &quot;name&quot; : &quot;Edwin Jarvis&quot;,</div><div class="line">      ...</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>13QfvIdATEurGAhVAlO6tQ,即为节点标志符</p>
<h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"># curl http://localhost:9200</div><div class="line">&#123;</div><div class="line">  &quot;status&quot; : 200,</div><div class="line">  &quot;name&quot; : &quot;Destroyer of Demons&quot;,</div><div class="line">  &quot;cluster_name&quot; : &quot;elasticsearch&quot;,</div><div class="line">  &quot;version&quot; : &#123;</div><div class="line">    &quot;number&quot; : &quot;1.7.0&quot;,</div><div class="line">    &quot;build_hash&quot; : &quot;929b9739cae115e73c346cb5f9a6f24ba735a743&quot;,</div><div class="line">    &quot;build_timestamp&quot; : &quot;2015-07-16T14:31:07Z&quot;,</div><div class="line">    &quot;build_snapshot&quot; : false,</div><div class="line">    &quot;lucene_version&quot; : &quot;4.10.4&quot;</div><div class="line">  &#125;,</div><div class="line">  &quot;tagline&quot; : &quot;You Know, for Search&quot;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>查看elasticsearch服务器当前运行状况<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"># curl http://localhost:9200/_cluster/health?pretty</div><div class="line">&#123;</div><div class="line">  &quot;cluster_name&quot; : &quot;elasticsearch&quot;,</div><div class="line">  &quot;status&quot; : &quot;green&quot;,</div><div class="line">  &quot;timed_out&quot; : false,</div><div class="line">  &quot;number_of_nodes&quot; : 1,</div><div class="line">  &quot;number_of_data_nodes&quot; : 1,</div><div class="line">  &quot;active_primary_shards&quot; : 0,</div><div class="line">  &quot;active_shards&quot; : 0,</div><div class="line">  &quot;relocating_shards&quot; : 0,</div><div class="line">  &quot;initializing_shards&quot; : 0,</div><div class="line">  &quot;unassigned_shards&quot; : 0,</div><div class="line">  &quot;delayed_unassigned_shards&quot; : 0,</div><div class="line">  &quot;number_of_pending_tasks&quot; : 0,</div><div class="line">  &quot;number_of_in_flight_fetch&quot; : 0</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="使用（基于REST-API数据操作）"><a href="#使用（基于REST-API数据操作）" class="headerlink" title="使用（基于REST API数据操作）"></a>使用（基于REST API数据操作）</h2><h3 id="REST"><a href="#REST" class="headerlink" title="REST"></a>REST</h3><p>REST 定义了一组体系架构原则，您可以根据这些原则设计以系统资源为中心的 Web 服务，包括使用不同语言编写的客户端如何通过 HTTP 处理和传输资源状态。 它用简洁易行的方式向HTTP中的条目暴露CRUD（Create、Replace、Update、Delete，创建、替换、更新、删除）的应用功能。</p>
<h3 id="创建文档"><a href="#创建文档" class="headerlink" title="创建文档"></a>创建文档</h3><p>示例：创建一个文档用来存储一篇blog，内容如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  &quot;title&quot;:&quot;my first article title&quot;,</div><div class="line">  &quot;content&quot;:&quot;this is article content&quot;,</div><div class="line">  &quot;date&quot;:&quot;2016-10-05&quot;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>操作：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"># curl -XPUT  http://localhost:9200/blog/article/1 -d &apos;&#123;&quot;title&quot;:&quot;my first article title&quot;,&quot;content&quot;:&quot;this is article content&quot;,&quot;date&quot;:&quot;2016-10-05&quot;&#125;&apos;</div></pre></td></tr></table></figure></p>
<p>返回结果如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&#123;&quot;_index&quot;:&quot;blog&quot;,&quot;_type&quot;:&quot;article&quot;,&quot;_id&quot;:&quot;1&quot;,&quot;_version&quot;:1,&quot;created&quot;:true&#125;</div></pre></td></tr></table></figure></p>
<p>返回了操作结果信息，并显示新文档的存储位置。并且包含文档的唯一标识符以及当前版本信息。</p>
<h3 id="检索文档"><a href="#检索文档" class="headerlink" title="检索文档"></a>检索文档</h3><p>按照REST风格，我们想要查看刚才创建的文档。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"># curl -XGET  http://localhost:9200/blog/article/1</div></pre></td></tr></table></figure></p>
<p>结果<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">curl -XGET  http://localhost:9200/blog/article/1?pretty</div><div class="line">&#123;</div><div class="line">  &quot;_index&quot; : &quot;blog&quot;,</div><div class="line">  &quot;_type&quot; : &quot;article&quot;,</div><div class="line">  &quot;_id&quot; : &quot;1&quot;,</div><div class="line">  &quot;_version&quot; : 1,</div><div class="line">  &quot;found&quot; : true,</div><div class="line">  &quot;_source&quot;:&#123;&quot;title&quot;:&quot;my first article title&quot;,&quot;content&quot;:&quot;this is article content&quot;,&quot;date&quot;:&quot;2016-10-05&quot;&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="更新文档"><a href="#更新文档" class="headerlink" title="更新文档"></a>更新文档</h3><p>Elasticsearch中更新索引中的文档是非常复杂的工作。必须先提取文档、从_source字段获得数据、移除旧文档、应用变更，作为新文档创建索引。</p>
<p>示例，更改之前创建的blog，并增加author字段<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"># curl -XPOST  http://localhost:9200/blog/article/1 -d &apos;&#123;&quot;title&quot;:&quot;my first article title&quot;,&quot;content&quot;:&quot;this is article content&quot;,&quot;date&quot;:&quot;2016-10-05&quot;,&quot;author&quot;:&quot;zhimiao&quot;&#125;&apos;</div></pre></td></tr></table></figure></p>
<p>结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"># &#123;&quot;_index&quot;:&quot;blog&quot;,&quot;_type&quot;:&quot;article&quot;,&quot;_id&quot;:&quot;1&quot;,&quot;_version&quot;:3,&quot;created&quot;:false&#125;</div></pre></td></tr></table></figure></p>
<p>查看是否更新成功<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"># curl -XGET  http://localhost:9200/blog/article/1?pretty</div><div class="line">&#123;</div><div class="line">  &quot;_index&quot; : &quot;blog&quot;,</div><div class="line">  &quot;_type&quot; : &quot;article&quot;,</div><div class="line">  &quot;_id&quot; : &quot;1&quot;,</div><div class="line">  &quot;_version&quot; : 4,</div><div class="line">  &quot;found&quot; : true,</div><div class="line">  &quot;_source&quot;:&#123;&quot;title&quot;:&quot;my first article title&quot;,&quot;content&quot;:&quot;this is article content&quot;,&quot;date&quot;:&quot;2016-10-05&quot;,&quot;author&quot;:&quot;zhimiao&quot;&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="删除文档"><a href="#删除文档" class="headerlink" title="删除文档"></a>删除文档</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"># curl -XDELETE  http://localhost:9200/blog/article/1?pretty</div><div class="line">&#123;</div><div class="line">  &quot;found&quot; : true,</div><div class="line">  &quot;_index&quot; : &quot;blog&quot;,</div><div class="line">  &quot;_type&quot; : &quot;article&quot;,</div><div class="line">  &quot;_id&quot; : &quot;1&quot;,</div><div class="line">  &quot;_version&quot; : 7</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>查看是否已删除<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"># curl -XGET  http://localhost:9200/blog/article/1?pretty</div><div class="line">&#123;</div><div class="line">  &quot;_index&quot; : &quot;blog&quot;,</div><div class="line">  &quot;_type&quot; : &quot;article&quot;,</div><div class="line">  &quot;_id&quot; : &quot;1&quot;,</div><div class="line">  &quot;found&quot; : false</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;ElasticSearch是由Shay Banon发起的一个开源搜索服务器项目。由于其分布式特性和实时搜索能力，成为当前搜索和数据分析解决方案领域的重要成员。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://n.sinaimg.cn/games/3ece443e/20161006/ElasticSearch.png&quot; alt=&quot;ElasticSearch&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Linux" scheme="https://weizhimiao.github.io/categories/Linux/"/>
    
    
      <category term="ElasticSearch" scheme="https://weizhimiao.github.io/tags/ElasticSearch/"/>
    
  </entry>
  
  <entry>
    <title>keepalive工作原理和配置(转)</title>
    <link href="https://weizhimiao.github.io/2016/10/05/keepalived%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86%E5%92%8C%E9%85%8D%E7%BD%AE/"/>
    <id>https://weizhimiao.github.io/2016/10/05/keepalived工作原理和配置/</id>
    <published>2016-10-05T12:30:00.000Z</published>
    <updated>2016-10-05T06:47:20.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="keepalived是什么"><a href="#keepalived是什么" class="headerlink" title="keepalived是什么"></a>keepalived是什么</h2><p>keepalived是集群管理中保证集群高可用的一个服务软件，其功能类似于<a href="https://github.com/chenzhiwei/linux/tree/master/heartbeat" target="_blank" rel="external">heartbeat</a>，用来防止单点故障。</p>
<h2 id="keepalived工作原理"><a href="#keepalived工作原理" class="headerlink" title="keepalived工作原理"></a>keepalived工作原理</h2><p>keepalived是以VRRP协议为实现基础的，VRRP全称Virtual Router Redundancy Protocol，即<a href="http://en.wikipedia.org/wiki/VRRP" target="_blank" rel="external">虚拟路由冗余协议</a>。</p>
<p>虚拟路由冗余协议，可以认为是实现路由器高可用的协议，即将N台提供相同功能的路由器组成一个路由器组，这个组里面有一个master和多个backup，master上面有一个对外提供服务的vip（该路由器所在局域网内其他机器的默认路由为该vip），master会发组播，当backup收不到vrrp包时就认为master宕掉了，这时就需要根据<a href="http://tools.ietf.org/html/rfc5798#section-5.1" target="_blank" rel="external">VRRP的优先级</a>来选举一个backup当master。这样的话就可以保证路由器的高可用了。</p>
<p>keepalived主要有三个模块，分别是core、check和vrrp。</p>
<ul>
<li>core模块为keepalived的核心，负责主进程的启动、维护以及全局配置文件的加载和解析。</li>
<li>check负责健康检查，包括常见的各种检查方式。</li>
<li>vrrp模块是来实现VRRP协议的。</li>
</ul>
<a id="more"></a>
<h2 id="keepalived的配置文件"><a href="#keepalived的配置文件" class="headerlink" title="keepalived的配置文件"></a>keepalived的配置文件</h2><p>keepalived只有一个配置文件keepalived.conf，里面主要包括以下几个配置区域，分别是global_defs、static_ipaddress、static_routes、vrrp_script、vrrp_instance和virtual_server。</p>
<h3 id="global-defs区域"><a href="#global-defs区域" class="headerlink" title="global_defs区域"></a>global_defs区域</h3><blockquote>
<p>主要是配置故障发生时的通知对象以及机器标识</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">global_defs &#123;</div><div class="line">    notification_email &#123;</div><div class="line">        a@abc.com</div><div class="line">        b@abc.com</div><div class="line">        ...</div><div class="line">    &#125;</div><div class="line">    notification_email_from alert@abc.com</div><div class="line">    smtp_server smtp.abc.com</div><div class="line">    smtp_connect_timeout 30</div><div class="line">    enable_traps</div><div class="line">    router_id host163</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>notification_email 故障发生时给谁发邮件通知。</li>
<li>notification_email_from 通知邮件从哪个地址发出。</li>
<li>smpt_server 通知邮件的smtp地址。</li>
<li>smtp_connect_timeout 连接smtp服务器的超时时间。</li>
<li>enable_traps 开启SNMP陷阱（<a href="http://en.wikipedia.org/wiki/Simple_Network_Management_Protocol" target="_blank" rel="external">Simple Network Management Protocol</a>）。</li>
<li>router_id 标识本节点的字条串，通常为hostname，但不一定非得是hostname。故障发生时，邮件通知会用到。</li>
</ul>
<h3 id="static-ipaddress和static-routes"><a href="#static-ipaddress和static-routes" class="headerlink" title="static_ipaddress和static_routes"></a>static_ipaddress和static_routes</h3><blockquote>
<p>static_ipaddress和static_routes区域配置的是是本节点的IP和路由信息。如果你的机器上已经配置了IP和路由，那么这两个区域可以不用配置。<br>其实，一般情况下你的机器都会有IP地址和路由信息的，因此没必要再在这两个区域配置。</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">static_ipaddress &#123;</div><div class="line">    10.210.214.163/24 brd 10.210.214.255 dev eth0</div><div class="line">    ...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">static_routes &#123;</div><div class="line">    10.0.0.0/8 via 10.210.214.1 dev eth0</div><div class="line">    ...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>以上分别表示启动/关闭keepalived时在本机执行的如下命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"># /sbin/ip addr add 10.210.214.163/24 brd 10.210.214.255 dev eth0</div><div class="line"># /sbin/ip route add 10.0.0.0/8 via 10.210.214.1 dev eth0</div><div class="line"># /sbin/ip addr del 10.210.214.163/24 brd 10.210.214.255 dev eth0</div><div class="line"># /sbin/ip route del 10.0.0.0/8 via 10.210.214.1 dev eth0</div></pre></td></tr></table></figure></p>
<p>注意： 请忽略这两个区域，因为我坚信你的机器肯定已经配置了IP和路由。</p>
<h3 id="vrrp-script"><a href="#vrrp-script" class="headerlink" title="vrrp_script"></a>vrrp_script</h3><blockquote>
<p>用来做健康检查的，当时检查失败时会将vrrp_instance的priority减少相应的值。</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">vrrp_script chk_http_port &#123;</div><div class="line">    script &quot;&lt;/dev/tcp/127.0.0.1/80&quot;</div><div class="line">    interval 1</div><div class="line">    weight -10</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>以上意思是如果script中的指令执行失败，那么相应的vrrp_instance的优先级会减少10个点。</p>
<h3 id="vrrp-instance和vrrp-sync-group区域"><a href="#vrrp-instance和vrrp-sync-group区域" class="headerlink" title="vrrp_instance和vrrp_sync_group区域"></a>vrrp_instance和vrrp_sync_group区域</h3><blockquote>
<p>vrrp_instance用来定义对外提供服务的VIP区域及其相关属性。</p>
<p>vrrp_rsync_group用来定义vrrp_intance组，使得这个组内成员动作一致。</p>
</blockquote>
<p>举个例子来说明一下其功能：</p>
<p>两个vrrp_instance同属于一个vrrp_rsync_group，那么其中一个vrrp_instance发生故障切换时，另一个vrrp_instance也会跟着切换（即使这个instance没有发生故障）。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div></pre></td><td class="code"><pre><div class="line">vrrp_sync_group VG_1 &#123;</div><div class="line">    group &#123;</div><div class="line">        inside_network   # name of vrrp_instance (below)</div><div class="line">        outside_network  # One for each moveable IP.</div><div class="line">        ...</div><div class="line">    &#125;</div><div class="line">    notify_master /path/to_master.sh</div><div class="line">    notify_backup /path/to_backup.sh</div><div class="line">    notify_fault &quot;/path/fault.sh VG_1&quot;</div><div class="line">    notify /path/notify.sh</div><div class="line">    smtp_alert</div><div class="line">&#125;</div><div class="line">vrrp_instance VI_1 &#123;</div><div class="line">    state MASTER</div><div class="line">    interface eth0</div><div class="line">    use_vmac &lt;VMAC_INTERFACE&gt;</div><div class="line">    dont_track_primary</div><div class="line">    track_interface &#123;</div><div class="line">        eth0</div><div class="line">        eth1</div><div class="line">    &#125;</div><div class="line">    mcast_src_ip &lt;IPADDR&gt;</div><div class="line">    lvs_sync_daemon_interface eth1</div><div class="line">    garp_master_delay 10</div><div class="line">    virtual_router_id 1</div><div class="line">    priority 100</div><div class="line">    advert_int 1</div><div class="line">    authentication &#123;</div><div class="line">        auth_type PASS</div><div class="line">        auth_pass 12345678</div><div class="line">    &#125;</div><div class="line">    virtual_ipaddress &#123;</div><div class="line">        10.210.214.253/24 brd 10.210.214.255 dev eth0</div><div class="line">        192.168.1.11/24 brd 192.168.1.255 dev eth1</div><div class="line">    &#125;</div><div class="line">    virtual_routes &#123;</div><div class="line">        172.16.0.0/12 via 10.210.214.1</div><div class="line">        192.168.1.0/24 via 192.168.1.1 dev eth1</div><div class="line">        default via 202.102.152.1</div><div class="line">    &#125;</div><div class="line">    track_script &#123;</div><div class="line">        chk_http_port</div><div class="line">    &#125;</div><div class="line">    nopreempt</div><div class="line">    preempt_delay 300</div><div class="line">    debug</div><div class="line">    notify_master &lt;STRING&gt;|&lt;QUOTED-STRING&gt;</div><div class="line">    notify_backup &lt;STRING&gt;|&lt;QUOTED-STRING&gt;</div><div class="line">    notify_fault &lt;STRING&gt;|&lt;QUOTED-STRING&gt;</div><div class="line">    notify &lt;STRING&gt;|&lt;QUOTED-STRING&gt;</div><div class="line">    smtp_alert</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<ul>
<li>notify_master/backup/fault 分别表示切换为主/备/出错时所执行的脚本。</li>
<li>notify 表示任何一状态切换时都会调用该脚本，并且该脚本在以上三个脚本执行完成之后进行调用，keepalived会自动传递三个参数（$1 = “GROUP”|”INSTANCE”，$2 = name of group or instance，$3 = target state of transition(MASTER/BACKUP/FAULT)）。</li>
<li>smtp_alert 表示是否开启邮件通知（用全局区域的邮件设置来发通知）。</li>
<li>state 可以是MASTER或BACKUP，不过当其他节点keepalived启动时会将priority比较大的节点选举为MASTER，因此该项其实没有实质用途。</li>
<li>interface 节点固有IP（非VIP）的网卡，用来发VRRP包。</li>
<li>use_vmac 是否使用VRRP的虚拟MAC地址。</li>
<li>dont_track_primary 忽略VRRP网卡错误。（默认未设置）</li>
<li>track_interface 监控以下网卡，如果任何一个不通就会切换到FALT状态。（可选项）</li>
<li>mcast_src_ip 修改vrrp组播包的源地址，默认源地址为master的IP。（由于是组播，因此即使修改了源地址，该master还是能收到回应的）</li>
<li>lvs_sync_daemon_interface 绑定lvs syncd的网卡。</li>
<li>garp_master_delay 当切为主状态后多久更新ARP缓存，默认5秒。</li>
<li>virtual_router_id 取值在0-255之间，用来区分多个instance的VRRP组播。</li>
</ul>
<p>注意： 同一网段中virtual_router_id的值不能重复，否则会出错，相关错误信息如下。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">Keepalived_vrrp[27120]: ip address associated with VRID not present in received packet :</div><div class="line">one or more VIP associated with VRID mismatch actual MASTER advert</div><div class="line">bogus VRRP packet received on eth1 !!!</div><div class="line">receive an invalid ip number count associated with VRID!</div><div class="line">VRRP_Instance(xxx) ignoring received advertisment...</div></pre></td></tr></table></figure></p>
<p>可以用这条命令来查看该网络中所存在的vrid：<code>tcpdump -nn -i any net 224.0.0.0/8</code></p>
<ul>
<li>priority 用来选举master的，要成为master，那么这个选项的值最好<a href="http://tools.ietf.org/html/rfc5798#section-8.3.2" target="_blank" rel="external">高于其他机器50个点</a>，该项<a href="http://tools.ietf.org/html/rfc5798#section-5.2.4" target="_blank" rel="external">取值范围</a>是1-255（在此范围之外会被识别成默认值100）。</li>
<li>advert_int 发VRRP包的时间间隔，即多久进行一次master选举（可以认为是健康查检时间间隔）。</li>
<li>authentication 认证区域，认证类型有PASS和HA（IPSEC），推荐使用PASS（密码只识别前8位）。</li>
<li>virtual_ipaddress vip，不解释了。</li>
<li>virtual_routes 虚拟路由，当IP漂过来之后需要添加的路由信息。</li>
<li>virtual_ipaddress_excluded 发送的VRRP包里不包含的IP地址，为减少回应VRRP包的个数。在网卡上绑定的IP地址比较多的时候用。</li>
<li>nopreempt 允许一个priority比较低的节点作为master，即使有priority更高的节点启动。</li>
</ul>
<p>首先nopreemt必须在state为BACKUP的节点上才生效（因为是BACKUP节点决定是否来成为MASTER的），其次要实现类似于关闭auto failback的功能需要将所有节点的state都设置为BACKUP，或者将master节点的priority设置的比BACKUP低。我个人推荐使用将所有节点的state都设置成BACKUP并且都加上nopreempt选项，这样就完成了关于autofailback功能，当想手动将某节点切换为MASTER时只需去掉该节点的nopreempt选项并且将priority改的比其他节点大，然后重新加载配置文件即可（等MASTER切过来之后再将配置文件改回去再reload一下）。</p>
<p>当使用track_script时可以不用加nopreempt，只需要加上preempt_delay 5，这里的间隔时间要大于vrrp_script中定义的时长。</p>
<ul>
<li>preempt_delay master启动多久之后进行接管资源（VIP/Route信息等），并提是没有nopreempt选项。</li>
</ul>
<h3 id="virtual-server-group和virtual-server区域"><a href="#virtual-server-group和virtual-server区域" class="headerlink" title="virtual_server_group和virtual_server区域"></a>virtual_server_group和virtual_server区域</h3><blockquote>
<p>virtual_server_group一般在超大型的LVS中用到，一般LVS用不过这东西，因此不多说。</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line">virtual_server IP Port &#123;</div><div class="line">    delay_loop &lt;INT&gt;</div><div class="line">    lb_algo rr|wrr|lc|wlc|lblc|sh|dh</div><div class="line">    lb_kind NAT|DR|TUN</div><div class="line">    persistence_timeout &lt;INT&gt;</div><div class="line">    persistence_granularity &lt;NETMASK&gt;</div><div class="line">    protocol TCP</div><div class="line">    ha_suspend</div><div class="line">    virtualhost &lt;STRING&gt;</div><div class="line">    alpha</div><div class="line">    omega</div><div class="line">    quorum &lt;INT&gt;</div><div class="line">    hysteresis &lt;INT&gt;</div><div class="line">    quorum_up &lt;STRING&gt;|&lt;QUOTED-STRING&gt;</div><div class="line">    quorum_down &lt;STRING&gt;|&lt;QUOTED-STRING&gt;</div><div class="line">    sorry_server &lt;IPADDR&gt; &lt;PORT&gt;</div><div class="line">    real_server &lt;IPADDR&gt; &lt;PORT&gt; &#123;</div><div class="line">        weight &lt;INT&gt;</div><div class="line">        inhibit_on_failure</div><div class="line">        notify_up &lt;STRING&gt;|&lt;QUOTED-STRING&gt;</div><div class="line">        notify_down &lt;STRING&gt;|&lt;QUOTED-STRING&gt;</div><div class="line">        # HTTP_GET|SSL_GET|TCP_CHECK|SMTP_CHECK|MISC_CHECK</div><div class="line">        HTTP_GET|SSL_GET &#123;</div><div class="line">            url &#123;</div><div class="line">                path &lt;STRING&gt;</div><div class="line">                # Digest computed with genhash</div><div class="line">                digest &lt;STRING&gt;</div><div class="line">                status_code &lt;INT&gt;</div><div class="line">            &#125;</div><div class="line">            connect_port &lt;PORT&gt;</div><div class="line">            connect_timeout &lt;INT&gt;</div><div class="line">            nb_get_retry &lt;INT&gt;</div><div class="line">            delay_before_retry &lt;INT&gt;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>delay_loop 延迟轮询时间（单位秒）。</li>
<li>lb_algo 后端调试算法（load balancing algorithm）。</li>
<li>lb_kind LVS调度类型NAT/DR/TUN。</li>
<li>virtualhost 用来给HTTP_GET和SSL_GET配置请求header的。</li>
<li>sorry_server 当所有real server宕掉时，sorry server顶替。</li>
<li>real_server 真正提供服务的服务器。</li>
<li>weight 权重。</li>
<li>notify_up/down 当real server宕掉或启动时执行的脚本。</li>
</ul>
<p>健康检查的方式，N多种方式。</p>
<ul>
<li>path 请求real serserver上的路径。</li>
<li>digest/status_code 分别表示用genhash算出的结果和http状态码。</li>
<li>connect_port 健康检查，如果端口通则认为服务器正常。</li>
<li>connect_timeout,nb_get_retry,delay_before_retry分别表示超时时长、重试次数，下次重试的时间延迟。</li>
</ul>
<p>其他选项暂时不作说明。</p>
<h2 id="keepalived主从切换"><a href="#keepalived主从切换" class="headerlink" title="keepalived主从切换"></a>keepalived主从切换</h2><p>主从切换比较让人蛋疼，需要将backup配置文件的priority选项的值调整的比master高50个点，然后reload配置文件就可以切换了。当时你也可以将master的keepalived停止，这样也可以进行主从切换。</p>
<h2 id="keepalived仅做HA时的配置"><a href="#keepalived仅做HA时的配置" class="headerlink" title="keepalived仅做HA时的配置"></a>keepalived仅做HA时的配置</h2><p>请看该文档同级目录下的配置文件示例。</p>
<p>说明：</p>
<ul>
<li>10.210.214.113 为keepalived的备机，其配置文件为113.keepalived.conf</li>
<li>10.210.214.163 为keepalived的主机，其配置文件为163.keepalived.conf</li>
<li>10.210.214.253 为Virtual IP，即提供服务的内网IP地址，在网卡eth0上面</li>
<li>192.168.1.11 为模拟的提供服务的公网IP地址，在网卡eth1上面</li>
</ul>
<p>用tcpdump命令来捕获的结果如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">17:20:07.919419 IP 10.210.214.163 &gt; 224.0.0.18: VRRPv2, Advertisement, vrid 1, prio 200, authtype simple, intvl 1s, length 20</div></pre></td></tr></table></figure></p>
<h2 id="LVS-Keepalived配置"><a href="#LVS-Keepalived配置" class="headerlink" title="LVS+Keepalived配置"></a>LVS+Keepalived配置</h2><blockquote>
<p>注:Keepalived与LVS结合使用时一般还会用到一个工具ipvsadm，用来查看相关VS相关状态，关于ipvsadm的用法可以参考man手册。</p>
</blockquote>
<p>10.67.15.95为keepalived master，VIP为10.67.15.94，配置文件为95-lvs-keepalived.conf</p>
<p>10.67.15.96为keepalived master，VIP为10.67.15.94，配置文件为96-lvs-keepalived.conf</p>
<p>10.67.15.195为real server  </p>
<p><strong>注意：</strong></p>
<p>当使用LVS+DR+Keepalived配置时，需要在real server上添加一条iptables规则（其中dport根据情况添加或缺省）：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"># iptables -t nat -A PREROUTING -p tcp -d 10.67.15.94 --dport 80 -j REDIRECT</div></pre></td></tr></table></figure></p>
<p>当使用LVS+NAT+Keepalived配置时，需要将real server的默认路由配置成Director的VIP10.67.15.94，必须确保client的请求是通过10.67.15.94到达real server的。</p>
<h2 id="安装keepalived"><a href="#安装keepalived" class="headerlink" title="安装keepalived"></a>安装keepalived</h2><p>从keepalived<a href="http://www.keepalived.org/download.html" target="_blank" rel="external">官网</a>下载合适的版本，解压并执行如下命令完成安装。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"># cd keepalived-xxx</div><div class="line"># ./configure --bindir=/usr/bin --sbindir=/usr/sbin --sysconfdir=/etc --mandir=/usr/share</div><div class="line"># make &amp;&amp; make install</div></pre></td></tr></table></figure></p>
<p>你也可以打成<a href="https://github.com/chenzhiwei/linux/tree/master/rpm-package-management" target="_blank" rel="external">RPM</a>包，然后安装。</p>
<h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><p>我们用到的HA场景如下： 两台主机host113和host163，内网IP在eth1网卡上，分别是10.210.214.113和10.210.214.163，VIP为公网IP在eth0上，IP地址是202.102.152.253，网关为202.102.152.1。当VIP在host113上提供服务时，host113上的默认路由为202.102.152.1，提供服务的端口为202.102.152.253:443。host113发生故障需要将VIP及服务切回到host163上的时候，需要以下几步，第一将VIP接管过来，第二添加默认路由202.102.152.1，第三启动在端口202.102.152.253:443上的服务。</p>
<p>如此一来，keepalived需要另外的脚本来完成添加默认路由和启动服务工作，这点和heartbeat中的resources是相同的。目前我进行了测试，发现keepalived速度要比heartbeat快，也就是说效率比heartbeat高。并且，最重要的一点，keepalived支持多个backup。</p>
<p>不要问我为何有以上需求。要为两个不同的域名提供https服务，由于SSL证书问题，必须有两个公网IP地址分别绑定443端口。</p>
<p>当然，通过<a href="http://en.wikipedia.org/wiki/Server_Name_Indication" target="_blank" rel="external">SNI</a>也可以实现一个公网IP绑定443端口来为多个域名提供https服务，但是这需要浏览器支持（M$的IE浏览器不支持）。（<a href="http://nginx.org/en/docs/http/configuring_https_servers.html#sni" target="_blank" rel="external">nginx</a>/<a href="http://wiki.apache.org/httpd/NameBasedSSLVHostsWithSNI" target="_blank" rel="external">apache</a>）</p>
<h2 id="吐槽"><a href="#吐槽" class="headerlink" title="吐槽"></a>吐槽</h2><p>keepalived的主从切换比较让人蛋疼，需要修改配置文件或停止一方的运行。但是由于keepalived是通过vrrp协议来实现failover（故障转移）的，因此也决定了手动主从切换的不便。</p>
<p>keepalived的文档也很旧了，一直都找不到合适的文档，之前我就一直忽略了vrrp_script这个区域，导致很多事情想不通。</p>
<p>另外，我发现我越来越喜欢keepalived了。。。</p>
<p><a href="http://outofmemory.cn/wiki/keepalived-configuration" target="_blank" rel="external">转自：http://outofmemory.cn/wiki/keepalived-configuration</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;keepalived是什么&quot;&gt;&lt;a href=&quot;#keepalived是什么&quot; class=&quot;headerlink&quot; title=&quot;keepalived是什么&quot;&gt;&lt;/a&gt;keepalived是什么&lt;/h2&gt;&lt;p&gt;keepalived是集群管理中保证集群高可用的一个服务软件，其功能类似于&lt;a href=&quot;https://github.com/chenzhiwei/linux/tree/master/heartbeat&quot;&gt;heartbeat&lt;/a&gt;，用来防止单点故障。&lt;/p&gt;
&lt;h2 id=&quot;keepalived工作原理&quot;&gt;&lt;a href=&quot;#keepalived工作原理&quot; class=&quot;headerlink&quot; title=&quot;keepalived工作原理&quot;&gt;&lt;/a&gt;keepalived工作原理&lt;/h2&gt;&lt;p&gt;keepalived是以VRRP协议为实现基础的，VRRP全称Virtual Router Redundancy Protocol，即&lt;a href=&quot;http://en.wikipedia.org/wiki/VRRP&quot;&gt;虚拟路由冗余协议&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;虚拟路由冗余协议，可以认为是实现路由器高可用的协议，即将N台提供相同功能的路由器组成一个路由器组，这个组里面有一个master和多个backup，master上面有一个对外提供服务的vip（该路由器所在局域网内其他机器的默认路由为该vip），master会发组播，当backup收不到vrrp包时就认为master宕掉了，这时就需要根据&lt;a href=&quot;http://tools.ietf.org/html/rfc5798#section-5.1&quot;&gt;VRRP的优先级&lt;/a&gt;来选举一个backup当master。这样的话就可以保证路由器的高可用了。&lt;/p&gt;
&lt;p&gt;keepalived主要有三个模块，分别是core、check和vrrp。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;core模块为keepalived的核心，负责主进程的启动、维护以及全局配置文件的加载和解析。&lt;/li&gt;
&lt;li&gt;check负责健康检查，包括常见的各种检查方式。&lt;/li&gt;
&lt;li&gt;vrrp模块是来实现VRRP协议的。&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="Linux" scheme="https://weizhimiao.github.io/categories/Linux/"/>
    
    
      <category term="负载均衡" scheme="https://weizhimiao.github.io/tags/%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1/"/>
    
  </entry>
  
  <entry>
    <title>Nginx服务器https配置</title>
    <link href="https://weizhimiao.github.io/2016/10/04/Nginx%E6%9C%8D%E5%8A%A1%E5%99%A8https%E9%85%8D%E7%BD%AE/"/>
    <id>https://weizhimiao.github.io/2016/10/04/Nginx服务器https配置/</id>
    <published>2016-10-04T13:30:00.000Z</published>
    <updated>2016-10-04T14:38:23.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://n.sinaimg.cn/games/3ece443e/20161004/https.png" alt="Nginx服务器https配置"></p>
<a id="more"></a>
<h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><p>Linux：Linux version 3.10.0-123.9.3.el7.x86_64<br>Nginx：nginx/1.6.3<br>openssl：1.0.1e</p>
<h2 id="申请证书"><a href="#申请证书" class="headerlink" title="申请证书"></a>申请证书</h2><p>目前网上有不少机构提供个人免费 ssl 证书，有效期几个月到几年不等。以 <a href="https://www.startssl.com" target="_blank" rel="external">StartSSL :https://www.startssl.com</a> 为例, 申请成功后有效期 3 年，到期后可免费续租。<br>具体申请过程也很简单。<br>注册登录以后选择 Certificates Wizard &gt;&gt;     DV SSL Certificate 申请一个免费的 ssl 证书。</p>
<p>通过邮件验证域名之后，然后在自己服务器中生成 SSL 证书的 csr ，<strong>记住生成输入的秘密</strong>，之后要用到：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">openssl req -newkey rsa:2048 -keyout weizhimiao.cn.key -out weizhimiao.cn.csr</div></pre></td></tr></table></figure></p>
<p>将生成的证书，放到指定的存放证书的目录，如 <code>/data/secret/</code> 。查看证书 <code>weizhimiao.csr</code> 内容，将内容复制到页面中的 Certificate Signing Request (CSR)部分，提交页面。</p>
<p>下载生成好的证书,选择对应的web服务器（Nginx，1_weizhimiao.cn_bundle.crt），这样私钥和公钥我们就都有了。</p>
<ul>
<li>1_weizhimiao.cn_bundle.crt（公钥）</li>
<li>weizhimiao.cn.key（私钥）</li>
</ul>
<h2 id="nginx配置（为指定域名增加https）"><a href="#nginx配置（为指定域名增加https）" class="headerlink" title="nginx配置（为指定域名增加https）"></a>nginx配置（为指定域名增加https）</h2><p>nginx.conf当前配置<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">...</div><div class="line">http &#123;</div><div class="line">    ...</div><div class="line">    include /etc/nginx/conf.d/*.conf;</div><div class="line"></div><div class="line">    server &#123;</div><div class="line">        ...</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>./conf.d/weizhimiao.cn.conf中加入<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">server&#123;</div><div class="line">    listen 443 ssl;</div><div class="line">    server_name weizhimiao.cn;</div><div class="line"></div><div class="line">    ssl_certificate /data/secret/1_weizhimiao.cn_bundle.crt;</div><div class="line">    ssl_certificate_key /data/secret/weizhimiao.cn.key;</div><div class="line">    ssl_prefer_server_ciphers on;</div><div class="line">    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;</div><div class="line"></div><div class="line">    ssl_ciphers &apos;kEECDH+ECDSA+AES128 kEECDH+ECDSA+AES256 kEECDH+AES128 kEECDH+AES256 kEDH+AES128 kEDH+AES256 DES-CBC3-SHA +SHA !aNULL !eNULL !LOW !MD5 !EXP !DSS !PSK !SRP !kECDH !CAMELLIA !RC4 !SEED&apos;;</div><div class="line"></div><div class="line">    add_header Strict-Transport-Security &apos;max-age=31536000; preload&apos;;</div><div class="line">    add_header X-Frame-Options DENY;</div><div class="line">    ssl_session_cache   shared:SSL:10m;</div><div class="line">    ssl_session_timeout 10m;</div><div class="line">    keepalive_timeout 70;</div><div class="line">    ssl_dhparam /data/secret/dhparam.pem;</div><div class="line"></div><div class="line">    add_header X-Content-Type-Options nosniff;</div><div class="line"></div><div class="line">    add_header X-Xss-Protection 1;</div><div class="line"></div><div class="line">    root /data/www/weizhimiao.cn;</div><div class="line">    index index.html;</div><div class="line"></div><div class="line">    location / &#123;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><strong>注：</strong><br>配置中用到一个 <code>/data/secret/dhparam.pem</code> 文件，该文件是一个PEM格式的密钥文件，用于TLS会话中。用来加强ssl的安全性。生成该文件方法，<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">cd /data/secret/</div><div class="line">openssl dhparam 2048 -out dhparam.pem</div></pre></td></tr></table></figure></p>
<p>将原来80端口的访问，重定向。./conf.d/weizhimiao.cn.conf中加入<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">server&#123;</div><div class="line">    listen 80;</div><div class="line">    server_name  weizhimiao.cn;</div><div class="line">    return 301 https://weizhimiao.cn$request_uri;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>检测配置文件是否有语法错误，需要输入之前生成公钥时输入的密码。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">nginx -t</div><div class="line">Enter PEM pass phrase:</div><div class="line">nginx: the configuration file /etc/nginx/nginx.conf syntax is ok</div><div class="line">nginx: configuration file /etc/nginx/nginx.conf test is successful</div></pre></td></tr></table></figure></p>
<p>重启Nginx(切记，reload不起作用)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">nginx -s stop</div><div class="line">Enter PEM pass phrase:</div><div class="line">nginx</div><div class="line">Enter PEM pass phrase:</div></pre></td></tr></table></figure></p>
<p>浏览器访问 weizhimiao.cn ,是否生效。</p>
<p>另，Nginx配置了安全证书之后，nginx每次的reload、stop等操作都需要输入密码。<br>可以通过生成一个解密的key文件，替代原来key文件。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">cd /data/secret/</div><div class="line">openssl rsa -in weizhimiao.cn.key -out weizhimiao.cn.key.unsecure</div></pre></td></tr></table></figure></p>
<p>替换 <code>weizhimiao.cn.conf</code> 中的 <code>weizhimiao.cn.key</code> 文件.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">server &#123;</div><div class="line">  ...</div><div class="line">  ssl_certificate /data/secret/1_weizhimiao.cn_bundle.crt;</div><div class="line">  ssl_certificate_key /data/secret/weizhimiao.cn.key.unsecure;</div><div class="line">  ...</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>之后每次在reload时，就不需要在输入密码了。</p>
<p>最后，用 <a href="https://www.ssllabs.com/ssltest/index.html" target="_blank" rel="external">SSLLABS</a> 来进行一下测试。<br><img src="http://n.sinaimg.cn/games/3ece443e/20161004/ssllabs.png" alt="ssllabs"><br>结果<br><img src="http://n.sinaimg.cn/games/3ece443e/20161004/ssllabsres.png" alt="ssllabs"></p>
<p>over~</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://n.sinaimg.cn/games/3ece443e/20161004/https.png&quot; alt=&quot;Nginx服务器https配置&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Nginx" scheme="https://weizhimiao.github.io/categories/Nginx/"/>
    
    
      <category term="https" scheme="https://weizhimiao.github.io/tags/https/"/>
    
  </entry>
  
  <entry>
    <title>Nginx虚拟主机配置</title>
    <link href="https://weizhimiao.github.io/2016/10/04/Nginx%E8%99%9A%E6%8B%9F%E4%B8%BB%E6%9C%BA%E8%AE%BE%E7%BD%AE/"/>
    <id>https://weizhimiao.github.io/2016/10/04/Nginx虚拟主机设置/</id>
    <published>2016-10-04T12:30:00.000Z</published>
    <updated>2016-10-04T14:46:59.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://n.sinaimg.cn/games/3ece443e/20161004/VirtualHost.png" alt="virtual Host"></p>
<a id="more"></a>
<h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><p>Linux：Linux version 3.10.0-123.9.3.el7.x86_64</p>
<p>Nginx: nginx/1.6.3</p>
<p>配置文件目录结构<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">$ tree</div><div class="line">.</div><div class="line">├── conf.d</div><div class="line">├── default.d</div><div class="line">├── fastcgi.conf</div><div class="line">├── fastcgi.conf.default</div><div class="line">├── fastcgi_params</div><div class="line">├── fastcgi_params.default</div><div class="line">├── koi-utf</div><div class="line">├── koi-win</div><div class="line">├── mime.types</div><div class="line">├── mime.types.default</div><div class="line">├── nginx.conf</div><div class="line">├── nginx.conf.default</div><div class="line">├── scgi_params</div><div class="line">├── scgi_params.default</div><div class="line">├── uwsgi_params</div><div class="line">├── uwsgi_params.default</div><div class="line">└── win-utf</div></pre></td></tr></table></figure></p>
<h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>将 site1.cn 和site2.cn基于域名进行配置</p>
<h3 id="准备-1"><a href="#准备-1" class="headerlink" title="准备"></a>准备</h3><p>分别创建两个域名的配置文件和web根目录。</p>
<p>./conf.d/下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">cd conf.d/</div><div class="line">touch site1.cn.conf</div><div class="line">touch site2.cn.conf</div></pre></td></tr></table></figure></p>
<p>分别创建web根目录<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">mkdri -p /data/www</div><div class="line">cd  /data/www</div><div class="line">mkdir site1.cn</div><div class="line">mkdir site2.cn</div></pre></td></tr></table></figure></p>
<h3 id="修改主配置文件nginx-conf"><a href="#修改主配置文件nginx-conf" class="headerlink" title="修改主配置文件nginx.conf"></a>修改主配置文件nginx.conf</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div></pre></td><td class="code"><pre><div class="line">user nginx;</div><div class="line">worker_processes auto;</div><div class="line">error_log /var/log/nginx/error.log;</div><div class="line">pid /run/nginx.pid;</div><div class="line"></div><div class="line">events &#123;</div><div class="line">    worker_connections 1024;</div><div class="line">&#125;</div><div class="line"></div><div class="line">http &#123;</div><div class="line">    log_format  main  &apos;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &apos;</div><div class="line">                      &apos;$status $body_bytes_sent &quot;$http_referer&quot; &apos;</div><div class="line">                      &apos;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&apos;;</div><div class="line"></div><div class="line">    access_log  /var/log/nginx/access.log  main;</div><div class="line"></div><div class="line">    sendfile            on;</div><div class="line">    tcp_nopush          on;</div><div class="line">    tcp_nodelay         on;</div><div class="line">    keepalive_timeout   65;</div><div class="line">    types_hash_max_size 2048;</div><div class="line"></div><div class="line">    include             /etc/nginx/mime.types;</div><div class="line">    default_type        application/octet-stream;</div><div class="line"></div><div class="line">    # Load modular configuration files from the /etc/nginx/conf.d directory.</div><div class="line">    # See http://nginx.org/en/docs/ngx_core_module.html#include</div><div class="line">    # for more information.</div><div class="line">    include /etc/nginx/conf.d/*.conf;</div><div class="line"></div><div class="line">    server &#123;</div><div class="line">        listen       80 default_server;</div><div class="line">        listen       [::]:80 default_server;</div><div class="line">        server_name  _;</div><div class="line">        root         /usr/share/nginx/html;</div><div class="line"></div><div class="line">        # Load configuration files for the default server block.</div><div class="line">        include /etc/nginx/default.d/*.conf;</div><div class="line"></div><div class="line">        location / &#123;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        error_page 404 /404.html;</div><div class="line">            location = /40x.html &#123;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        error_page 500 502 503 504 /50x.html;</div><div class="line">            location = /50x.html &#123;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>确保在http的context中的server部分前面要有<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">include /etc/nginx/conf.d/*.conf;</div></pre></td></tr></table></figure></p>
<p>通常情况下主配置文件中的server部分，将会是默认的server（通过添加default_server来声明），当一个请求过来，目录/etc/nginx/conf.d/中的所有server部分都匹配不了，那么这个请求将会被猪配置文件中的server来进行处理.</p>
<h3 id="site1-cn"><a href="#site1-cn" class="headerlink" title="site1.cn"></a>site1.cn</h3><p>修改配置文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">vi ./conf.d/site1.cn.conf</div></pre></td></tr></table></figure></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line">server &#123;</div><div class="line">	listen		80;</div><div class="line">	server_name	site1.cn;</div><div class="line"></div><div class="line">	error_page  404  /404.html;</div><div class="line"></div><div class="line">	error_page   500 503 504  /50x.html;</div><div class="line">	error_log	/var/log/nginx/debug.log debug;</div><div class="line">	index	index.html index.htm;</div><div class="line">	root /data/www/site1.cn;</div><div class="line"></div><div class="line">	location / &#123;</div><div class="line">		index index.html;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">  location = /favicon.ico &#123;</div><div class="line">  	try_files $uri $uri/favicon.ico /data/www/site1.cn/favicon.ico =404;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  # Deny all attempts to access hidden files such as .htaccess, .htpasswd, .DS_Store(Mac).</div><div class="line">  location ~ /\. &#123;</div><div class="line">      deny all;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">	location = /50x.html &#123;</div><div class="line">		root   /usr/share/nginx/html;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	location = /404.html &#123;</div><div class="line">		root   /usr/share/nginx/html;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>添加测试页面<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">cd /data/www/site1.cn</div><div class="line">echo &quot;site1.cn index.html&quot; &gt;&gt; index.html</div></pre></td></tr></table></figure></p>
<h3 id="site2-cn"><a href="#site2-cn" class="headerlink" title="site2.cn"></a>site2.cn</h3><p>修改配置文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">vi ./conf.d/site2.cn.conf</div></pre></td></tr></table></figure></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line">server &#123;</div><div class="line">	listen		80;</div><div class="line">	server_name	site2.cn;</div><div class="line"></div><div class="line">	error_page  404  /404.html;</div><div class="line"></div><div class="line">	error_page   500 503 504  /50x.html;</div><div class="line">	error_log	/var/log/nginx/debug.log debug;</div><div class="line">	index	index.html index.htm;</div><div class="line">	root /data/www/site2.cn;</div><div class="line"></div><div class="line">	location / &#123;</div><div class="line">		index index.html;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">  location = /favicon.ico &#123;</div><div class="line">  	try_files $uri $uri/favicon.ico /data/www/site2.cn/favicon.ico =404;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  # Deny all attempts to access hidden files such as .htaccess, .htpasswd, .DS_Store(Mac).</div><div class="line">  location ~ /\. &#123;</div><div class="line">      deny all;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">	location = /50x.html &#123;</div><div class="line">		root   /usr/share/nginx/html;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	location = /404.html &#123;</div><div class="line">		root   /usr/share/nginx/html;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>添加测试页面<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">cd /data/www/site2.cn</div><div class="line">echo &quot;site2.cn index.html&quot; &gt;&gt; index.html</div></pre></td></tr></table></figure></p>
<h3 id="重启Nginx"><a href="#重启Nginx" class="headerlink" title="重启Nginx"></a>重启Nginx</h3><p>重启之前，需要先进行配置文件语法检测<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">nginx -t</div><div class="line">nginx: the configuration file /etc/nginx/nginx.conf syntax is ok</div><div class="line">nginx: configuration file /etc/nginx/nginx.conf test is successful</div></pre></td></tr></table></figure></p>
<p>确定语法无问题之后，重启Nginx<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">nginx -s reload</div></pre></td></tr></table></figure></p>
<h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p>vi /etc/hosts<br>添加<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">site1.cn 127.0.0.1</div><div class="line">site2.cn 127.0.0.1</div></pre></td></tr></table></figure></p>
<p>分别访问 site1.cn和site2.cn ,查看是否输出对应内容<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">wget  site1.cn</div><div class="line">cat index.html</div><div class="line">#site1.cn index.html</div><div class="line"></div><div class="line">wget site2.cn</div><div class="line">cat index.html.2</div><div class="line">#site2.cn index.html</div></pre></td></tr></table></figure></p>
<p>关于nginx学习的一个网站:<a href="http://nglua.com" target="_blank" rel="external">http://nglua.com</a></p>
<p>over~</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://n.sinaimg.cn/games/3ece443e/20161004/VirtualHost.png&quot; alt=&quot;virtual Host&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Nginx" scheme="https://weizhimiao.github.io/categories/Nginx/"/>
    
    
      <category term="虚拟主机" scheme="https://weizhimiao.github.io/tags/%E8%99%9A%E6%8B%9F%E4%B8%BB%E6%9C%BA/"/>
    
  </entry>
  
  <entry>
    <title>Nginx配置整理</title>
    <link href="https://weizhimiao.github.io/2016/10/03/Nginx%E9%85%8D%E7%BD%AE%E6%95%B4%E7%90%86/"/>
    <id>https://weizhimiao.github.io/2016/10/03/Nginx配置整理/</id>
    <published>2016-10-03T14:30:00.000Z</published>
    <updated>2016-10-04T10:36:46.000Z</updated>
    
    <content type="html"><![CDATA[<p>Nginx配置主要分成四部分：main、server、upstream 和 location，每部分包含若干个指令。<br>main(全局设置)</p>
<blockquote>
<p>该部分设置的指令将影响其它所有部分的设置；</p>
</blockquote>
<p>server(主机设置)</p>
<blockquote>
<p>该部分的指令主要用于指定虚拟主机域名、IP和端口；</p>
</blockquote>
<p>upstream(上游服务器设置)</p>
<blockquote>
<p>该部分的指令用于设置一系列的后端服务器，设置反向代理及后端服务器的负载均衡；</p>
</blockquote>
<p>location(URL匹配特定位置后的设置)</p>
<blockquote>
<p>该部分用于匹配网页位置（比如，根目录“/”,“/images”,等等）。</p>
</blockquote>
<p>Nginx本身是模块化设计。全局的配置区段负责全局的各个方面，对于不同的协议可以单独划分成一个部分。我们可以通过在这些单独的协议配置中（http或mail）指定server来定义每一个请求应该被如何处理，以便请求被路由到特定的IP地址或端口上。在http区段中，使用location来匹配URI请求，这些location又可以嵌套使用或者按照一定顺序使用，以确保请求被路由到正确的文件系统区域或者其他地方。</p>
<p><strong>他们之间的关系式：</strong> server继承main，location继承server；upstream既不会继承指令也不会被继承。它有自己的特殊指令，不需要在其他地方的应用。</p>
<a id="more"></a>
<h2 id="基本配置格式"><a href="#基本配置格式" class="headerlink" title="基本配置格式"></a>基本配置格式</h2><p>Nginx的配置文件由若干部分组成。但每一部分都是通过下列的方法定义。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;section&gt; &#123;</div><div class="line">  &lt;directive&gt;&lt;parameters&gt;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><strong>Tips:</strong></p>
<ul>
<li>每一个指令行都由分号结束（;），这标志着一行结束。</li>
<li>大括号（{}）实际上表示一个新上下文（context），常称为『节，部分（section）』</li>
</ul>
<h2 id="Nginx的全局配置"><a href="#Nginx的全局配置" class="headerlink" title="Nginx的全局配置"></a>Nginx的全局配置</h2><p>全局配置顾名思义就是对整个server都有效的参数。全局配置部分可能包含配置指令（如，user、worker_processes），也包括『节、部分（section）（如，events）』。这部分配置一般放在 nginx.conf 文件的顶部。</p>
<p>示例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">user nginx;</div><div class="line">worker_processes auto;</div><div class="line">error_log /var/log/nginx/error.log;</div><div class="line">pid /run/nginx.pid;</div><div class="line"></div><div class="line">events &#123;</div><div class="line">    use epoll   #使用网络IO模型，epoll模型比select模型效率高很多</div><div class="line">    worker_connections 1024;    #每个worker能够处理的最大连接数，最大值取决于ulimit -n的值</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>主要配置指令及含义</p>
<table>
<thead>
<tr>
<th>配置指令</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>user</td>
<td>配置worker进程运行的用户和用户组，第一个参数为user，第二个为group（如果忽略了group，那么group与user同名）</td>
</tr>
<tr>
<td>worker_processes</td>
<td>指定worker进程启动的数量。这些进程用于处理客户的连接。通常该值会设置成CPU处理器核心数相同的数量。默认值是”auto”，也是按照这样去设置数量</td>
</tr>
<tr>
<td>error_log</td>
<td>设置错误日志文件位置。如果在其他的区段中没有设置其他的error_log,那么这个日志文件将会记录所有的错误。该指令的第二个参数指定了被记录的错误信息级别（debug[注，debug级别的错误只有在nginx编译的时候配置了 –with-debug选项才可以使用]、info、notice、warn、error、crit、alert、emsg）</td>
</tr>
<tr>
<td>pid</td>
<td>设置记录主进程ID的文件地址。通常设置该值来方便我们对nginx的管理</td>
</tr>
<tr>
<td>use</td>
<td>该指令指示我们使用什么样的连接方式。该指令需要写在 events 区段里面。</td>
</tr>
<tr>
<td>worker_connections</td>
<td>配置一个工作进程能够接受并发连接的最大数。这个连接包括，客户连接和向上游服务器的连接，但也不仅限于此。通常该配置同use一样写在events里面</td>
</tr>
</tbody>
</table>
<h2 id="include指令"><a href="#include指令" class="headerlink" title="include指令"></a>include指令</h2><p>在Nginx配置文件中可以使用include指令将其他位置存放的配置文件加载进来，来方便配置管理和增强配置文件的可读性。</p>
<p><strong>Tips：</strong><br>使用include文件，要确保被包含的文件自身符合nginx配置语法。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">include /etc/nginx/default.d/*.conf;</div></pre></td></tr></table></figure></p>
<p>路径中出现通配符表示可以匹配多个文件。<br>nginx配置文件的语法错误可以通过nginx的 -t 选项来进行测试。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/path/to/nginx -t -c &lt;path-to-nginx.conf&gt;</div></pre></td></tr></table></figure></p>
<p><strong>注：</strong> 该命令只能检查语法错误，具体到某个功能性的测试还需要我们自己有针对性的去测。</p>
<h2 id="Http的server部分"><a href="#Http的server部分" class="headerlink" title="Http的server部分"></a>Http的server部分</h2><p>通常我们提到的server部分，具体指的是Http的server部分。所以，其在Http配置的context是可用的。该部分用于处理http连接，因此该模块下提供了相当数量的指令。</p>
<h3 id="客户端指令"><a href="#客户端指令" class="headerlink" title="客户端指令"></a>客户端指令</h3><blockquote>
<p>用于处理客户端连接本身的各个方面，以及不同类型的客户端</p>
</blockquote>
<table>
<thead>
<tr>
<th>指令</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>chunked_transfer_encoding</td>
<td>在发给客户端的响应中允许禁用http/1.1标准的块传输编码</td>
</tr>
<tr>
<td>client_body_buffer_size</td>
<td>为了阻止临时文件写到磁盘，可以通过该指令为客户端请求体设置缓存大小，默认的缓存大小为两个内存页面</td>
</tr>
<tr>
<td>client_body_in_file_only</td>
<td>用于调试或者是进一步处理客户端请求体。该指令能够将客户端请求体强制写入到磁盘文件</td>
</tr>
<tr>
<td>client_body_in_single_buffer</td>
<td>为了减少拷贝的操作，使用该指令强制Nginx将整个客户端请求体保存到单个缓存中</td>
</tr>
<tr>
<td>client_body_temp_path</td>
<td>定义一个命令路径用于保存客户端请求体</td>
</tr>
<tr>
<td>clent_body_timeout</td>
<td>指定客户端成功读取的两个操作之间的时间间隔</td>
</tr>
<tr>
<td>client_header_buffer_size</td>
<td>为客户端请求头指定一个缓存大小，当请求头大于1kB时会用到这个设置。</td>
</tr>
<tr>
<td>client_header_timeout</td>
<td>读取整个客户端头的超时时间</td>
</tr>
<tr>
<td>client_max_body_size</td>
<td>定义允许最大的客户端请求头，如果大于该值，那么客户端将会是413（request entity too large）错误</td>
</tr>
<tr>
<td>keepalive_disable</td>
<td>对某些类型的客户端禁用keep-alive请求功能。</td>
</tr>
<tr>
<td>keepalive_requests</td>
<td>定义在一个keep-alive关闭之前可以接收多少个请求</td>
</tr>
<tr>
<td>keepalive_timeout</td>
<td>指定keep-alive连接持续多久。第二个参数用于在响应头中这只”Keep-Alive”头</td>
</tr>
<tr>
<td>large_client_header_buffers</td>
<td>定义最大数量和最大客户端请求头的大小</td>
</tr>
<tr>
<td>msie_padding</td>
<td>为了填充响应的大小至512字节，对于MSIE客户端，大于400的状态码会被添加注释以便满足512字节，通过启用该命令可以阻止这种行为</td>
</tr>
<tr>
<td>msie_refresh</td>
<td>对于MSIE客户端，可启用发送一个refresh头</td>
</tr>
</tbody>
</table>
<h3 id="文件I-O指令"><a href="#文件I-O指令" class="headerlink" title="文件I/O指令"></a>文件I/O指令</h3><blockquote>
<p>用于控制Nginx如何投递静态文件。</p>
</blockquote>
<table>
<thead>
<tr>
<th>指令</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>aio</td>
<td>启用异步文件I/O。FreeBSD系统下，该值可能被用于sendfile预加载数据。Linux下需要directio指令，自动禁用sendfile</td>
</tr>
<tr>
<td>directio</td>
<td>用于启用操作系统特定的标识或者功能提供大于给定参数的文件。Linux下使用aio时需要使用该指令。</td>
</tr>
<tr>
<td>directio_alignment</td>
<td>设置directio算法。默认值是512，通常已经足够，但是在Linux的XFS下推荐增加至4K</td>
</tr>
<tr>
<td>open_file_cache</td>
<td>配置一个缓存用于存放打开的文件描述符、目录查询和文件查询错误</td>
</tr>
<tr>
<td>open_file_cache_errors</td>
<td>按照open_file_cache，启用文件查询错误缓存</td>
</tr>
<tr>
<td>open_file_cache_min_uses</td>
<td>open_file_cache缓存的文件描述符保留在缓存中，使用该指令配置最少使用文件描述符的次数</td>
</tr>
<tr>
<td>open_file_cache_valid</td>
<td>指定对open_file_cache缓存有效性检查的时间间隔</td>
</tr>
<tr>
<td>postpone_output</td>
<td>指定Nginx发送给客户端最小的数值，如果可能的话，没有数据会发送，直到达到此值</td>
</tr>
<tr>
<td>read_ahead</td>
<td>如果可能的话，内核将预读文件到设定的参数大小</td>
</tr>
<tr>
<td>sendfile</td>
<td>使用sendfile（2）直接复制数据从一个到另一个文件描述符</td>
</tr>
<tr>
<td>sendfile_max_chunk</td>
<td>设置在一个sendfile(2)拷贝中最大数据的大小，这是为了阻止worker”贪婪”</td>
</tr>
</tbody>
</table>
<h3 id="Hash指令"><a href="#Hash指令" class="headerlink" title="Hash指令"></a>Hash指令</h3><blockquote>
<p>控制Nginx 分配给某些变量多大的静态文件</p>
</blockquote>
<table>
<thead>
<tr>
<th>指令</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>server_names_hash_bucket_size</td>
<td>指定用于保存server_name哈希表大小的”桶”</td>
</tr>
<tr>
<td>server_names_hash_max_size</td>
<td>指定的server_name哈希表的最大值的大小</td>
</tr>
<tr>
<td>types_hash_bucket_size</td>
<td>指定用于存放哈希表的”桶”的大小</td>
</tr>
<tr>
<td>types_hash_max_size</td>
<td>指定哈希类型表的最大值的大小</td>
</tr>
<tr>
<td>variables_hash_bucket_size</td>
<td>指定用于存放保留变量”桶”的大小</td>
</tr>
<tr>
<td>variables_hash_max_size</td>
<td>指定存放保留变量最大哈希值的大小</td>
</tr>
</tbody>
</table>
<h3 id="Socket指令"><a href="#Socket指令" class="headerlink" title="Socket指令"></a>Socket指令</h3><blockquote>
<p>描述Nginx如何设置创建TCP套接字的变量选项</p>
</blockquote>
<table>
<thead>
<tr>
<th>指令</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>lingering_close</td>
<td>指定如何保持客户端的连接，以便用于更多数据的传输</td>
</tr>
<tr>
<td>lingering_time</td>
<td>在使用lingering_close指令的连接中，使用该指令指定客户端连接为了处理更多的数据需要保持打开连接的时间</td>
</tr>
<tr>
<td>lingering_timeout</td>
<td>结合lingering_close，该指令显示Nginx在关闭客户端连接之前，为获得更多数据会等待多久</td>
</tr>
<tr>
<td>reset_timeout_connection</td>
<td>使用这个指令之后，超时的连接会被立即关闭，释放相关的内存。默认的状态是处于FIN_WAIT1，这种状态将会一直保持连接</td>
</tr>
<tr>
<td>send_lowat</td>
<td>如果非零，Nginx将会在客户端套接字尝试减少发送操作</td>
</tr>
<tr>
<td>send_timeout</td>
<td>在两次成功的客户端接收响应的写操作之间设置一个超时时间</td>
</tr>
<tr>
<td>tcp_nodelay</td>
<td>启用或禁用TCP_NODELAY选项，用于keep-alive连接</td>
</tr>
<tr>
<td>tcp_nopush</td>
<td>仅依赖于sendfile的使用。它能够使Nginx在一个数据包中尝试发送响应头，以及在数据包中发送一个完整的文件</td>
</tr>
</tbody>
</table>
<h3 id="server部分"><a href="#server部分" class="headerlink" title="server部分"></a>server部分</h3><p>示例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">http &#123;</div><div class="line">    ...</div><div class="line">    server &#123;</div><div class="line">        listen       80 default_server;</div><div class="line">        server_name  _;</div><div class="line">        root         /usr/share/nginx/html;</div><div class="line"></div><div class="line">        # Load configuration files for the default server block.</div><div class="line">        include /etc/nginx/default.d/*.conf;</div><div class="line"></div><div class="line">        location / &#123;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        error_page 404 /404.html;</div><div class="line">            location = /40x.html &#123;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        error_page 500 502 503 504 /50x.html;</div><div class="line">            location = /50x.html &#123;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    ...</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>一个虚拟服务器由listen和server_name指令组合定义。</p>
<p><strong>listen</strong></p>
<blockquote>
<p>指令定义一个IP地址/端口组合或者UNIX套接字路径。示例</p>
<ul>
<li>listen address[:port];</li>
<li>listen port;</li>
<li>listen unix:path;</li>
</ul>
</blockquote>
<p>示例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">listen     127.0.0.1:80;</div><div class="line">listen     localhost:80;</div><div class="line">listen     127.0.0.1:8080;</div><div class="line">listen     localhost:8080;</div><div class="line">listen     192.168.3.105:80;</div><div class="line">listen     192.168.3.105:8080;</div><div class="line">listen     80;</div><div class="line">listen     *:80;</div><div class="line">listen     8080;</div><div class="line">listen     *:8080;</div><div class="line">listen     12.34.56.77:80;</div><div class="line">listen     12.34.56.78:80;</div><div class="line">listen     12.34.56.79:80;</div></pre></td></tr></table></figure></p>
<p>另外，listen还有其他的一些可选参数。常用到的有<br>default_server，表示定义这样的一个组合：（address:port）默认的请求被绑定于此<br>ssl，表明该端口仅接受Https的连接</p>
<p><strong>server_name</strong></p>
<blockquote>
<p>用来指定域名。</p>
</blockquote>
<p>示例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">server_name   nginx.cn;</div><div class="line">server_name   nginx.cn www.nginx.cn;</div><div class="line">server_name   *.nginx.cn;</div><div class="line">server_name   .nginx.cn;</div><div class="line">server_name   nginx.*;</div><div class="line">server_name   nginx.cng bucknell.net brackley.org;</div><div class="line">server_name   localhost litchfield bleddington;</div><div class="line">server_name   &quot;&quot;;</div></pre></td></tr></table></figure></p>
<p>除了普通字符串外，Nginx也接受通配符作为Server_name的参数。</p>
<ul>
<li>使用通配符替代部分子域名： *.example.com</li>
<li>代替顶级域部分： www.example.*</li>
<li>匹配子域和域本身： .example.com 能匹配 *.example.com 和example.com</li>
</ul>
<p>另外，在域名前加上（~），正则表达式也可应用于 server_name.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">server_name ~^www\.example\.com$</div><div class="line">server_name ~^www(\d+).example\.(com)$</div></pre></td></tr></table></figure></p>
<p>对于后一种方式是利用捕获，可以在以后的引用中进一步配置（用$1,$2等）指令中使用。</p>
<h2 id="location部分"><a href="#location部分" class="headerlink" title="location部分"></a>location部分</h2><p>location指令可以用在虚拟服务器server部分，并且意味着提供来自客户端的URI或者内部的重定向访问。</p>
<p>location定义：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">location [modifier] uri &#123;...&#125;</div></pre></td></tr></table></figure></p>
<p>或者是命名location<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">location @name &#123;...&#125;</div></pre></td></tr></table></figure></p>
<blockquote>
<p>命名location仅对内部访问重定向，在进入一个location之前他会保留被请求的URI部分。且命名location只能存在与server级别的定义。</p>
</blockquote>
<p>示例<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">location / &#123; &#125;</div><div class="line">location /images/ &#123; &#125;</div><div class="line">location /blog/ &#123; &#125;</div><div class="line">location /planet/ &#123; &#125;</div><div class="line">location /planet/blog/ &#123; &#125;</div><div class="line"></div><div class="line">location ~ IndexPage.php$ &#123; &#125;</div><div class="line">location ~ ^/BlogPlanet(/|/index.php)$ &#123; &#125;</div><div class="line"></div><div class="line">location ~* .(pl|cgi|perl|prl)$ &#123; &#125;</div><div class="line">location ~* .(md|mdwn|txt|mkdn)$ &#123; &#125;</div><div class="line"></div><div class="line">location ^~ /images/IndexPage/ &#123; &#125;</div><div class="line">location ^~ /blog/BlogPlanet/ &#123; &#125;</div><div class="line"></div><div class="line">location = / &#123; &#125;</div></pre></td></tr></table></figure></p>
<p>当一个请求进入时，URI将会被检测匹配一个最佳的location。</p>
<ul>
<li>没有正则表达式的location被认为是最佳的匹配，独立于含有正则表达式的location。</li>
<li>在配置文件中按照查找顺序进行正则匹配，在查到第一个正则表达式匹配时结束查找，将请求交由这个location处理。<br><strong>Tips：</strong><br>这里匹配的解码URI，如在URL中的”%20”,将会匹配location中的””(空格)。</li>
</ul>
<p>location常见的修饰符</p>
<table>
<thead>
<tr>
<th>修饰符</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>=</td>
<td>使用精确匹配并且终止搜索</td>
</tr>
<tr>
<td>~</td>
<td>区分大小写的正则表达式匹配</td>
</tr>
<tr>
<td>~*</td>
<td>不去分大小写的正则表达式匹配</td>
</tr>
<tr>
<td>^~</td>
<td>如果该location是最佳的匹配，那么对于匹配这个location的字符串不在进行正则表达式检测。</td>
</tr>
</tbody>
</table>
<p>仅用于location中的指令</p>
<table>
<thead>
<tr>
<th>指令</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>alias</td>
<td>定义location的其他名字，在文件系统中能够找到。</td>
</tr>
<tr>
<td>internal</td>
<td>指定一个仅用于内部请求的location（其他指定定义的重定向，rewrite请求，error请求等）</td>
</tr>
<tr>
<td>limit_except</td>
<td>限定一个location可以执行的Http操作（如，GET或HEAD）</td>
</tr>
</tbody>
</table>
<p>命名location的使用（一般与try_files配合使用）<br>示例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">location / &#123;</div><div class="line">  try_files $uri $uri/ $mongrel;</div><div class="line">&#125;</div><div class="line"></div><div class="line">location @mongrel &#123;</div><div class="line">  proxy_pass http://appserver;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>上面一段配置表示，如果给定的URI作为一个文件没有被找到，那么处理将会通过代理被传递到appserver</p>
<p>location的嵌套使用：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">root /var/www</div><div class="line"></div><div class="line">location / &#123;</div><div class="line">  location ^~ /css &#123;</div><div class="line">    location ~* /css.*\.css$ &#123;</div><div class="line">      ...</div><div class="line">    &#125;</div><div class="line">    ...</div><div class="line">  &#125;</div><div class="line">  ...</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><strong>实践表明正则表达式location被嵌套在基于字符串的location是最佳的配置方式</strong></p>
<h2 id="完整的配置文件示例"><a href="#完整的配置文件示例" class="headerlink" title="完整的配置文件示例"></a>完整的配置文件示例</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div></pre></td><td class="code"><pre><div class="line"># For more information on configuration, see:</div><div class="line">#   * Official English Documentation: http://nginx.org/en/docs/</div><div class="line">#   * Official Russian Documentation: http://nginx.org/ru/docs/</div><div class="line"></div><div class="line">user nginx;</div><div class="line">worker_processes auto;</div><div class="line">error_log /var/log/nginx/error.log;</div><div class="line">pid /run/nginx.pid;</div><div class="line"></div><div class="line">events &#123;</div><div class="line">    worker_connections 1024;</div><div class="line">&#125;</div><div class="line"></div><div class="line">http &#123;</div><div class="line">    log_format  main  &apos;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &apos;</div><div class="line">                      &apos;$status $body_bytes_sent &quot;$http_referer&quot; &apos;</div><div class="line">                      &apos;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&apos;;</div><div class="line"></div><div class="line">    access_log  /var/log/nginx/access.log  main;</div><div class="line"></div><div class="line">    sendfile            on;</div><div class="line">    tcp_nopush          on;</div><div class="line">    tcp_nodelay         on;</div><div class="line">    keepalive_timeout   65;</div><div class="line">    types_hash_max_size 2048;</div><div class="line"></div><div class="line">    include             /etc/nginx/mime.types;</div><div class="line">    default_type        application/octet-stream;</div><div class="line"></div><div class="line">    # Load modular configuration files from the /etc/nginx/conf.d directory.</div><div class="line">    # See http://nginx.org/en/docs/ngx_core_module.html#include</div><div class="line">    # for more information.</div><div class="line">    include /etc/nginx/conf.d/*.conf;</div><div class="line"></div><div class="line">    server &#123;</div><div class="line">        listen       80 default_server;</div><div class="line">        listen       [::]:80 default_server;</div><div class="line">        server_name  _;</div><div class="line">        root         /usr/share/nginx/html;</div><div class="line"></div><div class="line">        # Load configuration files for the default server block.</div><div class="line">        include /etc/nginx/default.d/*.conf;</div><div class="line"></div><div class="line">        location / &#123;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        error_page 404 /404.html;</div><div class="line">            location = /40x.html &#123;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        error_page 500 502 503 504 /50x.html;</div><div class="line">            location = /50x.html &#123;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Nginx配置主要分成四部分：main、server、upstream 和 location，每部分包含若干个指令。&lt;br&gt;main(全局设置)&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;该部分设置的指令将影响其它所有部分的设置；&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;server(主机设置)&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;该部分的指令主要用于指定虚拟主机域名、IP和端口；&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;upstream(上游服务器设置)&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;该部分的指令用于设置一系列的后端服务器，设置反向代理及后端服务器的负载均衡；&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;location(URL匹配特定位置后的设置)&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;该部分用于匹配网页位置（比如，根目录“/”,“/images”,等等）。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Nginx本身是模块化设计。全局的配置区段负责全局的各个方面，对于不同的协议可以单独划分成一个部分。我们可以通过在这些单独的协议配置中（http或mail）指定server来定义每一个请求应该被如何处理，以便请求被路由到特定的IP地址或端口上。在http区段中，使用location来匹配URI请求，这些location又可以嵌套使用或者按照一定顺序使用，以确保请求被路由到正确的文件系统区域或者其他地方。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;他们之间的关系式：&lt;/strong&gt; server继承main，location继承server；upstream既不会继承指令也不会被继承。它有自己的特殊指令，不需要在其他地方的应用。&lt;/p&gt;
    
    </summary>
    
      <category term="Nginx" scheme="https://weizhimiao.github.io/categories/Nginx/"/>
    
    
  </entry>
  
</feed>
