<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>行云流水</title>
  <subtitle>却也碎碎念念</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://weizhimiao.github.io/"/>
  <updated>2016-10-07T09:49:06.000Z</updated>
  <id>https://weizhimiao.github.io/</id>
  
  <author>
    <name>zhimiao</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>PHP项目权限控制实现小结</title>
    <link href="https://weizhimiao.github.io/2016/10/07/PHP%E9%A1%B9%E7%9B%AE%E6%9D%83%E9%99%90%E6%8E%A7%E5%88%B6%E5%AE%9E%E7%8E%B0%E5%B0%8F%E7%BB%93/"/>
    <id>https://weizhimiao.github.io/2016/10/07/PHP项目权限控制实现小结/</id>
    <published>2016-10-07T12:00:00.000Z</published>
    <updated>2016-10-07T09:49:06.000Z</updated>
    
    <content type="html"><![CDATA[<p>RBAC，Role Based Access Control,基于角色的访问控制。实体关系如下：</p>
<p><img src="http://n.sinaimg.cn/games/3ece443e/20161007/RBACShiTiGuanXi.png" alt="RBAC实体关系"></p>
<a id="more"></a>
<h2 id="实现逻辑设计"><a href="#实现逻辑设计" class="headerlink" title="实现逻辑设计"></a>实现逻辑设计</h2><p>用户表，user</p>
<ul>
<li>id,用户标识</li>
<li>username，用户名</li>
<li>passwd，密码</li>
<li>status,状态</li>
</ul>
<p>角色表，role</p>
<ul>
<li>id,角色标识</li>
<li>name，角色名称</li>
<li>desc，角色描述</li>
<li>status，状态</li>
</ul>
<p>权限节点表，node</p>
<ul>
<li>id，权限节点标识</li>
<li>name，权限名称</li>
<li>title，权限描述</li>
<li>status，状态</li>
<li>sort，排序</li>
<li>pid，父标识</li>
<li>level，层级（一般，1、项目，2、模块（类），3、操作（方法））</li>
</ul>
<p>用户角色关系表，role_user</p>
<ul>
<li>id，关系标识</li>
<li>role_id,角色标识</li>
<li>user_id,用户标识</li>
</ul>
<p>角色权限关系表, access</p>
<ul>
<li>id，关系标识</li>
<li>role_id，角色标识</li>
<li>node_id，权限标识</li>
</ul>
<h2 id="实现过程"><a href="#实现过程" class="headerlink" title="实现过程"></a>实现过程</h2><p>角色 –&gt; 权限节点 –&gt; 角色权限关系 –&gt; 用户 –&gt; 角色用户关系</p>
<p>角色：</p>
<ul>
<li>创建角色</li>
<li>角色管理</li>
</ul>
<p>权限</p>
<ul>
<li>添加权限节点</li>
<li>权限管理</li>
</ul>
<p>权限节点列表的『权限结构』的递归显示问题，可用无限制分类来实现。</p>
<p>无限制分类简单实现<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Tree</span></span>&#123;</div><div class="line">  <span class="keyword">static</span> <span class="keyword">public</span> $treeList = <span class="keyword">array</span>();  <span class="comment">//存放无限制分类结果</span></div><div class="line"></div><div class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">create</span><span class="params">($data, $pid=<span class="number">0</span>)</span></span>&#123;</div><div class="line">    <span class="keyword">foreach</span> ($data <span class="keyword">as</span> $key =&gt; $value) &#123;</div><div class="line">      <span class="keyword">if</span>($value[<span class="string">'pid'</span>] == $pid)&#123;</div><div class="line">          <span class="keyword">self</span>::$treeList[] = $value;</div><div class="line">          <span class="keyword">unset</span>($data[$key]);</div><div class="line">          <span class="keyword">self</span>::$create($data, $value[<span class="string">'id'</span>]);</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">self</span>::$treeList;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>角色权限关系</p>
<ul>
<li>添加角色-权限节点关系（添加角色新权限时，必须先删除原来的权限设置）</li>
<li>管理角色-权限节点关系</li>
</ul>
<p>用户：</p>
<ul>
<li>添加用户</li>
<li>用户管理</li>
</ul>
<p>用户角色关系</p>
<ul>
<li>添加用户-角色关系</li>
<li>管理用户-角色关系</li>
</ul>
<h2 id="权限控制应用"><a href="#权限控制应用" class="headerlink" title="权限控制应用"></a>权限控制应用</h2><p>实现权限控制方法步骤：</p>
<ol>
<li>通过用户-角色关系表，获得用户所属角色</li>
<li>从权限表中，获得所有权限列表，并应用无限级分类实现分类排序</li>
<li>根据用户角色，通过角色-权限关系表获得当前拥有的权限几点信息</li>
<li>组合所有权限列表，和当前拥有的权限数据，在所有权限节点列表中标识当前用户是否具有对各个节点的权限。去除当前用户没有权限操作的权限节点。将当前的权限信息保存到当前用户的会话中。</li>
<li>用户进行操作各个权限节点时，首先检测当前的操作是否在会话中的权限信息中存在。不存在则按照权限不足处理，存在则继续进行操作。</li>
</ol>
<p>over~</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;RBAC，Role Based Access Control,基于角色的访问控制。实体关系如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://n.sinaimg.cn/games/3ece443e/20161007/RBACShiTiGuanXi.png&quot; alt=&quot;RBAC实体关系&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="PHP" scheme="https://weizhimiao.github.io/categories/PHP/"/>
    
    
      <category term="权限控制" scheme="https://weizhimiao.github.io/tags/%E6%9D%83%E9%99%90%E6%8E%A7%E5%88%B6/"/>
    
      <category term="RBAC" scheme="https://weizhimiao.github.io/tags/RBAC/"/>
    
  </entry>
  
  <entry>
    <title>Linux常用命令</title>
    <link href="https://weizhimiao.github.io/2016/10/06/Linux%E6%96%87%E4%BB%B6%E5%92%8C%E7%9B%AE%E5%BD%95%E6%9D%83%E9%99%90%E5%B0%8F%E7%BB%93/"/>
    <id>https://weizhimiao.github.io/2016/10/06/Linux文件和目录权限小结/</id>
    <published>2016-10-06T14:30:00.000Z</published>
    <updated>2016-10-07T13:38:19.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="普通权限"><a href="#普通权限" class="headerlink" title="普通权限"></a>普通权限</h2><p>文件的权限：    - r  w  -  -  w  x  r  -  x<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">第一位：文件的类型</div><div class="line">    -：文件</div><div class="line">    d：文件夹</div><div class="line">    l：连接</div><div class="line">    c：字符设备文件</div><div class="line">    b：块设备</div><div class="line">    s：套接口文件</div><div class="line">第二位：所有者读权限</div><div class="line">第三位：所有者写权限</div><div class="line">第四位：所有者执行权限</div><div class="line">第五位：所有者组读权限</div><div class="line">第六位：所有者组写权限</div><div class="line">第七位：所有者组执行权限</div><div class="line">第八位：其他组读权限</div><div class="line">第九位：其他组写权限</div><div class="line">第十位：其他组执行权限</div><div class="line">r		4</div><div class="line">w		2</div><div class="line">x		1</div></pre></td></tr></table></figure></p>
<a id="more"></a>
<h2 id="特殊权限（SUID-SGID-SBIT）"><a href="#特殊权限（SUID-SGID-SBIT）" class="headerlink" title="特殊权限（SUID/SGID/SBIT）"></a>特殊权限（SUID/SGID/SBIT）</h2><p>先来看看两个特殊的文件与目录<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">[root@yufei ~]# ls -l /usr/bin/passwd</div><div class="line">-rwsr-xr-x. 1 root root 26968 Jan 29  2010 /usr/bin/passwd</div><div class="line">[root@yufei ~]# ls -l /usr/bin/wall</div><div class="line">-r-xr-sr-x. 1 root tty 10932 Apr 27  2010 /usr/bin/wall</div><div class="line">[root@yufei ~]# ls -ld /tmp/</div><div class="line">drwxrwxrwt. 7 root root 4096 Jan 20 11:00 /tmp/</div></pre></td></tr></table></figure></p>
<p>第一个passwd命令在所有者的地方多了一个s，<br>第二个wall命令在用户组的位置多了一个s，<br>第三个tmp目录，多了一个t。</p>
<p>这是为什么呢？下面我们就来具体看看，这些特殊的权限是什么意思？如何设置？</p>
<h3 id="特殊权限的介绍Set-UID"><a href="#特殊权限的介绍Set-UID" class="headerlink" title="特殊权限的介绍Set UID**"></a>特殊权限的介绍Set UID**</h3><p>当s这个标志出现在文件所有者的x权限上时，如/usr/bin/passwd这个文件的权限状态：“-rwsr-xr-x.”，此时就被称为Set UID，简称为SUID。那么这个特殊权限的特殊性的作用是什么呢？</p>
<ul>
<li>1、SUID权限仅对二进制程序(binary program)有效；</li>
<li>2、执行者对于该程序需要具有x的可执行权限；</li>
<li>3、本权限仅在执行该程序的过程中有效(run-time)；</li>
<li>4、执行者将具有该程序拥有者(owner)的权限。</li>
</ul>
<p>SUID的目的就是：让本来没有相应权限的用户运行这个程序时，可以访问他没有权限访问的资源。passwd就是一个很鲜明的例子，下面我们就来了解一下这相passwd执行的过程。</p>
<p>我们知道，系统中的用户密码是保存在/etc/shadow中的，而这个文件的权限是———-. （这个权限和以前版本的RHEL也有差别，以前的是-r——–）。其实有没有r权限不重要，因为我们的root用户是拥有最高的权限，什么都能干了。关键是要把密码写入到/etc/shadow中。我们知道，除了root用户能修改密码外，用户自己同样也能修改密码，为什么没有写入权限，还能修改密码，就是因为这个SUID功能。</p>
<p>下面就是passwd这个命令的执行过程</p>
<ul>
<li>1、因为/usr/bin/passwd的权限对任何的用户都是可以执行的，所以系统中每个用户都可以执行此命令。</li>
<li>2、而/usr/bin/passwd这个文件的权限是属于root的。</li>
<li>3、当某个用户执行/usr/bin/passwd命令的时候，就拥有了root的权限了。</li>
<li>4、于是某个用户就可以借助root用户的权力，来修改了/etc/shadow文件了。</li>
<li>5、最后，把密码修改成功。</li>
</ul>
<p>注：这个SUID只能运行在二进制的程序上（系统中的一些命令），不能用在脚本上（script），因为脚本还是把很多的程序集合到一起来执行，而不是脚本自身在执行。同样，这个SUID也不能放到目录上，放上也是无效的。</p>
<h3 id="Set-GID"><a href="#Set-GID" class="headerlink" title="Set GID"></a>Set GID</h3><p>我们前面讲过，当s这个标志出现在文件所有者的x权限上时，则就被称为Set UID。那么把这个s放到文件的所属用户组x位置上的话，就是SGID。如开头的/usr/bin/wall命令。<br>那么SGID的功能是什么呢？和SUID一样，只是SGID是获得该程序所属用户组的权限。</p>
<p>这相SGID有几点需要我们注意：</p>
<ul>
<li>1、SGID对二进制程序有用；</li>
<li>2、程序执行者对于该程序来说，需具备x的权限；</li>
<li>3、SGID主要用在目录上；<br>理解了SUID，我想SGID也很容易理解。如果用户在此目录下具有w权限的话，若使用者在此目录下建立新文件，则新文件的群组与此目录的群组相同。</li>
</ul>
<h3 id="Sticky-Bit"><a href="#Sticky-Bit" class="headerlink" title="Sticky Bit"></a>Sticky Bit</h3><p>这个就是针对others来设置的了，和上面两个一样，只是功能不同而已。</p>
<p>SBIT（Sticky Bit）目前只针对目录有效，对于目录的作用是：当用户在该目录下建立文件或目录时，仅有自己与 root才有权力删除。</p>
<p>最具有代表的就是/tmp目录，任何人都可以在/tmp内增加、修改文件（因为权限全是rwx），但仅有该文件/目录建立者与 root能够删除自己的目录或文件。</p>
<p><strong>注：这个SBIT对文件不起作用。</strong></p>
<h3 id="SUID-SGID-SBIT权限设置"><a href="#SUID-SGID-SBIT权限设置" class="headerlink" title="SUID/SGID/SBIT权限设置"></a>SUID/SGID/SBIT权限设置</h3><p>和我们前面说的rwx差不多，也有两种方式，一种是以字符，一种是以数字。</p>
<ul>
<li>4 为 SUID ＝ u+s</li>
<li>2 为 SGID ＝ g+s</li>
<li>1 为 SBIT ＝ o+t</li>
</ul>
<p>下面我们就来看看如何设置，并看看达到的效果。</p>
<h4 id="先看SUID的作用及设置"><a href="#先看SUID的作用及设置" class="headerlink" title="先看SUID的作用及设置"></a>先看SUID的作用及设置</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">[root@yufei ~]# cd /tmp/</div><div class="line">[root@yufei tmp]# cp /usr/bin/passwd ./</div><div class="line">[root@yufei tmp]# mkdir testdir</div></pre></td></tr></table></figure>
<p>上面两步是在/tmp目录下创建passwd文件和testdir目录</p>
<p>下面看看这两个的权限<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">[root@yufei tmp]# ls -l passwd ; ls -ld testdir/</div><div class="line">-rwxr-xr-x. 1 root root 26968 Jan 20 23:27 passwd</div><div class="line">drwxr-xr-x. 2 root root 4096 Jan 20 19:25 testdir/</div></pre></td></tr></table></figure></p>
<p>我们切换到yufei用户，然后修改自己的密码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">[root@yufei tmp]# su yufei</div><div class="line">[yufei@yufei tmp]$ ./passwd</div><div class="line">Changing password for user yufei.</div><div class="line">Changing password for yufei.</div><div class="line">(current) UNIX password:</div><div class="line">New password:           </div><div class="line">Retype new password:</div><div class="line">passwd: Authentication token manipulation error</div></pre></td></tr></table></figure></p>
<p>发现上面的yufei改不了自己的密码，为什么呢？就是因为没有权限把密码写入到/etc/shadow中。想让普通用户能修改/etc/shadow的话，那就需要用到SUID了。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">[yufei@yufei tmp]$ su root</div><div class="line">Password:</div><div class="line">[root@yufei tmp]# chmod u+s passwd</div><div class="line">[root@yufei tmp]# ls -l passwd</div><div class="line">-rwsr-xr-x. 1 root root 26968 Jan 20 23:27 passwd</div></pre></td></tr></table></figure></p>
<p>看到有SUID权限了，下面再来修改yufei自己的密码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">[yufei@yufei tmp]$ ./passwd</div><div class="line">Changing password for user yufei.</div><div class="line">Changing password for yufei.</div><div class="line">(current) UNIX password:</div><div class="line">New password:</div><div class="line">Retype new password:</div><div class="line">passwd: all authentication tokens updated successfully.</div></pre></td></tr></table></figure></p>
<p>我们发现已经成功了。</p>
<p>我想这一下，你对SUID的作用已经了解了吧。</p>
<p>如果想把这个改回来（就是把SUID的权限去掉），我们用数字方式来设置<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">[root@yufei tmp]# chmod 0755 passwd</div><div class="line">[root@yufei tmp]# ls -l passwd</div><div class="line">-rwxr-xr-x. 1 root root 26968 Jan 20 23:27 passwd</div></pre></td></tr></table></figure></p>
<p>OK这样就改过来了，这个数字的原理和我们前面讲的rwx是一样的，只是在最前面设置相应的数字而已。</p>
<p><strong>注：在普通用户修改自己的密码是，密码要设置的复杂点，否则的话，通过不了认证，普通用户和root用户的权限是不同的。</strong></p>
<h4 id="再看SGID的作用及设置"><a href="#再看SGID的作用及设置" class="headerlink" title="再看SGID的作用及设置"></a>再看SGID的作用及设置</h4><p>我们以前面建立的/tmp/testdir为例子<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">[root@yufei tmp]# ls -ld testdir/</div><div class="line">[root@yufei tmp]# chmod 757 testdir/</div><div class="line">[root@yufei tmp]# ls -ld testdir/</div><div class="line">drwxr-xrwx. 2 root root 4096 Jan 20 19:25 testdir/</div></pre></td></tr></table></figure></p>
<p>这时候，任何用户对此目录都有写入权限，那么我们就在这个目录里面创建文件与目录，并看看他们的权限如何<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">[root@yufei tmp]# su yufei</div><div class="line">[yufei@yufei tmp]$ touch testdir/file1</div><div class="line">[yufei@yufei tmp]$ mkdir testdir/dir1</div><div class="line">[yufei@yufei tmp]$ ls -l testdir</div><div class="line">total 0</div><div class="line">drw-rw-r–. 1 yufei yufei 0 Jan 21 10:33 dir1</div><div class="line">-rw-rw-r–. 1 yufei yufei 0 Jan 21 10:33 file1</div></pre></td></tr></table></figure></p>
<p>这时候的文件与目录权限都是创建者的本身<br>下面我们就来看看，把这个目录加上SGID权限后，再创建文件与目录，会是什么样的效果<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">[yufei@yufei tmp]$ su root</div><div class="line">Password:</div><div class="line">[root@yufei tmp]# chmod g+s testdir/</div><div class="line">[root@yufei tmp]# ls -ld testdir/</div><div class="line">drwxr-srwx. 2 root root 4096 Jan 21 10:33 testdir/</div><div class="line">[root@yufei tmp]# su yufei</div><div class="line">[yufei@yufei tmp]$ touch testdir/file2</div><div class="line">[yufei@yufei tmp]$ mkdir testdir/dir2</div><div class="line">[yufei@yufei tmp]$ ls -l testdir/</div><div class="line">total 0</div><div class="line">drw-rw-r–. 1 yufei yufei 0 Jan 21 10:33 dir1</div><div class="line">drw-rw-r–. 1 yufei root  0 Jan 21 10:36 dir2</div><div class="line">-rw-rw-r–. 1 yufei yufei 0 Jan 21 10:33 file1</div><div class="line">-rw-rw-r–. 1 yufei root  0 Jan 21 10:35 file2</div><div class="line">[yufei@yufei tmp]$ ls -ld testdir/</div><div class="line">drwxr-srwx. 2 root root 4096 Jan 21 10:36 testdir/</div></pre></td></tr></table></figure></p>
<p>这时候我们就发现，file2和dir2的用户组变成了root了，也就是他们上层目录testdir这个目录的所属用户组。<br>这个应用，应用在一个项目的共同开发上，是很方便的。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">[yufei@yufei tmp]$ su root</div><div class="line">Password:</div><div class="line">[root@yufei tmp]# chmod g-s testdir/</div><div class="line">[yufei@yufei tmp]$ ls -ld testdir/</div><div class="line">drwxr-xrwx. 2 root root 4096 Jan 21 10:36 testdir/</div></pre></td></tr></table></figure></p>
<p>这样就还原了</p>
<h4 id="最后我们来看SBIT的作用及设置"><a href="#最后我们来看SBIT的作用及设置" class="headerlink" title="最后我们来看SBIT的作用及设置"></a>最后我们来看SBIT的作用及设置</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">[root@yufei tmp]# rm -fr testdir/*</div><div class="line">[root@yufei tmp]# ls -ld testdir/</div><div class="line">drwxr-xrwx. 2 root root 4096 Jan 21 11:42 testdir/</div></pre></td></tr></table></figure>
<p>清空/tmp/testdir/目录里面的全部内容。</p>
<p>我们切换成普通用户，然后再里面创建文件，至少需要两个普通用户来测试这个，如果没有的话，就自己建立。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">[root@yufei tmp]# su yufei</div><div class="line">[yufei@yufei tmp]$ touch testdir/yufei_file</div><div class="line">[yufei@yufei tmp]$ ls -l testdir/</div><div class="line">total 0</div><div class="line">-rw-rw-r– 1 yufei yufei 0 Jan 21 11:45 yufei_file</div></pre></td></tr></table></figure></p>
<p>这时候我们建立了一个文件，我们换成另外一个用户<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">[yufei@yufei tmp]$ suopsers</div><div class="line">Password:</div><div class="line">[opsers@yufei tmp]$ ls -ld testdir/</div><div class="line">drwxr-xrwx. 2 root root 4096 Jan 21 11:45 testdir/</div></pre></td></tr></table></figure></p>
<p>我们看到，虽然其他用户对yufei_file只有只读权限，但由于yufei_file所在的目录，对其他人是全部的权限，所以，我们换其他用户还是可以删除这个文件的，看操作<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[opsers@yufei tmp]$ rm -f testdir/yufei_file</div><div class="line">[opsers@yufei tmp]$ ls testdir/</div></pre></td></tr></table></figure></p>
<p>发现我们已经删除了这个不属于我们的权限。<br>下面我们就给这个目录加上SBIT权限，再来看看效果<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">[opsers@yufei tmp]$ su root</div><div class="line">Password:</div><div class="line">[root@yufei tmp]# chmod o+t testdir</div><div class="line">[root@yufei tmp]# ls -ld testdir/</div><div class="line">drwxr-xrwt. 2 root root 4096 Jan 21 11:49 testdir/</div></pre></td></tr></table></figure></p>
<p>再一次切换普通用户，创建文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">[root@yufei tmp]# su yufei</div><div class="line">[yufei@yufei tmp]$ touch testdir/yufei_file</div><div class="line">[yufei@yufei tmp]$ ls -l testdir/yufei_file</div><div class="line">-rw-rw-r– 1 yufei yufei 0 Jan 21 11:51 testdir/yufei_file</div></pre></td></tr></table></figure></p>
<p>这个文件的权限还是和第一次创建的时候是一样的，我们再换成其他的用户，看看能不能再次删除这个文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">[yufei@yufei tmp]$ su opsers</div><div class="line">Password:</div><div class="line">[opsers@yufei tmp]$ rm -f testdir/yufei_file</div><div class="line">rm: cannot remove `testdir/yufei_file’: Operation not permitted</div></pre></td></tr></table></figure></p>
<p>看到提示，说权限不够了，只能由这个文件的创建者或root用户才能删除。这个我们就不演示了。<br>如果要还原权限的话，<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">[opsers@yufei tmp]$ su root</div><div class="line">Password:</div><div class="line">[root@yufei tmp]# chmod o-t testdir</div><div class="line">[root@yufei tmp]# ls -ld testdir/</div><div class="line">drwxr-xrwx. 2 root root 4096 Jan 21 11:51 testdir/</div></pre></td></tr></table></figure></p>
<p>两个需要注意的问题</p>
<p>OK，关于SUID/SGID/SBIT这些特殊权限的应用和作用我们已经完了。但如果你仔细一点的话，会发现，我并没有用数字方式来更改这个特殊的权限，为什么呢？且看下面的分析。</p>
<h3 id="question"><a href="#question" class="headerlink" title="question"></a>question</h3><h4 id="问题1：用数字改变目录的特殊权限，不起作用。"><a href="#问题1：用数字改变目录的特殊权限，不起作用。" class="headerlink" title="问题1：用数字改变目录的特殊权限，不起作用。**"></a>问题1：用数字改变目录的特殊权限，不起作用。**</h4><p>我们把/tmp/下面，我们自己建立的实验文件删除<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[root@yufei tmp]# rm -fr testdir/</div><div class="line">[root@yufei tmp]# rm -fr passwd</div></pre></td></tr></table></figure></p>
<p>然后再重新创建一个文件和目录，<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">[root@yufei tmp]# cp /usr/bin/passwd ./</div><div class="line">[root@yufei tmp]# mkdir testdir</div><div class="line">[root@yufei tmp]# ls -l passwd ;ls -ld testdir/</div><div class="line">-rwxr-xr-x 1 root root 26968 Jan 21 12:00 passwd</div><div class="line">drwxr-xr-x 2 root root 4096 Jan 21 12:00 testdir/</div></pre></td></tr></table></figure></p>
<p>下面我们就来用数字方式来更改这三个特殊的权限，看看会有什么样的结果<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">[root@yufei tmp]# chmod 4755 passwd</div><div class="line">[root@yufei tmp]# chmod 3755 testdir/</div><div class="line">[root@yufei tmp]# ls -l passwd ;ls -ld testdir/</div><div class="line">-rwsr-xr-x 1 root root 26968 Jan 21 12:00 passwd</div><div class="line">drwxr-sr-x 2 root root 4096 Jan 21 12:00 testdir/</div></pre></td></tr></table></figure></p>
<p>发现用这种方式增加这三个特殊权限没有问题，那么我们再把权限改回去看看<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">[root@yufei tmp]# chmod 0755 passwd</div><div class="line">[root@yufei tmp]# chmod 0755 testdir/</div><div class="line">[root@yufei tmp]# ls -l passwd ;ls -ld testdir/</div><div class="line">-rwxr-xr-x 1 root root 26968 Jan 21 12:00 passwd</div><div class="line">drwxr-sr-x 2 root root 4096 Jan 21 12:00 testdir/</div></pre></td></tr></table></figure></p>
<p>我们发现，对文件，权限是改回去了，而对于目录，只改回去了SBIT的权限，对SUID和SGID改不回去。这是RHEL6上的实验结果，可能是出于安全性的考虑吗？这个我就不清楚了，也找不到相关的资料。</p>
<p>所以说，建议大家还是用最明了的方式，直接用+-来更改，无论方法如何，最终能得到结果就OK了。哈哈……</p>
<h4 id="问题2：为什么会有大写的S和T。"><a href="#问题2：为什么会有大写的S和T。" class="headerlink" title="问题2：为什么会有大写的S和T。"></a>问题2：为什么会有大写的S和T。</h4><p>还是用上面的文件和目录<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">[root@yufei tmp]# ls -l passwd ;ls -ld testdir/</div><div class="line">-rwxr-xr-x 1 root root 26968 Jan 21 12:00 passwd</div><div class="line">drwxr-sr-x 2 root root 4096 Jan 21 12:00 testdir/</div></pre></td></tr></table></figure></p>
<p>我们把passwd和testdir的x权限去掉<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">[root@yufei tmp]# chmod u-x passwd</div><div class="line">[root@yufei tmp]# chmod o-x testdir/</div><div class="line">[root@yufei tmp]# ls -l passwd ;ls -ld testdir/</div><div class="line">-rw-r-xr-x 1 root root 26968 Jan 21 12:00 passwd</div><div class="line">drwxr-sr– 2 root root 4096 Jan 21 12:00 testdir/</div></pre></td></tr></table></figure></p>
<p>再给他们加上SUID和SBIT权限<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">[root@yufei tmp]# chmod u+s passwd</div><div class="line">[root@yufei tmp]# chmod o+t testdir/</div><div class="line">[root@yufei tmp]# ls -l passwd ;ls -ld testdir/</div><div class="line">-rwSr-xr-x 1 root root 26968 Jan 21 12:00 passwd</div><div class="line">drwxr-sr-T 2 root root 4096 Jan 21 12:00 testdir/</div></pre></td></tr></table></figure></p>
<p>我们看到，这时候的小s和小t已经变成了大S和大T了，为什么呢？因为他们这个位置没有了x权限，如果没有了x权限，根据我们上面讲的内容，其实，这个特殊的权限就相当于一个空的权限，没有意义。也就是说，如果你看到特殊权限位置上变成了大写的了，那么，就说明，这里有问题，需要排除。</p>
<h2 id="ACL权限（用来解决用户权限身份不足的问题）"><a href="#ACL权限（用来解决用户权限身份不足的问题）" class="headerlink" title="ACL权限（用来解决用户权限身份不足的问题）"></a>ACL权限（用来解决用户权限身份不足的问题）</h2><p>问题：只要使用ACL权限递归赋予权限，就很有可能出现权限溢出的危险（应为文件和目录的wrx权限含义是不同的）</p>
<p>举例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">/www</div><div class="line">	sc --&gt; root</div><div class="line">	61 --&gt;  fgroup</div><div class="line">	o</div><div class="line">	770</div></pre></td></tr></table></figure></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">[root@localhost ~]# mkdir /www</div><div class="line">[root@localhost ~]# chmod 770 /www/</div><div class="line">[root@localhost ~]# groupadd fgroup</div><div class="line">[root@localhost ~]# gpasswd -a sc fgroup</div></pre></td></tr></table></figure>
<p>正在将用户“sc”加入到“fgroup”组中<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[root@localhost ~]# gpasswd -a aa fgroup</div></pre></td></tr></table></figure></p>
<p>正在将用户“aa”加入到“fgroup”组中<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">[root@localhost ~]# chown root:fgroup  /www</div><div class="line">[root@localhost ~]# ll -d  /www/</div><div class="line">drwxrwx--- 2 root fgroup 4096 04-25 14:56 /www/</div></pre></td></tr></table></figure></p>
<h3 id="getfacl-文件名-查询文件的acl权限"><a href="#getfacl-文件名-查询文件的acl权限" class="headerlink" title="getfacl  文件名        查询文件的acl权限"></a>getfacl  文件名        查询文件的acl权限</h3><h3 id="setfacl-选项-文件名-设定acl权限"><a href="#setfacl-选项-文件名-设定acl权限" class="headerlink" title="setfacl  选项  文件名        设定acl权限"></a>setfacl  选项  文件名        设定acl权限</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">	-m			设定权限</div><div class="line">	-b			删除权限</div><div class="line">setfacl  -m  u:用户名:权限   文件名</div><div class="line">setfacl  -m  g:组名：权限   文件名</div><div class="line">setfacl  -m u:aa:rwx  /test		给test目录赋予aa是读写执行的acl权限</div><div class="line"></div><div class="line">setfacl -m u:cc:rx -R soft/		赋予递归acl权限，只能赋予目录</div><div class="line">		-R  递归</div><div class="line">setfacl  -b  /test		删除acl权限</div></pre></td></tr></table></figure>
<h3 id="setfacl-m-d-u-aa-rwx-R-test-acl默认权限。"><a href="#setfacl-m-d-u-aa-rwx-R-test-acl默认权限。" class="headerlink" title="setfacl  -m d:u:aa:rwx -R /test    acl默认权限。"></a>setfacl  -m d:u:aa:rwx -R /test    acl默认权限。</h3><blockquote>
<p>注意：默认权限只能赋予目录</p>
<p>注意：如果给目录赋予acl权限，两条命令都要输入</p>
</blockquote>
<ul>
<li>-R 递归</li>
<li>-m  u:用户名：-R 权限        只对已经存在的文件生效</li>
<li>-m  d:u:用户名：-R 权限        只对未来要新建的文件生效</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;普通权限&quot;&gt;&lt;a href=&quot;#普通权限&quot; class=&quot;headerlink&quot; title=&quot;普通权限&quot;&gt;&lt;/a&gt;普通权限&lt;/h2&gt;&lt;p&gt;文件的权限：    - r  w  -  -  w  x  r  -  x&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;第一位：文件的类型&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    -：文件&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    d：文件夹&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    l：连接&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    c：字符设备文件&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    b：块设备&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    s：套接口文件&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;第二位：所有者读权限&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;第三位：所有者写权限&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;第四位：所有者执行权限&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;第五位：所有者组读权限&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;第六位：所有者组写权限&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;第七位：所有者组执行权限&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;第八位：其他组读权限&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;第九位：其他组写权限&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;第十位：其他组执行权限&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;r		4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;w		2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;x		1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Linux" scheme="https://weizhimiao.github.io/categories/Linux/"/>
    
    
  </entry>
  
  <entry>
    <title>Linux系统的简介和安装</title>
    <link href="https://weizhimiao.github.io/2016/10/06/Linux%E7%AE%80%E4%BB%8B/"/>
    <id>https://weizhimiao.github.io/2016/10/06/Linux简介/</id>
    <published>2016-10-06T14:30:00.000Z</published>
    <updated>2016-10-07T13:39:11.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Linux简介"><a href="#Linux简介" class="headerlink" title="Linux简介"></a>Linux简介</h2><h3 id="Unix发展史"><a href="#Unix发展史" class="headerlink" title="Unix发展史"></a>Unix发展史</h3><p>1965年，美国麻省理工学院（MIT）、通用电气公司（GE）及AT&amp;T的贝尔实验室联合开发Multics工程计划，其目标是开发一种交互式的具有多道程序处理能力的分时操作系统，但因Multics追求的目标过于庞大复杂，项目进度远远落后于计划，最后贝尔实验室宣布退出。</p>
<p>1969年，美国贝尔实验室的肯.汤普森在DEC PDP-7机器上开发出了UNIX系统</p>
<p>1971年，肯.汤普森的同事丹尼斯.里奇发明了C语言；1973年，UNIX系统的绝大部分源代码用C语言重写，这为提高UNIX系统的可移植性打下基础</p>
<a id="more"></a>
<h3 id="常见的Unix"><a href="#常见的Unix" class="headerlink" title="常见的Unix"></a>常见的Unix</h3><ul>
<li>AIX        IBM</li>
<li>HP-UX        HP</li>
<li>Solaris        SUN</li>
</ul>
<h3 id="Linux的发展史"><a href="#Linux的发展史" class="headerlink" title="Linux的发展史"></a>Linux的发展史</h3><p>由Andrew S. Tanenbaum（谭宁邦）发明。MINIX最初发布于1987年，开放全部源代码给大学教学和研究工作。2000年重新改为BSD授权，成为自由和开放源码软件。<br>Linus Torvalds（李纳斯.托瓦兹），1991年，他在芬兰的赫尔辛基大学用Minix操作平台建立了一个新的操作系统的内核，他把它叫做Linux。</p>
<h3 id="常见的Linux"><a href="#常见的Linux" class="headerlink" title="常见的Linux"></a>常见的Linux</h3><p>Linux的各种版本多大上千种，主要可以分为两大类：</p>
<ul>
<li><p>一类是Red Hat系列，主要有Fedora、RHEL、CentOS、SUSE、gentoo、红旗、Mandriva、turboLinux、REHL enterprise。</p>
</li>
<li><p>还有一类是以debian和ubuntu为代表的系列</p>
</li>
</ul>
<h3 id="Linux特点"><a href="#Linux特点" class="headerlink" title="Linux特点"></a>Linux特点</h3><ul>
<li>开源、免费</li>
<li>稳定</li>
<li>安全</li>
</ul>
<h3 id="Linux的应用领域："><a href="#Linux的应用领域：" class="headerlink" title="Linux的应用领域："></a>Linux的应用领域：</h3><ul>
<li>基于Linux的网站服务器</li>
<li>电影娱乐业（特别是在特效制作上）</li>
<li>嵌入式领域</li>
<li>手机、平板电脑</li>
<li>其他嵌入式领域</li>
</ul>
<h2 id="Linux安装"><a href="#Linux安装" class="headerlink" title="Linux安装"></a>Linux安装</h2><p>Linux安装步骤：</p>
<blockquote>
<ul>
<li><p>分区：把大硬盘分为小的逻辑分区</p>
</li>
<li><p>格式化：写入文件系统</p>
</li>
<li><p>分区设备文件名：给每个分区定义设备文件名</p>
</li>
<li><p>挂载：给每个分区分配挂载点</p>
</li>
</ul>
</blockquote>
<h3 id="Linux磁盘分区："><a href="#Linux磁盘分区：" class="headerlink" title="Linux磁盘分区："></a>Linux磁盘分区：</h3><p>分区类型</p>
<ul>
<li>主分区，由于硬盘的限制，一个硬盘最多只能有4个主分区。</li>
<li>扩展分区，一个硬盘上最多只能有一个扩展分区，主分区和扩展分区加起来一个硬盘也最多有4个，且扩展分区当中不能直接写入数据，只能包含逻辑分区。</li>
<li>逻辑分区，逻辑分区只能建立在扩展分区之上。逻辑分区可以有多个。</li>
</ul>
<p>Linux分区表示：</p>
<ul>
<li>/dev/hda1<blockquote>
<p>   hd:    IDE硬盘    sd：    SCSI硬盘或者SATA硬盘<br>   a：    第一块硬盘<br>   1：    第一个分区</p>
</blockquote>
</li>
</ul>
<h3 id="Linux分区格式化（写入文件系统）"><a href="#Linux分区格式化（写入文件系统）" class="headerlink" title="Linux分区格式化（写入文件系统）"></a>Linux分区格式化（写入文件系统）</h3><p>文件系统类型</p>
<ul>
<li>Windows系统一般有一下文件系统：<ul>
<li>FAT16</li>
<li>FAT32</li>
<li>NTFS</li>
</ul>
</li>
</ul>
<ul>
<li>Linux系统有一下几种文件系统：<ul>
<li>EXT2</li>
<li>EXT3</li>
<li>EXT4</li>
</ul>
</li>
</ul>
<p>Inode        i节点（每个文件都有一个唯一的数字标识来唯一标识该文件）</p>
<blockquote>
<p>注意：每个i节点可以表示的硬盘空间的大小有限，一个小文件可能用一个i节点就可表示，但当一个文件非常大时，就可能对应着好多个i节点。</p>
</blockquote>
<p>Block        数据存储的最小单元（一般大小为4Kb）</p>
<p>格式化又称为逻辑格式化，它是指根据用户选定的文件系统，在磁盘的特定区域写入特定数据，在分区中画出一片用于存放文件分配表、目录表等用于文件管理的磁盘空间。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Linux简介&quot;&gt;&lt;a href=&quot;#Linux简介&quot; class=&quot;headerlink&quot; title=&quot;Linux简介&quot;&gt;&lt;/a&gt;Linux简介&lt;/h2&gt;&lt;h3 id=&quot;Unix发展史&quot;&gt;&lt;a href=&quot;#Unix发展史&quot; class=&quot;headerlink&quot; title=&quot;Unix发展史&quot;&gt;&lt;/a&gt;Unix发展史&lt;/h3&gt;&lt;p&gt;1965年，美国麻省理工学院（MIT）、通用电气公司（GE）及AT&amp;amp;T的贝尔实验室联合开发Multics工程计划，其目标是开发一种交互式的具有多道程序处理能力的分时操作系统，但因Multics追求的目标过于庞大复杂，项目进度远远落后于计划，最后贝尔实验室宣布退出。&lt;/p&gt;
&lt;p&gt;1969年，美国贝尔实验室的肯.汤普森在DEC PDP-7机器上开发出了UNIX系统&lt;/p&gt;
&lt;p&gt;1971年，肯.汤普森的同事丹尼斯.里奇发明了C语言；1973年，UNIX系统的绝大部分源代码用C语言重写，这为提高UNIX系统的可移植性打下基础&lt;/p&gt;
    
    </summary>
    
      <category term="Linux" scheme="https://weizhimiao.github.io/categories/Linux/"/>
    
    
  </entry>
  
  <entry>
    <title>Linux常用命令</title>
    <link href="https://weizhimiao.github.io/2016/10/06/Linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    <id>https://weizhimiao.github.io/2016/10/06/Linux常用命令/</id>
    <published>2016-10-06T14:30:00.000Z</published>
    <updated>2016-10-07T13:34:14.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Linux命令格式"><a href="#Linux命令格式" class="headerlink" title="Linux命令格式"></a>Linux命令格式</h2><p>格式：命令    [选项]    [参数]</p>
<p>例如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">#ls 	-list 	显示目录下内容</div></pre></td></tr></table></figure></p>
<blockquote>
<p>命令操作的对象（文件、目录、用户、进程）<br>Linux中以”.”开头的文件是隐藏文件</p>
</blockquote>
<p>提示符：[root@localhost src]#</p>
<blockquote>
<p>[当前登录用户@主机名 当前所在目录]#</p>
<h1 id="超级用户"><a href="#超级用户" class="headerlink" title="超级用户"></a>超级用户</h1><p>$    普通用户</p>
</blockquote>
<p>当前所在目录：    用户家目录</p>
<blockquote>
<p>   管理员        /root<br>   普通用户        /home/用户名</p>
</blockquote>
<p><strong>tips：</strong></p>
<blockquote>
<p>ctrl +  c        强制终止<br>ctrl+l            清屏<br>ctrl+u        光标删除到行首<br>ctrl+a        光标移动到行首<br>ctrl+e        光标移动到行尾</p>
</blockquote>
<a id="more"></a>
<h2 id="目录操作命令"><a href="#目录操作命令" class="headerlink" title="目录操作命令"></a>目录操作命令</h2><p><strong>切换所在目录</strong></p>
<p><code>cd</code></p>
<p>例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">cd  /usr/local/src</div><div class="line">cd   ~	或cd	  	进入当前用户的家目录</div><div class="line">cd  -		进入上次目录</div><div class="line">cd  ..		进入上一级目录</div><div class="line">cd  .		进入当前目录</div></pre></td></tr></table></figure></p>
<p><strong>显示当前所在目录</strong></p>
<p><code>pwd</code></p>
<p><strong>建立目录</strong></p>
<p><code>mkdir</code></p>
<p>例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mkdir  	-p  11/22/33/44		递归建立目录</div></pre></td></tr></table></figure></p>
<p><strong>删除目录</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">rmdir	目录		只能删除空目录</div><div class="line"></div><div class="line">rm	文件名		删除文件</div><div class="line">rm	-rf	目录		删除文件和目录</div><div class="line">		-f	强制</div><div class="line">		-r	递归、删除目录</div></pre></td></tr></table></figure></p>
<p><strong>显示指定目录下的所有内容的目录树</strong></p>
<p>tree    目录名</p>
<p>例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">tree	/var/</div></pre></td></tr></table></figure></p>
<h2 id="文件操作命令"><a href="#文件操作命令" class="headerlink" title="文件操作命令"></a>文件操作命令</h2><p><strong>创建空文件或修改文件时间</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">touch  文件名</div></pre></td></tr></table></figure></p>
<p><strong>删除</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">rm  –rf  文件名</div><div class="line">		-f	强制</div><div class="line">		-r	删除目录</div></pre></td></tr></table></figure></p>
<p><strong>查看文件内容</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">cat	文件名		（从头到尾）</div><div class="line">		-n	列出行号</div><div class="line">more	文件名		（分屏显示文件内容）</div><div class="line">空格向下翻		b  向上翻		q  退出</div><div class="line">head	文件名		（显示文件头几行）</div><div class="line">	head  –n  行数	文件名	指定显示文件头几行</div><div class="line">	head  -20  文件名</div></pre></td></tr></table></figure></p>
<p><strong>链接文件</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">ln  -s  源文件   目标文件		（文件名都必须写绝对路径）</div><div class="line">链接文件相当于windows中的快捷方式，链接文件和源文件修改一个两个都变，删除原文件，软链接打不开。</div></pre></td></tr></table></figure></p>
<h2 id="文件和目录都能操作的命令"><a href="#文件和目录都能操作的命令" class="headerlink" title="文件和目录都能操作的命令"></a>文件和目录都能操作的命令</h2><p><strong>删除文件或目录</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">rm</div></pre></td></tr></table></figure></p>
<p><strong>复制</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">cp  源文件   目标文件</div><div class="line">		-r	复制目录</div><div class="line">		-p	带文件属性复制</div><div class="line">		-d	若源文件为链接文件，则复制链接属性</div><div class="line">		-a	相当于  -pdr</div><div class="line">例：</div><div class="line">cp   aa  /tmp/			原名复制</div><div class="line">cp  aa  /tmp/bb			改名复制</div></pre></td></tr></table></figure></p>
<p><strong>剪切或改名</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">mv	源文件   目标位置</div><div class="line">剪切目录不需要加“-r”选项（特殊）</div><div class="line">例：</div><div class="line">mv  /root/aa  /tmp/	剪切</div><div class="line">mv  aa  bb			改名</div></pre></td></tr></table></figure></p>
<h2 id="权限管理"><a href="#权限管理" class="headerlink" title="权限管理"></a>权限管理</h2><p><strong>权限位</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">-rw-r--r--   1   root root     0 08-11 01:45 aa</div></pre></td></tr></table></figure></p>
<p>权限位是十位<br>第一位：代表文件类型</p>
<blockquote>
<p>-    普通文件<br>   d    目录文件<br>   f    链接文件</p>
</blockquote>
<p>常见的文件类型就有以上3种，Linux和Unix系统中共有7种文件类型，分别有</p>
<pre><code>-    Block        块设备文件，如某个磁盘分区，软驱和光驱等。
-    Char        字符设备，如键盘、打印机等。
-    Dir        目录类型，目录也是文件的一种。
-    Fifo        命名管道，常用于将信息从一个进程传递到另一个进程。
-    File        普通文件。
-    Link        符号链接文件，即指向文件指针的指针。
-    Unknown    未知类型
</code></pre><p>其他九位：属主权限u        属主权限g        其他人权限o</p>
<pre><code>-    r    读        4
-    w    写        2
-    x    执行        1
</code></pre><p><strong>修改权限</strong></p>
<p>chmod</p>
<blockquote>
<p>格式：chmod  {u,g,o }{+,-,=}{w,r,x} 文件名或目录</p>
</blockquote>
<p>例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">chmod  u+x  aa</div><div class="line">chmod u-x  aa</div><div class="line">chmod  g+w,o-r   aa</div><div class="line">chmod  u=rwx  aa</div><div class="line">chmod  755  aa</div><div class="line">chmod  644  aa</div></pre></td></tr></table></figure></p>
<p><strong>权限对于文件和目录的意义</strong></p>
<p>对于文件的意义</p>
<ul>
<li>r：读取文件的内容。cat、more、head、tail</li>
<li>w：编辑、修改文件内容。vi、echo</li>
<li>x：可执行</li>
</ul>
<p>对于目录的意义</p>
<ul>
<li>r：可以查询目录下的文件名。ls</li>
<li>w：具有修改目录结构的权限。比如新建文件和目录，删除此目录下文件和目录，剪切等操作。touch、mv、cp</li>
<li>x：可以进入目录    。    cd</li>
</ul>
<p>对于目录来说，r和x权限一般是一起给的，及对于目录的权限一般至少会给到6.</p>
<p><strong>更改文件或目录的属主和属组命令</strong></p>
<p>chown</p>
<blockquote>
<p>格式：chown  用户名  文件名  </p>
</blockquote>
<p>例<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">chown user1  aa</div><div class="line">chown  user1：user1   aa	（更改属主的同时改变属主）</div></pre></td></tr></table></figure></p>
<h2 id="帮助命令"><a href="#帮助命令" class="headerlink" title="帮助命令"></a>帮助命令</h2><p><strong>查找命令的的帮助</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">man  命令名</div></pre></td></tr></table></figure></p>
<p><strong>查看常见的选项</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">命令  --help</div></pre></td></tr></table></figure></p>
<p>Tips：Linux中通配符和正则的使用原则：</p>
<ul>
<li><p>在搜索目录或者文件名时Linux使用的是通配符，如find.        </p>
<blockquote>
<p>Find:    在系统当中搜索符合条件的文件名，如果需要匹配，使用通配符匹配<br>通配符是完全匹配</p>
</blockquote>
</li>
<li><p>在搜索文件中的内容是，Linux使用的事正则表达式，如grep.        </p>
<blockquote>
<p>Grep：    在文件当中搜索符合条件的字符串，如果需要匹配，使用正则表达式匹配<br>正则表达是包含匹配</p>
</blockquote>
</li>
</ul>
<h2 id="查找命令"><a href="#查找命令" class="headerlink" title="查找命令"></a>查找命令</h2><p><strong>查找命令的命令，同时查看帮助文档的位置</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">whereis</div><div class="line">格式：whereis   命令</div></pre></td></tr></table></figure>
<p><strong>搜索命令</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">find</div><div class="line">格式：find   查找位置   -name   文件名</div><div class="line">例</div><div class="line">find /   -name   aabbcc    </div><div class="line">		-user   用户名		按属主用户查找文件</div><div class="line">		-group   组名		按属组组名查找文件</div><div class="line">		-nouser			查找没有属主的文件</div><div class="line">按照文件属性查找：</div><div class="line">		-name			按照文件名</div><div class="line">		-size 				文件大小。+50k：大于50k，-50k：小雨50k，50k：等于50k	（可用的单位有k，M）</div><div class="line">		-type				文件类型。（f:普通文件，l：链接文件，d目录文件）</div><div class="line">		-perm	644		按文件的权限值查找。</div><div class="line">		-iname			文件名查找，不区分大小写</div><div class="line">		-inum				按照文件i节点查找</div><div class="line">在查找出的结果中，直接进行命令操作。</div><div class="line">find  /var/log/   -mtime   +10  -exec   rm  -rf  &#123;&#125;  \;	查找出十天前修改的文件名删除</div><div class="line">find   /root  -inum   112033   -exec  ls   -l   &#123;&#125;  \;	用文件i节点查找到文件并且显示文件的长格式。</div></pre></td></tr></table></figure></p>
<p><strong>查找文件中的字符串</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">grep</div><div class="line">原理：先把命令操作的结果存在文件中，然后后面的命令去操作文件</div><div class="line">格式：grep  “字符串”   文件名</div><div class="line">例：</div><div class="line">grep  -i  “root” /etc/passwd</div><div class="line">		-i	忽略大小写</div><div class="line">		-v	反向选择</div><div class="line">比较：</div><div class="line">find：在系统当中搜索符合条件的文件名，如果需要匹配，使用通配符匹配。通配符是完全匹配。</div><div class="line">grep：在文件当中搜索符合条件的字符串，如果需要匹配，使用正则表达式匹配，正则表达式是包含匹配</div></pre></td></tr></table></figure></p>
<p><strong>管道符</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">命令1  |  命令2  |   命令3		命令1的执行结果，作为命令2执行的执行条件，以此类推。</div><div class="line">例：</div><div class="line">netstat   -an  |  grep  ESTABLISHED  |  wc  -l	统计正在连接的网络连接的个数</div><div class="line">cat  文件名  |  grep  “字符串”  	提取含有字符串的行</div><div class="line">ls  -l  /etc  |  more 		分屏显示ls内容</div><div class="line">ll  /etc、  |  grep  my</div></pre></td></tr></table></figure></p>
<h2 id="压缩和解压缩"><a href="#压缩和解压缩" class="headerlink" title="压缩和解压缩"></a>压缩和解压缩</h2><p>Linux中常见的压缩包格式</p>
<blockquote>
<p>.gz        bz2        Linux可以识别的常见压缩格式<br>.tar.gz    .tar.bz2    常见的压缩和打包命令</p>
</blockquote>
<p><strong>压缩打包命令</strong></p>
<ul>
<li><p>压缩同时打包</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">tar  -zcvf   压缩文件名	源文件</div><div class="line">tar  -zcvf  aa.tar.gz   aa</div><div class="line">	-z:识别.gz格式</div><div class="line">	-c:压缩</div><div class="line">	-v:显示压缩过程</div><div class="line">	-f:指定压缩包名</div></pre></td></tr></table></figure>
</li>
<li><p>解压缩同时解打包</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">tar   -zxvf  压缩文件名</div><div class="line">	-x: 解压缩</div></pre></td></tr></table></figure>
</li>
<li><p>压缩同时打包</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">tar  -jcvf  压缩文件名	源文件</div><div class="line">	-j：识别.tar.gz2文件格式</div></pre></td></tr></table></figure>
</li>
<li><p>解打包同时解压缩</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">tar  -jxvf  aa.tar.bz2</div></pre></td></tr></table></figure>
</li>
<li><p>查看不解包</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">tar   -ztvf   aa.tar.gz</div><div class="line">tar  -jtvf   aa.tar.bz2</div><div class="line">	-t:  只查看，不解压</div></pre></td></tr></table></figure>
</li>
<li><p>解压到指定压缩位置</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">tar  -jxvf  root.tar.bz2   -C  /tmp/  	（-C一定要写在后边）</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="关闭和重启命令"><a href="#关闭和重启命令" class="headerlink" title="关闭和重启命令"></a>关闭和重启命令</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">shutdown		没有特殊情况建议使用此命令来关机</div><div class="line">shutdown  -h  now	立刻关机</div><div class="line">	-h	关机</div><div class="line">	-r 	重启</div><div class="line"></div><div class="line">reboot 重启命令</div></pre></td></tr></table></figure>
<h2 id="挂载命令"><a href="#挂载命令" class="headerlink" title="挂载命令"></a>挂载命令</h2><p>Linux下所有的存储设备都必须挂载使用，包括硬盘</p>
<ul>
<li><p>挂载</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">mount</div><div class="line">设备文件：</div><div class="line">	/dev/sda1		第一个SCSI硬盘的第一个分区</div><div class="line">	/dev/cdrom		光盘（链接）</div><div class="line">	/dev/hdc		光盘		CentOS 5.5</div><div class="line">	/dev/sr0		光盘		CentOS6.x</div><div class="line">mount  -t  文件系统  设备描述文件   挂载点（已经存在的空目录）</div><div class="line">mount  -t iso9660  /dev/cdrom  /mnt/cdrom(-t iso9660也可省略)</div><div class="line">mount  /dev/cdrom  /mnt/cdrom</div><div class="line"></div><div class="line">fdisk  -l		列出指定的外围设备的分区表状况</div><div class="line">mount  -t  vfat  /dev/sdb1  /mnt/usb</div></pre></td></tr></table></figure>
</li>
<li><p>卸载</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">umount</div><div class="line">umount    /dev/cdrom  </div><div class="line">umount   /mnt/cdrom</div><div class="line">强调：退出挂载目录，才能卸载</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="网络命令"><a href="#网络命令" class="headerlink" title="网络命令"></a>网络命令</h2><p>ping测试网络连通性<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ping   -c  次数  ip 	（测试网络的通畅）</div></pre></td></tr></table></figure></p>
<p>ifconfig        查询本机网络信息</p>
<blockquote>
<p>   -a    列出所有的网卡信息（包括没启动的）</p>
</blockquote>
<h2 id="输出重定向和多命令顺序执行"><a href="#输出重定向和多命令顺序执行" class="headerlink" title="输出重定向和多命令顺序执行"></a>输出重定向和多命令顺序执行</h2><p>输出重定向 把应该输出到屏幕的输出，重定向到文件。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&gt;	覆盖</div><div class="line">&gt;&gt;	追加</div><div class="line">ls  &gt;  aa		覆盖到aa</div><div class="line">ls  &gt;&gt;  aa		追加到aa</div><div class="line">ls  gdlslga  2&gt;&gt;aa		错误信息输出到aa		</div><div class="line">强调：错误输出，不能有空格</div></pre></td></tr></table></figure></p>
<p>错误信息重定向<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">ls  &gt;&gt;  aa  2&gt;&amp;1		错误和正确都输入到aa，可以追加</div><div class="line">		2&gt;&amp;1		把标准错误重定向到标准正确输出</div><div class="line"></div><div class="line">ls  &gt;&gt;  aa  2&gt;&gt;/tmp/bb		正确信息输入aa，错误信息输入bb</div></pre></td></tr></table></figure></p>
<h2 id="补充命令"><a href="#补充命令" class="headerlink" title="补充命令"></a>补充命令</h2><p>date  查看系统时间<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">date 		</div><div class="line">date	-s   20140701		设定日期</div><div class="line">date	-s	09:30:00		设定时间</div></pre></td></tr></table></figure></p>
<p>du统计目录大小<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">-sh	目录名		统计目录大小</div><div class="line">-s		和</div><div class="line">-h		习惯单位</div></pre></td></tr></table></figure></p>
<p>netstat<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">netstat  		查看网络状态的命令</div><div class="line">	-t	查看TCP端口</div><div class="line">	-u	查看UDP端口</div><div class="line">	-l	监听</div><div class="line">	-n	以IP地址和端口号显示，不用域名和服务名显示</div><div class="line">	-a	查询所有连接</div><div class="line">例</div><div class="line">netstat  -tlun</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Linux命令格式&quot;&gt;&lt;a href=&quot;#Linux命令格式&quot; class=&quot;headerlink&quot; title=&quot;Linux命令格式&quot;&gt;&lt;/a&gt;Linux命令格式&lt;/h2&gt;&lt;p&gt;格式：命令    [选项]    [参数]&lt;/p&gt;
&lt;p&gt;例如：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;#ls 	-list 	显示目录下内容&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;命令操作的对象（文件、目录、用户、进程）&lt;br&gt;Linux中以”.”开头的文件是隐藏文件&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;提示符：[root@localhost src]#&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;[当前登录用户@主机名 当前所在目录]#&lt;/p&gt;
&lt;h1 id=&quot;超级用户&quot;&gt;&lt;a href=&quot;#超级用户&quot; class=&quot;headerlink&quot; title=&quot;超级用户&quot;&gt;&lt;/a&gt;超级用户&lt;/h1&gt;&lt;p&gt;$    普通用户&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;当前所在目录：    用户家目录&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;   管理员        /root&lt;br&gt;   普通用户        /home/用户名&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;tips：&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;ctrl +  c        强制终止&lt;br&gt;ctrl+l            清屏&lt;br&gt;ctrl+u        光标删除到行首&lt;br&gt;ctrl+a        光标移动到行首&lt;br&gt;ctrl+e        光标移动到行尾&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Linux" scheme="https://weizhimiao.github.io/categories/Linux/"/>
    
    
  </entry>
  
  <entry>
    <title>PHP魔术方法小结</title>
    <link href="https://weizhimiao.github.io/2016/10/06/PHP%E9%AD%94%E6%9C%AF%E6%96%B9%E6%B3%95%E5%B0%8F%E7%BB%93/"/>
    <id>https://weizhimiao.github.io/2016/10/06/PHP魔术方法小结/</id>
    <published>2016-10-06T14:30:00.000Z</published>
    <updated>2016-10-07T13:24:03.000Z</updated>
    
    <content type="html"><![CDATA[<p>魔术方法：</p>
<blockquote>
<p>一种特殊的函数</p>
</blockquote>
<a id="more"></a>
<h2 id="构造方法：-construct-或者和类名同名的方法"><a href="#构造方法：-construct-或者和类名同名的方法" class="headerlink" title="构造方法： __construct()  或者和类名同名的方法"></a>构造方法： __construct()  或者和类名同名的方法</h2><p>触发时机：在对象实例化的时候自动触发。</p>
<p>作用：初始化成员属性</p>
<p>参数：可以有，可以没有，取决于设定和逻辑</p>
<p>返回值：没有</p>
<p>注意：如果构造方法具有参数，且参数没有默认值，在实例化对象时，必须在类名()内添加对应的实参值。</p>
<h2 id="析构方法-destruct"><a href="#析构方法-destruct" class="headerlink" title="析构方法 __destruct()"></a>析构方法 __destruct()</h2><p>触发时机： 在销毁对象的时候自动触发(unset或者页面执行完毕)</p>
<p>作用：回收对象使用过程中的资源。</p>
<p>参数：没有</p>
<p>返回值：没有</p>
<h2 id="get"><a href="#get" class="headerlink" title="__get()"></a>__get()</h2><p>触发时机：访问私有成员属性的时候自动触发</p>
<p>功能：1.防止报错  2.为私有属性访问提供后门</p>
<p>参数：1个    访问的私有属性名称</p>
<p>返回值：可以有，可以没有</p>
<h2 id="set"><a href="#set" class="headerlink" title="__set()"></a>__set()</h2><p>触发时机: 对私有成员属性进行设置值的时候自动触发</p>
<p>功能:1.屏蔽错误  2.为私有成员属性设置</p>
<p>参数: 2个   1私有成员属性名  2 要设置的值</p>
<p>返回值:无</p>
<h2 id="isset"><a href="#isset" class="headerlink" title="__isset()"></a>__isset()</h2><p>触发时机:对私有成员属性进行isset检测时自动触发</p>
<p>功能: 1.代替对象外部的isset检测，返回结果</p>
<p>参数: 1个   1私有成员属性名</p>
<p>返回值:有  一般返回 isset(属性)结果</p>
<h2 id="unset"><a href="#unset" class="headerlink" title="__unset()"></a>__unset()</h2><p>触发时机:在对象外部对私有成员属性进行unset操作时自动触发</p>
<p>功能: 1.代替对象外部的unset操作，返回结果</p>
<p>参数: 1个   1私有成员属性名</p>
<p>返回值:无</p>
<h2 id="sleep"><a href="#sleep" class="headerlink" title="__sleep()"></a>__sleep()</h2><p>触发时机：在对象进行串行化操作时触发.</p>
<p>功能：指定需要串行化的成员属性.</p>
<p>参数:无</p>
<p>返回值: 需要返回一个数组类型，每个元素都是需要串行化的成员属性名.</p>
<h2 id="wakeup"><a href="#wakeup" class="headerlink" title="__wakeup()"></a>__wakeup()</h2><p>触发时机：.在对象进行反串行化时自动触发</p>
<p>功能：.反串行化时自动修改部分成员属性值.</p>
<p>参数:无</p>
<p>返回值: 无</p>
<h2 id="tostring"><a href="#tostring" class="headerlink" title="__tostring()"></a>__tostring()</h2><p>触发时机：对一个对象进行echo操作时 自动触发</p>
<p>功能：简化操作或者为对象输出值</p>
<p>参数:无</p>
<p>返回值:必须有且必须为字符串类型.</p>
<h2 id="clone"><a href="#clone" class="headerlink" title="__clone()"></a>__clone()</h2><p>触发时机:对对象进行克隆操作时自动触发</p>
<p>功能：修改克隆之后的对象的部分属性值.</p>
<p>参数:无</p>
<p>返回值:无</p>
<p>注意：对象的赋值默认就是引用赋值，不能通过赋值操作获取一个新的对象，获取新对象的操作应该使用克隆操作</p>
<p>格式： 变量=clone 对象变量</p>
<h2 id="call（）"><a href="#call（）" class="headerlink" title="__call（）"></a>__call（）</h2><p>触发时机:    调用了类中不存在的方法时自动触发</p>
<p>功能：1.屏蔽错误  2.为不存在的方法定义个一个功能.</p>
<p>参数:2个   1 不存在的方法名   2所有的实参组成的数组</p>
<p>返回值:可有可无(根据实际功能来看)</p>
<h2 id="autoload-唯一一个类外部的魔术方法"><a href="#autoload-唯一一个类外部的魔术方法" class="headerlink" title="__autoload()(唯一一个类外部的魔术方法)"></a>__autoload()(唯一一个类外部的魔术方法)</h2><p>触发时机:    当页面中需要一个 类而该类不存在时自动触发</p>
<p>功能：实现类的自动加载.</p>
<p>参数1个 不存在的类名</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;魔术方法：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;一种特殊的函数&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="PHP" scheme="https://weizhimiao.github.io/categories/PHP/"/>
    
    
  </entry>
  
  <entry>
    <title>Linux网络配置</title>
    <link href="https://weizhimiao.github.io/2016/10/06/Linux%E7%BD%91%E7%BB%9C%E9%85%8D%E7%BD%AE/"/>
    <id>https://weizhimiao.github.io/2016/10/06/Linux网络配置/</id>
    <published>2016-10-06T14:30:00.000Z</published>
    <updated>2016-10-07T13:59:08.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://n.sinaimg.cn/games/3ece443e/20161007/ifconfig.png" alt="Linux网络配置"></p>
<a id="more"></a>
<p>##虚拟机网卡的配置（IP地址的配置）</p>
<h3 id="IP地址的配置"><a href="#IP地址的配置" class="headerlink" title="IP地址的配置"></a>IP地址的配置</h3><p>给Linux配置IP<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">setup  进行IP地址的设置</div><div class="line">service network restart</div></pre></td></tr></table></figure></p>
<p>手工启动Linux网卡<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">vi  /etc/sysconfig/network-scripts/ifcfg-eth0		编辑网卡配置文件</div></pre></td></tr></table></figure></p>
<p>配置文件内容如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">DEVICE=eth0</div><div class="line">IPADDR=192.168.140.158</div><div class="line">GATEWAY=192.168.140.1</div><div class="line">NETMASK=255.255.255.0</div><div class="line">HWADDR=00:0c:29:41:c7:1f</div><div class="line">UUID=&quot;60bfdea1-c598-4dc8-bf93-da162ea4fb41&quot;</div><div class="line">TYPE=Ethernet</div><div class="line">BOOTPROTO=none</div><div class="line">IPV6INIT=no</div><div class="line">ONBOOT=yes</div><div class="line">USERCTL=no</div></pre></td></tr></table></figure></p>
<p>修改如下配置项：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">ONBOOT=no		改为</div><div class="line">ONBOOT=yes		（是否开机启动）</div></pre></td></tr></table></figure></p>
<p>修改UUID</p>
<blockquote>
<p>解决虚拟机网卡不通：（需要进行如下修改）</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">vi  /etc/sysconfig/network-scripts/ifcfg-eth0</div></pre></td></tr></table></figure>
<p>删除MAC地址行<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">rm –rf /etc/udev/rules.d/70-persistent-net.rules</div></pre></td></tr></table></figure></p>
<p>删除网卡和MAC地址绑定文件<br>重启系统<br>修改虚拟机配置</p>
<blockquote>
<p>网卡连接方式改为桥接模式<br>确定桥接到有线网卡上<br>（桥接方式是虚拟机和真实机共享使用本机的真实物理网卡，故采用这种方式vMare0和8的这两块虚拟网卡可以同时禁掉）</p>
</blockquote>
<h2 id="Linux网络配置"><a href="#Linux网络配置" class="headerlink" title="Linux网络配置"></a>Linux网络配置</h2><h3 id="IP地址配置（3种方法，推介使用地3种）"><a href="#IP地址配置（3种方法，推介使用地3种）" class="headerlink" title="IP地址配置（3种方法，推介使用地3种）"></a>IP地址配置（3种方法，推介使用地3种）</h3><ol>
<li><p>setup</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">service   network  restart</div></pre></td></tr></table></figure>
</li>
<li><p>ifconfig  eth0  ip    netmask       临时生效</p>
</li>
<li>修改网卡配置文件</li>
</ol>
<p><strong>网卡信息文件：<code>/etc/sysconfig/network-scripts/ifcfg-eth0</code> 文件内容如下：</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">DEVICE=eth0					网卡设备名</div><div class="line">BOOTPROTO=none				是否自动获取IP。none：不生效					static：手动		dhcp：动态获取IP</div><div class="line">BROADCAST=192.168.140.255			广播地址</div><div class="line">HWADDR=00:0c:29:21:80:48			mac地址</div><div class="line">IPADDR=192.168.140.253			IP地址</div><div class="line">IPV6INIT=yes					IPv6开启</div><div class="line">IPV6_AUTOCONF=yes				IPv6获取</div><div class="line">NETMASK=255.255.255.0				掩码</div><div class="line">NETWORK=192.168.140.0				网段</div><div class="line">ONBOOT=yes					网卡开机启动</div><div class="line">TYPE=Ethernet					以太网</div><div class="line">GATEWAY=192.168.140.1				网关</div></pre></td></tr></table></figure></p>
<p>如果是采用DHCP方式获取IP信息，则可以只填写上述用橙色标记的配置项即可。<br>修改配置文件后，需要重启服务（如service  network  restart）</p>
<p><strong>主机名配置文件</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/etc/sysconfig/network		永久生效，但是要重启</div></pre></td></tr></table></figure></p>
<p>文件内容如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">NETWORKING=yes</div><div class="line">HOSTNAME=localhost.localdomain</div></pre></td></tr></table></figure></p>
<p>另外，还可以用命令进行修改，不过只能临时生效<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">hostname  sc		将用户名修改为sc</div><div class="line">hostname		查看主机名</div></pre></td></tr></table></figure></p>
<p><strong>DNS配置文件</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/etc/resolv.conf</div></pre></td></tr></table></figure></p>
<p>文件内容如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">nameserver  202.106.0.20</div><div class="line">如有多个DNS服务器地址，可在IP地址后面直接加，并以“，”分割，或者再起下一行写入“nameserver  xx.xx.xx.xx”</div></pre></td></tr></table></figure></p>
<h3 id="网络命令"><a href="#网络命令" class="headerlink" title="网络命令"></a>网络命令</h3><ol>
<li><p>ifconfig        查看网卡信息</p>
<blockquote>
<p>   -a     全部（包括没有启动的）</p>
</blockquote>
</li>
<li><p>ifup  eth0        快速开启</p>
<blockquote>
<p>   ifdown    eth0        快速关闭</p>
</blockquote>
</li>
<li><p>netstat   -an        查看所有网络连接</p>
<blockquote>
<p>netstat  -tlun        查看TCP和UDP协议监听的端口</p>
<p>   netstat   -rn        查看路由default：默认路由（网关）</p>
</blockquote>
</li>
<li><p>route        查看路由</p>
<blockquote>
<p>   route  add   default   gw    192.168.140.1     手工设定网关，临时生效<br>   route  del    default   gw  192.168.190.6       删除网关</p>
</blockquote>
</li>
<li><p>ping    IP    探测网络畅通</p>
</li>
<li><p>traceroute    ip或域名        探测到目的地址的路径（Linux命令）</p>
<blockquote>
<p>   tracert   ip       （windows命令）</p>
</blockquote>
</li>
<li><p>tcpdump</p>
<blockquote>
<p>   tcpdump -i eth0 -nnX port 21        抓取eth0网卡  21端口的传输信息</p>
</blockquote>
</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://n.sinaimg.cn/games/3ece443e/20161007/ifconfig.png&quot; alt=&quot;Linux网络配置&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Linux" scheme="https://weizhimiao.github.io/categories/Linux/"/>
    
    
  </entry>
  
  <entry>
    <title>ElasticSearch整理</title>
    <link href="https://weizhimiao.github.io/2016/10/05/ElasticSearch%E6%95%B4%E7%90%86/"/>
    <id>https://weizhimiao.github.io/2016/10/05/ElasticSearch整理/</id>
    <published>2016-10-05T13:00:00.000Z</published>
    <updated>2016-10-06T11:12:57.000Z</updated>
    
    <content type="html"><![CDATA[<p>ElasticSearch是由Shay Banon发起的一个开源搜索服务器项目。由于其分布式特性和实时搜索能力，成为当前搜索和数据分析解决方案领域的重要成员。</p>
<p><img src="http://n.sinaimg.cn/games/3ece443e/20161006/ElasticSearch.png" alt="ElasticSearch"></p>
<a id="more"></a>
<h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><p>索引</p>
<blockquote>
<p>索引（index）是ElasticSearch存放数据的一种逻辑结构。类比关系型数据库中的数据表。</p>
</blockquote>
<p>文档</p>
<blockquote>
<p>文档（document）是ElasticSearch中存储的主要实体。每个ElasticSearch文档类比关系型数据库中数据表的没一行数据。<br>文档由字段（行数据的列）组成，一个文档由多个字段组成，并且ElasticSearch允许一个字段重复出现多次，该类型字段被称为多只字段。每个字段对应一种类型（字符串型、数值型、日期型等），并且ElasticSearch可以自动确定字段类型。不同于关系型数据库，ElasticSearch的文档结构可以是不固定的。即不同的文档可以有不同的字段集合。</p>
</blockquote>
<p>文档类型</p>
<blockquote>
<p>ElasticSearch中，一个索引可以存储许多不同用途的对象。按照不同的用途我们可以将文档划分成不同的类型加以区分。</p>
</blockquote>
<p>节点和集群</p>
<blockquote>
<p>ElasticSearch既可以作为一个独立搜索服务器工作，也支持多台一起协作进行运行，构成一个集群（cluster），其中的每个服务器被称为节点（node）。ElasticSearch可以通过索引分片,将海量的数据进行分割并分布到不同的节点，来实现更强的可用性和更高的性能。</p>
</blockquote>
<p>分片</p>
<blockquote>
<p>对于存储大规模的文档，ElasticSearch会将数据进行切分，每部分切成一个单独的Apache Lucene索引，称为分片（shared）。每个分片可以存储在集群的不同的节点上，当一个查询需要用到多个分片时，ElasticSearch会将请求发送至多个分片，之后结果进行合并。</p>
</blockquote>
<p>副本</p>
<blockquote>
<p>分片副本是对原始分片的一个拷贝，每个主分片可以有零个或者多个副分片。当主分片丢失时，副分片就会被提升为主分片。启用分片副本功能，可以提高查询的吞吐或实现系统的高可用性。</p>
</blockquote>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><h3 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h3><p>JDK6+</p>
<p>JDK的安装方式比较简单，只需将下载回来的程序包解压到相应的目录即可。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">wget http://download.oracle.com/otn-pub/java/jdk/8u101-b13/jdk-8u101-linux-x64.tar.gz</div><div class="line">mkdir /usr/local/java</div><div class="line">tar -zxf jdk-8u101-linux-x64.tar.gz -C /usr/local/java/</div></pre></td></tr></table></figure></p>
<p>设置JDK的环境变量，如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"># tail -3 ~/.bash_profile</div><div class="line">export JAVA_HOME=/usr/local/java/jdk1.8.0_101</div><div class="line">export PATH=$PATH:$JAVA_HOME/bin</div><div class="line">exportCLASSPATH=.:$JAVA_HOME/lib/tools.jar:$JAVA_HOME/lib/dt.jar:$CLASSPATH</div></pre></td></tr></table></figure></p>
<p>重新加载环境变量<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"># source .bash_profile</div></pre></td></tr></table></figure></p>
<p>在Shell提示符中执行java –version命令，显示如下结果，说明安装成功：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"># java -version</div><div class="line">java version &quot;1.8.0_45&quot;</div><div class="line">Java(TM) SE Runtime Environment (build 1.8.0_45-b14)</div><div class="line">Java HotSpot(TM) 64-Bit Server VM (build 25.45-b02,mixed mode)</div></pre></td></tr></table></figure></p>
<h3 id="安装Elasticsearch"><a href="#安装Elasticsearch" class="headerlink" title="安装Elasticsearch"></a>安装Elasticsearch</h3><p>下载Elasticsearch后，解压到对应的目录就完成Elasticsearch的安装。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"># wget https://download.elasticsearch.org/elasticsearch/elasticsearch/elasticsearch-1.7.0.zip</div><div class="line"># unzip elasticsearch-1.7.0.zip</div><div class="line"># mv elasticsearch-1.7.0 /usr/local/elasticsearch</div></pre></td></tr></table></figure></p>
<h3 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">elasticsearch/</div><div class="line">├── bin</div><div class="line">│   ...#运行elasticsearch和进行插件管理所需的脚本</div><div class="line">├── config</div><div class="line">│   ...#elasticsearch配置文件所在目录</div><div class="line">├── data</div><div class="line">│   ...#存储elasticsearch用到的数据</div><div class="line">├── lib</div><div class="line">│   ...#elasticsearch运行中用到的库</div><div class="line">├── LICENSE.txt</div><div class="line">├── logs</div><div class="line">│   ...#存储elasticsearch运行中产生的事件信息和错误信息</div><div class="line">├── nohup</div><div class="line">├── NOTICE.txt</div><div class="line">└── README.textile</div><div class="line"></div><div class="line">10 directories, 60 files</div></pre></td></tr></table></figure>
<h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>所有的配置文件都位于config目录下。该目录下包含两个文件。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">├── config</div><div class="line">│   ├── elasticsearch.yml</div><div class="line">│   └── logging.yml</div></pre></td></tr></table></figure></p>
<p>elasticsearch.yml</p>
<blockquote>
<p>负责设置服务器的默认配置。<br>比较重要的两个值cluster.name 和 node.name.</p>
<ul>
<li>cluster.name,保存的是集群名称。通过集群名称可以区分不同的集群。配置具有相同名称的节点将尝试组成一个集群。</li>
<li>node.name，节点名称。我们也可以不指定该名称，elasticsearch会自动为节点选择一个唯一名称。但每次启动时这个唯一名称会发生改变。</li>
</ul>
</blockquote>
<p>其他配置<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div><div class="line">230</div><div class="line">231</div><div class="line">232</div><div class="line">233</div><div class="line">234</div><div class="line">235</div><div class="line">236</div><div class="line">237</div><div class="line">238</div><div class="line">239</div><div class="line">240</div><div class="line">241</div><div class="line">242</div><div class="line">243</div><div class="line">244</div><div class="line">245</div><div class="line">246</div><div class="line">247</div><div class="line">248</div><div class="line">249</div><div class="line">250</div><div class="line">251</div><div class="line">252</div><div class="line">253</div><div class="line">254</div><div class="line">255</div><div class="line">256</div><div class="line">257</div><div class="line">258</div><div class="line">259</div><div class="line">260</div><div class="line">261</div><div class="line">262</div><div class="line">263</div><div class="line">264</div><div class="line">265</div><div class="line">266</div><div class="line">267</div><div class="line">268</div><div class="line">269</div><div class="line">270</div><div class="line">271</div><div class="line">272</div><div class="line">273</div><div class="line">274</div><div class="line">275</div><div class="line">276</div><div class="line">277</div><div class="line">278</div><div class="line">279</div><div class="line">280</div><div class="line">281</div><div class="line">282</div><div class="line">283</div><div class="line">284</div><div class="line">285</div><div class="line">286</div><div class="line">287</div><div class="line">288</div><div class="line">289</div><div class="line">290</div><div class="line">291</div><div class="line">292</div><div class="line">293</div><div class="line">294</div><div class="line">295</div><div class="line">296</div><div class="line">297</div><div class="line">298</div><div class="line">299</div><div class="line">300</div><div class="line">301</div><div class="line">302</div><div class="line">303</div><div class="line">304</div><div class="line">305</div><div class="line">306</div><div class="line">307</div><div class="line">308</div><div class="line">309</div><div class="line">310</div><div class="line">311</div><div class="line">312</div><div class="line">313</div><div class="line">314</div><div class="line">315</div><div class="line">316</div><div class="line">317</div><div class="line">318</div><div class="line">319</div><div class="line">320</div><div class="line">321</div><div class="line">322</div><div class="line">323</div><div class="line">324</div><div class="line">325</div><div class="line">326</div><div class="line">327</div><div class="line">328</div><div class="line">329</div><div class="line">330</div><div class="line">331</div><div class="line">332</div><div class="line">333</div><div class="line">334</div><div class="line">335</div><div class="line">336</div><div class="line">337</div><div class="line">338</div><div class="line">339</div><div class="line">340</div><div class="line">341</div><div class="line">342</div><div class="line">343</div><div class="line">344</div><div class="line">345</div><div class="line">346</div><div class="line">347</div><div class="line">348</div><div class="line">349</div><div class="line">350</div><div class="line">351</div><div class="line">352</div><div class="line">353</div><div class="line">354</div><div class="line">355</div><div class="line">356</div><div class="line">357</div><div class="line">358</div><div class="line">359</div><div class="line">360</div><div class="line">361</div><div class="line">362</div><div class="line">363</div><div class="line">364</div><div class="line">365</div><div class="line">366</div><div class="line">367</div><div class="line">368</div><div class="line">369</div><div class="line">370</div><div class="line">371</div><div class="line">372</div><div class="line">373</div><div class="line">374</div><div class="line">375</div><div class="line">376</div><div class="line">377</div><div class="line">378</div><div class="line">379</div><div class="line">380</div><div class="line">381</div></pre></td><td class="code"><pre><div class="line">##################### Elasticsearch Configuration Example #####################</div><div class="line"></div><div class="line">＃此文件包含各种配置设置的概述，</div><div class="line">＃针对操作人员。应用程序开发人员应该</div><div class="line">＃在咨询&lt;http://elasticsearch.org/guide&gt;指南。</div><div class="line">#</div><div class="line">＃安装过程被覆盖在</div><div class="line">＃&lt;http://elasticsearch.org/guide/en/elasticsearch/reference/current/setup.html&gt;。</div><div class="line">#</div><div class="line">＃Elasticsearch附带了大多数设置合理的默认值，</div><div class="line">＃所以你可以尝试使用它而不用修改。</div><div class="line">#</div><div class="line">＃大多数时候，这些默认值是蛮好的运行生产</div><div class="line">＃集群。如果你正在微调群集，或者想知道的某些配置选项＃效果，请_DO ask_上</div><div class="line">＃邮件列表或IRC频道[http://elasticsearch.org/community。</div><div class="line">#</div><div class="line">＃配置中的任何元素都可以用环境变量替换</div><div class="line">＃通过将它们放置在$ &#123;...&#125;符号。 例如：</div><div class="line">#</div><div class="line">#node.rack: $&#123;RACK_ENV_VAR&#125;</div><div class="line"></div><div class="line">＃有关支持的格式和配置文件信息语法，请参阅</div><div class="line">＃&lt;http://elasticsearch.org/guide/en/elasticsearch/reference/current/setup-configuration.html&gt;</div><div class="line"></div><div class="line">################################### Cluster 集群###################################</div><div class="line"></div><div class="line">＃集群名称标识群集的自动发现。如果你在同一个网络上的正在运行多个群集，请确保您使用的是唯一的名称。</div><div class="line">＃</div><div class="line">＃cluster.name：elasticsearch</div><div class="line"></div><div class="line">#################################### Node 节点#####################################</div><div class="line"></div><div class="line"></div><div class="line">＃节点名称是在启动时动态生成的，但你也可以手动配置它们。你可以给这个节点起一个特定的名称：</div><div class="line">＃</div><div class="line">#node.name: &quot;Franz Kafka&quot;</div><div class="line"></div><div class="line">＃每个节点可以被配置为允许或拒绝称为集群主节点，</div><div class="line">＃和允许或拒绝来存储数据。</div><div class="line">＃</div><div class="line">＃允许此节点可以作为主节点（默认启用）：</div><div class="line">＃</div><div class="line">#node.master: true</div><div class="line">#</div><div class="line"># 允许此节点可以用来存储数据（默认启用）：</div><div class="line">#</div><div class="line">#node.data: true</div><div class="line"></div><div class="line"></div><div class="line">＃你可以利用这些设置，以设计高级集群拓扑。</div><div class="line">＃</div><div class="line">＃1，你想这个节点永远不会成为一个主节点，只保存数据。这将是群集的“主力”。</div><div class="line">＃</div><div class="line">＃</div><div class="line">#node.master: false</div><div class="line">#node.data: true</div><div class="line">#</div><div class="line">＃2，你要这个节点只能作为主：不存储任何数据和有免费的资源。这将是群集的“协调员”。</div><div class="line">＃</div><div class="line">＃</div><div class="line">#node.master: true</div><div class="line">#node.data: false</div><div class="line">#</div><div class="line">＃3，你希望这个节点是不是主数据节点，但可以充当“搜索负载平衡器”（取从节点的数据，聚集结果等）</div><div class="line">＃</div><div class="line">#node.master: false</div><div class="line">#node.data: false</div><div class="line"></div><div class="line"></div><div class="line">＃使用群集健康状况API[http://localhost:9200/_cluster/health]，</div><div class="line">＃节点信息API[http://localhost:9200/_nodes]或GUI工具</div><div class="line">＃如&lt;http://www.elasticsearch.org/overview/marvel/&gt;</div><div class="line">＃&lt;http://github.com/karmi/elasticsearch-paramedic&gt;</div><div class="line">＃&lt;http://github.com/lukas-vlcek/bigdesk&gt;和</div><div class="line">＃&lt;http://mobz.github.com/elasticsearch-head&gt;检查群集状态。</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">＃一个节点可以有与之关联的通用属性，可用于定制分片分配过滤，或分配意识。</div><div class="line">＃</div><div class="line">＃属性是一个简单的键值对，类似node.key：值，下面是一个例子：</div><div class="line">＃</div><div class="line">#node.rack: rack314</div><div class="line"></div><div class="line">＃默认情况下，多个节点被允许从相同的安装位置</div><div class="line"># 如果要禁用的话，设置如下：</div><div class="line">#node.max_local_storage_nodes: 1</div><div class="line"></div><div class="line"></div><div class="line">#################################### Index 索引####################################</div><div class="line"></div><div class="line">#</div><div class="line">＃您可以设置一些选项（如分片/副本选项，映射或分析器的定义，事务日志设置...）对全局参数，在这个文件中。</div><div class="line">#</div><div class="line"># Note, that it makes more sense to configure index settings specifically for</div><div class="line"># a certain index, either when creating it or by using the index templates API.</div><div class="line">#</div><div class="line">＃请注意，它更有意义专门配置索引设置</div><div class="line">＃某个具体的索引，创造它或使用该索引模板API。</div><div class="line"># See &lt;http://elasticsearch.org/guide/en/elasticsearch/reference/current/index-modules.html&gt; and</div><div class="line"># &lt;http://elasticsearch.org/guide/en/elasticsearch/reference/current/indices-create-index.html&gt;</div><div class="line"># for more information.</div><div class="line"></div><div class="line"></div><div class="line"># 设置一个索引的分片（副本）数量（默认 5）</div><div class="line">#</div><div class="line">#index.number_of_shards: 5</div><div class="line"></div><div class="line">＃设置索引（默认值为1）的副本（额外副本）数量：</div><div class="line">＃</div><div class="line">#index.number_of_replicas: 1</div><div class="line"></div><div class="line"># Note, that for development on a local machine, with small indices, it usually</div><div class="line"># makes sense to &quot;disable&quot; the distributed features:</div><div class="line">#</div><div class="line">＃注意，对于在本地机器，它通常比较小的值。禁用分布式特点是很有必要的</div><div class="line">＃</div><div class="line">#index.number_of_shards: 1</div><div class="line">#index.number_of_replicas: 0</div><div class="line"></div><div class="line"></div><div class="line">＃这些设置直接影响索引和搜索操作的性能</div><div class="line">＃在集群中。假设你有足够多的机器来保存分片及</div><div class="line">＃副本，经验法则是：</div><div class="line">#</div><div class="line"># 1. 更多的分片能提高索引效率，一个大的索引允许存储在不同的服务器上</div><div class="line"># 2. 更多的副本能够提高搜索效率，并且能够增强系统的可用性</div><div class="line">#</div><div class="line">#  &quot;number_of_shards&quot; 对于一个索引不能动态修改设置一次.</div><div class="line">#</div><div class="line"># T &quot;number_of_replicas&quot; 可以增加或者减少在任何时候，通过索引更新或者api操作</div><div class="line">#</div><div class="line"># Elasticsearch takes care about load balancing, relocating, gathering the</div><div class="line"># results from nodes, etc. Experiment with different settings to fine-tune</div><div class="line"># your setup.</div><div class="line"></div><div class="line">＃Elasticsearch需要关心负载均衡，搬迁，从节点收集结果，等。</div><div class="line"># 你可以通过不断的微调进行设置</div><div class="line"></div><div class="line">＃使用索引状态API（&lt;http://localhost:9200/A/_status&gt;）检查</div><div class="line">＃索引状态。</div><div class="line"></div><div class="line"></div><div class="line">#################################### Paths ####################################</div><div class="line"></div><div class="line"># 路径包含目录配置（此文件并logging.yml）：</div><div class="line">#path.conf: /path/to/conf</div><div class="line"></div><div class="line"># 索引数据存储路径配置</div><div class="line">#path.data: /path/to/data</div><div class="line">#</div><div class="line">＃可以任选地包括一个以上的位置，方便扩展和使用。 例如：</div><div class="line">#</div><div class="line">#path.data: /path/to/data1,/path/to/data2</div><div class="line"></div><div class="line"># 临时文件路径：</div><div class="line">#</div><div class="line">#path.work: /path/to/work</div><div class="line"></div><div class="line"># 日志文件路径:</div><div class="line">#</div><div class="line">#path.logs: /path/to/logs</div><div class="line"></div><div class="line"># 插件安装目录</div><div class="line">#</div><div class="line">#path.plugins: /path/to/plugins</div><div class="line"></div><div class="line"></div><div class="line">#################################### Plugin ###################################</div><div class="line"></div><div class="line"># 如果这里列出的插件没有安装用于当前节点，该节点将无法启动。</div><div class="line">#</div><div class="line">#plugin.mandatory: mapper-attachments,lang-groovy</div><div class="line"></div><div class="line"></div><div class="line">################################### Memory ####################################</div><div class="line"></div><div class="line">＃Elasticsearch表现不佳时，JVM启动交换：你应该确保它永远不会_交换。</div><div class="line">#</div><div class="line"># 将此属性设置为true锁定内存：</div><div class="line">#</div><div class="line">#bootstrap.mlockall: true</div><div class="line"></div><div class="line"></div><div class="line"># 确保ES_MIN_MEM和ES_MAX_MEM环境变量设置</div><div class="line">＃为相同的值，并且该机器有足够的内存来分配</div><div class="line">＃为Elasticsearch，留出足够的内存为操作系统本身。</div><div class="line">＃</div><div class="line">#</div><div class="line"># You should also make sure that the Elasticsearch process is allowed to lock</div><div class="line"># the memory, eg. by using `ulimit -l unlimited`.</div><div class="line"># 你还应该确保该Elasticsearch允许进程锁定内存</div><div class="line">＃例如。通过使用`ulimit -l unlimited`。</div><div class="line"></div><div class="line">############################## Network And HTTP ###############################</div><div class="line"></div><div class="line"></div><div class="line">＃Elasticsearch，默认情况下，本身绑定到0.0.0.0地址，并监听</div><div class="line">＃端口[9200-9300] HTTP流量和端口[9300-9400]节点到节点</div><div class="line">＃沟通。（范围意味着，如果端口忙，它会自动将</div><div class="line">＃尝试下口）。</div><div class="line"></div><div class="line"># 设置绑定专用地址（IPv4或IPv6）：</div><div class="line">#network.bind_host: 192.168.0.1</div><div class="line"></div><div class="line">＃设置其他节点将使用与该节点通信的地址。否则</div><div class="line">＃，它会自动的产生。它必须指向一个实际的IP地址。</div><div class="line">#</div><div class="line">#network.publish_host: 192.168.0.1</div><div class="line"></div><div class="line"># 同时设置“bind_host&apos;和&apos;publish_host”：</div><div class="line">#</div><div class="line">#network.host: 192.168.0.1</div><div class="line"></div><div class="line"># 设置一个自定义的节点间通讯端口，（默认为 9300）</div><div class="line">#transport.tcp.port: 9300</div><div class="line"></div><div class="line"># 启用节点间通讯压缩</div><div class="line">#</div><div class="line">#transport.tcp.compress: true</div><div class="line"></div><div class="line"># 设置自定义端口侦听HTTP流量：</div><div class="line">#</div><div class="line">#http.port: 9200</div><div class="line"></div><div class="line"># 设置自定义允许的内容长度：</div><div class="line">#</div><div class="line">#http.max_content_length: 100mb</div><div class="line"></div><div class="line"># 完全禁用HTTP：</div><div class="line">#</div><div class="line">#http.enabled: false</div><div class="line"></div><div class="line"></div><div class="line">################################### Gateway ###################################</div><div class="line"></div><div class="line"></div><div class="line">＃网关允许持收集集群之间的群集状态</div><div class="line">＃集群中每个状态改变（例如添加一个索引），都将会存储</div><div class="line">＃在网关，并且当集群首次启动时，</div><div class="line">＃它会从网关读出其状态。</div><div class="line"></div><div class="line"></div><div class="line">＃有几种类型的网关实现的。欲了解更多信息，请参阅</div><div class="line"># &lt;http://elasticsearch.org/guide/en/elasticsearch/reference/current/modules-gateway.html&gt;.</div><div class="line"></div><div class="line">＃默认网关类型为“本地”网关（推荐）：</div><div class="line">#</div><div class="line">#gateway.type: local</div><div class="line"></div><div class="line"># 设置当集群崩溃时，如何重新启动并恢复进程（使用共享网关时，尽可能多的使用本地数据）</div><div class="line"></div><div class="line"># 允许恢复后，在一个集群中有N个节点：</div><div class="line">#</div><div class="line">#gateway.recover_after_nodes: 1</div><div class="line"></div><div class="line">＃设置超时时间，在启动恢复过程中，前面设置的N个节点全部重启（接受时间值）：</div><div class="line">#</div><div class="line"></div><div class="line">#gateway.recover_after_time: 5m</div><div class="line"></div><div class="line">＃设置在一个句群众预计的节点数</div><div class="line">#一旦这些N个节点全部启用（满足recover_after_nodes），立即开始恢复过程（无需等待恢复时间后到期）：</div><div class="line">#</div><div class="line">#gateway.expected_nodes: 2</div><div class="line"></div><div class="line"></div><div class="line">############################# Recovery Throttling 恢复节流 #############################</div><div class="line"></div><div class="line"></div><div class="line">＃这些设置可以控制碎片分配的过程，在节点恢复期间、副本定位、重新平衡，或添加和删除节点时</div><div class="line"></div><div class="line"></div><div class="line">#</div><div class="line"># 设置一个节点上同时恢复数量</div><div class="line"># 1. 初步恢复期间</div><div class="line">#</div><div class="line">#cluster.routing.allocation.node_initial_primaries_recoveries: 4</div><div class="line">#</div><div class="line"># 2. 在添加/删除节点，再平衡期间</div><div class="line">#</div><div class="line">#cluster.routing.allocation.node_concurrent_recoveries: 2</div><div class="line"></div><div class="line"># 设置一个恢复时的吞吐量值（如100MB，默认20MB）</div><div class="line">#</div><div class="line">#indices.recovery.max_bytes_per_sec: 20mb</div><div class="line"></div><div class="line"></div><div class="line"># 设置一个并发流数量限制，在同级别的分片恢复时</div><div class="line">#</div><div class="line">#indices.recovery.concurrent_streams: 5</div><div class="line"></div><div class="line"></div><div class="line">################################## Discovery 发现##################################</div><div class="line"></div><div class="line"></div><div class="line">＃发现基础设施，确保节点可以在群集内找到和主节点的选举。是默认是通过多播方式来进行发现。</div><div class="line"></div><div class="line"># 设置一个节点确保能在集群内发现N个其他合格的节点能成为主节点。</div><div class="line"></div><div class="line">#discovery.zen.minimum_master_nodes: 1</div><div class="line"></div><div class="line"></div><div class="line"># 设置一个过期时间，在通过ping发现其他节点时</div><div class="line"># 在一个较差的网络环境中设置一个较长的值，可以最大限度的减少报错</div><div class="line"></div><div class="line">#discovery.zen.ping.timeout: 3s</div><div class="line"></div><div class="line"># 更多的信息，请看</div><div class="line"># &lt;http://elasticsearch.org/guide/en/elasticsearch/reference/current/modules-discovery-zen.html&gt;</div><div class="line"></div><div class="line"></div><div class="line">＃单播发现允许明确地控制哪些节点将被用于发现群集。它可以在多播不存在，或限制集群通信时使用。</div><div class="line">#</div><div class="line"># 1. 多播发现（默认启用）</div><div class="line">#</div><div class="line">#discovery.zen.ping.multicast.enabled: false</div><div class="line">#</div><div class="line"># 2. 配置一个初始清单在集群的主节点上，为了发现一个刚启用的节点</div><div class="line">#</div><div class="line">#discovery.zen.ping.unicast.hosts: [&quot;host1&quot;, &quot;host2:port&quot;]</div><div class="line"></div><div class="line"># 为了发现 ，EC2允许使用AWS EC2 API</div><div class="line"># 你必须安装云AWS插件启用EC2发现。</div><div class="line">#</div><div class="line"># 更多信息请查看</div><div class="line"># &lt;http://elasticsearch.org/guide/en/elasticsearch/reference/current/modules-discovery-ec2.html&gt;</div><div class="line">#</div><div class="line"># See &lt;http://elasticsearch.org/tutorials/elasticsearch-on-ec2/&gt;</div><div class="line"># 一步一步的教程</div><div class="line"></div><div class="line"># 为了发现 ，GCE发现允许使用谷歌Compute Engine的API</div><div class="line">#</div><div class="line"># 你必须安装云GCE GCE插件启用的发现。</div><div class="line">#</div><div class="line"># For more information, see &lt;https://github.com/elasticsearch/elasticsearch-cloud-gce&gt;.</div><div class="line"></div><div class="line"># Azure的发现允许以执行发现使用Azure的API。</div><div class="line">#</div><div class="line"># 你必须安装云cloud-azure插件启用的发现。</div><div class="line"># For more information, see &lt;https://github.com/elasticsearch/elasticsearch-cloud-azure&gt;.</div><div class="line"></div><div class="line">################################## Slow Log ##################################</div><div class="line"></div><div class="line"># 分片级查询并会的对应等级的日志</div><div class="line"></div><div class="line">#index.search.slowlog.threshold.query.warn: 10s</div><div class="line">#index.search.slowlog.threshold.query.info: 5s</div><div class="line">#index.search.slowlog.threshold.query.debug: 2s</div><div class="line">#index.search.slowlog.threshold.query.trace: 500ms</div><div class="line"></div><div class="line">#index.search.slowlog.threshold.fetch.warn: 1s</div><div class="line">#index.search.slowlog.threshold.fetch.info: 800ms</div><div class="line">#index.search.slowlog.threshold.fetch.debug: 500ms</div><div class="line">#index.search.slowlog.threshold.fetch.trace: 200ms</div><div class="line"></div><div class="line">#index.indexing.slowlog.threshold.index.warn: 10s</div><div class="line">#index.indexing.slowlog.threshold.index.info: 5s</div><div class="line">#index.indexing.slowlog.threshold.index.debug: 2s</div><div class="line">#index.indexing.slowlog.threshold.index.trace: 500ms</div><div class="line"></div><div class="line">################################## GC Logging ################################</div><div class="line"></div><div class="line">#monitor.jvm.gc.young.warn: 1000ms</div><div class="line">#monitor.jvm.gc.young.info: 700ms</div><div class="line">#monitor.jvm.gc.young.debug: 400ms</div><div class="line"></div><div class="line">#monitor.jvm.gc.old.warn: 10s</div><div class="line">#monitor.jvm.gc.old.info: 5s</div><div class="line">#monitor.jvm.gc.old.debug: 2s</div><div class="line"></div><div class="line">################################## Security ################################</div><div class="line"></div><div class="line"># Uncomment if you want to enable JSONP as a valid return transport on the</div><div class="line"># http server. With this enabled, it may pose a security risk, so disabling</div><div class="line"># it unless you need it is recommended (it is disabled by default).</div><div class="line"></div><div class="line">＃不推荐，如果要启用JSONP作为HTTP服务器上的返回。</div><div class="line">#启用此功能，它可能会带来安全风险，因此禁用它，除非你需要的建议（它被默认禁用）。</div><div class="line"></div><div class="line">#http.jsonp.enable: true</div></pre></td></tr></table></figure></p>
<p>logging.yml</p>
<blockquote>
<p>定义多少信息写入系统日志、定义日志文件，并定期创建新文件</p>
</blockquote>
<h3 id="管理"><a href="#管理" class="headerlink" title="管理"></a>管理</h3><p>启动Elasticsearch<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"># /usr/local/elasticsearch/bin/elasticsearch  -d</div></pre></td></tr></table></figure></p>
<blockquote>
<p>-d 表示将进程放入后台运行</p>
</blockquote>
<p>或者通过nohup命令<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"># nohup /usr/local/elasticsearch/bin/elasticsearch &gt; nohup</div></pre></td></tr></table></figure></p>
<p>将elasticsearch设置成开机自启动<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"># echo &quot;nohup /usr/local/elasticsearch/bin/elasticsearch &gt; nohup&quot; &gt; /etc/rc.local</div></pre></td></tr></table></figure></p>
<p>确认elasticsearch的9200端口已监听，说明elasticsearch已成功运行</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"># netstat -anp |grep :9200</div><div class="line">tcp        0      0 :::9200                     :::*                        LISTEN      3362/java</div></pre></td></tr></table></figure>
<p>如何关闭elasticsearch</p>
<ul>
<li>方法一：如果节点与控制台相连并且当前elasticsearch是使用-f选项运行，则只需要按下Ctrl+C组合键即可</li>
<li>方法二：通过发送TERM信号来终止服务器进程 kill -9 进程ID</li>
<li>方法三：使用REST API</li>
</ul>
<p>关闭整个集群<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"># curl -XPOST http://localhost:9200/_cluster/nodes/_shutdown</div></pre></td></tr></table></figure></p>
<p>关闭单个节点<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"># curl -XPOST  http://127.0.0.1:9200/_cluster/nodes/2ens0yuEQ12G6ct1UDpihQ/_shutdown</div></pre></td></tr></table></figure></p>
<p>2ens0yuEQ12G6ct1UDpihQ ，为要关闭的节点标志符</p>
<p>查看节点标志符，可以从elasticsearch日志中或者通过REST API中获得<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"># curl http://localhost:9200/_nodes/?pretty</div><div class="line">&#123;</div><div class="line">  &quot;cluster_name&quot; : &quot;elasticsearch&quot;,</div><div class="line">  &quot;nodes&quot; : &#123;</div><div class="line">    &quot;13QfvIdATEurGAhVAlO6tQ&quot; : &#123;</div><div class="line">      &quot;name&quot; : &quot;Edwin Jarvis&quot;,</div><div class="line">      ...</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>13QfvIdATEurGAhVAlO6tQ,即为节点标志符</p>
<h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"># curl http://localhost:9200</div><div class="line">&#123;</div><div class="line">  &quot;status&quot; : 200,</div><div class="line">  &quot;name&quot; : &quot;Destroyer of Demons&quot;,</div><div class="line">  &quot;cluster_name&quot; : &quot;elasticsearch&quot;,</div><div class="line">  &quot;version&quot; : &#123;</div><div class="line">    &quot;number&quot; : &quot;1.7.0&quot;,</div><div class="line">    &quot;build_hash&quot; : &quot;929b9739cae115e73c346cb5f9a6f24ba735a743&quot;,</div><div class="line">    &quot;build_timestamp&quot; : &quot;2015-07-16T14:31:07Z&quot;,</div><div class="line">    &quot;build_snapshot&quot; : false,</div><div class="line">    &quot;lucene_version&quot; : &quot;4.10.4&quot;</div><div class="line">  &#125;,</div><div class="line">  &quot;tagline&quot; : &quot;You Know, for Search&quot;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>查看elasticsearch服务器当前运行状况<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"># curl http://localhost:9200/_cluster/health?pretty</div><div class="line">&#123;</div><div class="line">  &quot;cluster_name&quot; : &quot;elasticsearch&quot;,</div><div class="line">  &quot;status&quot; : &quot;green&quot;,</div><div class="line">  &quot;timed_out&quot; : false,</div><div class="line">  &quot;number_of_nodes&quot; : 1,</div><div class="line">  &quot;number_of_data_nodes&quot; : 1,</div><div class="line">  &quot;active_primary_shards&quot; : 0,</div><div class="line">  &quot;active_shards&quot; : 0,</div><div class="line">  &quot;relocating_shards&quot; : 0,</div><div class="line">  &quot;initializing_shards&quot; : 0,</div><div class="line">  &quot;unassigned_shards&quot; : 0,</div><div class="line">  &quot;delayed_unassigned_shards&quot; : 0,</div><div class="line">  &quot;number_of_pending_tasks&quot; : 0,</div><div class="line">  &quot;number_of_in_flight_fetch&quot; : 0</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="使用（基于REST-API数据操作）"><a href="#使用（基于REST-API数据操作）" class="headerlink" title="使用（基于REST API数据操作）"></a>使用（基于REST API数据操作）</h2><h3 id="REST"><a href="#REST" class="headerlink" title="REST"></a>REST</h3><p>REST 定义了一组体系架构原则，您可以根据这些原则设计以系统资源为中心的 Web 服务，包括使用不同语言编写的客户端如何通过 HTTP 处理和传输资源状态。 在类似于REST架构中，每个请求都会被定向到地址路径部分所指的具体对象上。</p>
<h3 id="创建文档"><a href="#创建文档" class="headerlink" title="创建文档"></a>创建文档</h3><p>示例：创建一个文档用来存储一篇blog，内容如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  &quot;title&quot;:&quot;my first article title&quot;,</div><div class="line">  &quot;content&quot;:&quot;this is article content&quot;,</div><div class="line">  &quot;date&quot;:&quot;2016-10-05&quot;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>操作：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"># curl -XPUT  http://localhost:9200/blog/article/1 -d &apos;&#123;&quot;title&quot;:&quot;my first article title&quot;,&quot;content&quot;:&quot;this is article content&quot;,&quot;date&quot;:&quot;2016-10-05&quot;&#125;&apos;</div></pre></td></tr></table></figure></p>
<p>返回结果如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&#123;&quot;_index&quot;:&quot;blog&quot;,&quot;_type&quot;:&quot;article&quot;,&quot;_id&quot;:&quot;1&quot;,&quot;_version&quot;:1,&quot;created&quot;:true&#125;</div></pre></td></tr></table></figure></p>
<p>返回了操作结果信息，并显示新文档的存储位置。并且包含文档的唯一标识符以及当前版本信息。</p>
<h3 id="检索文档"><a href="#检索文档" class="headerlink" title="检索文档"></a>检索文档</h3><p>按照REST风格，我们想要查看刚才创建的文档。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"># curl -XGET  http://localhost:9200/blog/article/1</div></pre></td></tr></table></figure></p>
<p>结果<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">curl -XGET  http://localhost:9200/blog/article/1?pretty</div><div class="line">&#123;</div><div class="line">  &quot;_index&quot; : &quot;blog&quot;,</div><div class="line">  &quot;_type&quot; : &quot;article&quot;,</div><div class="line">  &quot;_id&quot; : &quot;1&quot;,</div><div class="line">  &quot;_version&quot; : 1,</div><div class="line">  &quot;found&quot; : true,</div><div class="line">  &quot;_source&quot;:&#123;&quot;title&quot;:&quot;my first article title&quot;,&quot;content&quot;:&quot;this is article content&quot;,&quot;date&quot;:&quot;2016-10-05&quot;&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="更新文档"><a href="#更新文档" class="headerlink" title="更新文档"></a>更新文档</h3><p>Elasticsearch中更新索引中的文档是非常复杂的工作。必须先提取文档、从_source字段获得数据、移除旧文档、应用变更，作为新文档创建索引。</p>
<p>示例，更改之前创建的blog，并增加author字段<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"># curl -XPOST  http://localhost:9200/blog/article/1 -d &apos;&#123;&quot;title&quot;:&quot;my first article title&quot;,&quot;content&quot;:&quot;this is article content&quot;,&quot;date&quot;:&quot;2016-10-05&quot;,&quot;author&quot;:&quot;zhimiao&quot;&#125;&apos;</div></pre></td></tr></table></figure></p>
<p>结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"># &#123;&quot;_index&quot;:&quot;blog&quot;,&quot;_type&quot;:&quot;article&quot;,&quot;_id&quot;:&quot;1&quot;,&quot;_version&quot;:3,&quot;created&quot;:false&#125;</div></pre></td></tr></table></figure></p>
<p>查看是否更新成功<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"># curl -XGET  http://localhost:9200/blog/article/1?pretty</div><div class="line">&#123;</div><div class="line">  &quot;_index&quot; : &quot;blog&quot;,</div><div class="line">  &quot;_type&quot; : &quot;article&quot;,</div><div class="line">  &quot;_id&quot; : &quot;1&quot;,</div><div class="line">  &quot;_version&quot; : 4,</div><div class="line">  &quot;found&quot; : true,</div><div class="line">  &quot;_source&quot;:&#123;&quot;title&quot;:&quot;my first article title&quot;,&quot;content&quot;:&quot;this is article content&quot;,&quot;date&quot;:&quot;2016-10-05&quot;,&quot;author&quot;:&quot;zhimiao&quot;&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="删除文档"><a href="#删除文档" class="headerlink" title="删除文档"></a>删除文档</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"># curl -XDELETE  http://localhost:9200/blog/article/1?pretty</div><div class="line">&#123;</div><div class="line">  &quot;found&quot; : true,</div><div class="line">  &quot;_index&quot; : &quot;blog&quot;,</div><div class="line">  &quot;_type&quot; : &quot;article&quot;,</div><div class="line">  &quot;_id&quot; : &quot;1&quot;,</div><div class="line">  &quot;_version&quot; : 7</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>查看是否已删除<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"># curl -XGET  http://localhost:9200/blog/article/1?pretty</div><div class="line">&#123;</div><div class="line">  &quot;_index&quot; : &quot;blog&quot;,</div><div class="line">  &quot;_type&quot; : &quot;article&quot;,</div><div class="line">  &quot;_id&quot; : &quot;1&quot;,</div><div class="line">  &quot;found&quot; : false</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;ElasticSearch是由Shay Banon发起的一个开源搜索服务器项目。由于其分布式特性和实时搜索能力，成为当前搜索和数据分析解决方案领域的重要成员。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://n.sinaimg.cn/games/3ece443e/20161006/ElasticSearch.png&quot; alt=&quot;ElasticSearch&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Linux" scheme="https://weizhimiao.github.io/categories/Linux/"/>
    
    
      <category term="ElasticSearch" scheme="https://weizhimiao.github.io/tags/ElasticSearch/"/>
    
  </entry>
  
  <entry>
    <title>keepalive工作原理和配置(转)</title>
    <link href="https://weizhimiao.github.io/2016/10/05/keepalived%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86%E5%92%8C%E9%85%8D%E7%BD%AE/"/>
    <id>https://weizhimiao.github.io/2016/10/05/keepalived工作原理和配置/</id>
    <published>2016-10-05T12:30:00.000Z</published>
    <updated>2016-10-05T06:47:20.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="keepalived是什么"><a href="#keepalived是什么" class="headerlink" title="keepalived是什么"></a>keepalived是什么</h2><p>keepalived是集群管理中保证集群高可用的一个服务软件，其功能类似于<a href="https://github.com/chenzhiwei/linux/tree/master/heartbeat" target="_blank" rel="external">heartbeat</a>，用来防止单点故障。</p>
<h2 id="keepalived工作原理"><a href="#keepalived工作原理" class="headerlink" title="keepalived工作原理"></a>keepalived工作原理</h2><p>keepalived是以VRRP协议为实现基础的，VRRP全称Virtual Router Redundancy Protocol，即<a href="http://en.wikipedia.org/wiki/VRRP" target="_blank" rel="external">虚拟路由冗余协议</a>。</p>
<p>虚拟路由冗余协议，可以认为是实现路由器高可用的协议，即将N台提供相同功能的路由器组成一个路由器组，这个组里面有一个master和多个backup，master上面有一个对外提供服务的vip（该路由器所在局域网内其他机器的默认路由为该vip），master会发组播，当backup收不到vrrp包时就认为master宕掉了，这时就需要根据<a href="http://tools.ietf.org/html/rfc5798#section-5.1" target="_blank" rel="external">VRRP的优先级</a>来选举一个backup当master。这样的话就可以保证路由器的高可用了。</p>
<p>keepalived主要有三个模块，分别是core、check和vrrp。</p>
<ul>
<li>core模块为keepalived的核心，负责主进程的启动、维护以及全局配置文件的加载和解析。</li>
<li>check负责健康检查，包括常见的各种检查方式。</li>
<li>vrrp模块是来实现VRRP协议的。</li>
</ul>
<a id="more"></a>
<h2 id="keepalived的配置文件"><a href="#keepalived的配置文件" class="headerlink" title="keepalived的配置文件"></a>keepalived的配置文件</h2><p>keepalived只有一个配置文件keepalived.conf，里面主要包括以下几个配置区域，分别是global_defs、static_ipaddress、static_routes、vrrp_script、vrrp_instance和virtual_server。</p>
<h3 id="global-defs区域"><a href="#global-defs区域" class="headerlink" title="global_defs区域"></a>global_defs区域</h3><blockquote>
<p>主要是配置故障发生时的通知对象以及机器标识</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">global_defs &#123;</div><div class="line">    notification_email &#123;</div><div class="line">        a@abc.com</div><div class="line">        b@abc.com</div><div class="line">        ...</div><div class="line">    &#125;</div><div class="line">    notification_email_from alert@abc.com</div><div class="line">    smtp_server smtp.abc.com</div><div class="line">    smtp_connect_timeout 30</div><div class="line">    enable_traps</div><div class="line">    router_id host163</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>notification_email 故障发生时给谁发邮件通知。</li>
<li>notification_email_from 通知邮件从哪个地址发出。</li>
<li>smpt_server 通知邮件的smtp地址。</li>
<li>smtp_connect_timeout 连接smtp服务器的超时时间。</li>
<li>enable_traps 开启SNMP陷阱（<a href="http://en.wikipedia.org/wiki/Simple_Network_Management_Protocol" target="_blank" rel="external">Simple Network Management Protocol</a>）。</li>
<li>router_id 标识本节点的字条串，通常为hostname，但不一定非得是hostname。故障发生时，邮件通知会用到。</li>
</ul>
<h3 id="static-ipaddress和static-routes"><a href="#static-ipaddress和static-routes" class="headerlink" title="static_ipaddress和static_routes"></a>static_ipaddress和static_routes</h3><blockquote>
<p>static_ipaddress和static_routes区域配置的是是本节点的IP和路由信息。如果你的机器上已经配置了IP和路由，那么这两个区域可以不用配置。<br>其实，一般情况下你的机器都会有IP地址和路由信息的，因此没必要再在这两个区域配置。</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">static_ipaddress &#123;</div><div class="line">    10.210.214.163/24 brd 10.210.214.255 dev eth0</div><div class="line">    ...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">static_routes &#123;</div><div class="line">    10.0.0.0/8 via 10.210.214.1 dev eth0</div><div class="line">    ...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>以上分别表示启动/关闭keepalived时在本机执行的如下命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"># /sbin/ip addr add 10.210.214.163/24 brd 10.210.214.255 dev eth0</div><div class="line"># /sbin/ip route add 10.0.0.0/8 via 10.210.214.1 dev eth0</div><div class="line"># /sbin/ip addr del 10.210.214.163/24 brd 10.210.214.255 dev eth0</div><div class="line"># /sbin/ip route del 10.0.0.0/8 via 10.210.214.1 dev eth0</div></pre></td></tr></table></figure></p>
<p>注意： 请忽略这两个区域，因为我坚信你的机器肯定已经配置了IP和路由。</p>
<h3 id="vrrp-script"><a href="#vrrp-script" class="headerlink" title="vrrp_script"></a>vrrp_script</h3><blockquote>
<p>用来做健康检查的，当时检查失败时会将vrrp_instance的priority减少相应的值。</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">vrrp_script chk_http_port &#123;</div><div class="line">    script &quot;&lt;/dev/tcp/127.0.0.1/80&quot;</div><div class="line">    interval 1</div><div class="line">    weight -10</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>以上意思是如果script中的指令执行失败，那么相应的vrrp_instance的优先级会减少10个点。</p>
<h3 id="vrrp-instance和vrrp-sync-group区域"><a href="#vrrp-instance和vrrp-sync-group区域" class="headerlink" title="vrrp_instance和vrrp_sync_group区域"></a>vrrp_instance和vrrp_sync_group区域</h3><blockquote>
<p>vrrp_instance用来定义对外提供服务的VIP区域及其相关属性。</p>
<p>vrrp_rsync_group用来定义vrrp_intance组，使得这个组内成员动作一致。</p>
</blockquote>
<p>举个例子来说明一下其功能：</p>
<p>两个vrrp_instance同属于一个vrrp_rsync_group，那么其中一个vrrp_instance发生故障切换时，另一个vrrp_instance也会跟着切换（即使这个instance没有发生故障）。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div></pre></td><td class="code"><pre><div class="line">vrrp_sync_group VG_1 &#123;</div><div class="line">    group &#123;</div><div class="line">        inside_network   # name of vrrp_instance (below)</div><div class="line">        outside_network  # One for each moveable IP.</div><div class="line">        ...</div><div class="line">    &#125;</div><div class="line">    notify_master /path/to_master.sh</div><div class="line">    notify_backup /path/to_backup.sh</div><div class="line">    notify_fault &quot;/path/fault.sh VG_1&quot;</div><div class="line">    notify /path/notify.sh</div><div class="line">    smtp_alert</div><div class="line">&#125;</div><div class="line">vrrp_instance VI_1 &#123;</div><div class="line">    state MASTER</div><div class="line">    interface eth0</div><div class="line">    use_vmac &lt;VMAC_INTERFACE&gt;</div><div class="line">    dont_track_primary</div><div class="line">    track_interface &#123;</div><div class="line">        eth0</div><div class="line">        eth1</div><div class="line">    &#125;</div><div class="line">    mcast_src_ip &lt;IPADDR&gt;</div><div class="line">    lvs_sync_daemon_interface eth1</div><div class="line">    garp_master_delay 10</div><div class="line">    virtual_router_id 1</div><div class="line">    priority 100</div><div class="line">    advert_int 1</div><div class="line">    authentication &#123;</div><div class="line">        auth_type PASS</div><div class="line">        auth_pass 12345678</div><div class="line">    &#125;</div><div class="line">    virtual_ipaddress &#123;</div><div class="line">        10.210.214.253/24 brd 10.210.214.255 dev eth0</div><div class="line">        192.168.1.11/24 brd 192.168.1.255 dev eth1</div><div class="line">    &#125;</div><div class="line">    virtual_routes &#123;</div><div class="line">        172.16.0.0/12 via 10.210.214.1</div><div class="line">        192.168.1.0/24 via 192.168.1.1 dev eth1</div><div class="line">        default via 202.102.152.1</div><div class="line">    &#125;</div><div class="line">    track_script &#123;</div><div class="line">        chk_http_port</div><div class="line">    &#125;</div><div class="line">    nopreempt</div><div class="line">    preempt_delay 300</div><div class="line">    debug</div><div class="line">    notify_master &lt;STRING&gt;|&lt;QUOTED-STRING&gt;</div><div class="line">    notify_backup &lt;STRING&gt;|&lt;QUOTED-STRING&gt;</div><div class="line">    notify_fault &lt;STRING&gt;|&lt;QUOTED-STRING&gt;</div><div class="line">    notify &lt;STRING&gt;|&lt;QUOTED-STRING&gt;</div><div class="line">    smtp_alert</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<ul>
<li>notify_master/backup/fault 分别表示切换为主/备/出错时所执行的脚本。</li>
<li>notify 表示任何一状态切换时都会调用该脚本，并且该脚本在以上三个脚本执行完成之后进行调用，keepalived会自动传递三个参数（$1 = “GROUP”|”INSTANCE”，$2 = name of group or instance，$3 = target state of transition(MASTER/BACKUP/FAULT)）。</li>
<li>smtp_alert 表示是否开启邮件通知（用全局区域的邮件设置来发通知）。</li>
<li>state 可以是MASTER或BACKUP，不过当其他节点keepalived启动时会将priority比较大的节点选举为MASTER，因此该项其实没有实质用途。</li>
<li>interface 节点固有IP（非VIP）的网卡，用来发VRRP包。</li>
<li>use_vmac 是否使用VRRP的虚拟MAC地址。</li>
<li>dont_track_primary 忽略VRRP网卡错误。（默认未设置）</li>
<li>track_interface 监控以下网卡，如果任何一个不通就会切换到FALT状态。（可选项）</li>
<li>mcast_src_ip 修改vrrp组播包的源地址，默认源地址为master的IP。（由于是组播，因此即使修改了源地址，该master还是能收到回应的）</li>
<li>lvs_sync_daemon_interface 绑定lvs syncd的网卡。</li>
<li>garp_master_delay 当切为主状态后多久更新ARP缓存，默认5秒。</li>
<li>virtual_router_id 取值在0-255之间，用来区分多个instance的VRRP组播。</li>
</ul>
<p>注意： 同一网段中virtual_router_id的值不能重复，否则会出错，相关错误信息如下。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">Keepalived_vrrp[27120]: ip address associated with VRID not present in received packet :</div><div class="line">one or more VIP associated with VRID mismatch actual MASTER advert</div><div class="line">bogus VRRP packet received on eth1 !!!</div><div class="line">receive an invalid ip number count associated with VRID!</div><div class="line">VRRP_Instance(xxx) ignoring received advertisment...</div></pre></td></tr></table></figure></p>
<p>可以用这条命令来查看该网络中所存在的vrid：<code>tcpdump -nn -i any net 224.0.0.0/8</code></p>
<ul>
<li>priority 用来选举master的，要成为master，那么这个选项的值最好<a href="http://tools.ietf.org/html/rfc5798#section-8.3.2" target="_blank" rel="external">高于其他机器50个点</a>，该项<a href="http://tools.ietf.org/html/rfc5798#section-5.2.4" target="_blank" rel="external">取值范围</a>是1-255（在此范围之外会被识别成默认值100）。</li>
<li>advert_int 发VRRP包的时间间隔，即多久进行一次master选举（可以认为是健康查检时间间隔）。</li>
<li>authentication 认证区域，认证类型有PASS和HA（IPSEC），推荐使用PASS（密码只识别前8位）。</li>
<li>virtual_ipaddress vip，不解释了。</li>
<li>virtual_routes 虚拟路由，当IP漂过来之后需要添加的路由信息。</li>
<li>virtual_ipaddress_excluded 发送的VRRP包里不包含的IP地址，为减少回应VRRP包的个数。在网卡上绑定的IP地址比较多的时候用。</li>
<li>nopreempt 允许一个priority比较低的节点作为master，即使有priority更高的节点启动。</li>
</ul>
<p>首先nopreemt必须在state为BACKUP的节点上才生效（因为是BACKUP节点决定是否来成为MASTER的），其次要实现类似于关闭auto failback的功能需要将所有节点的state都设置为BACKUP，或者将master节点的priority设置的比BACKUP低。我个人推荐使用将所有节点的state都设置成BACKUP并且都加上nopreempt选项，这样就完成了关于autofailback功能，当想手动将某节点切换为MASTER时只需去掉该节点的nopreempt选项并且将priority改的比其他节点大，然后重新加载配置文件即可（等MASTER切过来之后再将配置文件改回去再reload一下）。</p>
<p>当使用track_script时可以不用加nopreempt，只需要加上preempt_delay 5，这里的间隔时间要大于vrrp_script中定义的时长。</p>
<ul>
<li>preempt_delay master启动多久之后进行接管资源（VIP/Route信息等），并提是没有nopreempt选项。</li>
</ul>
<h3 id="virtual-server-group和virtual-server区域"><a href="#virtual-server-group和virtual-server区域" class="headerlink" title="virtual_server_group和virtual_server区域"></a>virtual_server_group和virtual_server区域</h3><blockquote>
<p>virtual_server_group一般在超大型的LVS中用到，一般LVS用不过这东西，因此不多说。</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line">virtual_server IP Port &#123;</div><div class="line">    delay_loop &lt;INT&gt;</div><div class="line">    lb_algo rr|wrr|lc|wlc|lblc|sh|dh</div><div class="line">    lb_kind NAT|DR|TUN</div><div class="line">    persistence_timeout &lt;INT&gt;</div><div class="line">    persistence_granularity &lt;NETMASK&gt;</div><div class="line">    protocol TCP</div><div class="line">    ha_suspend</div><div class="line">    virtualhost &lt;STRING&gt;</div><div class="line">    alpha</div><div class="line">    omega</div><div class="line">    quorum &lt;INT&gt;</div><div class="line">    hysteresis &lt;INT&gt;</div><div class="line">    quorum_up &lt;STRING&gt;|&lt;QUOTED-STRING&gt;</div><div class="line">    quorum_down &lt;STRING&gt;|&lt;QUOTED-STRING&gt;</div><div class="line">    sorry_server &lt;IPADDR&gt; &lt;PORT&gt;</div><div class="line">    real_server &lt;IPADDR&gt; &lt;PORT&gt; &#123;</div><div class="line">        weight &lt;INT&gt;</div><div class="line">        inhibit_on_failure</div><div class="line">        notify_up &lt;STRING&gt;|&lt;QUOTED-STRING&gt;</div><div class="line">        notify_down &lt;STRING&gt;|&lt;QUOTED-STRING&gt;</div><div class="line">        # HTTP_GET|SSL_GET|TCP_CHECK|SMTP_CHECK|MISC_CHECK</div><div class="line">        HTTP_GET|SSL_GET &#123;</div><div class="line">            url &#123;</div><div class="line">                path &lt;STRING&gt;</div><div class="line">                # Digest computed with genhash</div><div class="line">                digest &lt;STRING&gt;</div><div class="line">                status_code &lt;INT&gt;</div><div class="line">            &#125;</div><div class="line">            connect_port &lt;PORT&gt;</div><div class="line">            connect_timeout &lt;INT&gt;</div><div class="line">            nb_get_retry &lt;INT&gt;</div><div class="line">            delay_before_retry &lt;INT&gt;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>delay_loop 延迟轮询时间（单位秒）。</li>
<li>lb_algo 后端调试算法（load balancing algorithm）。</li>
<li>lb_kind LVS调度类型NAT/DR/TUN。</li>
<li>virtualhost 用来给HTTP_GET和SSL_GET配置请求header的。</li>
<li>sorry_server 当所有real server宕掉时，sorry server顶替。</li>
<li>real_server 真正提供服务的服务器。</li>
<li>weight 权重。</li>
<li>notify_up/down 当real server宕掉或启动时执行的脚本。</li>
</ul>
<p>健康检查的方式，N多种方式。</p>
<ul>
<li>path 请求real serserver上的路径。</li>
<li>digest/status_code 分别表示用genhash算出的结果和http状态码。</li>
<li>connect_port 健康检查，如果端口通则认为服务器正常。</li>
<li>connect_timeout,nb_get_retry,delay_before_retry分别表示超时时长、重试次数，下次重试的时间延迟。</li>
</ul>
<p>其他选项暂时不作说明。</p>
<h2 id="keepalived主从切换"><a href="#keepalived主从切换" class="headerlink" title="keepalived主从切换"></a>keepalived主从切换</h2><p>主从切换比较让人蛋疼，需要将backup配置文件的priority选项的值调整的比master高50个点，然后reload配置文件就可以切换了。当时你也可以将master的keepalived停止，这样也可以进行主从切换。</p>
<h2 id="keepalived仅做HA时的配置"><a href="#keepalived仅做HA时的配置" class="headerlink" title="keepalived仅做HA时的配置"></a>keepalived仅做HA时的配置</h2><p>请看该文档同级目录下的配置文件示例。</p>
<p>说明：</p>
<ul>
<li>10.210.214.113 为keepalived的备机，其配置文件为113.keepalived.conf</li>
<li>10.210.214.163 为keepalived的主机，其配置文件为163.keepalived.conf</li>
<li>10.210.214.253 为Virtual IP，即提供服务的内网IP地址，在网卡eth0上面</li>
<li>192.168.1.11 为模拟的提供服务的公网IP地址，在网卡eth1上面</li>
</ul>
<p>用tcpdump命令来捕获的结果如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">17:20:07.919419 IP 10.210.214.163 &gt; 224.0.0.18: VRRPv2, Advertisement, vrid 1, prio 200, authtype simple, intvl 1s, length 20</div></pre></td></tr></table></figure></p>
<h2 id="LVS-Keepalived配置"><a href="#LVS-Keepalived配置" class="headerlink" title="LVS+Keepalived配置"></a>LVS+Keepalived配置</h2><blockquote>
<p>注:Keepalived与LVS结合使用时一般还会用到一个工具ipvsadm，用来查看相关VS相关状态，关于ipvsadm的用法可以参考man手册。</p>
</blockquote>
<p>10.67.15.95为keepalived master，VIP为10.67.15.94，配置文件为95-lvs-keepalived.conf</p>
<p>10.67.15.96为keepalived master，VIP为10.67.15.94，配置文件为96-lvs-keepalived.conf</p>
<p>10.67.15.195为real server  </p>
<p><strong>注意：</strong></p>
<p>当使用LVS+DR+Keepalived配置时，需要在real server上添加一条iptables规则（其中dport根据情况添加或缺省）：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"># iptables -t nat -A PREROUTING -p tcp -d 10.67.15.94 --dport 80 -j REDIRECT</div></pre></td></tr></table></figure></p>
<p>当使用LVS+NAT+Keepalived配置时，需要将real server的默认路由配置成Director的VIP10.67.15.94，必须确保client的请求是通过10.67.15.94到达real server的。</p>
<h2 id="安装keepalived"><a href="#安装keepalived" class="headerlink" title="安装keepalived"></a>安装keepalived</h2><p>从keepalived<a href="http://www.keepalived.org/download.html" target="_blank" rel="external">官网</a>下载合适的版本，解压并执行如下命令完成安装。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"># cd keepalived-xxx</div><div class="line"># ./configure --bindir=/usr/bin --sbindir=/usr/sbin --sysconfdir=/etc --mandir=/usr/share</div><div class="line"># make &amp;&amp; make install</div></pre></td></tr></table></figure></p>
<p>你也可以打成<a href="https://github.com/chenzhiwei/linux/tree/master/rpm-package-management" target="_blank" rel="external">RPM</a>包，然后安装。</p>
<h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><p>我们用到的HA场景如下： 两台主机host113和host163，内网IP在eth1网卡上，分别是10.210.214.113和10.210.214.163，VIP为公网IP在eth0上，IP地址是202.102.152.253，网关为202.102.152.1。当VIP在host113上提供服务时，host113上的默认路由为202.102.152.1，提供服务的端口为202.102.152.253:443。host113发生故障需要将VIP及服务切回到host163上的时候，需要以下几步，第一将VIP接管过来，第二添加默认路由202.102.152.1，第三启动在端口202.102.152.253:443上的服务。</p>
<p>如此一来，keepalived需要另外的脚本来完成添加默认路由和启动服务工作，这点和heartbeat中的resources是相同的。目前我进行了测试，发现keepalived速度要比heartbeat快，也就是说效率比heartbeat高。并且，最重要的一点，keepalived支持多个backup。</p>
<p>不要问我为何有以上需求。要为两个不同的域名提供https服务，由于SSL证书问题，必须有两个公网IP地址分别绑定443端口。</p>
<p>当然，通过<a href="http://en.wikipedia.org/wiki/Server_Name_Indication" target="_blank" rel="external">SNI</a>也可以实现一个公网IP绑定443端口来为多个域名提供https服务，但是这需要浏览器支持（M$的IE浏览器不支持）。（<a href="http://nginx.org/en/docs/http/configuring_https_servers.html#sni" target="_blank" rel="external">nginx</a>/<a href="http://wiki.apache.org/httpd/NameBasedSSLVHostsWithSNI" target="_blank" rel="external">apache</a>）</p>
<h2 id="吐槽"><a href="#吐槽" class="headerlink" title="吐槽"></a>吐槽</h2><p>keepalived的主从切换比较让人蛋疼，需要修改配置文件或停止一方的运行。但是由于keepalived是通过vrrp协议来实现failover（故障转移）的，因此也决定了手动主从切换的不便。</p>
<p>keepalived的文档也很旧了，一直都找不到合适的文档，之前我就一直忽略了vrrp_script这个区域，导致很多事情想不通。</p>
<p>另外，我发现我越来越喜欢keepalived了。。。</p>
<p><a href="http://outofmemory.cn/wiki/keepalived-configuration" target="_blank" rel="external">转自：http://outofmemory.cn/wiki/keepalived-configuration</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;keepalived是什么&quot;&gt;&lt;a href=&quot;#keepalived是什么&quot; class=&quot;headerlink&quot; title=&quot;keepalived是什么&quot;&gt;&lt;/a&gt;keepalived是什么&lt;/h2&gt;&lt;p&gt;keepalived是集群管理中保证集群高可用的一个服务软件，其功能类似于&lt;a href=&quot;https://github.com/chenzhiwei/linux/tree/master/heartbeat&quot;&gt;heartbeat&lt;/a&gt;，用来防止单点故障。&lt;/p&gt;
&lt;h2 id=&quot;keepalived工作原理&quot;&gt;&lt;a href=&quot;#keepalived工作原理&quot; class=&quot;headerlink&quot; title=&quot;keepalived工作原理&quot;&gt;&lt;/a&gt;keepalived工作原理&lt;/h2&gt;&lt;p&gt;keepalived是以VRRP协议为实现基础的，VRRP全称Virtual Router Redundancy Protocol，即&lt;a href=&quot;http://en.wikipedia.org/wiki/VRRP&quot;&gt;虚拟路由冗余协议&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;虚拟路由冗余协议，可以认为是实现路由器高可用的协议，即将N台提供相同功能的路由器组成一个路由器组，这个组里面有一个master和多个backup，master上面有一个对外提供服务的vip（该路由器所在局域网内其他机器的默认路由为该vip），master会发组播，当backup收不到vrrp包时就认为master宕掉了，这时就需要根据&lt;a href=&quot;http://tools.ietf.org/html/rfc5798#section-5.1&quot;&gt;VRRP的优先级&lt;/a&gt;来选举一个backup当master。这样的话就可以保证路由器的高可用了。&lt;/p&gt;
&lt;p&gt;keepalived主要有三个模块，分别是core、check和vrrp。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;core模块为keepalived的核心，负责主进程的启动、维护以及全局配置文件的加载和解析。&lt;/li&gt;
&lt;li&gt;check负责健康检查，包括常见的各种检查方式。&lt;/li&gt;
&lt;li&gt;vrrp模块是来实现VRRP协议的。&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="Linux" scheme="https://weizhimiao.github.io/categories/Linux/"/>
    
    
      <category term="负载均衡" scheme="https://weizhimiao.github.io/tags/%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1/"/>
    
  </entry>
  
  <entry>
    <title>Nginx服务器https配置</title>
    <link href="https://weizhimiao.github.io/2016/10/04/Nginx%E6%9C%8D%E5%8A%A1%E5%99%A8https%E9%85%8D%E7%BD%AE/"/>
    <id>https://weizhimiao.github.io/2016/10/04/Nginx服务器https配置/</id>
    <published>2016-10-04T13:30:00.000Z</published>
    <updated>2016-10-04T14:38:23.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://n.sinaimg.cn/games/3ece443e/20161004/https.png" alt="Nginx服务器https配置"></p>
<a id="more"></a>
<h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><p>Linux：Linux version 3.10.0-123.9.3.el7.x86_64<br>Nginx：nginx/1.6.3<br>openssl：1.0.1e</p>
<h2 id="申请证书"><a href="#申请证书" class="headerlink" title="申请证书"></a>申请证书</h2><p>目前网上有不少机构提供个人免费 ssl 证书，有效期几个月到几年不等。以 <a href="https://www.startssl.com" target="_blank" rel="external">StartSSL :https://www.startssl.com</a> 为例, 申请成功后有效期 3 年，到期后可免费续租。<br>具体申请过程也很简单。<br>注册登录以后选择 Certificates Wizard &gt;&gt;     DV SSL Certificate 申请一个免费的 ssl 证书。</p>
<p>通过邮件验证域名之后，然后在自己服务器中生成 SSL 证书的 csr ，<strong>记住生成输入的秘密</strong>，之后要用到：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">openssl req -newkey rsa:2048 -keyout weizhimiao.cn.key -out weizhimiao.cn.csr</div></pre></td></tr></table></figure></p>
<p>将生成的证书，放到指定的存放证书的目录，如 <code>/data/secret/</code> 。查看证书 <code>weizhimiao.csr</code> 内容，将内容复制到页面中的 Certificate Signing Request (CSR)部分，提交页面。</p>
<p>下载生成好的证书,选择对应的web服务器（Nginx，1_weizhimiao.cn_bundle.crt），这样私钥和公钥我们就都有了。</p>
<ul>
<li>1_weizhimiao.cn_bundle.crt（公钥）</li>
<li>weizhimiao.cn.key（私钥）</li>
</ul>
<h2 id="nginx配置（为指定域名增加https）"><a href="#nginx配置（为指定域名增加https）" class="headerlink" title="nginx配置（为指定域名增加https）"></a>nginx配置（为指定域名增加https）</h2><p>nginx.conf当前配置<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">...</div><div class="line">http &#123;</div><div class="line">    ...</div><div class="line">    include /etc/nginx/conf.d/*.conf;</div><div class="line"></div><div class="line">    server &#123;</div><div class="line">        ...</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>./conf.d/weizhimiao.cn.conf中加入<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">server&#123;</div><div class="line">    listen 443 ssl;</div><div class="line">    server_name weizhimiao.cn;</div><div class="line"></div><div class="line">    ssl_certificate /data/secret/1_weizhimiao.cn_bundle.crt;</div><div class="line">    ssl_certificate_key /data/secret/weizhimiao.cn.key;</div><div class="line">    ssl_prefer_server_ciphers on;</div><div class="line">    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;</div><div class="line"></div><div class="line">    ssl_ciphers &apos;kEECDH+ECDSA+AES128 kEECDH+ECDSA+AES256 kEECDH+AES128 kEECDH+AES256 kEDH+AES128 kEDH+AES256 DES-CBC3-SHA +SHA !aNULL !eNULL !LOW !MD5 !EXP !DSS !PSK !SRP !kECDH !CAMELLIA !RC4 !SEED&apos;;</div><div class="line"></div><div class="line">    add_header Strict-Transport-Security &apos;max-age=31536000; preload&apos;;</div><div class="line">    add_header X-Frame-Options DENY;</div><div class="line">    ssl_session_cache   shared:SSL:10m;</div><div class="line">    ssl_session_timeout 10m;</div><div class="line">    keepalive_timeout 70;</div><div class="line">    ssl_dhparam /data/secret/dhparam.pem;</div><div class="line"></div><div class="line">    add_header X-Content-Type-Options nosniff;</div><div class="line"></div><div class="line">    add_header X-Xss-Protection 1;</div><div class="line"></div><div class="line">    root /data/www/weizhimiao.cn;</div><div class="line">    index index.html;</div><div class="line"></div><div class="line">    location / &#123;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><strong>注：</strong><br>配置中用到一个 <code>/data/secret/dhparam.pem</code> 文件，该文件是一个PEM格式的密钥文件，用于TLS会话中。用来加强ssl的安全性。生成该文件方法，<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">cd /data/secret/</div><div class="line">openssl dhparam 2048 -out dhparam.pem</div></pre></td></tr></table></figure></p>
<p>将原来80端口的访问，重定向。./conf.d/weizhimiao.cn.conf中加入<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">server&#123;</div><div class="line">    listen 80;</div><div class="line">    server_name  weizhimiao.cn;</div><div class="line">    return 301 https://weizhimiao.cn$request_uri;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>检测配置文件是否有语法错误，需要输入之前生成公钥时输入的密码。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">nginx -t</div><div class="line">Enter PEM pass phrase:</div><div class="line">nginx: the configuration file /etc/nginx/nginx.conf syntax is ok</div><div class="line">nginx: configuration file /etc/nginx/nginx.conf test is successful</div></pre></td></tr></table></figure></p>
<p>重启Nginx(切记，reload不起作用)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">nginx -s stop</div><div class="line">Enter PEM pass phrase:</div><div class="line">nginx</div><div class="line">Enter PEM pass phrase:</div></pre></td></tr></table></figure></p>
<p>浏览器访问 weizhimiao.cn ,是否生效。</p>
<p>另，Nginx配置了安全证书之后，nginx每次的reload、stop等操作都需要输入密码。<br>可以通过生成一个解密的key文件，替代原来key文件。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">cd /data/secret/</div><div class="line">openssl rsa -in weizhimiao.cn.key -out weizhimiao.cn.key.unsecure</div></pre></td></tr></table></figure></p>
<p>替换 <code>weizhimiao.cn.conf</code> 中的 <code>weizhimiao.cn.key</code> 文件.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">server &#123;</div><div class="line">  ...</div><div class="line">  ssl_certificate /data/secret/1_weizhimiao.cn_bundle.crt;</div><div class="line">  ssl_certificate_key /data/secret/weizhimiao.cn.key.unsecure;</div><div class="line">  ...</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>之后每次在reload时，就不需要在输入密码了。</p>
<p>最后，用 <a href="https://www.ssllabs.com/ssltest/index.html" target="_blank" rel="external">SSLLABS</a> 来进行一下测试。<br><img src="http://n.sinaimg.cn/games/3ece443e/20161004/ssllabs.png" alt="ssllabs"><br>结果<br><img src="http://n.sinaimg.cn/games/3ece443e/20161004/ssllabsres.png" alt="ssllabs"></p>
<p>over~</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://n.sinaimg.cn/games/3ece443e/20161004/https.png&quot; alt=&quot;Nginx服务器https配置&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Nginx" scheme="https://weizhimiao.github.io/categories/Nginx/"/>
    
    
      <category term="https" scheme="https://weizhimiao.github.io/tags/https/"/>
    
  </entry>
  
  <entry>
    <title>Nginx虚拟主机配置</title>
    <link href="https://weizhimiao.github.io/2016/10/04/Nginx%E8%99%9A%E6%8B%9F%E4%B8%BB%E6%9C%BA%E8%AE%BE%E7%BD%AE/"/>
    <id>https://weizhimiao.github.io/2016/10/04/Nginx虚拟主机设置/</id>
    <published>2016-10-04T12:30:00.000Z</published>
    <updated>2016-10-04T14:46:59.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://n.sinaimg.cn/games/3ece443e/20161004/VirtualHost.png" alt="virtual Host"></p>
<a id="more"></a>
<h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><p>Linux：Linux version 3.10.0-123.9.3.el7.x86_64</p>
<p>Nginx: nginx/1.6.3</p>
<p>配置文件目录结构<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">$ tree</div><div class="line">.</div><div class="line">├── conf.d</div><div class="line">├── default.d</div><div class="line">├── fastcgi.conf</div><div class="line">├── fastcgi.conf.default</div><div class="line">├── fastcgi_params</div><div class="line">├── fastcgi_params.default</div><div class="line">├── koi-utf</div><div class="line">├── koi-win</div><div class="line">├── mime.types</div><div class="line">├── mime.types.default</div><div class="line">├── nginx.conf</div><div class="line">├── nginx.conf.default</div><div class="line">├── scgi_params</div><div class="line">├── scgi_params.default</div><div class="line">├── uwsgi_params</div><div class="line">├── uwsgi_params.default</div><div class="line">└── win-utf</div></pre></td></tr></table></figure></p>
<h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>将 site1.cn 和site2.cn基于域名进行配置</p>
<h3 id="准备-1"><a href="#准备-1" class="headerlink" title="准备"></a>准备</h3><p>分别创建两个域名的配置文件和web根目录。</p>
<p>./conf.d/下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">cd conf.d/</div><div class="line">touch site1.cn.conf</div><div class="line">touch site2.cn.conf</div></pre></td></tr></table></figure></p>
<p>分别创建web根目录<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">mkdri -p /data/www</div><div class="line">cd  /data/www</div><div class="line">mkdir site1.cn</div><div class="line">mkdir site2.cn</div></pre></td></tr></table></figure></p>
<h3 id="修改主配置文件nginx-conf"><a href="#修改主配置文件nginx-conf" class="headerlink" title="修改主配置文件nginx.conf"></a>修改主配置文件nginx.conf</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div></pre></td><td class="code"><pre><div class="line">user nginx;</div><div class="line">worker_processes auto;</div><div class="line">error_log /var/log/nginx/error.log;</div><div class="line">pid /run/nginx.pid;</div><div class="line"></div><div class="line">events &#123;</div><div class="line">    worker_connections 1024;</div><div class="line">&#125;</div><div class="line"></div><div class="line">http &#123;</div><div class="line">    log_format  main  &apos;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &apos;</div><div class="line">                      &apos;$status $body_bytes_sent &quot;$http_referer&quot; &apos;</div><div class="line">                      &apos;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&apos;;</div><div class="line"></div><div class="line">    access_log  /var/log/nginx/access.log  main;</div><div class="line"></div><div class="line">    sendfile            on;</div><div class="line">    tcp_nopush          on;</div><div class="line">    tcp_nodelay         on;</div><div class="line">    keepalive_timeout   65;</div><div class="line">    types_hash_max_size 2048;</div><div class="line"></div><div class="line">    include             /etc/nginx/mime.types;</div><div class="line">    default_type        application/octet-stream;</div><div class="line"></div><div class="line">    # Load modular configuration files from the /etc/nginx/conf.d directory.</div><div class="line">    # See http://nginx.org/en/docs/ngx_core_module.html#include</div><div class="line">    # for more information.</div><div class="line">    include /etc/nginx/conf.d/*.conf;</div><div class="line"></div><div class="line">    server &#123;</div><div class="line">        listen       80 default_server;</div><div class="line">        listen       [::]:80 default_server;</div><div class="line">        server_name  _;</div><div class="line">        root         /usr/share/nginx/html;</div><div class="line"></div><div class="line">        # Load configuration files for the default server block.</div><div class="line">        include /etc/nginx/default.d/*.conf;</div><div class="line"></div><div class="line">        location / &#123;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        error_page 404 /404.html;</div><div class="line">            location = /40x.html &#123;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        error_page 500 502 503 504 /50x.html;</div><div class="line">            location = /50x.html &#123;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>确保在http的context中的server部分前面要有<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">include /etc/nginx/conf.d/*.conf;</div></pre></td></tr></table></figure></p>
<p>通常情况下主配置文件中的server部分，将会是默认的server（通过添加default_server来声明），当一个请求过来，目录/etc/nginx/conf.d/中的所有server部分都匹配不了，那么这个请求将会被猪配置文件中的server来进行处理.</p>
<h3 id="site1-cn"><a href="#site1-cn" class="headerlink" title="site1.cn"></a>site1.cn</h3><p>修改配置文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">vi ./conf.d/site1.cn.conf</div></pre></td></tr></table></figure></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line">server &#123;</div><div class="line">	listen		80;</div><div class="line">	server_name	site1.cn;</div><div class="line"></div><div class="line">	error_page  404  /404.html;</div><div class="line"></div><div class="line">	error_page   500 503 504  /50x.html;</div><div class="line">	error_log	/var/log/nginx/debug.log debug;</div><div class="line">	index	index.html index.htm;</div><div class="line">	root /data/www/site1.cn;</div><div class="line"></div><div class="line">	location / &#123;</div><div class="line">		index index.html;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">  location = /favicon.ico &#123;</div><div class="line">  	try_files $uri $uri/favicon.ico /data/www/site1.cn/favicon.ico =404;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  # Deny all attempts to access hidden files such as .htaccess, .htpasswd, .DS_Store(Mac).</div><div class="line">  location ~ /\. &#123;</div><div class="line">      deny all;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">	location = /50x.html &#123;</div><div class="line">		root   /usr/share/nginx/html;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	location = /404.html &#123;</div><div class="line">		root   /usr/share/nginx/html;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>添加测试页面<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">cd /data/www/site1.cn</div><div class="line">echo &quot;site1.cn index.html&quot; &gt;&gt; index.html</div></pre></td></tr></table></figure></p>
<h3 id="site2-cn"><a href="#site2-cn" class="headerlink" title="site2.cn"></a>site2.cn</h3><p>修改配置文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">vi ./conf.d/site2.cn.conf</div></pre></td></tr></table></figure></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line">server &#123;</div><div class="line">	listen		80;</div><div class="line">	server_name	site2.cn;</div><div class="line"></div><div class="line">	error_page  404  /404.html;</div><div class="line"></div><div class="line">	error_page   500 503 504  /50x.html;</div><div class="line">	error_log	/var/log/nginx/debug.log debug;</div><div class="line">	index	index.html index.htm;</div><div class="line">	root /data/www/site2.cn;</div><div class="line"></div><div class="line">	location / &#123;</div><div class="line">		index index.html;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">  location = /favicon.ico &#123;</div><div class="line">  	try_files $uri $uri/favicon.ico /data/www/site2.cn/favicon.ico =404;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  # Deny all attempts to access hidden files such as .htaccess, .htpasswd, .DS_Store(Mac).</div><div class="line">  location ~ /\. &#123;</div><div class="line">      deny all;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">	location = /50x.html &#123;</div><div class="line">		root   /usr/share/nginx/html;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	location = /404.html &#123;</div><div class="line">		root   /usr/share/nginx/html;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>添加测试页面<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">cd /data/www/site2.cn</div><div class="line">echo &quot;site2.cn index.html&quot; &gt;&gt; index.html</div></pre></td></tr></table></figure></p>
<h3 id="重启Nginx"><a href="#重启Nginx" class="headerlink" title="重启Nginx"></a>重启Nginx</h3><p>重启之前，需要先进行配置文件语法检测<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">nginx -t</div><div class="line">nginx: the configuration file /etc/nginx/nginx.conf syntax is ok</div><div class="line">nginx: configuration file /etc/nginx/nginx.conf test is successful</div></pre></td></tr></table></figure></p>
<p>确定语法无问题之后，重启Nginx<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">nginx -s reload</div></pre></td></tr></table></figure></p>
<h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p>vi /etc/hosts<br>添加<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">site1.cn 127.0.0.1</div><div class="line">site2.cn 127.0.0.1</div></pre></td></tr></table></figure></p>
<p>分别访问 site1.cn和site2.cn ,查看是否输出对应内容<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">wget  site1.cn</div><div class="line">cat index.html</div><div class="line">#site1.cn index.html</div><div class="line"></div><div class="line">wget site2.cn</div><div class="line">cat index.html.2</div><div class="line">#site2.cn index.html</div></pre></td></tr></table></figure></p>
<p>关于nginx学习的一个网站:<a href="http://nglua.com" target="_blank" rel="external">http://nglua.com</a></p>
<p>over~</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://n.sinaimg.cn/games/3ece443e/20161004/VirtualHost.png&quot; alt=&quot;virtual Host&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Nginx" scheme="https://weizhimiao.github.io/categories/Nginx/"/>
    
    
      <category term="虚拟主机" scheme="https://weizhimiao.github.io/tags/%E8%99%9A%E6%8B%9F%E4%B8%BB%E6%9C%BA/"/>
    
  </entry>
  
  <entry>
    <title>Nginx配置整理</title>
    <link href="https://weizhimiao.github.io/2016/10/03/Nginx%E9%85%8D%E7%BD%AE%E6%95%B4%E7%90%86/"/>
    <id>https://weizhimiao.github.io/2016/10/03/Nginx配置整理/</id>
    <published>2016-10-03T14:30:00.000Z</published>
    <updated>2016-10-04T10:36:46.000Z</updated>
    
    <content type="html"><![CDATA[<p>Nginx配置主要分成四部分：main、server、upstream 和 location，每部分包含若干个指令。<br>main(全局设置)</p>
<blockquote>
<p>该部分设置的指令将影响其它所有部分的设置；</p>
</blockquote>
<p>server(主机设置)</p>
<blockquote>
<p>该部分的指令主要用于指定虚拟主机域名、IP和端口；</p>
</blockquote>
<p>upstream(上游服务器设置)</p>
<blockquote>
<p>该部分的指令用于设置一系列的后端服务器，设置反向代理及后端服务器的负载均衡；</p>
</blockquote>
<p>location(URL匹配特定位置后的设置)</p>
<blockquote>
<p>该部分用于匹配网页位置（比如，根目录“/”,“/images”,等等）。</p>
</blockquote>
<p>Nginx本身是模块化设计。全局的配置区段负责全局的各个方面，对于不同的协议可以单独划分成一个部分。我们可以通过在这些单独的协议配置中（http或mail）指定server来定义每一个请求应该被如何处理，以便请求被路由到特定的IP地址或端口上。在http区段中，使用location来匹配URI请求，这些location又可以嵌套使用或者按照一定顺序使用，以确保请求被路由到正确的文件系统区域或者其他地方。</p>
<p><strong>他们之间的关系式：</strong> server继承main，location继承server；upstream既不会继承指令也不会被继承。它有自己的特殊指令，不需要在其他地方的应用。</p>
<a id="more"></a>
<h2 id="基本配置格式"><a href="#基本配置格式" class="headerlink" title="基本配置格式"></a>基本配置格式</h2><p>Nginx的配置文件由若干部分组成。但每一部分都是通过下列的方法定义。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;section&gt; &#123;</div><div class="line">  &lt;directive&gt;&lt;parameters&gt;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><strong>Tips:</strong></p>
<ul>
<li>每一个指令行都由分号结束（;），这标志着一行结束。</li>
<li>大括号（{}）实际上表示一个新上下文（context），常称为『节，部分（section）』</li>
</ul>
<h2 id="Nginx的全局配置"><a href="#Nginx的全局配置" class="headerlink" title="Nginx的全局配置"></a>Nginx的全局配置</h2><p>全局配置顾名思义就是对整个server都有效的参数。全局配置部分可能包含配置指令（如，user、worker_processes），也包括『节、部分（section）（如，events）』。这部分配置一般放在 nginx.conf 文件的顶部。</p>
<p>示例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">user nginx;</div><div class="line">worker_processes auto;</div><div class="line">error_log /var/log/nginx/error.log;</div><div class="line">pid /run/nginx.pid;</div><div class="line"></div><div class="line">events &#123;</div><div class="line">    use epoll   #使用网络IO模型，epoll模型比select模型效率高很多</div><div class="line">    worker_connections 1024;    #每个worker能够处理的最大连接数，最大值取决于ulimit -n的值</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>主要配置指令及含义</p>
<table>
<thead>
<tr>
<th>配置指令</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>user</td>
<td>配置worker进程运行的用户和用户组，第一个参数为user，第二个为group（如果忽略了group，那么group与user同名）</td>
</tr>
<tr>
<td>worker_processes</td>
<td>指定worker进程启动的数量。这些进程用于处理客户的连接。通常该值会设置成CPU处理器核心数相同的数量。默认值是”auto”，也是按照这样去设置数量</td>
</tr>
<tr>
<td>error_log</td>
<td>设置错误日志文件位置。如果在其他的区段中没有设置其他的error_log,那么这个日志文件将会记录所有的错误。该指令的第二个参数指定了被记录的错误信息级别（debug[注，debug级别的错误只有在nginx编译的时候配置了 –with-debug选项才可以使用]、info、notice、warn、error、crit、alert、emsg）</td>
</tr>
<tr>
<td>pid</td>
<td>设置记录主进程ID的文件地址。通常设置该值来方便我们对nginx的管理</td>
</tr>
<tr>
<td>use</td>
<td>该指令指示我们使用什么样的连接方式。该指令需要写在 events 区段里面。</td>
</tr>
<tr>
<td>worker_connections</td>
<td>配置一个工作进程能够接受并发连接的最大数。这个连接包括，客户连接和向上游服务器的连接，但也不仅限于此。通常该配置同use一样写在events里面</td>
</tr>
</tbody>
</table>
<h2 id="include指令"><a href="#include指令" class="headerlink" title="include指令"></a>include指令</h2><p>在Nginx配置文件中可以使用include指令将其他位置存放的配置文件加载进来，来方便配置管理和增强配置文件的可读性。</p>
<p><strong>Tips：</strong><br>使用include文件，要确保被包含的文件自身符合nginx配置语法。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">include /etc/nginx/default.d/*.conf;</div></pre></td></tr></table></figure></p>
<p>路径中出现通配符表示可以匹配多个文件。<br>nginx配置文件的语法错误可以通过nginx的 -t 选项来进行测试。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/path/to/nginx -t -c &lt;path-to-nginx.conf&gt;</div></pre></td></tr></table></figure></p>
<p><strong>注：</strong> 该命令只能检查语法错误，具体到某个功能性的测试还需要我们自己有针对性的去测。</p>
<h2 id="Http的server部分"><a href="#Http的server部分" class="headerlink" title="Http的server部分"></a>Http的server部分</h2><p>通常我们提到的server部分，具体指的是Http的server部分。所以，其在Http配置的context是可用的。该部分用于处理http连接，因此该模块下提供了相当数量的指令。</p>
<h3 id="客户端指令"><a href="#客户端指令" class="headerlink" title="客户端指令"></a>客户端指令</h3><blockquote>
<p>用于处理客户端连接本身的各个方面，以及不同类型的客户端</p>
</blockquote>
<table>
<thead>
<tr>
<th>指令</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>chunked_transfer_encoding</td>
<td>在发给客户端的响应中允许禁用http/1.1标准的块传输编码</td>
</tr>
<tr>
<td>client_body_buffer_size</td>
<td>为了阻止临时文件写到磁盘，可以通过该指令为客户端请求体设置缓存大小，默认的缓存大小为两个内存页面</td>
</tr>
<tr>
<td>client_body_in_file_only</td>
<td>用于调试或者是进一步处理客户端请求体。该指令能够将客户端请求体强制写入到磁盘文件</td>
</tr>
<tr>
<td>client_body_in_single_buffer</td>
<td>为了减少拷贝的操作，使用该指令强制Nginx将整个客户端请求体保存到单个缓存中</td>
</tr>
<tr>
<td>client_body_temp_path</td>
<td>定义一个命令路径用于保存客户端请求体</td>
</tr>
<tr>
<td>clent_body_timeout</td>
<td>指定客户端成功读取的两个操作之间的时间间隔</td>
</tr>
<tr>
<td>client_header_buffer_size</td>
<td>为客户端请求头指定一个缓存大小，当请求头大于1kB时会用到这个设置。</td>
</tr>
<tr>
<td>client_header_timeout</td>
<td>读取整个客户端头的超时时间</td>
</tr>
<tr>
<td>client_max_body_size</td>
<td>定义允许最大的客户端请求头，如果大于该值，那么客户端将会是413（request entity too large）错误</td>
</tr>
<tr>
<td>keepalive_disable</td>
<td>对某些类型的客户端禁用keep-alive请求功能。</td>
</tr>
<tr>
<td>keepalive_requests</td>
<td>定义在一个keep-alive关闭之前可以接收多少个请求</td>
</tr>
<tr>
<td>keepalive_timeout</td>
<td>指定keep-alive连接持续多久。第二个参数用于在响应头中这只”Keep-Alive”头</td>
</tr>
<tr>
<td>large_client_header_buffers</td>
<td>定义最大数量和最大客户端请求头的大小</td>
</tr>
<tr>
<td>msie_padding</td>
<td>为了填充响应的大小至512字节，对于MSIE客户端，大于400的状态码会被添加注释以便满足512字节，通过启用该命令可以阻止这种行为</td>
</tr>
<tr>
<td>msie_refresh</td>
<td>对于MSIE客户端，可启用发送一个refresh头</td>
</tr>
</tbody>
</table>
<h3 id="文件I-O指令"><a href="#文件I-O指令" class="headerlink" title="文件I/O指令"></a>文件I/O指令</h3><blockquote>
<p>用于控制Nginx如何投递静态文件。</p>
</blockquote>
<table>
<thead>
<tr>
<th>指令</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>aio</td>
<td>启用异步文件I/O。FreeBSD系统下，该值可能被用于sendfile预加载数据。Linux下需要directio指令，自动禁用sendfile</td>
</tr>
<tr>
<td>directio</td>
<td>用于启用操作系统特定的标识或者功能提供大于给定参数的文件。Linux下使用aio时需要使用该指令。</td>
</tr>
<tr>
<td>directio_alignment</td>
<td>设置directio算法。默认值是512，通常已经足够，但是在Linux的XFS下推荐增加至4K</td>
</tr>
<tr>
<td>open_file_cache</td>
<td>配置一个缓存用于存放打开的文件描述符、目录查询和文件查询错误</td>
</tr>
<tr>
<td>open_file_cache_errors</td>
<td>按照open_file_cache，启用文件查询错误缓存</td>
</tr>
<tr>
<td>open_file_cache_min_uses</td>
<td>open_file_cache缓存的文件描述符保留在缓存中，使用该指令配置最少使用文件描述符的次数</td>
</tr>
<tr>
<td>open_file_cache_valid</td>
<td>指定对open_file_cache缓存有效性检查的时间间隔</td>
</tr>
<tr>
<td>postpone_output</td>
<td>指定Nginx发送给客户端最小的数值，如果可能的话，没有数据会发送，直到达到此值</td>
</tr>
<tr>
<td>read_ahead</td>
<td>如果可能的话，内核将预读文件到设定的参数大小</td>
</tr>
<tr>
<td>sendfile</td>
<td>使用sendfile（2）直接复制数据从一个到另一个文件描述符</td>
</tr>
<tr>
<td>sendfile_max_chunk</td>
<td>设置在一个sendfile(2)拷贝中最大数据的大小，这是为了阻止worker”贪婪”</td>
</tr>
</tbody>
</table>
<h3 id="Hash指令"><a href="#Hash指令" class="headerlink" title="Hash指令"></a>Hash指令</h3><blockquote>
<p>控制Nginx 分配给某些变量多大的静态文件</p>
</blockquote>
<table>
<thead>
<tr>
<th>指令</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>server_names_hash_bucket_size</td>
<td>指定用于保存server_name哈希表大小的”桶”</td>
</tr>
<tr>
<td>server_names_hash_max_size</td>
<td>指定的server_name哈希表的最大值的大小</td>
</tr>
<tr>
<td>types_hash_bucket_size</td>
<td>指定用于存放哈希表的”桶”的大小</td>
</tr>
<tr>
<td>types_hash_max_size</td>
<td>指定哈希类型表的最大值的大小</td>
</tr>
<tr>
<td>variables_hash_bucket_size</td>
<td>指定用于存放保留变量”桶”的大小</td>
</tr>
<tr>
<td>variables_hash_max_size</td>
<td>指定存放保留变量最大哈希值的大小</td>
</tr>
</tbody>
</table>
<h3 id="Socket指令"><a href="#Socket指令" class="headerlink" title="Socket指令"></a>Socket指令</h3><blockquote>
<p>描述Nginx如何设置创建TCP套接字的变量选项</p>
</blockquote>
<table>
<thead>
<tr>
<th>指令</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>lingering_close</td>
<td>指定如何保持客户端的连接，以便用于更多数据的传输</td>
</tr>
<tr>
<td>lingering_time</td>
<td>在使用lingering_close指令的连接中，使用该指令指定客户端连接为了处理更多的数据需要保持打开连接的时间</td>
</tr>
<tr>
<td>lingering_timeout</td>
<td>结合lingering_close，该指令显示Nginx在关闭客户端连接之前，为获得更多数据会等待多久</td>
</tr>
<tr>
<td>reset_timeout_connection</td>
<td>使用这个指令之后，超时的连接会被立即关闭，释放相关的内存。默认的状态是处于FIN_WAIT1，这种状态将会一直保持连接</td>
</tr>
<tr>
<td>send_lowat</td>
<td>如果非零，Nginx将会在客户端套接字尝试减少发送操作</td>
</tr>
<tr>
<td>send_timeout</td>
<td>在两次成功的客户端接收响应的写操作之间设置一个超时时间</td>
</tr>
<tr>
<td>tcp_nodelay</td>
<td>启用或禁用TCP_NODELAY选项，用于keep-alive连接</td>
</tr>
<tr>
<td>tcp_nopush</td>
<td>仅依赖于sendfile的使用。它能够使Nginx在一个数据包中尝试发送响应头，以及在数据包中发送一个完整的文件</td>
</tr>
</tbody>
</table>
<h3 id="server部分"><a href="#server部分" class="headerlink" title="server部分"></a>server部分</h3><p>示例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">http &#123;</div><div class="line">    ...</div><div class="line">    server &#123;</div><div class="line">        listen       80 default_server;</div><div class="line">        server_name  _;</div><div class="line">        root         /usr/share/nginx/html;</div><div class="line"></div><div class="line">        # Load configuration files for the default server block.</div><div class="line">        include /etc/nginx/default.d/*.conf;</div><div class="line"></div><div class="line">        location / &#123;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        error_page 404 /404.html;</div><div class="line">            location = /40x.html &#123;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        error_page 500 502 503 504 /50x.html;</div><div class="line">            location = /50x.html &#123;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    ...</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>一个虚拟服务器由listen和server_name指令组合定义。</p>
<p><strong>listen</strong></p>
<blockquote>
<p>指令定义一个IP地址/端口组合或者UNIX套接字路径。示例</p>
<ul>
<li>listen address[:port];</li>
<li>listen port;</li>
<li>listen unix:path;</li>
</ul>
</blockquote>
<p>示例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">listen     127.0.0.1:80;</div><div class="line">listen     localhost:80;</div><div class="line">listen     127.0.0.1:8080;</div><div class="line">listen     localhost:8080;</div><div class="line">listen     192.168.3.105:80;</div><div class="line">listen     192.168.3.105:8080;</div><div class="line">listen     80;</div><div class="line">listen     *:80;</div><div class="line">listen     8080;</div><div class="line">listen     *:8080;</div><div class="line">listen     12.34.56.77:80;</div><div class="line">listen     12.34.56.78:80;</div><div class="line">listen     12.34.56.79:80;</div></pre></td></tr></table></figure></p>
<p>另外，listen还有其他的一些可选参数。常用到的有<br>default_server，表示定义这样的一个组合：（address:port）默认的请求被绑定于此<br>ssl，表明该端口仅接受Https的连接</p>
<p><strong>server_name</strong></p>
<blockquote>
<p>用来指定域名。</p>
</blockquote>
<p>示例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">server_name   nginx.cn;</div><div class="line">server_name   nginx.cn www.nginx.cn;</div><div class="line">server_name   *.nginx.cn;</div><div class="line">server_name   .nginx.cn;</div><div class="line">server_name   nginx.*;</div><div class="line">server_name   nginx.cng bucknell.net brackley.org;</div><div class="line">server_name   localhost litchfield bleddington;</div><div class="line">server_name   &quot;&quot;;</div></pre></td></tr></table></figure></p>
<p>除了普通字符串外，Nginx也接受通配符作为Server_name的参数。</p>
<ul>
<li>使用通配符替代部分子域名： *.example.com</li>
<li>代替顶级域部分： www.example.*</li>
<li>匹配子域和域本身： .example.com 能匹配 *.example.com 和example.com</li>
</ul>
<p>另外，在域名前加上（~），正则表达式也可应用于 server_name.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">server_name ~^www\.example\.com$</div><div class="line">server_name ~^www(\d+).example\.(com)$</div></pre></td></tr></table></figure></p>
<p>对于后一种方式是利用捕获，可以在以后的引用中进一步配置（用$1,$2等）指令中使用。</p>
<h2 id="location部分"><a href="#location部分" class="headerlink" title="location部分"></a>location部分</h2><p>location指令可以用在虚拟服务器server部分，并且意味着提供来自客户端的URI或者内部的重定向访问。</p>
<p>location定义：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">location [modifier] uri &#123;...&#125;</div></pre></td></tr></table></figure></p>
<p>或者是命名location<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">location @name &#123;...&#125;</div></pre></td></tr></table></figure></p>
<blockquote>
<p>命名location仅对内部访问重定向，在进入一个location之前他会保留被请求的URI部分。且命名location只能存在与server级别的定义。</p>
</blockquote>
<p>示例<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">location / &#123; &#125;</div><div class="line">location /images/ &#123; &#125;</div><div class="line">location /blog/ &#123; &#125;</div><div class="line">location /planet/ &#123; &#125;</div><div class="line">location /planet/blog/ &#123; &#125;</div><div class="line"></div><div class="line">location ~ IndexPage.php$ &#123; &#125;</div><div class="line">location ~ ^/BlogPlanet(/|/index.php)$ &#123; &#125;</div><div class="line"></div><div class="line">location ~* .(pl|cgi|perl|prl)$ &#123; &#125;</div><div class="line">location ~* .(md|mdwn|txt|mkdn)$ &#123; &#125;</div><div class="line"></div><div class="line">location ^~ /images/IndexPage/ &#123; &#125;</div><div class="line">location ^~ /blog/BlogPlanet/ &#123; &#125;</div><div class="line"></div><div class="line">location = / &#123; &#125;</div></pre></td></tr></table></figure></p>
<p>当一个请求进入时，URI将会被检测匹配一个最佳的location。</p>
<ul>
<li>没有正则表达式的location被认为是最佳的匹配，独立于含有正则表达式的location。</li>
<li>在配置文件中按照查找顺序进行正则匹配，在查到第一个正则表达式匹配时结束查找，将请求交由这个location处理。<br><strong>Tips：</strong><br>这里匹配的解码URI，如在URL中的”%20”,将会匹配location中的””(空格)。</li>
</ul>
<p>location常见的修饰符</p>
<table>
<thead>
<tr>
<th>修饰符</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>=</td>
<td>使用精确匹配并且终止搜索</td>
</tr>
<tr>
<td>~</td>
<td>区分大小写的正则表达式匹配</td>
</tr>
<tr>
<td>~*</td>
<td>不去分大小写的正则表达式匹配</td>
</tr>
<tr>
<td>^~</td>
<td>如果该location是最佳的匹配，那么对于匹配这个location的字符串不在进行正则表达式检测。</td>
</tr>
</tbody>
</table>
<p>仅用于location中的指令</p>
<table>
<thead>
<tr>
<th>指令</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>alias</td>
<td>定义location的其他名字，在文件系统中能够找到。</td>
</tr>
<tr>
<td>internal</td>
<td>指定一个仅用于内部请求的location（其他指定定义的重定向，rewrite请求，error请求等）</td>
</tr>
<tr>
<td>limit_except</td>
<td>限定一个location可以执行的Http操作（如，GET或HEAD）</td>
</tr>
</tbody>
</table>
<p>命名location的使用（一般与try_files配合使用）<br>示例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">location / &#123;</div><div class="line">  try_files $uri $uri/ $mongrel;</div><div class="line">&#125;</div><div class="line"></div><div class="line">location @mongrel &#123;</div><div class="line">  proxy_pass http://appserver;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>上面一段配置表示，如果给定的URI作为一个文件没有被找到，那么处理将会通过代理被传递到appserver</p>
<p>location的嵌套使用：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">root /var/www</div><div class="line"></div><div class="line">location / &#123;</div><div class="line">  location ^~ /css &#123;</div><div class="line">    location ~* /css.*\.css$ &#123;</div><div class="line">      ...</div><div class="line">    &#125;</div><div class="line">    ...</div><div class="line">  &#125;</div><div class="line">  ...</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><strong>实践表明正则表达式location被嵌套在基于字符串的location是最佳的配置方式</strong></p>
<h2 id="完整的配置文件示例"><a href="#完整的配置文件示例" class="headerlink" title="完整的配置文件示例"></a>完整的配置文件示例</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div></pre></td><td class="code"><pre><div class="line"># For more information on configuration, see:</div><div class="line">#   * Official English Documentation: http://nginx.org/en/docs/</div><div class="line">#   * Official Russian Documentation: http://nginx.org/ru/docs/</div><div class="line"></div><div class="line">user nginx;</div><div class="line">worker_processes auto;</div><div class="line">error_log /var/log/nginx/error.log;</div><div class="line">pid /run/nginx.pid;</div><div class="line"></div><div class="line">events &#123;</div><div class="line">    worker_connections 1024;</div><div class="line">&#125;</div><div class="line"></div><div class="line">http &#123;</div><div class="line">    log_format  main  &apos;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &apos;</div><div class="line">                      &apos;$status $body_bytes_sent &quot;$http_referer&quot; &apos;</div><div class="line">                      &apos;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&apos;;</div><div class="line"></div><div class="line">    access_log  /var/log/nginx/access.log  main;</div><div class="line"></div><div class="line">    sendfile            on;</div><div class="line">    tcp_nopush          on;</div><div class="line">    tcp_nodelay         on;</div><div class="line">    keepalive_timeout   65;</div><div class="line">    types_hash_max_size 2048;</div><div class="line"></div><div class="line">    include             /etc/nginx/mime.types;</div><div class="line">    default_type        application/octet-stream;</div><div class="line"></div><div class="line">    # Load modular configuration files from the /etc/nginx/conf.d directory.</div><div class="line">    # See http://nginx.org/en/docs/ngx_core_module.html#include</div><div class="line">    # for more information.</div><div class="line">    include /etc/nginx/conf.d/*.conf;</div><div class="line"></div><div class="line">    server &#123;</div><div class="line">        listen       80 default_server;</div><div class="line">        listen       [::]:80 default_server;</div><div class="line">        server_name  _;</div><div class="line">        root         /usr/share/nginx/html;</div><div class="line"></div><div class="line">        # Load configuration files for the default server block.</div><div class="line">        include /etc/nginx/default.d/*.conf;</div><div class="line"></div><div class="line">        location / &#123;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        error_page 404 /404.html;</div><div class="line">            location = /40x.html &#123;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        error_page 500 502 503 504 /50x.html;</div><div class="line">            location = /50x.html &#123;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Nginx配置主要分成四部分：main、server、upstream 和 location，每部分包含若干个指令。&lt;br&gt;main(全局设置)&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;该部分设置的指令将影响其它所有部分的设置；&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;server(主机设置)&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;该部分的指令主要用于指定虚拟主机域名、IP和端口；&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;upstream(上游服务器设置)&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;该部分的指令用于设置一系列的后端服务器，设置反向代理及后端服务器的负载均衡；&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;location(URL匹配特定位置后的设置)&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;该部分用于匹配网页位置（比如，根目录“/”,“/images”,等等）。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Nginx本身是模块化设计。全局的配置区段负责全局的各个方面，对于不同的协议可以单独划分成一个部分。我们可以通过在这些单独的协议配置中（http或mail）指定server来定义每一个请求应该被如何处理，以便请求被路由到特定的IP地址或端口上。在http区段中，使用location来匹配URI请求，这些location又可以嵌套使用或者按照一定顺序使用，以确保请求被路由到正确的文件系统区域或者其他地方。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;他们之间的关系式：&lt;/strong&gt; server继承main，location继承server；upstream既不会继承指令也不会被继承。它有自己的特殊指令，不需要在其他地方的应用。&lt;/p&gt;
    
    </summary>
    
      <category term="Nginx" scheme="https://weizhimiao.github.io/categories/Nginx/"/>
    
    
  </entry>
  
  <entry>
    <title>Memcached分布式部署算法整理</title>
    <link href="https://weizhimiao.github.io/2016/10/01/Memcached%E5%88%86%E5%B8%83%E5%BC%8F%E9%83%A8%E7%BD%B2%E7%AE%97%E6%B3%95%E6%95%B4%E7%90%86/"/>
    <id>https://weizhimiao.github.io/2016/10/01/Memcached分布式部署算法整理/</id>
    <published>2016-10-01T12:00:00.000Z</published>
    <updated>2016-10-01T10:05:08.000Z</updated>
    
    <content type="html"><![CDATA[<p>虽然memcached是一个高性能的缓存服务器，但是单台服务器对于目前大型的web应用来说还是满足不了需求的。那么就需要布置多台的memcached服务器进行分布式部署。那么一个数据应该存储到哪一台服务器就需要一个分布算法来确定。</p>
<p>常见的分布方案有两种，</p>
<blockquote>
<ul>
<li>普通Hash分布</li>
<li>一致性Hash分布</li>
</ul>
</blockquote>
<a id="more"></a>
<h2 id="普通Hash分布"><a href="#普通Hash分布" class="headerlink" title="普通Hash分布"></a>普通Hash分布</h2><blockquote>
<p>俗称哈希取模法，优点是实现简单，但缺点是缺乏灵活性（比如增加一台服务器，那么之前存储的数据的键值和具体的物理机之间的关系就被完全打乱了，即之前存储的数据就完全失效了）。</p>
</blockquote>
<h3 id="原理："><a href="#原理：" class="headerlink" title="原理："></a>原理：</h3><p>H(key) = hash(key)mod K;</p>
<blockquote>
<p>假设有K台物理机，对于key为键值的记录，H(key)值即为存储数据的物理机编号。通过这种方式，就将全部数据分配到K台物理机上，而查找某条记录时，使用同样的Hash函数就可以找到对应的物理机。</p>
</blockquote>
<h3 id="实现-PHP-："><a href="#实现-PHP-：" class="headerlink" title="实现(PHP)："></a>实现(PHP)：</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line">  $servers = <span class="keyword">array</span>(</div><div class="line">    <span class="keyword">array</span>(<span class="string">"host"</span> =&gt; <span class="string">"192.168.1.1"</span>,<span class="string">"port"</span> =&gt; <span class="string">"11211"</span>),</div><div class="line">    <span class="keyword">array</span>(<span class="string">"host"</span> =&gt; <span class="string">"192.168.1.2"</span>,<span class="string">"port"</span> =&gt; <span class="string">"11211"</span>),</div><div class="line">  );</div><div class="line">  $key = <span class="string">"userDatakey"</span>;</div><div class="line">  $value = <span class="string">"userDataValue"</span>;</div><div class="line">  $mc_ser = <span class="keyword">new</span> $servers[mhash($key)%<span class="number">2</span>];</div><div class="line">  $mc = <span class="keyword">new</span> Memcache($servers);</div><div class="line">  $mc-&gt;set($key, $value);</div><div class="line">  var_dump($mc-&gt;get($key));</div><div class="line"></div><div class="line">  <span class="comment">/**</span></div><div class="line">   * [mhash 首先通过md5把key处理成一个32位的字符串，取其前8个字符。在经过hash算法处理成一个整数并返回。]</div><div class="line">   * <span class="doctag">@param</span>  &#123;[type]&#125; $key [description]</div><div class="line">   * <span class="doctag">@return</span> &#123;[type]&#125;      [description]</div><div class="line">   */</div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">mhash</span><span class="params">($key)</span></span>&#123;</div><div class="line">    $md5 = substr(md5($key), <span class="number">0</span>, <span class="number">8</span>);</div><div class="line">    $seed = <span class="number">31</span>;</div><div class="line">    $hash = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span>($i=<span class="number">0</span>;$i&lt;<span class="number">8</span>;$i++)&#123;</div><div class="line">      $hash = $hash*$seed + ord($md5&#123;$i&#125;);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> $hash &amp; <span class="number">0x7FFFFFFF</span>;</div><div class="line">  &#125;</div></pre></td></tr></table></figure>
<p>通过Hash函数把key转化成整数后，利用这个整数与服务器数量取模，得到其中一台的服务器配置。然后利用这个配置完成memcached服务器的连接操作。这样就完成了对数据的分布式存储。</p>
<h2 id="一致性Hash分布"><a href="#一致性Hash分布" class="headerlink" title="一致性Hash分布"></a>一致性Hash分布</h2><blockquote>
<p>一致性hash分布是算法，是P2P网络和分布式存储中常用到一项技术。是一种当服务器有增删时，对数据影响最小的一种部署方案。</p>
</blockquote>
<p>一致性Hash算法实现：</p>
<h3 id="将一个32位整数（0-2-32-1）想象成一个闭环。"><a href="#将一个32位整数（0-2-32-1）想象成一个闭环。" class="headerlink" title="将一个32位整数（0~2^32-1）想象成一个闭环。"></a>将一个32位整数（0~2^32-1）想象成一个闭环。</h3><p>如图，<br><img src="http://n.sinaimg.cn/games/3ece443e/20161001/hash_1.png" alt="将32位整数想象成一个闭环"></p>
<h3 id="通过Hash函数将key处理成整数"><a href="#通过Hash函数将key处理成整数" class="headerlink" title="通过Hash函数将key处理成整数"></a>通过Hash函数将key处理成整数</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$key1 = mhash(&quot;key1&quot;);</div><div class="line">$key2 = mhash(&quot;key2&quot;);</div><div class="line">$key3 = mhash(&quot;key3&quot;);</div><div class="line">$key4 = mhash(&quot;key4&quot;);</div></pre></td></tr></table></figure>
<p>将key通过mhash函数处理成整数，让后就可以将之对应到闭环上。如图，<br><img src="http://n.sinaimg.cn/games/3ece443e/20161001/hash_2.png" alt="4个key通过mhash处理成整数对应到闭环上"></p>
<h3 id="将memcached服务器，通过hash服务器所使用的IP地址，也对应到闭环上。"><a href="#将memcached服务器，通过hash服务器所使用的IP地址，也对应到闭环上。" class="headerlink" title="将memcached服务器，通过hash服务器所使用的IP地址，也对应到闭环上。"></a>将memcached服务器，通过hash服务器所使用的IP地址，也对应到闭环上。</h3><p>例如，有三台服务器，IP分别是192.168.1.1、192.168.1.2、192.168.1.3<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$server1 = mhash(&quot;192.168.1.1&quot;);</div><div class="line">$server2 = mhash(&quot;192.168.1.2&quot;);</div><div class="line">$server3 = mhash(&quot;192.168.1.3&quot;);</div></pre></td></tr></table></figure></p>
<p>如图，<br><img src="http://n.sinaimg.cn/games/3ece443e/20161001/hash_server.png" alt="将服务器也映射到环上"></p>
<h3 id="把数据映射到服务器上"><a href="#把数据映射到服务器上" class="headerlink" title="把数据映射到服务器上"></a>把数据映射到服务器上</h3><p><strong>映射方法：</strong><br>沿着圆环的顺时针方向的key出发，直到遇上一个服务器，将key对应的数据存储到这个服务器上。</p>
<p>如图，<br><img src="http://n.sinaimg.cn/games/3ece443e/20161001/hash_3.png" alt="把数据映射到服务器上"></p>
<h3 id="移除服务器"><a href="#移除服务器" class="headerlink" title="移除服务器"></a>移除服务器</h3><p>假设服务器 server2 崩溃了，那么受影响的仅是哪些hash映射值在server1到server2的值。</p>
<p>如图，受影响的只有key2，它将会重新映射到server3服务器上。<br><img src="http://n.sinaimg.cn/games/3ece443e/20161001/hash_4.png" alt="移除服务器"></p>
<h3 id="添加服务器"><a href="#添加服务器" class="headerlink" title="添加服务器"></a>添加服务器</h3><p>如果现在需要新添加一台服务器，其IP地址为（192.168.1.4）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$server4 = mhash(&quot;192.168.1.4&quot;);</div></pre></td></tr></table></figure></p>
<p>其在闭环上的映射位置位于如图的位置，那么受影响是hash映射值在其当前的位置和server2的位置之间的key。</p>
<p>如图，受影响的仅为key3，其将会重新映射到server4上。<br><img src="http://n.sinaimg.cn/games/3ece443e/20161001/hash_5.png" alt="添加服务器"></p>
<h3 id="实现（PHP）"><a href="#实现（PHP）" class="headerlink" title="实现（PHP）"></a>实现（PHP）</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">FlexiHash</span></span>&#123;</div><div class="line">  <span class="keyword">private</span> $serverList = <span class="keyword">array</span>();</div><div class="line">  <span class="keyword">private</span> $isSorted = <span class="keyword">false</span>;</div><div class="line"></div><div class="line">  <span class="comment">/**</span></div><div class="line">   * [addServer 通过hash函数计算除服务器的Hash值，通过此hash值定位服务器列表的某个位置，然后将服务器排序标识置为false]</div><div class="line">   * <span class="doctag">@param</span> &#123;[type]&#125; $server [description]</div><div class="line">   */</div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">addServer</span><span class="params">($server)</span></span>&#123;</div><div class="line">    $hash = <span class="keyword">$this</span>-&gt;mhash($server);</div><div class="line"></div><div class="line">    <span class="keyword">if</span>(!<span class="keyword">isset</span>(<span class="keyword">$this</span>-&gt;serverList[$hash]))&#123;</div><div class="line">      <span class="keyword">$this</span>-&gt;serverList[$hash] = $server;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">$this</span>-&gt;isSorted = <span class="keyword">false</span>;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="comment">/**</span></div><div class="line">   * [removeServer 跟addServer实现差不多，将server删除，并将排序标识置为false]</div><div class="line">   * <span class="doctag">@param</span>  &#123;[type]&#125; $server [description]</div><div class="line">   * <span class="doctag">@return</span> &#123;[type]&#125;         [description]</div><div class="line">   */</div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">removeServer</span><span class="params">($server)</span></span>&#123;</div><div class="line">    $hash = <span class="keyword">$this</span>-&gt;mhash($server);</div><div class="line"></div><div class="line">    <span class="keyword">if</span>(!<span class="keyword">isset</span>(<span class="keyword">$this</span>-&gt;serverList[$hash]))&#123;</div><div class="line">      <span class="keyword">unset</span>(<span class="keyword">$this</span>-&gt;serverList[$hash]);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">$this</span>-&gt;isSorted = <span class="keyword">false</span>;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="comment">/**</span></div><div class="line">   * [lookup 先计算除key的hash值，然后判断serverList是排序过，如果没有，就先对服务器列表进行倒序排序操作。倒序排序的作用是把服务器列表转换成一个逆时针的圆环。然后遍历服务器列表，找到一个合适的服务器返回]</div><div class="line">   * <span class="doctag">@param</span>  &#123;[type]&#125; $key [description]</div><div class="line">   * <span class="doctag">@return</span> &#123;[type]&#125;      [description]</div><div class="line">   */</div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">lookup</span><span class="params">($key)</span></span>&#123;</div><div class="line">    $hash = <span class="keyword">$this</span>-&gt;mhash($key);</div><div class="line"></div><div class="line">    <span class="keyword">if</span>(!<span class="keyword">$this</span>-&gt;isSorted)&#123;</div><div class="line">      ksort(<span class="keyword">$this</span>-&gt;serverList, SORT_NUMERIC);</div><div class="line">      <span class="keyword">$this</span>-&gt;isSorted = <span class="keyword">true</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">foreach</span>(<span class="keyword">$this</span>-&gt;serverList <span class="keyword">as</span> $pos =&gt; $server)&#123;</div><div class="line">      <span class="keyword">if</span>($hash &gt;= $pos)&#123;</div><div class="line">        <span class="keyword">return</span> $server;</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;serverList[count(<span class="keyword">$this</span>-&gt;serverList) - <span class="number">1</span>];</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="comment">/**</span></div><div class="line">   * [mhash 首先通过md5把key处理成一个32位的字符串，取其前8个字符。在经过hash算法处理成一个整数并返回。]</div><div class="line">   * <span class="doctag">@param</span>  &#123;[type]&#125; $key [description]</div><div class="line">   * <span class="doctag">@return</span> &#123;[type]&#125;      [description]</div><div class="line">   */</div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">mhash</span><span class="params">($key)</span></span>&#123;</div><div class="line">    $md5 = substr(md5($key), <span class="number">0</span>, <span class="number">8</span>);</div><div class="line">    $seed = <span class="number">31</span>;</div><div class="line">    $hash = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span>($i=<span class="number">0</span>;$i&lt;<span class="number">8</span>;$i++)&#123;</div><div class="line">      $hash = $hash*$seed + ord($md5&#123;$i&#125;);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> $hash &amp; <span class="number">0x7FFFFFFF</span>;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>测试<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line">  $hserver = <span class="keyword">new</span> FlexiHash();</div><div class="line"></div><div class="line">  $hserver-&gt;addServer(<span class="string">"192.168.1.1"</span>);</div><div class="line">  $hserver-&gt;addServer(<span class="string">"192.168.1.2"</span>);</div><div class="line">  $hserver-&gt;addServer(<span class="string">"192.168.1.3"</span>);</div><div class="line">  $hserver-&gt;addServer(<span class="string">"192.168.1.4"</span>);</div><div class="line">  $hserver-&gt;addServer(<span class="string">"192.168.1.5"</span>);</div><div class="line"></div><div class="line">  <span class="keyword">echo</span> <span class="string">"save key1 in server:"</span>.$hserver-&gt;lookup(<span class="string">"key1"</span>);</div><div class="line">  <span class="keyword">echo</span> <span class="string">"save key2 in server:"</span>.$hserver-&gt;lookup(<span class="string">"key2"</span>);</div><div class="line">  <span class="keyword">echo</span> <span class="string">"==============================================;</span></div><div class="line"></div><div class="line">  $hserver-&gt;removeServer("<span class="number">192.168</span><span class="number">.1</span><span class="number">.4</span><span class="string">");</span></div><div class="line">  echo "save key1 in server:<span class="string">".$hserver-&gt;lookup("</span>key1<span class="string">");</span></div><div class="line">  echo "save key2 in server:<span class="string">".$hserver-&gt;lookup("</span>key2<span class="string">");</span></div><div class="line">  echo "==============================================;</div><div class="line"></div><div class="line">  $hserver-&gt;addServer(<span class="string">"192.168.1.6"</span>);</div><div class="line">  <span class="keyword">echo</span> <span class="string">"save key1 in server:"</span>.$hserver-&gt;lookup(<span class="string">"key1"</span>);</div><div class="line">  <span class="keyword">echo</span> <span class="string">"save key2 in server:"</span>.$hserver-&gt;lookup(<span class="string">"key2"</span>);</div><div class="line">  <span class="keyword">echo</span> <span class="string">"==============================================;  </span></div><div class="line">?&gt;</div></pre></td></tr></table></figure></p>
<p>通过测试结果可以看出，在增加或者减少memcached服务器的时候，一致性hash算法只会改变很少的一部分数据的存储服务器，从而能够实现最大限度的减少数据丢失的情况。</p>
<h2 id="实际应用（PHP）"><a href="#实际应用（PHP）" class="headerlink" title="实际应用（PHP）"></a>实际应用（PHP）</h2><p>在实际应用当中，PHP提供了两种的关于Memcached的扩展，memcache和memcached。两种扩展中都可以设置采用哪种分布方式，我们只需要选择我们要采用的策略并修改配置即可，而不需要我们自己来实现具体的分布算法。</p>
<p><strong>memcache扩展配置</strong></p>
<p>控制key到服务器的映射（分布式）策略。 php.ini 配置<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">[Memcache]</div><div class="line">Memcache.allow_failover = 1</div><div class="line">memcache.max_failover_attempts = 2</div><div class="line">Memcache.hash_strategy =consistent</div><div class="line">Memcache.hash_function =crc32</div></pre></td></tr></table></figure></p>
<p>Memcache.allow_failover</p>
<blockquote>
<p>是否在发生错误时（对用户）透明的转移到其他服务器。</p>
</blockquote>
<p>memcache.max_failover_attempts</p>
<blockquote>
<p>定义在写入和获取数据时最多尝试的服务器次数（即：故障转移最大尝试数），仅和 memcache.allow_failover结合使用。</p>
</blockquote>
<p>Memcache.hash_strategy</p>
<blockquote>
<p>控制key到服务器的映射（分布式）策略。</p>
</blockquote>
<ul>
<li>consistent，采用一致性hash分布策略实现映射</li>
<li>standard，采用普通hash分布策略实现映射</li>
</ul>
<p>memcache.hash_function</p>
<blockquote>
<p>控制在key-server映射时使用哪个hash函数crc32 标明使用标准CRC32进行hash，fnv则说明使用FNV-1a。</p>
</blockquote>
<p><strong>memcached扩展配置</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;?php</div><div class="line">  $mem = new memcached();</div><div class="line">  $mem-&gt;setOption(Memcached::OPT_DISTRIBUTION,Memcached::DISTRIBUTION_CONSISTENT);</div><div class="line">  $mem-&gt;setOption(Memcached::OPT_LIBKETAMA_COMPATIBLE,true);</div></pre></td></tr></table></figure></p>
<p>Memcached::OPT_DISTRIBUTION</p>
<blockquote>
<p>指定元素key分布到各个服务器的方法。当前支持的方法有余数分步法合一致性hash算法两种。一致性hash算法提供 了更好的分配策略并且在添加服务器到集群时可以最小化缓存丢失。<br>类型: integer, 默认: Memcached::DISTRIBUTION_MODULA.</p>
</blockquote>
<p>Memcached::DISTRIBUTION_MODULA</p>
<blockquote>
<p>余数分布算法。</p>
</blockquote>
<p>Memcached::DISTRIBUTION_CONSISTENT</p>
<blockquote>
<p>一致性分布算法(基于libketama).</p>
</blockquote>
<p>Memcached::OPT_LIBKETAMA_COMPATIBLE</p>
<blockquote>
<p>开启或关闭兼容的libketama类行为。当开启此选项后，元素key的hash算法将会被设置为md5并且分布算法将会 采用带有权重的一致性hash分布。这一点非常有用因为其他基于libketama的客户端（比如python，urby）在同样 的服务端配置下可以透明的访问key。</p>
<p><strong>Note:</strong><br>如果你要使用一致性hash算法强烈建议开启此选项，并且这个选项可能在未来的发布版中被设置为默认开启。<br>类型: boolean, 默认: FALSE.</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;虽然memcached是一个高性能的缓存服务器，但是单台服务器对于目前大型的web应用来说还是满足不了需求的。那么就需要布置多台的memcached服务器进行分布式部署。那么一个数据应该存储到哪一台服务器就需要一个分布算法来确定。&lt;/p&gt;
&lt;p&gt;常见的分布方案有两种，&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;普通Hash分布&lt;/li&gt;
&lt;li&gt;一致性Hash分布&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Linux" scheme="https://weizhimiao.github.io/categories/Linux/"/>
    
    
      <category term="分布式部署算法" scheme="https://weizhimiao.github.io/tags/%E5%88%86%E5%B8%83%E5%BC%8F%E9%83%A8%E7%BD%B2%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>PHP异常和错误处理</title>
    <link href="https://weizhimiao.github.io/2016/09/30/PHP%E5%BC%82%E5%B8%B8%E5%92%8C%E9%94%99%E8%AF%AF%E5%A4%84%E7%90%86/"/>
    <id>https://weizhimiao.github.io/2016/09/30/PHP异常和错误处理/</id>
    <published>2016-09-30T15:10:00.000Z</published>
    <updated>2016-09-30T15:11:50.000Z</updated>
    
    <content type="html"><![CDATA[<p>首先，需要明确以下这两个概念</p>
<ul>
<li><p>异常(exception)</p>
<blockquote>
<p>PHP中的异常，是程序运行中不符合预期的情况及与正常流程不同的状况。<br>是属于逻辑和业务流程的一种中断，而不是语法错误。</p>
</blockquote>
</li>
<li><p>错误(error)</p>
<blockquote>
<p>PHP中的错误则属于自身的问题，是一种非法的语法或者环境问题导致的、让编译器无法通过检查甚至无法运行的情况。</p>
</blockquote>
</li>
</ul>
<a id="more"></a>
<h2 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h2><p>PHP中玉带任何自身问题都会触发一个错误，而不是抛出异常。所以，如果想使用异常处理来处理不可预知的问题，这是PHP办不到的。但在处理一些可以预知的错误，PHP的异常处理机制还是能够帮我们解决一些问题的。例如：</p>
<ul>
<li>代码冗余复杂，到处充斥着if…else</li>
<li>代码可读性差</li>
</ul>
<p>而异常处理，其主要作用是将『正常执行过程的代码』和『处理问题怎么处理的代码』进行分离。</p>
<h3 id="PHP常见的异常类"><a href="#PHP常见的异常类" class="headerlink" title="PHP常见的异常类"></a>PHP常见的异常类</h3><h4 id="Exception"><a href="#Exception" class="headerlink" title="Exception"></a>Exception</h4><blockquote>
<p>所有异常的基类。</p>
</blockquote>
<p>类摘要<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line">  <span class="keyword">Exception</span> &#123;</div><div class="line">    <span class="comment">/* 属性 */</span></div><div class="line">    <span class="keyword">protected</span> string $message ;     <span class="comment">//异常消息内容</span></div><div class="line">    <span class="keyword">protected</span> int $code ;           <span class="comment">//异常代码</span></div><div class="line">    <span class="keyword">protected</span> string $file ;        <span class="comment">//抛出异常的文件名</span></div><div class="line">    <span class="keyword">protected</span> int $line ;           <span class="comment">//抛出异常在该文件中的行号</span></div><div class="line">    <span class="comment">/* 方法 */</span></div><div class="line">    <span class="keyword">public</span> __construct ([ string $message = <span class="string">""</span> [, int $code = <span class="number">0</span> [, <span class="keyword">Exception</span> $previous = <span class="keyword">NULL</span> ]]] )           <span class="comment">//异常构造函数</span></div><div class="line">    <span class="keyword">final</span> <span class="keyword">public</span> string getMessage ( void )    <span class="comment">//获取异常消息内容</span></div><div class="line">    <span class="keyword">final</span> <span class="keyword">public</span> <span class="keyword">Exception</span> getPrevious ( void )<span class="comment">//返回异常链中的前一个异常</span></div><div class="line">    <span class="keyword">final</span> <span class="keyword">public</span> int getCode ( void )          <span class="comment">//获取异常代码</span></div><div class="line">    <span class="keyword">final</span> <span class="keyword">public</span> string getFile ( void )       <span class="comment">//获取发生异常的程序文件名称</span></div><div class="line">    <span class="keyword">final</span> <span class="keyword">public</span> int getLine ( void )          <span class="comment">//获取发生异常的代码在文件中的行号</span></div><div class="line">    <span class="keyword">final</span> <span class="keyword">public</span> <span class="keyword">array</span> getTrace ( void )       <span class="comment">//获取异常追踪信息</span></div><div class="line">    <span class="keyword">final</span> <span class="keyword">public</span> string getTraceAsString ( void )<span class="comment">//获取字符串类型的异常追踪信息</span></div><div class="line">    <span class="keyword">public</span> string __toString ( void )            <span class="comment">//将异常对象转换为字符串</span></div><div class="line">    <span class="keyword">final</span> <span class="keyword">private</span> void __clone ( void )          <span class="comment">//异常克隆</span></div><div class="line">  &#125;</div></pre></td></tr></table></figure></p>
<h4 id="错误异常类"><a href="#错误异常类" class="headerlink" title="错误异常类"></a>错误异常类</h4><p>类摘要<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line">  ErrorException extends <span class="keyword">Exception</span> &#123;</div><div class="line">      <span class="comment">/* 属性 */</span></div><div class="line">      <span class="keyword">protected</span> int $severity ;     <span class="comment">//异常级别</span></div><div class="line">      <span class="comment">/* 方法 */</span></div><div class="line">      <span class="keyword">public</span> __construct ([ string $message = <span class="string">""</span> [, int $code = <span class="number">0</span> [, int $severity = <span class="number">1</span> [, string $filename = <span class="keyword">__FILE__</span> [, int $lineno = <span class="keyword">__LINE__</span> [, <span class="keyword">Exception</span> $previous = <span class="keyword">NULL</span> ]]]]]] )   <span class="comment">//异常构造函数</span></div><div class="line">      <span class="keyword">final</span> <span class="keyword">public</span> int getSeverity ( void )             <span class="comment">// 获取异常的严重程度</span></div><div class="line">      <span class="comment">/* 继承的方法 */</span></div><div class="line">      <span class="keyword">final</span> <span class="keyword">public</span> string <span class="keyword">Exception</span>::getMessage ( void )</div><div class="line">      <span class="keyword">final</span> <span class="keyword">public</span> <span class="keyword">Exception</span> <span class="keyword">Exception</span>::getPrevious ( void )</div><div class="line">      <span class="keyword">final</span> <span class="keyword">public</span> int <span class="keyword">Exception</span>::getCode ( void )</div><div class="line">      <span class="keyword">final</span> <span class="keyword">public</span> string <span class="keyword">Exception</span>::getFile ( void )</div><div class="line">      <span class="keyword">final</span> <span class="keyword">public</span> int <span class="keyword">Exception</span>::getLine ( void )</div><div class="line">      <span class="keyword">final</span> <span class="keyword">public</span> <span class="keyword">array</span> <span class="keyword">Exception</span>::getTrace ( void )</div><div class="line">      <span class="keyword">final</span> <span class="keyword">public</span> string <span class="keyword">Exception</span>::getTraceAsString ( void )</div><div class="line">      <span class="keyword">public</span> string <span class="keyword">Exception</span>::__toString ( void )</div><div class="line">      <span class="keyword">final</span> <span class="keyword">private</span> void <span class="keyword">Exception</span>::__clone ( void )</div><div class="line">  &#125;</div></pre></td></tr></table></figure></p>
<p>常见使用方式（使用set_error_handle()函数讲错误信息托管至ErrorException）<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">exception_error_handler</span><span class="params">($errno, $errstr, $errfile, $errline )</span> </span>&#123;</div><div class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> ErrorException($errstr, <span class="number">0</span>, $errno, $errfile, $errline);</div><div class="line">&#125;</div><div class="line">set_error_handler(<span class="string">"exception_error_handler"</span>);</div><div class="line"><span class="comment">/* Trigger exception 抛出异常 */</span></div><div class="line">strpos();</div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure></p>
<h4 id="自定义异常类"><a href="#自定义异常类" class="headerlink" title="自定义异常类"></a>自定义异常类</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 自定义一个异常处理类</div><div class="line"> */</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyException</span> <span class="keyword">extends</span> <span class="title">Exception</span></span></div><div class="line">&#123;</div><div class="line">    <span class="comment">// 重定义构造器使 message 变为必须被指定的属性</span></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($message, $code = <span class="number">0</span>, Exception $previous = null)</span> </span>&#123;</div><div class="line">        <span class="comment">// 自定义的代码</span></div><div class="line"></div><div class="line">        <span class="comment">// 确保所有变量都被正确赋值</span></div><div class="line">        <span class="keyword">parent</span>::__construct($message, $code, $previous);</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// 自定义字符串输出的样式</span></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">__CLASS__</span> . <span class="string">": [&#123;$this-&gt;code&#125;]: &#123;$this-&gt;message&#125;\n"</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">customFunction</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">echo</span> <span class="string">"A custom function for this type of exception\n"</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="PHP中异常用法"><a href="#PHP中异常用法" class="headerlink" title="PHP中异常用法"></a>PHP中异常用法</h3><p>&gt;</p>
<p>首先我们需要知道，<strong><em>在PHP中只有手动抛出异常后才能捕获异常，对于抛出的异常只有进行捕获并作出相应的操作抛出异常才有意义，否则没有任何意义。</em></strong></p>
<p>抛出异常<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">check</span><span class="params">($n)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span>(<span class="keyword">empty</span>($n))&#123;</div><div class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="keyword">Exception</span>(<span class="string">"参数错误"</span>);</div><div class="line">    &#125;</div><div class="line">  &#125;</div></pre></td></tr></table></figure></p>
<h4 id="try…catch"><a href="#try…catch" class="headerlink" title="try…catch"></a>try…catch</h4><p>示例：关于上传操作的异常处理</p>
<p>方式一：异常发生时立即捕获<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line">  <span class="keyword">try</span>&#123;</div><div class="line">    <span class="comment">//可能出现错误的代码</span></div><div class="line">    <span class="keyword">if</span>(文件上传不成功)</div><div class="line">      <span class="keyword">throw</span> (上传异常)；</div><div class="line">    <span class="keyword">if</span>(更新数据库不成功)</div><div class="line">      <span class="keyword">throw</span> (数据库异常操作)；</div><div class="line">  &#125; <span class="keyword">catch</span>(异常)&#123;</div><div class="line">    <span class="comment">//必须的补救措施，例如删除文件、删除数据库记录</span></div><div class="line">    ...</div><div class="line">  &#125;</div></pre></td></tr></table></figure></p>
<p>方式二：分散抛出，集中捕获<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line">  上传&#123;</div><div class="line">    <span class="keyword">if</span>(文件上传不成功) <span class="keyword">throw</span> (上传异常)；</div><div class="line">    <span class="keyword">if</span>(更新数据库不成功)  <span class="keyword">throw</span> (数据库异常)；</div><div class="line">  &#125;</div><div class="line">  其他&#123;</div><div class="line">    <span class="keyword">if</span>(其他操作失败) <span class="keyword">throw</span> （其他操作异常）；</div><div class="line">  &#125;</div><div class="line">  <span class="comment">//其他代码...</span></div><div class="line">  <span class="keyword">try</span>&#123;</div><div class="line">      上传；</div><div class="line">      其他；</div><div class="line">  &#125; <span class="keyword">catch</span>(上传异常)&#123;</div><div class="line">      <span class="comment">//上传异常处理、例如删除文件</span></div><div class="line">  &#125; <span class="keyword">catch</span>(数据库异常)&#123;</div><div class="line">      <span class="comment">//数据库异常处理、比如删除数据库记录等</span></div><div class="line">  &#125; <span class="keyword">catch</span>(其他异常)&#123;</div><div class="line">      <span class="comment">//其他异常处理，比如记录异常日志等</span></div><div class="line">  &#125;</div></pre></td></tr></table></figure></p>
<p><strong>需要注意，exception作为超类应该放在最后捕获</strong></p>
<h4 id="try…catch…finally"><a href="#try…catch…finally" class="headerlink" title="try…catch…finally"></a>try…catch…finally</h4><p>示例：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">inverse</span><span class="params">($x)</span> </span>&#123;</div><div class="line">      <span class="keyword">if</span> (!$x) &#123;</div><div class="line">          <span class="keyword">throw</span> <span class="keyword">new</span> <span class="keyword">Exception</span>(<span class="string">'Division by zero.'</span>);</div><div class="line">      &#125;</div><div class="line">      <span class="keyword">return</span> <span class="number">1</span>/$x;</div><div class="line">  &#125;</div><div class="line">  <span class="comment">//</span></div><div class="line">  <span class="keyword">try</span> &#123;</div><div class="line">      <span class="keyword">echo</span> inverse(<span class="number">5</span>) . <span class="string">"\n"</span>;</div><div class="line">  &#125; <span class="keyword">catch</span> (<span class="keyword">Exception</span> $e) &#123;</div><div class="line">      <span class="keyword">echo</span> <span class="string">'Caught exception: '</span>,  $e-&gt;getMessage(), <span class="string">"\n"</span>;</div><div class="line">  &#125; <span class="keyword">finally</span> &#123;</div><div class="line">      <span class="keyword">echo</span> <span class="string">"First finally.\n"</span>;</div><div class="line">  &#125;</div><div class="line">  <span class="comment">//</span></div><div class="line">  <span class="keyword">try</span> &#123;</div><div class="line">      <span class="keyword">echo</span> inverse(<span class="number">0</span>) . <span class="string">"\n"</span>;</div><div class="line">  &#125; <span class="keyword">catch</span> (<span class="keyword">Exception</span> $e) &#123;</div><div class="line">      <span class="keyword">echo</span> <span class="string">'Caught exception: '</span>,  $e-&gt;getMessage(), <span class="string">"\n"</span>;</div><div class="line">  &#125; <span class="keyword">finally</span> &#123;</div><div class="line">      <span class="keyword">echo</span> <span class="string">"Second finally.\n"</span>;</div><div class="line">  &#125;</div><div class="line">  <span class="comment">//</span></div><div class="line">  <span class="comment">// Continue execution</span></div><div class="line">  <span class="keyword">echo</span> <span class="string">"Hello World\n"</span>;</div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure></p>
<h3 id="PHP异常处理使用场景"><a href="#PHP异常处理使用场景" class="headerlink" title="PHP异常处理使用场景"></a>PHP异常处理使用场景</h3><h4 id="对程序的悲观预测"><a href="#对程序的悲观预测" class="headerlink" title="对程序的悲观预测"></a>对程序的悲观预测</h4><p>即当一个操作可能会由于一些不可控的因素（比如网络问题等），可能会出现执行不成功的情况。那么在种情况下就可以抛出异常，然后进行捕获，对异常情况进行细致的处理。</p>
<h4 id="程序的需要和对业务的需要"><a href="#程序的需要和对业务的需要" class="headerlink" title="程序的需要和对业务的需要"></a>程序的需要和对业务的需要</h4><p>需要强调的是，异常是业务处理中必不可少的环节，我们不能对异常视而不见。<br>需要用到异常处理的情况</p>
<ul>
<li>不希望业务代码中充斥着大量的打印、调试等处理；</li>
<li>业务中自定义的异常，对现实生活中各种业务进行补充；</li>
<li>对数据一致性有要求的业务操作中；</li>
</ul>
<p>异常处理机制可以把每一件事当做事务来考虑，还可以把异常处理当做成一种内建的恢复系统。</p>
<h4 id="语言级别的健壮性要求"><a href="#语言级别的健壮性要求" class="headerlink" title="语言级别的健壮性要求"></a>语言级别的健壮性要求</h4><p>我们都知道PHP在健壮性这一点是不足的。对很多异常是没有强制性限制的。所以很多异常需要我们自己来做。</p>
<p>通过try…catch处理，我们可以把异常造成的逻辑中断破坏降低到最小的范围，并且经过补救处理后不影响业务逻辑的完整性；乱抛异常和只抛不捕获，或者捕获而不补救，都会导致数据混乱。</p>
<h2 id="错误处理"><a href="#错误处理" class="headerlink" title="错误处理"></a>错误处理</h2><h3 id="PHP中的错误级别"><a href="#PHP中的错误级别" class="headerlink" title="PHP中的错误级别"></a>PHP中的错误级别</h3><p>PHP的错误有很多类，包括warning、notice、deprecated、fatal error等。</p>
<p>常用到的错误级别</p>
<ul>
<li>deprecated，是最低级别的错误，表示不推荐、不建议。其虽不影响PHP正常的业务流程，但一般情况下建议修正；</li>
<li>notice，通知级别错误。表示你语法中存在不恰当的地方。常见的是 使用未定义的变量就会报此错误。这种错误也影响PHP正常流程；</li>
<li>warning，警告级别错误，是比较高级别的错误，表示在语法中出现很不恰当的地方，比如函数参数不匹配。这种级别的错误可能会导致出现不可预期的结果，所以建议修正；</li>
<li>fetal error，致命错误。直接导致PHP流程终结，后面代码不在执行。</li>
<li>prase error，语法解析错误。导致PHP代码无法通过语法检查。</li>
</ul>
<p>错误信息显示控制<br>方式一：<br>php.ini<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">error_reporting = E_ALL | E_STRICT  #指定显示错误级别</div><div class="line">display_errors = On                 #错误信息显示控制</div></pre></td></tr></table></figure></p>
<p>方式二：PHP代码中</p>
<ol>
<li>error_reporting(0),表示屏蔽所有错误信息。正式部署时采用这样的策略，来防止错误信息泄露敏感信息。</li>
<li>@mysql_connect(),抑制错误信息输出。</li>
</ol>
<h3 id="PHP错误处理机制"><a href="#PHP错误处理机制" class="headerlink" title="PHP错误处理机制"></a>PHP错误处理机制</h3><h4 id="trigger-error"><a href="#trigger-error" class="headerlink" title="trigger_error"></a>trigger_error</h4><p>该方法用于主动抛出一个错误。示例<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line">  <span class="keyword">if</span>(mt_rand(<span class="number">0</span>,<span class="number">1</span>) == <span class="number">1</span>)&#123;</div><div class="line">    triggererror(<span class="string">"random no eq 0"</span>,E_USER_ERROR);</div><div class="line">  &#125;</div></pre></td></tr></table></figure></p>
<h4 id="set-error-handler"><a href="#set-error-handler" class="headerlink" title="set_error_handler"></a>set_error_handler</h4><p>PHP中提供了set_error_handler（）函数可以用来接管PHP错误处理。</p>
<p><strong>set_error_handler(error_function, error_type);</strong></p>
<ul>
<li>error_function,规定发生错误时运行的函数。（必须）</li>
<li>error_types,规定在哪个错误级别报告级别会显示用户定义的错误，（可选，默认『E_ALL』）</li>
</ul>
<p>示例：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">customError</span><span class="params">($errNo, $errStr, $errFile, $errLine)</span></span>&#123;</div><div class="line">    <span class="keyword">echo</span> <span class="string">"&lt;b&gt;错误代码：&lt;/b&gt;[$errNo]&#123;$errStr&#125;\r\n"</span>;</div><div class="line">    <span class="keyword">echo</span> <span class="string">"错误所在的代码行：&#123;$errLine&#125;,文件:&#123;$errFile&#125;\r\n"</span>;</div><div class="line">    <span class="keyword">echo</span> <span class="string">"PHP 版本 ，"</span>.PHP_VERSION.<span class="string">"("</span>.PHP_OS.<span class="string">")\r\n"</span>;</div><div class="line">    <span class="keyword">die</span>();  <span class="comment">//如果有必要，用户自定义的错误处理程序必须终止（die（）；）当前脚本。</span></div><div class="line">  &#125;</div><div class="line"></div><div class="line">  set_error_handler(<span class="string">"custonError"</span>, E_ALL | E_STRICT);</div><div class="line">  $a = <span class="keyword">array</span>(<span class="string">'o'</span> =&gt; <span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">8</span>);</div><div class="line">  <span class="keyword">echo</span> $a[o]</div></pre></td></tr></table></figure></p>
<p>自定义的错误处理函数一定要有这四个输入变量$errno, $errstr, $errfile, $errline.</p>
<ul>
<li>errno,代表错误等级的一组常量。比如 E_WARNING 其二进制掩码为4，表示告警信息。</li>
</ul>
<p><strong>注意：</strong> 自定义的错误处理函数并不能托管所有种类的错误，比如E_ERROR, E_PARSE, E_CORE_ERROR, E_CORE_WARNING, E_COMPILE_ERROR, E_COMPILE_WARNING,以及E_STRICT中的部分。</p>
<p><strong>注意：</strong> 如果使用自定义的 set_error_handler 接管PHP的错误处理，先前代码里的错误抑制 @ 也将会失效，这是这种错误也会被显示。</p>
<h4 id="restore-error-handler"><a href="#restore-error-handler" class="headerlink" title="restore_error_handler"></a>restore_error_handler</h4><p>该函数可以取消 set_error_handler 的错误接管.</p>
<h2 id="结合PHP错误处理主动抛出异常"><a href="#结合PHP错误处理主动抛出异常" class="headerlink" title="结合PHP错误处理主动抛出异常"></a>结合PHP错误处理主动抛出异常</h2><p>结合PHP的错误处理机制和异常处理机制，通过组合也可以实现同时捕获异常和非致命错误。<br>示例<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">customError</span><span class="params">($errNo, $errStr, $errFile, $errLine)</span></span>&#123;</div><div class="line">    <span class="comment">//自定义错误处理时，可以手动抛出异常</span></div><div class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="keyword">Exception</span>($level.<span class="string">"|"</span>.$errStr);</div><div class="line">  &#125;</div><div class="line">  set_error_handler(<span class="string">"custonError"</span>, E_ALL | E_STRICT);</div><div class="line">  <span class="keyword">try</span>&#123;</div><div class="line">    $a = <span class="number">5</span>/<span class="number">0</span>;</div><div class="line">  &#125; <span class="keyword">catch</span>(<span class="keyword">Exception</span> $e)&#123;</div><div class="line">      <span class="keyword">echo</span> <span class="string">"错误信息"</span>.$e-&gt;getMessage();</div><div class="line">  &#125;</div></pre></td></tr></table></figure></p>
<p>通过上面示例可以捕获到异常和非致命错误，但对于 fetal error 这样的错误却捕获不到。但是通过其他的一些方法，我们还是可以做一些处理。 register_shutdown_function 该函数会在程序终止或die时触发一个函数，我们可以利用该触发函数做一些最后的收尾操作。</p>
<p>调用时机</p>
<ul>
<li>当页面被用户强制停止时</li>
<li>当程序代码运行超时时</li>
<li>当ＰＨＰ代码执行完成时，代码执行存在异常和错误、警告</li>
</ul>
<p>void register_shutdown_function ( callable $callback [, mixed $parameter [, mixed $… ]] )</p>
<p>示例<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">shutdown</span><span class="params">()</span></span></div><div class="line">  &#123;</div><div class="line">      <span class="comment">// This is our shutdown function, in</span></div><div class="line">      <span class="comment">// here we can do any last operations</span></div><div class="line">      <span class="comment">// before the script is complete.</span></div><div class="line">      <span class="keyword">echo</span> <span class="string">'Script executed with success'</span>, PHP_EOL;</div><div class="line">  &#125;</div><div class="line">  register_shutdown_function(<span class="string">'shutdown'</span>);</div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure></p>
<p>对于 prase error 级别的错误，PHP层面就没有办法做什么了。我们只能通过开启错误日志，来记录这些错误。</p>
<p>php.ini设置<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">log_errors = On</div><div class="line">error_log = /usr/log/log.log</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;首先，需要明确以下这两个概念&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;异常(exception)&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;PHP中的异常，是程序运行中不符合预期的情况及与正常流程不同的状况。&lt;br&gt;是属于逻辑和业务流程的一种中断，而不是语法错误。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;错误(error)&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;PHP中的错误则属于自身的问题，是一种非法的语法或者环境问题导致的、让编译器无法通过检查甚至无法运行的情况。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="PHP" scheme="https://weizhimiao.github.io/categories/PHP/"/>
    
    
      <category term="异常处理" scheme="https://weizhimiao.github.io/tags/%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/"/>
    
      <category term="错误处理" scheme="https://weizhimiao.github.io/tags/%E9%94%99%E8%AF%AF%E5%A4%84%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>memcache高速缓存工作原理及应用</title>
    <link href="https://weizhimiao.github.io/2016/09/29/memcache%E9%AB%98%E9%80%9F%E7%BC%93%E5%AD%98%E7%9A%84%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86%E5%8F%8A%E5%BA%94%E7%94%A8%E5%B0%8F%E7%BB%93/"/>
    <id>https://weizhimiao.github.io/2016/09/29/memcache高速缓存的工作原理及应用小结/</id>
    <published>2016-09-29T10:30:00.000Z</published>
    <updated>2016-09-30T02:32:21.000Z</updated>
    
    <content type="html"><![CDATA[<p>Memcached,是高性能的分布式内存缓存服务器，主要功能就是通过缓存数据库的查询，减少对数据库的访问次数，来提高动态web应用的速度和可扩展性。</p>
<p>memcached 是以守护程序方法运行于一个或多个服务器中，随时接受客户端的连接操作，客户端可以由各种语言编写，目前一致的客户端api包括 Perl / PHP / Python / Java / C# / C 等等。客户端在与 memcached 服务建立连接之后，接下来的事情就是存取对象了， 每个被存取的对象都有一个唯一的标识符 key，存取操作均通过这个 key进行，保存到 memcached 中的对象实际上是放置内存中的，并不是保存在平时的 cache 文件中的，这也是为什么 memcached 能够如此高效快速的原因。</p>
<p>注意，这些对象并不是持久的， 服务停止之后， 里边的数据就会丢失。</p>
<p><img src="http://n.sinaimg.cn/games/3ece443e/20160929/MemcacheYingYongMoXing.png?1" alt="Memcached应用模型"></p>
<a id="more"></a>
<h2 id="Memcached的安装"><a href="#Memcached的安装" class="headerlink" title="Memcached的安装"></a>Memcached的安装</h2><h3 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h3><p>libevent</p>
<blockquote>
<p>Libevent 是一个用C语言编写的、轻量级的开源高性能网络库。<br>主要有以下几个亮点：事件驱动（ event-driven），高性能;轻量级，专注于网络，不如 ACE 那么臃肿庞大；源代码相当精炼、易读；跨平台，支持 Windows、 Linux、 BSD 和 Mac Os；支持多种 I/O 多路复用技术， epoll、 poll、 dev/poll、 select 和 kqueue 等；支持 I/O，定时器和信号等事件；注册事件优先级。<br>Libevent 已经被广泛的应用，作为底层的网络库；比如 memcached、 Vomit、 Nylon、 Netchat等等。</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">wget http://n.sinaimg.cn/games/3ece443e/20160929/libevent-2.0.22-stable.tar</div><div class="line">tar -vxf libevent-2.0.22-stable.tar</div><div class="line">cd libevent-2.0.22-stable</div><div class="line">./configure --prefix=/usr/local/libevent</div><div class="line">make &amp;&amp; make install</div></pre></td></tr></table></figure>
<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">wget http://n.sinaimg.cn/games/3ece443e/20160930/memcached-1.4.31.tar.gz</div><div class="line">cd memcached-1.4.31</div><div class="line"> ./configure --prefix=/usr/local/memcached --with-libevent=/usr/local/libevent</div><div class="line">make &amp;&amp; make install</div></pre></td></tr></table></figure>
<p>查看是否已经安装成功<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">cd /usr/local/memcached/</div><div class="line">ll</div><div class="line">drwxr-xr-x 2 root root 4096 9月  28 10:56 bin</div><div class="line">drwxr-xr-x 3 root root 4096 9月  28 10:56 include</div><div class="line">drwxr-xr-x 3 root root 4096 9月  28 10:56 share</div></pre></td></tr></table></figure></p>
<h2 id="Memcached管理"><a href="#Memcached管理" class="headerlink" title="Memcached管理"></a>Memcached管理</h2><h3 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h3><p>启动Memcached服务器<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/usr/local/memcached/bin/memcached -d -m 128 -u root -p 11211</div></pre></td></tr></table></figure></p>
<p>查看是否启动成功<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">ps aux | grep memcache</div><div class="line">root     24428  0.0  0.0 323120   864 ?        Ssl  11:00   0:00 /usr/local/memcached/bin/memcached -d -m 128 -u root -p 11211</div><div class="line">root     24436  0.0  0.0 112664   984 pts/0    D+   11:00   0:00 grep --color=auto memcache</div></pre></td></tr></table></figure></p>
<p>或<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">netstat -tlun | grep 11211</div><div class="line">tcp        0      0 0.0.0.0:11211           0.0.0.0:*               LISTEN</div><div class="line">tcp6       0      0 :::11211                :::*                    LISTEN</div><div class="line">udp        0      0 0.0.0.0:11211           0.0.0.0:*</div><div class="line">udp6       0      0 :::11211                :::*</div></pre></td></tr></table></figure></p>
<p>设置开机自启动<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">echo &quot;/usr/local/memcached/bin/memcached -d -m 128 -u root -p 11211&quot; &gt;&gt; /etc/rc.d/rc.local</div></pre></td></tr></table></figure></p>
<p>Memcached启动选项及说明</p>
<table>
<thead>
<tr>
<th>选项</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>-p <num></num></td>
<td>Memcached监听的TCP端口，要保证该端口号未被占用</td>
</tr>
<tr>
<td>-U <num></num></td>
<td>指定监听UDP的端口，默认11211，0表示关闭</td>
</tr>
<tr>
<td>-s <file></file></td>
<td>指定Memcached用于监听的UNIX socket文件</td>
</tr>
<tr>
<td>-A</td>
<td>enable ascii “shutdown” command</td>
</tr>
<tr>
<td>-a <mask></mask></td>
<td>设置-s选项指定的UNIX socket文件的权限(默认权限: 0700)</td>
</tr>
<tr>
<td>-l <addr></addr></td>
<td>监听的服务器IP地址，如果有多个地址的话，使用逗号分隔，格式可以为“IP地址:端口号”，例如：-l 指定192.168.0.184:19830,192.168.0.195:13542；端口号也可以通过-p选项指定</td>
</tr>
<tr>
<td>-d</td>
<td>指定memcached进程作为一个守护进程启动</td>
</tr>
<tr>
<td>-r</td>
<td>设置产生core文件大小</td>
</tr>
<tr>
<td>-u <username></username></td>
<td>运行memcached的用户 (only when run as root)</td>
</tr>
<tr>
<td>-m <num></num></td>
<td>指定分配给memcached使用的内存，单位是MB(默认: 64 MB)</td>
</tr>
<tr>
<td>-M</td>
<td>当内存使用超出配置值时，禁止自动清除缓存中的数据项，此时Memcached不可用，直到内存被释放</td>
</tr>
<tr>
<td>-c <num></num></td>
<td>设置最大运行的并发连接数，默认是1024</td>
</tr>
<tr>
<td>-k</td>
<td>设置锁定所有分页的内存，对于大缓存应用场景，谨慎使用该选项</td>
</tr>
<tr>
<td>-v</td>
<td>输出警告和错误信息</td>
</tr>
<tr>
<td>-vv</td>
<td>打印信息比-v更详细：不仅输出警告和错误信息，也输出客户端请求和响应信息</td>
</tr>
<tr>
<td>-vvv</td>
<td>extremely verbose (also print internal state transitions)</td>
</tr>
<tr>
<td>-h</td>
<td>显示Memcached版本和摘要信息</td>
</tr>
<tr>
<td>-i</td>
<td>打印libevent和Memcached的licenses信息</td>
</tr>
<tr>
<td>-V</td>
<td>输出Memcached版本号</td>
</tr>
<tr>
<td>-P <file></file></td>
<td>保存memcached进程的pid文件，（与 -d 一起搭配使用）</td>
</tr>
<tr>
<td>-f <factor></factor></td>
<td>用于计算缓存数据项的内存块大小的乘数因子，默认是1.25</td>
</tr>
<tr>
<td>-n <bytes></bytes></td>
<td>为缓存数据项的key、value、flag设置最小分配字节数，默认是48</td>
</tr>
<tr>
<td>-L</td>
<td>尝试使用大内存分页（pages）</td>
</tr>
<tr>
<td>-D <char></char></td>
<td>用于统计报告中Key前缀和ID之间的分隔符，默认是冒号“:”  </td>
</tr>
<tr>
<td>-t <num></num></td>
<td>指定用来处理请求的线程数，默认为4</td>
</tr>
<tr>
<td>-R</td>
<td>为避免客户端饿死（starvation），对连续达到的客户端请求数设置一个限额，如果超过该设置，会选择另一个连接来处理请求，默认为20</td>
</tr>
<tr>
<td>-C</td>
<td>禁用CAS</td>
</tr>
<tr>
<td>-b <num></num></td>
<td>Set the backlog queue limit (default: 1024)</td>
</tr>
<tr>
<td>-B</td>
<td>指定使用的协议，默认行为是自动协商（autonegotiate），可能使用的选项有auto、ascii、binary。</td>
</tr>
<tr>
<td>-I</td>
<td>Override the size of each slab page. Adjusts max item size(default: 1mb, min: 1k, max: 128m)</td>
</tr>
<tr>
<td>-F</td>
<td>禁用flush_all命令</td>
</tr>
<tr>
<td>-o</td>
<td>指定逗号分隔的选项，一般用于用于扩展或实验性质的选项</td>
</tr>
</tbody>
</table>
<h3 id="通过telnet连接使用Memcache"><a href="#通过telnet连接使用Memcache" class="headerlink" title="通过telnet连接使用Memcache"></a>通过telnet连接使用Memcache</h3><p>连接<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">telnet 127.0.0.1 11211</div></pre></td></tr></table></figure></p>
<p>命令格式：<command name=""> <key> <flags> <exptime> <bytes>\r\n <data block="">\r\n</data></bytes></exptime></flags></key></p>
<blockquote>
<p><command name=""> 可以是”set”, “add”, “replace”</p>
<p><key> 客户端需要保存数据的key。</key></p>
<p><flags> 是一个16位的无符号的整数(以十进制的方式表示)。</flags></p>
<p><exptime> 过期的时间。<br>最后客户端需要加上”\r\n”作为”命令头”的结束标志。即回车</exptime></p>
</blockquote>
<p>示例：</p>
<p>保存一个数据（保存一个『cache_key1=&gt;12345』的键值对到memcached 60s）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">set cache_key1 0 60 5</div><div class="line">12345</div><div class="line">STORED</div></pre></td></tr></table></figure></p>
<p>获取刚保存的值<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">get cache_key1</div><div class="line">VALUE cache_key1 0 5</div><div class="line">12345</div><div class="line">END</div></pre></td></tr></table></figure></p>
<p>其他命令：</p>
<table>
<thead>
<tr>
<th>Command</th>
<th>Description</th>
<th>Example</th>
</tr>
</thead>
<tbody>
<tr>
<td>get</td>
<td>获取值</td>
<td>get mykey</td>
</tr>
<tr>
<td>set</td>
<td>设置值（可以存在可以不存在）</td>
<td>set mykey 0 60 5</td>
</tr>
<tr>
<td>add</td>
<td>添加新值</td>
<td>add newkey 0 60 5</td>
</tr>
<tr>
<td>replace</td>
<td>替换值（必须已存在）</td>
<td>replace key 0 60 5</td>
</tr>
<tr>
<td>append</td>
<td>在原有值之后添加数据</td>
<td>append key 0 60 15</td>
</tr>
<tr>
<td>prepend</td>
<td>在原有值之前添加数据</td>
<td>prepend key 0 60 15</td>
</tr>
<tr>
<td>incr</td>
<td>Increments numerical key value by given number</td>
<td>incr mykey 2</td>
</tr>
<tr>
<td>decr</td>
<td>Decrements numerical key value by given number</td>
<td>decr mykey 5</td>
</tr>
<tr>
<td>delete</td>
<td>删除一条数据</td>
<td>delete mykey</td>
</tr>
<tr>
<td>flush_all</td>
<td>清除所有数据</td>
<td>flush_all</td>
</tr>
<tr>
<td></td>
<td>清除900秒之内的数据</td>
<td>flush_all 900</td>
</tr>
<tr>
<td>stats</td>
<td>查看所有状态</td>
<td>stats</td>
</tr>
<tr>
<td></td>
<td>Prints memory statistics</td>
<td>stats slabs</td>
</tr>
<tr>
<td></td>
<td>Prints memory statistics</td>
<td>stats malloc</td>
</tr>
<tr>
<td></td>
<td>Print higher level allocation statistics</td>
<td>stats items</td>
</tr>
<tr>
<td></td>
<td></td>
<td>stats detail</td>
</tr>
<tr>
<td></td>
<td>已使用大小</td>
<td>stats sizes</td>
</tr>
<tr>
<td></td>
<td>重置状态</td>
<td>stats reset</td>
</tr>
<tr>
<td>version</td>
<td>查看版本</td>
<td>version</td>
</tr>
<tr>
<td>verbosity</td>
<td>Increases log level</td>
<td>verbosity</td>
</tr>
<tr>
<td>quit</td>
<td>退出telnet连接</td>
<td>quit</td>
</tr>
</tbody>
</table>
<h3 id="通过客户端（PHP）连接和使用Memcached"><a href="#通过客户端（PHP）连接和使用Memcached" class="headerlink" title="通过客户端（PHP）连接和使用Memcached"></a>通过客户端（PHP）连接和使用Memcached</h3><p>php扩展Memcached安装</p>
<p>依赖</p>
<blockquote>
<p>libmemcached, 是一个 memcached 的库，客户端库，C 和 C++ 语言实现的客户端库，具有低内存占用率、线程安全、并提供对memcached功能的全面支持。它还采用 多种命令行工具： memcat ， memflush ， memrm ， memstat ，并memslap （负载代）。程序库一直在设计，让不同的散列方法对密钥，分割的钥匙，并使用统一的散列分配。</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">wget https://launchpadlibrarian.net/165454254/libmemcached-1.0.18.tar.gz</div><div class="line">tar -zxvf libmemcached-1.0.18.tar.gz</div><div class="line">cd libmemcached-1.0.18</div><div class="line">./configure --prefix=/usr/local/libmemcached</div><div class="line">make &amp;&amp; make install</div></pre></td></tr></table></figure>
<p>安装扩展<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">wget http://n.sinaimg.cn/games/3ece443e/20160929/memcached-2.2.0.tar</div><div class="line">tar -xvf memcached-2.2.0.tar</div><div class="line">cd memcached-2.2.0</div><div class="line">/usr/local/php56/bin/phpize</div><div class="line">./configure --with-php-config=/usr/local/php56/bin/php-config --with-libmemcached-dir=/usr/local/libmemcached  --enable-memcached --disable-memcached-sasl</div><div class="line">make &amp;&amp; make install</div><div class="line">Installing shared extensions:     /usr/local/php56/lib/php/extensions/no-debug-non-zts-20131226/</div></pre></td></tr></table></figure></p>
<p>查看是否安装成功<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">cd /usr/local/php56/lib/php/extensions/no-debug-non-zts-20131226/</div><div class="line">ll</div><div class="line">-rwxr-xr-x 1 root root  380475 9月  28 22:25 memcached.so</div><div class="line">-rwxr-xr-x 1 root root  756714 9月  26 17:32 mysqli.so</div><div class="line">-rwxr-xr-x 1 root root 1333912 9月  24 23:31 opcache.a</div><div class="line">-rwxr-xr-x 1 root root  618435 9月  24 23:31 opcache.so</div></pre></td></tr></table></figure></p>
<p>修改配置<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">vi /usr/local/php56/lib/php.ini</div><div class="line">extension=/usr/local/php56/lib/php/extensions/no-debug-non-zts-20131226/memcached.so</div></pre></td></tr></table></figure></p>
<p>重启php-fpm<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">kill -USR2 `cat /usr/local/php56/var/run/php-fpm.pid`</div></pre></td></tr></table></figure></p>
<p>查看是否已经加载成功<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">/usr/local/php56/bin/php -m</div><div class="line">或通过phpinfo();查看</div></pre></td></tr></table></figure></p>
<p>测试<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">vi memcache_test.php</div></pre></td></tr></table></figure></p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line">        $mc = <span class="keyword">new</span> Memcached();</div><div class="line">        var_dump($mc);</div><div class="line">        $mc-&gt;addServer(<span class="string">'127.0.0.1'</span>, <span class="number">11211</span>);</div><div class="line">        $mc-&gt;set(<span class="string">'cache_key'</span>,<span class="string">'mem_value'</span>,<span class="number">30</span>);</div><div class="line">        $val = $mc-&gt;get(<span class="string">'cache_key'</span>);</div><div class="line">        var_dump($val);</div><div class="line">        var_dump($mc-&gt;delete(<span class="string">'cache_key'</span>));</div><div class="line">        $mc-&gt;quit();</div></pre></td></tr></table></figure>
<p>访问结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">object(Memcached)#1 (0) &#123; &#125; string(9) &quot;mem_value&quot; bool(true)</div></pre></td></tr></table></figure></p>
<p>php关于memcached 的两种扩展memcache 和 memcached 介绍</p>
<ol>
<li><p>目前大多数php环境里使用的都是不带d的memcache版本，这个版本出的比较早，是一个原生版本，完全在php框架内开发的。与之对应的带d的memcached是建立在libmemcached的基础上，所以相对来说，memcached版本的功能更全一些。</p>
<blockquote>
<p><a href="http://cn2.php.net/manual/en/book.memcache.php" target="_blank" rel="external">memcache:</a></p>
<p><a href="http://cn2.php.net/manual/en/book.memcached.php" target="_blank" rel="external">memcached:</a></p>
</blockquote>
</li>
<li><p>Memcache是原生实现的，支持OO和非OO两套接口并存。而memcached是使用libmemcached，只支持OO接口。</p>
</li>
<li>memcached有了一个统一的setOption()来设置设置，而不用在操作的时候设置了。Memcached实现了更多的memcached协议。</li>
<li>memcached支持Binary Protocol，而memcache不支持。这意味着memcached会有更高的性能。不过memcached目前还不支持长连接。</li>
<li>另外一点也是大家比较关心的，就是所使用的算法。“一致性hash算法”是当添加或删除存储节点时，对存储在memcached上的数据影响较小的一种算法。在php的两个扩展库中，都可以使用该算法，只是设置方法有所不同。</li>
</ol>
<ul>
<li>Memcache</li>
</ul>
<p>修改php.ini添加：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">[Memcache]</div><div class="line">Memcache.allow_failover = 1</div><div class="line">Memcache.hash_strategy =consistent</div><div class="line">Memcache.hash_function =crc32</div></pre></td></tr></table></figure></p>
<p>或在php中使用ini_set方法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">ini_set(‘memcache.hash_strategy&apos;,&apos;standard&apos;);</div><div class="line">ini_set(‘memcache.hash_function&apos;,&apos;crc32&apos;);</div></pre></td></tr></table></figure></p>
<ul>
<li>Memcached</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$mem = new memcached();</div><div class="line">$mem-&gt;setOption(Memcached::OPT_DISTRIBUTION,Memcached::DISTRIBUTION_CONSISTENT);</div><div class="line">$mem-&gt;setOption(Memcached::OPT_LIBKETAMA_COMPATIBLE,true);</div></pre></td></tr></table></figure>
<h2 id="Memcached监控"><a href="#Memcached监控" class="headerlink" title="Memcached监控"></a>Memcached监控</h2><h3 id="利用phpmemcache-php图形监控工具"><a href="#利用phpmemcache-php图形监控工具" class="headerlink" title="利用phpmemcache.php图形监控工具"></a>利用phpmemcache.php图形监控工具</h3><p>下载 phpmemcache.php<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">wget http://n.sinaimg.cn/games/3ece443e/20160929/phpmemcache.php</div></pre></td></tr></table></figure></p>
<p>将phpmemcache.php放入web目录<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mv phpmemcache.php /usr/local/nginx/html</div></pre></td></tr></table></figure></p>
<p>修改phpmemcache.php中配置<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">define(&apos;ADMIN_USERNAME&apos;,&apos;xxxx&apos;);    // 用户名修改，在访问 phpmemcache.php 需要进行认证</div><div class="line">define(&apos;ADMIN_PASSWORD&apos;,&apos;xxxx&apos;);    // 密码</div><div class="line">define(&apos;DATE_FORMAT&apos;,&apos;Y/m/d H:i:s&apos;);</div><div class="line">define(&apos;GRAPH_SIZE&apos;,200);</div><div class="line">define(&apos;MAX_ITEM_DUMP&apos;,50);</div><div class="line"></div><div class="line">$MEMCACHE_SERVERS[] = &apos;127.0.0.1:11211&apos;; // 加入需要监控的memcached服务器</div><div class="line">//$MEMCACHE_SERVERS[] = &apos;192.168.200.104:11212&apos;; // add more as an array</div></pre></td></tr></table></figure></p>
<p>浏览器访问<br><img src="http://n.sinaimg.cn/games/3ece443e/20160929/phpmemcache.png?1" alt="phpmemcache浏览器访问效果"></p>
<h3 id="利用Stats命令查看"><a href="#利用Stats命令查看" class="headerlink" title="利用Stats命令查看"></a>利用Stats命令查看</h3><p>利用stats命令可以查看当前memcached的各种状态<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div></pre></td><td class="code"><pre><div class="line">telnet 127.0.0.1 11211</div><div class="line">Trying 127.0.0.1...</div><div class="line">Connected to 127.0.0.1.</div><div class="line">Escape character is &apos;^]&apos;.</div><div class="line">stats</div><div class="line">STAT pid 24732</div><div class="line">STAT uptime 66597</div><div class="line">STAT time 1475115983</div><div class="line">STAT version 1.4.31</div><div class="line">STAT libevent 2.0.22-stable</div><div class="line">STAT pointer_size 64</div><div class="line">STAT rusage_user 6.194421</div><div class="line">STAT rusage_system 2.419890</div><div class="line">STAT curr_connections 10</div><div class="line">STAT total_connections 16</div><div class="line">STAT connection_structures 11</div><div class="line">STAT reserved_fds 20</div><div class="line">STAT cmd_get 5</div><div class="line">STAT cmd_set 8</div><div class="line">STAT cmd_flush 0</div><div class="line">STAT cmd_touch 0</div><div class="line">STAT get_hits 4</div><div class="line">STAT get_misses 1</div><div class="line">STAT get_expired 0</div><div class="line">STAT get_flushed 0</div><div class="line">STAT delete_misses 0</div><div class="line">STAT delete_hits 2</div><div class="line">STAT incr_misses 0</div><div class="line">STAT incr_hits 0</div><div class="line">STAT decr_misses 0</div><div class="line">STAT decr_hits 0</div><div class="line">STAT cas_misses 0</div><div class="line">STAT cas_hits 0</div><div class="line">STAT cas_badval 0</div><div class="line">STAT touch_hits 0</div><div class="line">STAT touch_misses 0</div><div class="line">STAT auth_cmds 0</div><div class="line">STAT auth_errors 0</div><div class="line">STAT bytes_read 3850</div><div class="line">STAT bytes_written 293</div><div class="line">STAT limit_maxbytes 134217728</div><div class="line">STAT accepting_conns 1</div><div class="line">STAT listen_disabled_num 0</div><div class="line">STAT time_in_listen_disabled_us 0</div><div class="line">STAT threads 4</div><div class="line">STAT conn_yields 0</div><div class="line">STAT hash_power_level 16</div><div class="line">STAT hash_bytes 524288</div><div class="line">STAT hash_is_expanding 0</div><div class="line">STAT malloc_fails 0</div><div class="line">STAT log_worker_dropped 0</div><div class="line">STAT log_worker_written 0</div><div class="line">STAT log_watcher_skipped 0</div><div class="line">STAT log_watcher_sent 0</div><div class="line">STAT bytes 0</div><div class="line">STAT curr_items 0</div><div class="line">STAT total_items 6</div><div class="line">STAT expired_unfetched 0</div><div class="line">STAT evicted_unfetched 0</div><div class="line">STAT evictions 0</div><div class="line">STAT reclaimed 2</div><div class="line">STAT crawler_reclaimed 0</div><div class="line">STAT crawler_items_checked 0</div><div class="line">STAT lrutail_reflocked 0</div><div class="line">END</div></pre></td></tr></table></figure></p>
<p>Stats详解</p>
<table>
<thead>
<tr>
<th>选项</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>pid</td>
<td>memcache服务器的进程ID</td>
</tr>
<tr>
<td>uptime</td>
<td>服务器已经运行的秒数</td>
</tr>
<tr>
<td>time</td>
<td>服务器当前的unix时间戳</td>
</tr>
<tr>
<td>version</td>
<td>memcache版本</td>
</tr>
<tr>
<td>pointer_size</td>
<td>当前操作系统的指针大小（32位系统一般是32bit）</td>
</tr>
<tr>
<td>rusage_user</td>
<td>进程的累计用户时间</td>
</tr>
<tr>
<td>rusage_system</td>
<td>进程的累计系统时间</td>
</tr>
<tr>
<td>curr_items</td>
<td>服务器当前存储的items数量</td>
</tr>
<tr>
<td>total_items</td>
<td>从服务器启动以后存储的items总数量</td>
</tr>
<tr>
<td>bytes</td>
<td>当前服务器存储items占用的字节数</td>
</tr>
<tr>
<td>curr_connections</td>
<td>当前打开着的连接数</td>
</tr>
<tr>
<td>total_connections</td>
<td>从服务器启动以后曾经打开过的连接数</td>
</tr>
<tr>
<td>connection_structures</td>
<td>服务器分配的连接构造数</td>
</tr>
<tr>
<td>cmd_get</td>
<td>get命令（获取）总请求次数</td>
</tr>
<tr>
<td>cmd_set</td>
<td>set命令（保存）总请求次数</td>
</tr>
<tr>
<td>get_hits</td>
<td>总命中次数</td>
</tr>
<tr>
<td>get_misses</td>
<td>总未命中次数</td>
</tr>
<tr>
<td>evictions</td>
<td>为获取空闲内存而删除的items数（分配给memcache的空间用满后需要删除旧的items来得到空间分配给新的items）</td>
</tr>
<tr>
<td>bytes_read</td>
<td>总读取字节数（请求字节数）</td>
</tr>
<tr>
<td>bytes_written</td>
<td>总发送字节数（结果字节数）</td>
</tr>
<tr>
<td>limit_maxbytes</td>
<td>分配给memcache的内存大小（字节）</td>
</tr>
<tr>
<td>threads</td>
<td>当前线程数</td>
</tr>
</tbody>
</table>
<h3 id="利用各种监控软件查看（例如：nagios监控memcache的插件）"><a href="#利用各种监控软件查看（例如：nagios监控memcache的插件）" class="headerlink" title="利用各种监控软件查看（例如：nagios监控memcache的插件）"></a>利用各种监控软件查看（例如：nagios监控memcache的插件）</h3><blockquote>
<p>只以命中率大于和小于为例两种状态。</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">vim check_memcache</div></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#!/bin/sh</span></div><div class="line"><span class="keyword">if</span> [ <span class="variable">$#</span> <span class="_">-ne</span> 1 ]</div><div class="line"><span class="keyword">then</span></div><div class="line"><span class="built_in">echo</span> <span class="string">"Usage:<span class="variable">$0</span> -c num2"</span></div><div class="line"><span class="built_in">exit</span> 0</div><div class="line"><span class="keyword">fi</span></div><div class="line">cmd_get=`/usr/<span class="built_in">local</span>/nagios/libexec/check_tcp -H localhost -p 11211 -E <span class="_">-s</span> <span class="string">'stats\r\nquit\r\n'</span> <span class="_">-e</span> <span class="string">'uptime'</span> |grep cmd_get | awk <span class="string">'&#123;print $3+0&#125;'</span>`</div><div class="line">get_hits=`/usr/<span class="built_in">local</span>/nagios/libexec/check_tcp -H localhost -p 11211 -E <span class="_">-s</span> <span class="string">'stats\r\nquit\r\n'</span> <span class="_">-e</span> <span class="string">'uptime'</span> |grep get_hits | awk <span class="string">'&#123;print $3+0&#125;'</span>`</div><div class="line">hit_rate=`<span class="built_in">echo</span> <span class="string">"<span class="variable">$get_hits</span>*100/<span class="variable">$cmd_get</span>"</span>|bc`</div><div class="line"><span class="keyword">if</span> [ <span class="variable">$hit_rate</span> <span class="_">-gt</span> <span class="variable">$1</span> ];<span class="keyword">then</span></div><div class="line"><span class="built_in">echo</span> <span class="string">"OK - hit rate is <span class="variable">$hit_rate</span> | hit_rate=<span class="variable">$hit_rate</span>; cmd_get=<span class="variable">$cmd_get</span>; get_hits=<span class="variable">$get_hits</span>"</span></div><div class="line"><span class="built_in">exit</span> 0</div><div class="line"><span class="keyword">else</span></div><div class="line"><span class="built_in">echo</span> <span class="string">"CRITICAL - hit rate is <span class="variable">$hit_rate</span> | hit_rate=<span class="variable">$hit_rate</span>; cmd_get=<span class="variable">$cmd_get</span>; get_hits=<span class="variable">$get_hits</span>"</span></div><div class="line"><span class="built_in">exit</span> 2</div><div class="line"><span class="keyword">fi</span></div></pre></td></tr></table></figure>
<p>测试命中率大于80%为正常为例;<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">eg：</div><div class="line">sh check_memcache 80</div><div class="line">root@ip-10-250-114-95:/liang# sh check_memcache 80</div><div class="line">OK - hit rate is 99 | hit_rate=99; cmd_get=142547; get_hits=141880</div></pre></td></tr></table></figure></p>
<p>以上证明命中率99%，即状态为OK.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Memcached,是高性能的分布式内存缓存服务器，主要功能就是通过缓存数据库的查询，减少对数据库的访问次数，来提高动态web应用的速度和可扩展性。&lt;/p&gt;
&lt;p&gt;memcached 是以守护程序方法运行于一个或多个服务器中，随时接受客户端的连接操作，客户端可以由各种语言编写，目前一致的客户端api包括 Perl / PHP / Python / Java / C# / C 等等。客户端在与 memcached 服务建立连接之后，接下来的事情就是存取对象了， 每个被存取的对象都有一个唯一的标识符 key，存取操作均通过这个 key进行，保存到 memcached 中的对象实际上是放置内存中的，并不是保存在平时的 cache 文件中的，这也是为什么 memcached 能够如此高效快速的原因。&lt;/p&gt;
&lt;p&gt;注意，这些对象并不是持久的， 服务停止之后， 里边的数据就会丢失。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://n.sinaimg.cn/games/3ece443e/20160929/MemcacheYingYongMoXing.png?1&quot; alt=&quot;Memcached应用模型&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Linux" scheme="https://weizhimiao.github.io/categories/Linux/"/>
    
    
      <category term="缓存" scheme="https://weizhimiao.github.io/tags/%E7%BC%93%E5%AD%98/"/>
    
      <category term="memcache" scheme="https://weizhimiao.github.io/tags/memcache/"/>
    
      <category term="memcached" scheme="https://weizhimiao.github.io/tags/memcached/"/>
    
  </entry>
  
  <entry>
    <title>linux服务和进程管理</title>
    <link href="https://weizhimiao.github.io/2016/09/28/Linux%E6%9C%8D%E5%8A%A1%E5%92%8C%E8%BF%9B%E7%A8%8B%E7%AE%A1%E7%90%86/"/>
    <id>https://weizhimiao.github.io/2016/09/28/Linux服务和进程管理/</id>
    <published>2016-09-28T10:30:00.000Z</published>
    <updated>2016-09-29T03:17:46.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://n.sinaimg.cn/games/3ece443e/20160929/LinuxFuWuHeJinChengGuanLi.png?1" alt="Linux服务和进程管理"></p>
<a id="more"></a>
<h2 id="进程管理"><a href="#进程管理" class="headerlink" title="进程管理"></a>进程管理</h2><p>进程管理的三个主要任务</p>
<ul>
<li>判断服务器的健康状态</li>
<li>查看所有正在运行的进程</li>
<li>强制终止进程</li>
</ul>
<h3 id="进程查看"><a href="#进程查看" class="headerlink" title="进程查看"></a>进程查看</h3><h4 id="ps-aux"><a href="#ps-aux" class="headerlink" title="ps aux"></a>ps aux</h4><blockquote>
<p>查看当前系统所有运行的进程（可以不加-）</p>
<ul>
<li>-a 显示前台所有进程</li>
<li>-u 显示用户名</li>
<li>-x 显示后台进程</li>
</ul>
</blockquote>
<p>命令执行结果示例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">ps aux</div><div class="line">USER       PID %CPU %MEM    VSZ   RSS TTY      STAT START   TIME COMMAND</div><div class="line">root         1  0.0  0.3  41280  3732 ?        Ss   9月26   0:02 /usr/lib/systemd/systemd --switched-root --system</div><div class="line">root         2  0.0  0.0      0     0 ?        S    9月26   0:00 [kthreadd]</div><div class="line">root         3  0.0  0.0      0     0 ?        S    9月26   0:00 [ksoftirqd/0]</div><div class="line">root         5  0.0  0.0      0     0 ?        S&lt;   9月26   0:00 [kworker/0:0H]</div><div class="line">root         6  0.0  0.0      0     0 ?        S    9月26   0:00 [kworker/u2:0]</div><div class="line">root         7  0.0  0.0      0     0 ?        S    9月26   0:00 [migration/0]</div><div class="line">root         8  0.0  0.0      0     0 ?        S    9月26   0:00 [rcu_bh]</div><div class="line">root         9  0.0  0.0      0     0 ?        S    9月26   0:00 [rcuob/0]</div><div class="line">root        10  0.0  0.0      0     0 ?        S    9月26   0:36 [rcu_sched]</div><div class="line">root        11  0.0  0.0      0     0 ?        S    9月26   0:32 [rcuos/0]</div><div class="line">···</div></pre></td></tr></table></figure></p>
<p>参数说明:</p>
<table>
<thead>
<tr>
<th>参数</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>USER</td>
<td>用户名</td>
</tr>
<tr>
<td>PID</td>
<td>进程PID 1  init  系统启动的第一个进程</td>
</tr>
<tr>
<td>%CPU</td>
<td>cpu占用百分比</td>
</tr>
<tr>
<td>%MEM</td>
<td>内存占用百分比</td>
</tr>
<tr>
<td>VSZ</td>
<td>虚拟内存占用量（KB）</td>
</tr>
<tr>
<td>RSS</td>
<td>固定内存占有量</td>
</tr>
<tr>
<td>TTY</td>
<td>登录终端  tty1-7 本地终端1-6 字符、 7图形） pts/0-255</td>
</tr>
<tr>
<td>STAT</td>
<td>状态 （S：睡眠 D：不可唤醒 R：运行 T：停止 Z：僵死 W：进入内存交换 X：死掉的进程 &lt;:高优先级 N：低优先级 L：被锁进内存 s：含子进程 +：位于后台 l：多线程）</td>
</tr>
<tr>
<td>START</td>
<td>进程触发时间</td>
</tr>
<tr>
<td>TIME</td>
<td>占用cpu时间</td>
</tr>
<tr>
<td>COMMAND</td>
<td>进程本身</td>
</tr>
</tbody>
</table>
<h4 id="pstree"><a href="#pstree" class="headerlink" title="pstree"></a>pstree</h4><blockquote>
<ul>
<li>-a 查看进程树</li>
</ul>
</blockquote>
<p>命令执行结果示例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">pstree -a</div><div class="line">systemd --switched-root --system --deserialize 21</div><div class="line">  ├─AliHids</div><div class="line">  │   └─4*[&#123;AliHids&#125;]</div><div class="line">  ├─AliYunDun</div><div class="line">  │   └─8*[&#123;AliYunDun&#125;]</div><div class="line">  ├─AliYunDunUpdate</div><div class="line">  │   └─3*[&#123;AliYunDunUpdate&#125;]</div><div class="line">  ├─agetty --noclear tty1 linux</div><div class="line">  ├─aliyun-service -d</div><div class="line">  ├─crond -n</div><div class="line">  ├─dbus-daemon --system --address=systemd: --nofork --nopidfile --systemd-activation</div><div class="line">  ├─memcached -d -m 128 -u root -p 11211</div><div class="line">  │   └─6*[&#123;memcached&#125;]</div><div class="line">  ├─nginx</div><div class="line">  │   └─nginx</div><div class="line">  ├─ntpd -u ntp:ntp -g</div><div class="line">  ├─php-fpm</div><div class="line">  │   ├─php-fpm</div><div class="line">  │   └─php-fpm</div><div class="line">  ├─rsyslogd -n</div><div class="line">  │   └─2*[&#123;rsyslogd&#125;]</div><div class="line">  ├─sshd -D</div><div class="line">  │   └─sshd</div><div class="line">  │       └─bash</div><div class="line">  │           └─pstree -a</div><div class="line">  ├─systemd-journal</div><div class="line">  ├─systemd-logind</div><div class="line">  └─systemd-udevd</div></pre></td></tr></table></figure></p>
<h4 id="top"><a href="#top" class="headerlink" title="top"></a>top</h4><blockquote>
<p>实时显示进程状态</p>
</blockquote>
<p>命令执行结果示例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">top - 15:04:52 up 2 days,  5:25,  1 user,  load average: 0.00, 0.01, 0.05</div><div class="line">Tasks:  70 total,   2 running,  68 sleeping,   0 stopped,   0 zombie</div><div class="line">%Cpu(s):  0.3 us,  0.3 sy,  0.0 ni, 99.3 id,  0.0 wa,  0.0 hi,  0.0 si,  0.0 st</div><div class="line">KiB Mem :  1016796 total,   599400 free,    41948 used,   375448 buff/cache</div><div class="line">KiB Swap:        0 total,        0 free,        0 used.   838500 avail Mem</div><div class="line"></div><div class="line">  PID USER      PR  NI    VIRT    RES    SHR S %CPU %MEM     TIME+ COMMAND</div><div class="line">  917 root      20   0   82696   9152   5456 S  0.3  0.9   5:50.76 AliHids</div><div class="line">    1 root      20   0   41280   3732   2388 S  0.0  0.4   0:02.36 systemd</div><div class="line">    2 root      20   0       0      0      0 S  0.0  0.0   0:00.01 kthreadd</div><div class="line">    3 root      20   0       0      0      0 S  0.0  0.0   0:00.00 ksoftirqd/0</div><div class="line">    5 root       0 -20       0      0      0 S  0.0  0.0   0:00.00 kworker/0:0H</div><div class="line">    6 root      20   0       0      0      0 S  0.0  0.0   0:00.26 kworker/u2:0</div><div class="line">    7 root      rt   0       0      0      0 S  0.0  0.0   0:00.00 migration/0</div><div class="line">    ···</div></pre></td></tr></table></figure></p>
<p>参数说明</p>
<ul>
<li>第一行：系统当前时间，系统持续时间， 登录用户，1,5,15分钟之前的平均负载</li>
<li>第二行：进程总数</li>
<li>第三行：CPU占用率</li>
<li>第四行：内存使用：总共，空闲，已使用，缓存</li>
<li>第五行：swap使用情况</li>
</ul>
<p>操作命令：</p>
<ul>
<li>M,按内存占用排序</li>
<li>P,安CPU占用排序</li>
<li>q,退出</li>
</ul>
<h3 id="终止进程"><a href="#终止进程" class="headerlink" title="终止进程"></a>终止进程</h3><h4 id="kill-结束单个进程"><a href="#kill-结束单个进程" class="headerlink" title="kill 结束单个进程"></a>kill 结束单个进程</h4><blockquote>
<p>kill命令是通过向进程发送指定的信号来结束相应进程的。在默认情况下，采用编号为15的TERM信号。TERM信号将终止所有不能捕获该信号的进程。对于那些可以捕获该信号的进程就要用编号为9的kill信号，强行“杀掉”该进程。</p>
<p>命令格式：kill 信号  PID</p>
</blockquote>
<p>信号，进程间的通信方式</p>
<p>我们常用的信号有</p>
<table>
<thead>
<tr>
<th>信号名称</th>
<th>信号</th>
<th>意义</th>
</tr>
</thead>
<tbody>
<tr>
<td>HUP</td>
<td>1</td>
<td>终端断线</td>
</tr>
<tr>
<td>INT</td>
<td>2</td>
<td>中断（同 Ctrl + C）</td>
</tr>
<tr>
<td>QUIT</td>
<td>3</td>
<td>退出（同 Ctrl + \）</td>
</tr>
<tr>
<td>TERM</td>
<td>15</td>
<td>终止</td>
</tr>
<tr>
<td>KILL</td>
<td>9</td>
<td>强制终止</td>
</tr>
<tr>
<td>CONT</td>
<td>18</td>
<td>继续（与STOP相反， fg/bg命令）</td>
</tr>
<tr>
<td>STOP</td>
<td>19</td>
<td>暂停（同 Ctrl + Z）</td>
</tr>
</tbody>
</table>
<p>示例：结束 memcached 进程</p>
<p>获取memcached进程pid（24428，即为memcached进程PID）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">ps -aux | grep memcache</div><div class="line">root     24428  0.0  0.0 323120   864 ?        Ssl  11:00   0:02 /usr/local/memcached/bin/memcached -d -m 128 -u root -p 11211</div><div class="line">root     24727  0.0  0.0 112664   984 pts/0    S+   15:54   0:00 grep --color=auto memcache</div><div class="line">#</div><div class="line">ps -ef | grep memcache</div><div class="line">root     24428     1  0 11:00 ?        00:00:02 /usr/local/memcached/bin/memcached -d -m 128 -u root -p 11211</div><div class="line">root     24708 24568  0 15:49 pts/0    00:00:00 grep --color=auto memcache</div></pre></td></tr></table></figure></p>
<p>或者使用pidof查看 （ pid + of ）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[root@...]# pidof memcached</div><div class="line">24428</div></pre></td></tr></table></figure></p>
<p>终止 memcached<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">kill -9 24428</div><div class="line">ps -aux | grep memcache</div><div class="line">root     24729  0.0  0.0 112664   984 pts/0    S+   15:55   0:00 grep --color=auto memcache</div></pre></td></tr></table></figure></p>
<h4 id="killall"><a href="#killall" class="headerlink" title="killall"></a>killall</h4><blockquote>
<p>杀死指定名字的进程</p>
<p>命令格式：killall 信号  进程名</p>
</blockquote>
<p>示例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">killall -9 memcached</div></pre></td></tr></table></figure></p>
<h4 id="pkill"><a href="#pkill" class="headerlink" title="pkill"></a>pkill</h4><blockquote>
<p>支持按照一定规则匹配来杀死进程</p>
<p>命令格式：pkill [options] <pattern></pattern></p>
</blockquote>
<p>示例：杀死用户 wahaha 下的所有进程<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pkill -u wahaha</div></pre></td></tr></table></figure></p>
<p>把某个终端登陆的用户踢出<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pkill -9 -t 终端号</div></pre></td></tr></table></figure></p>
<p>把本地登陆终端1登陆用户踢出<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pkill -9 -t tty1</div></pre></td></tr></table></figure></p>
<h2 id="服务管理"><a href="#服务管理" class="headerlink" title="服务管理"></a>服务管理</h2><h3 id="Linux中服务的分类"><a href="#Linux中服务的分类" class="headerlink" title="Linux中服务的分类"></a>Linux中服务的分类</h3><h4 id="系统默认安装的服务-RPM"><a href="#系统默认安装的服务-RPM" class="headerlink" title="系统默认安装的服务(RPM)"></a>系统默认安装的服务(RPM)</h4><ul>
<li>独立的服务</li>
<li>基于xinetd的服务，xinetd是系统超级守护进程<blockquote>
<p>xinetd服务其本身就是一个独立的服务。</p>
<p>当程序调用xinetd服务时，它先调用的事xinetd服务，让后xinetd服务在调用索要调用的服务进行相应。</p>
<p>Linux系统默认是没有安装xinetd服务的，需要进行安装后才能使用。</p>
</blockquote>
</li>
</ul>
<h4 id="源码包安装的服务"><a href="#源码包安装的服务" class="headerlink" title="源码包安装的服务"></a>源码包安装的服务</h4><h3 id="系统默认安装的服务"><a href="#系统默认安装的服务" class="headerlink" title="系统默认安装的服务"></a>系统默认安装的服务</h3><h4 id="如何区分服务的分类"><a href="#如何区分服务的分类" class="headerlink" title="如何区分服务的分类"></a>如何区分服务的分类</h4><p>查看服务的自启动状态<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">chkconfig  --list</div></pre></td></tr></table></figure></p>
<p>运行结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">chkconfig  --list</div><div class="line">注意：该输出结果只显示 SysV 服务，并不包含原生 systemd 服务。SysV 配置数据可能被原生 systemd 配置覆盖。</div><div class="line">      如果您想列出 systemd 服务,请执行 &apos;systemctl list-unit-files&apos;。</div><div class="line">      欲查看对特定 target 启用的服务请执行</div><div class="line">      &apos;systemctl list-dependencies [target]&apos;。</div><div class="line">aegis          	0:关	1:关	2:开	3:开	4:开	5:开	6:关</div><div class="line">agentwatch     	0:关	1:关	2:开	3:开	4:开	5:开	6:关</div><div class="line">netconsole     	0:关	1:关	2:关	3:关	4:关	5:关	6:关</div><div class="line">network        	0:关	1:关	2:开	3:开	4:开	5:开	6:关</div></pre></td></tr></table></figure></p>
<p>Linux的运行级别：0-6</p>
<table>
<thead>
<tr>
<th>级别</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>0</td>
<td>关机</td>
</tr>
<tr>
<td>1</td>
<td>单用户模式</td>
</tr>
<tr>
<td>2</td>
<td>不完全多用户，不包含NFS服务</td>
</tr>
<tr>
<td>3</td>
<td>完全多用户,字符界面</td>
</tr>
<tr>
<td>4</td>
<td>未分配</td>
</tr>
<tr>
<td>5</td>
<td>图形界面</td>
</tr>
<tr>
<td>6</td>
<td>重启</td>
</tr>
</tbody>
</table>
<p>查看当前系统的运行级别：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">runlevel</div><div class="line">N 3</div></pre></td></tr></table></figure></p>
<p>切换系统当前的运行级别：</p>
<table>
<thead>
<tr>
<th>命令</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr>
<td>init  0</td>
<td>关机                   </td>
</tr>
<tr>
<td>init  5</td>
<td>切换到图形界面（前提图形界面已经安装）</td>
</tr>
<tr>
<td>init  3</td>
<td>切换到字符界面</td>
</tr>
<tr>
<td>init  6</td>
<td>重启</td>
</tr>
</tbody>
</table>
<h4 id="独立的服务管理"><a href="#独立的服务管理" class="headerlink" title="独立的服务管理"></a>独立的服务管理</h4><ul>
<li>启动</li>
</ul>
<p>第一种方式：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">/etc/rc.d/init.d/服务名 start| stop | restart | status</div><div class="line"># 例：</div><div class="line">/etc/rc.d/init.d/httpd start</div></pre></td></tr></table></figure></p>
<p>第二种方式：（只支持RedHat系列的Linux）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">service 服务名 tart| stop | restart | status</div></pre></td></tr></table></figure></p>
<p><strong><em>service命令其本质是当命令运行时直接在/etc/rc.d/init.d目录下查找相应的服务，并进行相应的操作。）</em></strong></p>
<ul>
<li>自启动<br>-<br>第一种方式：<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">chkconfig --level 2345 服务名 on|off</div></pre></td></tr></table></figure>
</li>
</ul>
<p>第二种方式：（推荐）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">vi  /etc/rc.local (系统启动时会运行该文件)</div></pre></td></tr></table></figure></p>
<p>修改文件内容：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">touch /var/lock/subsys/local （更新系统的开机时间）</div><div class="line"># 在下一行，写入自己要启动的服务名，比如我要开机自启动httpd服务：</div><div class="line"># 就加入/etc/rc.d/init.d/httpd start</div><div class="line"># 更改后文件就是：</div><div class="line">touch /var/lock/subsys/local</div><div class="line">/etc/rc.d/init.d/httpd start</div></pre></td></tr></table></figure></p>
<h4 id="ntsysv自启动管理工具"><a href="#ntsysv自启动管理工具" class="headerlink" title="ntsysv自启动管理工具"></a>ntsysv自启动管理工具</h4><p>所有系统默认安装服务都可以使用ntsysv命令进行自启动管理。rpm包安装服务，自启动管理工具（只要rpm安装的，都可进行管理）</p>
<h3 id="源码包安装的服务-1"><a href="#源码包安装的服务-1" class="headerlink" title="源码包安装的服务"></a>源码包安装的服务</h3><p>启动<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/usr/local/apache2/bin/apachectl  start</div></pre></td></tr></table></figure></p>
<p>自启动<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">vi /etc/rc.local         </div><div class="line">加入</div><div class="line">/usr/local/apache2/bin/apachectl  start</div></pre></td></tr></table></figure></p>
<h2 id="计划任务"><a href="#计划任务" class="headerlink" title="计划任务"></a>计划任务</h2><blockquote>
<p>首先保证crond服务时启动的（crond默认是自启动的）</p>
</blockquote>
<p>命令：crontab</p>
<p>编辑格式： <em> </em> <em> </em> *  命令</p>
<p>说明：</p>
<ul>
<li>第一个*：一小时中第几分钟  0-59</li>
<li>第二个*：一天中第几个小时  0-23</li>
<li>第三个*：一个月中第几天    1-31</li>
<li>第四个*：一年第几个月      1-12</li>
<li>第五个*：一周中星期几       0-6             </li>
</ul>
<p>例<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">10  *  31  *  *  命令</div><div class="line">10  *  *  *  *  命令</div><div class="line">5  4  *  5-10  *  命令</div><div class="line">*/10  *  *  *  *  命令</div><div class="line">5 4  1,15  *  *  命令  #日期和星期不要同时指定，会超出预期</div><div class="line">5 4 10 * 5 命令</div><div class="line">*/20 4 * 5 2   命令    #每隔二十分钟</div></pre></td></tr></table></figure></p>
<p>查看系统定时任务<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">crontab  -l</div></pre></td></tr></table></figure></p>
<p>删除定时任务(慎用，删除之前记得备份数据)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">crontab  -r</div></pre></td></tr></table></figure></p>
<p><strong>注意事项：</strong></p>
<ul>
<li>选项都不能为空，必须填入，不知道的值使用通配符*表示任何时间</li>
<li>每个时间字段都可以指定多个值，不连续的值用,间隔，连续的值用-间隔</li>
<li>间隔固定时间执行书写为*/n格式</li>
<li>命令应该给出绝对路径</li>
<li>星期几何第几天不能同时出现</li>
<li>最小时间范围是分钟，最大时间范围是月</li>
</ul>
<h2 id="查看系统启动信息"><a href="#查看系统启动信息" class="headerlink" title="查看系统启动信息"></a>查看系统启动信息</h2><p>查看系统启动信息<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">dmesg</div></pre></td></tr></table></figure></p>
<p>系统启动信息日志<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cat  /var/log/dmesg</div></pre></td></tr></table></figure></p>
<p>查看eth0信息<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">dmesg | grep eth0</div></pre></td></tr></table></figure></p>
<p>查看cpu信息<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">dmesg | grep CPU</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://n.sinaimg.cn/games/3ece443e/20160929/LinuxFuWuHeJinChengGuanLi.png?1&quot; alt=&quot;Linux服务和进程管理&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Linux" scheme="https://weizhimiao.github.io/categories/Linux/"/>
    
    
      <category term="进程管理" scheme="https://weizhimiao.github.io/tags/%E8%BF%9B%E7%A8%8B%E7%AE%A1%E7%90%86/"/>
    
      <category term="服务管理" scheme="https://weizhimiao.github.io/tags/%E6%9C%8D%E5%8A%A1%E7%AE%A1%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>Nginx运行状态监控</title>
    <link href="https://weizhimiao.github.io/2016/09/27/Nginx%E8%BF%90%E8%A1%8C%E7%8A%B6%E6%80%81%E7%9B%91%E6%8E%A7/"/>
    <id>https://weizhimiao.github.io/2016/09/27/Nginx运行状态监控/</id>
    <published>2016-09-27T14:30:00.000Z</published>
    <updated>2016-09-27T09:41:45.000Z</updated>
    
    <content type="html"><![CDATA[<p>Nginx可以通过stub_status模块来查看服务器的状态信息。</p>
<a id="more"></a>
<h2 id="安装stub-status模块"><a href="#安装stub-status模块" class="headerlink" title="安装stub_status模块"></a>安装stub_status模块</h2><p>查看服务器当前是否已经编译安装过stub_status模块<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">/usr/local/nginx/sbin/nginx -V</div><div class="line">nginx version: nginx/1.11.4</div><div class="line">built by gcc 4.8.5 20150623 (Red Hat 4.8.5-4) (GCC)</div><div class="line">configure arguments: --prefix=/usr/local/nginx</div></pre></td></tr></table></figure></p>
<p>安装 stub_status 模块</p>
<p>解压相应版本的nginx源码包，<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cd nginx-1.11.4</div></pre></td></tr></table></figure></p>
<p>配置<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">./configure --prefix=/usr/local/nginx --with-http_stub_status_module</div></pre></td></tr></table></figure></p>
<p>编译（不执行make install操作）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">make</div></pre></td></tr></table></figure></p>
<p>手动替换 nginx 执行文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">mv /usr/local/nginx/sbin/nginx /usr/local/nginx/sbin/nginx.bak</div><div class="line">cp ./objs/nginx /usr/local/nginx/sbin/</div></pre></td></tr></table></figure></p>
<p>查看是否安装成功<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">/usr/local/nginx/sbin/nginx -V</div><div class="line">nginx version: nginx/1.11.4</div><div class="line">built by gcc 4.8.5 20150623 (Red Hat 4.8.5-4) (GCC)</div><div class="line">configure arguments: --prefix=/usr/local/nginx --with-http_stub_status_module</div></pre></td></tr></table></figure></p>
<h2 id="启用nginx-status配置"><a href="#启用nginx-status配置" class="headerlink" title="启用nginx status配置"></a>启用nginx status配置</h2><p>修改配置<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">vi /usr/local/nginx/conf/nginx.conf</div></pre></td></tr></table></figure></p>
<p>加入配置<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">location /ngx_status</div><div class="line">&#123;</div><div class="line">    stub_status on;</div><div class="line">    access_log off;</div><div class="line">    allow all;</div><div class="line">    #deny all;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>重启nginx<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"># /usr/local/nginx/sbin/nginx -s reload 可能或有问题，所以先停止当前nginx进程，然后在重启。</div><div class="line">/usr/local/nginx/sbin/nginx -s stop</div><div class="line">/usr/local/nginx/sbin/nginx</div></pre></td></tr></table></figure></p>
<h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>浏览器或者curl访问</p>
<p><a href="http://120.76.250.101/ngx_status" target="_blank" rel="external">http://120.76.250.101/ngx_status</a><br>或<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">curl 127.0.0.1/ngx_status</div><div class="line">Active connections: 1</div><div class="line">server accepts handled requests</div><div class="line"> 2 2 2</div><div class="line">Reading: 0 Writing: 1 Waiting: 0</div></pre></td></tr></table></figure></p>
<p>参数说明</p>
<table>
<thead>
<tr>
<th>参数</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>Active connections</td>
<td>活跃的连接数量</td>
</tr>
<tr>
<td>server accepts handled requests</td>
<td>2 2 2 表示总共处理了2个连接 , 成功创建2次握手, 总共处理了2个请求</td>
</tr>
<tr>
<td>reading</td>
<td>读取客户端的连接数.</td>
</tr>
<tr>
<td>writing</td>
<td>响应数据到客户端的数量</td>
</tr>
<tr>
<td>waiting</td>
<td>开启 keep-alive 的情况下,这个值等于 active – (reading+writing), 意思就是 Nginx 已经处理完正在等候下一次请求指令的驻留连接.</td>
</tr>
</tbody>
</table>
<p>over~</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Nginx可以通过stub_status模块来查看服务器的状态信息。&lt;/p&gt;
    
    </summary>
    
      <category term="Nginx" scheme="https://weizhimiao.github.io/categories/Nginx/"/>
    
    
      <category term="监控" scheme="https://weizhimiao.github.io/tags/%E7%9B%91%E6%8E%A7/"/>
    
  </entry>
  
  <entry>
    <title>PHP-FPM运行状态监控</title>
    <link href="https://weizhimiao.github.io/2016/09/27/PHP-FPM%E8%BF%90%E8%A1%8C%E7%8A%B6%E6%80%81%E7%9B%91%E6%8E%A7/"/>
    <id>https://weizhimiao.github.io/2016/09/27/PHP-FPM运行状态监控/</id>
    <published>2016-09-27T13:30:00.000Z</published>
    <updated>2016-09-27T09:29:18.000Z</updated>
    
    <content type="html"><![CDATA[<p>PHP-FPM内置了一个运行状态页，开启后便可查看PHP-FPM的详细运行状态，可以给我们在优化PHP-FPM时带来帮助。</p>
<a id="more"></a>
<h2 id="php-fpm配置"><a href="#php-fpm配置" class="headerlink" title="php-fpm配置"></a>php-fpm配置</h2><p>查看php-fpm配置文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ /usr/local/php56/sbin/php-fpm -t</div><div class="line">[27-Sep-2016 14:59:06] NOTICE: configuration file /usr/local/php56/etc/php-fpm.conf test is successful</div></pre></td></tr></table></figure></p>
<p>开启php-fpm的status配置<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">vi /usr/local/php56/etc/php-fpm.conf</div></pre></td></tr></table></figure></p>
<p>修改加入：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pm.status_path = /phpfpm_status</div></pre></td></tr></table></figure></p>
<p>配置文件中相关的说明<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div></pre></td><td class="code"><pre><div class="line">; The URI to view the FPM status page. If this value is not set, no URI will be</div><div class="line">; recognized as a status page. It shows the following informations:</div><div class="line">;   pool                 - the name of the pool;</div><div class="line">;   process manager      - static, dynamic or ondemand;</div><div class="line">;   start time           - the date and time FPM has started;</div><div class="line">;   start since          - number of seconds since FPM has started;</div><div class="line">;   accepted conn        - the number of request accepted by the pool;</div><div class="line">;   listen queue         - the number of request in the queue of pending</div><div class="line">;                          connections (see backlog in listen(2));</div><div class="line">;   max listen queue     - the maximum number of requests in the queue</div><div class="line">;                          of pending connections since FPM has started;</div><div class="line">;   listen queue len     - the size of the socket queue of pending connections;</div><div class="line">;   idle processes       - the number of idle processes;</div><div class="line">;   active processes     - the number of active processes;</div><div class="line">;   total processes      - the number of idle + active processes;</div><div class="line">;   max active processes - the maximum number of active processes since FPM</div><div class="line">;                          has started;</div><div class="line">;   max children reached - number of times, the process limit has been reached,</div><div class="line">;                          when pm tries to start more children (works only for</div><div class="line">;                          pm &apos;dynamic&apos; and &apos;ondemand&apos;);</div><div class="line">; Value are updated in real time.</div><div class="line">; Value are updated in real time.</div><div class="line">; Example output:</div><div class="line">;   pool:                 www</div><div class="line">;   process manager:      static</div><div class="line">;   start time:           01/Jul/2011:17:53:49 +0200</div><div class="line">;   start since:          62636</div><div class="line">;   accepted conn:        190460</div><div class="line">;   listen queue:         0</div><div class="line">;   max listen queue:     1</div><div class="line">;   listen queue len:     42</div><div class="line">;   idle processes:       4</div><div class="line">;   active processes:     11</div><div class="line">;   total processes:      15</div><div class="line">;   max active processes: 12</div><div class="line">;   max children reached: 0</div><div class="line">;</div><div class="line">; By default the status page output is formatted as text/plain. Passing either</div><div class="line">; &apos;html&apos;, &apos;xml&apos; or &apos;json&apos; in the query string will return the corresponding</div><div class="line">; output syntax. Example:</div><div class="line">;   http://www.foo.bar/status</div><div class="line">;   http://www.foo.bar/status?json</div><div class="line">;   http://www.foo.bar/status?html</div><div class="line">;   http://www.foo.bar/status?xml</div><div class="line">;</div><div class="line">; By default the status page only outputs short status. Passing &apos;full&apos; in the</div><div class="line">; query string will also return status for each pool process.</div><div class="line">; Example:</div><div class="line">;   http://www.foo.bar/status?full</div><div class="line">;   http://www.foo.bar/status?json&amp;full</div><div class="line">;   http://www.foo.bar/status?html&amp;full</div><div class="line">;   http://www.foo.bar/status?xml&amp;full</div><div class="line">; The Full status returns for each process:</div><div class="line">; The Full status returns for each process:</div><div class="line">;   pid                  - the PID of the process;</div><div class="line">;   state                - the state of the process (Idle, Running, ...);</div><div class="line">;   start time           - the date and time the process has started;</div><div class="line">;   start since          - the number of seconds since the process has started;</div><div class="line">;   requests             - the number of requests the process has served;</div><div class="line">;   request duration     - the duration in µs of the requests;</div><div class="line">;   request method       - the request method (GET, POST, ...);</div><div class="line">;   request URI          - the request URI with the query string;</div><div class="line">;   content length       - the content length of the request (only with POST);</div><div class="line">;   user                 - the user (PHP_AUTH_USER) (or &apos;-&apos; if not set);</div><div class="line">;   script               - the main script called (or &apos;-&apos; if not set);</div><div class="line">;   last request cpu     - the %cpu the last request consumed</div><div class="line">;                          it&apos;s always 0 if the process is not in Idle state</div><div class="line">;                          because CPU calculation is done when the request</div><div class="line">;                          processing has terminated;</div><div class="line">;   last request memory  - the max amount of memory the last request consumed</div><div class="line">;                          it&apos;s always 0 if the process is not in Idle state</div><div class="line">;                          because memory calculation is done when the request</div><div class="line">;                          processing has terminated;</div><div class="line">; If the process is in Idle state, then informations are related to the</div><div class="line">; last request the process has served. Otherwise informations are related to</div><div class="line">; the current request being served.</div><div class="line">; Example output:</div><div class="line">;   ************************</div><div class="line">;   pid:                  31330</div><div class="line">;   state:                Running</div><div class="line">;   start time:           01/Jul/2011:17:53:49 +0200</div><div class="line">;   start since:          63087</div><div class="line">;   requests:             12808</div><div class="line">;   request duration:     1250261</div><div class="line">;   request method:       GET</div><div class="line">;   request URI:          /test_mem.php?N=10000</div><div class="line">;   content length:       0</div><div class="line">;   user:                 -</div><div class="line">;   script:               /home/fat/web/docs/php/test_mem.php</div><div class="line">;   last request cpu:     0.00</div><div class="line">;   last request memory:  0</div><div class="line">;</div><div class="line">; Note: There is a real-time FPM status monitoring sample web page available</div><div class="line">;       It&apos;s available in: /usr/local/php56/share/php/fpm/status.html</div><div class="line">;</div><div class="line">; Note: The value must start with a leading slash (/). The value can be</div><div class="line">;       anything, but it may not be a good idea to use the .php extension or it</div><div class="line">;       may conflict with a real PHP file.</div><div class="line">; Default Value: not set</div><div class="line">pm.status_path = /phpfpm_status</div></pre></td></tr></table></figure></p>
<h2 id="重启PHP-FPM"><a href="#重启PHP-FPM" class="headerlink" title="重启PHP-FPM"></a>重启PHP-FPM</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">kill -USR2 `cat /usr/local/php56/var/run/php-fpm.pid`</div></pre></td></tr></table></figure>
<h2 id="配置nginx代理"><a href="#配置nginx代理" class="headerlink" title="配置nginx代理"></a>配置nginx代理</h2><p>查看nginx配置文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">/usr/local/nginx/sbin/nginx -t</div><div class="line">nginx: the configuration file /usr/local/nginx/conf/nginx.conf syntax is ok</div><div class="line">nginx: configuration file /usr/local/nginx/conf/nginx.conf test is successful</div></pre></td></tr></table></figure></p>
<p>修改配置<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">vi /usr/local/nginx/conf/nginx.conf</div></pre></td></tr></table></figure></p>
<p>加入：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">location /phpfpm_status &#123;</div><div class="line">        fastcgi_pass  127.0.0.1:9000;</div><div class="line">        include fastcgi_params;</div><div class="line">        fastcgi_param SCRIPT_FILENAME $fastcgi_script_name;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>重启nginx<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/usr/local/nginx/sbin/nginx -s reload</div></pre></td></tr></table></figure></p>
<h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>浏览器或者通过curl访问</p>
<p><a href="http://127.0.0.1/phpfpm_status" target="_blank" rel="external">http://you-server-ip/phpfpm_status</a></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">[root@iZwz9g8nzni5lj69dhlesoZ ~]# curl 127.0.0.1/phpfpm_status</div><div class="line">pool:                 www</div><div class="line">process manager:      dynamic</div><div class="line">start time:           27/Sep/2016:15:08:57 +0800</div><div class="line">start since:          385</div><div class="line">accepted conn:        3</div><div class="line">listen queue:         0</div><div class="line">max listen queue:     0</div><div class="line">listen queue len:     128</div><div class="line">idle processes:       1</div><div class="line">active processes:     1</div><div class="line">total processes:      2</div><div class="line">max active processes: 1</div><div class="line">max children reached: 0</div><div class="line">slow requests:        0</div></pre></td></tr></table></figure>
<ul>
<li>参数说明：</li>
</ul>
<table>
<thead>
<tr>
<th>参数</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>pool</td>
<td>fpm池子名称，大多数为www</td>
</tr>
<tr>
<td>process manager</td>
<td>进程管理方式,值：static, dynamic or ondemand. dynamic</td>
</tr>
<tr>
<td>start time</td>
<td>启动日期,如果reload了php-fpm，时间会更新</td>
</tr>
<tr>
<td>start since</td>
<td>运行时长</td>
</tr>
<tr>
<td>accepted conn</td>
<td>当前池子接受的请求数</td>
</tr>
<tr>
<td>listen queue</td>
<td>请求等待队列，如果这个值不为0，那么要增加FPM的进程数量</td>
</tr>
<tr>
<td>max listen queue</td>
<td>请求等待队列最高的数量</td>
</tr>
<tr>
<td>listen queue len</td>
<td>socket等待队列长度</td>
</tr>
<tr>
<td>idle processes</td>
<td>空闲进程数量</td>
</tr>
<tr>
<td>active processes</td>
<td>活跃进程数量</td>
</tr>
<tr>
<td>total processes</td>
<td>总进程数量</td>
</tr>
<tr>
<td>max active processes</td>
<td>最大的活跃进程数量（FPM启动开始算）</td>
</tr>
<tr>
<td>max children reached</td>
<td>大道进程最大数量限制的次数，如果这个数量不为0，那说明你的最大进程数量太小了，请改大一点。</td>
</tr>
<tr>
<td>slow requests</td>
<td>启用了php-fpm slow-log，缓慢请求的数量</td>
</tr>
</tbody>
</table>
<ul>
<li>php-fpm还提供不同格式的输入，方便我们查看和与其他监控系统对接。</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">http://www.foo.bar/status       #默认纯文本</div><div class="line">http://www.foo.bar/status?json  #json格式</div><div class="line">http://www.foo.bar/status?html  #html</div><div class="line">http://www.foo.bar/status?xml   #xml</div></pre></td></tr></table></figure>
<ul>
<li>通过增加full参数，php-fpm还提供查看所有进程的运行状况</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">http://www.foo.bar/status?full        #默认纯文本</div><div class="line">http://www.foo.bar/status?json&amp;full   #json格式</div><div class="line">http://www.foo.bar/status?html&amp;full   #html</div><div class="line">http://www.foo.bar/status?xml&amp;full    #xml</div></pre></td></tr></table></figure>
<p>示例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line">curl &apos;http://127.0.0.1/phpfpm_status?full&apos;</div><div class="line">pool:                 www</div><div class="line">process manager:      dynamic</div><div class="line">start time:           27/Sep/2016:15:08:57 +0800</div><div class="line">start since:          1546</div><div class="line">accepted conn:        14</div><div class="line">listen queue:         0</div><div class="line">max listen queue:     0</div><div class="line">listen queue len:     128</div><div class="line">idle processes:       1</div><div class="line">active processes:     1</div><div class="line">total processes:      2</div><div class="line">max active processes: 1</div><div class="line">max children reached: 0</div><div class="line">slow requests:        0</div><div class="line">************************</div><div class="line">pid:                  12132</div><div class="line">state:                Running</div><div class="line">start time:           27/Sep/2016:15:08:57 +0800</div><div class="line">start since:          1546</div><div class="line">requests:             7</div><div class="line">request duration:     117</div><div class="line">request method:       GET</div><div class="line">request URI:          /phpfpm_status?full</div><div class="line">content length:       0</div><div class="line">user:                 -</div><div class="line">script:               /phpfpm_status</div><div class="line">last request cpu:     0.00</div><div class="line">last request memory:  0</div><div class="line">************************</div><div class="line">pid:                  12133</div><div class="line">state:                Idle</div><div class="line">start time:           27/Sep/2016:15:08:57 +0800</div><div class="line">start since:          1546</div><div class="line">requests:             7</div><div class="line">request duration:     132</div><div class="line">request method:       GET</div><div class="line">request URI:          /phpfpm_status?html&amp;full</div><div class="line">content length:       0</div><div class="line">user:                 -</div><div class="line">script:               /phpfpm_status</div><div class="line">last request cpu:     0.00</div><div class="line">last request memory:  262144</div></pre></td></tr></table></figure></p>
<p>具体进程参数说明</p>
<table>
<thead>
<tr>
<th>参数</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>pid</td>
<td>进程号</td>
</tr>
<tr>
<td>state</td>
<td>状态（Idle - 闲置， Running - 运行， …）</td>
</tr>
<tr>
<td>start time</td>
<td>进程开始运行时间</td>
</tr>
<tr>
<td>start since</td>
<td>进程开始持续时间（单位：秒）</td>
</tr>
<tr>
<td>requests</td>
<td>进程已经处理的请求数</td>
</tr>
<tr>
<td>request duration</td>
<td>µs的请求数量</td>
</tr>
<tr>
<td>request method</td>
<td>请求方式（GET, POST, …）</td>
</tr>
<tr>
<td>request URI</td>
<td>请求URI</td>
</tr>
<tr>
<td>content length</td>
<td>请求内容长度（仅限POST请求）</td>
</tr>
<tr>
<td>user</td>
<td>PHP_AUTH_USER （’-‘， 表示没有限制）</td>
</tr>
<tr>
<td>script</td>
<td>请求文件</td>
</tr>
<tr>
<td>last request cpu</td>
<td>最后一次请求占用CPU百分比（如果进程不是处于 <code>Idle - 闲置</code> 状态，该值总是0，因为当请求处理终止时，CPU计算已经完成）</td>
</tr>
<tr>
<td>last request memory</td>
<td>最后一次请求占用内存（如果进程不是处于 <code>Idle - 闲置</code> 状态，该值总是0，因为当请求处理终止时，memory计算已经完成）</td>
</tr>
</tbody>
</table>
<p><strong>Tips:</strong><br>如果进程处于 idle 状态，所显示的信息就是基于最后一次请求给出的状态，否则就是基于本次请求的状态。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;PHP-FPM内置了一个运行状态页，开启后便可查看PHP-FPM的详细运行状态，可以给我们在优化PHP-FPM时带来帮助。&lt;/p&gt;
    
    </summary>
    
      <category term="PHP" scheme="https://weizhimiao.github.io/categories/PHP/"/>
    
    
      <category term="监控" scheme="https://weizhimiao.github.io/tags/%E7%9B%91%E6%8E%A7/"/>
    
      <category term="PHP-FPM" scheme="https://weizhimiao.github.io/tags/PHP-FPM/"/>
    
  </entry>
  
  <entry>
    <title>Redis安装与管理</title>
    <link href="https://weizhimiao.github.io/2016/09/27/Redis%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E4%B8%8E%E6%93%8D%E4%BD%9C/"/>
    <id>https://weizhimiao.github.io/2016/09/27/Redis数据类型与操作/</id>
    <published>2016-09-27T12:30:00.000Z</published>
    <updated>2016-10-07T12:54:14.000Z</updated>
    
    <content type="html"><![CDATA[<p>Redis共有5种数据类型</p>
<ul>
<li>string(字符串)</li>
<li>hash(哈希表)</li>
<li>list(双向队列)</li>
<li>set(集合)</li>
<li>zset(有序集合)</li>
</ul>
<a id="more"></a>
<h2 id="String（子串类型）"><a href="#String（子串类型）" class="headerlink" title="String（子串类型）"></a>String（子串类型）</h2><p>String是最简单的类型，一个Key对应一个Value，string类型是二进制安全的。Redis的string可以包含任何数据，比如jpg图片或者序列化的对象。</p>
<ol>
<li>set 键  “值”<blockquote>
<p>设置一个键和值，键存在则覆盖，返回ok</p>
</blockquote>
</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">127.0.0.1:6379&gt; set name liming</div><div class="line">OK</div></pre></td></tr></table></figure>
<ol>
<li>get 键<blockquote>
<p>获取一个键的值，返回值</p>
</blockquote>
</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">127.0.0.1:6379&gt; get name</div><div class="line">&quot;liming&quot;</div></pre></td></tr></table></figure>
<ol>
<li>setnx 键 值<blockquote>
<p>只有当该键不存在时设置一个键的值，若键已存在则返回0表示失败（防止覆盖），</p>
</blockquote>
</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">127.0.0.1:6379&gt; setnx age 18</div><div class="line">(integer) 1</div><div class="line">127.0.0.1:6379&gt; setnx age 18</div><div class="line">(integer) 0</div></pre></td></tr></table></figure>
<ol>
<li>setex 键 [有效时间] 值<blockquote>
<p>设置一个指定有效期的键和值（单位秒）。不写有效时间则表示永久有效，等价于set</p>
</blockquote>
</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">127.0.0.1:6379&gt; setex movie 30 canglaoshi</div><div class="line">OK</div><div class="line">127.0.0.1:6379&gt; ttl movie				//获取键的有效时间</div><div class="line">(integer) 26</div><div class="line">127.0.0.1:6379&gt; ttl movie</div><div class="line">(integer) 20</div><div class="line">127.0.0.1:6379&gt; get movie</div><div class="line">&quot;canglaoshi&quot;</div><div class="line">127.0.0.1:6379&gt; ttl movie</div><div class="line">(integer) -2</div><div class="line">127.0.0.1:6379&gt; get movie</div><div class="line">(nil)</div></pre></td></tr></table></figure>
<ol>
<li>ttl 键<blockquote>
<p>以秒为单位，返回给定 key 的剩余生存时间</p>
<ul>
<li>当 key 不存在时，返回 -2 。<ul>
<li>当 key 存在但没有设置剩余生存时间时，返回 -1 。</li>
<li>否则，以秒为单位，返回 key 的剩余生存时间。</li>
</ul>
</li>
</ul>
</blockquote>
</li>
</ol>
<ol>
<li>setrange 键 位置 子字串<blockquote>
<p>替换子字符串 (替换长度由子子串长度决定)</p>
</blockquote>
</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">127.0.0.1:6379&gt; set key1 &quot;hello world&quot;</div><div class="line">OK</div><div class="line">127.0.0.1:6379&gt; get key1</div><div class="line">&quot;hello world&quot;</div><div class="line">127.0.0.1:6379&gt; setrange key1 6 liming</div><div class="line">(integer) 12</div><div class="line">127.0.0.1:6379&gt; get key1</div><div class="line">&quot;hello liming&quot;</div><div class="line">	#将key1键对应值的第6个位置开始替换（字符串位置从0开始计算）</div></pre></td></tr></table></figure>
<ol>
<li>mset 键1 值1 键2 值2 键3 值3 ….<blockquote>
<p>批量设置键和值,成功则返回ok</p>
</blockquote>
</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">127.0.0.1:6379&gt; mset name1 lm name2 sc name3 zjj</div><div class="line">OK</div></pre></td></tr></table></figure>
<ol>
<li>mget 键1 键2 键3….<blockquote>
<p>批量获取值</p>
</blockquote>
</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">127.0.0.1:6379&gt; mget name1 name2 name3</div><div class="line">1) &quot;lm&quot;</div><div class="line">2) &quot;sc&quot;</div><div class="line">3) &quot;zjj&quot;</div></pre></td></tr></table></figure>
<ol>
<li>msetnx 键1 值1 键2 值2 键3 值3 ….<blockquote>
<p>批量设置不存在的键和值,成功则返回ok</p>
</blockquote>
</li>
</ol>
<ol>
<li>getset 键 新值<blockquote>
<p>获取原值，并设置新值</p>
</blockquote>
</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">127.0.0.1:6379&gt; set name &quot;shen chao&quot;</div><div class="line">OK</div><div class="line">127.0.0.1:6379&gt; get name</div><div class="line">&quot;shen chao&quot;</div><div class="line">127.0.0.1:6379&gt; getset name &quot;liming&quot;</div><div class="line">&quot;shen chao&quot;</div><div class="line">127.0.0.1:6379&gt; get name</div><div class="line">&quot;liming&quot;</div></pre></td></tr></table></figure>
<ol>
<li>getrange 键 0 4  <blockquote>
<p>获取指定范围的值（获取指定0到4位置上的值，字符串位置从0开始计算）</p>
</blockquote>
</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">127.0.0.1:6379&gt; getrange key1 0 4</div><div class="line">&quot;hello&quot;</div></pre></td></tr></table></figure>
<ol>
<li>incr 键  <blockquote>
<p>指定键的值做加1操作，返回加后的结果（只能加数字）。</p>
</blockquote>
</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">127.0.0.1:6379&gt; set age 18</div><div class="line">OK</div><div class="line">127.0.0.1:6379&gt; incr age</div><div class="line">(integer) 19</div><div class="line">127.0.0.1:6379&gt; get age</div><div class="line">&quot;19&quot;</div></pre></td></tr></table></figure>
<ol>
<li>incrby 键 m    <blockquote>
<p>其中m可以是正整数或负整数.加指定值，键不存在时候会设置键</p>
</blockquote>
</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">127.0.0.1:6379&gt; incrby age 10</div><div class="line">(integer) 29</div><div class="line">127.0.0.1:6379&gt; get age</div><div class="line">&quot;29&quot;</div><div class="line">127.0.0.1:6379&gt; incrby age -5</div><div class="line">(integer) 24</div></pre></td></tr></table></figure>
<ol>
<li>decr 键<blockquote>
<p>指定键的值做减1操作，返回减后的结果。</p>
</blockquote>
</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">127.0.0.1:6379&gt; decr age</div><div class="line">(integer) 23</div><div class="line">127.0.0.1:6379&gt; get age</div><div class="line">&quot;23&quot;</div></pre></td></tr></table></figure>
<ol>
<li>decrby 键 n<blockquote>
<p>其中n可以是正整数或负整数.设置某个键减上指定值</p>
</blockquote>
</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">127.0.0.1:6379&gt; decrby age 5</div><div class="line">(integer) 18</div><div class="line">127.0.0.1:6379&gt; decrby age -10</div><div class="line">(integer) 28</div><div class="line">127.0.0.1:6379&gt; get age</div><div class="line">&quot;28&quot;</div></pre></td></tr></table></figure>
<ol>
<li>append  键 追加字串<blockquote>
<p>给指定key的字符串追加value，返回新字符串值的长度</p>
</blockquote>
</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">127.0.0.1:6379&gt; append name1 &quot; have a hot body!&quot;</div><div class="line">(integer) 19</div><div class="line">127.0.0.1:6379&gt; get name1</div><div class="line">&quot;lm have a hot body!&quot;</div></pre></td></tr></table></figure>
<ol>
<li>strlen 键名<blockquote>
<p>strlen求一个键长度</p>
</blockquote>
</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">127.0.0.1:6379&gt; strlen name1</div><div class="line">(integer) 19</div></pre></td></tr></table></figure>
<ol>
<li>del命令：<blockquote>
<p>删除一个键</p>
</blockquote>
</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">127.0.0.1:6379&gt; del name3</div><div class="line">(integer) 1</div><div class="line">127.0.0.1:6379&gt; get name3</div><div class="line">(nil)</div></pre></td></tr></table></figure>
<h2 id="hashs类型"><a href="#hashs类型" class="headerlink" title="hashs类型"></a>hashs类型</h2><blockquote>
<p>注意：redis中没有表概念，所有的数据都存入键中。</p>
<ul>
<li>string键类型：所有的值（可以是任何数据类型）都保存在一个键当中，放在一个内存块中<ul>
<li>hashs键类型：所有的值也都保存在一个键当中，只是放在不同的内存块中，每个块称作字段</li>
</ul>
</li>
</ul>
</blockquote>
<ol>
<li>hset key field value<blockquote>
<p>设置一个键，在键中保存字段和值<br>格式： hset 哈希集（键） 字段 值</p>
</blockquote>
</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">127.0.0.1:6379&gt; hset user1 name4 ysm</div><div class="line">(integer) 1</div><div class="line">127.0.0.1:6379&gt; keys *					//查看库中所有的键</div><div class="line">1) &quot;aa&quot;</div><div class="line">2) &quot;name&quot;</div><div class="line">3) &quot;name1&quot;</div><div class="line">4) &quot;user1&quot;</div><div class="line">5) &quot;name2&quot;</div><div class="line">6) &quot;age&quot;</div><div class="line">7) &quot;key1&quot;</div></pre></td></tr></table></figure>
<ol>
<li>hsetnx  键  字段  值<blockquote>
<p>   设置一个键中，不存在的字段和值。如果字段存在则报错（成功返回1，失败返回0）</p>
</blockquote>
</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">127.0.0.1:6379&gt; hsetnx user1 name1 lm</div><div class="line">(integer) 1</div><div class="line">127.0.0.1:6379&gt; hsetnx user1 name1 sc</div><div class="line">(integer) 0					//报错</div><div class="line">127.0.0.1:6379&gt; hget user1 name1</div><div class="line">&quot;lm&quot;						//内容没有更新</div></pre></td></tr></table></figure>
<ol>
<li>hmset  键  字段1  值1  字段2  值2 …<blockquote>
<p>   在一个键中，批量设置字段</p>
</blockquote>
</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">127.0.0.1:6379&gt; hmset user2 name liming age 36 interest AV-Girl</div><div class="line">OK</div></pre></td></tr></table></figure>
<ol>
<li>hget 键 字段<blockquote>
<p>   获取键中的一个指定字段的值</p>
</blockquote>
</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">127.0.0.1:6379&gt; hget user1 name1</div><div class="line">&quot;lm&quot;</div><div class="line">127.0.0.1:6379&gt; hget user2 interest</div><div class="line">&quot;AV-Girl&quot;</div></pre></td></tr></table></figure>
<ol>
<li>hmget 键 字段1 [字段2…]<blockquote>
<p>   获取键中一个或多个字段的值</p>
</blockquote>
</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">127.0.0.1:6379&gt; hmget user2 name age interest</div><div class="line">1) &quot;liming&quot;</div><div class="line">2) &quot;36&quot;</div><div class="line">3) &quot;AV-Girl&quot;</div></pre></td></tr></table></figure>
<ol>
<li>hexists ：<blockquote>
<p>判断指定的字段是否存在于键中</p>
</blockquote>
</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">127.0.0.1:6379&gt; HEXISTS user2 age</div><div class="line">(integer) 1							//存在</div><div class="line">127.0.0.1:6379&gt; HEXISTS user1 age</div><div class="line">(integer) 0							//不存在</div></pre></td></tr></table></figure>
<ol>
<li>hlen ：获取键中的字段数量</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">127.0.0.1:6379&gt; hlen user2</div><div class="line">(integer) 3							//user2键中有3个字段</div></pre></td></tr></table></figure>
<ol>
<li>hkeys ：获取键中的所有字段名</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">127.0.0.1:6379&gt; hkeys user2</div><div class="line">1) &quot;name&quot;</div><div class="line">2) &quot;age&quot;</div><div class="line">3) &quot;interest&quot;</div></pre></td></tr></table></figure>
<ol>
<li>hvals：获取键中所有字段的值</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">127.0.0.1:6379&gt; hvals user2</div><div class="line">1) &quot;liming&quot;</div><div class="line">2) &quot;36&quot;</div><div class="line">3) &quot;AV-Girl&quot;</div></pre></td></tr></table></figure>
<ol>
<li>hgetall ：获取键中的所有字段和值</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">127.0.0.1:6379&gt; hgetall user2</div><div class="line">1) &quot;name&quot;</div><div class="line">2) &quot;liming&quot;</div><div class="line">3) &quot;age&quot;</div><div class="line">4) &quot;36&quot;</div><div class="line">5) &quot;interest&quot;</div><div class="line">6) &quot;AV-Girl&quot;</div></pre></td></tr></table></figure>
<ol>
<li>hincrby：将键中指定字段的值，增加指定的数字</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">127.0.0.1:6379&gt; hincrby user2 age 5</div><div class="line">(integer) 41</div><div class="line"></div><div class="line">127.0.0.1:6379&gt; HINCRBY user2 name 5</div><div class="line">(error) ERR hash value is not an integer	//值不是数字的字段，不能加数字</div></pre></td></tr></table></figure>
<ol>
<li>hdel 键 字段1 字段2<blockquote>
<p>   删除键中的一个或多个字段</p>
</blockquote>
</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">127.0.0.1:6379&gt; hdel user2 age interest</div><div class="line">(integer) 2</div><div class="line">127.0.0.1:6379&gt; hkeys user2</div><div class="line">1) &quot;name&quot;</div><div class="line">	//删除一个键，还是要使用del命令</div></pre></td></tr></table></figure>
<h2 id="list类型（双向链表结构）"><a href="#list类型（双向链表结构）" class="headerlink" title="list类型（双向链表结构）"></a>list类型（双向链表结构）</h2><p>List是一个链表结构，主要功能是push、pop、获取一个范围的所有值等等，操作中key理解为链表的名字。Redis的list类型其实就是一个每个子元素都是string类型的双向链表。列表允许有重复值</p>
<ol>
<li>lpush 键 值1 [值2…]<blockquote>
<p>从队列左边向队列写入一个或多个值（认为队列的左面为队列头，右边为队列尾）</p>
</blockquote>
</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">127.0.0.1:6379&gt; lpush list1 1</div><div class="line">(integer) 1</div><div class="line">127.0.0.1:6379&gt; lpush list1 2</div><div class="line">(integer) 2</div><div class="line">127.0.0.1:6379&gt; lpush list1 3</div><div class="line">(integer) 3</div><div class="line">127.0.0.1:6379&gt; lpush list1 4</div><div class="line">(integer) 4</div><div class="line"></div><div class="line">127.0.0.1:6379&gt; lpush list2 one two three four</div><div class="line">(integer) 4</div></pre></td></tr></table></figure>
<ol>
<li>lrange 键 起始下标 终止下标<blockquote>
<p>   从队列中获取指定的返回值（从队列左边向右获取）<br>下标：</p>
<ul>
<li>0代表队列中第一个元素，1代表第二个元素，依次类推</li>
<li>-1代表队列中最后一个元素，-2代表倒数第二个元素</li>
</ul>
</blockquote>
</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">127.0.0.1:6379&gt; LRANGE list1 0 -1</div><div class="line">1) &quot;4&quot;		//4是从左面写入队列的最后一个值，所以在队列的开头</div><div class="line">2) &quot;3&quot;</div><div class="line">3) &quot;2&quot;</div><div class="line">4) &quot;1&quot;		//1是从左面写入队列的第一个值，所以直接放到了队列尾。</div><div class="line"></div><div class="line">127.0.0.1:6379&gt; LRANGE list2 0 -1</div><div class="line">1) &quot;four&quot;</div><div class="line">2) &quot;three&quot;</div><div class="line">3) &quot;two&quot;</div><div class="line">4) &quot;one&quot;</div><div class="line"></div><div class="line">127.0.0.1:6379&gt; LRANGE list1 0 1</div><div class="line">1) &quot;4&quot;</div><div class="line">2) &quot;3&quot;</div><div class="line"></div><div class="line">127.0.0.1:6379&gt; LRANGE list2 -4 3</div><div class="line">1) &quot;four&quot;		//-4代表从队列右边数第四个元素</div><div class="line">2) &quot;three&quot;</div><div class="line">3) &quot;two&quot;</div><div class="line">4) &quot;one&quot;		//3代表从队列左边数第四个元素</div></pre></td></tr></table></figure>
<ol>
<li>rpush 键 值1 [值2…]<blockquote>
<p>   从队列右边向队列写入一个或多个值</p>
</blockquote>
</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">127.0.0.1:6379&gt; RPUSH list3 1 2 3 4</div><div class="line">(integer) 4</div><div class="line">127.0.0.1:6379&gt; LRANGE list3 0 -1</div><div class="line">1) &quot;1&quot;		//从队列右边向队列写入值，第一个值就会写到队列的开头</div><div class="line">2) &quot;2&quot;</div><div class="line">3) &quot;3&quot;</div><div class="line">4) &quot;4&quot;</div></pre></td></tr></table></figure>
<ol>
<li>linsert  键  before|after  原值  新值<blockquote>
<p>   在队列中指定元素之前或之后插入新值</p>
</blockquote>
</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">127.0.0.1:6379&gt; LINSERT list3 before 3 hello</div><div class="line">(integer) 5</div><div class="line">127.0.0.1:6379&gt; LRANGE list3 0 -1</div><div class="line">1) &quot;1&quot;</div><div class="line">2) &quot;2&quot;</div><div class="line">3) &quot;hello&quot;</div><div class="line">4) &quot;3&quot;</div><div class="line">5) &quot;4&quot;</div></pre></td></tr></table></figure>
<ol>
<li>lset  键  下标  新值<blockquote>
<p>   给队列中指定元素设定新值</p>
</blockquote>
</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">127.0.0.1:6379&gt; lset list3 2 &quot;5&quot;</div><div class="line">OK</div><div class="line">127.0.0.1:6379&gt; LRANGE list3 0 -1</div><div class="line">1) &quot;1&quot;</div><div class="line">2) &quot;2&quot;</div><div class="line">3) &quot;5&quot;</div><div class="line">4) &quot;3&quot;</div><div class="line">5) &quot;4&quot;</div></pre></td></tr></table></figure>
<ol>
<li>lerm  键  n  指定值<blockquote>
<p>从队列中删除n个值为“指定值”的元素</p>
<ul>
<li>n &gt; 0     从队列头向尾删除n个元素</li>
<li>n &lt; 0     从队列尾向头删除n个元素</li>
<li>n = 0    删除所有值为“指定值”的元素</li>
</ul>
</blockquote>
</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">127.0.0.1:6379&gt; rpush list4 hello 1 hello 2 hello 3 hello</div><div class="line">(integer) 7</div><div class="line">127.0.0.1:6379&gt; lrange list4 0 -1</div><div class="line">1) &quot;hello&quot;</div><div class="line">2) &quot;1&quot;</div><div class="line">3) &quot;hello&quot;</div><div class="line">4) &quot;2&quot;</div><div class="line">5) &quot;hello&quot;</div><div class="line">6) &quot;3&quot;</div><div class="line">7) &quot;hello&quot;</div><div class="line">127.0.0.1:6379&gt; lrem list4 -2 hello			//删除后两个hello</div><div class="line">(integer) 2</div><div class="line">127.0.0.1:6379&gt; lrange list4 0 -1</div><div class="line">1) &quot;hello&quot;</div><div class="line">2) &quot;1&quot;</div><div class="line">3) &quot;hello&quot;</div><div class="line">4) &quot;2&quot;</div><div class="line">5) &quot;3&quot;</div><div class="line">127.0.0.1:6379&gt; lrem list4 0 hello			//删除所有hello</div><div class="line">(integer) 2</div><div class="line">127.0.0.1:6379&gt; lrange list4 0 -1</div><div class="line">1) &quot;1&quot;</div><div class="line">2) &quot;2&quot;</div><div class="line">3) &quot;3&quot;</div></pre></td></tr></table></figure>
<ol>
<li>ltrim  键  起始下标  结束下标<blockquote>
<p>   修剪队列，让队列只保留指定指定范围内的元素</p>
</blockquote>
</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">127.0.0.1:6379&gt; RPUSH list5 1 2 3 4</div><div class="line">(integer) 4</div><div class="line">127.0.0.1:6379&gt; ltrim list5 1 2</div><div class="line">OK</div><div class="line">127.0.0.1:6379&gt; lrange list5 0 -1</div><div class="line">1) &quot;2&quot;</div><div class="line">2) &quot;3&quot;</div></pre></td></tr></table></figure>
<ol>
<li>lpop  键<blockquote>
<p>   从指定的队列左面移除一个值</p>
</blockquote>
</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">127.0.0.1:6379&gt; lrange list1 0 -1</div><div class="line">1) &quot;4&quot;</div><div class="line">2) &quot;3&quot;</div><div class="line">3) &quot;2&quot;</div><div class="line">4) &quot;1&quot;</div><div class="line">127.0.0.1:6379&gt; lpop list1</div><div class="line">&quot;4&quot;</div><div class="line">127.0.0.1:6379&gt; lrange list1 0 -1</div><div class="line">1) &quot;3&quot;</div><div class="line">2) &quot;2&quot;</div><div class="line">3) &quot;1&quot;</div></pre></td></tr></table></figure>
<ol>
<li>rpop  键<blockquote>
<p>   从指定队列的右边移除一个值</p>
</blockquote>
</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">127.0.0.1:6379&gt; lrange list1 0 -1</div><div class="line">1) &quot;3&quot;</div><div class="line">2) &quot;2&quot;</div><div class="line">3) &quot;1&quot;</div><div class="line">127.0.0.1:6379&gt; rpop list1</div><div class="line">&quot;1&quot;</div><div class="line">127.0.0.1:6379&gt; lrange list1 0 -1</div><div class="line">1) &quot;3&quot;</div><div class="line">2) &quot;2&quot;</div></pre></td></tr></table></figure>
<ol>
<li>rpoplpush  源队列  目标队列<blockquote>
<p>   移除源队列的最后一个元素，并把该元素写入目标队列</p>
</blockquote>
</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">127.0.0.1:6379&gt; lrange list1 0 -1</div><div class="line">1) &quot;3&quot;</div><div class="line">2) &quot;2&quot;</div><div class="line">127.0.0.1:6379&gt; lrange list5 0 -1</div><div class="line">1) &quot;2&quot;</div><div class="line">2) &quot;3&quot;</div><div class="line">127.0.0.1:6379&gt; RPOPLPUSH list1 list5</div><div class="line">&quot;2&quot;</div><div class="line">127.0.0.1:6379&gt; lrange list1 0 -1</div><div class="line">1) &quot;3&quot;</div><div class="line">127.0.0.1:6379&gt; lrange list5 0 -1</div><div class="line">1) &quot;2&quot;</div><div class="line">2) &quot;2&quot;</div><div class="line">3) &quot;3&quot;</div></pre></td></tr></table></figure>
<ol>
<li>lindex  键  下标<blockquote>
<p>   获取队列中指定下标元素的值</p>
</blockquote>
</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">127.0.0.1:6379&gt; lrange list2 0 -1</div><div class="line">1) &quot;four&quot;</div><div class="line">2) &quot;three&quot;</div><div class="line">3) &quot;two&quot;</div><div class="line">4) &quot;one&quot;</div><div class="line">127.0.0.1:6379&gt; lindex list2 1</div><div class="line">&quot;three&quot;</div><div class="line">127.0.0.1:6379&gt; lindex list2 3</div><div class="line">&quot;one&quot;</div></pre></td></tr></table></figure>
<ol>
<li>llen  键<blockquote>
<p>   获得队列的长度</p>
</blockquote>
</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">127.0.0.1:6379&gt; llen list2</div><div class="line">(integer) 4</div></pre></td></tr></table></figure>
<h2 id="sets类型和操作"><a href="#sets类型和操作" class="headerlink" title="sets类型和操作"></a>sets类型和操作</h2><p>Set是集合，它是string类型的无序集合。对集合我们可以取并集、交集、差集。通过这些操作我们可以实现社交网站中的好友推荐和blog的tag功能。集合不允许有重复值。</p>
<ol>
<li>sadd  键  值1[值2…]<blockquote>
<p>   添加一个或多个元素到集合中</p>
</blockquote>
</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">127.0.0.1:6379&gt; sadd mset1 1</div><div class="line">(integer) 1</div><div class="line">127.0.0.1:6379&gt; sadd mset1 2 3 4</div><div class="line">(integer) 3</div></pre></td></tr></table></figure>
<ol>
<li>smembers  键<blockquote>
<p>   获取集合里面所有的元素</p>
</blockquote>
</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">127.0.0.1:6379&gt; smembers mset1</div><div class="line">1) &quot;1&quot;</div><div class="line">2) &quot;2&quot;</div><div class="line">3) &quot;3&quot;</div><div class="line">4) &quot;4&quot;</div></pre></td></tr></table></figure>
<ol>
<li>srem  键  值1[值2…]<blockquote>
<p>   从集合中删除指定的一个或多个元素</p>
</blockquote>
</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">127.0.0.1:6379&gt; srem mset1 3 4</div><div class="line">(integer) 2</div><div class="line">127.0.0.1:6379&gt; smembers mset1</div><div class="line">1) &quot;1&quot;</div><div class="line">2) &quot;2&quot;</div><div class="line"></div><div class="line">（删除键，依然使用“del 键” 命令）</div></pre></td></tr></table></figure>
<ol>
<li>spop  键  <blockquote>
<p>   随机从集合中删除一个元素，并返回</p>
</blockquote>
</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">127.0.0.1:6379&gt; sadd mset2 4 5 6 7 8</div><div class="line">(integer) 5</div><div class="line">127.0.0.1:6379&gt; spop mset2</div><div class="line">&quot;4&quot;</div><div class="line">127.0.0.1:6379&gt; spop mset2</div><div class="line">&quot;5&quot;</div><div class="line">127.0.0.1:6379&gt; spop mset2</div><div class="line">&quot;8&quot;</div><div class="line">127.0.0.1:6379&gt; smembers mset2</div><div class="line">1) &quot;6&quot;</div><div class="line">2) &quot;7&quot;</div></pre></td></tr></table></figure>
<ol>
<li>srandmember  键  值<blockquote>
<p>   随机返回集合中一个元素，但不删除</p>
</blockquote>
</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">127.0.0.1:6379&gt; sadd mset3 4 5 6 7 8</div><div class="line">(integer) 5</div><div class="line">127.0.0.1:6379&gt; srandmember mset3</div><div class="line">&quot;5&quot;</div><div class="line">127.0.0.1:6379&gt; srandmember mset3</div><div class="line">&quot;5&quot;</div><div class="line">127.0.0.1:6379&gt; srandmember mset3</div><div class="line">&quot;4&quot;</div></pre></td></tr></table></figure>
<ol>
<li>scard  键<blockquote>
<p>   获取集合里面元素个数</p>
</blockquote>
</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">127.0.0.1:6379&gt; scard mset1</div><div class="line">(integer) 2</div></pre></td></tr></table></figure>
<ol>
<li>sismember  键  值<blockquote>
<p>   确定一个指定的值是否是集合中的元素</p>
</blockquote>
</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">127.0.0.1:6379&gt; smembers mset1</div><div class="line">1) &quot;1&quot;</div><div class="line">2) &quot;2&quot;</div><div class="line">127.0.0.1:6379&gt; sismember mset1 3</div><div class="line">(integer) 0</div><div class="line">127.0.0.1:6379&gt; sismember mset1 1</div><div class="line">(integer) 1</div></pre></td></tr></table></figure>
<ol>
<li>sdiff  集合1  集合2<blockquote>
<p>   返回集合1与集合2的差集。以集合1为主</p>
</blockquote>
</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">127.0.0.1:6379&gt; sadd mset4 1 2 3</div><div class="line">(integer) 3</div><div class="line">127.0.0.1:6379&gt; sadd mset5 2 3 4</div><div class="line">(integer) 3</div><div class="line">127.0.0.1:6379&gt; sdiff mset4 mset5</div><div class="line">1) &quot;1&quot;</div></pre></td></tr></table></figure>
<ol>
<li>sdiffstore  新集合  集合1  集合2<blockquote>
<p>   返回集合1和集合2的差集，并把结果存入新集合</p>
</blockquote>
</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">127.0.0.1:6379&gt; sadd mset4 1 2 3</div><div class="line">(integer) 3</div><div class="line">127.0.0.1:6379&gt; sadd mset5 2 3 4</div><div class="line">(integer) 3</div><div class="line">127.0.0.1:6379&gt; sdiffstore mset6 mset5 mset4</div><div class="line">(integer) 1				//返回值为1 ，证明成功</div><div class="line">127.0.0.1:6379&gt; smembers mset6</div><div class="line">1) &quot;4&quot;					//结果存入了mset6，值为4</div></pre></td></tr></table></figure>
<ol>
<li>sinter  集合1  集合2<blockquote>
<p>   获得两个集合的交集</p>
</blockquote>
</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">127.0.0.1:6379&gt; smembers mset4</div><div class="line">1) &quot;1&quot;</div><div class="line">2) &quot;2&quot;</div><div class="line">3) &quot;3&quot;</div><div class="line">127.0.0.1:6379&gt; smembers mset5</div><div class="line">1) &quot;2&quot;</div><div class="line">2) &quot;3&quot;</div><div class="line">3) &quot;4&quot;</div><div class="line">127.0.0.1:6379&gt; sinter mset4 mset5</div><div class="line">1) &quot;2&quot;</div><div class="line">2) &quot;3&quot;</div></pre></td></tr></table></figure>
<ol>
<li>sinterstore  新集合  集合1  集合2<blockquote>
<p>   获得集合1和集合2的交集，并把结果存入新集合</p>
</blockquote>
</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">127.0.0.1:6379&gt; sinterstore mset7 mset4 mset5</div><div class="line">(integer) 2</div><div class="line">127.0.0.1:6379&gt; smembers mset7</div><div class="line">1) &quot;2&quot;</div><div class="line">2) &quot;3&quot;</div></pre></td></tr></table></figure>
<ol>
<li>sunion  集合1  集合2<blockquote>
<p>   获得指定集合的并集</p>
</blockquote>
</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">127.0.0.1:6379&gt; sunion mset4 mset5</div><div class="line">1) &quot;1&quot;</div><div class="line">2) &quot;2&quot;</div><div class="line">3) &quot;3&quot;</div><div class="line">4) &quot;4&quot;</div></pre></td></tr></table></figure>
<ol>
<li>sunionstore  新集合  集合1  集合2<blockquote>
<p>   获得指定集合的并集，并把结果保存如新集合</p>
</blockquote>
</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">127.0.0.1:6379&gt; sunionstore mset8 mset4 mset5</div><div class="line">(integer) 4</div><div class="line">127.0.0.1:6379&gt; smembers mset8</div><div class="line">1) &quot;1&quot;</div><div class="line">2) &quot;2&quot;</div><div class="line">3) &quot;3&quot;</div><div class="line">4) &quot;4&quot;</div></pre></td></tr></table></figure>
<ol>
<li>smove  源集合  目标集合  值<blockquote>
<p>   将指定的值从源集合移动到目标集合</p>
</blockquote>
</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">127.0.0.1:6379&gt; smembers mset1</div><div class="line">1) &quot;1&quot;</div><div class="line">2) &quot;2&quot;</div><div class="line">127.0.0.1:6379&gt; smembers mset2</div><div class="line">1) &quot;6&quot;</div><div class="line">2) &quot;7&quot;</div><div class="line">127.0.0.1:6379&gt; smove mset1 mset2 1</div><div class="line">(integer) 1</div><div class="line">127.0.0.1:6379&gt; smembers mset1</div><div class="line">1) &quot;2&quot;</div><div class="line">127.0.0.1:6379&gt; smembers mset2</div><div class="line">1) &quot;1&quot;</div><div class="line">2) &quot;6&quot;</div><div class="line">3) &quot;7&quot;</div></pre></td></tr></table></figure>
<h2 id="sorted-sets类型和操作"><a href="#sorted-sets类型和操作" class="headerlink" title="sorted sets类型和操作"></a>sorted sets类型和操作</h2><p>sorted set是set的一个升级版本，它给集合中每个元素都定义一个分数，集合中的元素按照其分数排序。也不允许有重复值</p>
<ol>
<li>zadd  键  分数1  值1  [分数2  值2…]<blockquote>
<p>该命令添加指定的成员到key对应的有序集合中，每个成员都有一个分数。你可以指定多个分数/成员组合。如果一个指定的成员已经在对应的有序集合中了，那么其分数就会被更新成最新的，并且该成员会重新调整到正确的位置，以确保集合有序。分数的值必须是一个表示数字的字符串，并且可以是double类型的浮点数。</p>
</blockquote>
</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">127.0.0.1:6379&gt; zadd zset1 1 lm 2 sc 3 glf</div><div class="line">(integer) 3</div><div class="line">127.0.0.1:6379&gt; zadd zset1 1 ymj</div><div class="line">(integer) 1</div></pre></td></tr></table></figure>
<ol>
<li>zrange  集合  起始下标  截止下标  [withscores]<blockquote>
<p>   返回有序集合中，指定区间内的成员。其中成员按照score（分数）值从小到大排序。具有相同score值的成员按照字典顺序来排列。</p>
<p>   起始下标与截止下标和list类型一致：</p>
<ul>
<li>0代表队列中第一个元素，1代表第二个元素，依次类推</li>
<li><p>-1代表队列中最后一个元素，-2代表倒数第二个元素</p>
<p>withscores：返回集合中元素的同时，返回其分数（score）</p>
</li>
</ul>
</blockquote>
</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">127.0.0.1:6379&gt; zrange zset1 0 -1 withscores</div><div class="line">1) &quot;lm&quot;</div><div class="line">2) &quot;1&quot;</div><div class="line">3) &quot;ymj&quot;</div><div class="line">4) &quot;1&quot;</div><div class="line">5) &quot;sc&quot;</div><div class="line">6) &quot;2&quot;</div><div class="line">7) &quot;glf&quot;</div><div class="line">8) &quot;3&quot;</div></pre></td></tr></table></figure>
<ol>
<li>zrevrange  集合  起始下标  截止下标  [withscores]<blockquote>
<p>   返回有序集合中，指定区间的成员。其成员按照score从大到小来排列。</p>
</blockquote>
</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">127.0.0.1:6379&gt; zrevrange zset1 0 -1 withscores</div><div class="line">1) &quot;glf&quot;		//下标为0</div><div class="line">2) &quot;3&quot;</div><div class="line">3) &quot;sc&quot;			//下标为1</div><div class="line">4) &quot;2&quot;</div><div class="line">5) &quot;ymj&quot;		//下标为2</div><div class="line">6) &quot;1&quot;</div><div class="line">7) &quot;lm&quot;			//下标为3</div><div class="line">8) &quot;1&quot;</div><div class="line"></div><div class="line">127.0.0.1:6379&gt; zrevrange zset1 1 2 withscores		//查看集合中下标是1-2的值</div><div class="line">1) &quot;sc&quot;</div><div class="line">2) &quot;2&quot;</div><div class="line">3) &quot;ymj&quot;</div><div class="line">4) &quot;1&quot;</div></pre></td></tr></table></figure>
<ol>
<li>zrangebyscore  集合  起始分数  截止分数  withscores<blockquote>
<p>   返回有序集合中score（分数）在指定区间的值</p>
</blockquote>
</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">127.0.0.1:6379&gt; zadd zset2 1 one 2 two 3 three 4 four</div><div class="line">(integer) 4</div><div class="line">127.0.0.1:6379&gt; zrange zset2 0 -1 withscores		//按照下标区间返回值</div><div class="line">1) &quot;one&quot;</div><div class="line">2) &quot;1&quot;</div><div class="line">3) &quot;two&quot;</div><div class="line">4) &quot;2&quot;</div><div class="line">5) &quot;three&quot;</div><div class="line">6) &quot;3&quot;</div><div class="line">7) &quot;four&quot;</div><div class="line">8) &quot;4&quot;</div><div class="line"></div><div class="line">127.0.0.1:6379&gt; zrangebyscore zset2 2 3 withscores	//按照分数区间返回值</div><div class="line">1) &quot;two&quot;</div><div class="line">2) &quot;2&quot;</div><div class="line">3) &quot;three&quot;</div><div class="line">4) &quot;3&quot;</div></pre></td></tr></table></figure>
<ol>
<li>zrem  集合  值1  [值2…]<blockquote>
<p>   删除有序集合中指定的值</p>
</blockquote>
</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">127.0.0.1:6379&gt; zrem zset1 lm</div><div class="line">(integer) 1</div><div class="line">127.0.0.1:6379&gt; zrange zset1 0 -1 withscores</div><div class="line">1) &quot;ymj&quot;</div><div class="line">2) &quot;1&quot;</div><div class="line">3) &quot;sc&quot;</div><div class="line">4) &quot;2&quot;</div><div class="line">5) &quot;glf&quot;</div><div class="line">6) &quot;3&quot;</div></pre></td></tr></table></figure>
<ol>
<li>zincrby  集合  增量  值<blockquote>
<p>   给有序集合中指定值的成员的分数（score）值加上增量（increment）。如果集合中没有这个值，则给添加一个分数是increment的值。</p>
</blockquote>
</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">127.0.0.1:6379&gt; zincrby zset1 2 ymj		//如果值存在，则在其分数上加增量</div><div class="line">&quot;3&quot;</div><div class="line">127.0.0.1:6379&gt; zrange zset1 0 -1 withscores</div><div class="line">1) &quot;sc&quot;</div><div class="line">2) &quot;2&quot;</div><div class="line">3) &quot;glf&quot;</div><div class="line">4) &quot;3&quot;</div><div class="line">5) &quot;ymj&quot;</div><div class="line">6) &quot;3&quot;</div><div class="line"></div><div class="line">127.0.0.1:6379&gt; zincrby zset1 4 bro		//如果值不存在，则加入值。并指定分数为增&quot;4&quot;										量</div><div class="line"></div><div class="line">127.0.0.1:6379&gt; zrange zset1 0 -1 withscores</div><div class="line">1) &quot;sc&quot;</div><div class="line">2) &quot;2&quot;</div><div class="line">3) &quot;glf&quot;</div><div class="line">4) &quot;3&quot;</div><div class="line">5) &quot;ymj&quot;</div><div class="line">6) &quot;3&quot;</div><div class="line">7) &quot;bro&quot;</div><div class="line">8) &quot;4&quot;</div></pre></td></tr></table></figure>
<ol>
<li>zrank  集合  值<blockquote>
<p>   返回有序集合中指定值的下标。值按照score从小到大排序</p>
</blockquote>
</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">127.0.0.1:6379&gt; zrank zset1 sc</div><div class="line">(integer) 0</div><div class="line">127.0.0.1:6379&gt; zrank zset1 ymj</div><div class="line">(integer) 2</div></pre></td></tr></table></figure>
<ol>
<li>zrevrank  集合  值<blockquote>
<p>   返回有序集合中指定值的下标，值按照score从大到小排序</p>
</blockquote>
</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">127.0.0.1:6379&gt; zrange zset1 0 -1 withscores</div><div class="line">1) &quot;sc&quot;</div><div class="line">2) &quot;2&quot;</div><div class="line">3) &quot;glf&quot;</div><div class="line">4) &quot;3&quot;</div><div class="line">5) &quot;ymj&quot;</div><div class="line">6) &quot;3&quot;</div><div class="line">7) &quot;bro&quot;</div><div class="line">8) &quot;4&quot;</div><div class="line">127.0.0.1:6379&gt; zrevrank zset1 ymj</div><div class="line">(integer) 1</div><div class="line">127.0.0.1:6379&gt; zrevrank zset1 sc</div><div class="line">(integer) 3</div></pre></td></tr></table></figure>
<ol>
<li>zcount  集合  起始分数  截止分数<blockquote>
<p>   返回有序集合中，score值在起始分数与截止分数之间的个数</p>
</blockquote>
</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">127.0.0.1:6379&gt; zrange zset2 0 -1 withscores</div><div class="line">1) &quot;one&quot;</div><div class="line">2) &quot;1&quot;</div><div class="line">3) &quot;two&quot;</div><div class="line">4) &quot;2&quot;</div><div class="line">5) &quot;three&quot;</div><div class="line">6) &quot;3&quot;</div><div class="line">7) &quot;four&quot;</div><div class="line">8) &quot;4&quot;</div><div class="line"></div><div class="line">127.0.0.1:6379&gt; zcount zset2 2 4</div><div class="line">(integer) 3</div></pre></td></tr></table></figure>
<ol>
<li>zcard  集合<blockquote>
<p>   返回有序集合元素的个数</p>
</blockquote>
</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">127.0.0.1:6379&gt; zcard zset2</div><div class="line">(integer) 4</div></pre></td></tr></table></figure>
<ol>
<li>zremrangebyrank  集合  起始下标  结束下标<blockquote>
<p>   删除有序集合中，下标在指定区间的元素</p>
</blockquote>
</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">127.0.0.1:6379&gt; zrange zset2 0 -1 withscores</div><div class="line">1) &quot;one&quot;</div><div class="line">2) &quot;1&quot;</div><div class="line">3) &quot;two&quot;</div><div class="line">4) &quot;2&quot;</div><div class="line">5) &quot;three&quot;</div><div class="line">6) &quot;3&quot;</div><div class="line">7) &quot;four&quot;</div><div class="line">8) &quot;4&quot;</div><div class="line">127.0.0.1:6379&gt; ZREMRANGEBYRANK zset2 0 1</div><div class="line">(integer) 2</div><div class="line">127.0.0.1:6379&gt; zrange zset2 0 -1 withscores</div><div class="line">1) &quot;three&quot;</div><div class="line">2) &quot;3&quot;</div><div class="line">3) &quot;four&quot;</div><div class="line">4) &quot;4&quot;</div></pre></td></tr></table></figure>
<ol>
<li>zremrangebyscore  集合  起始分数  截止分数<blockquote>
<p>删除有序集合中，分数在指定区间的元素</p>
</blockquote>
</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">127.0.0.1:6379&gt; zrange zset1 0 -1 withscores</div><div class="line">1) &quot;sc&quot;</div><div class="line">2) &quot;2&quot;</div><div class="line">3) &quot;glf&quot;</div><div class="line">4) &quot;3&quot;</div><div class="line">5) &quot;ymj&quot;</div><div class="line">6) &quot;3&quot;</div><div class="line">7) &quot;bro&quot;</div><div class="line">8) &quot;4&quot;</div><div class="line">127.0.0.1:6379&gt; ZREMRANGEBYSCORE zset1 2 3</div><div class="line">(integer) 3</div><div class="line">127.0.0.1:6379&gt; zrange zset1 0 -1 withscores</div><div class="line">1) &quot;bro&quot;</div><div class="line">2) &quot;4&quot;</div></pre></td></tr></table></figure>
<ol>
<li>zinterstore  新集合  取交集的集合个数  集合1 集合2<blockquote>
<p>   取集合1和集合2的交集，并把结果保存到新集合中。在计算交集之前，需要指定计算交集的集合的个数。交集中，值的分数是多个集合中分数的和。</p>
</blockquote>
</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">127.0.0.1:6379&gt; zadd zset1 1 one 2 two 3 three 4 four</div><div class="line">(integer) 4</div><div class="line">127.0.0.1:6379&gt; zadd zset2  2 two 3 three 4 four 5 five</div><div class="line">(integer) 4</div><div class="line">127.0.0.1:6379&gt; ZINTERSTORE zset3 2 zset1 zset2 	</div><div class="line">//有两个集合计算交集，所以集合个数是2</div><div class="line">(integer) 3</div><div class="line">127.0.0.1:6379&gt; ZRANGE zset3 0 -1 withscores</div><div class="line">1) &quot;two&quot;</div><div class="line">2) &quot;4&quot;				//分数是两个集合中two值的分数和</div><div class="line">3) &quot;three&quot;</div><div class="line">4) &quot;6&quot;</div><div class="line">5) &quot;four&quot;</div><div class="line">6) &quot;8&quot;</div></pre></td></tr></table></figure>
<ol>
<li>zunionstore  新集合  取并集的集合个数  集合1 集合2<blockquote>
<p>   取集合1和集合2的并集，并把结果保存到新集合中。在计算并集之前，需要指定计算并集的集合的个数。并集中，值的分数是多个集合中分数的和。</p>
</blockquote>
</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">127.0.0.1:6379&gt; zadd zset1 1 one 2 two 3 three 4 four</div><div class="line">(integer) 4</div><div class="line">127.0.0.1:6379&gt; zadd zset2  2 two 3 three 4 four 5 five</div><div class="line">(integer) 4</div><div class="line">127.0.0.1:6379&gt; ZUNIONSTORE zset4 2 zset1 zset2</div><div class="line">(integer) 5</div><div class="line">127.0.0.1:6379&gt; ZRANGE zset4 0 -1 withscores</div><div class="line"> 1) &quot;one&quot;</div><div class="line"> 2) &quot;1&quot;</div><div class="line"> 3) &quot;two&quot;</div><div class="line"> 4) &quot;4&quot;</div><div class="line"> 5) &quot;five&quot;</div><div class="line"> 6) &quot;5&quot;</div><div class="line"> 7) &quot;three&quot;</div><div class="line"> 8) &quot;6&quot;</div><div class="line"> 9) &quot;four&quot;</div><div class="line">10) &quot;8&quot;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Redis共有5种数据类型&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;string(字符串)&lt;/li&gt;
&lt;li&gt;hash(哈希表)&lt;/li&gt;
&lt;li&gt;list(双向队列)&lt;/li&gt;
&lt;li&gt;set(集合)&lt;/li&gt;
&lt;li&gt;zset(有序集合)&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="Linux" scheme="https://weizhimiao.github.io/categories/Linux/"/>
    
    
      <category term="Redis" scheme="https://weizhimiao.github.io/tags/Redis/"/>
    
  </entry>
  
  <entry>
    <title>Redis高级应用</title>
    <link href="https://weizhimiao.github.io/2016/09/27/Redis%E9%AB%98%E7%BA%A7%E5%BA%94%E7%94%A8/"/>
    <id>https://weizhimiao.github.io/2016/09/27/Redis高级应用/</id>
    <published>2016-09-27T12:30:00.000Z</published>
    <updated>2016-10-07T14:00:05.000Z</updated>
    
    <content type="html"><![CDATA[<ul>
<li>给redis服务器设置密码</li>
<li>持久化</li>
<li>主从备份</li>
</ul>
<a id="more"></a>
<h2 id="给redis服务器设置密码"><a href="#给redis服务器设置密码" class="headerlink" title="给redis服务器设置密码"></a>给redis服务器设置密码</h2><p>1、 修改redis服务器的配置文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">[root@localhost redis]# vi /usr/local/redis/etc/redis.conf</div><div class="line"># requirepass foobared					（340行）</div><div class="line">#找到这句话，requirepass后面就是登录redis的密码，改为</div><div class="line">requirepass flzx_3QC</div></pre></td></tr></table></figure></p>
<p>2、 重启redis<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[root@localhost redis]# pkill  redis</div><div class="line">[root@localhost redis]# bin/redis-server  /usr/local/redis/etc/redis.conf</div></pre></td></tr></table></figure></p>
<p>3、 连接redis<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">[root@localhost redis]# /usr/local/redis/bin/redis-cli</div><div class="line">127.0.0.1:6379&gt; keys *						//可以正常连接redis</div><div class="line">(error) NOAUTH Authentication required.		//但因为没有密码，提示操作拒绝</div><div class="line">127.0.0.1:6379&gt; auth flzx_3QC				//利用auth命令输入密码</div><div class="line">OK</div><div class="line">127.0.0.1:6379&gt; keys *						//才可以正常使用</div><div class="line">1) &quot;name&quot;</div></pre></td></tr></table></figure></p>
<p>或<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[root@localhost redis]# /usr/local/redis/bin/redis-cli -a flzx_3QC</div></pre></td></tr></table></figure></p>
<p>在登录的同时指定密码</p>
<p><strong>注意历史命令中会明文保存此密码</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">127.0.0.1:6379&gt; keys *</div><div class="line">1) &quot;name&quot;</div></pre></td></tr></table></figure></p>
<h2 id="持久化"><a href="#持久化" class="headerlink" title="持久化"></a>持久化</h2><p>Redis 提供了不同级别的持久化方式:</p>
<h3 id="RDB持久化方式"><a href="#RDB持久化方式" class="headerlink" title="RDB持久化方式"></a>RDB持久化方式</h3><blockquote>
<p>RDB持久化方式能够在指定的时间间隔能对你的数据进行快照存储。是默认的持久化方式。这种方式是将内存中数据以快照的方式写入到二进制文件中，默认的文件名为dump.rdb。这种持久化方式被称为快照 snapshotting（快照）。</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">save 900 1		</div><div class="line">#900秒内，最少有1个键被改动。则自动保存一次数据集</div><div class="line">save 300 10</div><div class="line">#300秒内，最少有10个键被改动。则自动保存一次数据集</div><div class="line">save 60 10000</div><div class="line">#60秒内，最少有10000个键被改动。则自动保存一次数据集</div></pre></td></tr></table></figure>
<p>实验：验证dump.rdb数据保存文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[root@localhost ~]# ls</div><div class="line">anaconda-ks.cfg  dump.rdb  install.log  install.log.syslog</div></pre></td></tr></table></figure></p>
<p>root目录下有dump.rdb文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[root@localhost ~]# /usr/local/redis/bin/redis-server  \</div><div class="line">/usr/local/redis/etc/redis.conf</div></pre></td></tr></table></figure></p>
<p>在root目录中启动redis<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">[root@localhost ~]# /usr/local/redis/bin/redis-cli</div><div class="line">127.0.0.1:6379&gt; auth 123</div><div class="line">OK</div><div class="line">127.0.0.1:6379&gt; keys *</div><div class="line">1) &quot;name2&quot;</div><div class="line">2) &quot;name&quot;</div><div class="line">3) &quot;name1&quot;</div></pre></td></tr></table></figure></p>
<p>0库中有键<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">[root@localhost ~]# cd /usr/local/redis/</div><div class="line">[root@localhost redis]# pkill -9 redis</div><div class="line">[root@localhost redis]# /usr/local/redis/bin/redis-server  \</div><div class="line">/usr/local/redis/etc/redis.conf</div></pre></td></tr></table></figure></p>
<p>在/usr/local/redis/库中重启redis，<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">[root@localhost redis]# ls</div><div class="line">[root@localhost redis]# /usr/local/redis/bin/redis-cli</div><div class="line">127.0.0.1:6379&gt; keys *</div><div class="line">(empty list or set)</div></pre></td></tr></table></figure></p>
<p>0库中没有键<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">127.0.0.1:6379&gt; save</div><div class="line">OK</div></pre></td></tr></table></figure></p>
<p>保存<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">127.0.0.1:6379&gt; quit</div><div class="line">[root@localhost redis]# ls</div><div class="line">bin  dump.rdb  etc</div></pre></td></tr></table></figure></p>
<p>在redis目录中也生成dump.rdb文件</p>
<p><strong>结论：</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[root@localhost redis]# vi /usr/local/redis/etc/redis.conf</div><div class="line">dir ./</div></pre></td></tr></table></figure></p>
<p>定义了dump.rdb数据库文件保存在当前位置。所以每次重启redis服务的所在位置不同，导致生成新的dump.rdb文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">dir /usr/local/redis/</div></pre></td></tr></table></figure></p>
<p>将数据库保存目录写为绝对路径（注意只能是目录）</p>
<h3 id="使用AOF"><a href="#使用AOF" class="headerlink" title="使用AOF"></a>使用AOF</h3><blockquote>
<p>使用AOF会让你的Redis更加耐久: 你可以使用不同的持久化策略：无备份,每秒备份,每次写的时候备份。使用默认的每秒备份策略,Redis的性能依然很好(备份是由后台线程进行处理的,主线程会尽力处理客户端请求),一旦出现故障，你最多丢失1秒的数据。</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">appendonly no</div><div class="line">#默认不使用AOF持久化（450行）</div><div class="line"></div><div class="line">appendonly yes</div><div class="line">#开启AOF持久化</div><div class="line"># appendfsync always		#有写操作，就马上写入磁盘。效率最慢，到那时最按</div><div class="line">appendfsync everysec		#默认，每秒钟写入磁盘一次。</div><div class="line"># appendfsync no			#不进行AOF备份，将数据交给操作系统处理。最快，最不安全</div></pre></td></tr></table></figure>
<h2 id="主从备份"><a href="#主从备份" class="headerlink" title="主从备份"></a>主从备份</h2><p>Redis主从复制特点：</p>
<ul>
<li>a.Master可以拥有多个slave</li>
<li>b.多个slave可以连接同一个master外，还可以连接到其它slave</li>
<li>c.主从复制不会阻塞master，在同步数据时，master可以继续处理client请求</li>
<li>d.提高系统的伸缩性</li>
</ul>
<p>Redis主从复制过程：</p>
<ul>
<li>a.Slave与master建立连接，发送sync同步命令</li>
<li>b.Master会启动一个后台进程，将数据库快照保存到文件中，同时master主进程会开始收集新的写命令并缓存。</li>
<li>c.后台完成保存后，就将此文件发送给slave</li>
<li>d.Slave将此文件保存到硬盘上</li>
</ul>
<h3 id="不同服务器配置主从"><a href="#不同服务器配置主从" class="headerlink" title="不同服务器配置主从"></a>不同服务器配置主从</h3><ol>
<li>克隆一台linux作为从服务器<br>克隆机需要进行如下操作：</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">①	vi /etc/sysconfig/network-scripts/ifcfg-eth0</div><div class="line">	删除MAC地址行</div><div class="line">②	rm  -rf  /etc/udev/rules.d/70-persistent-net.rules</div><div class="line">	删除网卡和MAC地址绑定文件</div><div class="line">③	注意关闭防火墙和SELinux</div><div class="line">④	重启动系统</div></pre></td></tr></table></figure>
<ol>
<li>在从服务器上配置</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">[root@localhost ~]# vi /usr/local/redis/etc/redis.conf</div><div class="line"># slaveof &lt;masterip&gt; &lt;masterport&gt;</div><div class="line">#把此句开启，并指定主服务器ip和端口	（196行）</div><div class="line"></div><div class="line">masterauth flzx_3QC</div><div class="line">#设定主服务器密码</div></pre></td></tr></table></figure>
<ol>
<li>重启从服务器上redis</li>
</ol>
<h3 id="同一台服务器实现主从配置"><a href="#同一台服务器实现主从配置" class="headerlink" title="同一台服务器实现主从配置"></a>同一台服务器实现主从配置</h3><p>这里我们以本机配置 1台Master + 1台Slave 为例子,其中:</p>
<blockquote>
<ul>
<li>Master IP:127.0.0.1  PORT:6379</li>
<li>Slave1 IP:127.0.0.1  PORT:63791</li>
</ul>
</blockquote>
<ol>
<li>复制出从服务器目录</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[root@localhost ~]# cp -r /usr/local/redis/ /usr/local/redis-slave1</div></pre></td></tr></table></figure>
<ol>
<li>修改redis-slave1配置文件</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">[root@localhost ~]# vi /usr/local/redis-slave1/etc/redis.conf</div><div class="line">pidfile /usr/local/redis-slave1/redis.pid</div><div class="line">#指定pid文件</div><div class="line">port 63791</div><div class="line">#指定端口号</div><div class="line">dir /usr/local/redis-slave1/</div><div class="line">#指定服务器目录</div><div class="line">slaveof 127.0.0.1 6379</div><div class="line">#指定主服务器IP和端口</div><div class="line">masterauth flzx_3QC</div><div class="line">#指定主服务器密码</div></pre></td></tr></table></figure>
<ol>
<li>启动服务</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">/usr/local/redis-slave1/bin/redis-server /usr/local/redis-slave1/etc/redis.conf</div><div class="line">#启动从服务器，并调用从服务器配置文件</div><div class="line"></div><div class="line">[root@localhost ~]# netstat -tlun</div><div class="line">tcp     0      0 :::6379                     :::*                        LISTEN      </div><div class="line">tcp     0      0 :::63791                    :::*                        LISTEN</div><div class="line">#验证两个端口是否都启动</div></pre></td></tr></table></figure>
<ol>
<li>验证</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">[root@localhost ~]# /usr/local/redis/bin/redis-cli -a flzx_3QC   </div><div class="line">#启动主服务器，并建立一个键</div><div class="line">127.0.0.1:6379&gt; set bb 234</div><div class="line">OK</div><div class="line">127.0.0.1:6379&gt; keys *</div><div class="line">1) &quot;sex&quot;</div><div class="line">2) &quot;aa&quot;</div><div class="line">3) &quot;name&quot;</div><div class="line">4) &quot;age&quot;</div><div class="line">5) &quot;bb&quot;</div><div class="line"></div><div class="line">[root@localhost ~]# /usr/local/redis-slave1/bin/redis-cli -a flzx_3QC -p 63791</div><div class="line">#启动从服务器，发现键已经同步</div><div class="line">127.0.0.1:63791&gt; keys *</div><div class="line">1) &quot;aa&quot;</div><div class="line">2) &quot;sex&quot;</div><div class="line">3) &quot;age&quot;</div><div class="line">4) &quot;name&quot;</div><div class="line">5) &quot;bb&quot;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;给redis服务器设置密码&lt;/li&gt;
&lt;li&gt;持久化&lt;/li&gt;
&lt;li&gt;主从备份&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="Linux" scheme="https://weizhimiao.github.io/categories/Linux/"/>
    
    
      <category term="Redis" scheme="https://weizhimiao.github.io/tags/Redis/"/>
    
  </entry>
  
  <entry>
    <title>Redis安装与管理</title>
    <link href="https://weizhimiao.github.io/2016/09/27/Redis%E5%AE%89%E8%A3%85%E4%B8%8E%E7%AE%A1%E7%90%86/"/>
    <id>https://weizhimiao.github.io/2016/09/27/Redis安装与管理/</id>
    <published>2016-09-27T12:30:00.000Z</published>
    <updated>2016-10-07T13:00:05.000Z</updated>
    
    <content type="html"><![CDATA[<p>redis是一个key-value存储系统。<br>和Memcached类似，它支持存储的value类型相对更多，<br>包括string(字符串)、list(链表)、set(集合)和zset(有序集合)。<br>这些数据类型都支持push/pop、add/remove及取交集并集和差集及更丰富的操作，而且这些操作都是原子性的。</p>
<p>在此基础上，redis支持各种不同方式的排序。与memcached一样，为了保证效率，数据都是缓存在内存中。<br>区别的是redis会周期性的把更新的数据写入磁盘或者把修改操作写入追加的记录文件，并且在此基础上实现了master-slave(主从)同步。</p>
<p>Redis 是一个高性能的key-value数据库。<br> redis的出现，很大程度补偿了memcached这类key/value存储的不足，在部 分场合可以对关系数据库起到很好的补充作用。<br>它提供了Python，Ruby，Erlang，PHP客户端，使用很方便。</p>
<ul>
<li><p>Memcache</p>
<blockquote>
<p>内存缓存服务，缓存数据保存在内存中，一旦断电重启，数据将丢失</p>
</blockquote>
</li>
<li><p>mangoDB</p>
<blockquote>
<p>开源免费的NOSQL 数据库，提供数据持久化服务，以文档的形式提供数据组织方式，而不是表</p>
</blockquote>
</li>
<li><p>Redis</p>
<blockquote>
<p>开源免费的 NOSQL数据库，提供数据持久化服务，即能实现内存缓存服务，也能提供数据结构服务取代MySQL 自建索引用来弥补关系型数据的不足</p>
</blockquote>
</li>
</ul>
<a id="more"></a>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><h3 id="默认安装位置"><a href="#默认安装位置" class="headerlink" title="默认安装位置"></a>默认安装位置</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">[root@localhost ~]# wget http://download.redis.io/releases/redis-2.8.6.tar.gz</div><div class="line">[root@localhost ~]# tar xzf redis-2.8.6.tar.gz</div><div class="line">[root@localhost ~]# cd redis-2.8.6</div><div class="line">[root@localhost ~]# make</div><div class="line">#不指定安装位置，则会把redis的可执行文件安装到  redis-2.8.6/src/目录下</div></pre></td></tr></table></figure>
<h3 id="指定安装位置"><a href="#指定安装位置" class="headerlink" title="指定安装位置"></a>指定安装位置</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">[root@localhost ~]# tar xzf redis-2.8.6.tar.gz</div><div class="line">[root@localhost ~]# cd redis-2.8.6</div><div class="line">[root@localhost ~]# make</div><div class="line">[root@localhost ~]# make PREFIX=/usr/local/redis install</div><div class="line">#指定安装位置，如果没有指定安装位置PREFIX=/usr/local/redis，则make install会把redis安装到/usr/local/bin/目录下</div><div class="line">[root@localhost ~]# mkdir /usr/local/redis/etc</div><div class="line">[root@localhost ~]# cp /root/redis-2.8.6/redis.conf /usr/local/redis/etc/</div></pre></td></tr></table></figure>
<h3 id="安装的可执行文件的作用"><a href="#安装的可执行文件的作用" class="headerlink" title="安装的可执行文件的作用"></a>安装的可执行文件的作用</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">redis-server           	服务器端</div><div class="line">redis-cli              	客户端</div><div class="line">redis-benchmark       	调试</div><div class="line">redis-check-dump      	数据导出</div><div class="line">redis-check-aof        	数据导入</div></pre></td></tr></table></figure>
<h2 id="启动与关闭"><a href="#启动与关闭" class="headerlink" title="启动与关闭"></a>启动与关闭</h2><h3 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h3><p>路径<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/redis-server</div></pre></td></tr></table></figure></p>
<p>配置文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/usr/local/redis/bin/redis-server  /usr/local/redis/etc/redis.conf</div></pre></td></tr></table></figure></p>
<p>注意：需要修改配置文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">[root@localhost redis]# vi /usr/local/redis/etc/redis.conf</div><div class="line">daemonize no		改为</div><div class="line">daemonize yes    	#后台启动</div></pre></td></tr></table></figure></p>
<p>端口 6379<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">[root@localhost redis]# /usr/local/redis/bin/redis-cli</div><div class="line">#客户端连接</div><div class="line">	-h  IP	：		连接指定的redis服务器</div><div class="line">	-p  6379：		指定redis服务器的端口</div><div class="line">	-a  密码：		使用密码登录</div><div class="line">	-n 数据库号：	指定连接哪个数据库</div></pre></td></tr></table></figure></p>
<h3 id="关闭redis"><a href="#关闭redis" class="headerlink" title="关闭redis"></a>关闭redis</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[root@localhost ~]# /usr/local/redis/bin/redis-cli shutdown</div></pre></td></tr></table></figure>
<p>或<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[root@localhost ~]# pkill  -9 redis</div></pre></td></tr></table></figure></p>
<h2 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div><div class="line">230</div><div class="line">231</div><div class="line">232</div><div class="line">233</div><div class="line">234</div><div class="line">235</div><div class="line">236</div><div class="line">237</div><div class="line">238</div><div class="line">239</div><div class="line">240</div><div class="line">241</div><div class="line">242</div><div class="line">243</div><div class="line">244</div><div class="line">245</div><div class="line">246</div><div class="line">247</div><div class="line">248</div><div class="line">249</div><div class="line">250</div><div class="line">251</div><div class="line">252</div><div class="line">253</div><div class="line">254</div><div class="line">255</div><div class="line">256</div><div class="line">257</div><div class="line">258</div><div class="line">259</div><div class="line">260</div><div class="line">261</div><div class="line">262</div><div class="line">263</div><div class="line">264</div><div class="line">265</div><div class="line">266</div><div class="line">267</div><div class="line">268</div><div class="line">269</div><div class="line">270</div><div class="line">271</div><div class="line">272</div><div class="line">273</div><div class="line">274</div><div class="line">275</div><div class="line">276</div><div class="line">277</div><div class="line">278</div><div class="line">279</div><div class="line">280</div><div class="line">281</div><div class="line">282</div><div class="line">283</div><div class="line">284</div><div class="line">285</div><div class="line">286</div><div class="line">287</div><div class="line">288</div><div class="line">289</div><div class="line">290</div><div class="line">291</div><div class="line">292</div><div class="line">293</div><div class="line">294</div><div class="line">295</div><div class="line">296</div><div class="line">297</div><div class="line">298</div><div class="line">299</div><div class="line">300</div><div class="line">301</div><div class="line">302</div><div class="line">303</div><div class="line">304</div><div class="line">305</div><div class="line">306</div><div class="line">307</div><div class="line">308</div><div class="line">309</div><div class="line">310</div><div class="line">311</div><div class="line">312</div><div class="line">313</div><div class="line">314</div><div class="line">315</div><div class="line">316</div><div class="line">317</div><div class="line">318</div><div class="line">319</div><div class="line">320</div><div class="line">321</div><div class="line">322</div><div class="line">323</div><div class="line">324</div><div class="line">325</div><div class="line">326</div><div class="line">327</div><div class="line">328</div><div class="line">329</div><div class="line">330</div><div class="line">331</div><div class="line">332</div><div class="line">333</div><div class="line">334</div><div class="line">335</div><div class="line">336</div><div class="line">337</div><div class="line">338</div><div class="line">339</div><div class="line">340</div><div class="line">341</div><div class="line">342</div><div class="line">343</div><div class="line">344</div><div class="line">345</div><div class="line">346</div><div class="line">347</div></pre></td><td class="code"><pre><div class="line">[root@localhost redis]# vi /usr/local/redis/etc/redis.conf</div><div class="line">#是否以后台进程运行，默认为no，如果需要以后台进程运行则改为yes</div><div class="line">daemonize no</div><div class="line"></div><div class="line"></div><div class="line">#如果以后台进程运行的话，就需要指定pid，你可以在此自定义redis.pid文件的位置。</div><div class="line">pidfile /var/run/redis.pid</div><div class="line"></div><div class="line"></div><div class="line">#接受连接的端口号，如果端口是0则redis将不会监听TCP socket连接</div><div class="line">port 6379</div><div class="line"></div><div class="line"># If you want you can bind a single interface, if the bind option is not</div><div class="line"># specified all the interfaces will listen for incoming connections.</div><div class="line">#</div><div class="line"># bind 127.0.0.1</div><div class="line"></div><div class="line"># Specify the path for the unix socket that will be used to listen for</div><div class="line"># incoming connections. There is no default, so Redis will not listen</div><div class="line"># on a unix socket when not specified.</div><div class="line">#</div><div class="line"># unixsocket /tmp/redis.sock</div><div class="line"># unixsocketperm 755</div><div class="line"></div><div class="line"></div><div class="line">#连接超时时间，单位秒。(0 to disable)？</div><div class="line">timeout 300000000</div><div class="line"></div><div class="line"></div><div class="line">#日志级别，默认是verbose（详细），各种日志级别：</div><div class="line">#debug:很详细的信息，适合开发和测试</div><div class="line">#verbose:包含许多不太有用的信息，但比debug要清爽一些（many rarely useful info, but not a mess like #the debug level）</div><div class="line">#notice:比较适合生产环境</div><div class="line">#warning:警告信息</div><div class="line">loglevel verbose</div><div class="line"></div><div class="line"></div><div class="line">#指定log文件的名字，默认是空。stdout会让redis把日志输出到标准输出。但是如果使用stdout而又以后台进#程的方式运行redis，则日志会输出到/dev/null。请改为需要的日志名</div><div class="line">logfile  &quot;&quot;</div><div class="line"></div><div class="line"></div><div class="line">#&apos;syslog-enabled&apos;设置为yes会把日志输出到系统日志，默认是no</div><div class="line"># syslog-enabled no</div><div class="line"></div><div class="line"></div><div class="line">#指定syslog的标示符，如果&apos;syslog-enabled&apos;是no，则这个选项无效。</div><div class="line"># syslog-ident redis</div><div class="line"></div><div class="line"></div><div class="line">#指定syslog 设备（facility), 必须是USER或者LOCAL0到LOCAL7.</div><div class="line"># syslog-facility local0</div><div class="line"></div><div class="line"></div><div class="line">#设置数据库数目。默认的数据库是DB 0。可以通过SELECT &lt;dbid&gt;来选择一个数据库，dbid是[0,&apos;databases&apos;-1]的数字</div><div class="line">databases 16</div><div class="line"></div><div class="line">################## 快照#################################</div><div class="line">#</div><div class="line"># 硬盘上保存数据:</div><div class="line">#</div><div class="line">#   save &lt;seconds&gt; &lt;changes&gt;</div><div class="line">#</div><div class="line">#   &lt;seconds&gt;和&lt;changes&gt;都满足时就会触发数据保存动作。</div><div class="line">#   </div><div class="line">#</div><div class="line">#   以下面的例子来说明：</div><div class="line">#   过了900秒并且有1个key发生了改变 就会触发save动作</div><div class="line">#   过了300秒并且有10个key发生了改变 就会触发save动作</div><div class="line">#   过了60秒并且至少有10000个key发生了改变 也会触发save动作</div><div class="line">#</div><div class="line">#   注意：如果你不想让redis自动保存数据，那就把下面的配置注释掉！</div><div class="line"></div><div class="line">save 900 1</div><div class="line">save 300 10</div><div class="line">save 60 10000</div><div class="line"></div><div class="line"></div><div class="line">#存储数据时是否压缩数据。默认是yes。</div><div class="line">rdbcompression yes</div><div class="line"></div><div class="line"># 保存dump数据的文件名</div><div class="line">dbfilename dump.rdb</div><div class="line"></div><div class="line"># 工作目录.</div><div class="line">#</div><div class="line"># 数据会被持久化到这个目录下的‘dbfilename’指定的文件中。</div><div class="line">#</div><div class="line">#</div><div class="line"># 注意，这里指定的必须是目录而不能是文件。</div><div class="line">dir ./</div><div class="line"></div><div class="line">######## REPLICATION（复制，冗余）#################################</div><div class="line"></div><div class="line"># Master-Slave replication. 使用slaveof把一个 Redis 实例设置成为另一个Redis server的从库（热备）. 注意： #配置只对当前slave有效。</div><div class="line"># 因此可以把某个slave配置成使用不同的时间间隔来保存数据或者监听其他端口等等。</div><div class="line">#命令格式：</div><div class="line"># slaveof &lt;masterip&gt; &lt;masterport&gt;</div><div class="line"></div><div class="line"></div><div class="line">#如果master有密码保护，则在slave与master进行数据同步之前需要进行密码校验，否则master会拒绝slave的请#求。</div><div class="line">#</div><div class="line"># masterauth &lt;master-password&gt;</div><div class="line"></div><div class="line">#当slave丢失与master的连接时，或者slave仍然在于master进行数据同步时（还没有与master保持一致），#slave可以有两种方式来响应客户端请求：</div><div class="line">#</div><div class="line"># 1) 如果 slave-serve-stale-data 设置成 &apos;yes&apos; (the default) slave会仍然响应客户端请求,此时可能会有问题。</div><div class="line">#</div><div class="line"># 2) 如果 slave-serve-stale data设置成  &apos;no&apos;  slave会返回&quot;SYNC with master in progress&quot;这样的错误信息。 但 INFO 和SLAVEOF命令除外。</div><div class="line">#</div><div class="line">slave-serve-stale-data yes</div><div class="line"></div><div class="line">############### 安全 ###################################</div><div class="line"></div><div class="line"># 需要客户端在执行任何命令之前指定 AUTH &lt;PASSWORD&gt;</div><div class="line">#</div><div class="line"># requirepass foobared</div><div class="line"></div><div class="line"># 命令重命名.</div><div class="line">#</div><div class="line">#</div><div class="line"># 例如:</div><div class="line">#</div><div class="line"># rename-command CONFIG b840fc02d524045429941cc15f59e41cb7be6c52</div><div class="line">#</div><div class="line"># 同样可以通过把一个命令重命名为空串来彻底kill掉这个命令，比如：</div><div class="line">#</div><div class="line"># rename-command CONFIG &quot;&quot;</div><div class="line"></div><div class="line">#################### 限制 ####################################</div><div class="line"></div><div class="line"># 设置最大连接数. 默认没有限制,  &apos;0&apos; 意味着不限制.</div><div class="line">#</div><div class="line"># maxclients 128</div><div class="line"></div><div class="line"></div><div class="line">#最大可使用内存。如果超过，Redis会试图删除EXPIRE集合中的keys，具体做法是：Redis会试图释放即将过期的#keys，而保护还有很长生命周期的keys。</div><div class="line">#</div><div class="line">#如果这样还不行，Redis就会报错，但像GET之类的查询请求还是会得到响应。</div><div class="line">#</div><div class="line">#警告：如果你想把Redis视为一个真正的DB的话，那不要设置&lt;maxmemory&gt;,只有你只想把Redis作为cache或者</div><div class="line">#有状态的server（&apos;state&apos; server)时才需要设置。</div><div class="line">#</div><div class="line"># maxmemory &lt;bytes&gt;</div><div class="line"></div><div class="line">#内存清理策略：如果达到了maxmemory，你可以采取如下动作：</div><div class="line">#</div><div class="line"># volatile-lru -&gt; 使用LRU算法来删除过期的set</div><div class="line"># allkeys-lru -&gt; 删除任何遵循LRU算法的key</div><div class="line"># volatile-random -&gt;随机地删除过期set中的key</div><div class="line"># allkeys-&gt;random -&gt; 随机地删除一个key</div><div class="line"># volatile-ttl -&gt; 删除最近即将过期的key（the nearest expire time (minor TTL)）</div><div class="line"># noeviction -&gt; 根本不过期，写操作直接报错</div><div class="line">#</div><div class="line">#</div><div class="line"># 默认策略:</div><div class="line">#</div><div class="line"># maxmemory-policy volatile-lru</div><div class="line"></div><div class="line"># 对于处理redis内存来说，LRU和minor TTL算法不是精确的，而是近似的（估计的）算法。所以我们会检查某些样本#来达到内存检查的目的。默认的样本数是3，你可以修改它。</div><div class="line">#</div><div class="line"># maxmemory-samples 3</div><div class="line"></div><div class="line">################# APPEND ONLY MODE ###############################</div><div class="line"></div><div class="line">#默认情况下，Redis会异步的把数据保存到硬盘。如果你的应用场景允许因为系统崩溃等极端情况而导致最新数据丢失#的话，那这种做法已经很ok了。否则你应该打开‘append only’模式，开启这种模式后，Redis会在#appendonly.aof文件中添加每一个写操作，这个文件会在Redis启动时被读取来在内存中重新构建数据集。</div><div class="line">#</div><div class="line">#注意：如果你需要，你可以同时开启‘append only’模式和异步dumps模式（你需要注释掉上面的‘save’表达式来禁#止dumps），这种情况下，Redis重建数据集时会优先使用appendonly.aof而忽略dump.rdb</div><div class="line">#</div><div class="line">appendonly no</div><div class="line"></div><div class="line">#  append only 文件名 (默认: &quot;appendonly.aof&quot;)</div><div class="line"># appendfilename appendonly.aof</div><div class="line"></div><div class="line"># 调用fsync()函数通知操作系统立刻向硬盘写数据</div><div class="line">#</div><div class="line"># Redis支持3中模式:</div><div class="line">#</div><div class="line"># no:不fsync, 只是通知OS可以flush数据了，具体是否flush取决于OS.性能更好.</div><div class="line"># always: 每次写入append only 日志文件后都会fsync . 性能差，但很安全.</div><div class="line"># everysec: 没间隔1秒进行一次fsync. 折中.</div><div class="line">#</div><div class="line"># 默认是 &quot;everysec&quot;</div><div class="line"># appendfsync always</div><div class="line">appendfsync everysec</div><div class="line"># appendfsync no</div><div class="line"></div><div class="line"># 当AOF fsync策略被设置为always或者everysec并且后台保存进程（saving process)正在执行大量I/O操作时</div><div class="line"># Redis可能会在fsync()调用上阻塞过长时间</div><div class="line">#</div><div class="line">no-appendfsync-on-rewrite no</div><div class="line"></div><div class="line"># append only 文件的自动重写</div><div class="line"># 当AOF 日志文件即将增长到指定百分比时，Redis可以通过调用BGREWRITEAOF 来自动重写append only文件。</div><div class="line">#</div><div class="line"># 它是这么干的：Redis会记住最近一次重写后的AOF 文件size。然后它会把这个size与当前size进行比较，如果当前# size比指定的百分比大，就会触发重写。同样，你需要指定AOF文件被重写的最小size，这对避免虽然百分比达到了# 但是实际上文件size还是很小（这种情况没有必要重写）却导致AOF文件重写的情况很有用。</div><div class="line">#</div><div class="line">#</div><div class="line"># auto-aof-rewrite-percentage 设置为 0 可以关闭AOF重写功能</div><div class="line"></div><div class="line">auto-aof-rewrite-percentage 100</div><div class="line">auto-aof-rewrite-min-size 64mb</div><div class="line"></div><div class="line">################## SLOW LOG ###################################</div><div class="line"></div><div class="line"># Redis slow log用来记录超过指定执行时间的查询。</div><div class="line">#</div><div class="line"># 你可以指定两个参数：一个是慢查询的阀值，单位是毫秒；另外一个是slow log的长度，相当于一个队列。</div><div class="line"></div><div class="line"># 负数则关闭slow log，0则会导致每个命令都被记录</div><div class="line">slowlog-log-slower-than 10000</div><div class="line"></div><div class="line"># 不设置会消耗过多内存，所以还是要设置一下。可以使用SLOWLOG RESET命令来回收slow log使用的内存</div><div class="line">slowlog-max-len 1024</div><div class="line"></div><div class="line">################ 虚拟内存 ###############################</div><div class="line">#使用redis 就别用虚拟内存了，绝对不是一个好主意，加个机器吧，所以这里不翻译啦！！</div><div class="line"></div><div class="line">### WARNING! Virtual Memory is deprecated in Redis 2.4</div><div class="line">### The use of Virtual Memory is strongly discouraged.</div><div class="line"></div><div class="line"># Virtual Memory allows Redis to work with datasets bigger than the actual</div><div class="line"># amount of RAM needed to hold the whole dataset in memory.</div><div class="line"># In order to do so very used keys are taken in memory while the other keys</div><div class="line"># are swapped into a swap file, similarly to what operating systems do</div><div class="line"># with memory pages.</div><div class="line">#</div><div class="line"># To enable VM just set &apos;vm-enabled&apos; to yes, and set the following three</div><div class="line"># VM parameters accordingly to your needs.</div><div class="line"></div><div class="line">vm-enabled no</div><div class="line"># vm-enabled yes</div><div class="line"></div><div class="line"># This is the path of the Redis swap file. As you can guess, swap files</div><div class="line"># can&apos;t be shared by different Redis instances, so make sure to use a swap</div><div class="line"># file for every redis process you are running. Redis will complain if the</div><div class="line"># swap file is already in use.</div><div class="line">#</div><div class="line"># The best kind of storage for the Redis swap file (that&apos;s accessed at random)</div><div class="line"># is a Solid State Disk (SSD).</div><div class="line">#</div><div class="line"># *** WARNING *** if you are using a shared hosting the default of putting</div><div class="line"># the swap file under /tmp is not secure. Create a dir with access granted</div><div class="line"># only to Redis user and configure Redis to create the swap file there.</div><div class="line">vm-swap-file /tmp/redis.swap</div><div class="line"></div><div class="line"># vm-max-memory configures the VM to use at max the specified amount of</div><div class="line"># RAM. Everything that deos not fit will be swapped on disk *if* possible, that</div><div class="line"># is, if there is still enough contiguous space in the swap file.</div><div class="line">#</div><div class="line"># With vm-max-memory 0 the system will swap everything it can. Not a good</div><div class="line"># default, just specify the max amount of RAM you can in bytes, but it&apos;s</div><div class="line"># better to leave some margin. For instance specify an amount of RAM</div><div class="line"># that&apos;s more or less between 60 and 80% of your free RAM.</div><div class="line">vm-max-memory 0</div><div class="line"></div><div class="line"># Redis swap files is split into pages. An object can be saved using multiple</div><div class="line"># contiguous pages, but pages can&apos;t be shared between different objects.</div><div class="line"># So if your page is too big, small objects swapped out on disk will waste</div><div class="line"># a lot of space. If you page is too small, there is less space in the swap</div><div class="line"># file (assuming you configured the same number of total swap file pages).</div><div class="line">#</div><div class="line"># If you use a lot of small objects, use a page size of 64 or 32 bytes.</div><div class="line"># If you use a lot of big objects, use a bigger page size.</div><div class="line"># If unsure, use the default :)</div><div class="line">vm-page-size 32</div><div class="line"></div><div class="line"># Number of total memory pages in the swap file.</div><div class="line"># Given that the page table (a bitmap of free/used pages) is taken in memory,</div><div class="line"># every 8 pages on disk will consume 1 byte of RAM.</div><div class="line">#</div><div class="line"># The total swap size is vm-page-size * vm-pages</div><div class="line">#</div><div class="line"># With the default of 32-bytes memory pages and 134217728 pages Redis will</div><div class="line"># use a 4 GB swap file, that will use 16 MB of RAM for the page table.</div><div class="line">#</div><div class="line"># It&apos;s better to use the smallest acceptable value for your application,</div><div class="line"># but the default is large in order to work in most conditions.</div><div class="line">vm-pages 134217728</div><div class="line"></div><div class="line"># Max number of VM I/O threads running at the same time.</div><div class="line"># This threads are used to read/write data from/to swap file, since they</div><div class="line"># also encode and decode objects from disk to memory or the reverse, a bigger</div><div class="line"># number of threads can help with big objects even if they can&apos;t help with</div><div class="line"># I/O itself as the physical device may not be able to couple with many</div><div class="line"># reads/writes operations at the same time.</div><div class="line">#</div><div class="line"># The special value of 0 turn off threaded I/O and enables the blocking</div><div class="line"># Virtual Memory implementation.</div><div class="line">vm-max-threads 4</div><div class="line"></div><div class="line">################高级配置###############################</div><div class="line"></div><div class="line"># Hashes are encoded in a special way (much more memory efficient) when they</div><div class="line"># have at max a given numer of elements, and the biggest element does not</div><div class="line"># exceed a given threshold. You can configure this limits with the following</div><div class="line"># configuration directives.</div><div class="line">hash-max-zipmap-entries 512</div><div class="line">hash-max-zipmap-value 64</div><div class="line"></div><div class="line"># Similarly to hashes, small lists are also encoded in a special way in order</div><div class="line"># to save a lot of space. The special representation is only used when</div><div class="line"># you are under the following limits:</div><div class="line">list-max-ziplist-entries 512</div><div class="line">list-max-ziplist-value 64</div><div class="line"></div><div class="line"># Sets have a special encoding in just one case: when a set is composed</div><div class="line"># of just strings that happens to be integers in radix 10 in the range</div><div class="line"># of 64 bit signed integers.</div><div class="line"># The following configuration setting sets the limit in the size of the</div><div class="line"># set in order to use this special memory saving encoding.</div><div class="line">set-max-intset-entries 512</div><div class="line"></div><div class="line"># Similarly to hashes and lists, sorted sets are also specially encoded in</div><div class="line"># order to save a lot of space. This encoding is only used when the length and</div><div class="line"># elements of a sorted set are below the following limits:</div><div class="line">zset-max-ziplist-entries 128</div><div class="line">zset-max-ziplist-value 64</div><div class="line"></div><div class="line"># Active rehashing uses 1 millisecond every 100 milliseconds of CPU time in</div><div class="line"># order to help rehashing the main Redis hash table (the one mapping top-level</div><div class="line"># keys to values). The hash table implementation redis uses (see dict.c)</div><div class="line"># performs a lazy rehashing: the more operation you run into an hash table</div><div class="line"># that is rhashing, the more rehashing &quot;steps&quot; are performed, so if the</div><div class="line"># server is idle the rehashing is never complete and some more memory is used</div><div class="line"># by the hash table.</div><div class="line">#</div><div class="line"># The default is to use this millisecond 10 times every second in order to</div><div class="line"># active rehashing the main dictionaries, freeing memory when possible.</div><div class="line">#</div><div class="line"># If unsure:</div><div class="line"># use &quot;activerehashing no&quot; if you have hard latency requirements and it is</div><div class="line"># not a good thing in your environment that Redis can reply form time to time</div><div class="line"># to queries with 2 milliseconds delay.</div><div class="line">#</div><div class="line"># use &quot;activerehashing yes&quot; if you don&apos;t have such hard requirements but</div><div class="line"># want to free memory asap when possible.</div><div class="line">activerehashing yes</div><div class="line"></div><div class="line">################## INCLUDES ###################################</div><div class="line"></div><div class="line"># Include one or more other config files here.  This is useful if you</div><div class="line"># have a standard template that goes to all redis server but also need</div><div class="line"># to customize a few per-server settings.  Include files can include</div><div class="line"># other files, so use this wisely.</div><div class="line">#</div><div class="line"># include /path/to/local.conf</div><div class="line"># include /path/to/other.conf</div></pre></td></tr></table></figure>
<h2 id="Redis常用命令"><a href="#Redis常用命令" class="headerlink" title="Redis常用命令"></a>Redis常用命令</h2><h3 id="键值相关命令"><a href="#键值相关命令" class="headerlink" title="键值相关命令"></a>键值相关命令</h3><p>1、 keys  键名</p>
<blockquote>
<p>按照键名查找指定的键。支持通配符</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">127.0.0.1:6379&gt; set hello 1</div><div class="line">OK</div><div class="line">127.0.0.1:6379&gt; set hallo 1</div><div class="line">OK</div><div class="line">127.0.0.1:6379&gt; set heeeello 1</div><div class="line">OK</div><div class="line">127.0.0.1:6379&gt; keys h?llo</div><div class="line">1) &quot;hallo&quot;</div><div class="line">2) &quot;hello&quot;</div><div class="line">127.0.0.1:6379&gt; keys h*llo</div><div class="line">1) &quot;hallo&quot;</div><div class="line">2) &quot;heeeello&quot;</div><div class="line">3) &quot;hello&quot;</div></pre></td></tr></table></figure>
<p>2、    exists  键名</p>
<blockquote>
<p>   确认一个键是否存在</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">127.0.0.1:6379&gt; EXISTS name</div><div class="line">(integer) 1						//name键存在</div><div class="line">127.0.0.1:6379&gt; EXISTS age</div><div class="line">(integer) 0						//age键不存在</div></pre></td></tr></table></figure>
<p>3、    del  键名</p>
<blockquote>
<p>   删除一个键</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">127.0.0.1:6379&gt; del hello</div><div class="line">(integer) 1</div><div class="line">127.0.0.1:6379&gt; EXISTS hello</div><div class="line">(integer) 0</div></pre></td></tr></table></figure>
<p>4、    expire  键  秒</p>
<blockquote>
<p>   设置一个键的过期时间，如果键已经过期，将会被自动删除</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">127.0.0.1:6379&gt; set age 18</div><div class="line">OK</div><div class="line">127.0.0.1:6379&gt; EXPIRE age 20</div><div class="line">(integer) 1</div><div class="line">127.0.0.1:6379&gt; ttl age</div><div class="line">(integer) 18</div><div class="line">127.0.0.1:6379&gt; ttl age</div><div class="line">(integer) -2</div><div class="line">127.0.0.1:6379&gt; EXISTS age</div><div class="line">(integer) 0</div></pre></td></tr></table></figure>
<p>5、    ttl  键</p>
<blockquote>
<p>   以秒为单位，返回键的剩余生存时间。</p>
<p>   当键不存在时，返回值为-2</p>
<p>   当键存在，但没有设置剩余生存时间时，返回-1</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">127.0.0.1:6379&gt; ttl name</div><div class="line">(integer) -1</div></pre></td></tr></table></figure>
<p>6、    select  数据库号</p>
<blockquote>
<p>   选择一个数据库。<br>   默认连接的数据库是0，可以支持共16个数据库。<br>   在配置文件中，通过databases 16 关键字定义</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">127.0.0.1:6379&gt; select 1</div><div class="line">OK</div><div class="line">127.0.0.1:6379[1]&gt;</div></pre></td></tr></table></figure>
<p>7、    move  键  数据库号</p>
<blockquote>
<p>   将当前数据库的键移动到指定的数据空中</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">127.0.0.1:6379&gt; set age 18</div><div class="line">OK</div><div class="line">127.0.0.1:6379&gt; move age 1</div><div class="line">(integer) 1</div><div class="line">127.0.0.1:6379&gt; get age</div><div class="line">(nil)</div><div class="line">127.0.0.1:6379&gt; select 1</div><div class="line">OK</div><div class="line">127.0.0.1:6379[1]&gt; get age</div><div class="line">&quot;18&quot;</div></pre></td></tr></table></figure>
<p>8、    randomkey  </p>
<blockquote>
<p>   从当前数据库返回一个随机的键。如果当前库没有任何键，则返回nil</p>
</blockquote>
<p>9、    rename  旧名  新名</p>
<blockquote>
<p>   重命名键</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">127.0.0.1:6379&gt; rename name name_new</div><div class="line">OK</div><div class="line">127.0.0.1:6379&gt; get name_new</div><div class="line">&quot;sc&quot;</div></pre></td></tr></table></figure>
<p>10、 type  键</p>
<blockquote>
<pre><code>返回键类型。
</code></pre></blockquote>
<p>返回值</p>
<ul>
<li>none (key不存在)</li>
<li>string (字符串)</li>
<li>list (列表)</li>
<li>set (集合)</li>
<li>zset (有序集)</li>
<li>hash (哈希表)</li>
</ul>
<h3 id="服务器相关命令"><a href="#服务器相关命令" class="headerlink" title="服务器相关命令"></a>服务器相关命令</h3><p>1、    ping</p>
<blockquote>
<p>   测试服务器是否可以连接</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">127.0.0.1:6379&gt; ping</div><div class="line">PONG					//连接正常</div><div class="line">127.0.0.1:6379&gt; ping</div><div class="line">Could not connect to Redis at 127.0.0.1:6379: Connection refused</div><div class="line">//redis被停止，连接拒绝</div></pre></td></tr></table></figure>
<p>2、    echo  字符串</p>
<blockquote>
<p>   在命令行输出字符串</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">127.0.0.1:6379&gt; echo &quot;test message&quot;</div><div class="line">&quot;test message&quot;</div></pre></td></tr></table></figure>
<p>3、    quit</p>
<blockquote>
<p>   退出redis数据库</p>
</blockquote>
<p>4、    save</p>
<blockquote>
<p>   保存所有的数据。很少在生产环境直接使用SAVE 命令，因为它会阻塞所有的客户端的请求，可以使用BGSAVE 命令代替. 如果在BGSAVE命令的保存数据的子进程发生错误的时,用 SAVE命令保存最新的数据是最后的手段</p>
</blockquote>
<p>5、    dbsize</p>
<blockquote>
<p>   返回当前库中键的数量</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">127.0.0.1:6379&gt; dbsize</div><div class="line">(integer) 6</div></pre></td></tr></table></figure>
<p>6、    info</p>
<blockquote>
<p>   获取服务器的详细信息</p>
</blockquote>
<p>7、    config get 参数</p>
<blockquote>
<p>   获取redis服务器配置文件中的参数。支持通配符</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">127.0.0.1:6379&gt; config get *			//查询配置文件中所有的参数</div><div class="line">  1) &quot;dbfilename&quot;</div><div class="line">  2) &quot;dump.rdb&quot;</div><div class="line"> 45) &quot;port&quot;</div><div class="line"> 46) &quot;6379&quot;</div><div class="line"> 99) &quot;save&quot;</div><div class="line"> 100) &quot;900 1 300 10 60 10000&quot;</div></pre></td></tr></table></figure>
<p>8、 flushdb</p>
<blockquote>
<p>   删除当前数据库中所有的数据</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">127.0.0.1:6379&gt; dbsize</div><div class="line">(integer) 6</div><div class="line">127.0.0.1:6379&gt; flushdb</div><div class="line">OK</div><div class="line">127.0.0.1:6379&gt; dbsize</div><div class="line">(integer) 0</div></pre></td></tr></table></figure>
<p>9、    flushall</p>
<blockquote>
<pre><code>删除所有数据库中所有的数据
</code></pre></blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;redis是一个key-value存储系统。&lt;br&gt;和Memcached类似，它支持存储的value类型相对更多，&lt;br&gt;包括string(字符串)、list(链表)、set(集合)和zset(有序集合)。&lt;br&gt;这些数据类型都支持push/pop、add/remove及取交集并集和差集及更丰富的操作，而且这些操作都是原子性的。&lt;/p&gt;
&lt;p&gt;在此基础上，redis支持各种不同方式的排序。与memcached一样，为了保证效率，数据都是缓存在内存中。&lt;br&gt;区别的是redis会周期性的把更新的数据写入磁盘或者把修改操作写入追加的记录文件，并且在此基础上实现了master-slave(主从)同步。&lt;/p&gt;
&lt;p&gt;Redis 是一个高性能的key-value数据库。&lt;br&gt; redis的出现，很大程度补偿了memcached这类key/value存储的不足，在部 分场合可以对关系数据库起到很好的补充作用。&lt;br&gt;它提供了Python，Ruby，Erlang，PHP客户端，使用很方便。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Memcache&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;内存缓存服务，缓存数据保存在内存中，一旦断电重启，数据将丢失&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;mangoDB&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;开源免费的NOSQL 数据库，提供数据持久化服务，以文档的形式提供数据组织方式，而不是表&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Redis&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;开源免费的 NOSQL数据库，提供数据持久化服务，即能实现内存缓存服务，也能提供数据结构服务取代MySQL 自建索引用来弥补关系型数据的不足&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="Linux" scheme="https://weizhimiao.github.io/categories/Linux/"/>
    
    
      <category term="Redis" scheme="https://weizhimiao.github.io/tags/Redis/"/>
    
  </entry>
  
</feed>
