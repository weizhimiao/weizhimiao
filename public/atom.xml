<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>行云流水</title>
  <subtitle>却也碎碎念念</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://weizhimiao.github.io/"/>
  <updated>2016-10-04T14:38:23.000Z</updated>
  <id>https://weizhimiao.github.io/</id>
  
  <author>
    <name>zhimiao</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Nginx服务器https配置</title>
    <link href="https://weizhimiao.github.io/2016/10/04/Nginx%E6%9C%8D%E5%8A%A1%E5%99%A8https%E9%85%8D%E7%BD%AE/"/>
    <id>https://weizhimiao.github.io/2016/10/04/Nginx服务器https配置/</id>
    <published>2016-10-04T13:30:00.000Z</published>
    <updated>2016-10-04T14:38:23.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://n.sinaimg.cn/games/3ece443e/20161004/https.png" alt="Nginx服务器https配置"></p>
<a id="more"></a>
<h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><p>Linux：Linux version 3.10.0-123.9.3.el7.x86_64<br>Nginx：nginx/1.6.3<br>openssl：1.0.1e</p>
<h2 id="申请证书"><a href="#申请证书" class="headerlink" title="申请证书"></a>申请证书</h2><p>目前网上有不少机构提供个人免费 ssl 证书，有效期几个月到几年不等。以 <a href="https://www.startssl.com" target="_blank" rel="external">StartSSL :https://www.startssl.com</a> 为例, 申请成功后有效期 3 年，到期后可免费续租。<br>具体申请过程也很简单。<br>注册登录以后选择 Certificates Wizard &gt;&gt;     DV SSL Certificate 申请一个免费的 ssl 证书。</p>
<p>通过邮件验证域名之后，然后在自己服务器中生成 SSL 证书的 csr ，<strong>记住生成输入的秘密</strong>，之后要用到：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">openssl req -newkey rsa:2048 -keyout weizhimiao.cn.key -out weizhimiao.cn.csr</div></pre></td></tr></table></figure></p>
<p>将生成的证书，放到指定的存放证书的目录，如 <code>/data/secret/</code> 。查看证书 <code>weizhimiao.csr</code> 内容，将内容复制到页面中的 Certificate Signing Request (CSR)部分，提交页面。</p>
<p>下载生成好的证书,选择对应的web服务器（Nginx，1_weizhimiao.cn_bundle.crt），这样私钥和公钥我们就都有了。</p>
<ul>
<li>1_weizhimiao.cn_bundle.crt（公钥）</li>
<li>weizhimiao.cn.key（私钥）</li>
</ul>
<h2 id="nginx配置（为指定域名增加https）"><a href="#nginx配置（为指定域名增加https）" class="headerlink" title="nginx配置（为指定域名增加https）"></a>nginx配置（为指定域名增加https）</h2><p>nginx.conf当前配置<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">...</div><div class="line">http &#123;</div><div class="line">    ...</div><div class="line">    include /etc/nginx/conf.d/*.conf;</div><div class="line"></div><div class="line">    server &#123;</div><div class="line">        ...</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>./conf.d/weizhimiao.cn.conf中加入<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">server&#123;</div><div class="line">    listen 443 ssl;</div><div class="line">    server_name weizhimiao.cn;</div><div class="line"></div><div class="line">    ssl_certificate /data/secret/1_weizhimiao.cn_bundle.crt;</div><div class="line">    ssl_certificate_key /data/secret/weizhimiao.cn.key;</div><div class="line">    ssl_prefer_server_ciphers on;</div><div class="line">    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;</div><div class="line"></div><div class="line">    ssl_ciphers &apos;kEECDH+ECDSA+AES128 kEECDH+ECDSA+AES256 kEECDH+AES128 kEECDH+AES256 kEDH+AES128 kEDH+AES256 DES-CBC3-SHA +SHA !aNULL !eNULL !LOW !MD5 !EXP !DSS !PSK !SRP !kECDH !CAMELLIA !RC4 !SEED&apos;;</div><div class="line"></div><div class="line">    add_header Strict-Transport-Security &apos;max-age=31536000; preload&apos;;</div><div class="line">    add_header X-Frame-Options DENY;</div><div class="line">    ssl_session_cache   shared:SSL:10m;</div><div class="line">    ssl_session_timeout 10m;</div><div class="line">    keepalive_timeout 70;</div><div class="line">    ssl_dhparam /data/secret/dhparam.pem;</div><div class="line"></div><div class="line">    add_header X-Content-Type-Options nosniff;</div><div class="line"></div><div class="line">    add_header X-Xss-Protection 1;</div><div class="line"></div><div class="line">    root /data/www/weizhimiao.cn;</div><div class="line">    index index.html;</div><div class="line"></div><div class="line">    location / &#123;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><strong>注：</strong><br>配置中用到一个 <code>/data/secret/dhparam.pem</code> 文件，该文件是一个PEM格式的密钥文件，用于TLS会话中。用来加强ssl的安全性。生成该文件方法，<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">cd /data/secret/</div><div class="line">openssl dhparam 2048 -out dhparam.pem</div></pre></td></tr></table></figure></p>
<p>将原来80端口的访问，重定向。./conf.d/weizhimiao.cn.conf中加入<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">server&#123;</div><div class="line">    listen 80;</div><div class="line">    server_name  weizhimiao.cn;</div><div class="line">    return 301 https://weizhimiao.cn$request_uri;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>检测配置文件是否有语法错误，需要输入之前生成公钥时输入的密码。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">nginx -t</div><div class="line">Enter PEM pass phrase:</div><div class="line">nginx: the configuration file /etc/nginx/nginx.conf syntax is ok</div><div class="line">nginx: configuration file /etc/nginx/nginx.conf test is successful</div></pre></td></tr></table></figure></p>
<p>重启Nginx(切记，reload不起作用)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">nginx -s stop</div><div class="line">Enter PEM pass phrase:</div><div class="line">nginx</div><div class="line">Enter PEM pass phrase:</div></pre></td></tr></table></figure></p>
<p>浏览器访问 weizhimiao.cn ,是否生效。</p>
<p>另，Nginx配置了安全证书之后，nginx每次的reload、stop等操作都需要输入密码。<br>可以通过生成一个解密的key文件，替代原来key文件。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">cd /data/secret/</div><div class="line">openssl rsa -in weizhimiao.cn.key -out weizhimiao.cn.key.unsecure</div></pre></td></tr></table></figure></p>
<p>替换 <code>weizhimiao.cn.conf</code> 中的 <code>weizhimiao.cn.key</code> 文件.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">server &#123;</div><div class="line">  ...</div><div class="line">  ssl_certificate /data/secret/1_weizhimiao.cn_bundle.crt;</div><div class="line">  ssl_certificate_key /data/secret/weizhimiao.cn.key.unsecure;</div><div class="line">  ...</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>之后每次在reload时，就不需要在输入密码了。</p>
<p>最后，用 <a href="https://www.ssllabs.com/ssltest/index.html" target="_blank" rel="external">SSLLABS</a> 来进行一下测试。<br><img src="http://n.sinaimg.cn/games/3ece443e/20161004/ssllabs.png" alt="ssllabs"><br>结果<br><img src="http://n.sinaimg.cn/games/3ece443e/20161004/ssllabsres.png" alt="ssllabs"></p>
<p>over~</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://n.sinaimg.cn/games/3ece443e/20161004/https.png&quot; alt=&quot;Nginx服务器https配置&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Nginx" scheme="https://weizhimiao.github.io/categories/Nginx/"/>
    
    
      <category term="https" scheme="https://weizhimiao.github.io/tags/https/"/>
    
  </entry>
  
  <entry>
    <title>Nginx虚拟主机配置</title>
    <link href="https://weizhimiao.github.io/2016/10/04/Nginx%E8%99%9A%E6%8B%9F%E4%B8%BB%E6%9C%BA%E8%AE%BE%E7%BD%AE/"/>
    <id>https://weizhimiao.github.io/2016/10/04/Nginx虚拟主机设置/</id>
    <published>2016-10-04T12:30:00.000Z</published>
    <updated>2016-10-04T14:46:59.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://n.sinaimg.cn/games/3ece443e/20161004/VirtualHost.png" alt="virtual Host"></p>
<a id="more"></a>
<h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><p>Linux：Linux version 3.10.0-123.9.3.el7.x86_64</p>
<p>Nginx: nginx/1.6.3</p>
<p>配置文件目录结构<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">$ tree</div><div class="line">.</div><div class="line">├── conf.d</div><div class="line">├── default.d</div><div class="line">├── fastcgi.conf</div><div class="line">├── fastcgi.conf.default</div><div class="line">├── fastcgi_params</div><div class="line">├── fastcgi_params.default</div><div class="line">├── koi-utf</div><div class="line">├── koi-win</div><div class="line">├── mime.types</div><div class="line">├── mime.types.default</div><div class="line">├── nginx.conf</div><div class="line">├── nginx.conf.default</div><div class="line">├── scgi_params</div><div class="line">├── scgi_params.default</div><div class="line">├── uwsgi_params</div><div class="line">├── uwsgi_params.default</div><div class="line">└── win-utf</div></pre></td></tr></table></figure></p>
<h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>将 site1.cn 和site2.cn基于域名进行配置</p>
<h3 id="准备-1"><a href="#准备-1" class="headerlink" title="准备"></a>准备</h3><p>分别创建两个域名的配置文件和web根目录。</p>
<p>./conf.d/下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">cd conf.d/</div><div class="line">touch site1.cn.conf</div><div class="line">touch site2.cn.conf</div></pre></td></tr></table></figure></p>
<p>分别创建web根目录<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">mkdri -p /data/www</div><div class="line">cd  /data/www</div><div class="line">mkdir site1.cn</div><div class="line">mkdir site2.cn</div></pre></td></tr></table></figure></p>
<h3 id="修改主配置文件nginx-conf"><a href="#修改主配置文件nginx-conf" class="headerlink" title="修改主配置文件nginx.conf"></a>修改主配置文件nginx.conf</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div></pre></td><td class="code"><pre><div class="line">user nginx;</div><div class="line">worker_processes auto;</div><div class="line">error_log /var/log/nginx/error.log;</div><div class="line">pid /run/nginx.pid;</div><div class="line"></div><div class="line">events &#123;</div><div class="line">    worker_connections 1024;</div><div class="line">&#125;</div><div class="line"></div><div class="line">http &#123;</div><div class="line">    log_format  main  &apos;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &apos;</div><div class="line">                      &apos;$status $body_bytes_sent &quot;$http_referer&quot; &apos;</div><div class="line">                      &apos;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&apos;;</div><div class="line"></div><div class="line">    access_log  /var/log/nginx/access.log  main;</div><div class="line"></div><div class="line">    sendfile            on;</div><div class="line">    tcp_nopush          on;</div><div class="line">    tcp_nodelay         on;</div><div class="line">    keepalive_timeout   65;</div><div class="line">    types_hash_max_size 2048;</div><div class="line"></div><div class="line">    include             /etc/nginx/mime.types;</div><div class="line">    default_type        application/octet-stream;</div><div class="line"></div><div class="line">    # Load modular configuration files from the /etc/nginx/conf.d directory.</div><div class="line">    # See http://nginx.org/en/docs/ngx_core_module.html#include</div><div class="line">    # for more information.</div><div class="line">    include /etc/nginx/conf.d/*.conf;</div><div class="line"></div><div class="line">    server &#123;</div><div class="line">        listen       80 default_server;</div><div class="line">        listen       [::]:80 default_server;</div><div class="line">        server_name  _;</div><div class="line">        root         /usr/share/nginx/html;</div><div class="line"></div><div class="line">        # Load configuration files for the default server block.</div><div class="line">        include /etc/nginx/default.d/*.conf;</div><div class="line"></div><div class="line">        location / &#123;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        error_page 404 /404.html;</div><div class="line">            location = /40x.html &#123;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        error_page 500 502 503 504 /50x.html;</div><div class="line">            location = /50x.html &#123;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>确保在http的context中的server部分前面要有<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">include /etc/nginx/conf.d/*.conf;</div></pre></td></tr></table></figure></p>
<p>通常情况下主配置文件中的server部分，将会是默认的server（通过添加default_server来声明），当一个请求过来，目录/etc/nginx/conf.d/中的所有server部分都匹配不了，那么这个请求将会被猪配置文件中的server来进行处理.</p>
<h3 id="site1-cn"><a href="#site1-cn" class="headerlink" title="site1.cn"></a>site1.cn</h3><p>修改配置文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">vi ./conf.d/site1.cn.conf</div></pre></td></tr></table></figure></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line">server &#123;</div><div class="line">	listen		80;</div><div class="line">	server_name	site1.cn;</div><div class="line"></div><div class="line">	error_page  404  /404.html;</div><div class="line"></div><div class="line">	error_page   500 503 504  /50x.html;</div><div class="line">	error_log	/var/log/nginx/debug.log debug;</div><div class="line">	index	index.html index.htm;</div><div class="line">	root /data/www/site1.cn;</div><div class="line"></div><div class="line">	location / &#123;</div><div class="line">		index index.html;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">  location = /favicon.ico &#123;</div><div class="line">  	try_files $uri $uri/favicon.ico /data/www/site1.cn/favicon.ico =404;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  # Deny all attempts to access hidden files such as .htaccess, .htpasswd, .DS_Store(Mac).</div><div class="line">  location ~ /\. &#123;</div><div class="line">      deny all;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">	location = /50x.html &#123;</div><div class="line">		root   /usr/share/nginx/html;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	location = /404.html &#123;</div><div class="line">		root   /usr/share/nginx/html;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>添加测试页面<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">cd /data/www/site1.cn</div><div class="line">echo &quot;site1.cn index.html&quot; &gt;&gt; index.html</div></pre></td></tr></table></figure></p>
<h3 id="site2-cn"><a href="#site2-cn" class="headerlink" title="site2.cn"></a>site2.cn</h3><p>修改配置文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">vi ./conf.d/site2.cn.conf</div></pre></td></tr></table></figure></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line">server &#123;</div><div class="line">	listen		80;</div><div class="line">	server_name	site2.cn;</div><div class="line"></div><div class="line">	error_page  404  /404.html;</div><div class="line"></div><div class="line">	error_page   500 503 504  /50x.html;</div><div class="line">	error_log	/var/log/nginx/debug.log debug;</div><div class="line">	index	index.html index.htm;</div><div class="line">	root /data/www/site2.cn;</div><div class="line"></div><div class="line">	location / &#123;</div><div class="line">		index index.html;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">  location = /favicon.ico &#123;</div><div class="line">  	try_files $uri $uri/favicon.ico /data/www/site2.cn/favicon.ico =404;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  # Deny all attempts to access hidden files such as .htaccess, .htpasswd, .DS_Store(Mac).</div><div class="line">  location ~ /\. &#123;</div><div class="line">      deny all;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">	location = /50x.html &#123;</div><div class="line">		root   /usr/share/nginx/html;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	location = /404.html &#123;</div><div class="line">		root   /usr/share/nginx/html;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>添加测试页面<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">cd /data/www/site2.cn</div><div class="line">echo &quot;site2.cn index.html&quot; &gt;&gt; index.html</div></pre></td></tr></table></figure></p>
<h3 id="重启Nginx"><a href="#重启Nginx" class="headerlink" title="重启Nginx"></a>重启Nginx</h3><p>重启之前，需要先进行配置文件语法检测<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">nginx -t</div><div class="line">nginx: the configuration file /etc/nginx/nginx.conf syntax is ok</div><div class="line">nginx: configuration file /etc/nginx/nginx.conf test is successful</div></pre></td></tr></table></figure></p>
<p>确定语法无问题之后，重启Nginx<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">nginx -s reload</div></pre></td></tr></table></figure></p>
<h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p>vi /etc/hosts<br>添加<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">site1.cn 127.0.0.1</div><div class="line">site2.cn 127.0.0.1</div></pre></td></tr></table></figure></p>
<p>分别访问 site1.cn和site2.cn ,查看是否输出对应内容<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">wget  site1.cn</div><div class="line">cat index.html</div><div class="line">#site1.cn index.html</div><div class="line"></div><div class="line">wget site2.cn</div><div class="line">cat index.html.2</div><div class="line">#site2.cn index.html</div></pre></td></tr></table></figure></p>
<p>关于nginx学习的一个网站:<a href="http://nglua.com" target="_blank" rel="external">http://nglua.com</a></p>
<p>over~</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://n.sinaimg.cn/games/3ece443e/20161004/VirtualHost.png&quot; alt=&quot;virtual Host&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Nginx" scheme="https://weizhimiao.github.io/categories/Nginx/"/>
    
    
      <category term="虚拟主机" scheme="https://weizhimiao.github.io/tags/%E8%99%9A%E6%8B%9F%E4%B8%BB%E6%9C%BA/"/>
    
  </entry>
  
  <entry>
    <title>Nginx配置整理</title>
    <link href="https://weizhimiao.github.io/2016/10/03/Nginx%E9%85%8D%E7%BD%AE%E6%95%B4%E7%90%86/"/>
    <id>https://weizhimiao.github.io/2016/10/03/Nginx配置整理/</id>
    <published>2016-10-03T14:30:00.000Z</published>
    <updated>2016-10-04T10:36:46.000Z</updated>
    
    <content type="html"><![CDATA[<p>Nginx配置主要分成四部分：main、server、upstream 和 location，每部分包含若干个指令。<br>main(全局设置)</p>
<blockquote>
<p>该部分设置的指令将影响其它所有部分的设置；</p>
</blockquote>
<p>server(主机设置)</p>
<blockquote>
<p>该部分的指令主要用于指定虚拟主机域名、IP和端口；</p>
</blockquote>
<p>upstream(上游服务器设置)</p>
<blockquote>
<p>该部分的指令用于设置一系列的后端服务器，设置反向代理及后端服务器的负载均衡；</p>
</blockquote>
<p>location(URL匹配特定位置后的设置)</p>
<blockquote>
<p>该部分用于匹配网页位置（比如，根目录“/”,“/images”,等等）。</p>
</blockquote>
<p>Nginx本身是模块化设计。全局的配置区段负责全局的各个方面，对于不同的协议可以单独划分成一个部分。我们可以通过在这些单独的协议配置中（http或mail）指定server来定义每一个请求应该被如何处理，以便请求被路由到特定的IP地址或端口上。在http区段中，使用location来匹配URI请求，这些location又可以嵌套使用或者按照一定顺序使用，以确保请求被路由到正确的文件系统区域或者其他地方。</p>
<p><strong>他们之间的关系式：</strong> server继承main，location继承server；upstream既不会继承指令也不会被继承。它有自己的特殊指令，不需要在其他地方的应用。</p>
<a id="more"></a>
<h2 id="基本配置格式"><a href="#基本配置格式" class="headerlink" title="基本配置格式"></a>基本配置格式</h2><p>Nginx的配置文件由若干部分组成。但每一部分都是通过下列的方法定义。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;section&gt; &#123;</div><div class="line">  &lt;directive&gt;&lt;parameters&gt;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><strong>Tips:</strong></p>
<ul>
<li>每一个指令行都由分号结束（;），这标志着一行结束。</li>
<li>大括号（{}）实际上表示一个新上下文（context），常称为『节，部分（section）』</li>
</ul>
<h2 id="Nginx的全局配置"><a href="#Nginx的全局配置" class="headerlink" title="Nginx的全局配置"></a>Nginx的全局配置</h2><p>全局配置顾名思义就是对整个server都有效的参数。全局配置部分可能包含配置指令（如，user、worker_processes），也包括『节、部分（section）（如，events）』。这部分配置一般放在 nginx.conf 文件的顶部。</p>
<p>示例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">user nginx;</div><div class="line">worker_processes auto;</div><div class="line">error_log /var/log/nginx/error.log;</div><div class="line">pid /run/nginx.pid;</div><div class="line"></div><div class="line">events &#123;</div><div class="line">    use epoll   #使用网络IO模型，epoll模型比select模型效率高很多</div><div class="line">    worker_connections 1024;    #每个worker能够处理的最大连接数，最大值取决于ulimit -n的值</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>主要配置指令及含义</p>
<table>
<thead>
<tr>
<th>配置指令</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>user</td>
<td>配置worker进程运行的用户和用户组，第一个参数为user，第二个为group（如果忽略了group，那么group与user同名）</td>
</tr>
<tr>
<td>worker_processes</td>
<td>指定worker进程启动的数量。这些进程用于处理客户的连接。通常该值会设置成CPU处理器核心数相同的数量。默认值是”auto”，也是按照这样去设置数量</td>
</tr>
<tr>
<td>error_log</td>
<td>设置错误日志文件位置。如果在其他的区段中没有设置其他的error_log,那么这个日志文件将会记录所有的错误。该指令的第二个参数指定了被记录的错误信息级别（debug[注，debug级别的错误只有在nginx编译的时候配置了 –with-debug选项才可以使用]、info、notice、warn、error、crit、alert、emsg）</td>
</tr>
<tr>
<td>pid</td>
<td>设置记录主进程ID的文件地址。通常设置该值来方便我们对nginx的管理</td>
</tr>
<tr>
<td>use</td>
<td>该指令指示我们使用什么样的连接方式。该指令需要写在 events 区段里面。</td>
</tr>
<tr>
<td>worker_connections</td>
<td>配置一个工作进程能够接受并发连接的最大数。这个连接包括，客户连接和向上游服务器的连接，但也不仅限于此。通常该配置同use一样写在events里面</td>
</tr>
</tbody>
</table>
<h2 id="include指令"><a href="#include指令" class="headerlink" title="include指令"></a>include指令</h2><p>在Nginx配置文件中可以使用include指令将其他位置存放的配置文件加载进来，来方便配置管理和增强配置文件的可读性。</p>
<p><strong>Tips：</strong><br>使用include文件，要确保被包含的文件自身符合nginx配置语法。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">include /etc/nginx/default.d/*.conf;</div></pre></td></tr></table></figure></p>
<p>路径中出现通配符表示可以匹配多个文件。<br>nginx配置文件的语法错误可以通过nginx的 -t 选项来进行测试。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/path/to/nginx -t -c &lt;path-to-nginx.conf&gt;</div></pre></td></tr></table></figure></p>
<p><strong>注：</strong> 该命令只能检查语法错误，具体到某个功能性的测试还需要我们自己有针对性的去测。</p>
<h2 id="Http的server部分"><a href="#Http的server部分" class="headerlink" title="Http的server部分"></a>Http的server部分</h2><p>通常我们提到的server部分，具体指的是Http的server部分。所以，其在Http配置的context是可用的。该部分用于处理http连接，因此该模块下提供了相当数量的指令。</p>
<h3 id="客户端指令"><a href="#客户端指令" class="headerlink" title="客户端指令"></a>客户端指令</h3><blockquote>
<p>用于处理客户端连接本身的各个方面，以及不同类型的客户端</p>
</blockquote>
<table>
<thead>
<tr>
<th>指令</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>chunked_transfer_encoding</td>
<td>在发给客户端的响应中允许禁用http/1.1标准的块传输编码</td>
</tr>
<tr>
<td>client_body_buffer_size</td>
<td>为了阻止临时文件写到磁盘，可以通过该指令为客户端请求体设置缓存大小，默认的缓存大小为两个内存页面</td>
</tr>
<tr>
<td>client_body_in_file_only</td>
<td>用于调试或者是进一步处理客户端请求体。该指令能够将客户端请求体强制写入到磁盘文件</td>
</tr>
<tr>
<td>client_body_in_single_buffer</td>
<td>为了减少拷贝的操作，使用该指令强制Nginx将整个客户端请求体保存到单个缓存中</td>
</tr>
<tr>
<td>client_body_temp_path</td>
<td>定义一个命令路径用于保存客户端请求体</td>
</tr>
<tr>
<td>clent_body_timeout</td>
<td>指定客户端成功读取的两个操作之间的时间间隔</td>
</tr>
<tr>
<td>client_header_buffer_size</td>
<td>为客户端请求头指定一个缓存大小，当请求头大于1kB时会用到这个设置。</td>
</tr>
<tr>
<td>client_header_timeout</td>
<td>读取整个客户端头的超时时间</td>
</tr>
<tr>
<td>client_max_body_size</td>
<td>定义允许最大的客户端请求头，如果大于该值，那么客户端将会是413（request entity too large）错误</td>
</tr>
<tr>
<td>keepalive_disable</td>
<td>对某些类型的客户端禁用keep-alive请求功能。</td>
</tr>
<tr>
<td>keepalive_requests</td>
<td>定义在一个keep-alive关闭之前可以接收多少个请求</td>
</tr>
<tr>
<td>keepalive_timeout</td>
<td>指定keep-alive连接持续多久。第二个参数用于在响应头中这只”Keep-Alive”头</td>
</tr>
<tr>
<td>large_client_header_buffers</td>
<td>定义最大数量和最大客户端请求头的大小</td>
</tr>
<tr>
<td>msie_padding</td>
<td>为了填充响应的大小至512字节，对于MSIE客户端，大于400的状态码会被添加注释以便满足512字节，通过启用该命令可以阻止这种行为</td>
</tr>
<tr>
<td>msie_refresh</td>
<td>对于MSIE客户端，可启用发送一个refresh头</td>
</tr>
</tbody>
</table>
<h3 id="文件I-O指令"><a href="#文件I-O指令" class="headerlink" title="文件I/O指令"></a>文件I/O指令</h3><blockquote>
<p>用于控制Nginx如何投递静态文件。</p>
</blockquote>
<table>
<thead>
<tr>
<th>指令</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>aio</td>
<td>启用异步文件I/O。FreeBSD系统下，该值可能被用于sendfile预加载数据。Linux下需要directio指令，自动禁用sendfile</td>
</tr>
<tr>
<td>directio</td>
<td>用于启用操作系统特定的标识或者功能提供大于给定参数的文件。Linux下使用aio时需要使用该指令。</td>
</tr>
<tr>
<td>directio_alignment</td>
<td>设置directio算法。默认值是512，通常已经足够，但是在Linux的XFS下推荐增加至4K</td>
</tr>
<tr>
<td>open_file_cache</td>
<td>配置一个缓存用于存放打开的文件描述符、目录查询和文件查询错误</td>
</tr>
<tr>
<td>open_file_cache_errors</td>
<td>按照open_file_cache，启用文件查询错误缓存</td>
</tr>
<tr>
<td>open_file_cache_min_uses</td>
<td>open_file_cache缓存的文件描述符保留在缓存中，使用该指令配置最少使用文件描述符的次数</td>
</tr>
<tr>
<td>open_file_cache_valid</td>
<td>指定对open_file_cache缓存有效性检查的时间间隔</td>
</tr>
<tr>
<td>postpone_output</td>
<td>指定Nginx发送给客户端最小的数值，如果可能的话，没有数据会发送，直到达到此值</td>
</tr>
<tr>
<td>read_ahead</td>
<td>如果可能的话，内核将预读文件到设定的参数大小</td>
</tr>
<tr>
<td>sendfile</td>
<td>使用sendfile（2）直接复制数据从一个到另一个文件描述符</td>
</tr>
<tr>
<td>sendfile_max_chunk</td>
<td>设置在一个sendfile(2)拷贝中最大数据的大小，这是为了阻止worker”贪婪”</td>
</tr>
</tbody>
</table>
<h3 id="Hash指令"><a href="#Hash指令" class="headerlink" title="Hash指令"></a>Hash指令</h3><blockquote>
<p>控制Nginx 分配给某些变量多大的静态文件</p>
</blockquote>
<table>
<thead>
<tr>
<th>指令</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>server_names_hash_bucket_size</td>
<td>指定用于保存server_name哈希表大小的”桶”</td>
</tr>
<tr>
<td>server_names_hash_max_size</td>
<td>指定的server_name哈希表的最大值的大小</td>
</tr>
<tr>
<td>types_hash_bucket_size</td>
<td>指定用于存放哈希表的”桶”的大小</td>
</tr>
<tr>
<td>types_hash_max_size</td>
<td>指定哈希类型表的最大值的大小</td>
</tr>
<tr>
<td>variables_hash_bucket_size</td>
<td>指定用于存放保留变量”桶”的大小</td>
</tr>
<tr>
<td>variables_hash_max_size</td>
<td>指定存放保留变量最大哈希值的大小</td>
</tr>
</tbody>
</table>
<h3 id="Socket指令"><a href="#Socket指令" class="headerlink" title="Socket指令"></a>Socket指令</h3><blockquote>
<p>描述Nginx如何设置创建TCP套接字的变量选项</p>
</blockquote>
<table>
<thead>
<tr>
<th>指令</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>lingering_close</td>
<td>指定如何保持客户端的连接，以便用于更多数据的传输</td>
</tr>
<tr>
<td>lingering_time</td>
<td>在使用lingering_close指令的连接中，使用该指令指定客户端连接为了处理更多的数据需要保持打开连接的时间</td>
</tr>
<tr>
<td>lingering_timeout</td>
<td>结合lingering_close，该指令显示Nginx在关闭客户端连接之前，为获得更多数据会等待多久</td>
</tr>
<tr>
<td>reset_timeout_connection</td>
<td>使用这个指令之后，超时的连接会被立即关闭，释放相关的内存。默认的状态是处于FIN_WAIT1，这种状态将会一直保持连接</td>
</tr>
<tr>
<td>send_lowat</td>
<td>如果非零，Nginx将会在客户端套接字尝试减少发送操作</td>
</tr>
<tr>
<td>send_timeout</td>
<td>在两次成功的客户端接收响应的写操作之间设置一个超时时间</td>
</tr>
<tr>
<td>tcp_nodelay</td>
<td>启用或禁用TCP_NODELAY选项，用于keep-alive连接</td>
</tr>
<tr>
<td>tcp_nopush</td>
<td>仅依赖于sendfile的使用。它能够使Nginx在一个数据包中尝试发送响应头，以及在数据包中发送一个完整的文件</td>
</tr>
</tbody>
</table>
<h3 id="server部分"><a href="#server部分" class="headerlink" title="server部分"></a>server部分</h3><p>示例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">http &#123;</div><div class="line">    ...</div><div class="line">    server &#123;</div><div class="line">        listen       80 default_server;</div><div class="line">        server_name  _;</div><div class="line">        root         /usr/share/nginx/html;</div><div class="line"></div><div class="line">        # Load configuration files for the default server block.</div><div class="line">        include /etc/nginx/default.d/*.conf;</div><div class="line"></div><div class="line">        location / &#123;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        error_page 404 /404.html;</div><div class="line">            location = /40x.html &#123;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        error_page 500 502 503 504 /50x.html;</div><div class="line">            location = /50x.html &#123;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    ...</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>一个虚拟服务器由listen和server_name指令组合定义。</p>
<p><strong>listen</strong></p>
<blockquote>
<p>指令定义一个IP地址/端口组合或者UNIX套接字路径。示例</p>
<ul>
<li>listen address[:port];</li>
<li>listen port;</li>
<li>listen unix:path;</li>
</ul>
</blockquote>
<p>示例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">listen     127.0.0.1:80;</div><div class="line">listen     localhost:80;</div><div class="line">listen     127.0.0.1:8080;</div><div class="line">listen     localhost:8080;</div><div class="line">listen     192.168.3.105:80;</div><div class="line">listen     192.168.3.105:8080;</div><div class="line">listen     80;</div><div class="line">listen     *:80;</div><div class="line">listen     8080;</div><div class="line">listen     *:8080;</div><div class="line">listen     12.34.56.77:80;</div><div class="line">listen     12.34.56.78:80;</div><div class="line">listen     12.34.56.79:80;</div></pre></td></tr></table></figure></p>
<p>另外，listen还有其他的一些可选参数。常用到的有<br>default_server，表示定义这样的一个组合：（address:port）默认的请求被绑定于此<br>ssl，表明该端口仅接受Https的连接</p>
<p><strong>server_name</strong></p>
<blockquote>
<p>用来指定域名。</p>
</blockquote>
<p>示例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">server_name   nginx.cn;</div><div class="line">server_name   nginx.cn www.nginx.cn;</div><div class="line">server_name   *.nginx.cn;</div><div class="line">server_name   .nginx.cn;</div><div class="line">server_name   nginx.*;</div><div class="line">server_name   nginx.cng bucknell.net brackley.org;</div><div class="line">server_name   localhost litchfield bleddington;</div><div class="line">server_name   &quot;&quot;;</div></pre></td></tr></table></figure></p>
<p>除了普通字符串外，Nginx也接受通配符作为Server_name的参数。</p>
<ul>
<li>使用通配符替代部分子域名： *.example.com</li>
<li>代替顶级域部分： www.example.*</li>
<li>匹配子域和域本身： .example.com 能匹配 *.example.com 和example.com</li>
</ul>
<p>另外，在域名前加上（~），正则表达式也可应用于 server_name.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">server_name ~^www\.example\.com$</div><div class="line">server_name ~^www(\d+).example\.(com)$</div></pre></td></tr></table></figure></p>
<p>对于后一种方式是利用捕获，可以在以后的引用中进一步配置（用$1,$2等）指令中使用。</p>
<h2 id="location部分"><a href="#location部分" class="headerlink" title="location部分"></a>location部分</h2><p>location指令可以用在虚拟服务器server部分，并且意味着提供来自客户端的URI或者内部的重定向访问。</p>
<p>location定义：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">location [modifier] uri &#123;...&#125;</div></pre></td></tr></table></figure></p>
<p>或者是命名location<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">location @name &#123;...&#125;</div></pre></td></tr></table></figure></p>
<blockquote>
<p>命名location仅对内部访问重定向，在进入一个location之前他会保留被请求的URI部分。且命名location只能存在与server级别的定义。</p>
</blockquote>
<p>示例<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">location / &#123; &#125;</div><div class="line">location /images/ &#123; &#125;</div><div class="line">location /blog/ &#123; &#125;</div><div class="line">location /planet/ &#123; &#125;</div><div class="line">location /planet/blog/ &#123; &#125;</div><div class="line"></div><div class="line">location ~ IndexPage.php$ &#123; &#125;</div><div class="line">location ~ ^/BlogPlanet(/|/index.php)$ &#123; &#125;</div><div class="line"></div><div class="line">location ~* .(pl|cgi|perl|prl)$ &#123; &#125;</div><div class="line">location ~* .(md|mdwn|txt|mkdn)$ &#123; &#125;</div><div class="line"></div><div class="line">location ^~ /images/IndexPage/ &#123; &#125;</div><div class="line">location ^~ /blog/BlogPlanet/ &#123; &#125;</div><div class="line"></div><div class="line">location = / &#123; &#125;</div></pre></td></tr></table></figure></p>
<p>当一个请求进入时，URI将会被检测匹配一个最佳的location。</p>
<ul>
<li>没有正则表达式的location被认为是最佳的匹配，独立于含有正则表达式的location。</li>
<li>在配置文件中按照查找顺序进行正则匹配，在查到第一个正则表达式匹配时结束查找，将请求交由这个location处理。<br><strong>Tips：</strong><br>这里匹配的解码URI，如在URL中的”%20”,将会匹配location中的””(空格)。</li>
</ul>
<p>location常见的修饰符</p>
<table>
<thead>
<tr>
<th>修饰符</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>=</td>
<td>使用精确匹配并且终止搜索</td>
</tr>
<tr>
<td>~</td>
<td>区分大小写的正则表达式匹配</td>
</tr>
<tr>
<td>~*</td>
<td>不去分大小写的正则表达式匹配</td>
</tr>
<tr>
<td>^~</td>
<td>如果该location是最佳的匹配，那么对于匹配这个location的字符串不在进行正则表达式检测。</td>
</tr>
</tbody>
</table>
<p>仅用于location中的指令</p>
<table>
<thead>
<tr>
<th>指令</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>alias</td>
<td>定义location的其他名字，在文件系统中能够找到。</td>
</tr>
<tr>
<td>internal</td>
<td>指定一个仅用于内部请求的location（其他指定定义的重定向，rewrite请求，error请求等）</td>
</tr>
<tr>
<td>limit_except</td>
<td>限定一个location可以执行的Http操作（如，GET或HEAD）</td>
</tr>
</tbody>
</table>
<p>命名location的使用（一般与try_files配合使用）<br>示例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">location / &#123;</div><div class="line">  try_files $uri $uri/ $mongrel;</div><div class="line">&#125;</div><div class="line"></div><div class="line">location @mongrel &#123;</div><div class="line">  proxy_pass http://appserver;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>上面一段配置表示，如果给定的URI作为一个文件没有被找到，那么处理将会通过代理被传递到appserver</p>
<p>location的嵌套使用：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">root /var/www</div><div class="line"></div><div class="line">location / &#123;</div><div class="line">  location ^~ /css &#123;</div><div class="line">    location ~* /css.*\.css$ &#123;</div><div class="line">      ...</div><div class="line">    &#125;</div><div class="line">    ...</div><div class="line">  &#125;</div><div class="line">  ...</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><strong>实践表明正则表达式location被嵌套在基于字符串的location是最佳的配置方式</strong></p>
<h2 id="完整的配置文件示例"><a href="#完整的配置文件示例" class="headerlink" title="完整的配置文件示例"></a>完整的配置文件示例</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div></pre></td><td class="code"><pre><div class="line"># For more information on configuration, see:</div><div class="line">#   * Official English Documentation: http://nginx.org/en/docs/</div><div class="line">#   * Official Russian Documentation: http://nginx.org/ru/docs/</div><div class="line"></div><div class="line">user nginx;</div><div class="line">worker_processes auto;</div><div class="line">error_log /var/log/nginx/error.log;</div><div class="line">pid /run/nginx.pid;</div><div class="line"></div><div class="line">events &#123;</div><div class="line">    worker_connections 1024;</div><div class="line">&#125;</div><div class="line"></div><div class="line">http &#123;</div><div class="line">    log_format  main  &apos;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &apos;</div><div class="line">                      &apos;$status $body_bytes_sent &quot;$http_referer&quot; &apos;</div><div class="line">                      &apos;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&apos;;</div><div class="line"></div><div class="line">    access_log  /var/log/nginx/access.log  main;</div><div class="line"></div><div class="line">    sendfile            on;</div><div class="line">    tcp_nopush          on;</div><div class="line">    tcp_nodelay         on;</div><div class="line">    keepalive_timeout   65;</div><div class="line">    types_hash_max_size 2048;</div><div class="line"></div><div class="line">    include             /etc/nginx/mime.types;</div><div class="line">    default_type        application/octet-stream;</div><div class="line"></div><div class="line">    # Load modular configuration files from the /etc/nginx/conf.d directory.</div><div class="line">    # See http://nginx.org/en/docs/ngx_core_module.html#include</div><div class="line">    # for more information.</div><div class="line">    include /etc/nginx/conf.d/*.conf;</div><div class="line"></div><div class="line">    server &#123;</div><div class="line">        listen       80 default_server;</div><div class="line">        listen       [::]:80 default_server;</div><div class="line">        server_name  _;</div><div class="line">        root         /usr/share/nginx/html;</div><div class="line"></div><div class="line">        # Load configuration files for the default server block.</div><div class="line">        include /etc/nginx/default.d/*.conf;</div><div class="line"></div><div class="line">        location / &#123;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        error_page 404 /404.html;</div><div class="line">            location = /40x.html &#123;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        error_page 500 502 503 504 /50x.html;</div><div class="line">            location = /50x.html &#123;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Nginx配置主要分成四部分：main、server、upstream 和 location，每部分包含若干个指令。&lt;br&gt;main(全局设置)&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;该部分设置的指令将影响其它所有部分的设置；&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;server(主机设置)&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;该部分的指令主要用于指定虚拟主机域名、IP和端口；&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;upstream(上游服务器设置)&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;该部分的指令用于设置一系列的后端服务器，设置反向代理及后端服务器的负载均衡；&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;location(URL匹配特定位置后的设置)&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;该部分用于匹配网页位置（比如，根目录“/”,“/images”,等等）。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Nginx本身是模块化设计。全局的配置区段负责全局的各个方面，对于不同的协议可以单独划分成一个部分。我们可以通过在这些单独的协议配置中（http或mail）指定server来定义每一个请求应该被如何处理，以便请求被路由到特定的IP地址或端口上。在http区段中，使用location来匹配URI请求，这些location又可以嵌套使用或者按照一定顺序使用，以确保请求被路由到正确的文件系统区域或者其他地方。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;他们之间的关系式：&lt;/strong&gt; server继承main，location继承server；upstream既不会继承指令也不会被继承。它有自己的特殊指令，不需要在其他地方的应用。&lt;/p&gt;
    
    </summary>
    
      <category term="Nginx" scheme="https://weizhimiao.github.io/categories/Nginx/"/>
    
    
  </entry>
  
  <entry>
    <title>Memcached分布式部署算法整理</title>
    <link href="https://weizhimiao.github.io/2016/10/01/Memcached%E5%88%86%E5%B8%83%E5%BC%8F%E9%83%A8%E7%BD%B2%E7%AE%97%E6%B3%95%E6%95%B4%E7%90%86/"/>
    <id>https://weizhimiao.github.io/2016/10/01/Memcached分布式部署算法整理/</id>
    <published>2016-10-01T12:00:00.000Z</published>
    <updated>2016-10-01T10:05:08.000Z</updated>
    
    <content type="html"><![CDATA[<p>虽然memcached是一个高性能的缓存服务器，但是单台服务器对于目前大型的web应用来说还是满足不了需求的。那么就需要布置多台的memcached服务器进行分布式部署。那么一个数据应该存储到哪一台服务器就需要一个分布算法来确定。</p>
<p>常见的分布方案有两种，</p>
<blockquote>
<ul>
<li>普通Hash分布</li>
<li>一致性Hash分布</li>
</ul>
</blockquote>
<a id="more"></a>
<h2 id="普通Hash分布"><a href="#普通Hash分布" class="headerlink" title="普通Hash分布"></a>普通Hash分布</h2><blockquote>
<p>俗称哈希取模法，优点是实现简单，但缺点是缺乏灵活性（比如增加一台服务器，那么之前存储的数据的键值和具体的物理机之间的关系就被完全打乱了，即之前存储的数据就完全失效了）。</p>
</blockquote>
<h3 id="原理："><a href="#原理：" class="headerlink" title="原理："></a>原理：</h3><p>H(key) = hash(key)mod K;</p>
<blockquote>
<p>假设有K台物理机，对于key为键值的记录，H(key)值即为存储数据的物理机编号。通过这种方式，就将全部数据分配到K台物理机上，而查找某条记录时，使用同样的Hash函数就可以找到对应的物理机。</p>
</blockquote>
<h3 id="实现-PHP-："><a href="#实现-PHP-：" class="headerlink" title="实现(PHP)："></a>实现(PHP)：</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line">  $servers = <span class="keyword">array</span>(</div><div class="line">    <span class="keyword">array</span>(<span class="string">"host"</span> =&gt; <span class="string">"192.168.1.1"</span>,<span class="string">"port"</span> =&gt; <span class="string">"11211"</span>),</div><div class="line">    <span class="keyword">array</span>(<span class="string">"host"</span> =&gt; <span class="string">"192.168.1.2"</span>,<span class="string">"port"</span> =&gt; <span class="string">"11211"</span>),</div><div class="line">  );</div><div class="line">  $key = <span class="string">"userDatakey"</span>;</div><div class="line">  $value = <span class="string">"userDataValue"</span>;</div><div class="line">  $mc_ser = <span class="keyword">new</span> $servers[mhash($key)%<span class="number">2</span>];</div><div class="line">  $mc = <span class="keyword">new</span> Memcache($servers);</div><div class="line">  $mc-&gt;set($key, $value);</div><div class="line">  var_dump($mc-&gt;get($key));</div><div class="line"></div><div class="line">  <span class="comment">/**</span></div><div class="line">   * [mhash 首先通过md5把key处理成一个32位的字符串，取其前8个字符。在经过hash算法处理成一个整数并返回。]</div><div class="line">   * <span class="doctag">@param</span>  &#123;[type]&#125; $key [description]</div><div class="line">   * <span class="doctag">@return</span> &#123;[type]&#125;      [description]</div><div class="line">   */</div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">mhash</span><span class="params">($key)</span></span>&#123;</div><div class="line">    $md5 = substr(md5($key), <span class="number">0</span>, <span class="number">8</span>);</div><div class="line">    $seed = <span class="number">31</span>;</div><div class="line">    $hash = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span>($i=<span class="number">0</span>;$i&lt;<span class="number">8</span>;$i++)&#123;</div><div class="line">      $hash = $hash*$seed + ord($md5&#123;$i&#125;);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> $hash &amp; <span class="number">0x7FFFFFFF</span>;</div><div class="line">  &#125;</div></pre></td></tr></table></figure>
<p>通过Hash函数把key转化成整数后，利用这个整数与服务器数量取模，得到其中一台的服务器配置。然后利用这个配置完成memcached服务器的连接操作。这样就完成了对数据的分布式存储。</p>
<h2 id="一致性Hash分布"><a href="#一致性Hash分布" class="headerlink" title="一致性Hash分布"></a>一致性Hash分布</h2><blockquote>
<p>一致性hash分布是算法，是P2P网络和分布式存储中常用到一项技术。是一种当服务器有增删时，对数据影响最小的一种部署方案。</p>
</blockquote>
<p>一致性Hash算法实现：</p>
<h3 id="将一个32位整数（0-2-32-1）想象成一个闭环。"><a href="#将一个32位整数（0-2-32-1）想象成一个闭环。" class="headerlink" title="将一个32位整数（0~2^32-1）想象成一个闭环。"></a>将一个32位整数（0~2^32-1）想象成一个闭环。</h3><p>如图，<br><img src="http://n.sinaimg.cn/games/3ece443e/20161001/hash_1.png" alt="将32位整数想象成一个闭环"></p>
<h3 id="通过Hash函数将key处理成整数"><a href="#通过Hash函数将key处理成整数" class="headerlink" title="通过Hash函数将key处理成整数"></a>通过Hash函数将key处理成整数</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$key1 = mhash(&quot;key1&quot;);</div><div class="line">$key2 = mhash(&quot;key2&quot;);</div><div class="line">$key3 = mhash(&quot;key3&quot;);</div><div class="line">$key4 = mhash(&quot;key4&quot;);</div></pre></td></tr></table></figure>
<p>将key通过mhash函数处理成整数，让后就可以将之对应到闭环上。如图，<br><img src="http://n.sinaimg.cn/games/3ece443e/20161001/hash_2.png" alt="4个key通过mhash处理成整数对应到闭环上"></p>
<h3 id="将memcached服务器，通过hash服务器所使用的IP地址，也对应到闭环上。"><a href="#将memcached服务器，通过hash服务器所使用的IP地址，也对应到闭环上。" class="headerlink" title="将memcached服务器，通过hash服务器所使用的IP地址，也对应到闭环上。"></a>将memcached服务器，通过hash服务器所使用的IP地址，也对应到闭环上。</h3><p>例如，有三台服务器，IP分别是192.168.1.1、192.168.1.2、192.168.1.3<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$server1 = mhash(&quot;192.168.1.1&quot;);</div><div class="line">$server2 = mhash(&quot;192.168.1.2&quot;);</div><div class="line">$server3 = mhash(&quot;192.168.1.3&quot;);</div></pre></td></tr></table></figure></p>
<p>如图，<br><img src="http://n.sinaimg.cn/games/3ece443e/20161001/hash_server.png" alt="将服务器也映射到环上"></p>
<h3 id="把数据映射到服务器上"><a href="#把数据映射到服务器上" class="headerlink" title="把数据映射到服务器上"></a>把数据映射到服务器上</h3><p><strong>映射方法：</strong><br>沿着圆环的顺时针方向的key出发，直到遇上一个服务器，将key对应的数据存储到这个服务器上。</p>
<p>如图，<br><img src="http://n.sinaimg.cn/games/3ece443e/20161001/hash_3.png" alt="把数据映射到服务器上"></p>
<h3 id="移除服务器"><a href="#移除服务器" class="headerlink" title="移除服务器"></a>移除服务器</h3><p>假设服务器 server2 崩溃了，那么受影响的仅是哪些hash映射值在server1到server2的值。</p>
<p>如图，受影响的只有key2，它将会重新映射到server3服务器上。<br><img src="http://n.sinaimg.cn/games/3ece443e/20161001/hash_4.png" alt="移除服务器"></p>
<h3 id="添加服务器"><a href="#添加服务器" class="headerlink" title="添加服务器"></a>添加服务器</h3><p>如果现在需要新添加一台服务器，其IP地址为（192.168.1.4）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$server4 = mhash(&quot;192.168.1.4&quot;);</div></pre></td></tr></table></figure></p>
<p>其在闭环上的映射位置位于如图的位置，那么受影响是hash映射值在其当前的位置和server2的位置之间的key。</p>
<p>如图，受影响的仅为key3，其将会重新映射到server4上。<br><img src="http://n.sinaimg.cn/games/3ece443e/20161001/hash_5.png" alt="添加服务器"></p>
<h3 id="实现（PHP）"><a href="#实现（PHP）" class="headerlink" title="实现（PHP）"></a>实现（PHP）</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">FlexiHash</span></span>&#123;</div><div class="line">  <span class="keyword">private</span> $serverList = <span class="keyword">array</span>();</div><div class="line">  <span class="keyword">private</span> $isSorted = <span class="keyword">false</span>;</div><div class="line"></div><div class="line">  <span class="comment">/**</span></div><div class="line">   * [addServer 通过hash函数计算除服务器的Hash值，通过此hash值定位服务器列表的某个位置，然后将服务器排序标识置为false]</div><div class="line">   * <span class="doctag">@param</span> &#123;[type]&#125; $server [description]</div><div class="line">   */</div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">addServer</span><span class="params">($server)</span></span>&#123;</div><div class="line">    $hash = <span class="keyword">$this</span>-&gt;mhash($server);</div><div class="line"></div><div class="line">    <span class="keyword">if</span>(!<span class="keyword">isset</span>(<span class="keyword">$this</span>-&gt;serverList[$hash]))&#123;</div><div class="line">      <span class="keyword">$this</span>-&gt;serverList[$hash] = $server;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">$this</span>-&gt;isSorted = <span class="keyword">false</span>;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="comment">/**</span></div><div class="line">   * [removeServer 跟addServer实现差不多，将server删除，并将排序标识置为false]</div><div class="line">   * <span class="doctag">@param</span>  &#123;[type]&#125; $server [description]</div><div class="line">   * <span class="doctag">@return</span> &#123;[type]&#125;         [description]</div><div class="line">   */</div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">removeServer</span><span class="params">($server)</span></span>&#123;</div><div class="line">    $hash = <span class="keyword">$this</span>-&gt;mhash($server);</div><div class="line"></div><div class="line">    <span class="keyword">if</span>(!<span class="keyword">isset</span>(<span class="keyword">$this</span>-&gt;serverList[$hash]))&#123;</div><div class="line">      <span class="keyword">unset</span>(<span class="keyword">$this</span>-&gt;serverList[$hash]);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">$this</span>-&gt;isSorted = <span class="keyword">false</span>;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="comment">/**</span></div><div class="line">   * [lookup 先计算除key的hash值，然后判断serverList是排序过，如果没有，就先对服务器列表进行倒序排序操作。倒序排序的作用是把服务器列表转换成一个逆时针的圆环。然后遍历服务器列表，找到一个合适的服务器返回]</div><div class="line">   * <span class="doctag">@param</span>  &#123;[type]&#125; $key [description]</div><div class="line">   * <span class="doctag">@return</span> &#123;[type]&#125;      [description]</div><div class="line">   */</div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">lookup</span><span class="params">($key)</span></span>&#123;</div><div class="line">    $hash = <span class="keyword">$this</span>-&gt;mhash($key);</div><div class="line"></div><div class="line">    <span class="keyword">if</span>(!<span class="keyword">$this</span>-&gt;isSorted)&#123;</div><div class="line">      ksort(<span class="keyword">$this</span>-&gt;serverList, SORT_NUMERIC);</div><div class="line">      <span class="keyword">$this</span>-&gt;isSorted = <span class="keyword">true</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">foreach</span>(<span class="keyword">$this</span>-&gt;serverList <span class="keyword">as</span> $pos =&gt; $server)&#123;</div><div class="line">      <span class="keyword">if</span>($hash &gt;= $pos)&#123;</div><div class="line">        <span class="keyword">return</span> $server;</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;serverList[count(<span class="keyword">$this</span>-&gt;serverList) - <span class="number">1</span>];</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="comment">/**</span></div><div class="line">   * [mhash 首先通过md5把key处理成一个32位的字符串，取其前8个字符。在经过hash算法处理成一个整数并返回。]</div><div class="line">   * <span class="doctag">@param</span>  &#123;[type]&#125; $key [description]</div><div class="line">   * <span class="doctag">@return</span> &#123;[type]&#125;      [description]</div><div class="line">   */</div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">mhash</span><span class="params">($key)</span></span>&#123;</div><div class="line">    $md5 = substr(md5($key), <span class="number">0</span>, <span class="number">8</span>);</div><div class="line">    $seed = <span class="number">31</span>;</div><div class="line">    $hash = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span>($i=<span class="number">0</span>;$i&lt;<span class="number">8</span>;$i++)&#123;</div><div class="line">      $hash = $hash*$seed + ord($md5&#123;$i&#125;);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> $hash &amp; <span class="number">0x7FFFFFFF</span>;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>测试<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line">  $hserver = <span class="keyword">new</span> FlexiHash();</div><div class="line"></div><div class="line">  $hserver-&gt;addServer(<span class="string">"192.168.1.1"</span>);</div><div class="line">  $hserver-&gt;addServer(<span class="string">"192.168.1.2"</span>);</div><div class="line">  $hserver-&gt;addServer(<span class="string">"192.168.1.3"</span>);</div><div class="line">  $hserver-&gt;addServer(<span class="string">"192.168.1.4"</span>);</div><div class="line">  $hserver-&gt;addServer(<span class="string">"192.168.1.5"</span>);</div><div class="line"></div><div class="line">  <span class="keyword">echo</span> <span class="string">"save key1 in server:"</span>.$hserver-&gt;lookup(<span class="string">"key1"</span>);</div><div class="line">  <span class="keyword">echo</span> <span class="string">"save key2 in server:"</span>.$hserver-&gt;lookup(<span class="string">"key2"</span>);</div><div class="line">  <span class="keyword">echo</span> <span class="string">"==============================================;</span></div><div class="line"></div><div class="line">  $hserver-&gt;removeServer("<span class="number">192.168</span><span class="number">.1</span><span class="number">.4</span><span class="string">");</span></div><div class="line">  echo "save key1 in server:<span class="string">".$hserver-&gt;lookup("</span>key1<span class="string">");</span></div><div class="line">  echo "save key2 in server:<span class="string">".$hserver-&gt;lookup("</span>key2<span class="string">");</span></div><div class="line">  echo "==============================================;</div><div class="line"></div><div class="line">  $hserver-&gt;addServer(<span class="string">"192.168.1.6"</span>);</div><div class="line">  <span class="keyword">echo</span> <span class="string">"save key1 in server:"</span>.$hserver-&gt;lookup(<span class="string">"key1"</span>);</div><div class="line">  <span class="keyword">echo</span> <span class="string">"save key2 in server:"</span>.$hserver-&gt;lookup(<span class="string">"key2"</span>);</div><div class="line">  <span class="keyword">echo</span> <span class="string">"==============================================;  </span></div><div class="line">?&gt;</div></pre></td></tr></table></figure></p>
<p>通过测试结果可以看出，在增加或者减少memcached服务器的时候，一致性hash算法只会改变很少的一部分数据的存储服务器，从而能够实现最大限度的减少数据丢失的情况。</p>
<h2 id="实际应用（PHP）"><a href="#实际应用（PHP）" class="headerlink" title="实际应用（PHP）"></a>实际应用（PHP）</h2><p>在实际应用当中，PHP提供了两种的关于Memcached的扩展，memcache和memcached。两种扩展中都可以设置采用哪种分布方式，我们只需要选择我们要采用的策略并修改配置即可，而不需要我们自己来实现具体的分布算法。</p>
<p><strong>memcache扩展配置</strong></p>
<p>控制key到服务器的映射（分布式）策略。 php.ini 配置<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">[Memcache]</div><div class="line">Memcache.allow_failover = 1</div><div class="line">memcache.max_failover_attempts = 2</div><div class="line">Memcache.hash_strategy =consistent</div><div class="line">Memcache.hash_function =crc32</div></pre></td></tr></table></figure></p>
<p>Memcache.allow_failover</p>
<blockquote>
<p>是否在发生错误时（对用户）透明的转移到其他服务器。</p>
</blockquote>
<p>memcache.max_failover_attempts</p>
<blockquote>
<p>定义在写入和获取数据时最多尝试的服务器次数（即：故障转移最大尝试数），仅和 memcache.allow_failover结合使用。</p>
</blockquote>
<p>Memcache.hash_strategy</p>
<blockquote>
<p>控制key到服务器的映射（分布式）策略。</p>
</blockquote>
<ul>
<li>consistent，采用一致性hash分布策略实现映射</li>
<li>standard，采用普通hash分布策略实现映射</li>
</ul>
<p>memcache.hash_function</p>
<blockquote>
<p>控制在key-server映射时使用哪个hash函数crc32 标明使用标准CRC32进行hash，fnv则说明使用FNV-1a。</p>
</blockquote>
<p><strong>memcached扩展配置</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;?php</div><div class="line">  $mem = new memcached();</div><div class="line">  $mem-&gt;setOption(Memcached::OPT_DISTRIBUTION,Memcached::DISTRIBUTION_CONSISTENT);</div><div class="line">  $mem-&gt;setOption(Memcached::OPT_LIBKETAMA_COMPATIBLE,true);</div></pre></td></tr></table></figure></p>
<p>Memcached::OPT_DISTRIBUTION</p>
<blockquote>
<p>指定元素key分布到各个服务器的方法。当前支持的方法有余数分步法合一致性hash算法两种。一致性hash算法提供 了更好的分配策略并且在添加服务器到集群时可以最小化缓存丢失。<br>类型: integer, 默认: Memcached::DISTRIBUTION_MODULA.</p>
</blockquote>
<p>Memcached::DISTRIBUTION_MODULA</p>
<blockquote>
<p>余数分布算法。</p>
</blockquote>
<p>Memcached::DISTRIBUTION_CONSISTENT</p>
<blockquote>
<p>一致性分布算法(基于libketama).</p>
</blockquote>
<p>Memcached::OPT_LIBKETAMA_COMPATIBLE</p>
<blockquote>
<p>开启或关闭兼容的libketama类行为。当开启此选项后，元素key的hash算法将会被设置为md5并且分布算法将会 采用带有权重的一致性hash分布。这一点非常有用因为其他基于libketama的客户端（比如python，urby）在同样 的服务端配置下可以透明的访问key。</p>
<p><strong>Note:</strong><br>如果你要使用一致性hash算法强烈建议开启此选项，并且这个选项可能在未来的发布版中被设置为默认开启。<br>类型: boolean, 默认: FALSE.</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;虽然memcached是一个高性能的缓存服务器，但是单台服务器对于目前大型的web应用来说还是满足不了需求的。那么就需要布置多台的memcached服务器进行分布式部署。那么一个数据应该存储到哪一台服务器就需要一个分布算法来确定。&lt;/p&gt;
&lt;p&gt;常见的分布方案有两种，&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;普通Hash分布&lt;/li&gt;
&lt;li&gt;一致性Hash分布&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Linux" scheme="https://weizhimiao.github.io/categories/Linux/"/>
    
    
      <category term="分布式部署算法" scheme="https://weizhimiao.github.io/tags/%E5%88%86%E5%B8%83%E5%BC%8F%E9%83%A8%E7%BD%B2%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>PHP异常和错误处理</title>
    <link href="https://weizhimiao.github.io/2016/09/30/PHP%E5%BC%82%E5%B8%B8%E5%92%8C%E9%94%99%E8%AF%AF%E5%A4%84%E7%90%86/"/>
    <id>https://weizhimiao.github.io/2016/09/30/PHP异常和错误处理/</id>
    <published>2016-09-30T15:10:00.000Z</published>
    <updated>2016-09-30T15:11:50.000Z</updated>
    
    <content type="html"><![CDATA[<p>首先，需要明确以下这两个概念</p>
<ul>
<li><p>异常(exception)</p>
<blockquote>
<p>PHP中的异常，是程序运行中不符合预期的情况及与正常流程不同的状况。<br>是属于逻辑和业务流程的一种中断，而不是语法错误。</p>
</blockquote>
</li>
<li><p>错误(error)</p>
<blockquote>
<p>PHP中的错误则属于自身的问题，是一种非法的语法或者环境问题导致的、让编译器无法通过检查甚至无法运行的情况。</p>
</blockquote>
</li>
</ul>
<a id="more"></a>
<h2 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h2><p>PHP中玉带任何自身问题都会触发一个错误，而不是抛出异常。所以，如果想使用异常处理来处理不可预知的问题，这是PHP办不到的。但在处理一些可以预知的错误，PHP的异常处理机制还是能够帮我们解决一些问题的。例如：</p>
<ul>
<li>代码冗余复杂，到处充斥着if…else</li>
<li>代码可读性差</li>
</ul>
<p>而异常处理，其主要作用是将『正常执行过程的代码』和『处理问题怎么处理的代码』进行分离。</p>
<h3 id="PHP常见的异常类"><a href="#PHP常见的异常类" class="headerlink" title="PHP常见的异常类"></a>PHP常见的异常类</h3><h4 id="Exception"><a href="#Exception" class="headerlink" title="Exception"></a>Exception</h4><blockquote>
<p>所有异常的基类。</p>
</blockquote>
<p>类摘要<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line">  <span class="keyword">Exception</span> &#123;</div><div class="line">    <span class="comment">/* 属性 */</span></div><div class="line">    <span class="keyword">protected</span> string $message ;     <span class="comment">//异常消息内容</span></div><div class="line">    <span class="keyword">protected</span> int $code ;           <span class="comment">//异常代码</span></div><div class="line">    <span class="keyword">protected</span> string $file ;        <span class="comment">//抛出异常的文件名</span></div><div class="line">    <span class="keyword">protected</span> int $line ;           <span class="comment">//抛出异常在该文件中的行号</span></div><div class="line">    <span class="comment">/* 方法 */</span></div><div class="line">    <span class="keyword">public</span> __construct ([ string $message = <span class="string">""</span> [, int $code = <span class="number">0</span> [, <span class="keyword">Exception</span> $previous = <span class="keyword">NULL</span> ]]] )           <span class="comment">//异常构造函数</span></div><div class="line">    <span class="keyword">final</span> <span class="keyword">public</span> string getMessage ( void )    <span class="comment">//获取异常消息内容</span></div><div class="line">    <span class="keyword">final</span> <span class="keyword">public</span> <span class="keyword">Exception</span> getPrevious ( void )<span class="comment">//返回异常链中的前一个异常</span></div><div class="line">    <span class="keyword">final</span> <span class="keyword">public</span> int getCode ( void )          <span class="comment">//获取异常代码</span></div><div class="line">    <span class="keyword">final</span> <span class="keyword">public</span> string getFile ( void )       <span class="comment">//获取发生异常的程序文件名称</span></div><div class="line">    <span class="keyword">final</span> <span class="keyword">public</span> int getLine ( void )          <span class="comment">//获取发生异常的代码在文件中的行号</span></div><div class="line">    <span class="keyword">final</span> <span class="keyword">public</span> <span class="keyword">array</span> getTrace ( void )       <span class="comment">//获取异常追踪信息</span></div><div class="line">    <span class="keyword">final</span> <span class="keyword">public</span> string getTraceAsString ( void )<span class="comment">//获取字符串类型的异常追踪信息</span></div><div class="line">    <span class="keyword">public</span> string __toString ( void )            <span class="comment">//将异常对象转换为字符串</span></div><div class="line">    <span class="keyword">final</span> <span class="keyword">private</span> void __clone ( void )          <span class="comment">//异常克隆</span></div><div class="line">  &#125;</div></pre></td></tr></table></figure></p>
<h4 id="错误异常类"><a href="#错误异常类" class="headerlink" title="错误异常类"></a>错误异常类</h4><p>类摘要<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line">  ErrorException extends <span class="keyword">Exception</span> &#123;</div><div class="line">      <span class="comment">/* 属性 */</span></div><div class="line">      <span class="keyword">protected</span> int $severity ;     <span class="comment">//异常级别</span></div><div class="line">      <span class="comment">/* 方法 */</span></div><div class="line">      <span class="keyword">public</span> __construct ([ string $message = <span class="string">""</span> [, int $code = <span class="number">0</span> [, int $severity = <span class="number">1</span> [, string $filename = <span class="keyword">__FILE__</span> [, int $lineno = <span class="keyword">__LINE__</span> [, <span class="keyword">Exception</span> $previous = <span class="keyword">NULL</span> ]]]]]] )   <span class="comment">//异常构造函数</span></div><div class="line">      <span class="keyword">final</span> <span class="keyword">public</span> int getSeverity ( void )             <span class="comment">// 获取异常的严重程度</span></div><div class="line">      <span class="comment">/* 继承的方法 */</span></div><div class="line">      <span class="keyword">final</span> <span class="keyword">public</span> string <span class="keyword">Exception</span>::getMessage ( void )</div><div class="line">      <span class="keyword">final</span> <span class="keyword">public</span> <span class="keyword">Exception</span> <span class="keyword">Exception</span>::getPrevious ( void )</div><div class="line">      <span class="keyword">final</span> <span class="keyword">public</span> int <span class="keyword">Exception</span>::getCode ( void )</div><div class="line">      <span class="keyword">final</span> <span class="keyword">public</span> string <span class="keyword">Exception</span>::getFile ( void )</div><div class="line">      <span class="keyword">final</span> <span class="keyword">public</span> int <span class="keyword">Exception</span>::getLine ( void )</div><div class="line">      <span class="keyword">final</span> <span class="keyword">public</span> <span class="keyword">array</span> <span class="keyword">Exception</span>::getTrace ( void )</div><div class="line">      <span class="keyword">final</span> <span class="keyword">public</span> string <span class="keyword">Exception</span>::getTraceAsString ( void )</div><div class="line">      <span class="keyword">public</span> string <span class="keyword">Exception</span>::__toString ( void )</div><div class="line">      <span class="keyword">final</span> <span class="keyword">private</span> void <span class="keyword">Exception</span>::__clone ( void )</div><div class="line">  &#125;</div></pre></td></tr></table></figure></p>
<p>常见使用方式（使用set_error_handle()函数讲错误信息托管至ErrorException）<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">exception_error_handler</span><span class="params">($errno, $errstr, $errfile, $errline )</span> </span>&#123;</div><div class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> ErrorException($errstr, <span class="number">0</span>, $errno, $errfile, $errline);</div><div class="line">&#125;</div><div class="line">set_error_handler(<span class="string">"exception_error_handler"</span>);</div><div class="line"><span class="comment">/* Trigger exception 抛出异常 */</span></div><div class="line">strpos();</div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure></p>
<h4 id="自定义异常类"><a href="#自定义异常类" class="headerlink" title="自定义异常类"></a>自定义异常类</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 自定义一个异常处理类</div><div class="line"> */</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyException</span> <span class="keyword">extends</span> <span class="title">Exception</span></span></div><div class="line">&#123;</div><div class="line">    <span class="comment">// 重定义构造器使 message 变为必须被指定的属性</span></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($message, $code = <span class="number">0</span>, Exception $previous = null)</span> </span>&#123;</div><div class="line">        <span class="comment">// 自定义的代码</span></div><div class="line"></div><div class="line">        <span class="comment">// 确保所有变量都被正确赋值</span></div><div class="line">        <span class="keyword">parent</span>::__construct($message, $code, $previous);</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// 自定义字符串输出的样式</span></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">__CLASS__</span> . <span class="string">": [&#123;$this-&gt;code&#125;]: &#123;$this-&gt;message&#125;\n"</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">customFunction</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">echo</span> <span class="string">"A custom function for this type of exception\n"</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="PHP中异常用法"><a href="#PHP中异常用法" class="headerlink" title="PHP中异常用法"></a>PHP中异常用法</h3><p>&gt;</p>
<p>首先我们需要知道，<strong><em>在PHP中只有手动抛出异常后才能捕获异常，对于抛出的异常只有进行捕获并作出相应的操作抛出异常才有意义，否则没有任何意义。</em></strong></p>
<p>抛出异常<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">check</span><span class="params">($n)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span>(<span class="keyword">empty</span>($n))&#123;</div><div class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="keyword">Exception</span>(<span class="string">"参数错误"</span>);</div><div class="line">    &#125;</div><div class="line">  &#125;</div></pre></td></tr></table></figure></p>
<h4 id="try…catch"><a href="#try…catch" class="headerlink" title="try…catch"></a>try…catch</h4><p>示例：关于上传操作的异常处理</p>
<p>方式一：异常发生时立即捕获<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line">  <span class="keyword">try</span>&#123;</div><div class="line">    <span class="comment">//可能出现错误的代码</span></div><div class="line">    <span class="keyword">if</span>(文件上传不成功)</div><div class="line">      <span class="keyword">throw</span> (上传异常)；</div><div class="line">    <span class="keyword">if</span>(更新数据库不成功)</div><div class="line">      <span class="keyword">throw</span> (数据库异常操作)；</div><div class="line">  &#125; <span class="keyword">catch</span>(异常)&#123;</div><div class="line">    <span class="comment">//必须的补救措施，例如删除文件、删除数据库记录</span></div><div class="line">    ...</div><div class="line">  &#125;</div></pre></td></tr></table></figure></p>
<p>方式二：分散抛出，集中捕获<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line">  上传&#123;</div><div class="line">    <span class="keyword">if</span>(文件上传不成功) <span class="keyword">throw</span> (上传异常)；</div><div class="line">    <span class="keyword">if</span>(更新数据库不成功)  <span class="keyword">throw</span> (数据库异常)；</div><div class="line">  &#125;</div><div class="line">  其他&#123;</div><div class="line">    <span class="keyword">if</span>(其他操作失败) <span class="keyword">throw</span> （其他操作异常）；</div><div class="line">  &#125;</div><div class="line">  <span class="comment">//其他代码...</span></div><div class="line">  <span class="keyword">try</span>&#123;</div><div class="line">      上传；</div><div class="line">      其他；</div><div class="line">  &#125; <span class="keyword">catch</span>(上传异常)&#123;</div><div class="line">      <span class="comment">//上传异常处理、例如删除文件</span></div><div class="line">  &#125; <span class="keyword">catch</span>(数据库异常)&#123;</div><div class="line">      <span class="comment">//数据库异常处理、比如删除数据库记录等</span></div><div class="line">  &#125; <span class="keyword">catch</span>(其他异常)&#123;</div><div class="line">      <span class="comment">//其他异常处理，比如记录异常日志等</span></div><div class="line">  &#125;</div></pre></td></tr></table></figure></p>
<p><strong>需要注意，exception作为超类应该放在最后捕获</strong></p>
<h4 id="try…catch…finally"><a href="#try…catch…finally" class="headerlink" title="try…catch…finally"></a>try…catch…finally</h4><p>示例：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">inverse</span><span class="params">($x)</span> </span>&#123;</div><div class="line">      <span class="keyword">if</span> (!$x) &#123;</div><div class="line">          <span class="keyword">throw</span> <span class="keyword">new</span> <span class="keyword">Exception</span>(<span class="string">'Division by zero.'</span>);</div><div class="line">      &#125;</div><div class="line">      <span class="keyword">return</span> <span class="number">1</span>/$x;</div><div class="line">  &#125;</div><div class="line">  <span class="comment">//</span></div><div class="line">  <span class="keyword">try</span> &#123;</div><div class="line">      <span class="keyword">echo</span> inverse(<span class="number">5</span>) . <span class="string">"\n"</span>;</div><div class="line">  &#125; <span class="keyword">catch</span> (<span class="keyword">Exception</span> $e) &#123;</div><div class="line">      <span class="keyword">echo</span> <span class="string">'Caught exception: '</span>,  $e-&gt;getMessage(), <span class="string">"\n"</span>;</div><div class="line">  &#125; <span class="keyword">finally</span> &#123;</div><div class="line">      <span class="keyword">echo</span> <span class="string">"First finally.\n"</span>;</div><div class="line">  &#125;</div><div class="line">  <span class="comment">//</span></div><div class="line">  <span class="keyword">try</span> &#123;</div><div class="line">      <span class="keyword">echo</span> inverse(<span class="number">0</span>) . <span class="string">"\n"</span>;</div><div class="line">  &#125; <span class="keyword">catch</span> (<span class="keyword">Exception</span> $e) &#123;</div><div class="line">      <span class="keyword">echo</span> <span class="string">'Caught exception: '</span>,  $e-&gt;getMessage(), <span class="string">"\n"</span>;</div><div class="line">  &#125; <span class="keyword">finally</span> &#123;</div><div class="line">      <span class="keyword">echo</span> <span class="string">"Second finally.\n"</span>;</div><div class="line">  &#125;</div><div class="line">  <span class="comment">//</span></div><div class="line">  <span class="comment">// Continue execution</span></div><div class="line">  <span class="keyword">echo</span> <span class="string">"Hello World\n"</span>;</div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure></p>
<h3 id="PHP异常处理使用场景"><a href="#PHP异常处理使用场景" class="headerlink" title="PHP异常处理使用场景"></a>PHP异常处理使用场景</h3><h4 id="对程序的悲观预测"><a href="#对程序的悲观预测" class="headerlink" title="对程序的悲观预测"></a>对程序的悲观预测</h4><p>即当一个操作可能会由于一些不可控的因素（比如网络问题等），可能会出现执行不成功的情况。那么在种情况下就可以抛出异常，然后进行捕获，对异常情况进行细致的处理。</p>
<h4 id="程序的需要和对业务的需要"><a href="#程序的需要和对业务的需要" class="headerlink" title="程序的需要和对业务的需要"></a>程序的需要和对业务的需要</h4><p>需要强调的是，异常是业务处理中必不可少的环节，我们不能对异常视而不见。<br>需要用到异常处理的情况</p>
<ul>
<li>不希望业务代码中充斥着大量的打印、调试等处理；</li>
<li>业务中自定义的异常，对现实生活中各种业务进行补充；</li>
<li>对数据一致性有要求的业务操作中；</li>
</ul>
<p>异常处理机制可以把每一件事当做事务来考虑，还可以把异常处理当做成一种内建的恢复系统。</p>
<h4 id="语言级别的健壮性要求"><a href="#语言级别的健壮性要求" class="headerlink" title="语言级别的健壮性要求"></a>语言级别的健壮性要求</h4><p>我们都知道PHP在健壮性这一点是不足的。对很多异常是没有强制性限制的。所以很多异常需要我们自己来做。</p>
<p>通过try…catch处理，我们可以把异常造成的逻辑中断破坏降低到最小的范围，并且经过补救处理后不影响业务逻辑的完整性；乱抛异常和只抛不捕获，或者捕获而不补救，都会导致数据混乱。</p>
<h2 id="错误处理"><a href="#错误处理" class="headerlink" title="错误处理"></a>错误处理</h2><h3 id="PHP中的错误级别"><a href="#PHP中的错误级别" class="headerlink" title="PHP中的错误级别"></a>PHP中的错误级别</h3><p>PHP的错误有很多类，包括warning、notice、deprecated、fatal error等。</p>
<p>常用到的错误级别</p>
<ul>
<li>deprecated，是最低级别的错误，表示不推荐、不建议。其虽不影响PHP正常的业务流程，但一般情况下建议修正；</li>
<li>notice，通知级别错误。表示你语法中存在不恰当的地方。常见的是 使用未定义的变量就会报此错误。这种错误也影响PHP正常流程；</li>
<li>warning，警告级别错误，是比较高级别的错误，表示在语法中出现很不恰当的地方，比如函数参数不匹配。这种级别的错误可能会导致出现不可预期的结果，所以建议修正；</li>
<li>fetal error，致命错误。直接导致PHP流程终结，后面代码不在执行。</li>
<li>prase error，语法解析错误。导致PHP代码无法通过语法检查。</li>
</ul>
<p>错误信息显示控制<br>方式一：<br>php.ini<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">error_reporting = E_ALL | E_STRICT  #指定显示错误级别</div><div class="line">display_errors = On                 #错误信息显示控制</div></pre></td></tr></table></figure></p>
<p>方式二：PHP代码中</p>
<ol>
<li>error_reporting(0),表示屏蔽所有错误信息。正式部署时采用这样的策略，来防止错误信息泄露敏感信息。</li>
<li>@mysql_connect(),抑制错误信息输出。</li>
</ol>
<h3 id="PHP错误处理机制"><a href="#PHP错误处理机制" class="headerlink" title="PHP错误处理机制"></a>PHP错误处理机制</h3><h4 id="trigger-error"><a href="#trigger-error" class="headerlink" title="trigger_error"></a>trigger_error</h4><p>该方法用于主动抛出一个错误。示例<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line">  <span class="keyword">if</span>(mt_rand(<span class="number">0</span>,<span class="number">1</span>) == <span class="number">1</span>)&#123;</div><div class="line">    triggererror(<span class="string">"random no eq 0"</span>,E_USER_ERROR);</div><div class="line">  &#125;</div></pre></td></tr></table></figure></p>
<h4 id="set-error-handler"><a href="#set-error-handler" class="headerlink" title="set_error_handler"></a>set_error_handler</h4><p>PHP中提供了set_error_handler（）函数可以用来接管PHP错误处理。</p>
<p><strong>set_error_handler(error_function, error_type);</strong></p>
<ul>
<li>error_function,规定发生错误时运行的函数。（必须）</li>
<li>error_types,规定在哪个错误级别报告级别会显示用户定义的错误，（可选，默认『E_ALL』）</li>
</ul>
<p>示例：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">customError</span><span class="params">($errNo, $errStr, $errFile, $errLine)</span></span>&#123;</div><div class="line">    <span class="keyword">echo</span> <span class="string">"&lt;b&gt;错误代码：&lt;/b&gt;[$errNo]&#123;$errStr&#125;\r\n"</span>;</div><div class="line">    <span class="keyword">echo</span> <span class="string">"错误所在的代码行：&#123;$errLine&#125;,文件:&#123;$errFile&#125;\r\n"</span>;</div><div class="line">    <span class="keyword">echo</span> <span class="string">"PHP 版本 ，"</span>.PHP_VERSION.<span class="string">"("</span>.PHP_OS.<span class="string">")\r\n"</span>;</div><div class="line">    <span class="keyword">die</span>();  <span class="comment">//如果有必要，用户自定义的错误处理程序必须终止（die（）；）当前脚本。</span></div><div class="line">  &#125;</div><div class="line"></div><div class="line">  set_error_handler(<span class="string">"custonError"</span>, E_ALL | E_STRICT);</div><div class="line">  $a = <span class="keyword">array</span>(<span class="string">'o'</span> =&gt; <span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">8</span>);</div><div class="line">  <span class="keyword">echo</span> $a[o]</div></pre></td></tr></table></figure></p>
<p>自定义的错误处理函数一定要有这四个输入变量$errno, $errstr, $errfile, $errline.</p>
<ul>
<li>errno,代表错误等级的一组常量。比如 E_WARNING 其二进制掩码为4，表示告警信息。</li>
</ul>
<p><strong>注意：</strong> 自定义的错误处理函数并不能托管所有种类的错误，比如E_ERROR, E_PARSE, E_CORE_ERROR, E_CORE_WARNING, E_COMPILE_ERROR, E_COMPILE_WARNING,以及E_STRICT中的部分。</p>
<p><strong>注意：</strong> 如果使用自定义的 set_error_handler 接管PHP的错误处理，先前代码里的错误抑制 @ 也将会失效，这是这种错误也会被显示。</p>
<h4 id="restore-error-handler"><a href="#restore-error-handler" class="headerlink" title="restore_error_handler"></a>restore_error_handler</h4><p>该函数可以取消 set_error_handler 的错误接管.</p>
<h2 id="结合PHP错误处理主动抛出异常"><a href="#结合PHP错误处理主动抛出异常" class="headerlink" title="结合PHP错误处理主动抛出异常"></a>结合PHP错误处理主动抛出异常</h2><p>结合PHP的错误处理机制和异常处理机制，通过组合也可以实现同时捕获异常和非致命错误。<br>示例<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">customError</span><span class="params">($errNo, $errStr, $errFile, $errLine)</span></span>&#123;</div><div class="line">    <span class="comment">//自定义错误处理时，可以手动抛出异常</span></div><div class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="keyword">Exception</span>($level.<span class="string">"|"</span>.$errStr);</div><div class="line">  &#125;</div><div class="line">  set_error_handler(<span class="string">"custonError"</span>, E_ALL | E_STRICT);</div><div class="line">  <span class="keyword">try</span>&#123;</div><div class="line">    $a = <span class="number">5</span>/<span class="number">0</span>;</div><div class="line">  &#125; <span class="keyword">catch</span>(<span class="keyword">Exception</span> $e)&#123;</div><div class="line">      <span class="keyword">echo</span> <span class="string">"错误信息"</span>.$e-&gt;getMessage();</div><div class="line">  &#125;</div></pre></td></tr></table></figure></p>
<p>通过上面示例可以捕获到异常和非致命错误，但对于 fetal error 这样的错误却捕获不到。但是通过其他的一些方法，我们还是可以做一些处理。 register_shutdown_function 该函数会在程序终止或die时触发一个函数，我们可以利用该触发函数做一些最后的收尾操作。</p>
<p>调用时机</p>
<ul>
<li>当页面被用户强制停止时</li>
<li>当程序代码运行超时时</li>
<li>当ＰＨＰ代码执行完成时，代码执行存在异常和错误、警告</li>
</ul>
<p>void register_shutdown_function ( callable $callback [, mixed $parameter [, mixed $… ]] )</p>
<p>示例<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">shutdown</span><span class="params">()</span></span></div><div class="line">  &#123;</div><div class="line">      <span class="comment">// This is our shutdown function, in</span></div><div class="line">      <span class="comment">// here we can do any last operations</span></div><div class="line">      <span class="comment">// before the script is complete.</span></div><div class="line">      <span class="keyword">echo</span> <span class="string">'Script executed with success'</span>, PHP_EOL;</div><div class="line">  &#125;</div><div class="line">  register_shutdown_function(<span class="string">'shutdown'</span>);</div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure></p>
<p>对于 prase error 级别的错误，PHP层面就没有办法做什么了。我们只能通过开启错误日志，来记录这些错误。</p>
<p>php.ini设置<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">log_errors = On</div><div class="line">error_log = /usr/log/log.log</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;首先，需要明确以下这两个概念&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;异常(exception)&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;PHP中的异常，是程序运行中不符合预期的情况及与正常流程不同的状况。&lt;br&gt;是属于逻辑和业务流程的一种中断，而不是语法错误。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;错误(error)&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;PHP中的错误则属于自身的问题，是一种非法的语法或者环境问题导致的、让编译器无法通过检查甚至无法运行的情况。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="PHP" scheme="https://weizhimiao.github.io/categories/PHP/"/>
    
    
      <category term="异常处理" scheme="https://weizhimiao.github.io/tags/%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/"/>
    
      <category term="错误处理" scheme="https://weizhimiao.github.io/tags/%E9%94%99%E8%AF%AF%E5%A4%84%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>memcache高速缓存工作原理及应用</title>
    <link href="https://weizhimiao.github.io/2016/09/29/memcache%E9%AB%98%E9%80%9F%E7%BC%93%E5%AD%98%E7%9A%84%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86%E5%8F%8A%E5%BA%94%E7%94%A8%E5%B0%8F%E7%BB%93/"/>
    <id>https://weizhimiao.github.io/2016/09/29/memcache高速缓存的工作原理及应用小结/</id>
    <published>2016-09-29T10:30:00.000Z</published>
    <updated>2016-09-30T02:32:21.000Z</updated>
    
    <content type="html"><![CDATA[<p>Memcached,是高性能的分布式内存缓存服务器，主要功能就是通过缓存数据库的查询，减少对数据库的访问次数，来提高动态web应用的速度和可扩展性。</p>
<p>memcached 是以守护程序方法运行于一个或多个服务器中，随时接受客户端的连接操作，客户端可以由各种语言编写，目前一致的客户端api包括 Perl / PHP / Python / Java / C# / C 等等。客户端在与 memcached 服务建立连接之后，接下来的事情就是存取对象了， 每个被存取的对象都有一个唯一的标识符 key，存取操作均通过这个 key进行，保存到 memcached 中的对象实际上是放置内存中的，并不是保存在平时的 cache 文件中的，这也是为什么 memcached 能够如此高效快速的原因。</p>
<p>注意，这些对象并不是持久的， 服务停止之后， 里边的数据就会丢失。</p>
<p><img src="http://n.sinaimg.cn/games/3ece443e/20160929/MemcacheYingYongMoXing.png?1" alt="Memcached应用模型"></p>
<a id="more"></a>
<h2 id="Memcached的安装"><a href="#Memcached的安装" class="headerlink" title="Memcached的安装"></a>Memcached的安装</h2><h3 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h3><p>libevent</p>
<blockquote>
<p>Libevent 是一个用C语言编写的、轻量级的开源高性能网络库。<br>主要有以下几个亮点：事件驱动（ event-driven），高性能;轻量级，专注于网络，不如 ACE 那么臃肿庞大；源代码相当精炼、易读；跨平台，支持 Windows、 Linux、 BSD 和 Mac Os；支持多种 I/O 多路复用技术， epoll、 poll、 dev/poll、 select 和 kqueue 等；支持 I/O，定时器和信号等事件；注册事件优先级。<br>Libevent 已经被广泛的应用，作为底层的网络库；比如 memcached、 Vomit、 Nylon、 Netchat等等。</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">wget http://n.sinaimg.cn/games/3ece443e/20160929/libevent-2.0.22-stable.tar</div><div class="line">tar -vxf libevent-2.0.22-stable.tar</div><div class="line">cd libevent-2.0.22-stable</div><div class="line">./configure --prefix=/usr/local/libevent</div><div class="line">make &amp;&amp; make install</div></pre></td></tr></table></figure>
<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">wget http://n.sinaimg.cn/games/3ece443e/20160930/memcached-1.4.31.tar.gz</div><div class="line">cd memcached-1.4.31</div><div class="line"> ./configure --prefix=/usr/local/memcached --with-libevent=/usr/local/libevent</div><div class="line">make &amp;&amp; make install</div></pre></td></tr></table></figure>
<p>查看是否已经安装成功<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">cd /usr/local/memcached/</div><div class="line">ll</div><div class="line">drwxr-xr-x 2 root root 4096 9月  28 10:56 bin</div><div class="line">drwxr-xr-x 3 root root 4096 9月  28 10:56 include</div><div class="line">drwxr-xr-x 3 root root 4096 9月  28 10:56 share</div></pre></td></tr></table></figure></p>
<h2 id="Memcached管理"><a href="#Memcached管理" class="headerlink" title="Memcached管理"></a>Memcached管理</h2><h3 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h3><p>启动Memcached服务器<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/usr/local/memcached/bin/memcached -d -m 128 -u root -p 11211</div></pre></td></tr></table></figure></p>
<p>查看是否启动成功<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">ps aux | grep memcache</div><div class="line">root     24428  0.0  0.0 323120   864 ?        Ssl  11:00   0:00 /usr/local/memcached/bin/memcached -d -m 128 -u root -p 11211</div><div class="line">root     24436  0.0  0.0 112664   984 pts/0    D+   11:00   0:00 grep --color=auto memcache</div></pre></td></tr></table></figure></p>
<p>或<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">netstat -tlun | grep 11211</div><div class="line">tcp        0      0 0.0.0.0:11211           0.0.0.0:*               LISTEN</div><div class="line">tcp6       0      0 :::11211                :::*                    LISTEN</div><div class="line">udp        0      0 0.0.0.0:11211           0.0.0.0:*</div><div class="line">udp6       0      0 :::11211                :::*</div></pre></td></tr></table></figure></p>
<p>设置开机自启动<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">echo &quot;/usr/local/memcached/bin/memcached -d -m 128 -u root -p 11211&quot; &gt;&gt; /etc/rc.d/rc.local</div></pre></td></tr></table></figure></p>
<p>Memcached启动选项及说明</p>
<table>
<thead>
<tr>
<th>选项</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>-p <num></num></td>
<td>Memcached监听的TCP端口，要保证该端口号未被占用</td>
</tr>
<tr>
<td>-U <num></num></td>
<td>指定监听UDP的端口，默认11211，0表示关闭</td>
</tr>
<tr>
<td>-s <file></file></td>
<td>指定Memcached用于监听的UNIX socket文件</td>
</tr>
<tr>
<td>-A</td>
<td>enable ascii “shutdown” command</td>
</tr>
<tr>
<td>-a <mask></mask></td>
<td>设置-s选项指定的UNIX socket文件的权限(默认权限: 0700)</td>
</tr>
<tr>
<td>-l <addr></addr></td>
<td>监听的服务器IP地址，如果有多个地址的话，使用逗号分隔，格式可以为“IP地址:端口号”，例如：-l 指定192.168.0.184:19830,192.168.0.195:13542；端口号也可以通过-p选项指定</td>
</tr>
<tr>
<td>-d</td>
<td>指定memcached进程作为一个守护进程启动</td>
</tr>
<tr>
<td>-r</td>
<td>设置产生core文件大小</td>
</tr>
<tr>
<td>-u <username></username></td>
<td>运行memcached的用户 (only when run as root)</td>
</tr>
<tr>
<td>-m <num></num></td>
<td>指定分配给memcached使用的内存，单位是MB(默认: 64 MB)</td>
</tr>
<tr>
<td>-M</td>
<td>当内存使用超出配置值时，禁止自动清除缓存中的数据项，此时Memcached不可用，直到内存被释放</td>
</tr>
<tr>
<td>-c <num></num></td>
<td>设置最大运行的并发连接数，默认是1024</td>
</tr>
<tr>
<td>-k</td>
<td>设置锁定所有分页的内存，对于大缓存应用场景，谨慎使用该选项</td>
</tr>
<tr>
<td>-v</td>
<td>输出警告和错误信息</td>
</tr>
<tr>
<td>-vv</td>
<td>打印信息比-v更详细：不仅输出警告和错误信息，也输出客户端请求和响应信息</td>
</tr>
<tr>
<td>-vvv</td>
<td>extremely verbose (also print internal state transitions)</td>
</tr>
<tr>
<td>-h</td>
<td>显示Memcached版本和摘要信息</td>
</tr>
<tr>
<td>-i</td>
<td>打印libevent和Memcached的licenses信息</td>
</tr>
<tr>
<td>-V</td>
<td>输出Memcached版本号</td>
</tr>
<tr>
<td>-P <file></file></td>
<td>保存memcached进程的pid文件，（与 -d 一起搭配使用）</td>
</tr>
<tr>
<td>-f <factor></factor></td>
<td>用于计算缓存数据项的内存块大小的乘数因子，默认是1.25</td>
</tr>
<tr>
<td>-n <bytes></bytes></td>
<td>为缓存数据项的key、value、flag设置最小分配字节数，默认是48</td>
</tr>
<tr>
<td>-L</td>
<td>尝试使用大内存分页（pages）</td>
</tr>
<tr>
<td>-D <char></char></td>
<td>用于统计报告中Key前缀和ID之间的分隔符，默认是冒号“:”  </td>
</tr>
<tr>
<td>-t <num></num></td>
<td>指定用来处理请求的线程数，默认为4</td>
</tr>
<tr>
<td>-R</td>
<td>为避免客户端饿死（starvation），对连续达到的客户端请求数设置一个限额，如果超过该设置，会选择另一个连接来处理请求，默认为20</td>
</tr>
<tr>
<td>-C</td>
<td>禁用CAS</td>
</tr>
<tr>
<td>-b <num></num></td>
<td>Set the backlog queue limit (default: 1024)</td>
</tr>
<tr>
<td>-B</td>
<td>指定使用的协议，默认行为是自动协商（autonegotiate），可能使用的选项有auto、ascii、binary。</td>
</tr>
<tr>
<td>-I</td>
<td>Override the size of each slab page. Adjusts max item size(default: 1mb, min: 1k, max: 128m)</td>
</tr>
<tr>
<td>-F</td>
<td>禁用flush_all命令</td>
</tr>
<tr>
<td>-o</td>
<td>指定逗号分隔的选项，一般用于用于扩展或实验性质的选项</td>
</tr>
</tbody>
</table>
<h3 id="通过telnet连接使用Memcache"><a href="#通过telnet连接使用Memcache" class="headerlink" title="通过telnet连接使用Memcache"></a>通过telnet连接使用Memcache</h3><p>连接<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">telnet 127.0.0.1 11211</div></pre></td></tr></table></figure></p>
<p>命令格式：<command name=""> <key> <flags> <exptime> <bytes>\r\n <data block="">\r\n</data></bytes></exptime></flags></key></p>
<blockquote>
<p><command name=""> 可以是”set”, “add”, “replace”</p>
<p><key> 客户端需要保存数据的key。</key></p>
<p><flags> 是一个16位的无符号的整数(以十进制的方式表示)。</flags></p>
<p><exptime> 过期的时间。<br>最后客户端需要加上”\r\n”作为”命令头”的结束标志。即回车</exptime></p>
</blockquote>
<p>示例：</p>
<p>保存一个数据（保存一个『cache_key1=&gt;12345』的键值对到memcached 60s）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">set cache_key1 0 60 5</div><div class="line">12345</div><div class="line">STORED</div></pre></td></tr></table></figure></p>
<p>获取刚保存的值<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">get cache_key1</div><div class="line">VALUE cache_key1 0 5</div><div class="line">12345</div><div class="line">END</div></pre></td></tr></table></figure></p>
<p>其他命令：</p>
<table>
<thead>
<tr>
<th>Command</th>
<th>Description</th>
<th>Example</th>
</tr>
</thead>
<tbody>
<tr>
<td>get</td>
<td>获取值</td>
<td>get mykey</td>
</tr>
<tr>
<td>set</td>
<td>设置值（可以存在可以不存在）</td>
<td>set mykey 0 60 5</td>
</tr>
<tr>
<td>add</td>
<td>添加新值</td>
<td>add newkey 0 60 5</td>
</tr>
<tr>
<td>replace</td>
<td>替换值（必须已存在）</td>
<td>replace key 0 60 5</td>
</tr>
<tr>
<td>append</td>
<td>在原有值之后添加数据</td>
<td>append key 0 60 15</td>
</tr>
<tr>
<td>prepend</td>
<td>在原有值之前添加数据</td>
<td>prepend key 0 60 15</td>
</tr>
<tr>
<td>incr</td>
<td>Increments numerical key value by given number</td>
<td>incr mykey 2</td>
</tr>
<tr>
<td>decr</td>
<td>Decrements numerical key value by given number</td>
<td>decr mykey 5</td>
</tr>
<tr>
<td>delete</td>
<td>删除一条数据</td>
<td>delete mykey</td>
</tr>
<tr>
<td>flush_all</td>
<td>清除所有数据</td>
<td>flush_all</td>
</tr>
<tr>
<td></td>
<td>清除900秒之内的数据</td>
<td>flush_all 900</td>
</tr>
<tr>
<td>stats</td>
<td>查看所有状态</td>
<td>stats</td>
</tr>
<tr>
<td></td>
<td>Prints memory statistics</td>
<td>stats slabs</td>
</tr>
<tr>
<td></td>
<td>Prints memory statistics</td>
<td>stats malloc</td>
</tr>
<tr>
<td></td>
<td>Print higher level allocation statistics</td>
<td>stats items</td>
</tr>
<tr>
<td></td>
<td></td>
<td>stats detail</td>
</tr>
<tr>
<td></td>
<td>已使用大小</td>
<td>stats sizes</td>
</tr>
<tr>
<td></td>
<td>重置状态</td>
<td>stats reset</td>
</tr>
<tr>
<td>version</td>
<td>查看版本</td>
<td>version</td>
</tr>
<tr>
<td>verbosity</td>
<td>Increases log level</td>
<td>verbosity</td>
</tr>
<tr>
<td>quit</td>
<td>退出telnet连接</td>
<td>quit</td>
</tr>
</tbody>
</table>
<h3 id="通过客户端（PHP）连接和使用Memcached"><a href="#通过客户端（PHP）连接和使用Memcached" class="headerlink" title="通过客户端（PHP）连接和使用Memcached"></a>通过客户端（PHP）连接和使用Memcached</h3><p>php扩展Memcached安装</p>
<p>依赖</p>
<blockquote>
<p>libmemcached, 是一个 memcached 的库，客户端库，C 和 C++ 语言实现的客户端库，具有低内存占用率、线程安全、并提供对memcached功能的全面支持。它还采用 多种命令行工具： memcat ， memflush ， memrm ， memstat ，并memslap （负载代）。程序库一直在设计，让不同的散列方法对密钥，分割的钥匙，并使用统一的散列分配。</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">wget https://launchpadlibrarian.net/165454254/libmemcached-1.0.18.tar.gz</div><div class="line">tar -zxvf libmemcached-1.0.18.tar.gz</div><div class="line">cd libmemcached-1.0.18</div><div class="line">./configure --prefix=/usr/local/libmemcached</div><div class="line">make &amp;&amp; make install</div></pre></td></tr></table></figure>
<p>安装扩展<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">wget http://n.sinaimg.cn/games/3ece443e/20160929/memcached-2.2.0.tar</div><div class="line">tar -xvf memcached-2.2.0.tar</div><div class="line">cd memcached-2.2.0</div><div class="line">/usr/local/php56/bin/phpize</div><div class="line">./configure --with-php-config=/usr/local/php56/bin/php-config --with-libmemcached-dir=/usr/local/libmemcached  --enable-memcached --disable-memcached-sasl</div><div class="line">make &amp;&amp; make install</div><div class="line">Installing shared extensions:     /usr/local/php56/lib/php/extensions/no-debug-non-zts-20131226/</div></pre></td></tr></table></figure></p>
<p>查看是否安装成功<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">cd /usr/local/php56/lib/php/extensions/no-debug-non-zts-20131226/</div><div class="line">ll</div><div class="line">-rwxr-xr-x 1 root root  380475 9月  28 22:25 memcached.so</div><div class="line">-rwxr-xr-x 1 root root  756714 9月  26 17:32 mysqli.so</div><div class="line">-rwxr-xr-x 1 root root 1333912 9月  24 23:31 opcache.a</div><div class="line">-rwxr-xr-x 1 root root  618435 9月  24 23:31 opcache.so</div></pre></td></tr></table></figure></p>
<p>修改配置<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">vi /usr/local/php56/lib/php.ini</div><div class="line">extension=/usr/local/php56/lib/php/extensions/no-debug-non-zts-20131226/memcached.so</div></pre></td></tr></table></figure></p>
<p>重启php-fpm<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">kill -USR2 `cat /usr/local/php56/var/run/php-fpm.pid`</div></pre></td></tr></table></figure></p>
<p>查看是否已经加载成功<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">/usr/local/php56/bin/php -m</div><div class="line">或通过phpinfo();查看</div></pre></td></tr></table></figure></p>
<p>测试<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">vi memcache_test.php</div></pre></td></tr></table></figure></p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line">        $mc = <span class="keyword">new</span> Memcached();</div><div class="line">        var_dump($mc);</div><div class="line">        $mc-&gt;addServer(<span class="string">'127.0.0.1'</span>, <span class="number">11211</span>);</div><div class="line">        $mc-&gt;set(<span class="string">'cache_key'</span>,<span class="string">'mem_value'</span>,<span class="number">30</span>);</div><div class="line">        $val = $mc-&gt;get(<span class="string">'cache_key'</span>);</div><div class="line">        var_dump($val);</div><div class="line">        var_dump($mc-&gt;delete(<span class="string">'cache_key'</span>));</div><div class="line">        $mc-&gt;quit();</div></pre></td></tr></table></figure>
<p>访问结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">object(Memcached)#1 (0) &#123; &#125; string(9) &quot;mem_value&quot; bool(true)</div></pre></td></tr></table></figure></p>
<p>php关于memcached 的两种扩展memcache 和 memcached 介绍</p>
<ol>
<li><p>目前大多数php环境里使用的都是不带d的memcache版本，这个版本出的比较早，是一个原生版本，完全在php框架内开发的。与之对应的带d的memcached是建立在libmemcached的基础上，所以相对来说，memcached版本的功能更全一些。</p>
<blockquote>
<p><a href="http://cn2.php.net/manual/en/book.memcache.php" target="_blank" rel="external">memcache:</a></p>
<p><a href="http://cn2.php.net/manual/en/book.memcached.php" target="_blank" rel="external">memcached:</a></p>
</blockquote>
</li>
<li><p>Memcache是原生实现的，支持OO和非OO两套接口并存。而memcached是使用libmemcached，只支持OO接口。</p>
</li>
<li>memcached有了一个统一的setOption()来设置设置，而不用在操作的时候设置了。Memcached实现了更多的memcached协议。</li>
<li>memcached支持Binary Protocol，而memcache不支持。这意味着memcached会有更高的性能。不过memcached目前还不支持长连接。</li>
<li>另外一点也是大家比较关心的，就是所使用的算法。“一致性hash算法”是当添加或删除存储节点时，对存储在memcached上的数据影响较小的一种算法。在php的两个扩展库中，都可以使用该算法，只是设置方法有所不同。</li>
</ol>
<ul>
<li>Memcache</li>
</ul>
<p>修改php.ini添加：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">[Memcache]</div><div class="line">Memcache.allow_failover = 1</div><div class="line">Memcache.hash_strategy =consistent</div><div class="line">Memcache.hash_function =crc32</div></pre></td></tr></table></figure></p>
<p>或在php中使用ini_set方法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">ini_set(‘memcache.hash_strategy&apos;,&apos;standard&apos;);</div><div class="line">ini_set(‘memcache.hash_function&apos;,&apos;crc32&apos;);</div></pre></td></tr></table></figure></p>
<ul>
<li>Memcached</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$mem = new memcached();</div><div class="line">$mem-&gt;setOption(Memcached::OPT_DISTRIBUTION,Memcached::DISTRIBUTION_CONSISTENT);</div><div class="line">$mem-&gt;setOption(Memcached::OPT_LIBKETAMA_COMPATIBLE,true);</div></pre></td></tr></table></figure>
<h2 id="Memcached监控"><a href="#Memcached监控" class="headerlink" title="Memcached监控"></a>Memcached监控</h2><h3 id="利用phpmemcache-php图形监控工具"><a href="#利用phpmemcache-php图形监控工具" class="headerlink" title="利用phpmemcache.php图形监控工具"></a>利用phpmemcache.php图形监控工具</h3><p>下载 phpmemcache.php<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">wget http://n.sinaimg.cn/games/3ece443e/20160929/phpmemcache.php</div></pre></td></tr></table></figure></p>
<p>将phpmemcache.php放入web目录<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mv phpmemcache.php /usr/local/nginx/html</div></pre></td></tr></table></figure></p>
<p>修改phpmemcache.php中配置<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">define(&apos;ADMIN_USERNAME&apos;,&apos;xxxx&apos;);    // 用户名修改，在访问 phpmemcache.php 需要进行认证</div><div class="line">define(&apos;ADMIN_PASSWORD&apos;,&apos;xxxx&apos;);    // 密码</div><div class="line">define(&apos;DATE_FORMAT&apos;,&apos;Y/m/d H:i:s&apos;);</div><div class="line">define(&apos;GRAPH_SIZE&apos;,200);</div><div class="line">define(&apos;MAX_ITEM_DUMP&apos;,50);</div><div class="line"></div><div class="line">$MEMCACHE_SERVERS[] = &apos;127.0.0.1:11211&apos;; // 加入需要监控的memcached服务器</div><div class="line">//$MEMCACHE_SERVERS[] = &apos;192.168.200.104:11212&apos;; // add more as an array</div></pre></td></tr></table></figure></p>
<p>浏览器访问<br><img src="http://n.sinaimg.cn/games/3ece443e/20160929/phpmemcache.png?1" alt="phpmemcache浏览器访问效果"></p>
<h3 id="利用Stats命令查看"><a href="#利用Stats命令查看" class="headerlink" title="利用Stats命令查看"></a>利用Stats命令查看</h3><p>利用stats命令可以查看当前memcached的各种状态<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div></pre></td><td class="code"><pre><div class="line">telnet 127.0.0.1 11211</div><div class="line">Trying 127.0.0.1...</div><div class="line">Connected to 127.0.0.1.</div><div class="line">Escape character is &apos;^]&apos;.</div><div class="line">stats</div><div class="line">STAT pid 24732</div><div class="line">STAT uptime 66597</div><div class="line">STAT time 1475115983</div><div class="line">STAT version 1.4.31</div><div class="line">STAT libevent 2.0.22-stable</div><div class="line">STAT pointer_size 64</div><div class="line">STAT rusage_user 6.194421</div><div class="line">STAT rusage_system 2.419890</div><div class="line">STAT curr_connections 10</div><div class="line">STAT total_connections 16</div><div class="line">STAT connection_structures 11</div><div class="line">STAT reserved_fds 20</div><div class="line">STAT cmd_get 5</div><div class="line">STAT cmd_set 8</div><div class="line">STAT cmd_flush 0</div><div class="line">STAT cmd_touch 0</div><div class="line">STAT get_hits 4</div><div class="line">STAT get_misses 1</div><div class="line">STAT get_expired 0</div><div class="line">STAT get_flushed 0</div><div class="line">STAT delete_misses 0</div><div class="line">STAT delete_hits 2</div><div class="line">STAT incr_misses 0</div><div class="line">STAT incr_hits 0</div><div class="line">STAT decr_misses 0</div><div class="line">STAT decr_hits 0</div><div class="line">STAT cas_misses 0</div><div class="line">STAT cas_hits 0</div><div class="line">STAT cas_badval 0</div><div class="line">STAT touch_hits 0</div><div class="line">STAT touch_misses 0</div><div class="line">STAT auth_cmds 0</div><div class="line">STAT auth_errors 0</div><div class="line">STAT bytes_read 3850</div><div class="line">STAT bytes_written 293</div><div class="line">STAT limit_maxbytes 134217728</div><div class="line">STAT accepting_conns 1</div><div class="line">STAT listen_disabled_num 0</div><div class="line">STAT time_in_listen_disabled_us 0</div><div class="line">STAT threads 4</div><div class="line">STAT conn_yields 0</div><div class="line">STAT hash_power_level 16</div><div class="line">STAT hash_bytes 524288</div><div class="line">STAT hash_is_expanding 0</div><div class="line">STAT malloc_fails 0</div><div class="line">STAT log_worker_dropped 0</div><div class="line">STAT log_worker_written 0</div><div class="line">STAT log_watcher_skipped 0</div><div class="line">STAT log_watcher_sent 0</div><div class="line">STAT bytes 0</div><div class="line">STAT curr_items 0</div><div class="line">STAT total_items 6</div><div class="line">STAT expired_unfetched 0</div><div class="line">STAT evicted_unfetched 0</div><div class="line">STAT evictions 0</div><div class="line">STAT reclaimed 2</div><div class="line">STAT crawler_reclaimed 0</div><div class="line">STAT crawler_items_checked 0</div><div class="line">STAT lrutail_reflocked 0</div><div class="line">END</div></pre></td></tr></table></figure></p>
<p>Stats详解</p>
<table>
<thead>
<tr>
<th>选项</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>pid</td>
<td>memcache服务器的进程ID</td>
</tr>
<tr>
<td>uptime</td>
<td>服务器已经运行的秒数</td>
</tr>
<tr>
<td>time</td>
<td>服务器当前的unix时间戳</td>
</tr>
<tr>
<td>version</td>
<td>memcache版本</td>
</tr>
<tr>
<td>pointer_size</td>
<td>当前操作系统的指针大小（32位系统一般是32bit）</td>
</tr>
<tr>
<td>rusage_user</td>
<td>进程的累计用户时间</td>
</tr>
<tr>
<td>rusage_system</td>
<td>进程的累计系统时间</td>
</tr>
<tr>
<td>curr_items</td>
<td>服务器当前存储的items数量</td>
</tr>
<tr>
<td>total_items</td>
<td>从服务器启动以后存储的items总数量</td>
</tr>
<tr>
<td>bytes</td>
<td>当前服务器存储items占用的字节数</td>
</tr>
<tr>
<td>curr_connections</td>
<td>当前打开着的连接数</td>
</tr>
<tr>
<td>total_connections</td>
<td>从服务器启动以后曾经打开过的连接数</td>
</tr>
<tr>
<td>connection_structures</td>
<td>服务器分配的连接构造数</td>
</tr>
<tr>
<td>cmd_get</td>
<td>get命令（获取）总请求次数</td>
</tr>
<tr>
<td>cmd_set</td>
<td>set命令（保存）总请求次数</td>
</tr>
<tr>
<td>get_hits</td>
<td>总命中次数</td>
</tr>
<tr>
<td>get_misses</td>
<td>总未命中次数</td>
</tr>
<tr>
<td>evictions</td>
<td>为获取空闲内存而删除的items数（分配给memcache的空间用满后需要删除旧的items来得到空间分配给新的items）</td>
</tr>
<tr>
<td>bytes_read</td>
<td>总读取字节数（请求字节数）</td>
</tr>
<tr>
<td>bytes_written</td>
<td>总发送字节数（结果字节数）</td>
</tr>
<tr>
<td>limit_maxbytes</td>
<td>分配给memcache的内存大小（字节）</td>
</tr>
<tr>
<td>threads</td>
<td>当前线程数</td>
</tr>
</tbody>
</table>
<h3 id="利用各种监控软件查看（例如：nagios监控memcache的插件）"><a href="#利用各种监控软件查看（例如：nagios监控memcache的插件）" class="headerlink" title="利用各种监控软件查看（例如：nagios监控memcache的插件）"></a>利用各种监控软件查看（例如：nagios监控memcache的插件）</h3><blockquote>
<p>只以命中率大于和小于为例两种状态。</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">vim check_memcache</div></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#!/bin/sh</span></div><div class="line"><span class="keyword">if</span> [ <span class="variable">$#</span> <span class="_">-ne</span> 1 ]</div><div class="line"><span class="keyword">then</span></div><div class="line"><span class="built_in">echo</span> <span class="string">"Usage:<span class="variable">$0</span> -c num2"</span></div><div class="line"><span class="built_in">exit</span> 0</div><div class="line"><span class="keyword">fi</span></div><div class="line">cmd_get=`/usr/<span class="built_in">local</span>/nagios/libexec/check_tcp -H localhost -p 11211 -E <span class="_">-s</span> <span class="string">'stats\r\nquit\r\n'</span> <span class="_">-e</span> <span class="string">'uptime'</span> |grep cmd_get | awk <span class="string">'&#123;print $3+0&#125;'</span>`</div><div class="line">get_hits=`/usr/<span class="built_in">local</span>/nagios/libexec/check_tcp -H localhost -p 11211 -E <span class="_">-s</span> <span class="string">'stats\r\nquit\r\n'</span> <span class="_">-e</span> <span class="string">'uptime'</span> |grep get_hits | awk <span class="string">'&#123;print $3+0&#125;'</span>`</div><div class="line">hit_rate=`<span class="built_in">echo</span> <span class="string">"<span class="variable">$get_hits</span>*100/<span class="variable">$cmd_get</span>"</span>|bc`</div><div class="line"><span class="keyword">if</span> [ <span class="variable">$hit_rate</span> <span class="_">-gt</span> <span class="variable">$1</span> ];<span class="keyword">then</span></div><div class="line"><span class="built_in">echo</span> <span class="string">"OK - hit rate is <span class="variable">$hit_rate</span> | hit_rate=<span class="variable">$hit_rate</span>; cmd_get=<span class="variable">$cmd_get</span>; get_hits=<span class="variable">$get_hits</span>"</span></div><div class="line"><span class="built_in">exit</span> 0</div><div class="line"><span class="keyword">else</span></div><div class="line"><span class="built_in">echo</span> <span class="string">"CRITICAL - hit rate is <span class="variable">$hit_rate</span> | hit_rate=<span class="variable">$hit_rate</span>; cmd_get=<span class="variable">$cmd_get</span>; get_hits=<span class="variable">$get_hits</span>"</span></div><div class="line"><span class="built_in">exit</span> 2</div><div class="line"><span class="keyword">fi</span></div></pre></td></tr></table></figure>
<p>测试命中率大于80%为正常为例;<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">eg：</div><div class="line">sh check_memcache 80</div><div class="line">root@ip-10-250-114-95:/liang# sh check_memcache 80</div><div class="line">OK - hit rate is 99 | hit_rate=99; cmd_get=142547; get_hits=141880</div></pre></td></tr></table></figure></p>
<p>以上证明命中率99%，即状态为OK.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Memcached,是高性能的分布式内存缓存服务器，主要功能就是通过缓存数据库的查询，减少对数据库的访问次数，来提高动态web应用的速度和可扩展性。&lt;/p&gt;
&lt;p&gt;memcached 是以守护程序方法运行于一个或多个服务器中，随时接受客户端的连接操作，客户端可以由各种语言编写，目前一致的客户端api包括 Perl / PHP / Python / Java / C# / C 等等。客户端在与 memcached 服务建立连接之后，接下来的事情就是存取对象了， 每个被存取的对象都有一个唯一的标识符 key，存取操作均通过这个 key进行，保存到 memcached 中的对象实际上是放置内存中的，并不是保存在平时的 cache 文件中的，这也是为什么 memcached 能够如此高效快速的原因。&lt;/p&gt;
&lt;p&gt;注意，这些对象并不是持久的， 服务停止之后， 里边的数据就会丢失。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://n.sinaimg.cn/games/3ece443e/20160929/MemcacheYingYongMoXing.png?1&quot; alt=&quot;Memcached应用模型&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Linux" scheme="https://weizhimiao.github.io/categories/Linux/"/>
    
    
      <category term="缓存" scheme="https://weizhimiao.github.io/tags/%E7%BC%93%E5%AD%98/"/>
    
      <category term="memcache" scheme="https://weizhimiao.github.io/tags/memcache/"/>
    
      <category term="memcached" scheme="https://weizhimiao.github.io/tags/memcached/"/>
    
  </entry>
  
  <entry>
    <title>linux服务和进程管理</title>
    <link href="https://weizhimiao.github.io/2016/09/28/Linux%E6%9C%8D%E5%8A%A1%E5%92%8C%E8%BF%9B%E7%A8%8B%E7%AE%A1%E7%90%86/"/>
    <id>https://weizhimiao.github.io/2016/09/28/Linux服务和进程管理/</id>
    <published>2016-09-28T10:30:00.000Z</published>
    <updated>2016-09-29T03:17:46.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://n.sinaimg.cn/games/3ece443e/20160929/LinuxFuWuHeJinChengGuanLi.png?1" alt="Linux服务和进程管理"></p>
<a id="more"></a>
<h2 id="进程管理"><a href="#进程管理" class="headerlink" title="进程管理"></a>进程管理</h2><p>进程管理的三个主要任务</p>
<ul>
<li>判断服务器的健康状态</li>
<li>查看所有正在运行的进程</li>
<li>强制终止进程</li>
</ul>
<h3 id="进程查看"><a href="#进程查看" class="headerlink" title="进程查看"></a>进程查看</h3><h4 id="ps-aux"><a href="#ps-aux" class="headerlink" title="ps aux"></a>ps aux</h4><blockquote>
<p>查看当前系统所有运行的进程（可以不加-）</p>
<ul>
<li>-a 显示前台所有进程</li>
<li>-u 显示用户名</li>
<li>-x 显示后台进程</li>
</ul>
</blockquote>
<p>命令执行结果示例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">ps aux</div><div class="line">USER       PID %CPU %MEM    VSZ   RSS TTY      STAT START   TIME COMMAND</div><div class="line">root         1  0.0  0.3  41280  3732 ?        Ss   9月26   0:02 /usr/lib/systemd/systemd --switched-root --system</div><div class="line">root         2  0.0  0.0      0     0 ?        S    9月26   0:00 [kthreadd]</div><div class="line">root         3  0.0  0.0      0     0 ?        S    9月26   0:00 [ksoftirqd/0]</div><div class="line">root         5  0.0  0.0      0     0 ?        S&lt;   9月26   0:00 [kworker/0:0H]</div><div class="line">root         6  0.0  0.0      0     0 ?        S    9月26   0:00 [kworker/u2:0]</div><div class="line">root         7  0.0  0.0      0     0 ?        S    9月26   0:00 [migration/0]</div><div class="line">root         8  0.0  0.0      0     0 ?        S    9月26   0:00 [rcu_bh]</div><div class="line">root         9  0.0  0.0      0     0 ?        S    9月26   0:00 [rcuob/0]</div><div class="line">root        10  0.0  0.0      0     0 ?        S    9月26   0:36 [rcu_sched]</div><div class="line">root        11  0.0  0.0      0     0 ?        S    9月26   0:32 [rcuos/0]</div><div class="line">···</div></pre></td></tr></table></figure></p>
<p>参数说明:</p>
<table>
<thead>
<tr>
<th>参数</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>USER</td>
<td>用户名</td>
</tr>
<tr>
<td>PID</td>
<td>进程PID 1  init  系统启动的第一个进程</td>
</tr>
<tr>
<td>%CPU</td>
<td>cpu占用百分比</td>
</tr>
<tr>
<td>%MEM</td>
<td>内存占用百分比</td>
</tr>
<tr>
<td>VSZ</td>
<td>虚拟内存占用量（KB）</td>
</tr>
<tr>
<td>RSS</td>
<td>固定内存占有量</td>
</tr>
<tr>
<td>TTY</td>
<td>登录终端  tty1-7 本地终端1-6 字符、 7图形） pts/0-255</td>
</tr>
<tr>
<td>STAT</td>
<td>状态 （S：睡眠 D：不可唤醒 R：运行 T：停止 Z：僵死 W：进入内存交换 X：死掉的进程 &lt;:高优先级 N：低优先级 L：被锁进内存 s：含子进程 +：位于后台 l：多线程）</td>
</tr>
<tr>
<td>START</td>
<td>进程触发时间</td>
</tr>
<tr>
<td>TIME</td>
<td>占用cpu时间</td>
</tr>
<tr>
<td>COMMAND</td>
<td>进程本身</td>
</tr>
</tbody>
</table>
<h4 id="pstree"><a href="#pstree" class="headerlink" title="pstree"></a>pstree</h4><blockquote>
<ul>
<li>-a 查看进程树</li>
</ul>
</blockquote>
<p>命令执行结果示例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">pstree -a</div><div class="line">systemd --switched-root --system --deserialize 21</div><div class="line">  ├─AliHids</div><div class="line">  │   └─4*[&#123;AliHids&#125;]</div><div class="line">  ├─AliYunDun</div><div class="line">  │   └─8*[&#123;AliYunDun&#125;]</div><div class="line">  ├─AliYunDunUpdate</div><div class="line">  │   └─3*[&#123;AliYunDunUpdate&#125;]</div><div class="line">  ├─agetty --noclear tty1 linux</div><div class="line">  ├─aliyun-service -d</div><div class="line">  ├─crond -n</div><div class="line">  ├─dbus-daemon --system --address=systemd: --nofork --nopidfile --systemd-activation</div><div class="line">  ├─memcached -d -m 128 -u root -p 11211</div><div class="line">  │   └─6*[&#123;memcached&#125;]</div><div class="line">  ├─nginx</div><div class="line">  │   └─nginx</div><div class="line">  ├─ntpd -u ntp:ntp -g</div><div class="line">  ├─php-fpm</div><div class="line">  │   ├─php-fpm</div><div class="line">  │   └─php-fpm</div><div class="line">  ├─rsyslogd -n</div><div class="line">  │   └─2*[&#123;rsyslogd&#125;]</div><div class="line">  ├─sshd -D</div><div class="line">  │   └─sshd</div><div class="line">  │       └─bash</div><div class="line">  │           └─pstree -a</div><div class="line">  ├─systemd-journal</div><div class="line">  ├─systemd-logind</div><div class="line">  └─systemd-udevd</div></pre></td></tr></table></figure></p>
<h4 id="top"><a href="#top" class="headerlink" title="top"></a>top</h4><blockquote>
<p>实时显示进程状态</p>
</blockquote>
<p>命令执行结果示例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">top - 15:04:52 up 2 days,  5:25,  1 user,  load average: 0.00, 0.01, 0.05</div><div class="line">Tasks:  70 total,   2 running,  68 sleeping,   0 stopped,   0 zombie</div><div class="line">%Cpu(s):  0.3 us,  0.3 sy,  0.0 ni, 99.3 id,  0.0 wa,  0.0 hi,  0.0 si,  0.0 st</div><div class="line">KiB Mem :  1016796 total,   599400 free,    41948 used,   375448 buff/cache</div><div class="line">KiB Swap:        0 total,        0 free,        0 used.   838500 avail Mem</div><div class="line"></div><div class="line">  PID USER      PR  NI    VIRT    RES    SHR S %CPU %MEM     TIME+ COMMAND</div><div class="line">  917 root      20   0   82696   9152   5456 S  0.3  0.9   5:50.76 AliHids</div><div class="line">    1 root      20   0   41280   3732   2388 S  0.0  0.4   0:02.36 systemd</div><div class="line">    2 root      20   0       0      0      0 S  0.0  0.0   0:00.01 kthreadd</div><div class="line">    3 root      20   0       0      0      0 S  0.0  0.0   0:00.00 ksoftirqd/0</div><div class="line">    5 root       0 -20       0      0      0 S  0.0  0.0   0:00.00 kworker/0:0H</div><div class="line">    6 root      20   0       0      0      0 S  0.0  0.0   0:00.26 kworker/u2:0</div><div class="line">    7 root      rt   0       0      0      0 S  0.0  0.0   0:00.00 migration/0</div><div class="line">    ···</div></pre></td></tr></table></figure></p>
<p>参数说明</p>
<ul>
<li>第一行：系统当前时间，系统持续时间， 登录用户，1,5,15分钟之前的平均负载</li>
<li>第二行：进程总数</li>
<li>第三行：CPU占用率</li>
<li>第四行：内存使用：总共，空闲，已使用，缓存</li>
<li>第五行：swap使用情况</li>
</ul>
<p>操作命令：</p>
<ul>
<li>M,按内存占用排序</li>
<li>P,安CPU占用排序</li>
<li>q,退出</li>
</ul>
<h3 id="终止进程"><a href="#终止进程" class="headerlink" title="终止进程"></a>终止进程</h3><h4 id="kill-结束单个进程"><a href="#kill-结束单个进程" class="headerlink" title="kill 结束单个进程"></a>kill 结束单个进程</h4><blockquote>
<p>kill命令是通过向进程发送指定的信号来结束相应进程的。在默认情况下，采用编号为15的TERM信号。TERM信号将终止所有不能捕获该信号的进程。对于那些可以捕获该信号的进程就要用编号为9的kill信号，强行“杀掉”该进程。</p>
<p>命令格式：kill 信号  PID</p>
</blockquote>
<p>信号，进程间的通信方式</p>
<p>我们常用的信号有</p>
<table>
<thead>
<tr>
<th>信号名称</th>
<th>信号</th>
<th>意义</th>
</tr>
</thead>
<tbody>
<tr>
<td>HUP</td>
<td>1</td>
<td>终端断线</td>
</tr>
<tr>
<td>INT</td>
<td>2</td>
<td>中断（同 Ctrl + C）</td>
</tr>
<tr>
<td>QUIT</td>
<td>3</td>
<td>退出（同 Ctrl + \）</td>
</tr>
<tr>
<td>TERM</td>
<td>15</td>
<td>终止</td>
</tr>
<tr>
<td>KILL</td>
<td>9</td>
<td>强制终止</td>
</tr>
<tr>
<td>CONT</td>
<td>18</td>
<td>继续（与STOP相反， fg/bg命令）</td>
</tr>
<tr>
<td>STOP</td>
<td>19</td>
<td>暂停（同 Ctrl + Z）</td>
</tr>
</tbody>
</table>
<p>示例：结束 memcached 进程</p>
<p>获取memcached进程pid（24428，即为memcached进程PID）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">ps -aux | grep memcache</div><div class="line">root     24428  0.0  0.0 323120   864 ?        Ssl  11:00   0:02 /usr/local/memcached/bin/memcached -d -m 128 -u root -p 11211</div><div class="line">root     24727  0.0  0.0 112664   984 pts/0    S+   15:54   0:00 grep --color=auto memcache</div><div class="line">#</div><div class="line">ps -ef | grep memcache</div><div class="line">root     24428     1  0 11:00 ?        00:00:02 /usr/local/memcached/bin/memcached -d -m 128 -u root -p 11211</div><div class="line">root     24708 24568  0 15:49 pts/0    00:00:00 grep --color=auto memcache</div></pre></td></tr></table></figure></p>
<p>或者使用pidof查看 （ pid + of ）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[root@...]# pidof memcached</div><div class="line">24428</div></pre></td></tr></table></figure></p>
<p>终止 memcached<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">kill -9 24428</div><div class="line">ps -aux | grep memcache</div><div class="line">root     24729  0.0  0.0 112664   984 pts/0    S+   15:55   0:00 grep --color=auto memcache</div></pre></td></tr></table></figure></p>
<h4 id="killall"><a href="#killall" class="headerlink" title="killall"></a>killall</h4><blockquote>
<p>杀死指定名字的进程</p>
<p>命令格式：killall 信号  进程名</p>
</blockquote>
<p>示例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">killall -9 memcached</div></pre></td></tr></table></figure></p>
<h4 id="pkill"><a href="#pkill" class="headerlink" title="pkill"></a>pkill</h4><blockquote>
<p>支持按照一定规则匹配来杀死进程</p>
<p>命令格式：pkill [options] <pattern></pattern></p>
</blockquote>
<p>示例：杀死用户 wahaha 下的所有进程<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pkill -u wahaha</div></pre></td></tr></table></figure></p>
<p>把某个终端登陆的用户踢出<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pkill -9 -t 终端号</div></pre></td></tr></table></figure></p>
<p>把本地登陆终端1登陆用户踢出<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pkill -9 -t tty1</div></pre></td></tr></table></figure></p>
<h2 id="服务管理"><a href="#服务管理" class="headerlink" title="服务管理"></a>服务管理</h2><h3 id="Linux中服务的分类"><a href="#Linux中服务的分类" class="headerlink" title="Linux中服务的分类"></a>Linux中服务的分类</h3><h4 id="系统默认安装的服务-RPM"><a href="#系统默认安装的服务-RPM" class="headerlink" title="系统默认安装的服务(RPM)"></a>系统默认安装的服务(RPM)</h4><ul>
<li>独立的服务</li>
<li>基于xinetd的服务，xinetd是系统超级守护进程<blockquote>
<p>xinetd服务其本身就是一个独立的服务。</p>
<p>当程序调用xinetd服务时，它先调用的事xinetd服务，让后xinetd服务在调用索要调用的服务进行相应。</p>
<p>Linux系统默认是没有安装xinetd服务的，需要进行安装后才能使用。</p>
</blockquote>
</li>
</ul>
<h4 id="源码包安装的服务"><a href="#源码包安装的服务" class="headerlink" title="源码包安装的服务"></a>源码包安装的服务</h4><h3 id="系统默认安装的服务"><a href="#系统默认安装的服务" class="headerlink" title="系统默认安装的服务"></a>系统默认安装的服务</h3><h4 id="如何区分服务的分类"><a href="#如何区分服务的分类" class="headerlink" title="如何区分服务的分类"></a>如何区分服务的分类</h4><p>查看服务的自启动状态<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">chkconfig  --list</div></pre></td></tr></table></figure></p>
<p>运行结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">chkconfig  --list</div><div class="line">注意：该输出结果只显示 SysV 服务，并不包含原生 systemd 服务。SysV 配置数据可能被原生 systemd 配置覆盖。</div><div class="line">      如果您想列出 systemd 服务,请执行 &apos;systemctl list-unit-files&apos;。</div><div class="line">      欲查看对特定 target 启用的服务请执行</div><div class="line">      &apos;systemctl list-dependencies [target]&apos;。</div><div class="line">aegis          	0:关	1:关	2:开	3:开	4:开	5:开	6:关</div><div class="line">agentwatch     	0:关	1:关	2:开	3:开	4:开	5:开	6:关</div><div class="line">netconsole     	0:关	1:关	2:关	3:关	4:关	5:关	6:关</div><div class="line">network        	0:关	1:关	2:开	3:开	4:开	5:开	6:关</div></pre></td></tr></table></figure></p>
<p>Linux的运行级别：0-6</p>
<table>
<thead>
<tr>
<th>级别</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>0</td>
<td>关机</td>
</tr>
<tr>
<td>1</td>
<td>单用户模式</td>
</tr>
<tr>
<td>2</td>
<td>不完全多用户，不包含NFS服务</td>
</tr>
<tr>
<td>3</td>
<td>完全多用户,字符界面</td>
</tr>
<tr>
<td>4</td>
<td>未分配</td>
</tr>
<tr>
<td>5</td>
<td>图形界面</td>
</tr>
<tr>
<td>6</td>
<td>重启</td>
</tr>
</tbody>
</table>
<p>查看当前系统的运行级别：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">runlevel</div><div class="line">N 3</div></pre></td></tr></table></figure></p>
<p>切换系统当前的运行级别：</p>
<table>
<thead>
<tr>
<th>命令</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr>
<td>init  0</td>
<td>关机                   </td>
</tr>
<tr>
<td>init  5</td>
<td>切换到图形界面（前提图形界面已经安装）</td>
</tr>
<tr>
<td>init  3</td>
<td>切换到字符界面</td>
</tr>
<tr>
<td>init  6</td>
<td>重启</td>
</tr>
</tbody>
</table>
<h4 id="独立的服务管理"><a href="#独立的服务管理" class="headerlink" title="独立的服务管理"></a>独立的服务管理</h4><ul>
<li>启动</li>
</ul>
<p>第一种方式：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">/etc/rc.d/init.d/服务名 start| stop | restart | status</div><div class="line"># 例：</div><div class="line">/etc/rc.d/init.d/httpd start</div></pre></td></tr></table></figure></p>
<p>第二种方式：（只支持RedHat系列的Linux）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">service 服务名 tart| stop | restart | status</div></pre></td></tr></table></figure></p>
<p><strong><em>service命令其本质是当命令运行时直接在/etc/rc.d/init.d目录下查找相应的服务，并进行相应的操作。）</em></strong></p>
<ul>
<li>自启动<br>-<br>第一种方式：<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">chkconfig --level 2345 服务名 on|off</div></pre></td></tr></table></figure>
</li>
</ul>
<p>第二种方式：（推荐）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">vi  /etc/rc.local (系统启动时会运行该文件)</div></pre></td></tr></table></figure></p>
<p>修改文件内容：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">touch /var/lock/subsys/local （更新系统的开机时间）</div><div class="line"># 在下一行，写入自己要启动的服务名，比如我要开机自启动httpd服务：</div><div class="line"># 就加入/etc/rc.d/init.d/httpd start</div><div class="line"># 更改后文件就是：</div><div class="line">touch /var/lock/subsys/local</div><div class="line">/etc/rc.d/init.d/httpd start</div></pre></td></tr></table></figure></p>
<h4 id="ntsysv自启动管理工具"><a href="#ntsysv自启动管理工具" class="headerlink" title="ntsysv自启动管理工具"></a>ntsysv自启动管理工具</h4><p>所有系统默认安装服务都可以使用ntsysv命令进行自启动管理。rpm包安装服务，自启动管理工具（只要rpm安装的，都可进行管理）</p>
<h3 id="源码包安装的服务-1"><a href="#源码包安装的服务-1" class="headerlink" title="源码包安装的服务"></a>源码包安装的服务</h3><p>启动<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/usr/local/apache2/bin/apachectl  start</div></pre></td></tr></table></figure></p>
<p>自启动<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">vi /etc/rc.local         </div><div class="line">加入</div><div class="line">/usr/local/apache2/bin/apachectl  start</div></pre></td></tr></table></figure></p>
<h2 id="计划任务"><a href="#计划任务" class="headerlink" title="计划任务"></a>计划任务</h2><blockquote>
<p>首先保证crond服务时启动的（crond默认是自启动的）</p>
</blockquote>
<p>命令：crontab</p>
<p>编辑格式： <em> </em> <em> </em> *  命令</p>
<p>说明：</p>
<ul>
<li>第一个*：一小时中第几分钟  0-59</li>
<li>第二个*：一天中第几个小时  0-23</li>
<li>第三个*：一个月中第几天    1-31</li>
<li>第四个*：一年第几个月      1-12</li>
<li>第五个*：一周中星期几       0-6             </li>
</ul>
<p>例<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">10  *  31  *  *  命令</div><div class="line">10  *  *  *  *  命令</div><div class="line">5  4  *  5-10  *  命令</div><div class="line">*/10  *  *  *  *  命令</div><div class="line">5 4  1,15  *  *  命令  #日期和星期不要同时指定，会超出预期</div><div class="line">5 4 10 * 5 命令</div><div class="line">*/20 4 * 5 2   命令    #每隔二十分钟</div></pre></td></tr></table></figure></p>
<p>查看系统定时任务<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">crontab  -l</div></pre></td></tr></table></figure></p>
<p>删除定时任务(慎用，删除之前记得备份数据)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">crontab  -r</div></pre></td></tr></table></figure></p>
<p><strong>注意事项：</strong></p>
<ul>
<li>选项都不能为空，必须填入，不知道的值使用通配符*表示任何时间</li>
<li>每个时间字段都可以指定多个值，不连续的值用,间隔，连续的值用-间隔</li>
<li>间隔固定时间执行书写为*/n格式</li>
<li>命令应该给出绝对路径</li>
<li>星期几何第几天不能同时出现</li>
<li>最小时间范围是分钟，最大时间范围是月</li>
</ul>
<h2 id="查看系统启动信息"><a href="#查看系统启动信息" class="headerlink" title="查看系统启动信息"></a>查看系统启动信息</h2><p>查看系统启动信息<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">dmesg</div></pre></td></tr></table></figure></p>
<p>系统启动信息日志<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cat  /var/log/dmesg</div></pre></td></tr></table></figure></p>
<p>查看eth0信息<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">dmesg | grep eth0</div></pre></td></tr></table></figure></p>
<p>查看cpu信息<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">dmesg | grep CPU</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://n.sinaimg.cn/games/3ece443e/20160929/LinuxFuWuHeJinChengGuanLi.png?1&quot; alt=&quot;Linux服务和进程管理&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Linux" scheme="https://weizhimiao.github.io/categories/Linux/"/>
    
    
      <category term="进程管理" scheme="https://weizhimiao.github.io/tags/%E8%BF%9B%E7%A8%8B%E7%AE%A1%E7%90%86/"/>
    
      <category term="服务管理" scheme="https://weizhimiao.github.io/tags/%E6%9C%8D%E5%8A%A1%E7%AE%A1%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>Nginx运行状态监控</title>
    <link href="https://weizhimiao.github.io/2016/09/27/Nginx%E8%BF%90%E8%A1%8C%E7%8A%B6%E6%80%81%E7%9B%91%E6%8E%A7/"/>
    <id>https://weizhimiao.github.io/2016/09/27/Nginx运行状态监控/</id>
    <published>2016-09-27T14:30:00.000Z</published>
    <updated>2016-09-27T09:41:45.000Z</updated>
    
    <content type="html"><![CDATA[<p>Nginx可以通过stub_status模块来查看服务器的状态信息。</p>
<a id="more"></a>
<h2 id="安装stub-status模块"><a href="#安装stub-status模块" class="headerlink" title="安装stub_status模块"></a>安装stub_status模块</h2><p>查看服务器当前是否已经编译安装过stub_status模块<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">/usr/local/nginx/sbin/nginx -V</div><div class="line">nginx version: nginx/1.11.4</div><div class="line">built by gcc 4.8.5 20150623 (Red Hat 4.8.5-4) (GCC)</div><div class="line">configure arguments: --prefix=/usr/local/nginx</div></pre></td></tr></table></figure></p>
<p>安装 stub_status 模块</p>
<p>解压相应版本的nginx源码包，<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cd nginx-1.11.4</div></pre></td></tr></table></figure></p>
<p>配置<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">./configure --prefix=/usr/local/nginx --with-http_stub_status_module</div></pre></td></tr></table></figure></p>
<p>编译（不执行make install操作）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">make</div></pre></td></tr></table></figure></p>
<p>手动替换 nginx 执行文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">mv /usr/local/nginx/sbin/nginx /usr/local/nginx/sbin/nginx.bak</div><div class="line">cp ./objs/nginx /usr/local/nginx/sbin/</div></pre></td></tr></table></figure></p>
<p>查看是否安装成功<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">/usr/local/nginx/sbin/nginx -V</div><div class="line">nginx version: nginx/1.11.4</div><div class="line">built by gcc 4.8.5 20150623 (Red Hat 4.8.5-4) (GCC)</div><div class="line">configure arguments: --prefix=/usr/local/nginx --with-http_stub_status_module</div></pre></td></tr></table></figure></p>
<h2 id="启用nginx-status配置"><a href="#启用nginx-status配置" class="headerlink" title="启用nginx status配置"></a>启用nginx status配置</h2><p>修改配置<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">vi /usr/local/nginx/conf/nginx.conf</div></pre></td></tr></table></figure></p>
<p>加入配置<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">location /ngx_status</div><div class="line">&#123;</div><div class="line">    stub_status on;</div><div class="line">    access_log off;</div><div class="line">    allow all;</div><div class="line">    #deny all;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>重启nginx<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"># /usr/local/nginx/sbin/nginx -s reload 可能或有问题，所以先停止当前nginx进程，然后在重启。</div><div class="line">/usr/local/nginx/sbin/nginx -s stop</div><div class="line">/usr/local/nginx/sbin/nginx</div></pre></td></tr></table></figure></p>
<h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>浏览器或者curl访问</p>
<p><a href="http://120.76.250.101/ngx_status" target="_blank" rel="external">http://120.76.250.101/ngx_status</a><br>或<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">curl 127.0.0.1/ngx_status</div><div class="line">Active connections: 1</div><div class="line">server accepts handled requests</div><div class="line"> 2 2 2</div><div class="line">Reading: 0 Writing: 1 Waiting: 0</div></pre></td></tr></table></figure></p>
<p>参数说明</p>
<table>
<thead>
<tr>
<th>参数</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>Active connections</td>
<td>活跃的连接数量</td>
</tr>
<tr>
<td>server accepts handled requests</td>
<td>2 2 2 表示总共处理了2个连接 , 成功创建2次握手, 总共处理了2个请求</td>
</tr>
<tr>
<td>reading</td>
<td>读取客户端的连接数.</td>
</tr>
<tr>
<td>writing</td>
<td>响应数据到客户端的数量</td>
</tr>
<tr>
<td>waiting</td>
<td>开启 keep-alive 的情况下,这个值等于 active – (reading+writing), 意思就是 Nginx 已经处理完正在等候下一次请求指令的驻留连接.</td>
</tr>
</tbody>
</table>
<p>over~</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Nginx可以通过stub_status模块来查看服务器的状态信息。&lt;/p&gt;
    
    </summary>
    
      <category term="Nginx" scheme="https://weizhimiao.github.io/categories/Nginx/"/>
    
    
      <category term="监控" scheme="https://weizhimiao.github.io/tags/%E7%9B%91%E6%8E%A7/"/>
    
  </entry>
  
  <entry>
    <title>PHP-FPM运行状态监控</title>
    <link href="https://weizhimiao.github.io/2016/09/27/PHP-FPM%E8%BF%90%E8%A1%8C%E7%8A%B6%E6%80%81%E7%9B%91%E6%8E%A7/"/>
    <id>https://weizhimiao.github.io/2016/09/27/PHP-FPM运行状态监控/</id>
    <published>2016-09-27T13:30:00.000Z</published>
    <updated>2016-09-27T09:29:18.000Z</updated>
    
    <content type="html"><![CDATA[<p>PHP-FPM内置了一个运行状态页，开启后便可查看PHP-FPM的详细运行状态，可以给我们在优化PHP-FPM时带来帮助。</p>
<a id="more"></a>
<h2 id="php-fpm配置"><a href="#php-fpm配置" class="headerlink" title="php-fpm配置"></a>php-fpm配置</h2><p>查看php-fpm配置文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ /usr/local/php56/sbin/php-fpm -t</div><div class="line">[27-Sep-2016 14:59:06] NOTICE: configuration file /usr/local/php56/etc/php-fpm.conf test is successful</div></pre></td></tr></table></figure></p>
<p>开启php-fpm的status配置<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">vi /usr/local/php56/etc/php-fpm.conf</div></pre></td></tr></table></figure></p>
<p>修改加入：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pm.status_path = /phpfpm_status</div></pre></td></tr></table></figure></p>
<p>配置文件中相关的说明<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div></pre></td><td class="code"><pre><div class="line">; The URI to view the FPM status page. If this value is not set, no URI will be</div><div class="line">; recognized as a status page. It shows the following informations:</div><div class="line">;   pool                 - the name of the pool;</div><div class="line">;   process manager      - static, dynamic or ondemand;</div><div class="line">;   start time           - the date and time FPM has started;</div><div class="line">;   start since          - number of seconds since FPM has started;</div><div class="line">;   accepted conn        - the number of request accepted by the pool;</div><div class="line">;   listen queue         - the number of request in the queue of pending</div><div class="line">;                          connections (see backlog in listen(2));</div><div class="line">;   max listen queue     - the maximum number of requests in the queue</div><div class="line">;                          of pending connections since FPM has started;</div><div class="line">;   listen queue len     - the size of the socket queue of pending connections;</div><div class="line">;   idle processes       - the number of idle processes;</div><div class="line">;   active processes     - the number of active processes;</div><div class="line">;   total processes      - the number of idle + active processes;</div><div class="line">;   max active processes - the maximum number of active processes since FPM</div><div class="line">;                          has started;</div><div class="line">;   max children reached - number of times, the process limit has been reached,</div><div class="line">;                          when pm tries to start more children (works only for</div><div class="line">;                          pm &apos;dynamic&apos; and &apos;ondemand&apos;);</div><div class="line">; Value are updated in real time.</div><div class="line">; Value are updated in real time.</div><div class="line">; Example output:</div><div class="line">;   pool:                 www</div><div class="line">;   process manager:      static</div><div class="line">;   start time:           01/Jul/2011:17:53:49 +0200</div><div class="line">;   start since:          62636</div><div class="line">;   accepted conn:        190460</div><div class="line">;   listen queue:         0</div><div class="line">;   max listen queue:     1</div><div class="line">;   listen queue len:     42</div><div class="line">;   idle processes:       4</div><div class="line">;   active processes:     11</div><div class="line">;   total processes:      15</div><div class="line">;   max active processes: 12</div><div class="line">;   max children reached: 0</div><div class="line">;</div><div class="line">; By default the status page output is formatted as text/plain. Passing either</div><div class="line">; &apos;html&apos;, &apos;xml&apos; or &apos;json&apos; in the query string will return the corresponding</div><div class="line">; output syntax. Example:</div><div class="line">;   http://www.foo.bar/status</div><div class="line">;   http://www.foo.bar/status?json</div><div class="line">;   http://www.foo.bar/status?html</div><div class="line">;   http://www.foo.bar/status?xml</div><div class="line">;</div><div class="line">; By default the status page only outputs short status. Passing &apos;full&apos; in the</div><div class="line">; query string will also return status for each pool process.</div><div class="line">; Example:</div><div class="line">;   http://www.foo.bar/status?full</div><div class="line">;   http://www.foo.bar/status?json&amp;full</div><div class="line">;   http://www.foo.bar/status?html&amp;full</div><div class="line">;   http://www.foo.bar/status?xml&amp;full</div><div class="line">; The Full status returns for each process:</div><div class="line">; The Full status returns for each process:</div><div class="line">;   pid                  - the PID of the process;</div><div class="line">;   state                - the state of the process (Idle, Running, ...);</div><div class="line">;   start time           - the date and time the process has started;</div><div class="line">;   start since          - the number of seconds since the process has started;</div><div class="line">;   requests             - the number of requests the process has served;</div><div class="line">;   request duration     - the duration in µs of the requests;</div><div class="line">;   request method       - the request method (GET, POST, ...);</div><div class="line">;   request URI          - the request URI with the query string;</div><div class="line">;   content length       - the content length of the request (only with POST);</div><div class="line">;   user                 - the user (PHP_AUTH_USER) (or &apos;-&apos; if not set);</div><div class="line">;   script               - the main script called (or &apos;-&apos; if not set);</div><div class="line">;   last request cpu     - the %cpu the last request consumed</div><div class="line">;                          it&apos;s always 0 if the process is not in Idle state</div><div class="line">;                          because CPU calculation is done when the request</div><div class="line">;                          processing has terminated;</div><div class="line">;   last request memory  - the max amount of memory the last request consumed</div><div class="line">;                          it&apos;s always 0 if the process is not in Idle state</div><div class="line">;                          because memory calculation is done when the request</div><div class="line">;                          processing has terminated;</div><div class="line">; If the process is in Idle state, then informations are related to the</div><div class="line">; last request the process has served. Otherwise informations are related to</div><div class="line">; the current request being served.</div><div class="line">; Example output:</div><div class="line">;   ************************</div><div class="line">;   pid:                  31330</div><div class="line">;   state:                Running</div><div class="line">;   start time:           01/Jul/2011:17:53:49 +0200</div><div class="line">;   start since:          63087</div><div class="line">;   requests:             12808</div><div class="line">;   request duration:     1250261</div><div class="line">;   request method:       GET</div><div class="line">;   request URI:          /test_mem.php?N=10000</div><div class="line">;   content length:       0</div><div class="line">;   user:                 -</div><div class="line">;   script:               /home/fat/web/docs/php/test_mem.php</div><div class="line">;   last request cpu:     0.00</div><div class="line">;   last request memory:  0</div><div class="line">;</div><div class="line">; Note: There is a real-time FPM status monitoring sample web page available</div><div class="line">;       It&apos;s available in: /usr/local/php56/share/php/fpm/status.html</div><div class="line">;</div><div class="line">; Note: The value must start with a leading slash (/). The value can be</div><div class="line">;       anything, but it may not be a good idea to use the .php extension or it</div><div class="line">;       may conflict with a real PHP file.</div><div class="line">; Default Value: not set</div><div class="line">pm.status_path = /phpfpm_status</div></pre></td></tr></table></figure></p>
<h2 id="重启PHP-FPM"><a href="#重启PHP-FPM" class="headerlink" title="重启PHP-FPM"></a>重启PHP-FPM</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">kill -USR2 `cat /usr/local/php56/var/run/php-fpm.pid`</div></pre></td></tr></table></figure>
<h2 id="配置nginx代理"><a href="#配置nginx代理" class="headerlink" title="配置nginx代理"></a>配置nginx代理</h2><p>查看nginx配置文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">/usr/local/nginx/sbin/nginx -t</div><div class="line">nginx: the configuration file /usr/local/nginx/conf/nginx.conf syntax is ok</div><div class="line">nginx: configuration file /usr/local/nginx/conf/nginx.conf test is successful</div></pre></td></tr></table></figure></p>
<p>修改配置<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">vi /usr/local/nginx/conf/nginx.conf</div></pre></td></tr></table></figure></p>
<p>加入：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">location /phpfpm_status &#123;</div><div class="line">        fastcgi_pass  127.0.0.1:9000;</div><div class="line">        include fastcgi_params;</div><div class="line">        fastcgi_param SCRIPT_FILENAME $fastcgi_script_name;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>重启nginx<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/usr/local/nginx/sbin/nginx -s reload</div></pre></td></tr></table></figure></p>
<h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>浏览器或者通过curl访问</p>
<p><a href="http://127.0.0.1/phpfpm_status" target="_blank" rel="external">http://you-server-ip/phpfpm_status</a></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">[root@iZwz9g8nzni5lj69dhlesoZ ~]# curl 127.0.0.1/phpfpm_status</div><div class="line">pool:                 www</div><div class="line">process manager:      dynamic</div><div class="line">start time:           27/Sep/2016:15:08:57 +0800</div><div class="line">start since:          385</div><div class="line">accepted conn:        3</div><div class="line">listen queue:         0</div><div class="line">max listen queue:     0</div><div class="line">listen queue len:     128</div><div class="line">idle processes:       1</div><div class="line">active processes:     1</div><div class="line">total processes:      2</div><div class="line">max active processes: 1</div><div class="line">max children reached: 0</div><div class="line">slow requests:        0</div></pre></td></tr></table></figure>
<ul>
<li>参数说明：</li>
</ul>
<table>
<thead>
<tr>
<th>参数</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>pool</td>
<td>fpm池子名称，大多数为www</td>
</tr>
<tr>
<td>process manager</td>
<td>进程管理方式,值：static, dynamic or ondemand. dynamic</td>
</tr>
<tr>
<td>start time</td>
<td>启动日期,如果reload了php-fpm，时间会更新</td>
</tr>
<tr>
<td>start since</td>
<td>运行时长</td>
</tr>
<tr>
<td>accepted conn</td>
<td>当前池子接受的请求数</td>
</tr>
<tr>
<td>listen queue</td>
<td>请求等待队列，如果这个值不为0，那么要增加FPM的进程数量</td>
</tr>
<tr>
<td>max listen queue</td>
<td>请求等待队列最高的数量</td>
</tr>
<tr>
<td>listen queue len</td>
<td>socket等待队列长度</td>
</tr>
<tr>
<td>idle processes</td>
<td>空闲进程数量</td>
</tr>
<tr>
<td>active processes</td>
<td>活跃进程数量</td>
</tr>
<tr>
<td>total processes</td>
<td>总进程数量</td>
</tr>
<tr>
<td>max active processes</td>
<td>最大的活跃进程数量（FPM启动开始算）</td>
</tr>
<tr>
<td>max children reached</td>
<td>大道进程最大数量限制的次数，如果这个数量不为0，那说明你的最大进程数量太小了，请改大一点。</td>
</tr>
<tr>
<td>slow requests</td>
<td>启用了php-fpm slow-log，缓慢请求的数量</td>
</tr>
</tbody>
</table>
<ul>
<li>php-fpm还提供不同格式的输入，方便我们查看和与其他监控系统对接。</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">http://www.foo.bar/status       #默认纯文本</div><div class="line">http://www.foo.bar/status?json  #json格式</div><div class="line">http://www.foo.bar/status?html  #html</div><div class="line">http://www.foo.bar/status?xml   #xml</div></pre></td></tr></table></figure>
<ul>
<li>通过增加full参数，php-fpm还提供查看所有进程的运行状况</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">http://www.foo.bar/status?full        #默认纯文本</div><div class="line">http://www.foo.bar/status?json&amp;full   #json格式</div><div class="line">http://www.foo.bar/status?html&amp;full   #html</div><div class="line">http://www.foo.bar/status?xml&amp;full    #xml</div></pre></td></tr></table></figure>
<p>示例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line">curl &apos;http://127.0.0.1/phpfpm_status?full&apos;</div><div class="line">pool:                 www</div><div class="line">process manager:      dynamic</div><div class="line">start time:           27/Sep/2016:15:08:57 +0800</div><div class="line">start since:          1546</div><div class="line">accepted conn:        14</div><div class="line">listen queue:         0</div><div class="line">max listen queue:     0</div><div class="line">listen queue len:     128</div><div class="line">idle processes:       1</div><div class="line">active processes:     1</div><div class="line">total processes:      2</div><div class="line">max active processes: 1</div><div class="line">max children reached: 0</div><div class="line">slow requests:        0</div><div class="line">************************</div><div class="line">pid:                  12132</div><div class="line">state:                Running</div><div class="line">start time:           27/Sep/2016:15:08:57 +0800</div><div class="line">start since:          1546</div><div class="line">requests:             7</div><div class="line">request duration:     117</div><div class="line">request method:       GET</div><div class="line">request URI:          /phpfpm_status?full</div><div class="line">content length:       0</div><div class="line">user:                 -</div><div class="line">script:               /phpfpm_status</div><div class="line">last request cpu:     0.00</div><div class="line">last request memory:  0</div><div class="line">************************</div><div class="line">pid:                  12133</div><div class="line">state:                Idle</div><div class="line">start time:           27/Sep/2016:15:08:57 +0800</div><div class="line">start since:          1546</div><div class="line">requests:             7</div><div class="line">request duration:     132</div><div class="line">request method:       GET</div><div class="line">request URI:          /phpfpm_status?html&amp;full</div><div class="line">content length:       0</div><div class="line">user:                 -</div><div class="line">script:               /phpfpm_status</div><div class="line">last request cpu:     0.00</div><div class="line">last request memory:  262144</div></pre></td></tr></table></figure></p>
<p>具体进程参数说明</p>
<table>
<thead>
<tr>
<th>参数</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>pid</td>
<td>进程号</td>
</tr>
<tr>
<td>state</td>
<td>状态（Idle - 闲置， Running - 运行， …）</td>
</tr>
<tr>
<td>start time</td>
<td>进程开始运行时间</td>
</tr>
<tr>
<td>start since</td>
<td>进程开始持续时间（单位：秒）</td>
</tr>
<tr>
<td>requests</td>
<td>进程已经处理的请求数</td>
</tr>
<tr>
<td>request duration</td>
<td>µs的请求数量</td>
</tr>
<tr>
<td>request method</td>
<td>请求方式（GET, POST, …）</td>
</tr>
<tr>
<td>request URI</td>
<td>请求URI</td>
</tr>
<tr>
<td>content length</td>
<td>请求内容长度（仅限POST请求）</td>
</tr>
<tr>
<td>user</td>
<td>PHP_AUTH_USER （’-‘， 表示没有限制）</td>
</tr>
<tr>
<td>script</td>
<td>请求文件</td>
</tr>
<tr>
<td>last request cpu</td>
<td>最后一次请求占用CPU百分比（如果进程不是处于 <code>Idle - 闲置</code> 状态，该值总是0，因为当请求处理终止时，CPU计算已经完成）</td>
</tr>
<tr>
<td>last request memory</td>
<td>最后一次请求占用内存（如果进程不是处于 <code>Idle - 闲置</code> 状态，该值总是0，因为当请求处理终止时，memory计算已经完成）</td>
</tr>
</tbody>
</table>
<p><strong>Tips:</strong><br>如果进程处于 idle 状态，所显示的信息就是基于最后一次请求给出的状态，否则就是基于本次请求的状态。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;PHP-FPM内置了一个运行状态页，开启后便可查看PHP-FPM的详细运行状态，可以给我们在优化PHP-FPM时带来帮助。&lt;/p&gt;
    
    </summary>
    
      <category term="PHP" scheme="https://weizhimiao.github.io/categories/PHP/"/>
    
    
      <category term="监控" scheme="https://weizhimiao.github.io/tags/%E7%9B%91%E6%8E%A7/"/>
    
      <category term="PHP-FPM" scheme="https://weizhimiao.github.io/tags/PHP-FPM/"/>
    
  </entry>
  
  <entry>
    <title>PHP扩展模块安装</title>
    <link href="https://weizhimiao.github.io/2016/09/26/PHP%E6%89%A9%E5%B1%95%E6%A8%A1%E5%9D%97%E5%AE%89%E8%A3%85/"/>
    <id>https://weizhimiao.github.io/2016/09/26/PHP扩展模块安装/</id>
    <published>2016-09-26T13:30:00.000Z</published>
    <updated>2016-09-26T13:14:08.000Z</updated>
    
    <content type="html"><![CDATA[<p>PHP编译安装之后，通常我们还需要根据我们的业务需求去安装各种扩展。通常我们可以通过php提供的phpize这个工具来为PHP动态地添加我们需要的模块。</p>
<a id="more"></a>
<h2 id="工具介绍"><a href="#工具介绍" class="headerlink" title="工具介绍"></a>工具介绍</h2><ul>
<li><p>phpize，是用来扩展php扩展模块的，通过phpize可以建立php的外挂模块。一般在我们安装PHP时已经一起安装了。位置一般在/path/to/php/bin/phpize。</p>
</li>
<li><p>autoconf，是用来生成自动配置软件源代码脚本（configure）的 工具.configure脚本能独立于autoconf运行,且在 运行的 过程中,不需要用户的干预.</p>
</li>
<li><p>m4，是 一个宏处理器.将输入拷贝到输出,同时将宏展开.宏可以是 内嵌的 ,也可以是 用户定义的 .除了可以展开宏,m4还有一些内建的 函数,用来引用文件,执行命令,整数运算,文本操作,循环等.m4既可以作为编译器的 前端,也可以单独作为一个宏处理器.</p>
</li>
</ul>
<h2 id="示例（为PHP添加mysqli扩展）"><a href="#示例（为PHP添加mysqli扩展）" class="headerlink" title="示例（为PHP添加mysqli扩展）"></a>示例（为PHP添加mysqli扩展）</h2><p>进入PHP源码包的ext/mysqli扩展目录<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">cd  ext/mysqli</div><div class="line">./configure --with-php-config=/usr/local/php56/bin/php-config --with-mysqli=/usr/local/mysql/bin/mysql_config</div><div class="line">make &amp;&amp; make install</div><div class="line">#</div><div class="line">#Installing shared extensions:     /usr/local/php56/lib/php/extensions/no-debug-non-zts-20131226/</div><div class="line">#Installing header files:           /usr/local/php56/include/php/</div></pre></td></tr></table></figure></p>
<p>查看模块是否编译成功<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">cd /usr/local/php56/lib/php/extensions/no-debug-non-zts-20131226/</div><div class="line">ll</div><div class="line">#-rwxr-xr-x 1 root root  756714 Sep 26 17:32 mysqli.so</div><div class="line">#-rwxr-xr-x 1 root root 1333912 Sep 24 23:31 opcache.a</div><div class="line">#-rwxr-xr-x 1 root root  618435 Sep 24 23:31 opcache.so</div></pre></td></tr></table></figure></p>
<p>将模块加载到php<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">vi /usr/local/php56/lib/php.ini</div><div class="line">#将下面这行写入到php.ini中</div><div class="line">extension=/usr/local/php56/lib/php/extensions/no-debug-non-zts-20131226/mysqli.so</div></pre></td></tr></table></figure></p>
<p>重启php-fpm<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">kill -USR2 `cat /usr/local/php56/var/run/php-fpm.pid`</div></pre></td></tr></table></figure></p>
<p>查看是否加载成功<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">php -m</div></pre></td></tr></table></figure></p>
<p>或浏览器访问index.php (包含phpinfo()函数)</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;PHP编译安装之后，通常我们还需要根据我们的业务需求去安装各种扩展。通常我们可以通过php提供的phpize这个工具来为PHP动态地添加我们需要的模块。&lt;/p&gt;
    
    </summary>
    
      <category term="PHP" scheme="https://weizhimiao.github.io/categories/PHP/"/>
    
    
      <category term="PHP扩展" scheme="https://weizhimiao.github.io/tags/PHP%E6%89%A9%E5%B1%95/"/>
    
      <category term="phpize" scheme="https://weizhimiao.github.io/tags/phpize/"/>
    
  </entry>
  
  <entry>
    <title>LNMP环境安装与配置</title>
    <link href="https://weizhimiao.github.io/2016/09/25/LNMP%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AE/"/>
    <id>https://weizhimiao.github.io/2016/09/25/LNMP环境安装与配置/</id>
    <published>2016-09-25T15:30:00.000Z</published>
    <updated>2016-09-26T13:16:26.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://n.sinaimg.cn/games/3ece443e/20160925/lnmp_log.png" alt="LNMP"><br><a id="more"></a></p>
<h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h2><p>OS：CentOS 7.2 64</p>
<p>MySQL：<a href="http://dev.mysql.com/downloads/mysql/" target="_blank" rel="external">mysql-5.7.15</a></p>
<p>Nginx：<a href="http://n.sinaimg.cn/games/3ece443e/20160925/nginx-1.11.4.tar.gz" target="_blank" rel="external">nginx-1.11.4</a></p>
<p>PHP：<a href="http://n.sinaimg.cn/games/3ece443e/20160925/php-5.6.25.tar.gz" target="_blank" rel="external">php-5.6.25</a></p>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>参考MySQL、Nginx、PHP的编译安装，分别安装 MySQL、Nginx、PHP到Linux。</p>
<h2 id="整合"><a href="#整合" class="headerlink" title="整合"></a>整合</h2><h3 id="启动-php-fpm"><a href="#启动-php-fpm" class="headerlink" title="启动 php-fpm"></a>启动 php-fpm</h3><p>新建用户和用户组，<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"># groupadd www-data</div><div class="line"># useradd -g www-data www-data</div></pre></td></tr></table></figure></p>
<p>需要修改 php-fpm.conf 配置文件，确保 php-fpm 模块使用 www-data 用户和 www-data 用户组的身份运行。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">vi /usr/local/php56/etc/php-fpm.conf</div><div class="line">#找到以下内容并修改：</div><div class="line">; Unix user/group of processes</div><div class="line">; Note: The user is mandatory. If the group is not set, the default user&apos;s group</div><div class="line">;       will be used.</div><div class="line">user = www-data</div><div class="line">group = www-data</div></pre></td></tr></table></figure>
<p>修改 pid 配置，以方便我们后面根据pid管理php-fpm<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">[global]</div><div class="line">; Pid file</div><div class="line">; Note: the default prefix is /usr/local/php56/var</div><div class="line">; Default Value: none</div><div class="line">pid = run/php-fpm.pid</div></pre></td></tr></table></figure></p>
<p>PHP-FPM运行时，将会在/usr/local/php56/var/run/下生成 php-fpm.pid 文件。</p>
<p>然后启动 php-fpm 服务：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/usr/local/php56/sbin/php-fpm</div></pre></td></tr></table></figure></p>
<p>查看是否启动成功<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">ps aux | grep php</div><div class="line">root     18858  0.0  0.1 148164  3208 ?        Ss   12:38   0:00 php-fpm: master process (/usr/local/php56/etc/php-fpm.conf)</div><div class="line">www-data 18859  0.0  0.1 148164  2856 ?        S    12:38   0:00 php-fpm: pool www</div><div class="line">www-data 18860  0.0  0.1 148164  2856 ?        S    12:38   0:00 php-fpm: pool www</div><div class="line">root     18862  0.0  0.0 112664   972 pts/1    S+   12:38   0:00 grep --color=auto php</div></pre></td></tr></table></figure></p>
<p><strong>注</strong> 需要着重提醒的是，如果文件不存在，则阻止 Nginx 将请求发送到后端的 PHP-FPM 模块， 以避免遭受恶意脚本注入的攻击。<br>将 php.ini 文件中的配置项 cgi.fix_pathinfo 设置为 0 。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">vi /usr/local/php56/lib/php.ini</div><div class="line"></div><div class="line">cgi.fix_pathinfo=0</div></pre></td></tr></table></figure>
<h3 id="PHP-FPM-重要配置"><a href="#PHP-FPM-重要配置" class="headerlink" title="PHP-FPM 重要配置"></a>PHP-FPM 重要配置</h3><p>php-fpm.conf重要参数详解</p>
<ul>
<li><p>pid = run/php-fpm.pid</p>
<blockquote>
<p>pid设置，默认在安装目录中的var/run/php-fpm.pid，建议开启</p>
</blockquote>
</li>
<li><p>error_log = log/php-fpm.log</p>
<blockquote>
<p>错误日志，默认在安装目录中的var/log/php-fpm.log</p>
</blockquote>
</li>
<li><p>log_level = notice</p>
<blockquote>
<p>错误级别. 可用级别为: alert（必须立即处理）, error（错误情况）, warning（警告情况）, notice（一般重要信息）, debug（调试信息）. 默认: notice.</p>
</blockquote>
</li>
<li><p>emergency_restart_threshold = 60</p>
</li>
<li><p>emergency_restart_interval = 60s</p>
<blockquote>
<p>表示在emergency_restart_interval所设值内出现SIGSEGV或者SIGBUS错误的php-cgi进程数如果超过 emergency_restart_threshold个，php-fpm就会优雅重启。这两个选项一般保持默认值。</p>
</blockquote>
</li>
<li><p>process_control_timeout = 0</p>
<blockquote>
<p>设置子进程接受主进程复用信号的超时时间. 可用单位: s(秒), m(分), h(小时), 或者 d(天) 默认单位: s(秒). 默认值: 0.</p>
</blockquote>
</li>
<li><p>daemonize = yes</p>
<blockquote>
<p>后台执行fpm,默认值为yes，如果为了调试可以改为no。在FPM中，可以使用不同的设置来运行多个进程池。 这些设置可以针对每个进程池单独设置。</p>
</blockquote>
</li>
<li><p>listen = 127.0.0.1:9000</p>
<blockquote>
<p>fpm监听端口，即nginx中php处理的地址，一般默认值即可。可用格式为: ‘ip:port’, ‘port’, ‘/path/to/unix/socket’. 每个进程池都需要设置.</p>
</blockquote>
</li>
<li><p>listen.backlog = -1</p>
<blockquote>
<p>backlog数，-1表示无限制，由操作系统决定，此行注释掉就行。</p>
</blockquote>
</li>
<li><p>listen.allowed_clients = 127.0.0.1</p>
<blockquote>
<p>允许访问FastCGI进程的IP，设置any为不限制IP，如果要设置其他主机的nginx也能访问这台FPM进程，listen处要设置成本地可被访问的IP。默认值是any。每个地址是用逗号分隔. 如果没有设置或者为空，则允许任何服务器请求连接</p>
</blockquote>
</li>
<li><p>listen.owner = www</p>
</li>
<li>listen.group = www</li>
<li><p>listen.mode = 0666</p>
<blockquote>
<p>unix socket设置选项，如果使用tcp方式访问，这里注释即可。</p>
</blockquote>
</li>
<li><p>user = www</p>
</li>
<li><p>group = www</p>
<blockquote>
<p>启动进程的帐户和组</p>
</blockquote>
</li>
<li><p>pm = dynamic #对于专用服务器，pm可以设置为static。</p>
<blockquote>
<p>如何控制子进程，选项有static和dynamic。如果选择static，则由pm.max_children指定固定的子进程数。如果选择dynamic，则由下开参数决定：</p>
</blockquote>
</li>
<li><p>pm.max_children #</p>
<blockquote>
<p>子进程最大数</p>
</blockquote>
</li>
<li><p>pm.start_servers #</p>
<blockquote>
<p>启动时的进程数</p>
</blockquote>
</li>
<li><p>pm.min_spare_servers #</p>
<blockquote>
<p>保证空闲进程数最小值，如果空闲进程小于此值，则创建新的子进程</p>
</blockquote>
</li>
<li><p>pm.max_spare_servers #</p>
<blockquote>
<p>保证空闲进程数最大值，如果空闲进程大于此值，此进行清理</p>
</blockquote>
</li>
<li><p>pm.max_requests = 1000</p>
<blockquote>
<p>设置每个子进程重生之前服务的请求数. 对于可能存在内存泄漏的第三方模块来说是非常有用的. 如果设置为 ‘0’ 则一直接受请求. 等同于 PHP_FCGI_MAX_REQUESTS 环境变量. 默认值: 0.</p>
</blockquote>
</li>
<li><p>pm.status_path = /status</p>
<blockquote>
<p>FPM状态页面的网址. 如果没有设置, 则无法访问状态页面. 默认值: none. munin监控会使用到</p>
</blockquote>
</li>
<li><p>ping.path = /ping</p>
<blockquote>
<p>FPM监控页面的ping网址. 如果没有设置, 则无法访问ping页面. 该页面用于外部检测FPM是否存活并且可以响应请求. 请注意必须以斜线开头 (/)。</p>
</blockquote>
</li>
<li><p>ping.response = pong</p>
<blockquote>
<p>用于定义ping请求的返回相应. 返回为 HTTP 200 的 text/plain 格式文本. 默认值: pong.</p>
</blockquote>
</li>
<li><p>request_terminate_timeout = 0</p>
<blockquote>
<p>设置单个请求的超时中止时间. 该选项可能会对php.ini设置中的’max_execution_time’因为某些特殊原因没有中止运行的脚本有用. 设置为 ‘0’ 表示 ‘Off’.当经常出现502错误时可以尝试更改此选项。</p>
</blockquote>
</li>
<li><p>request_slowlog_timeout = 10s</p>
<blockquote>
<p>当一个请求该设置的超时时间后，就会将对应的PHP调用堆栈信息完整写入到慢日志中. 设置为 ‘0’ 表示 ‘Off’</p>
</blockquote>
</li>
<li><p>slowlog = log/$pool.log.slow</p>
<blockquote>
<p>慢请求的记录日志,配合request_slowlog_timeout使用</p>
</blockquote>
</li>
<li><p>rlimit_files = 1024</p>
<blockquote>
<p>设置文件打开描述符的rlimit限制. 默认值: 系统定义值默认可打开句柄是1024，可使用 ulimit -n查看，ulimit -n 2048修改。</p>
</blockquote>
</li>
<li><p>rlimit_core = 0</p>
<blockquote>
<p>设置核心rlimit最大限制值. 可用值: ‘unlimited’ 、0或者正整数. 默认值: 系统定义值.</p>
</blockquote>
</li>
<li><p>chroot =</p>
<blockquote>
<p>启动时的Chroot目录. 所定义的目录需要是绝对路径. 如果没有设置, 则chroot不被使用.</p>
</blockquote>
</li>
<li><p>chdir =</p>
<blockquote>
<p>设置启动目录，启动时会自动Chdir到该目录. 所定义的目录需要是绝对路径. 默认值: 当前目录，或者/目录（chroot时）</p>
</blockquote>
</li>
<li><p>catch_workers_output = yes</p>
<blockquote>
<p>重定向运行过程中的stdout和stderr到主要的错误日志文件中. 如果没有设置, stdout 和 stderr 将会根据FastCGI的规则被重定向到 /dev/null . 默认值: 空.</p>
</blockquote>
</li>
</ul>
<p><strong>Tips</strong> 配置完成之后可以通过 php-fpm -t 来检测配置是否基本正确。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"># /usr/local/php56/sbin/php-fpm -t</div><div class="line">[25-Sep-2016 12:58:14] NOTICE: configuration file /usr/local/php56/etc/php-fpm.conf test is successful</div></pre></td></tr></table></figure></p>
<h3 id="php-fpm管理"><a href="#php-fpm管理" class="headerlink" title="php-fpm管理"></a>php-fpm管理</h3><p>测试php-fpm配置<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">/usr/local/php/sbin/php-fpm -t</div><div class="line">/usr/local/php/sbin/php-fpm -c /usr/local/php/etc/php.ini -y /usr/local/php/etc/php-fpm.conf -t</div></pre></td></tr></table></figure></p>
<p>启动php-fpm<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">/usr/local/php/sbin/php-fpm</div><div class="line">/usr/local/php/sbin/php-fpm -c /usr/local/php/etc/php.ini -y /usr/local/php/etc/php-fpm.conf</div></pre></td></tr></table></figure></p>
<p>关闭php-fpm<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">kill -INT `cat /usr/local/php/var/run/php-fpm.pid`</div></pre></td></tr></table></figure></p>
<p>重启php-fpm<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">kill -USR2 `cat /usr/local/php/var/run/php-fpm.pid`</div></pre></td></tr></table></figure></p>
<h2 id="配置-Nginx-使其支持-PHP-应用："><a href="#配置-Nginx-使其支持-PHP-应用：" class="headerlink" title="配置 Nginx 使其支持 PHP 应用："></a>配置 Nginx 使其支持 PHP 应用：</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">vim /usr/local/nginx/conf/nginx.conf</div></pre></td></tr></table></figure>
<p>修改默认的 location 块，使其支持 .php 文件：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">location / &#123;</div><div class="line">    root   html;</div><div class="line">    index  index.php index.html index.htm;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>下一步配置来保证对于 .php 文件的请求将被传送到后端的 PHP-FPM 模块， 取消默认的 PHP 配置块的注释，并修改为下面的内容：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">location ~* \.php$ &#123;</div><div class="line">    fastcgi_index   index.php;</div><div class="line">    fastcgi_pass    127.0.0.1:9000;</div><div class="line">    include         fastcgi_params;</div><div class="line">    fastcgi_param   SCRIPT_FILENAME    $document_root$fastcgi_script_name;</div><div class="line">    fastcgi_param   SCRIPT_NAME        $fastcgi_script_name;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>重启 Nginx。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"># /usr/local/nginx/sbin/nginx -t</div><div class="line">nginx: the configuration file /usr/local/nginx/conf/nginx.conf syntax is ok</div><div class="line">nginx: configuration file /usr/local/nginx/conf/nginx.conf test is successful</div><div class="line">/usr/local/nginx/sbin/nginx -s reload</div></pre></td></tr></table></figure></p>
<p>创建测试文件。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">echo &quot;&lt;?php  phpinfo();?&gt;&quot; &gt; /usr/local/nginx/html/index.php</div></pre></td></tr></table></figure></p>
<p>打开浏览器，访问 <a href="http://ip，将会显示" target="_blank" rel="external">http://ip，将会显示</a> phpinfo() 。</p>
<h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>创建测试文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">vi mysql_conn_test.php</div></pre></td></tr></table></figure></p>
<p>输入<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line">$conn = mysql_connect(<span class="string">"localhost"</span>, <span class="string">"root"</span>, <span class="string">"123456"</span>) <span class="keyword">or</span> <span class="keyword">die</span>(<span class="string">"connect failed"</span> . mysql_error());  </div><div class="line">$sql = sprintf(<span class="string">"SHOW DATABASES;"</span>);  </div><div class="line">$result = mysql_query($sql, $conn);  </div><div class="line"><span class="keyword">while</span> ($row=mysql_fetch_array($result, MYSQL_ASSOC))&#123;</div><div class="line">  print_r($row);</div><div class="line">&#125;</div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure></p>
<p>结果如下，则说明，连接测试成功。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Array ( [Database] =&gt; information_schema ) Array ( [Database] =&gt; mysql ) Array ( [Database] =&gt; performance_schema ) Array ( [Database] =&gt; sys )</div></pre></td></tr></table></figure></p>
<p>至此，LNMP环境算是基本配置成功。</p>
<p>over~</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://n.sinaimg.cn/games/3ece443e/20160925/lnmp_log.png&quot; alt=&quot;LNMP&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="PHP" scheme="https://weizhimiao.github.io/categories/PHP/"/>
    
    
      <category term="LNMP" scheme="https://weizhimiao.github.io/tags/LNMP/"/>
    
  </entry>
  
  <entry>
    <title>PHP安装</title>
    <link href="https://weizhimiao.github.io/2016/09/25/PHP%E5%AE%89%E8%A3%85/"/>
    <id>https://weizhimiao.github.io/2016/09/25/PHP安装/</id>
    <published>2016-09-25T14:30:00.000Z</published>
    <updated>2016-09-25T10:43:48.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://n.sinaimg.cn/games/3ece443e/20160925/php_log.png" alt="php"></p>
<a id="more"></a>
<h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><p>OS：CentOS 7.2 64</p>
<p>PHP：<a href="http://n.sinaimg.cn/games/3ece443e/20160925/php-5.6.25.tar.gz" target="_blank" rel="external">php-5.6.25</a></p>
<h2 id="编译前准备"><a href="#编译前准备" class="headerlink" title="编译前准备"></a>编译前准备</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">yum -y install libxml2 libxml2-devel</div></pre></td></tr></table></figure>
<p>libxml2,是个C语言的XML程式库，能简单方便的提供对XML文件的各种操作，并且支持XPATH查询，及部分的支持XSLT转换等功能。</p>
<h2 id="编译安装"><a href="#编译安装" class="headerlink" title="编译安装"></a>编译安装</h2><p>解压源码包<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">tar zxvf php-5.6.25.tar.gz</div></pre></td></tr></table></figure></p>
<p>进入源码包目录<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cd php-5.6.25</div></pre></td></tr></table></figure></p>
<p>编译、安装<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">./configure --prefix=/usr/local/php56 --enable-fpm --with-mysql</div><div class="line">make &amp;&amp; make install</div><div class="line">Installing shared extensions:     /usr/local/php56/lib/php/extensions/no-debug-non-zts-20131226/</div><div class="line">Installing PHP CLI binary:        /usr/local/php56/bin/</div><div class="line">Installing PHP CLI man page:      /usr/local/php56/php/man/man1/</div><div class="line">Installing PHP FPM binary:        /usr/local/php56/sbin/</div><div class="line">Installing PHP FPM config:        /usr/local/php56/etc/</div><div class="line">Installing PHP FPM man page:      /usr/local/php56/php/man/man8/</div><div class="line">Installing PHP FPM status page:   /usr/local/php56/php/php/fpm/</div><div class="line">Installing PHP CGI binary:        /usr/local/php56/bin/</div><div class="line">Installing PHP CGI man page:      /usr/local/php56/php/man/man1/</div><div class="line">Installing build environment:     /usr/local/php56/lib/php/build/</div><div class="line">Installing header files:           /usr/local/php56/include/php/</div><div class="line">Installing helper programs:       /usr/local/php56/bin/</div><div class="line">  program: phpize</div><div class="line">  program: php-config</div><div class="line">Installing man pages:             /usr/local/php56/php/man/man1/</div><div class="line">  page: phpize.1</div><div class="line">  page: php-config.1</div><div class="line">Installing PEAR environment:      /usr/local/php56/lib/php/</div><div class="line">[PEAR] Archive_Tar    - installed: 1.4.0</div><div class="line">[PEAR] Console_Getopt - installed: 1.4.1</div><div class="line">[PEAR] Structures_Graph- installed: 1.1.1</div><div class="line">[PEAR] XML_Util       - installed: 1.3.0</div><div class="line">[PEAR] PEAR           - installed: 1.10.1</div><div class="line">Wrote PEAR system config file at: /usr/local/php56/etc/pear.conf</div><div class="line">You may want to add: /usr/local/php56/lib/php to your php.ini include_path</div><div class="line">/root/php-5.6.25/build/shtool install -c ext/phar/phar.phar /usr/local/php56/bin</div><div class="line">ln -s -f phar.phar /usr/local/php56/bin/phar</div><div class="line">Installing PDO headers:           /usr/local/php56/include/php/ext/pdo/</div></pre></td></tr></table></figure></p>
<p>生成配置文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">cp php.ini-development /usr/local/php56/lib/php.ini</div><div class="line">cp /usr/local/php56/etc/php-fpm.conf.default /usr/local/php56/etc/php-fpm.conf</div></pre></td></tr></table></figure></p>
<p>查看配置文件是否已生效。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ /usr/local/php56/bin/php -r &quot;phpinfo();&quot;</div><div class="line">如果看到以下输出，则表示配置文件加载成功。</div><div class="line">Configuration File (php.ini) Path =&gt; /usr/local/php56/lib</div><div class="line">Loaded Configuration File =&gt; /usr/local/php56/lib/php.ini</div></pre></td></tr></table></figure></p>
<p>将php加入到PATH中<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">vi ~/.bash_profile</div><div class="line">#在export PATH前一行插入</div><div class="line">PATH=$PATH:/usr/local/php56/bin:/usr/local/php56/lib</div></pre></td></tr></table></figure></p>
<p>重新加载环境变量<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">source /root/.bash_profile</div></pre></td></tr></table></figure></p>
<h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">[root@iZwz97v8o84q253plfkxvfZ php56]# php -version</div><div class="line">PHP 5.6.25 (cli) (built: Sep 24 2016 23:30:43)</div><div class="line">Copyright (c) 1997-2016 The PHP Group</div><div class="line">Zend Engine v2.6.0, Copyright (c) 1998-2016 Zend Technologies</div></pre></td></tr></table></figure>
<p><strong>Tips:</strong><br>如何确定PHP当前使用的配置文件的位置？</p>
<p>php：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ /usr/local/php56/bin/php -r &quot;phpinfo();&quot;</div><div class="line">如果看到以下输出，则表示配置文件加载成功。</div><div class="line">Configuration File (php.ini) Path =&gt; /usr/local/php56/lib</div><div class="line">Loaded Configuration File =&gt; /usr/local/php56/lib/php.ini</div></pre></td></tr></table></figure></p>
<p>php-fpm:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">/usr/local/php56/sbin/php-fpm -t</div><div class="line">[25-Sep-2016 18:01:40] NOTICE: configuration file /usr/local/php56/etc/php-fpm.conf test is successful</div></pre></td></tr></table></figure></p>
<p>over~</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://n.sinaimg.cn/games/3ece443e/20160925/php_log.png&quot; alt=&quot;php&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="PHP" scheme="https://weizhimiao.github.io/categories/PHP/"/>
    
    
      <category term="PHP-FPM" scheme="https://weizhimiao.github.io/tags/PHP-FPM/"/>
    
  </entry>
  
  <entry>
    <title>Nginx安装</title>
    <link href="https://weizhimiao.github.io/2016/09/25/nginx%E5%AE%89%E8%A3%85/"/>
    <id>https://weizhimiao.github.io/2016/09/25/nginx安装/</id>
    <published>2016-09-25T13:30:00.000Z</published>
    <updated>2016-09-25T10:46:05.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://n.sinaimg.cn/games/3ece443e/20160925/nginx_log.png" alt="nginx"></p>
<a id="more"></a>
<h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><p>OS：CentOS 7.2 64</p>
<p>Nginx：<a href="http://n.sinaimg.cn/games/3ece443e/20160925/nginx-1.11.4.tar.gz" target="_blank" rel="external">nginx-1.11.4</a></p>
<h2 id="编译环境准备"><a href="#编译环境准备" class="headerlink" title="编译环境准备"></a>编译环境准备</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">yum -y install gcc pcre pcre-devel zlib zlib-devel openssl openssl-devel</div></pre></td></tr></table></figure>
<blockquote>
<p>依赖工具说明:<br>gcc 编译器<br>pcre 正则表达式工具<br>zlib 传输内容压缩<br>openssl Https支持</p>
</blockquote>
<h2 id="编译安装"><a href="#编译安装" class="headerlink" title="编译安装"></a>编译安装</h2><p>解压源码包<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">tar -zxvf nginx-1.11.4.tar.gz</div></pre></td></tr></table></figure></p>
<p>进入源码包目录<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cd nginx-1.11.4</div></pre></td></tr></table></figure></p>
<p>执行配置命令<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">./configure --prefix=/usr/local</div><div class="line">Configuration summary</div><div class="line">  + using PCRE library: /usr/local/pcre</div><div class="line">  + OpenSSL library is not used</div><div class="line">  + using system zlib library</div><div class="line"></div><div class="line">  nginx path prefix: &quot;/usr/local/nginx&quot;</div><div class="line">  nginx binary file: &quot;/usr/local/nginx/sbin/nginx&quot;</div><div class="line">  nginx modules path: &quot;/usr/local/nginx/modules&quot;</div><div class="line">  nginx configuration prefix: &quot;/usr/local/nginx/conf&quot;</div><div class="line">  nginx configuration file: &quot;/usr/local/nginx/conf/nginx.conf&quot;</div><div class="line">  nginx pid file: &quot;/usr/local/nginx/logs/nginx.pid&quot;</div><div class="line">  nginx error log file: &quot;/usr/local/nginx/logs/error.log&quot;</div><div class="line">  nginx http access log file: &quot;/usr/local/nginx/logs/access.log&quot;</div><div class="line">  nginx http client request body temporary files: &quot;client_body_temp&quot;</div><div class="line">  nginx http proxy temporary files: &quot;proxy_temp&quot;</div><div class="line">  nginx http fastcgi temporary files: &quot;fastcgi_temp&quot;</div><div class="line">  nginx http uwsgi temporary files: &quot;uwsgi_temp&quot;</div><div class="line">  nginx http scgi temporary files: &quot;scgi_temp&quot;</div></pre></td></tr></table></figure></p>
<p>执行编译安装<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">make &amp;&amp; make install</div></pre></td></tr></table></figure></p>
<h2 id="管理"><a href="#管理" class="headerlink" title="管理"></a>管理</h2><h3 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/usr/local/nginx/sbin/nginx</div></pre></td></tr></table></figure>
<h3 id="停止"><a href="#停止" class="headerlink" title="停止"></a>停止</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/usr/local/nginx/sbin/nginx -s stop</div></pre></td></tr></table></figure>
<h3 id="重启"><a href="#重启" class="headerlink" title="重启"></a>重启</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/usr/local/nginx/sbin/nginx -s reload</div></pre></td></tr></table></figure>
<h3 id="查看Nginx进程状态"><a href="#查看Nginx进程状态" class="headerlink" title="查看Nginx进程状态"></a>查看Nginx进程状态</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ps aux |grep nginx</div></pre></td></tr></table></figure>
<p>结果形如<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">root     24367  0.0  0.0  20472   604 ?        Ss   22:52   0:00 nginx: master process /usr/local/nginx/sbin/nginx</div><div class="line">nobody   24368  0.0  0.0  20900  1320 ?        S    22:52   0:00 nginx: worker process</div><div class="line">root     24370  0.0  0.0 112664   976 pts/0    S+   22:52   0:00 grep --color=auto nginx</div></pre></td></tr></table></figure></p>
<blockquote>
<p>master proccess为主进程 守护进程<br>worker proccess为工作进程, 用于响应请求</p>
</blockquote>
<h3 id="设置开机自动启动"><a href="#设置开机自动启动" class="headerlink" title="设置开机自动启动"></a>设置开机自动启动</h3><p>编辑文件 /etc/rc.d/rc.local<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">echo &quot;/usr/local/nginx/sbin/nginx&quot; &gt;&gt; /etc/rc.d/rc.local</div></pre></td></tr></table></figure></p>
<h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>启动nginx，在浏览器通过IP地址访问服务器。查看是否有响应。</p>
<p>~over</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://n.sinaimg.cn/games/3ece443e/20160925/nginx_log.png&quot; alt=&quot;nginx&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Nginx" scheme="https://weizhimiao.github.io/categories/Nginx/"/>
    
    
      <category term="Nginx安装" scheme="https://weizhimiao.github.io/tags/Nginx%E5%AE%89%E8%A3%85/"/>
    
  </entry>
  
  <entry>
    <title>MySQL编译安装</title>
    <link href="https://weizhimiao.github.io/2016/09/25/MySQL%E5%AE%89%E8%A3%85%E7%BC%96%E8%AF%91/"/>
    <id>https://weizhimiao.github.io/2016/09/25/MySQL安装编译/</id>
    <published>2016-09-25T12:30:00.000Z</published>
    <updated>2016-09-25T10:46:14.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://n.sinaimg.cn/games/3ece443e/20160925/mysql_log.png" alt="MySQL"><br><a id="more"></a></p>
<h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><p>OS：CentOS 7.2 64</p>
<p>MySQL：<a href="http://dev.mysql.com/downloads/mysql/" target="_blank" rel="external">mysql-5.7.15</a></p>
<h2 id="编译环境准备"><a href="#编译环境准备" class="headerlink" title="编译环境准备"></a>编译环境准备</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"># yum -y install make gcc-c++ cmake bison-devel ncurses-devel</div></pre></td></tr></table></figure>
<blockquote>
<p>make，Linux下非常重要的编译工具，最主要也是最基本的功能就是通过makefile文件来描述源程序之间的相互关系并自动维护编译工作。<br>gcc-c++，C++ 编译器（gcc，C编译器）<br>cmake，一个跨平台的编译自动配置工具，（作用生成makefile 文件）<br>bison-devel 一个语法分析器生成器<br>ncurses-devel，Ncurses介绍摘要:Ncurses是一个能提供功能键定义(快捷键),屏幕绘制以及基于文本终端.</p>
</blockquote>
<h3 id="ncurses"><a href="#ncurses" class="headerlink" title="ncurses"></a>ncurses</h3><p>Ncurses 提供字符终端处理库，包括面板和菜单。它提供了一套控制光标，建立窗口，改变前景背景颜色以及处理鼠标操作的函数。使用户在字符终端下编写应用程序时绕过了那些恼人的底层机制。简而言之，他是一个可以使应用程序直接控制终端屏幕显示的函数库。<br>1、yum安装<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">yum -y install ncurses-devel</div></pre></td></tr></table></figure></p>
<p>注：如果报错，包找不到，是<em>通配符没有识别，给文件名加双引号  “ncurses</em>”</p>
<p>2、源代码编译:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">下载解压</div><div class="line">cd ncurses-5.9</div><div class="line">./configure --with-shared --without-debug --without-ada --enable-overwrite</div><div class="line">make</div><div class="line">make install</div></pre></td></tr></table></figure></p>
<ul>
<li>若不安装ncurses编译MySQL时会报错</li>
<li>–without-ada 参数为设定不编译为ada绑定，因进入chroot环境不能使用ada ；–enable-overwrite参数为定义把头文件安装到/tools/include下而不是/tools/include/ncurses目录</li>
<li>–with-shared 生成共享库</li>
</ul>
<h3 id="安装cmake和bison"><a href="#安装cmake和bison" class="headerlink" title="安装cmake和bison"></a>安装cmake和bison</h3><p>mysql在5.5以后，不再使用./configure工具，进行编译安装。而使用cmake工具替代了./configure工具。cmake的具体用法参考文档cmake说明。</p>
<p>bison是一个自由软件，用于自动生成语法分析器程序，可用于所有常见的操作系统<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">yum -y install cmake</div><div class="line">yum -y install bison</div></pre></td></tr></table></figure></p>
<h2 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h2><p>解压源码包<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">tar -zxvf mysql-5.7.15.tar.gz</div></pre></td></tr></table></figure></p>
<p>进入源码包目录<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cd mysql-5.7.15</div></pre></td></tr></table></figure></p>
<p>编译<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">cmake  \</div><div class="line">-DDEFAULT_CHARSET=utf8 \</div><div class="line">-DDEFAULT_COLLATION=utf8_general_ci \</div><div class="line">-DWITH_INNOBASE_STORAGE_ENGINE=1 \</div><div class="line">-DENABLED_LOCAL_INFILE=1 \</div><div class="line">-DWITH_BOOST=/usr/local/boost</div></pre></td></tr></table></figure></p>
<p>Boost，是为C++语言标准库提供扩展的一些C++程序库的总称，，由Boost社区组织开发、维护。<br>最后一行配置，是配置boost库的，如果没有boost包，编译会报错。<br>如果之前没有安装过，可以单独安装，也可在mysql安装的时候直接下载安装，这样的话，最后一行配置修改如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">-DDOWNLOAD_BOOST=1 -DWITH_BOOST=/usr/local/boost #直接下载并安装</div></pre></td></tr></table></figure></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">make &amp;&amp; make install</div></pre></td></tr></table></figure>
<h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><h3 id="创建MySQL运行用户和用户组"><a href="#创建MySQL运行用户和用户组" class="headerlink" title="创建MySQL运行用户和用户组"></a>创建MySQL运行用户和用户组</h3><p>查看mysql用户及用户组<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">cat /etc/passwd     查看用户列表</div><div class="line">cat /etc/group      查看用户组列表</div></pre></td></tr></table></figure></p>
<p>如果没有就创建<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">groupadd mysql</div><div class="line">useradd -g mysql mysql</div></pre></td></tr></table></figure></p>
<p>修改/usr/local/mysql权限<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">chown -R mysql:mysql /usr/local/mysql</div></pre></td></tr></table></figure></p>
<p>初始化配置<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">cd /usr/local/mysql</div><div class="line">cp support-files/my-default.cnf /etc/my.cnf</div></pre></td></tr></table></figure></p>
<p>注：在启动MySQL服务时，会按照一定次序搜索my.cnf，先在/etc目录下找，找不到则会在安装目录下面找，在本例中就是 /usr/local/mysql/my.cnf，这是新版MySQL的配置文件的默认位置。</p>
<h3 id="初始化数据库并生成初始密码"><a href="#初始化数据库并生成初始密码" class="headerlink" title="初始化数据库并生成初始密码"></a>初始化数据库并生成初始密码</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/usr/local/mysql/bin/mysqld --initialize --user=mysql</div></pre></td></tr></table></figure>
<p>会生成一个初始密码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"># A temporary password is generated for root@localhost: -qeFRRlHV0jf</div></pre></td></tr></table></figure></p>
<p>密码：-qeFRRlHV0jf</p>
<h3 id="设置环境变量（使得mysql服务可以全局访问）"><a href="#设置环境变量（使得mysql服务可以全局访问）" class="headerlink" title="设置环境变量（使得mysql服务可以全局访问）"></a>设置环境变量（使得mysql服务可以全局访问）</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">vi ~/.bash_profile</div></pre></td></tr></table></figure>
<p>在修改PATH=$PATH:$HOME/bin为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">PATH=$PATH:$HOME/bin:/usr/local/mysql/bin:/usr/local/mysql/lib</div></pre></td></tr></table></figure></p>
<p>重新加载环境变量<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[root@root ~]# source /root/.bash_profile</div></pre></td></tr></table></figure></p>
<h2 id="管理"><a href="#管理" class="headerlink" title="管理"></a>管理</h2><h3 id="启动mysql"><a href="#启动mysql" class="headerlink" title="启动mysql"></a>启动mysql</h3><p>方法一：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"># 将mysql的启动服务添加到系统服务中</div><div class="line"># cp support-files/mysql.server /etc/init.d/mysql</div><div class="line"># service mysql start</div></pre></td></tr></table></figure></p>
<p>方法二：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/usr/local/mysql/bin/mysqld_safe --user=mysql &amp;</div></pre></td></tr></table></figure></p>
<h3 id="设置开机自启动"><a href="#设置开机自启动" class="headerlink" title="设置开机自启动"></a>设置开机自启动</h3><p>方法一：</p>
<p>通过chkconfig实现。</p>
<p>方法二：直接修改 rc.local 文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">echo &quot;/usr/local/mysql/bin/mysqld_safe --user=mysql &amp;&quot; &gt;&gt; /etc/rc.local</div></pre></td></tr></table></figure></p>
<h3 id="修改密码"><a href="#修改密码" class="headerlink" title="修改密码"></a>修改密码</h3><p>登录并修改初始密码（不修改密码不让你操作，就是这么任性）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"># mysql -uroot -hlocalhost -p</div><div class="line">Enter password:-qeFRRlHV0jf（初始密码）</div><div class="line"># mysql&gt; SET PASSWORD FOR &apos;root&apos;@&apos;localhost&apos; = PASSWORD(&apos;xxxxxxx&apos;);</div></pre></td></tr></table></figure></p>
<p>重新登录<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">#  mysql&gt; exit</div><div class="line">#  mysql -u root -p</div><div class="line">Enter password:</div></pre></td></tr></table></figure></p>
<p>能够登录进去，则说明MySQL安装成功。over~</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://n.sinaimg.cn/games/3ece443e/20160925/mysql_log.png&quot; alt=&quot;MySQL&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="MySQL" scheme="https://weizhimiao.github.io/categories/MySQL/"/>
    
    
  </entry>
  
  <entry>
    <title>GIT使用小结</title>
    <link href="https://weizhimiao.github.io/2016/09/21/GIT%E4%BD%BF%E7%94%A8%E5%B0%8F%E7%BB%93/"/>
    <id>https://weizhimiao.github.io/2016/09/21/GIT使用小结/</id>
    <published>2016-09-21T15:30:00.000Z</published>
    <updated>2016-09-23T14:33:28.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>在使用之前先明确两个概念。</p>
<ul>
<li><p>工作区（working directory）</p>
<blockquote>
<p>我们创建的文件夹</p>
</blockquote>
</li>
<li><p>版本库（Repository）</p>
<blockquote>
<p>一个工作区中隐藏的目录（.git）这个目录不算工作区<br>版本库</p>
<ul>
<li>stage，暂存区</li>
<li>master，分支</li>
</ul>
<p>日常我们进行git add操作，是将文件修改添加到了暂存区，而进行git commit操作，则是将暂存区中的修改提交至当前分支。</p>
</blockquote>
</li>
</ul>
<a id="more"></a>
<h2 id="常用操作"><a href="#常用操作" class="headerlink" title="常用操作"></a>常用操作</h2><ol>
<li><p>创建项目文件夹</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mkdir demo</div></pre></td></tr></table></figure>
</li>
<li><p>进入项目目录</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">cd demo</div><div class="line">git init（将该目录变成git可以管理的仓库（repository））</div></pre></td></tr></table></figure>
</li>
</ol>
<p>初始化后，该目录下会产生一个.git 的隐藏文件夹。</p>
<ol>
<li>添加文件到仓库<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git add 文件</div></pre></td></tr></table></figure>
</li>
</ol>
<p>添加一个文件到仓库。<br>其实，该操作作用是将文件添加至Stage暂存区。</p>
<p>  常用操作<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">git add .   <span class="comment">#将所有文件添加至 stage</span></div><div class="line">git add -u  <span class="comment">#将所有文件添加至 stage ，同时将工作区中删除的文件也从仓库中删除。</span></div></pre></td></tr></table></figure></p>
<ol>
<li>git commit  提交到版本库<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git commit -m &quot;write readme file&quot;</div></pre></td></tr></table></figure>
</li>
</ol>
<p>-m 为对本次版本提交的说明</p>
<ol>
<li><p>git status 查看当前版本库状态</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">$ mkdir git_<span class="built_in">test</span></div><div class="line">$ <span class="built_in">cd</span> git_<span class="built_in">test</span></div><div class="line">$ git init</div><div class="line"><span class="comment"># Initialized empty Git repository in /Users/zhimiao/WWW/hexo/git_test/.git/</span></div><div class="line">$ ll <span class="_">-a</span></div><div class="line"><span class="comment"># total 0</span></div><div class="line"><span class="comment"># drwxr-xr-x   3 zhimiao  staff   102B  9 23 10:25 .</span></div><div class="line"><span class="comment"># drwxr-xr-x   6 zhimiao  staff   204B  9 23 10:25 ..</span></div><div class="line"><span class="comment"># drwxr-xr-x  10 zhimiao  staff   340B  9 23 10:25 .git</span></div><div class="line">$ git status</div><div class="line"><span class="comment"># On branch master</span></div><div class="line"><span class="comment"># Initial commit</span></div><div class="line"><span class="comment"># nothing to commit (create/copy files and use "git add" to track)</span></div></pre></td></tr></table></figure>
<ul>
<li><p>git将所有的文件分为3类：已追踪的，被忽略的，和未追踪的。</p>
<ul>
<li>已追踪的（tracked）<blockquote>
<p>已追踪的文件是指已经在版本库中的文件，或者是已暂存到索引中的文件。即，一个文件通过执行git add，就会被添加到暂存区，该文件就变成一个已追踪的文件。</p>
</blockquote>
</li>
<li><p>被忽略的（ignored）</p>
<blockquote>
<p>被忽略的文件是指在版本库中被明确声明为不可见或者被忽略。一般通过在工作区新建 <code>.gitignore</code> 文件来来声明。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&gt; $ cat .gitignore</div><div class="line">.DS_Store</div><div class="line">Thumbs.db</div><div class="line">db.json</div><div class="line">*.log</div><div class="line">node_modules/</div><div class="line">public/</div><div class="line">.deploy*/</div><div class="line">&gt;</div></pre></td></tr></table></figure>
</blockquote>
</li>
<li><p>未追踪的（untracked）</p>
<blockquote>
<p>未追踪的文件是指那些不在前两类中的文件。git把工作目录下的所有文件当成一个集合，减去已经追踪的文件和忽略的文件，剩下的部分就作为未追踪的文件。</p>
</blockquote>
</li>
</ul>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">$ echo &quot;git test&quot; &gt; readme.md</div><div class="line">$ git status</div><div class="line"># On branch master</div><div class="line"># Initial commit</div><div class="line"># Untracked files:</div><div class="line">#   (use &quot;git add &lt;file&gt;...&quot; to include in what will be committed)</div><div class="line"># 	readme.md</div><div class="line"># nothing added to commit but untracked files present (use &quot;git add&quot; to track)</div><div class="line">$ git add readme.md</div><div class="line">$ git status</div><div class="line"># On branch master</div><div class="line"># Initial commit</div><div class="line"># Changes to be committed:</div><div class="line">#   (use &quot;git rm --cached &lt;file&gt;...&quot; to unstage)</div><div class="line"># 	new file:   readme.md</div><div class="line">$ git commit -m &quot;add readme file&quot;</div><div class="line"># [master (root-commit) 81c90a0] add readme file</div><div class="line">#  1 file changed, 1 insertion(+)</div><div class="line">#  create mode 100644 readme.md</div><div class="line">$ git status</div><div class="line">#  On branch master</div><div class="line">#  nothing to commit, working directory clean</div></pre></td></tr></table></figure>
</li>
<li><p>git diff 显示当前尚未缓存的改动记录</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">$ echo &quot;Second Line &quot; &gt;&gt; readme.md</div><div class="line">$ git diff</div><div class="line"># diff --git a/readme.md b/readme.md</div><div class="line"># index f6edd6e..a1e649c 100644</div><div class="line"># --- a/readme.md</div><div class="line"># +++ b/readme.md</div><div class="line"># @@ -1 +1,2 @@</div><div class="line">#  git test</div><div class="line"># +add new Line</div></pre></td></tr></table></figure>
</li>
</ol>
<p>在开头，原始文件被『–』符号标记起来，新文件被用『+++』标记。@@ 之间表示两个不同文件版本的上下文行，以减号（-）开始的行表示从原始文件删除该行以得到新文件。相反，以加号（+）开始的行表示从原始文件中添加该行以产生新文件，而以空格开始的行则表示两个版本都有的行。</p>
<ol>
<li><p>git log 记录每次commit的信息</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">$ git add readme.md</div><div class="line">$ git commit -m &quot;update&quot;</div><div class="line">$ echo &quot;third Lines;&quot; &gt;&gt; readme.md</div><div class="line">$ git add readme.md</div><div class="line">$ git commit -m &quot;update third&quot;</div><div class="line">$ git log</div><div class="line"># commit 2ba4ebfe3ccef91f0d34646f5a0e50e339ee6f7a</div><div class="line"># Author: weizhimiao &lt;532615323@qq.com&gt;</div><div class="line"># Date:   Fri Sep 23 11:21:24 2016 +0800</div><div class="line">#</div><div class="line">#     update third</div><div class="line">#</div><div class="line"># commit ed0fe412477c8ac828e450cbc319c06ac8db0445</div><div class="line"># Author: weizhimiao &lt;532615323@qq.com&gt;</div><div class="line"># Date:   Fri Sep 23 11:19:34 2016 +0800</div><div class="line">#</div><div class="line">#     update</div><div class="line">#</div><div class="line"># commit 81c90a01f972ef803bd16272e7983aa1b3e9fa9c</div><div class="line"># Author: weizhimiao &lt;532615323@qq.com&gt;</div><div class="line"># Date:   Fri Sep 23 10:42:58 2016 +0800</div><div class="line">#</div><div class="line">#     add readme file</div></pre></td></tr></table></figure>
</li>
<li><p>git reset 修改命令</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">git reset HEAD    废除本次修改，回到上次提交的状态</div><div class="line">git reset -hard [commit id]</div></pre></td></tr></table></figure>
</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">$ git reset --hard HEAD^</div><div class="line"># HEAD is now at 7563423 update</div><div class="line">$ git log   </div><div class="line"># commit ed0fe412477c8ac828e450cbc319c06ac8db0445</div><div class="line"># Author: weizhimiao &lt;532615323@qq.com&gt;</div><div class="line"># Date:   Fri Sep 23 11:19:34 2016 +0800</div><div class="line">#</div><div class="line">#     update</div><div class="line">#</div><div class="line"># commit 81c90a01f972ef803bd16272e7983aa1b3e9fa9c</div><div class="line"># Author: weizhimiao &lt;532615323@qq.com&gt;</div><div class="line"># Date:   Fri Sep 23 10:42:58 2016 +0800</div><div class="line">#</div><div class="line">#     add readme file</div><div class="line">#</div><div class="line">$ cat readme.md</div><div class="line"># git test</div><div class="line"># Second Lines;</div></pre></td></tr></table></figure>
<p>然后我们就回到了上一次提交的版本。</p>
<ol>
<li>git rm 删除所有版本库记录（慎用）</li>
</ol>
<h2 id="从远程库克隆"><a href="#从远程库克隆" class="headerlink" title="从远程库克隆"></a>从远程库克隆</h2><p>git clone 克隆一个本地库<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">$ git clone git@github.com:weizhimiao/git_test.git</div><div class="line"># Cloning into &apos;git_test&apos;...</div><div class="line"># remote: Counting objects: 3, done.</div><div class="line"># remote: Total 3 (delta 0), reused 3 (delta 0), pack-reused 0</div><div class="line"># Receiving objects: 100% (3/3), done.</div><div class="line"># Checking connectivity... done.</div><div class="line">$ ll</div><div class="line"># drwxr-xr-x  4 zhimiao  staff   136B  9 23 21:53 git_test</div><div class="line">$ cd git_test</div><div class="line">$ ll</div><div class="line"># -rw-r--r--  1 zhimiao  staff    12B  9 23 21:53 README.md</div><div class="line">$ git status</div><div class="line"># On branch master</div><div class="line"># Your branch is up-to-date with &apos;origin/master&apos;.</div><div class="line"># nothing to commit, working directory clean</div></pre></td></tr></table></figure></p>
<h2 id="关联远程库"><a href="#关联远程库" class="headerlink" title="关联远程库"></a>关联远程库</h2><blockquote>
<p>本地仓库名：git_test<br>远程仓库名：git_test<br>在本地git_test仓库下执行</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git remote add origin git@github.com:weizhimiao/git_test.git</div></pre></td></tr></table></figure>
<blockquote>
<p>weizhimiao 是github账户名<br>origin 为远程仓库的名字，git的默认叫法</p>
</blockquote>
<p>将本地所有的内容推送到远程库上<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">git push -u origin master 把本地master分支推送到远程库</div><div class="line">-u 为把本地master 分支和远程master分支关联起来，之后就可以通过以下命令进行推送了</div><div class="line">git push origin master</div></pre></td></tr></table></figure></p>
<h2 id="分享与更新项目"><a href="#分享与更新项目" class="headerlink" title="分享与更新项目"></a>分享与更新项目</h2><ol>
<li>git push origin dev  提交到远程dev分支</li>
</ol>
<ol>
<li><p>git pull origin dev  拉取远程dev分支到本地并和本地dev分支合并</p>
</li>
<li><p>git remote add origin git@github.com:weizhimiao/git_test.git  将本地仓库推送至名为test的仓库里</p>
</li>
</ol>
<h2 id="分支管理"><a href="#分支管理" class="headerlink" title="分支管理"></a>分支管理</h2><p>创建：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">$ git branch dev</div><div class="line">$ git branch</div><div class="line">#   dev</div><div class="line"># * master</div><div class="line">$ git checkout dev</div><div class="line"># Switched to branch &apos;dev&apos;</div><div class="line">#</div><div class="line">$ git branch</div><div class="line"># * dev</div><div class="line">#   master</div></pre></td></tr></table></figure></p>
<blockquote>
<p>git branch dev 创建dev分支<br>git checkout dev  切换当前分支</p>
</blockquote>
<p>等价于<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git checkout -b dev 创建并切换到dev分支</div></pre></td></tr></table></figure></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"># git branch 查看当前分支</div><div class="line"># git branch -a 查看本地和远程所有分支</div><div class="line"># git branch -r 常看远程分支</div><div class="line"># git branch -d 删除本地分支</div><div class="line"># git checkout master 用于dev分支完成工作后，切换回master 分支</div><div class="line">#</div><div class="line"># git merge 分支合并</div><div class="line"># 如当前分支是master，本地另一个分支是dev，用下面命令将dev合并到master分支</div><div class="line"># git merge dev</div></pre></td></tr></table></figure>
<h2 id="版本回退"><a href="#版本回退" class="headerlink" title="版本回退"></a>版本回退</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"># git log 查看历史纪录</div><div class="line">#</div><div class="line"># 回退到上一个版本</div><div class="line"># git reset -hard HEAD^</div><div class="line"># 或</div><div class="line"># git reset --hard [commit id]回退至指定版本号的版本</div><div class="line">#</div><div class="line">#</div><div class="line">#</div><div class="line"># git中</div><div class="line"># HEAD表示当前版本</div><div class="line"># HEAD^表示上一个版本</div><div class="line"># HEAD^^ 上上一个版本</div><div class="line"># HEAD~100 上100个版本</div><div class="line">#</div><div class="line"># git reflog 查看命令历史</div><div class="line"># 一般通过这个命令查看之前版本号</div><div class="line"># 例如：（前7个字符就是版本号的缩写）</div><div class="line">$ git reflog</div><div class="line">bb862b6 HEAD@&#123;0&#125;: merge dev: Fast-forward</div><div class="line">3223509 HEAD@&#123;1&#125;: checkout: moving from dev to master</div><div class="line">bb862b6 HEAD@&#123;2&#125;: commit: dev branch commint</div><div class="line">3223509 HEAD@&#123;3&#125;: checkout: moving from master to dev</div><div class="line">3223509 HEAD@&#123;4&#125;: checkout: moving from master to master</div><div class="line">3223509 HEAD@&#123;5&#125;: checkout: moving from dev to master</div><div class="line">3223509 HEAD@&#123;6&#125;: checkout: moving from master to dev</div><div class="line">3223509 HEAD@&#123;7&#125;: commit: add readme.md</div><div class="line">54906f2 HEAD@&#123;8&#125;: pull origin master: Merge made by the &apos;recursive&apos; strategy.</div><div class="line">7563423 HEAD@&#123;9&#125;: reset: moving to HEAD^</div><div class="line">7865e6f HEAD@&#123;10&#125;: commit: update third</div><div class="line">7563423 HEAD@&#123;11&#125;: commit: update</div><div class="line">81c90a0 HEAD@&#123;12&#125;: reset: moving to HEAD^</div><div class="line">ed0fe41 HEAD@&#123;13&#125;: reset: moving to HEAD^</div><div class="line">2ba4ebf HEAD@&#123;14&#125;: commit: update third</div><div class="line">ed0fe41 HEAD@&#123;15&#125;: commit: update</div><div class="line">81c90a0 HEAD@&#123;16&#125;: commit (initial): add readme file</div></pre></td></tr></table></figure>
<h2 id="管理修改"><a href="#管理修改" class="headerlink" title="管理修改"></a>管理修改</h2><blockquote>
<p>git diff HEAD – README.md</p>
</blockquote>
<p>查看工作区和版本库里最新版本的区别<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">$ git diff HEAD -- README.md</div><div class="line"># diff --git a/README.md b/README.md</div><div class="line"># index 9235721..62c0eaa 100644</div><div class="line"># --- a/README.md</div><div class="line"># +++ b/README.md</div><div class="line"># @@ -1 +1 @@</div><div class="line"># -First Line!</div><div class="line"># +branch dev line</div></pre></td></tr></table></figure></p>
<h2 id="撤销修改"><a href="#撤销修改" class="headerlink" title="撤销修改"></a>撤销修改</h2><ol>
<li><p>修改了工作区，想直接丢弃</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git checkout -- filename</div></pre></td></tr></table></figure>
</li>
<li><p>修改了工作区内容，同事添加到了暂存区</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ git reset HEAD filename</div><div class="line">$ git checkout -- filename</div></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="删除文件"><a href="#删除文件" class="headerlink" title="删除文件"></a>删除文件</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ git rm filename</div><div class="line">$ git commit 提交到版本库</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;概念&quot;&gt;&lt;a href=&quot;#概念&quot; class=&quot;headerlink&quot; title=&quot;概念&quot;&gt;&lt;/a&gt;概念&lt;/h2&gt;&lt;p&gt;在使用之前先明确两个概念。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;工作区（working directory）&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;我们创建的文件夹&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;版本库（Repository）&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;一个工作区中隐藏的目录（.git）这个目录不算工作区&lt;br&gt;版本库&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;stage，暂存区&lt;/li&gt;
&lt;li&gt;master，分支&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;日常我们进行git add操作，是将文件修改添加到了暂存区，而进行git commit操作，则是将暂存区中的修改提交至当前分支。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="软件工程" scheme="https://weizhimiao.github.io/categories/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/"/>
    
    
      <category term="git" scheme="https://weizhimiao.github.io/tags/git/"/>
    
      <category term="版本控制" scheme="https://weizhimiao.github.io/tags/%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6/"/>
    
  </entry>
  
  <entry>
    <title>Mac下包管理工具homebrew</title>
    <link href="https://weizhimiao.github.io/2016/09/20/Mac%E4%B8%8B%E5%8C%85%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7homebrew/"/>
    <id>https://weizhimiao.github.io/2016/09/20/Mac下包管理工具homebrew/</id>
    <published>2016-09-20T15:30:00.000Z</published>
    <updated>2016-09-20T15:09:18.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Homebrew"><a href="#Homebrew" class="headerlink" title="Homebrew"></a>Homebrew</h2><p>homebrew,一个在Mac OS上的软件包管理工具。是一款有Ruby开发的智能包管理系统.</p>
<p><a href="http://brew.sh" target="_blank" rel="external">官网地址</a></p>
<ul>
<li><p>安装：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/usr/bin/ruby <span class="_">-e</span> <span class="string">"<span class="variable">$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)</span>"</span></div></pre></td></tr></table></figure>
</li>
<li><p>功能：</p>
<blockquote>
<p>软件包管理。homebrew会将套件安装到独立目录，并将文件软连接链接到/usr/local</p>
</blockquote>
</li>
<li><p>命令格式</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">$ brew -h</div><div class="line">Example usage:</div><div class="line">  brew search [TEXT|/REGEX/]</div><div class="line">  brew (info|home|options) [FORMULA...]</div><div class="line">  brew install FORMULA...</div><div class="line">  brew update</div><div class="line">  brew upgrade [FORMULA...]</div><div class="line">  brew uninstall FORMULA...</div><div class="line">  brew list [FORMULA...]</div><div class="line">Troubleshooting:</div><div class="line">  brew config</div><div class="line">  brew doctor</div><div class="line">  brew install -vd FORMULA</div><div class="line">Brewing:</div><div class="line">  brew create [URL [--no-fetch]]</div><div class="line">  brew edit [FORMULA...]</div><div class="line">  https://github.com/Homebrew/brew/blob/master/share/doc/homebrew/Formula-Cookbook.md</div><div class="line">Further help:</div><div class="line">  man brew</div><div class="line">  brew help [COMMAND]</div><div class="line">  brew home</div></pre></td></tr></table></figure>
</li>
<li><p>示例</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ brew install wget</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="brew-cask"><a href="#brew-cask" class="headerlink" title="brew-cask"></a>brew-cask</h2><p>brew-cask,是一套建立在homebrew之上的Mac软件安装命令行工具。其与brew的区别是，后者侧重与软件套件和软件环境的配置安装。</p>
<p><a href="http://caskrom.github.io" target="_blank" rel="external">官网</a></p>
<ul>
<li><p>安装：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ brew install brew-cask</div></pre></td></tr></table></figure>
</li>
<li><p>命令格式</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">$ brew cask -h</div><div class="line">brew-cask provides a friendly homebrew-style CLI workflow for the</div><div class="line">administration of macOS applications distributed as binaries.</div><div class="line">Commands:</div><div class="line">    audit                  verifies installability of Casks</div><div class="line">    cat                    dump raw source of the given Cask to the standard output</div><div class="line">    cleanup                cleans up cached downloads and tracker symlinks</div><div class="line">    create                 creates the given Cask and opens it in an editor</div><div class="line">    doctor                 checks for configuration issues</div><div class="line">    edit                   edits the given Cask</div><div class="line">    fetch                  downloads remote application files to local cache</div><div class="line">    home                   opens the homepage of the given Cask</div><div class="line">    info                   displays information about the given Cask</div><div class="line">    install                installs the given Cask</div><div class="line">    list                   with no args, lists installed Casks; given installed Casks, lists staged files</div><div class="line">    search                 searches all known Casks</div><div class="line">    style                  checks Cask style using RuboCop</div><div class="line">    uninstall              uninstalls the given Cask</div><div class="line">    update                 a synonym for &apos;brew update&apos;</div><div class="line">    zap                    zaps all files associated with the given Cask</div><div class="line">See also &quot;man brew-cask&quot;</div></pre></td></tr></table></figure>
</li>
<li><p>示例</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ brew cask install iterm2</div></pre></td></tr></table></figure>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Homebrew&quot;&gt;&lt;a href=&quot;#Homebrew&quot; class=&quot;headerlink&quot; title=&quot;Homebrew&quot;&gt;&lt;/a&gt;Homebrew&lt;/h2&gt;&lt;p&gt;homebrew,一个在Mac OS上的软件包管理工具。是一款有Ruby开发的智能包管理系统
    
    </summary>
    
      <category term="Mac" scheme="https://weizhimiao.github.io/categories/Mac/"/>
    
    
      <category term="Mac" scheme="https://weizhimiao.github.io/tags/Mac/"/>
    
      <category term="homebrew" scheme="https://weizhimiao.github.io/tags/homebrew/"/>
    
  </entry>
  
  <entry>
    <title>Schema数据类型优化</title>
    <link href="https://weizhimiao.github.io/2016/09/19/Schema%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E4%BC%98%E5%8C%96/"/>
    <id>https://weizhimiao.github.io/2016/09/19/Schema数据类型优化/</id>
    <published>2016-09-19T10:30:00.000Z</published>
    <updated>2016-09-20T14:35:05.000Z</updated>
    
    <content type="html"><![CDATA[<p>良好的数据路逻辑设计和物理设计是高性能的基石，所以要打造一个高性能的数据库服务，在Schema设计之初就应该需要权衡各种因素。</p>
<h2 id="选择最优化的数据类型"><a href="#选择最优化的数据类型" class="headerlink" title="选择最优化的数据类型"></a>选择最优化的数据类型</h2><p>数据库支持的数据类型非常多，选择一个正确的数据类型对于获得高性能至关重要。</p>
<p>选择合适数据类型的几个原则：</p>
<ol>
<li><p>更小的通常更好<br>一般情况下，应该尽量使用可以正确数据类型的最小数据类型。但也要确保没有低估需要存储的范围。</p>
</li>
<li><p>简单就好<br>简单的数据类型的操作通常需要更少的CPU周期。例如，</p>
</li>
</ol>
<ul>
<li>整型比字符串操作代价更低</li>
<li>使用MySQL内建的数据类型（比如，date、time、datetime），比用字符串更快</li>
<li>使用整型存储一个IP地址，比用一个字符串更好</li>
</ul>
<ol>
<li>尽量避免使用NULL<br>因为如果在查询中包含有NULL的列，对MySQL来说更难优化。所以通常情况下，最好指定列为 NOT NULL。</li>
</ol>
<p><strong>TIPS：</strong><br>datetime和timstamp列都可以存储相同类型的数据（时间和日期，都可以精确到秒），然而timestamp实际只使用datetime一般的存储空间。但另一方面，timestamp允许的时间范围要小的多。</p>
<a id="more"></a>
<h2 id="基本的数据类型"><a href="#基本的数据类型" class="headerlink" title="基本的数据类型"></a>基本的数据类型</h2><ol>
<li><p>数字</p>
<ol>
<li><p>整数</p>
<ul>
<li>TINYINT (8)</li>
<li>SMALLINT (16)</li>
<li>MEDIUMINT (24)</li>
<li>INT (32)</li>
<li>BIGINT (64)</li>
</ul>
<blockquote>
<p><strong>TIPS1:</strong> 整数类型有可选的 unsigned 属性，表示不允许有负值，如果将要使用的列不会出现负值的话，加上这个属性，将会可以使正数的上限增加一倍。</p>
<p><strong>TIPS2:</strong> int(1)与int(11)，对于存储和计算来说，这两者本质是没有区别的；两者只是在MySQL的一些交互工具中略有差别（比如，MySQL命令行客户端，用来控制显示字符的个数）。</p>
</blockquote>
</li>
<li><p>实数</p>
<ul>
<li><p>作用</p>
<blockquote>
<p>存储小数</p>
<p>存储比BIGINT更大的数</p>
</blockquote>
</li>
<li><p>float</p>
</li>
<li><p>double</p>
<blockquote>
<p>float 和 double支持使用标准的浮点运算进行近似的计算。</p>
</blockquote>
</li>
<li><p>decimal</p>
<blockquote>
<p>decimal 类型用于存储精确的小数，支持精确的计算。</p>
<p>由于CPU不支持对decimal的直接计算，所以对decimal的精确计算是由MySQL服务器自己来实现。</p>
<p><strong>Tips:</strong> 因为在进行精确计算时需要额外的空间和计算开销，所以尽量只对小数才使用decimal。比如，财务数据。另外如果数据量大的话，可以考虑使用bigint代替decimal，只需将存储的货币单位根据小数的位数乘以相应的倍数即可。</p>
</blockquote>
</li>
</ul>
</li>
</ol>
</li>
<li><p>字符串</p>
<ol>
<li><p>CHAR</p>
<blockquote>
<p>char 类型是定长的：MySQL是根据定义的字符串长度分配足够的空间。<br>char，适合存储很短的字符串，或者所有值的长度都差不多的的字符串。例如，密码的md5值。<br>另外，char还适合存储经常进行变更的值，相比于vachar，char类型很少会产生碎片。所以这一类的列，会比varchar更好。</p>
</blockquote>
</li>
<li><p>VARCHAR</p>
<blockquote>
<p>varchar 类型用于存储可变长的字符串。它只使用必要的空间，所以比定长类型更节省空间。</p>
<p>varchar,需要使用一个或者两个额外的字节来存储当前字符串的长度信息；如果列的长度小于或等于255个字节，则只需要一个字节表示，否则就需要两个字节来表示。</p>
<p>下面的这些情况适合使用varchar</p>
<ol>
<li>字符串列的长度比平均长度大很多</li>
<li>列的更新很少，所以碎片不是问题</li>
<li>使用了像UTF-8这样复杂的字符集，因为该字符集中每个字符可能使用不同的字节来进行存储</li>
</ol>
</blockquote>
<p><strong>Tips:</strong><br>用varchar(5)和varchar(200)来存储 「hello」有什么区别？</p>
<p>首先两者在存储空间的开销是一样的。<br>但是，一般的列在查询时会消耗更多的内存，因为在读到这些列时MySQL通常会分配固定大小的内存块来保存内部值。<br>尤其在使用内存临时表进行排序或者其他操作时，会特别的糟糕。<br>所以最好的策略就是，<strong>分配真正需要的空间</strong>。</p>
<p><strong>Tips：</strong><br>字符串长度定义不是字节数，而是字符数。两者概念是不同的，多字节字符集会需要更多的空间存储单个字符。</p>
</li>
</ol>
</li>
<li><p>BLOB和TEXT</p>
<blockquote>
<p>两者都是为存储很大的数据而设计的字符串数据类型，不同的是两者分别采用二进制和字符方式存储。</p>
<p>MySQL在处理两个类型的值时，处理基本相同，仅有的不同是BLOB类型是以二进制格式来存储的，所以没有排序规则和字符集，而text类型有排序规则和字符集。</p>
</blockquote>
</li>
<li><p>枚举（ENUM）</p>
<blockquote>
<p>枚举可以把一些不重复的字符串存储成一个预定义的集合。<br>MySQL会在存储枚举类型时粉肠紧凑，会根据列的值的数量压缩到一个或者两个字节中。<br>MySQL会在内部将每个值在列表中的位置保存成整数，而这些『数字–字符串』的对应关系，会保存在 .frm 文件中。<br>所以当该列需要新添加一个新的枚举值时，必须添加在之前枚举列表的最后面，否则就会出现数据错乱的问题。切记。</p>
</blockquote>
</li>
<li><p>日期和时间类型</p>
<ul>
<li><p>DATETIME</p>
<blockquote>
<p>该类型能保存大范围的值，从1001年到9999年，精度为秒。他会把时间封装到YYYYMMDDHHIISS的整数中，没有时区概念。使用8个字节的存储空间。</p>
</blockquote>
</li>
<li><p>TIMESTAMP</p>
<blockquote>
<p>该类型保存了从1970-01-01 00：00：00（格林威治时间）以来的秒数。该类型使用4个字节的存储空间，所以只能表示1970到2023年，其值还具有时区的概念。</p>
</blockquote>
</li>
</ul>
</li>
<li><p>位数据类型</p>
<blockquote>
<p>存储更紧凑。但所有这些位类型，不管底层存储格式和存储方式，从技术上来说都是字符串类型。虽然用它存储数据更紧凑，但是对于大部分应用来说，最好避免使用该类型。</p>
</blockquote>
<ul>
<li><p>BIT</p>
</li>
<li><p>SET</p>
</li>
</ul>
</li>
<li><p>特殊类型的数据</p>
<blockquote>
<p>某些数据的类型并不直接和内置的类型一致。所以需要一定的转换进行存储。</p>
</blockquote>
<ul>
<li><p>低于秒级的时间戳</p>
<blockquote>
<p>低于秒级的时间需要在引用层做处理，一般可以通过存储两个或者多个列来存储（一个存储秒级的时间戳，另外的存储秒级以下的）</p>
</blockquote>
</li>
<li><p>ipv4地址</p>
<blockquote>
<p>我们常见到有人会用 varchar(15)来存错一个IP地址，IP地址实际是一个32位的无符号整数，所以应该用无符号整数来存储IP地址。MySQL提供了 INET_ATON()和 INET_NTOA() 函数在这两表示方法之间转换。</p>
</blockquote>
</li>
</ul>
</li>
</ol>
<p>love over~<br>2016-09-19</p>
<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="http://music.163.com/outchain/player?type=2&id=28947001&auto=1&height=66"></iframe>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;良好的数据路逻辑设计和物理设计是高性能的基石，所以要打造一个高性能的数据库服务，在Schema设计之初就应该需要权衡各种因素。&lt;/p&gt;
&lt;h2 id=&quot;选择最优化的数据类型&quot;&gt;&lt;a href=&quot;#选择最优化的数据类型&quot; class=&quot;headerlink&quot; title=&quot;选择最优化的数据类型&quot;&gt;&lt;/a&gt;选择最优化的数据类型&lt;/h2&gt;&lt;p&gt;数据库支持的数据类型非常多，选择一个正确的数据类型对于获得高性能至关重要。&lt;/p&gt;
&lt;p&gt;选择合适数据类型的几个原则：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;更小的通常更好&lt;br&gt;一般情况下，应该尽量使用可以正确数据类型的最小数据类型。但也要确保没有低估需要存储的范围。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;简单就好&lt;br&gt;简单的数据类型的操作通常需要更少的CPU周期。例如，&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;整型比字符串操作代价更低&lt;/li&gt;
&lt;li&gt;使用MySQL内建的数据类型（比如，date、time、datetime），比用字符串更快&lt;/li&gt;
&lt;li&gt;使用整型存储一个IP地址，比用一个字符串更好&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;尽量避免使用NULL&lt;br&gt;因为如果在查询中包含有NULL的列，对MySQL来说更难优化。所以通常情况下，最好指定列为 NOT NULL。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;TIPS：&lt;/strong&gt;&lt;br&gt;datetime和timstamp列都可以存储相同类型的数据（时间和日期，都可以精确到秒），然而timestamp实际只使用datetime一般的存储空间。但另一方面，timestamp允许的时间范围要小的多。&lt;/p&gt;
    
    </summary>
    
      <category term="MySQL" scheme="https://weizhimiao.github.io/categories/MySQL/"/>
    
    
      <category term="数据类型" scheme="https://weizhimiao.github.io/tags/%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
    
  </entry>
  
  <entry>
    <title>MySQL存储引擎概述</title>
    <link href="https://weizhimiao.github.io/2016/09/17/MySQL%E5%AD%98%E5%82%A8%E5%BC%95%E6%93%8E%E6%A6%82%E8%BF%B0/"/>
    <id>https://weizhimiao.github.io/2016/09/17/MySQL存储引擎概述/</id>
    <published>2016-09-17T15:00:00.000Z</published>
    <updated>2016-09-17T15:06:38.000Z</updated>
    
    <content type="html"><![CDATA[<p>基于存储引擎在MySQL架构中的地位，在学习和使用MySQL时我们需要对MySQL的各种存储引擎有一个大概的了解。<br>并且知道在实际项目中如何选择适合的存储引擎，以及如何实现不同存储引擎的相互切换。</p>
<a id="more"></a>
<h2 id="存储引擎分类"><a href="#存储引擎分类" class="headerlink" title="存储引擎分类"></a>存储引擎分类</h2><h3 id="InnoDB"><a href="#InnoDB" class="headerlink" title="InnoDB"></a>InnoDB</h3><p>InnoDB，是MySQL的默认事务型引擎，也是做重要、使用最广泛的存储引擎。它的性能和自动崩溃恢复特性，使得它在非事务行存储的需求中也很流行。所以除非有非常特别的原因需要使用其他的存储引擎，否则应该优先考虑InnoDB引擎。并且InnoDB作为事务型存储引擎，它通过一些机制和工具可以支持真正的热备份，而MySQL其他的存储引擎则不支持热备份。</p>
<h3 id="MyISAM"><a href="#MyISAM" class="headerlink" title="MyISAM"></a>MyISAM</h3><p>在MySQL 5.1 及之前的版本，MyISAM是MySQL默认的存储引擎。MyISAM提供大量的特性，包括全文索引、压缩、空间函数（GIS）等，但是MyISAM不支持事务和行级锁，而且有一个毫无疑问的缺陷就是崩溃后无法安全恢复。尽管MyISAM不支持事务、不支持崩溃后的安全恢复，但是对于一些只读的数据，或者表比较小，可以忍受repair（修复）操作，则依然可以继续使用MyISAM。<strong>但请不要默认使用MyISAM，而是应当默认使用InnoDB</strong></p>
<h3 id="Archive"><a href="#Archive" class="headerlink" title="Archive"></a>Archive</h3><p>Archive 存储引擎只支持INSERT 和SELECT 操作，在MySQL 5.1之前还不支持索引。Archive会缓存所有的写并利用zlib对插入的行进行压缩，所以比MyISAM表的磁盘I/O更少。但是每次select操作都需要对全表进行扫描，所以Archive表适合日志和数据采集类应用，或者一些需要更快速insert操作的场合下使用。总之，MyISAM是一个针对告诉插入和压缩做了优化的简单引擎。</p>
<h3 id="Blackhole"><a href="#Blackhole" class="headerlink" title="Blackhole"></a>Blackhole</h3><p>Blackhole引擎没有实现任何的存储机制，他会丢弃所有的插入的数据，不做任何的保存。但是服务器会记录Blackhole表的日志，所以可以用于复制数据库到备库，或者只是简单地记录到日志。这种特殊的存储引擎可以在一些特殊的复制架构和日志审核时发挥所用。</p>
<h3 id="CSV"><a href="#CSV" class="headerlink" title="CSV"></a>CSV</h3><p>CSV引擎可以将普通的CSV文件作为MySQL的表来处理，但这种表不支持索引。CSV引擎可以在数据运行是拷入或者烤出文件。可以将Excel等电子表格中的数据存储为CSV文件，然后复制到MySQL数据目录下，然后就能在MySQL中打开使用。因此，CSV引擎可以作为一种数据交换的机制，非常有用。</p>
<h3 id="Federated"><a href="#Federated" class="headerlink" title="Federated"></a>Federated</h3><p>Federated引擎是访问其他MySQL服务器的一个代理，他会创建一个到远程MySQL服务器的的客户端连接，并将查询传输到远程服务器执行，然后提取或者发送需要的数据。但是尽管该引擎看起来提供了一种很好的跨服务器的灵活性，但也经常带来问题。因此默认是禁用的。</p>
<h3 id="Memory"><a href="#Memory" class="headerlink" title="Memory"></a>Memory</h3><p>Memory表所有的数据都保存在内存中，因此Memory表的访问速度非常的快（至少要比MyISAM快一个数量级），并且不需要磁盘的I/O操作。但是Memory表在系统重启后虽然表结构会保留，但是数据会丢失。</p>
<p>Memory表支持Hash索引，因此查询操作非常快。但是MySQL表采用的表级锁，因此并发写入的性能较低。</p>
<p>Memory表的应用场景：</p>
<ul>
<li>用于查找（lookup）或者映射（mapping）表。</li>
<li>用于缓存周期性聚合数据的结果。</li>
<li>用于保存数据分析中产生的中间问题。</li>
</ul>
<p><strong>Tips：</strong><br>如果MySQL在执行查询的过程中需要使用临时表来保存中间结果，内部使用的临时表就是Memory表。如果中间结果大大超出了Memory表的限制，或者有大量的BLOB或TEXT字段，则临时表会转换成MyISAM表。</p>
<h3 id="Merge"><a href="#Merge" class="headerlink" title="Merge"></a>Merge</h3><p>Merge引擎是MyISAM的一种变种。Merge表是由多个MyISAM表合并而来的虚拟表。</p>
<h3 id="NDB"><a href="#NDB" class="headerlink" title="NDB"></a>NDB</h3><p>MySQL服务器、NDB集群引擎、以及分布式的、share-nothing的、容灾的、高可用的NDB数据库组合，被称之为MySQL集群（MySQL Cluster）。</p>
<h3 id="其他的第三方存储引擎"><a href="#其他的第三方存储引擎" class="headerlink" title="其他的第三方存储引擎"></a>其他的第三方存储引擎</h3><p>MySQL从07年开始提供了插件式的存储引擎API，从此出现了一系列为不同目的而设计的存储引擎。其中一些已经合并到MySQL服务器，但大多数还是第三方产品或者开源项目。比较有名的有：</p>
<ul>
<li>OLTP类引擎</li>
<li>面向列的存储引擎</li>
<li>社区存储引擎</li>
</ul>
<h2 id="选择合适的存储引擎的考虑因素"><a href="#选择合适的存储引擎的考虑因素" class="headerlink" title="选择合适的存储引擎的考虑因素"></a>选择合适的存储引擎的考虑因素</h2><p>不同的应用可能会根据不同的需求而采用不同的存储引擎。那么我们再为应用选择存储引擎时，通常会考虑以下几点：</p>
<ul>
<li><p>事务<br>引用是否需要事务支持。如果需要，那么InnoDB是目前最稳定且经过验证的选择。如果不需要，并且主要是select和insert操作，那么MyISAM是不错的选择。</p>
</li>
<li><p>备份<br>如果可以定期的通过关闭服务器来执行备份，那么备份因素就可以忽略。反之，如果需要支持在线热备份，那么选择InnoDB就是基本的要求。</p>
</li>
<li><p>崩溃恢复<br>相对而言，MyISAM崩溃后发生的数据毁坏的概率要比InnoDB高的多，并且恢复速度也要慢的多。所以，即使不需要事务支持，很多人也会选择InnoDB引擎。</p>
</li>
<li><p>特有的特性<br>有些应用可能需要一些存储引擎锁独有的特性或者优化，比如依赖聚簇索引的优化，或者需要对地理空间的搜索。</p>
</li>
</ul>
<p><strong>总之，如无特殊的需求和例外，统统建议选择InnoDB存储引擎。</strong></p>
<h2 id="如何转换表的存储引擎"><a href="#如何转换表的存储引擎" class="headerlink" title="如何转换表的存储引擎"></a>如何转换表的存储引擎</h2><p>有很多中方法可以转换，一般我们会使用以下三种方法：</p>
<h3 id="ALTER-TABLE"><a href="#ALTER-TABLE" class="headerlink" title="ALTER TABLE"></a>ALTER TABLE</h3><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mysql&gt;alter table mytable engine=innodb;</div></pre></td></tr></table></figure>
<p>上述语法可以适应与任何存储引擎。但是当表数据很大时，这种方法将会执行很长时间。MySQL会按行将数据从原表复制到一张新的表中。所以，在繁忙的表上执行此操作要非常小心。</p>
<h3 id="导入-导出"><a href="#导入-导出" class="headerlink" title="导入/导出"></a>导入/导出</h3><p>使用mysqldump工具将数据到出到文件，然后修改文件中create table 语句中的存储引擎的选项，（同时注意修改表名，避免在导入的时候将原表删除，造成数据丢失）。然后导入文件到数据库，这样就得到了一个原表的一个全量复制表。</p>
<h3 id="创建与查询"><a href="#创建与查询" class="headerlink" title="创建与查询"></a>创建与查询</h3><p>综合第一种方法的高效和第二种的安全。不需要导出整张表的数据，而是先创建一个新的存储引擎的表，然后利用 insert…select语法来导数据。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">mysql&gt;create table innodb_table like myisam_table;</div><div class="line">mysql&gt;alter table innodb_table engine=innodb;</div><div class="line">mysql&gt;insert into innodb_table select * from myisam_table;</div></pre></td></tr></table></figure></p>
<p>如果数据量大的话，可以考虑分批处理，并使用事务进行提交操作；<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">mysql&gt;start transaction;</div><div class="line">mysql&gt;insert into innodb_table select * from myisam_table where id between x and y;</div><div class="line">mysql&gt;commit;</div></pre></td></tr></table></figure></p>
<p>如果有必要，在操作的时候可以对原表加锁，以确保新表和原表数据一致。<br>这样操作之后也会得到一个对原表的全量复制的表，如果需要还可以删除原表。</p>
<p><strong>Tips：</strong><br>Persona Toolkit 提供了一个 pt-online-schema-change的工具（基于Facebook的在线变更技术），可以比较简单、方便的执行上述过程，避免收工操作可能会带来的错误是繁琐。。。。。。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;基于存储引擎在MySQL架构中的地位，在学习和使用MySQL时我们需要对MySQL的各种存储引擎有一个大概的了解。&lt;br&gt;并且知道在实际项目中如何选择适合的存储引擎，以及如何实现不同存储引擎的相互切换。&lt;/p&gt;
    
    </summary>
    
      <category term="MySQL" scheme="https://weizhimiao.github.io/categories/MySQL/"/>
    
    
      <category term="存储引擎" scheme="https://weizhimiao.github.io/tags/%E5%AD%98%E5%82%A8%E5%BC%95%E6%93%8E/"/>
    
  </entry>
  
  <entry>
    <title>如何查看表的相关信息</title>
    <link href="https://weizhimiao.github.io/2016/09/17/MySQL%E5%A6%82%E4%BD%95%E6%9F%A5%E7%9C%8B%E8%A1%A8%E7%9A%84%E7%9B%B8%E5%85%B3%E4%BF%A1%E6%81%AF/"/>
    <id>https://weizhimiao.github.io/2016/09/17/MySQL如何查看表的相关信息/</id>
    <published>2016-09-17T14:00:00.000Z</published>
    <updated>2016-09-17T08:42:49.000Z</updated>
    
    <content type="html"><![CDATA[<p>在文件系统中，MySQL将每个数据库（也被称为schema）保存为数据目录下的一个子目录。在创建表的时候，MySQL会在数据库子目录下创建一个和表同名的 .frm 文件对表的定义。例如，创建一个名为 mytable 的表，MySQL会在 mytable.frm 文件中保存对该表的定义。</p>
<p>通常，我们可以使用 show table status 命令来显示表的相关信息。（MySQL 5.0 + 的版本，也可以查看 INFOMATION_SCHEMA 中对应的表的信息）。<br>例如，对于MySQL数据库中的 user 表：<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">mysql&gt; show table status like 'user' \G;</div><div class="line">*************************** 1. row ***************************</div><div class="line">           Name: user</div><div class="line">         Engine: MyISAM</div><div class="line">        Version: 10</div><div class="line">     Row_format: Dynamic</div><div class="line">           Rows: 14</div><div class="line"> Avg_row_length: 63</div><div class="line">    Data_length: 952</div><div class="line">Max_data_length: 281474976710655</div><div class="line">   Index_length: 2048</div><div class="line">      Data_free: 64</div><div class="line"> Auto_increment: NULL</div><div class="line">    Create_time: 2012-12-25 14:23:08</div><div class="line">    Update_time: 2015-08-11 11:17:42</div><div class="line">     Check_time: NULL</div><div class="line">      Collation: utf8_bin</div><div class="line">       Checksum: NULL</div><div class="line"> Create_options:</div><div class="line">        Comment: Users and global privileges</div><div class="line">1 row in set (0.01 sec)</div></pre></td></tr></table></figure></p>
<a id="more"></a>
<p>下面简单介绍一下每行的含义：</p>
<ul>
<li><p>Name</p>
<blockquote>
<p>表名。</p>
</blockquote>
</li>
<li><p>Engine</p>
<blockquote>
<p>表的存储引擎。</p>
</blockquote>
</li>
<li><p>Row_format</p>
<blockquote>
<p>行的格式，对于MyISAM表，可选的值为Dynamic、Fixed、Compressed。</p>
<ul>
<li>Dynamic，表示行的长度是可变的，一般包含可变长度的字段，如varchar、blob等。</li>
<li>Fixed，行的长度是固定的，只包含固定长短的列。</li>
<li>Compressed，只在压缩表中出现，表示是被压缩的。</li>
</ul>
</blockquote>
</li>
<li><p>Rrows</p>
<blockquote>
<p>表中行数，对于MyISAM和其他的一些存储引擎该值是精确的，但对于InnoDB该值只是一个大概值。</p>
</blockquote>
</li>
<li><p>Avg_row_length</p>
<blockquote>
<p>平均每行包含的字节数</p>
</blockquote>
</li>
<li><p>Data_length</p>
<blockquote>
<p>表数据的大小(单位：字节)</p>
</blockquote>
</li>
<li><p>Max_data_length</p>
<blockquote>
<p>表数据的最大容量，该值和存储引擎有关。</p>
</blockquote>
</li>
<li><p>Index_length</p>
<blockquote>
<p>索引的大小(单位：字节)</p>
</blockquote>
</li>
<li><p>Data_free</p>
<blockquote>
<p>对于MyISAM表示已经分配但是目前没有被使用的空间。这部分空间包括之前删除的行，以及后续可以被Insert利用的行。</p>
</blockquote>
</li>
<li><p>Auto_increment</p>
<blockquote>
<p>下一个Auto_increment的值。</p>
</blockquote>
</li>
<li><p>Create_time</p>
<blockquote>
<p>表的创建时间。</p>
</blockquote>
</li>
<li><p>Update_time</p>
<blockquote>
<p>表数据的最后修改时间。</p>
</blockquote>
</li>
<li><p>Check_time</p>
<blockquote>
<p>使用check table命令或者muisamchk 工具最后一次检查表的时间。</p>
</blockquote>
</li>
<li><p>Collation</p>
<blockquote>
<p>表的默认字符集和字符列排序规则。</p>
</blockquote>
</li>
<li><p>Checksum</p>
<blockquote>
<p>如果启用，保存的是整个表的实时校验和。</p>
</blockquote>
</li>
<li><p>Create_options</p>
<blockquote>
<p>创建表时指定的其他选项。</p>
</blockquote>
</li>
<li><p>Comment</p>
<blockquote>
<p>该列包含了一些其他的额外信息。对于MyISAM表，保存的是在表创建的时候附带的注释。对于InnoDB表，该值保存的是InnoDB表空间的剩余空间信息。如果是一个视图，该列将会包含『VIEW』字样。</p>
</blockquote>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在文件系统中，MySQL将每个数据库（也被称为schema）保存为数据目录下的一个子目录。在创建表的时候，MySQL会在数据库子目录下创建一个和表同名的 .frm 文件对表的定义。例如，创建一个名为 mytable 的表，MySQL会在 mytable.frm 文件中保存对该表的定义。&lt;/p&gt;
&lt;p&gt;通常，我们可以使用 show table status 命令来显示表的相关信息。（MySQL 5.0 + 的版本，也可以查看 INFOMATION_SCHEMA 中对应的表的信息）。&lt;br&gt;例如，对于MySQL数据库中的 user 表：&lt;br&gt;&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;mysql&amp;gt; show table status like &#39;user&#39; \G;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;*************************** 1. row ***************************&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;           Name: user&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;         Engine: MyISAM&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        Version: 10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;     Row_format: Dynamic&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;           Rows: 14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; Avg_row_length: 63&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    Data_length: 952&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Max_data_length: 281474976710655&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;   Index_length: 2048&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      Data_free: 64&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; Auto_increment: NULL&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    Create_time: 2012-12-25 14:23:08&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    Update_time: 2015-08-11 11:17:42&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;     Check_time: NULL&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      Collation: utf8_bin&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;       Checksum: NULL&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; Create_options:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        Comment: Users and global privileges&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;1 row in set (0.01 sec)&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="MySQL" scheme="https://weizhimiao.github.io/categories/MySQL/"/>
    
    
  </entry>
  
  <entry>
    <title>MVCC多版本并发控制</title>
    <link href="https://weizhimiao.github.io/2016/09/17/MVCC-%E5%A4%9A%E7%89%88%E6%9C%AC%E5%B9%B6%E5%8F%91%E6%8E%A7%E5%88%B6%E6%95%B4%E7%90%86/"/>
    <id>https://weizhimiao.github.io/2016/09/17/MVCC-多版本并发控制整理/</id>
    <published>2016-09-16T17:00:00.000Z</published>
    <updated>2016-09-17T05:17:55.000Z</updated>
    
    <content type="html"><![CDATA[<p>MySQL中大多数事务型的存储引擎都不是简单的行级锁。为了提高并发性，他们一般会采用多版本并发控制（MVCC，一种行级锁的变种）来使很多情况下在避免加锁的情况下就实现并发操作，从而是的系统开销更低。</p>
<p>MySQL的InnoDB存储引擎的MCVV，是通过在每行记录后面保存两个隐藏的列来实现。一个保存行的创建时间，另一个保存过期时间。当然这里所说的时间并不是实际时间，是系统版本号。数据库系统在每开始一个事务，其系统版本号就会自动递增。一个事务开始时刻，事务会去当前的系统版本号作为当前事务的事务版本号，用来和查询到的每行记录的版本号做比较。</p>
<table>
<thead>
<tr>
<th>id</th>
<th>fields …</th>
<th>create_version</th>
<th>delete_version</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>….</td>
<td>1</td>
<td></td>
</tr>
<tr>
<td>2</td>
<td>….</td>
<td>2</td>
<td>3</td>
</tr>
</tbody>
</table>
<a id="more"></a>
<h2 id="具体实现"><a href="#具体实现" class="headerlink" title="具体实现"></a>具体实现</h2><p>Repeatable read 隔离级别下，MVCC具体操作：</p>
<h3 id="Select-操作："><a href="#Select-操作：" class="headerlink" title="Select 操作："></a>Select 操作：</h3><p>a. InnoDB 只查找版本号小于当前事务版本号的行（即，行的系统版本号小于或者等于当前事务的系统版本号），以确保当前事务读取到的行，要么是当前事务开始之前就已经存在的行，要么就是当前事务插入或者修改过的行。<br>b. 行的删除版本号要么未定义，要么大于当前事务的版本号。这样可以确保当前事务读取到行，在事务开始之前为被删除。</p>
<p>只有同事符合上述两个条件的记录，才能被作为查询结果被返回。</p>
<h3 id="Insert-操作："><a href="#Insert-操作：" class="headerlink" title="Insert 操作："></a>Insert 操作：</h3><p>InnoDB为新插入的行保存当前事务的版本号作为行版本号。</p>
<h3 id="Delete-操作："><a href="#Delete-操作：" class="headerlink" title="Delete 操作："></a>Delete 操作：</h3><p>InnoDB为删除的每一行记录保存当前的事务版本号作为行删除标识。</p>
<h3 id="Update-操作："><a href="#Update-操作：" class="headerlink" title="Update 操作："></a>Update 操作：</h3><p>InnoDB会插入一条新纪录，保存当前事务版本号作为改行的行版本号，同事保存当前的事务版本号到原来的行作为行删除标识版本号。</p>
<h2 id="多版本并发控制优缺点"><a href="#多版本并发控制优缺点" class="headerlink" title="多版本并发控制优缺点"></a>多版本并发控制优缺点</h2><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><p>通过两个额外的版本号，能使大多数读操作都可以不用加锁，从而使得查询性能更好。</p>
<h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><p>每行记录多需要做存储两个版本号，需要浪费额外的存储空间。</p>
<p><strong>TIPS:</strong><br>MVCC，只在Repeatable read 和read committed两个隔离级别下工作。其他两个隔离级别都和MVCC不兼容，因为 read uncommitted总是读取最新的行，而不是符合当前事务版本号的行，而 serializable 则会对所有读取的行都会加锁。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;MySQL中大多数事务型的存储引擎都不是简单的行级锁。为了提高并发性，他们一般会采用多版本并发控制（MVCC，一种行级锁的变种）来使很多情况下在避免加锁的情况下就实现并发操作，从而是的系统开销更低。&lt;/p&gt;
&lt;p&gt;MySQL的InnoDB存储引擎的MCVV，是通过在每行记录后面保存两个隐藏的列来实现。一个保存行的创建时间，另一个保存过期时间。当然这里所说的时间并不是实际时间，是系统版本号。数据库系统在每开始一个事务，其系统版本号就会自动递增。一个事务开始时刻，事务会去当前的系统版本号作为当前事务的事务版本号，用来和查询到的每行记录的版本号做比较。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;id&lt;/th&gt;
&lt;th&gt;fields …&lt;/th&gt;
&lt;th&gt;create_version&lt;/th&gt;
&lt;th&gt;delete_version&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;….&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;….&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
    
    </summary>
    
      <category term="MySQL" scheme="https://weizhimiao.github.io/categories/MySQL/"/>
    
    
      <category term="MVCC" scheme="https://weizhimiao.github.io/tags/MVCC/"/>
    
      <category term="多版本并发控制" scheme="https://weizhimiao.github.io/tags/%E5%A4%9A%E7%89%88%E6%9C%AC%E5%B9%B6%E5%8F%91%E6%8E%A7%E5%88%B6/"/>
    
  </entry>
  
</feed>
