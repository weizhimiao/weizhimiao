<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>行云流水</title>
  <subtitle>却也碎碎念念</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://weizhimiao.github.io/"/>
  <updated>2016-10-26T13:40:34.000Z</updated>
  <id>https://weizhimiao.github.io/</id>
  
  <author>
    <name>zhimiao</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Logstash学习七</title>
    <link href="https://weizhimiao.github.io/2016/10/26/Logstash%E5%AD%A6%E4%B9%A0%E4%B8%83/"/>
    <id>https://weizhimiao.github.io/2016/10/26/Logstash学习七/</id>
    <published>2016-10-26T13:30:00.000Z</published>
    <updated>2016-10-26T13:40:34.000Z</updated>
    
    <content type="html"><![CDATA[<ul>
<li>贡献Logstash</li>
<li>专业术语</li>
</ul>
<a id="more"></a>
<h2 id="贡献Logstash"><a href="#贡献Logstash" class="headerlink" title="贡献Logstash"></a>贡献Logstash</h2><h3 id="Contributing-to-Logstash"><a href="#Contributing-to-Logstash" class="headerlink" title="Contributing to Logstash"></a>Contributing to Logstash</h3><p>在1.5版之前，Logstash包括每个版本中的所有插件。这使得使用任何插件很容易，但它复杂的插件开发 - 如果一个插件需要修补，Logstash的新版本是必要的。从版本1.5开始，所有插件都独立于Logstash核心。现在，您可以更容易地添加自己的输入，编解码器，过滤器或输出插件到Logstash！</p>
<h3 id="添加插件"><a href="#添加插件" class="headerlink" title="添加插件"></a>添加插件</h3><p>由于现在可以独立于Logstash核心开发和部署插件，因此有一些文档可以指导您完成编码和部署自己的插件的过程：</p>
<ul>
<li><a href="https://www.elastic.co/guide/en/logstash/current/plugin-generator.html" target="_blank" rel="external">生成新的插件</a></li>
<li><a href="http://www.elasticsearch.org/guide/en/logstash/current/_how_to_write_a_logstash_input_plugin.html" target="_blank" rel="external">如何编写一个Logstash输入插件</a></li>
<li><a href="http://www.elasticsearch.org/guide/en/logstash/current/_how_to_write_a_logstash_codec_plugin.html" target="_blank" rel="external">如何编写一个Logstash编解码器插件</a></li>
<li><a href="http://www.elasticsearch.org/guide/en/logstash/current/_how_to_write_a_logstash_filter_plugin.html" target="_blank" rel="external">如何写一个Logstash过滤器插件</a></li>
<li><a href="http://www.elasticsearch.org/guide/en/logstash/current/_how_to_write_a_logstash_output_plugin.html" target="_blank" rel="external">如何写一个Logstash输出插件</a></li>
<li><a href="https://www.elastic.co/guide/en/logstash/current/contributing-patch-plugin.html" target="_blank" rel="external">向Logstash插件提供修补程序</a></li>
<li><a href="https://www.elastic.co/guide/en/logstash/current/community-maintainer.html" target="_blank" rel="external">社区维护者指南</a></li>
<li><a href="https://www.elastic.co/guide/en/logstash/current/submitting-plugin.html" target="_blank" rel="external">提交插件</a></li>
</ul>
<h3 id="Plugin-API-Changes-2-0-于2-0中添加。"><a href="#Plugin-API-Changes-2-0-于2-0中添加。" class="headerlink" title="Plugin API Changes [2.0]于2.0中添加。"></a>Plugin API Changes [2.0]于2.0中添加。</h3><p>Logstash的2.0版本改变了输入插件的关闭方式，以提高关闭的可靠性。有三种方法用于插件关闭：stop, stop?, 和close。</p>
<p>从外部线程调用stop方法。此方法通知插件停止。<br>停止？方法在已为该插件调用stop方法时返回true。<br>close方法在插件的run方法和插件的线程都退出后执行最后的记事和清理。 close方法是在Logstash的早期版本中称为teardown的方法的新名称。<br>关机，完成，完成，运行？和终止？方法是多余的，不再存在于Plugin Base类中。</p>
<p>新插件关闭API的示例代码可用。</p>
<h3 id="扩展Logstash核心"><a href="#扩展Logstash核心" class="headerlink" title="扩展Logstash核心"></a>扩展Logstash核心</h3><p>我们还欢迎对Logstash核心功能集的贡献和错误修复。</p>
<p>请阅读我们的<a href="https://github.com/elastic/logstash/blob/master/CONTRIBUTING.md" target="_blank" rel="external">贡献指南</a>和Logstash<a href="https://github.com/elastic/logstash/blob/master/README.md" target="_blank" rel="external">自述文件</a>。</p>
<h2 id="专业术语"><a href="#专业术语" class="headerlink" title="专业术语"></a>专业术语</h2><ul>
<li><code>@metadata</code><blockquote>
<p>用于存储不希望包含在输出事件中的内容的特殊字段。例如，@metadata字段对于创建在条件语句中使用的临时字段很有用。</p>
</blockquote>
</li>
</ul>
<ul>
<li><p><code>codec plugin</code></p>
<blockquote>
<p>用于更改事件的数据表示的Logstash插件。编解码器本质上是可以作为输入或输出的一部分操作的流过滤器。编解码器使您能够将消息的传输与序列化过程分离。流行的编解码器包括json，msgpack和plain（text）。</p>
</blockquote>
</li>
<li><p><code>conditional</code></p>
<blockquote>
<p>基于语句（也称为条件）是真还是假执行某些操作的控制流。 Logstash支持if，else if和else语句。您可以使用条件语句根据您指定的条件应用过滤器和将事件发送到特定输出。</p>
</blockquote>
</li>
<li><p><code>event</code></p>
<blockquote>
<p>单个信息单元，包含时间戳加上附加数据。事件通过输入到达，随后被解析，加时间戳并通过Logstash管道传递。</p>
</blockquote>
</li>
<li><p><code>field</code></p>
<blockquote>
<p>事件属性。例如，apache访问日志中的每个事件具有诸如状态码（200,404），请求路径（“/”，“index.html”），HTTP动词（GET，POST），客户端IP地址，等等。 Logstash使用术语“fields”来引用这些属性。</p>
</blockquote>
</li>
<li><p><code>field reference</code></p>
<blockquote>
<p>对事件字段的引用。此引用可能会出现在Logstash配置文件中的输出块或过滤器块中。字段引用通常包装在方括号（[]）中，例如[fieldname]。如果您要引用顶级字段，则可以省略[]，然后只需使用字段名称。要引用嵌套字段，请指定该字段的完整路径： [top-level field][nested field].</p>
</blockquote>
</li>
<li><p><code>filter plugin</code></p>
<blockquote>
<p>一个对事件执行中间处理的Logstash插件。通常，过滤器在事件数据已经通过输入被摄取之后，通过根据配置规则突变，丰富和/或修改数据来对事件数据进行操作。过滤器通常根据事件的特征有条件地应用。热门插件包括grok，mutate，drop，clone和geoip。过滤器级是可选的。</p>
</blockquote>
</li>
<li><p><code>gem</code></p>
<blockquote>
<p>在RubyGems.org上托管的自包含代码包。 Logstash插件包装为Ruby Gems。您可以使用Logstash插件管理器来管理Logstash gem。</p>
</blockquote>
</li>
<li><p><code>hot thread</code></p>
<blockquote>
<p>具有高CPU使用率并且执行时间长于正常时间的Java线程。</p>
</blockquote>
</li>
<li><p><code>input plugin</code></p>
<blockquote>
<p>一个用于从特定源读取事件数据的Logstash插件。输入插件是Logstash事件处理管道的第一个阶段。热门输入插件包括 file, syslog, redis, and beats.</p>
</blockquote>
</li>
<li><p><code>indexer</code></p>
<blockquote>
<p>一个Logstash实例，负责与Elasticsearch集群连接，以便索引事件数据。</p>
</blockquote>
</li>
<li><p><code>message broker</code></p>
<blockquote>
<p>也称为消息缓冲区或消息队列，消息代理是外部软件（例如Redis，Kafka或RabbitMQ），它将来自Logstash运输程序实例的消息存储为中间存储，等待由Logstash索引器实例处理。</p>
</blockquote>
</li>
<li><p><code>output plugin</code></p>
<blockquote>
<p>一个用于将事件数据写入特定目标的Logstash插件。输出是事件管道中的最后一个阶段。热门输出插件包括elasticsearch，file，graphite和statsd。</p>
</blockquote>
</li>
<li><p><code>pipeline</code></p>
<blockquote>
<p>用于描述通过Logstash工作流的事件流的术语。流水线通常由一系列输入，滤波器和输出级组成。输入阶段从源获取数据并生成事件，过滤阶段（可选），修改事件数据，输出阶段将数据写入目标。输入和输出支持编解码器，使您能够在数据进入或退出流水线时对其进行编码或解码，而无需使用单独的过滤器。</p>
</blockquote>
</li>
<li><p><code>plugin</code></p>
<blockquote>
<p>一个自包含的软件包，实现Logstash事件处理管道中的一个阶段。可用插件列表包括输入插件，输出插件，编解码器插件和过滤器插件。这些插件实现为Ruby gem并且托管在RubyGems.org上。通过配置插件来定义事件处理管道的阶段。</p>
</blockquote>
</li>
<li><p><code>plugin manager</code></p>
<blockquote>
<p>通过bin / logstash-plugin脚本访问，插件管理器使您能够管理Logstash部署中的插件的生命周期。您可以使用插件管理器命令行界面（CLI）安装，卸载和升级插件。</p>
</blockquote>
</li>
<li><p><code>shipper</code></p>
<blockquote>
<p>将事件发送到Logstash的另一个实例或其他一些应用程序的Logstash实例。</p>
</blockquote>
</li>
<li><p><code>worker</code></p>
<blockquote>
<p>Logstash使用的过滤器线程模型，其中每个工作程序接收事件并按顺序应用所有过滤器，然后将事件发送到输出队列。这允许CPU之间的可扩展性，因为许多过滤器是CPU密集型。</p>
</blockquote>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;贡献Logstash&lt;/li&gt;
&lt;li&gt;专业术语&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="Logstash" scheme="https://weizhimiao.github.io/categories/Logstash/"/>
    
    
      <category term="Logstash" scheme="https://weizhimiao.github.io/tags/Logstash/"/>
    
  </entry>
  
  <entry>
    <title>Logstash学习五</title>
    <link href="https://weizhimiao.github.io/2016/10/26/Logstash%E5%AD%A6%E4%B9%A0%E4%BA%94/"/>
    <id>https://weizhimiao.github.io/2016/10/26/Logstash学习五/</id>
    <published>2016-10-26T12:30:00.000Z</published>
    <updated>2016-10-26T09:26:13.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="过滤插件"><a href="#过滤插件" class="headerlink" title="过滤插件"></a>过滤插件</h2><p>过滤器插件对事件执行中间处理。 过滤器通常根据事件的特征有条件地应用。</p>
<p>以下过滤器插件可用：</p>
<p><strong>aggregate</strong></p>
<blockquote>
<p>聚合来自单个任务的多个事件的信息</p>
</blockquote>
<p><a href="https://github.com/logstash-plugins/logstash-filter-aggregate" target="_blank" rel="external">logstash-filter-aggregate</a></p>
<p><strong>alter</strong></p>
<blockquote>
<p>对mutate过滤器不处理的字段执行常规更改</p>
</blockquote>
<p><a href="https://github.com/logstash-plugins/logstash-filter-alter" target="_blank" rel="external">logstash-filter-alter</a></p>
<p><strong>anonymize</strong></p>
<blockquote>
<p>将字段值替换为一致的散列</p>
</blockquote>
<p><a href="https://github.com/logstash-plugins/logstash-filter-anonymize" target="_blank" rel="external">logstash-filter-anonymize</a></p>
<p><strong>collate</strong></p>
<blockquote>
<p>按时间或计数整理事件</p>
</blockquote>
<p><a href="https://github.com/logstash-plugins/logstash-filter-collate" target="_blank" rel="external">logstash-filter-collate</a></p>
<p><strong>csv</strong></p>
<blockquote>
<p>将逗号分隔的值数据解析为单个字段</p>
</blockquote>
<p><a href="https://github.com/logstash-plugins/logstash-filter-csv" target="_blank" rel="external">logstash-filter-csv</a></p>
<p><strong>cidr</strong></p>
<blockquote>
<p>根据网络块列表检查IP地址</p>
</blockquote>
<p><a href="https://github.com/logstash-plugins/logstash-filter-cidr" target="_blank" rel="external">logstash-filter-cidr</a></p>
<p><strong>clone</strong></p>
<blockquote>
<p>复制事件</p>
</blockquote>
<p><a href="https://github.com/logstash-plugins/logstash-filter-clone" target="_blank" rel="external">logstash-filter-clone</a></p>
<p><strong>cipher</strong></p>
<blockquote>
<p>应用或删除事件的密码</p>
</blockquote>
<p><a href="https://github.com/logstash-plugins/logstash-filter-cipher" target="_blank" rel="external">logstash-filter-cipher</a></p>
<p><strong>checksum</strong></p>
<blockquote>
<p>基于事件中的字段创建校验和</p>
</blockquote>
<p><a href="https://github.com/logstash-plugins/logstash-filter-checksum" target="_blank" rel="external">logstash-filter-checksum</a></p>
<p><strong>date</strong></p>
<blockquote>
<p>解析从用作事件的Logstash时间戳的字段开始</p>
</blockquote>
<p><a href="https://github.com/logstash-plugins/logstash-filter-date" target="_blank" rel="external">logstash-filter-date</a></p>
<p><strong>de_dot</strong></p>
<blockquote>
<p>计算上昂贵的过滤器，从字段名称中删除点</p>
</blockquote>
<p><a href="https://github.com/logstash-plugins/logstash-filter-de_dot" target="_blank" rel="external">logstash-filter-de_dot</a></p>
<p><strong>dns</strong></p>
<blockquote>
<p>执行标准或反向DNS查找</p>
</blockquote>
<p><a href="https://github.com/logstash-plugins/logstash-filter-dns" target="_blank" rel="external">logstash-filter-dns</a></p>
<p><strong>drop</strong></p>
<blockquote>
<p>删除所有事件</p>
</blockquote>
<p><a href="https://github.com/logstash-plugins/logstash-filter-drop" target="_blank" rel="external">logstash-filter-drop</a></p>
<p><strong>elasticsearch</strong></p>
<blockquote>
<p>将字段从Elasticsearch中的先前日志事件复制到当前事件</p>
</blockquote>
<p><a href="https://github.com/logstash-plugins/logstash-filter-elasticsearch" target="_blank" rel="external">logstash-filter-elasticsearch</a></p>
<p><strong>extractnumbers</strong></p>
<blockquote>
<p>从字符串中提取数字</p>
</blockquote>
<p><a href="https://github.com/logstash-plugins/logstash-filter-extractnumbers" target="_blank" rel="external">logstash-filter-extractnumbers</a></p>
<p><strong>environment</strong></p>
<blockquote>
<p>将环境变量存储为元数据子字段</p>
</blockquote>
<p><a href="https://github.com/logstash-plugins/logstash-filter-environment" target="_blank" rel="external">logstash-filter-environment</a></p>
<p><strong>elapsed</strong></p>
<blockquote>
<p>计算一对事件之间经过的时间</p>
</blockquote>
<p><a href="https://github.com/logstash-plugins/logstash-filter-elapsed" target="_blank" rel="external">logstash-filter-elapsed</a></p>
<p><strong>fingerprint</strong></p>
<blockquote>
<p>通过用一致的哈希替换值来指纹字段</p>
</blockquote>
<p><a href="https://github.com/logstash-plugins/logstash-filter-fingerprint" target="_blank" rel="external">logstash-filter-fingerprint</a></p>
<p><strong>geoip</strong></p>
<blockquote>
<p>添加有关IP地址的地理信息</p>
</blockquote>
<p><a href="https://github.com/logstash-plugins/logstash-filter-geoip" target="_blank" rel="external">logstash-filter-geoip</a></p>
<p><strong>grok</strong></p>
<blockquote>
<p>将非结构化事件数据解析到字段中</p>
</blockquote>
<p><a href="https://github.com/logstash-plugins/logstash-filter-grok" target="_blank" rel="external">logstash-filter-grok</a></p>
<p><strong>i18n</strong></p>
<blockquote>
<p>从字段中删除特殊字符</p>
</blockquote>
<p><a href="https://github.com/logstash-plugins/logstash-filter-i18n" target="_blank" rel="external">logstash-filter-i18n</a></p>
<p><strong>json</strong></p>
<blockquote>
<p>将字段序列化为JSON</p>
</blockquote>
<p><a href="https://github.com/logstash-plugins/logstash-filter-json" target="_blank" rel="external">logstash-filter-json</a></p>
<p><strong>json_encode</strong></p>
<blockquote>
<p>将字段序列化为JSON</p>
</blockquote>
<p><a href="https://github.com/logstash-plugins/logstash-filter-json_encode" target="_blank" rel="external">logstash-filter-json_encode</a></p>
<p><strong>kv</strong></p>
<blockquote>
<p>解析键值对</p>
</blockquote>
<p><a href="https://github.com/logstash-plugins/logstash-filter-kv" target="_blank" rel="external">logstash-filter-kv</a></p>
<p><strong>mutate</strong></p>
<blockquote>
<p>在字段上执行突变</p>
</blockquote>
<p><a href="https://github.com/logstash-plugins/logstash-filter-mutate" target="_blank" rel="external">logstash-filter-mutate</a></p>
<p><strong>metrics</strong></p>
<blockquote>
<p>汇总指标</p>
</blockquote>
<p><a href="https://github.com/logstash-plugins/logstash-filter-metrics" target="_blank" rel="external">logstash-filter-metrics</a></p>
<p><strong>multiline</strong></p>
<blockquote>
<p>将多行合并成一个事件</p>
</blockquote>
<p><a href="https://github.com/logstash-plugins/logstash-filter-multiline" target="_blank" rel="external">logstash-filter-multiline</a></p>
<p><strong>metaevent</strong></p>
<blockquote>
<p>将任意字段添加到事件</p>
</blockquote>
<p><a href="https://github.com/logstash-plugins/logstash-filter-metaevent" target="_blank" rel="external">logstash-filter-metaevent</a></p>
<p><strong>prune</strong></p>
<blockquote>
<p>将基于字段列表的事件数据修剪为黑名单或白名单</p>
</blockquote>
<p><a href="https://github.com/logstash-plugins/logstash-filter-prune" target="_blank" rel="external">logstash-filter-prune</a></p>
<p><strong>punct</strong></p>
<blockquote>
<p>从字段中删除所有非标点符号内容</p>
</blockquote>
<p><a href="https://github.com/logstash-plugins/logstash-filter-punct" target="_blank" rel="external">logstash-filter-punct</a></p>
<p><strong>ruby</strong></p>
<blockquote>
<p>执行任意Ruby代码</p>
</blockquote>
<p><a href="https://github.com/logstash-plugins/logstash-filter-ruby" target="_blank" rel="external">logstash-filter-ruby</a></p>
<p><strong>range</strong></p>
<blockquote>
<p>检查指定的字段是否保持在给定的大小或长度限制内</p>
</blockquote>
<p><a href="https://github.com/logstash-plugins/logstash-filter-range" target="_blank" rel="external">logstash-filter-range</a></p>
<p><strong>syslog_pri</strong></p>
<blockquote>
<p>解析系统日志消息的PRI（优先级）字段</p>
</blockquote>
<p><a href="https://github.com/logstash-plugins/logstash-filter-syslog_pri" target="_blank" rel="external">logstash-filter-syslog_pri</a></p>
<p><strong>sleep</strong></p>
<blockquote>
<p>睡眠指定的时间跨度</p>
</blockquote>
<p><a href="https://github.com/logstash-plugins/logstash-filter-sleep" target="_blank" rel="external">logstash-filter-sleep</a></p>
<p><strong>split</strong></p>
<blockquote>
<p>将多行消息拆分为不同的事件</p>
</blockquote>
<p><a href="https://github.com/logstash-plugins/logstash-filter-split" target="_blank" rel="external">logstash-filter-split</a></p>
<p><strong>throttle</strong></p>
<blockquote>
<p>调节事件数</p>
</blockquote>
<p><a href="https://github.com/logstash-plugins/logstash-filter-throttle" target="_blank" rel="external">logstash-filter-throttle</a></p>
<p><strong>translate</strong></p>
<blockquote>
<p>基于散列或YAML文件替换字段内容</p>
</blockquote>
<p><a href="https://github.com/logstash-plugins/logstash-filter-translate" target="_blank" rel="external">logstash-filter-translate</a></p>
<p><strong>uuid</strong></p>
<blockquote>
<p>向事件添加UUID</p>
</blockquote>
<p><a href="https://github.com/logstash-plugins/logstash-filter-uuid" target="_blank" rel="external">logstash-filter-uuid</a></p>
<p><strong>urldecode</strong></p>
<blockquote>
<p>解码网址编码字段</p>
</blockquote>
<p><a href="https://github.com/logstash-plugins/logstash-filter-urldecode" target="_blank" rel="external">logstash-filter-urldecode</a></p>
<p><strong>useragent</strong></p>
<blockquote>
<p>将用户代理字符串解析为字段</p>
</blockquote>
<p><a href="https://github.com/logstash-plugins/logstash-filter-useragent" target="_blank" rel="external">logstash-filter-useragent</a></p>
<p><strong>xml</strong></p>
<blockquote>
<p>将XML解析成字段</p>
</blockquote>
<p><a href="https://github.com/logstash-plugins/logstash-filter-xml" target="_blank" rel="external">logstash-filter-xml</a></p>
<p><strong>zeromq</strong></p>
<blockquote>
<p>将事件发送到ZeroMQ</p>
</blockquote>
<p><a href="https://github.com/logstash-plugins/logstash-filter-zeromq" target="_blank" rel="external">logstash-filter-zeromq</a></p>
<h3 id="csv"><a href="#csv" class="headerlink" title="csv"></a>csv</h3><p>CSV过滤器接收包含CSV数据的事件字段，对其进行解析，并将其存储为单个字段（可以选择指定名称）。 此过滤器还可以使用任何分隔符解析数据，而不仅仅是逗号。</p>
<h4 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h4><p>此插件支持以下配置选项：</p>
<p>所需的配置选项：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">csv &#123;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>可用配置选项：</p>
<table>
<thead>
<tr>
<th>Setting</th>
<th>Input type</th>
<th>Required</th>
<th>Default value</th>
</tr>
</thead>
<tbody>
<tr>
<td>add_field</td>
<td>hash</td>
<td>No</td>
<td>{}</td>
</tr>
<tr>
<td>add_tag</td>
<td>array</td>
<td>No</td>
<td>[]</td>
</tr>
<tr>
<td>autogenerate_column_names</td>
<td>boolean</td>
<td>No</td>
<td>true</td>
</tr>
<tr>
<td>columns</td>
<td>array</td>
<td>No</td>
<td>[]</td>
</tr>
<tr>
<td>convert</td>
<td>hash</td>
<td>No</td>
<td>{}</td>
</tr>
<tr>
<td>periodic_flush</td>
<td>boolean</td>
<td>No</td>
<td>false</td>
</tr>
<tr>
<td>quote_char</td>
<td>string</td>
<td>No</td>
<td>“\””</td>
</tr>
<tr>
<td>remove_field</td>
<td>array</td>
<td>No</td>
<td>[]</td>
</tr>
<tr>
<td>remove_tag</td>
<td>array</td>
<td>No</td>
<td>[]</td>
</tr>
<tr>
<td>separator</td>
<td>string</td>
<td>No</td>
<td>“,”</td>
</tr>
<tr>
<td>skip_empty_columns</td>
<td>boolean</td>
<td>No</td>
<td>false</td>
</tr>
<tr>
<td>source</td>
<td>string</td>
<td>No</td>
<td>“message”</td>
</tr>
<tr>
<td>target</td>
<td>string</td>
<td>No</td>
</tr>
</tbody>
</table>
<h4 id="详情"><a href="#详情" class="headerlink" title="详情"></a>详情</h4><p><strong>add_field</strong></p>
<ul>
<li>值类型是哈希</li>
<li>默认值为{}</li>
</ul>
<p>如果此过滤器成功，请将任意字段添加到此事件。字段名称可以是动态的，并使用<code>％{field}</code>包括事件的部分。</p>
<p>例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">filter &#123;</div><div class="line">  csv &#123;</div><div class="line">    add_field =&gt; &#123; &quot;foo_%&#123;somefield&#125;&quot; =&gt; &quot;Hello world, from %&#123;host&#125;&quot; &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"># You can also add multiple fields at once:</div><div class="line">filter &#123;</div><div class="line">  csv &#123;</div><div class="line">    add_field =&gt; &#123;</div><div class="line">      &quot;foo_%&#123;somefield&#125;&quot; =&gt; &quot;Hello world, from %&#123;host&#125;&quot;</div><div class="line">      &quot;new_field&quot; =&gt; &quot;new_static_value&quot;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>如果事件有字段“somefield”==“hello”此过滤器，如果成功，将添加字段foo_hello，如果它存在，与上面的值和％{host}块替换的事件中的值。第二个例子也将添加一个硬编码字段。</p>
<p><strong>add_tag</strong></p>
<ul>
<li>值类型是数组</li>
<li>默认值为[]</li>
</ul>
<p>如果此过滤器成功，请向事件中添加任意标记。标签可以是动态的，并使用％{字段}语法包括事件的部分。</p>
<p>例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">filter &#123;</div><div class="line">  csv &#123;</div><div class="line">    add_tag =&gt; [ &quot;foo_%&#123;somefield&#125;&quot; ]</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"># You can also add multiple tags at once:</div><div class="line">filter &#123;</div><div class="line">  csv &#123;</div><div class="line">    add_tag =&gt; [ &quot;foo_%&#123;somefield&#125;&quot;, &quot;taggedy_tag&quot;]</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>如果事件有字段“somefield”==“hello”这个过滤器，在成功时，将添加一个标签foo_hello（第二个例子当然会添加一个taggedy_tag标签）。</p>
<p><strong>autogenerate_column_names</strong></p>
<ul>
<li>值类型是布尔值</li>
<li>默认值为true</li>
</ul>
<p>定义列名称是否应自动生成。默认为true。如果设置为false，将不会解析不具有指定的头的列。</p>
<p><strong>columns</strong></p>
<ul>
<li>值类型是数组</li>
<li>默认值为[]</li>
</ul>
<p>定义列名称列表（按照它们在CSV中显示的顺序，就像它是标题行一样）。如果未配置列，或没有指定足够的列，则默认列名称为“column1”，“column2”等。如果数据中的列超过此列列表中指定的列数，自动编号：（例如，“user_defined_1”，“user_defined_2”，“column3”，“column4”等）</p>
<p><strong>convert</strong></p>
<ul>
<li>值类型是哈希</li>
<li>默认值为{}</li>
</ul>
<p>定义要应用于列的一组数据类型转换。可能的转换是整数，浮点，日期，date_time，布尔值</p>
<p>示例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">filter &#123;</div><div class="line">  csv &#123;</div><div class="line">    convert =&gt; &#123; &quot;column1&quot; =&gt; &quot;integer&quot;, &quot;column2&quot; =&gt; &quot;boolean&quot; &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><strong>periodic_flush</strong></p>
<ul>
<li>值类型是布尔值</li>
<li>默认值为false</li>
</ul>
<p>定期调用过滤器flush方法。可选的。</p>
<p><strong>quote_char</strong></p>
<ul>
<li>值类型是字符串</li>
<li>默认值为“<code>\</code>”“</li>
</ul>
<p>定义用于报告CSV字段的字符。如果未指定此属性，则默认值为双引号“。可选。</p>
<p><strong>remove_field</strong></p>
<ul>
<li>值类型是数组</li>
<li>默认值为[]</li>
</ul>
<p>如果此过滤器成功，请从此事件中删除任意字段。例：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">filter &#123;</div><div class="line">  csv &#123;</div><div class="line">    remove_field =&gt; [ &quot;foo_%&#123;somefield&#125;&quot; ]</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"># You can also remove multiple fields at once:</div><div class="line">filter &#123;</div><div class="line">  csv &#123;</div><div class="line">    remove_field =&gt; [ &quot;foo_%&#123;somefield&#125;&quot;, &quot;my_extraneous_field&quot; ]</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>如果事件有字段“somefield”==“hello”此过滤器，如果成功，将删除名为foo_hello的字段（如果存在）。第二个示例将删除一个附加的非动态字段。</p>
<p><strong>remove_tag</strong></p>
<ul>
<li>值类型是数组</li>
<li>默认值为[]</li>
</ul>
<p>如果此过滤器成功，请从事件中删除任意标记。标签可以是动态的，并使用％{字段}语法包括事件的部分。</p>
<p>例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">filter &#123;</div><div class="line">  csv &#123;</div><div class="line">    remove_tag =&gt; [ &quot;foo_%&#123;somefield&#125;&quot; ]</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"># You can also remove multiple tags at once:</div><div class="line">filter &#123;</div><div class="line">  csv &#123;</div><div class="line">    remove_tag =&gt; [ &quot;foo_%&#123;somefield&#125;&quot;, &quot;sad_unwanted_tag&quot;]</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>如果事件有字段“somefield”==“hello”此过滤器，如果成功，将删除标签foo_hello如果它存在。第二个例子也会删除一个悲伤的，不需要的标签。</p>
<p><strong>separator</strong></p>
<ul>
<li>值类型是字符串</li>
<li>默认值为“，”</li>
</ul>
<p>定义列分隔符值。如果未指定此选项，则默认值为逗号，。可选的。</p>
<p><strong>skip_empty_columns</strong></p>
<ul>
<li>值类型是布尔值</li>
<li>默认值为false</li>
</ul>
<p>定义是否应跳过空列。默认为false。如果设置为true，将不会设置不包含值的列。</p>
<p><strong>source</strong></p>
<ul>
<li>值类型是字符串</li>
<li>默认值为“message”</li>
</ul>
<p>源字段值中的CSV数据将扩展为数据结构。</p>
<p><strong>target</strong></p>
<ul>
<li>值类型是字符串</li>
<li>此设置没有默认值。</li>
</ul>
<p>定义用于放置数据的目标字段。默认为写入事件的根。</p>
<h3 id="alter"><a href="#alter" class="headerlink" title="alter"></a>alter</h3><blockquote>
<p>这是一个社区维护的插件！ 它默认不随Logstash一起提供，但它很容易安装通过运行bin / logstash-plugin install logstash-filter-alter。</p>
</blockquote>
<p>alter过滤器允许您对不包括在正常mutate过滤器中的字段进行常规更改。</p>
<blockquote>
<p>注意: 此插件提供的功能可能会在未来版本中合并到mutate过滤器中。</p>
</blockquote>
<h4 id="概述-1"><a href="#概述-1" class="headerlink" title="概述"></a>概述</h4><p>此插件支持以下配置选项：</p>
<p>所需的配置选项：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">alter &#123;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>可用配置选项：</p>
<table>
<thead>
<tr>
<th>Setting</th>
<th>Input type</th>
<th>Required</th>
<th>Default value</th>
</tr>
</thead>
<tbody>
<tr>
<td>add_field</td>
<td>hash</td>
<td>No</td>
<td>{}</td>
</tr>
<tr>
<td>add_tag</td>
<td>array</td>
<td>No</td>
<td>[]</td>
</tr>
<tr>
<td>coalesce</td>
<td>array</td>
<td>No</td>
<td></td>
</tr>
<tr>
<td>condrewrite</td>
<td>array</td>
<td>No</td>
<td></td>
</tr>
<tr>
<td>condrewriteother</td>
<td>array</td>
<td>No</td>
<td></td>
</tr>
<tr>
<td>periodic_flush</td>
<td>boolean</td>
<td>No</td>
<td>false</td>
</tr>
<tr>
<td>remove_field</td>
<td>array</td>
<td>No</td>
<td>[]</td>
</tr>
<tr>
<td>remove_tag</td>
<td>array</td>
<td>No</td>
<td>[]</td>
</tr>
</tbody>
</table>
<h4 id="详情-1"><a href="#详情-1" class="headerlink" title="详情"></a>详情</h4><p><strong>add_field</strong></p>
<ul>
<li>值类型是哈希</li>
<li>默认值为{}</li>
</ul>
<p>如果此过滤器成功，请将任意字段添加到此事件。字段名称可以是动态的，并使用％{field}包括事件的部分。</p>
<p>例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">filter &#123;</div><div class="line">  alter &#123;</div><div class="line">    add_field =&gt; &#123; &quot;foo_%&#123;somefield&#125;&quot; =&gt; &quot;Hello world, from %&#123;host&#125;&quot; &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"># You can also add multiple fields at once:</div><div class="line">filter &#123;</div><div class="line">  alter &#123;</div><div class="line">    add_field =&gt; &#123;</div><div class="line">      &quot;foo_%&#123;somefield&#125;&quot; =&gt; &quot;Hello world, from %&#123;host&#125;&quot;</div><div class="line">      &quot;new_field&quot; =&gt; &quot;new_static_value&quot;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>如果事件有字段“somefield”==“hello”此过滤器，如果成功，将添加字段foo_hello，如果它存在，与上面的值和％{host}块替换的事件中的值。第二个例子也将添加一个硬编码字段。</p>
<p><strong>add_tag</strong></p>
<ul>
<li>值类型是数组</li>
<li>默认值为[]</li>
</ul>
<p>如果此过滤器成功，请向事件中添加任意标记。标签可以是动态的，并使用％{字段}语法包括事件的部分。</p>
<p>例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">filter &#123;</div><div class="line">  alter &#123;</div><div class="line">    add_tag =&gt; [ &quot;foo_%&#123;somefield&#125;&quot; ]</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"># You can also add multiple tags at once:</div><div class="line">filter &#123;</div><div class="line">  alter &#123;</div><div class="line">    add_tag =&gt; [ &quot;foo_%&#123;somefield&#125;&quot;, &quot;taggedy_tag&quot;]</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>如果事件有字段“somefield”==“hello”这个过滤器，在成功时，将添加一个标签foo_hello（第二个例子当然会添加一个taggedy_tag标签）。</p>
<p><strong>coalesce</strong></p>
<ul>
<li>值类型是数组</li>
<li>此设置没有默认值。</li>
</ul>
<p>将field_name的值设置为其参数中的第一个非空表达式。</p>
<p>例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">filter &#123;</div><div class="line">  alter &#123;</div><div class="line">    coalesce =&gt; [</div><div class="line">         &quot;field_name&quot;, &quot;value1&quot;, &quot;value2&quot;, &quot;value3&quot;, ...</div><div class="line">    ]</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><strong>condrewrite</strong></p>
<ul>
<li>值类型是数组</li>
<li>此设置没有默认值。</li>
</ul>
<p>如果实际内容等于预期值，请将字段的内容更改为指定值。</p>
<p>例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">filter &#123;</div><div class="line">  alter &#123;</div><div class="line">    condrewrite =&gt; [</div><div class="line">         &quot;field_name&quot;, &quot;expected_value&quot;, &quot;new_value&quot;,</div><div class="line">         &quot;field_name2&quot;, &quot;expected_value2, &quot;new_value2&quot;,</div><div class="line">         ....</div><div class="line">       ]</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><strong>condrewriteother</strong></p>
<ul>
<li>值类型是数组</li>
<li>此设置没有默认值。</li>
</ul>
<p>如果另一个字段的内容等于预期值，请将字段的内容更改为指定的值。</p>
<p>例：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">filter &#123;</div><div class="line">  alter &#123;</div><div class="line">    condrewriteother =&gt; [</div><div class="line">         &quot;field_name&quot;, &quot;expected_value&quot;, &quot;field_name_to_change&quot;, &quot;value&quot;,</div><div class="line">         &quot;field_name2&quot;, &quot;expected_value2, &quot;field_name_to_change2&quot;, &quot;value2&quot;,</div><div class="line">         ....</div><div class="line">    ]</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>periodic_flush</strong></p>
<ul>
<li>值类型是布尔值</li>
<li>默认值为false</li>
</ul>
<p>定期调用过滤器flush方法。可选的。</p>
<p><strong>remove_field</strong></p>
<ul>
<li>值类型是数组</li>
<li>默认值为[]</li>
</ul>
<p>如果此过滤器成功，请从此事件中删除任意字段。例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">filter &#123;</div><div class="line">  alter &#123;</div><div class="line">    remove_field =&gt; [ &quot;foo_%&#123;somefield&#125;&quot; ]</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"># You can also remove multiple fields at once:</div><div class="line">filter &#123;</div><div class="line">  alter &#123;</div><div class="line">    remove_field =&gt; [ &quot;foo_%&#123;somefield&#125;&quot;, &quot;my_extraneous_field&quot; ]</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>如果事件有字段“somefield”==“hello”此过滤器，如果成功，将删除名为foo_hello的字段（如果存在）。第二个示例将删除一个附加的非动态字段。</p>
<p><strong>remove_tag</strong></p>
<ul>
<li>值类型是数组</li>
<li>默认值为[]</li>
</ul>
<p>如果此过滤器成功，请从事件中删除任意标记。标签可以是动态的，并使用％{字段}语法包括事件的部分。</p>
<p>例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">filter &#123;</div><div class="line">  alter &#123;</div><div class="line">    remove_tag =&gt; [ &quot;foo_%&#123;somefield&#125;&quot; ]</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"># You can also remove multiple tags at once:</div><div class="line">filter &#123;</div><div class="line">  alter &#123;</div><div class="line">    remove_tag =&gt; [ &quot;foo_%&#123;somefield&#125;&quot;, &quot;sad_unwanted_tag&quot;]</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>如果事件有字段“somefield”==“hello”此过滤器，如果成功，将删除标签foo_hello如果它存在。第二个例子也会删除一个悲伤的，不需要的标签。</p>
<h3 id="date"><a href="#date" class="headerlink" title="date"></a>date</h3><p>日期过滤器用于解析字段中的日期，然后使用该日期或时间戳作为事件的logstash时间戳。</p>
<p>例如，syslog事件通常具有如下所示的时间戳：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">“Apr 17 09:32:01”</div></pre></td></tr></table></figure></p>
<p>您将使用日期格式MMM dd HH：mm：ss解析此。</p>
<p>日期过滤器对排序事件和回填旧数据尤为重要。 如果您在活动中没有得到正确的日期，那么稍后再搜索这些日期可能会出现乱序。</p>
<p>在没有此过滤器的情况下，如果时间戳尚未在事件中设置，则logstash将基于第一次看到事件（在输入时间）时选择时间戳。 例如，对于文件输入，时间戳设置为每次读取的时间。</p>
<h4 id="概述-2"><a href="#概述-2" class="headerlink" title="概述"></a>概述</h4><p>此插件支持以下配置选项：</p>
<p>所需的配置选项：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">date &#123;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>可用配置选项：</p>
<table>
<thead>
<tr>
<th>Setting</th>
<th>Input type</th>
<th>Required</th>
<th>Default value</th>
</tr>
</thead>
<tbody>
<tr>
<td>add_field</td>
<td>hash</td>
<td>No</td>
<td>{}</td>
</tr>
<tr>
<td>add_tag</td>
<td>array</td>
<td>No</td>
<td>[]</td>
</tr>
<tr>
<td>locale</td>
<td>string</td>
<td>No</td>
<td></td>
</tr>
<tr>
<td>match</td>
<td>array</td>
<td>No</td>
<td>[]</td>
</tr>
<tr>
<td>periodic_flush</td>
<td>boolean</td>
<td>No</td>
<td>false</td>
</tr>
<tr>
<td>remove_field</td>
<td>array</td>
<td>No</td>
<td>[]</td>
</tr>
<tr>
<td>remove_tag</td>
<td>array</td>
<td>No</td>
<td>[]</td>
</tr>
<tr>
<td>tag_on_failure</td>
<td>array</td>
<td>No</td>
<td><code>[&quot;_dateparsefailure&quot;]</code></td>
</tr>
<tr>
<td>target</td>
<td>string</td>
<td>No</td>
<td>“<code>@timestamp</code>“</td>
</tr>
<tr>
<td>timezone</td>
<td>string</td>
<td>No</td>
<td></td>
</tr>
</tbody>
</table>
<h4 id="详情-2"><a href="#详情-2" class="headerlink" title="详情"></a>详情</h4><p><strong>add_field</strong></p>
<ul>
<li>值类型是哈希</li>
<li>默认值为{}</li>
</ul>
<p>如果此过滤器成功，请将任意字段添加到此事件。字段名称可以是动态的，并使用％{field}包括事件的部分。</p>
<p>例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">filter &#123;</div><div class="line">  date &#123;</div><div class="line">    add_field =&gt; &#123; &quot;foo_%&#123;somefield&#125;&quot; =&gt; &quot;Hello world, from %&#123;host&#125;&quot; &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"># You can also add multiple fields at once:</div><div class="line">filter &#123;</div><div class="line">  date &#123;</div><div class="line">    add_field =&gt; &#123;</div><div class="line">      &quot;foo_%&#123;somefield&#125;&quot; =&gt; &quot;Hello world, from %&#123;host&#125;&quot;</div><div class="line">      &quot;new_field&quot; =&gt; &quot;new_static_value&quot;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>如果事件有字段“somefield”==“hello”此过滤器，如果成功，将添加字段foo_hello，如果它存在，与上面的值和％{host}块替换的事件中的值。第二个例子也将添加一个硬编码字段。</p>
<p><strong>add_tag</strong></p>
<ul>
<li>值类型是数组</li>
<li>默认值为[]</li>
</ul>
<p>如果此过滤器成功，请向事件中添加任意标记。标签可以是动态的，并使用％{字段}语法包括事件的部分。</p>
<p>例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">filter &#123;</div><div class="line">  date &#123;</div><div class="line">    add_tag =&gt; [ &quot;foo_%&#123;somefield&#125;&quot; ]</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"># You can also add multiple tags at once:</div><div class="line">filter &#123;</div><div class="line">  date &#123;</div><div class="line">    add_tag =&gt; [ &quot;foo_%&#123;somefield&#125;&quot;, &quot;taggedy_tag&quot;]</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>如果事件有字段“somefield”==“hello”这个过滤器，在成功时，将添加一个标签foo_hello（第二个例子当然会添加一个taggedy_tag标签）。</p>
<p><strong>locale</strong></p>
<ul>
<li>值类型是字符串</li>
<li>此设置没有默认值。</li>
</ul>
<p>使用IETF-BCP47或POSIX语言标记指定用于日期解析的区域设置。简单示例是en，en-US for BCP47或en_US for POSIX。</p>
<p>对于解析月份名称（使用MMM的模式）和工作日名称（使用EEE的模式），区域设置几乎是必需的。</p>
<p>如果未指定，则将使用平台默认值，但对于非英语平台默认值，英语解析器也将用作回退机制。</p>
<p><strong>match</strong></p>
<ul>
<li>值类型是数组</li>
<li>默认值为[]</li>
</ul>
<p>允许的日期格式是Joda-Time允许的任何日期格式（java时间库）。您可以在此处查看此格式的文档：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">joda.time.format.DateTimeFormat</div></pre></td></tr></table></figure></p>
<p>一个字段名称为first的数组，其后面的格式类型为[field，formats …]</p>
<p>如果您的时间字段有多种可能的格式，您可以这样做：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">match =&gt; [ &quot;logdate&quot;, &quot;MMM dd YYY HH:mm:ss&quot;,</div><div class="line">          &quot;MMM  d YYY HH:mm:ss&quot;, &quot;ISO8601&quot; ]</div></pre></td></tr></table></figure>
<p>以上将匹配syslog（rfc3164）或iso8601时间戳。</p>
<p>有一些特殊的例外。存在以下格式字面值以帮助您节省时间并确保日期解析的正确性。</p>
<ul>
<li>ISO8601 - 应解析任何有效的ISO8601时间戳，例如2011-04-19T03：44：01.103Z</li>
<li>UNIX - 将解析float或int值，表示自从时代以来的以秒为单位的unix时间，如1326149001.132以及1326149001</li>
<li>UNIX_MS - 将解析int值表示自从纪元以来的毫秒数的unix时间，如1366125117000</li>
<li>TAI64N - 将解析tai64n时间值</li>
</ul>
<p>例如，如果您有一个字段logdate，其值类似于Aug 13 2010 00:03:44，您将使用此配置：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">filter &#123;</div><div class="line">  date &#123;</div><div class="line">    match =&gt; [ &quot;logdate&quot;, &quot;MMM dd YYYY HH:mm:ss&quot; ]</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>如果您的字段嵌套在您的结构中，则可以使用嵌套语法[foo] [bar]来匹配其值。有关详细信息，请参阅“字段引用”一节，</p>
<p>有关语法的更多详细信息</p>
<p>用于解析日期和时间文本的语法使用字母表示时间值（月，分钟等）的类型，以及重复的字母以指示该值的形式（2位数月份，完整月份名称等） 。</p>
<p>以下是您可以用来解析日期和时间：</p>
<ul>
<li><p>y,year</p>
<ul>
<li>yyyy,full year number. Example: 2015.</li>
<li>yy,two-digit year. Example: 15 for the year 2015.</li>
</ul>
</li>
<li><p>M,month of the year</p>
<ul>
<li>M,minimal-digit month. Example: 1 for January and 12 for December.</li>
<li>MM,two-digit month. zero-padded if needed. Example: 01 for January and 12 for December</li>
<li>MMM,abbreviated month text. Example: Jan for January. Note: The language used depends on your locale. See the locale setting for how to change the language.</li>
<li>MMMM,full month text, Example: January. Note: The language used depends on your locale.</li>
</ul>
</li>
<li><p>d,day of the month</p>
<ul>
<li>d,minimal-digit day. Example: 1 for the 1st of the month.</li>
<li>dd,two-digit day, zero-padded if needed. Example: 01 for the 1st of the month.</li>
</ul>
</li>
<li><p>H,hour of the day (24-hour clock)</p>
<ul>
<li>H,minimal-digit hour. Example: 0 for midnight.</li>
<li>HH,two-digit hour, zero-padded if needed. Example: 00 for midnight.</li>
</ul>
</li>
<li><p>m,minutes of the hour (60 minutes per hour)</p>
<ul>
<li>m,minimal-digit minutes. Example: 0.</li>
<li>mm,two-digit minutes, zero-padded if needed. Example: 00.</li>
</ul>
</li>
<li><p>s,seconds of the minute (60 seconds per minute)</p>
<ul>
<li>s,minimal-digit seconds. Example: 0.</li>
<li>ss,two-digit seconds, zero-padded if needed. Example: 00.</li>
</ul>
</li>
<li><p>S,fraction of a second Maximum precision is milliseconds (SSS). Beyond that, zeroes are appended.</p>
<ul>
<li>S,tenths of a second. Example: 0 for a subsecond value 012</li>
<li>SS,hundredths of a second. Example: 01 for a subsecond value 01</li>
<li>SSS,thousandths of a second. Example: 012 for a subsecond value 012</li>
</ul>
</li>
<li><p>Z,time zone offset or identity</p>
<ul>
<li>Z,Timezone offset structured as HHmm (hour and minutes offset from Zulu/UTC). Example: -0700.</li>
<li>ZZ,Timezone offset structured as HH:mm (colon in between hour and minute offsets). Example: -07:00.</li>
<li>ZZZ,Timezone identity. Example: America/Los_Angeles. Note: Valid IDs are listed on the Joda.org available time zones page.</li>
</ul>
</li>
<li><p>z,time zone names. Time zone names (z) cannot be parsed.</p>
</li>
<li><p>w,week of the year</p>
<ul>
<li>w,minimal-digit week. Example: 1.</li>
<li>ww,two-digit week, zero-padded if needed. Example: 01.</li>
</ul>
</li>
<li><p>D,day of the year</p>
</li>
<li><p>e,day of the week (number)</p>
</li>
<li><p>E,day of the week (text)</p>
<ul>
<li>E, EE, EEE,    Abbreviated day of the week. Example: Mon, Tue, Wed, Thu, Fri, Sat, Sun. Note: The actual language of this will depend on your locale.</li>
<li>EEEE, The full text day of the week. Example: Monday, Tuesday, … Note: The actual language of this will depend on your locale.</li>
</ul>
</li>
</ul>
<p>对于非格式化语法，您需要在值周围加上单引号字符。 例如，如果您正在解析ISO8601时间，“2015-01-01T01：12：23”，小的“T”不是有效的时间格式，并且您想说“字面上，一个T”，您的格式将是 这个：“yyyy-MM-dd’T’HH：mm：ss”</p>
<p>其他不太常见的日期单位，如时代（G），世纪（C），上午/下午（a）和＃更多，可以了解关于<a href="http://www.joda.org/joda-time/key_format.html" target="_blank" rel="external">joda时间文档</a>。</p>
<p><strong>periodic_flush</strong></p>
<ul>
<li>值类型是布尔值</li>
<li>默认值为false</li>
</ul>
<p>定期调用过滤器flush方法。可选的。</p>
<p><strong>remove_field</strong></p>
<ul>
<li>值类型是数组</li>
<li>默认值为[]</li>
</ul>
<p>如果此过滤器成功，请从此事件中删除任意字段。例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">filter &#123;</div><div class="line">  date &#123;</div><div class="line">    remove_field =&gt; [ &quot;foo_%&#123;somefield&#125;&quot; ]</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"># You can also remove multiple fields at once:</div><div class="line">filter &#123;</div><div class="line">  date &#123;</div><div class="line">    remove_field =&gt; [ &quot;foo_%&#123;somefield&#125;&quot;, &quot;my_extraneous_field&quot; ]</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>如果事件有字段“somefield”==“hello”此过滤器，如果成功，将删除名为foo_hello的字段（如果存在）。第二个示例将删除一个附加的非动态字段。</p>
<p><strong>remove_tag</strong></p>
<ul>
<li>值类型是数组</li>
<li>默认值为[]</li>
</ul>
<p>如果此过滤器成功，请从事件中删除任意标记。标签可以是动态的，并使用％{字段}语法包括事件的部分。</p>
<p>例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">filter &#123;</div><div class="line">  date &#123;</div><div class="line">    remove_tag =&gt; [ &quot;foo_%&#123;somefield&#125;&quot; ]</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"># You can also remove multiple tags at once:</div><div class="line">filter &#123;</div><div class="line">  date &#123;</div><div class="line">    remove_tag =&gt; [ &quot;foo_%&#123;somefield&#125;&quot;, &quot;sad_unwanted_tag&quot;]</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>如果事件有字段“somefield”==“hello”此过滤器，如果成功，将删除标签foo_hello如果它存在。第二个例子也会删除一个悲伤的，不需要的标签。</p>
<p><strong>tag_on_failure</strong></p>
<ul>
<li>值类型是数组</li>
<li>默认值为[“<code>_dateparsefailure</code>”]</li>
</ul>
<p>当没有成功匹配时，将值附加到标记字段</p>
<p><strong>target</strong></p>
<ul>
<li>值类型是字符串</li>
<li>默认值为“@timestamp”</li>
</ul>
<p>将匹配的时间戳存储到给定的目标字段中。如果未提供，则默认更新事件的@timestamp字段。</p>
<p><strong>timezone</strong></p>
<ul>
<li>值类型是字符串</li>
<li>此设置没有默认值。</li>
</ul>
<p>指定要用于日期解析的时区标准ID。有效ID列在Joda.org可用时区页上。这在时区无法从值中提取，而不是平台默认值的情况下非常有用。如果未指定，将使用平台默认值。规范ID是好的，因为它照顾夏令时您例如，美洲/ Los_Angeles或欧洲/巴黎是有效的ID。此字段可以是动态的，并使用％{字段}语法包括事件的部分</p>
<h3 id="drop"><a href="#drop" class="headerlink" title="drop"></a>drop</h3><p>丢弃过滤器。</p>
<p>丢弃所有到这个过滤器的东西。</p>
<p>这最好与条件组合使用，例如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">filter &#123;</div><div class="line">  if [loglevel] == &quot;debug&quot; &#123;</div><div class="line">    drop &#123; &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>如果loglevel字段是debug，上述操作只会将事件传递给drop过滤器。 这将导致所有匹配的事件被删除。</p>
<h4 id="概述-3"><a href="#概述-3" class="headerlink" title="概述"></a>概述</h4><p>此插件支持以下配置选项：</p>
<p>所需的配置选项：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">drop &#123;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>可用配置选项：</p>
<table>
<thead>
<tr>
<th>Setting</th>
<th>Input type</th>
<th>Required</th>
<th>Default value</th>
</tr>
</thead>
<tbody>
<tr>
<td>add_field</td>
<td>hash</td>
<td>No</td>
<td>{}</td>
</tr>
<tr>
<td>add_tag</td>
<td>array</td>
<td>No</td>
<td>[]</td>
</tr>
<tr>
<td>percentage</td>
<td>number</td>
<td>No</td>
<td>100</td>
</tr>
<tr>
<td>periodic_flush</td>
<td>boolean</td>
<td>No</td>
<td>false</td>
</tr>
<tr>
<td>remove_field</td>
<td>array</td>
<td>No</td>
<td>[]</td>
</tr>
<tr>
<td>remove_tag</td>
<td>array</td>
<td>No</td>
<td>[]</td>
</tr>
</tbody>
</table>
<h4 id="详情-3"><a href="#详情-3" class="headerlink" title="详情"></a>详情</h4><p><strong>add_field</strong></p>
<ul>
<li>值类型是哈希</li>
<li>默认值为{}</li>
</ul>
<p>如果此过滤器成功，请将任意字段添加到此事件。字段名称可以是动态的，并使用％{field}包括事件的部分。</p>
<p>例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">filter &#123;</div><div class="line">  drop &#123;</div><div class="line">    add_field =&gt; &#123; &quot;foo_%&#123;somefield&#125;&quot; =&gt; &quot;Hello world, from %&#123;host&#125;&quot; &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"># You can also add multiple fields at once:</div><div class="line">filter &#123;</div><div class="line">  drop &#123;</div><div class="line">    add_field =&gt; &#123;</div><div class="line">      &quot;foo_%&#123;somefield&#125;&quot; =&gt; &quot;Hello world, from %&#123;host&#125;&quot;</div><div class="line">      &quot;new_field&quot; =&gt; &quot;new_static_value&quot;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>如果事件有字段“somefield”==“hello”此过滤器，如果成功，将添加字段foo_hello，如果它存在，与上面的值和％{host}块替换的事件中的值。第二个例子也将添加一个硬编码字段。</p>
<p><strong>add_tag</strong></p>
<ul>
<li>值类型是数组</li>
<li>默认值为[]</li>
</ul>
<p>如果此过滤器成功，请向事件中添加任意标记。标签可以是动态的，并使用％{字段}语法包括事件的部分。</p>
<p>例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">filter &#123;</div><div class="line">  drop &#123;</div><div class="line">    add_tag =&gt; [ &quot;foo_%&#123;somefield&#125;&quot; ]</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"># You can also add multiple tags at once:</div><div class="line">filter &#123;</div><div class="line">  drop &#123;</div><div class="line">    add_tag =&gt; [ &quot;foo_%&#123;somefield&#125;&quot;, &quot;taggedy_tag&quot;]</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>如果事件有字段“somefield”==“hello”这个过滤器，在成功时，将添加一个标签foo_hello（第二个例子当然会添加一个taggedy_tag标签）。</p>
<p><strong>percentage</strong></p>
<ul>
<li>值类型是数字</li>
<li>默认值为100</li>
</ul>
<p>删除预配置百分比内的所有事件。</p>
<p>这是有用的，如果你只需要一个百分比，但不是整体。</p>
<p>例如，只有大约40％的具有字段loglevel值为“debug”的事件。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">filter &#123;</div><div class="line">  if [loglevel] == &quot;debug&quot; &#123;</div><div class="line">    drop &#123;</div><div class="line">      percentage =&gt; 40</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><strong>periodic_flush</strong></p>
<ul>
<li>值类型是布尔值</li>
<li>默认值为false</li>
</ul>
<p>定期调用过滤器flush方法。可选的。</p>
<p><strong>remove_field</strong></p>
<ul>
<li>值类型是数组</li>
<li>默认值为[]</li>
</ul>
<p>如果此过滤器成功，请从此事件中删除任意字段。例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">filter &#123;</div><div class="line">  drop &#123;</div><div class="line">    remove_field =&gt; [ &quot;foo_%&#123;somefield&#125;&quot; ]</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"># You can also remove multiple fields at once:</div><div class="line">filter &#123;</div><div class="line">  drop &#123;</div><div class="line">    remove_field =&gt; [ &quot;foo_%&#123;somefield&#125;&quot;, &quot;my_extraneous_field&quot; ]</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>如果事件有字段“somefield”==“hello”此过滤器，如果成功，将删除名为foo_hello的字段（如果存在）。第二个示例将删除一个附加的非动态字段。</p>
<p><strong>remove_tag</strong></p>
<ul>
<li>值类型是数组</li>
<li>默认值为[]</li>
</ul>
<p>如果此过滤器成功，请从事件中删除任意标记。标签可以是动态的，并使用％{字段}语法包括事件的部分。</p>
<p>例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">filter &#123;</div><div class="line">  drop &#123;</div><div class="line">    remove_tag =&gt; [ &quot;foo_%&#123;somefield&#125;&quot; ]</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"># You can also remove multiple tags at once:</div><div class="line">filter &#123;</div><div class="line">  drop &#123;</div><div class="line">    remove_tag =&gt; [ &quot;foo_%&#123;somefield&#125;&quot;, &quot;sad_unwanted_tag&quot;]</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>如果事件有字段“somefield”==“hello”此过滤器，如果成功，将删除标签foo_hello如果它存在。第二个例子也会删除一个悲伤的，不需要的标签。</p>
<h3 id="geoip"><a href="#geoip" class="headerlink" title="geoip"></a>geoip</h3><p>GeoIP过滤器根据Maxmind数据库中的数据添加有关IP地址的地理位置的信息。</p>
<p>从Logstash的1.3.0版本开始，如果GeoIP查询返回纬度和经度，则会创建一个[geoip] [location]字段。 该字段存储为GeoJSON格式。 此外，弹性搜索输出提供的默认Elasticsearch模板将[geoip] [location]字段映射到Elasticsearch geo_point。</p>
<p>由于此字段是geo_point，它仍然有效GeoJSON，您将获得Elasticsearch的地理空间查询，构面和过滤器功能的强大功能，以及为所有其他应用程序（如Kibana的地图可视化）使用GeoJSON的灵活性。</p>
<p>Logstash发行版随附带有CCA-ShareAlike 3.0许可证的Maxmind提供的GeoLiteCity数据库。 有关GeoLite的更多详细信息，请参见<a href="http://www.maxmind.com/en/geolite。" target="_blank" rel="external">http://www.maxmind.com/en/geolite。</a></p>
<h4 id="概述-4"><a href="#概述-4" class="headerlink" title="概述"></a>概述</h4><p>此插件支持以下配置选项：</p>
<p>所需的配置选项：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">geoip &#123;</div><div class="line">    source =&gt; ...</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>可用配置选项：</p>
<table>
<thead>
<tr>
<th>Setting</th>
<th>Input type</th>
<th>Required</th>
<th>Default value</th>
</tr>
</thead>
<tbody>
<tr>
<td>add_field</td>
<td>hash</td>
<td>No</td>
<td>{}</td>
</tr>
<tr>
<td>add_tag</td>
<td>array</td>
<td>No</td>
<td>[]</td>
</tr>
<tr>
<td>database</td>
<td>a valid filesystem path</td>
<td>No</td>
<td></td>
</tr>
<tr>
<td>fields</td>
<td>array</td>
<td>No</td>
<td></td>
</tr>
<tr>
<td>lru_cache_size</td>
<td>number</td>
<td>No</td>
<td>1000</td>
</tr>
<tr>
<td>periodic_flush</td>
<td>boolean</td>
<td>No</td>
<td>false</td>
</tr>
<tr>
<td>remove_field</td>
<td>array</td>
<td>No</td>
<td>[]</td>
</tr>
<tr>
<td>remove_tag</td>
<td>array</td>
<td>No</td>
<td>[]</td>
</tr>
<tr>
<td>source</td>
<td>string</td>
<td>Yes</td>
<td></td>
</tr>
<tr>
<td>target</td>
<td>string</td>
<td>No</td>
<td>“geoip”</td>
</tr>
</tbody>
</table>
<h4 id="详情-4"><a href="#详情-4" class="headerlink" title="详情"></a>详情</h4><p><strong>add_field</strong></p>
<ul>
<li>值类型是哈希</li>
<li>默认值为{}</li>
</ul>
<p>如果此过滤器成功，请将任意字段添加到此事件。字段名称可以是动态的，并使用％{field}包括事件的部分。</p>
<p>例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">filter &#123;</div><div class="line">  geoip &#123;</div><div class="line">    add_field =&gt; &#123; &quot;foo_%&#123;somefield&#125;&quot; =&gt; &quot;Hello world, from %&#123;host&#125;&quot; &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"># You can also add multiple fields at once:</div><div class="line">filter &#123;</div><div class="line">  geoip &#123;</div><div class="line">    add_field =&gt; &#123;</div><div class="line">      &quot;foo_%&#123;somefield&#125;&quot; =&gt; &quot;Hello world, from %&#123;host&#125;&quot;</div><div class="line">      &quot;new_field&quot; =&gt; &quot;new_static_value&quot;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>如果事件有字段“somefield”==“hello”此过滤器，如果成功，将添加字段foo_hello，如果它存在，与上面的值和％{host}块替换的事件中的值。第二个例子也将添加一个硬编码字段。</p>
<p><strong>add_tag</strong></p>
<ul>
<li>值类型是数组</li>
<li>默认值为[]</li>
</ul>
<p>如果此过滤器成功，请向事件中添加任意标记。标签可以是动态的，并使用％{字段}语法包括事件的部分。</p>
<p>例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">filter &#123;</div><div class="line">  geoip &#123;</div><div class="line">    add_tag =&gt; [ &quot;foo_%&#123;somefield&#125;&quot; ]</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"># You can also add multiple tags at once:</div><div class="line">filter &#123;</div><div class="line">  geoip &#123;</div><div class="line">    add_tag =&gt; [ &quot;foo_%&#123;somefield&#125;&quot;, &quot;taggedy_tag&quot;]</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>如果事件有字段“somefield”==“hello”这个过滤器，在成功时，将添加一个标签foo_hello（第二个例子当然会添加一个taggedy_tag标签）。</p>
<p><strong>database</strong></p>
<ul>
<li>值类型为路径</li>
<li>此设置没有默认值。</li>
</ul>
<p>查找缓存的地图，由geoip_type锁定LogStash应使用的GeoIP数据库文件的路径。支持国家，城市，ASN，ISP和组织数据库。</p>
<p>如果未指定，这将默认为LogStash附带的GeoLiteCity数据库。可以从这里下载最新的数据库：<a href="https://dev.maxmind.com/geoip/legacy/geolite/请务必下载旧版格式数据库。" target="_blank" rel="external">https://dev.maxmind.com/geoip/legacy/geolite/请务必下载旧版格式数据库。</a></p>
<p><strong>fields</strong></p>
<ul>
<li>值类型是数组</li>
<li>此设置没有默认值。</li>
</ul>
<p>要包含在事件中的geoip字段数组。</p>
<p>可能的字段取决于数据库类型。默认情况下，所有地理位置字段都包含在事件中。</p>
<p>对于内置的GeoLiteCity数据库，以下是可用的： city_name, continent_code, country_code2, country_code3, country_name, dma_code, ip, latitude, longitude, postal_code, region_name and timezone.</p>
<p><strong>lru_cache_size</strong></p>
<ul>
<li>值类型是数字</li>
<li>默认值为1000</li>
</ul>
<p>GeoIP查找令人惊讶的昂贵。此过滤器使用LRU缓存来利用IP代理经常在日志文件中彼此相邻并且很少具有随机分布的事实。设置的越高，项目在缓存中的可能性越大，并且此过滤器运行的速度越快。但是，如果您设置太高，您可以使用比所需的更多的内存。</p>
<p>为此选项尝试不同的值，以便为数据集找到最佳性能。</p>
<p>这必须设置为值&gt; 0。真的没有理由不想要这种行为，开销是最小的，速度增益很大。</p>
<p>请注意，此配置值对geoip_type是全局的。也就是说，同一geoip_type的geoip过滤器的所有实例共享相同的缓存。最后声明的缓存大小将赢。这样做的原因是，对于在流水线中的不同点处的不同实例具有多个高速缓存将没有益处，这只会增加高速缓存未命中和浪费存储器的数量。</p>
<p><strong>periodic_flush</strong></p>
<ul>
<li>值类型是布尔值</li>
<li>默认值为false</li>
</ul>
<p>定期调用过滤器flush方法。可选的。</p>
<p><strong>remove_field</strong></p>
<ul>
<li>值类型是数组</li>
<li>默认值为[]</li>
</ul>
<p>如果此过滤器成功，请从此事件中删除任意字段。例：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">filter &#123;</div><div class="line">  geoip &#123;</div><div class="line">    remove_field =&gt; [ &quot;foo_%&#123;somefield&#125;&quot; ]</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"># You can also remove multiple fields at once:</div><div class="line">filter &#123;</div><div class="line">  geoip &#123;</div><div class="line">    remove_field =&gt; [ &quot;foo_%&#123;somefield&#125;&quot;, &quot;my_extraneous_field&quot; ]</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>如果事件有字段“somefield”==“hello”此过滤器，如果成功，将删除名为foo_hello的字段（如果存在）。第二个示例将删除一个附加的非动态字段。</p>
<p><strong>remove_tag</strong></p>
<ul>
<li>值类型是数组</li>
<li>默认值为[]</li>
</ul>
<p>如果此过滤器成功，请从事件中删除任意标记。标签可以是动态的，并使用％{字段}语法包括事件的部分。</p>
<p>例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">filter &#123;</div><div class="line">  geoip &#123;</div><div class="line">    remove_tag =&gt; [ &quot;foo_%&#123;somefield&#125;&quot; ]</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"># You can also remove multiple tags at once:</div><div class="line">filter &#123;</div><div class="line">  geoip &#123;</div><div class="line">    remove_tag =&gt; [ &quot;foo_%&#123;somefield&#125;&quot;, &quot;sad_unwanted_tag&quot;]</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>如果事件有字段“somefield”==“hello”此过滤器，如果成功，将删除标签foo_hello如果它存在。第二个例子也会删除一个悲伤的，不需要的标签。</p>
<p><strong>source</strong></p>
<ul>
<li>这是必需的设置。</li>
<li>值类型是字符串</li>
<li>此设置没有默认值。</li>
</ul>
<p>包含要通过geoip映射的IP地址或主机名的字段。如果此字段是数组，则仅使用第一个值。</p>
<p><strong>target</strong><br>值类型是字符串<br>默认值为“geoip”<br>指定Logstash应存储geoip数据的字段。这可能很有用，例如，如果您有<code>src\_ip</code>和<code>dst\_ip</code>字段，并且想要两个IP的GeoIP信息。</p>
<p>如果将数据保存到除geoip以外的目标字段，并且希望使用Elasticsearch中的<code>geo\_point</code>相关函数，则需要更改Elasticsearch输出提供的模板，并将输出配置为使用新模板。</p>
<p>即使您不使用<code>geo\_point</code>映射，[target] [location]字段仍然有效GeoJSON。</p>
<h3 id="grok"><a href="#grok" class="headerlink" title="grok"></a>grok</h3><p>解析任意文本和结构。</p>
<p>Grok是目前在logstash中将糟糕的非结构化日志数据解析为结构化和可查询的最佳方式。</p>
<p>这个工具是完美的syslog日志，apache和其他webserver日志，mysql日志，一般，任何日志格式，一般为人而不是计算机消费。</p>
<p>默认情况下，Logstash附带约120个模式。 你可以在这里找到他们：https：//github.com/logst-plugins/logstash-patterns-core/tree/master/patterns。 你可以添加自己的trivially。 （请参阅patterns_dir设置）</p>
<p>如果您需要帮助构建模式以匹配您的日志，您会发现<a href="http://grokdebug.herokuapp.com和http://grokconstructor.appspot.com/应用程序非常有用！" target="_blank" rel="external">http://grokdebug.herokuapp.com和http://grokconstructor.appspot.com/应用程序非常有用！</a></p>
<h4 id="Grok基础"><a href="#Grok基础" class="headerlink" title="Grok基础"></a>Grok基础</h4><p>Grok通过将文本模式组合成与您的日志匹配的东西。</p>
<p>grok模式的语法为％{SYNTAX：SEMANTIC}</p>
<p>SYNTAX是将匹配您的文本的模式的名称。 例如，3.44将匹配NUMBER模式，55.3.244.1将匹配IP模式。 语法是如何匹配。</p>
<p>SEMANTIC是您给匹配的文本片段的标识符。 例如，3.44可以是事件的持续时间，因此您可以将其称为持续时间。 此外，字符串55.3.244.1可以标识发出请求的客户端。</p>
<p>对于上面的例子，你的grok过滤器看起来像这样：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">%&#123;NUMBER:duration&#125; %&#123;IP:client&#125;</div></pre></td></tr></table></figure></p>
<p>或者，您可以向grok模式添加数据类型转换。 默认情况下，所有语义都保存为字符串。 如果希望转换语义的数据类型，例如将字符串更改为整数，然后使用目标数据类型进行后缀。 例如％{NUMBER：num：int}，它将num语义从字符串转换为整数。 目前唯一支持的转换是int和float。</p>
<p>示例：有了语法和语义的想法，我们可以从示例日志中提取有用的字段，就像这个虚构的http请求日志：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">55.3.244.1 GET /index.html 15824 0.043</div></pre></td></tr></table></figure></p>
<p>这种模式可以是：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">%&#123;IP:client&#125; %&#123;WORD:method&#125; %&#123;URIPATHPARAM:request&#125; %&#123;NUMBER:bytes&#125; %&#123;NUMBER:duration&#125;</div></pre></td></tr></table></figure></p>
<p>一个更现实的例子，让我们从文件中读取这些日志：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">input &#123;</div><div class="line">  file &#123;</div><div class="line">    path =&gt; &quot;/var/log/http.log&quot;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line">filter &#123;</div><div class="line">  grok &#123;</div><div class="line">    match =&gt; &#123; &quot;message&quot; =&gt; &quot;%&#123;IP:client&#125; %&#123;WORD:method&#125; %&#123;URIPATHPARAM:request&#125; %&#123;NUMBER:bytes&#125; %&#123;NUMBER:duration&#125;&quot; &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>在grok过滤器之后，事件将有一些额外的字段：</p>
<ul>
<li>client: 55.3.244.1</li>
<li>method: GET</li>
<li>request: /index.html</li>
<li>bytes: 15824</li>
<li>duration: 0.043</li>
</ul>
<h4 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h4><p>Grok位于正则表达式的顶部，因此任何正则表达式在grok中都有效。 正则表达式库是Oniguruma，您可以在Oniguruma站点上看到完整支持的regexp语法。</p>
<p>自定义Patternsedit<br>有时logstash没有你需要的模式。 为此，您有几个选项。</p>
<p>首先，您可以使用Oniguruma语法进行命名捕获，它将让您匹配一段文本并将其保存为字段：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">(?&lt;field_name&gt;the pattern here)</div></pre></td></tr></table></figure></p>
<p>例如，后缀日志具有为10或11个字符的十六进制值的队列ID。 我可以很容易地捕捉到这样：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">(?&lt;queue_id&gt;[0-9A-F]&#123;10,11&#125;)</div></pre></td></tr></table></figure></p>
<p>或者，您可以创建自定义模式文件。</p>
<p>创建一个名为patterns的模式，其中包含一个名为extra的文件（文件名不重要，但为自己命名）<br>在该文件中，写所需的模式作为模式名称，一个空格，然后是该模式的正则表达式。<br>例如，执行postfix队列id示例如上：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"># contents of ./patterns/postfix:</div><div class="line">POSTFIX_QUEUEID [0-9A-F]&#123;10,11&#125;</div></pre></td></tr></table></figure></p>
<p>然后使用这个插件中的patterns_dir设置告诉logstash您的自定义模式目录在哪里。 这里有一个示例日志的完整示例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">Jan  1 06:25:43 mailserver14 postfix/cleanup[21403]: BEF25A72965: message-id=&lt;20130101142543.5828399CCAF@mailserver14.example.com&gt;</div><div class="line">filter &#123;</div><div class="line">  grok &#123;</div><div class="line">    patterns_dir =&gt; [&quot;./patterns&quot;]</div><div class="line">    match =&gt; &#123; &quot;message&quot; =&gt; &quot;%&#123;SYSLOGBASE&#125; %&#123;POSTFIX_QUEUEID:queue_id&#125;: %&#123;GREEDYDATA:syslog_message&#125;&quot; &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>以上将匹配并导致以下字段：</p>
<ul>
<li>timestamp: Jan 1 06:25:43</li>
<li>logsource: mailserver14</li>
<li>program: postfix/cleanup</li>
<li>pid: 21403</li>
<li>queue_id: BEF25A72965</li>
<li>syslog_message: message-id=<a href="&#x6d;&#x61;&#105;&#x6c;&#116;&#x6f;&#x3a;&#x32;&#48;&#x31;&#51;&#x30;&#x31;&#48;&#x31;&#49;&#52;&#x32;&#53;&#52;&#x33;&#x2e;&#x35;&#56;&#x32;&#56;&#51;&#x39;&#57;&#67;&#x43;&#65;&#x46;&#64;&#109;&#97;&#105;&#108;&#x73;&#x65;&#x72;&#118;&#x65;&#x72;&#x31;&#x34;&#x2e;&#x65;&#120;&#x61;&#109;&#x70;&#x6c;&#x65;&#x2e;&#x63;&#x6f;&#109;">&#x32;&#48;&#x31;&#51;&#x30;&#x31;&#48;&#x31;&#49;&#52;&#x32;&#53;&#52;&#x33;&#x2e;&#x35;&#56;&#x32;&#56;&#51;&#x39;&#57;&#67;&#x43;&#65;&#x46;&#64;&#109;&#97;&#105;&#108;&#x73;&#x65;&#x72;&#118;&#x65;&#x72;&#x31;&#x34;&#x2e;&#x65;&#120;&#x61;&#109;&#x70;&#x6c;&#x65;&#x2e;&#x63;&#x6f;&#109;</a></li>
</ul>
<p>The timestamp, logsource, program, and pid 字段来自SYSLOGBASE模式，该模式本身由其他模式定义。</p>
<h4 id="概述-5"><a href="#概述-5" class="headerlink" title="概述"></a>概述</h4><p>此插件支持以下配置选项：</p>
<p>所需的配置选项：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">grok &#123;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>可用配置选项：</p>
<table>
<thead>
<tr>
<th>Setting</th>
<th>Input type</th>
<th>Required</th>
<th>Default value</th>
</tr>
</thead>
<tbody>
<tr>
<td>add_field</td>
<td>hash</td>
<td>No</td>
<td>{}</td>
</tr>
<tr>
<td>add_tag</td>
<td>array</td>
<td>No</td>
<td>[]</td>
</tr>
<tr>
<td>break_on_match</td>
<td>boolean</td>
<td>No</td>
<td>true</td>
</tr>
<tr>
<td>keep_empty_captures</td>
<td>boolean</td>
<td>No</td>
<td>false</td>
</tr>
<tr>
<td>match</td>
<td>hash</td>
<td>No</td>
<td>{}</td>
</tr>
<tr>
<td>named_captures_only</td>
<td>boolean</td>
<td>No</td>
<td>true</td>
</tr>
<tr>
<td>overwrite</td>
<td>array</td>
<td>No</td>
<td>[]</td>
</tr>
<tr>
<td>patterns_dir</td>
<td>array</td>
<td>No</td>
<td>[]</td>
</tr>
<tr>
<td>patterns_files_glob</td>
<td>string</td>
<td>No</td>
<td>“<code>*</code>“</td>
</tr>
<tr>
<td>periodic_flush</td>
<td>boolean</td>
<td>No</td>
<td>false</td>
</tr>
<tr>
<td>remove_field</td>
<td>array</td>
<td>No</td>
<td>[]</td>
</tr>
<tr>
<td>remove_tag</td>
<td>array</td>
<td>No</td>
<td>[]</td>
</tr>
<tr>
<td>tag_on_failure</td>
<td>array</td>
<td>No</td>
<td>[“<code>_grokparsefailure</code>“]</td>
</tr>
</tbody>
</table>
<h4 id="详情-5"><a href="#详情-5" class="headerlink" title="详情"></a>详情</h4><p><strong>add_field</strong></p>
<ul>
<li>值类型是哈希</li>
<li>默认值为{}</li>
</ul>
<p>如果此过滤器成功，请将任意字段添加到此事件。字段名称可以是动态的，并使用％{field}包括事件的部分。</p>
<p>例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">filter &#123;</div><div class="line">  grok &#123;</div><div class="line">    add_field =&gt; &#123; &quot;foo_%&#123;somefield&#125;&quot; =&gt; &quot;Hello world, from %&#123;host&#125;&quot; &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"># You can also add multiple fields at once:</div><div class="line">filter &#123;</div><div class="line">  grok &#123;</div><div class="line">    add_field =&gt; &#123;</div><div class="line">      &quot;foo_%&#123;somefield&#125;&quot; =&gt; &quot;Hello world, from %&#123;host&#125;&quot;</div><div class="line">      &quot;new_field&quot; =&gt; &quot;new_static_value&quot;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>如果事件有字段“somefield”==“hello”此过滤器，如果成功，将添加字段foo_hello，如果它存在，与上面的值和％{host}块替换的事件中的值。第二个例子也将添加一个硬编码字段。</p>
<p><strong>add_tag</strong></p>
<ul>
<li>值类型是数组</li>
<li>默认值为[]</li>
</ul>
<p>如果此过滤器成功，请向事件中添加任意标记。标签可以是动态的，并使用％{字段}语法包括事件的部分。</p>
<p>例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">filter &#123;</div><div class="line">  grok &#123;</div><div class="line">    add_tag =&gt; [ &quot;foo_%&#123;somefield&#125;&quot; ]</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"># You can also add multiple tags at once:</div><div class="line">filter &#123;</div><div class="line">  grok &#123;</div><div class="line">    add_tag =&gt; [ &quot;foo_%&#123;somefield&#125;&quot;, &quot;taggedy_tag&quot;]</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>如果事件有字段“somefield”==“hello”这个过滤器，在成功时，将添加一个标签foo_hello（第二个例子当然会添加一个taggedy_tag标签）。</p>
<p><strong>break_on_match</strong></p>
<ul>
<li>值类型是布尔值</li>
<li>默认值为true</li>
</ul>
<p>打破第一场比赛。 grok的第一次成功匹配将导致过滤器完成。如果你想让grok尝试所有的模式（也许你正在解析不同的东西），然后设置为false。</p>
<p><strong>keep_empty_captures</strong></p>
<ul>
<li>值类型是布尔值</li>
<li>默认值为false</li>
</ul>
<p>如果为true，请将空捕获保留为事件字段。</p>
<p><strong>match</strong></p>
<ul>
<li>值类型是哈希</li>
<li>默认值为{}</li>
</ul>
<p>field ⇒ value 的匹配散列</p>
<p>例如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">filter &#123;</div><div class="line">  grok &#123; match =&gt; &#123; &quot;message&quot; =&gt; &quot;Duration: %&#123;NUMBER:duration&#125;&quot; &#125; &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>如果您需要针对单个字段匹配多个模式，则该值可以是模式数组<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">filter &#123;</div><div class="line">  grok &#123; match =&gt; &#123; &quot;message&quot; =&gt; [ &quot;Duration: %&#123;NUMBER:duration&#125;&quot;, &quot;Speed: %&#123;NUMBER:speed&#125;&quot; ] &#125; &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><strong>named_captures_only</strong></p>
<ul>
<li>值类型是布尔值</li>
<li>默认值为true</li>
</ul>
<p>如果为true，则只存储从grok命名的捕获。</p>
<p><strong>overwrite</strong><br>值类型是数组<br>默认值为[]<br>要覆盖的字段。</p>
<p>这允许您覆盖已存在的字段中的值。</p>
<p>例如，如果消息字段中有syslog行，则可以使用部分匹配覆盖消息字段，如下所示：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">filter &#123;</div><div class="line">  grok &#123;</div><div class="line">    match =&gt; &#123; &quot;message&quot; =&gt; &quot;%&#123;SYSLOGBASE&#125; %&#123;DATA:message&#125;&quot; &#125;</div><div class="line">    overwrite =&gt; [ &quot;message&quot; ]</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在这种情况下，一行像May 29 16:37:11悲伤日志：hello world将被解析，hello world将覆盖原始消息。</p>
<p><strong>pattern (DEPRECATED)</strong></p>
<ul>
<li>DEPRECATED WARNING：此配置项目已弃用，并且可能在将来的版本中不可用。</li>
<li>值类型是数组</li>
<li>此设置没有默认值。</li>
</ul>
<p>指定要解析的模式。这将匹配消息字段。</p>
<p>如果要匹配消息之外的其他字段，请使用匹配设置。多种模式是好的。</p>
<p><strong>patterns_dir</strong><br>值类型是数组<br>默认值为[]<br>Logstash默认带有一堆模式，所以你不一定需要自己定义，除非你添加额外的模式。您可以使用此设置指向多个模式目录请注意，Grok将读取与patterns_files_glob匹配的目录中的所有文件，并假定其模式文件（包括任何波形字符备份文件）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">patterns_dir =&gt; [&quot;/opt/logstash/patterns&quot;, &quot;/opt/logstash/extra_patterns&quot;]</div></pre></td></tr></table></figure></p>
<p>模式文件是带有格式的纯文本：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">NAME PATTERN</div></pre></td></tr></table></figure></p>
<p>示例<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">NUMBER \d+</div></pre></td></tr></table></figure></p>
<p><strong>patterns_files_glob</strong></p>
<ul>
<li>值类型是字符串</li>
<li>默认值为“<code>*</code>”</li>
</ul>
<p>Glob模式，用于选择patterns_dir指定的目录中的模式文件</p>
<p><strong>periodic_flush</strong></p>
<ul>
<li>值类型是布尔值</li>
<li>默认值为false</li>
</ul>
<p>定期调用过滤器flush方法。可选的。</p>
<p><strong>remove_field</strong></p>
<ul>
<li>值类型是数组</li>
<li>默认值为[]</li>
</ul>
<p>如果此过滤器成功，请从此事件中删除任意字段。例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">filter &#123;</div><div class="line">  grok &#123;</div><div class="line">    remove_field =&gt; [ &quot;foo_%&#123;somefield&#125;&quot; ]</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"># You can also remove multiple fields at once:</div><div class="line">filter &#123;</div><div class="line">  grok &#123;</div><div class="line">    remove_field =&gt; [ &quot;foo_%&#123;somefield&#125;&quot;, &quot;my_extraneous_field&quot; ]</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>如果事件有字段“somefield”==“hello”此过滤器，如果成功，将删除名为foo_hello的字段（如果存在）。第二个示例将删除一个附加的非动态字段。</p>
<p><strong>remove_tag</strong></p>
<ul>
<li>值类型是数组</li>
<li>默认值为[]</li>
</ul>
<p>如果此过滤器成功，请从事件中删除任意标记。标签可以是动态的，并使用％{字段}语法包括事件的部分。</p>
<p>例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">filter &#123;</div><div class="line">  grok &#123;</div><div class="line">    remove_tag =&gt; [ &quot;foo_%&#123;somefield&#125;&quot; ]</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"># You can also remove multiple tags at once:</div><div class="line">filter &#123;</div><div class="line">  grok &#123;</div><div class="line">    remove_tag =&gt; [ &quot;foo_%&#123;somefield&#125;&quot;, &quot;sad_unwanted_tag&quot;]</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>如果事件有字段“somefield”==“hello”此过滤器，如果成功，将删除标签foo_hello如果它存在。第二个例子也会删除一个悲伤的，不需要的标签。</p>
<p><strong>singles (DEPRECATED)</strong></p>
<ul>
<li>DEPRECATED WARNING：此配置项目已弃用，并且可能在将来的版本中不可用。</li>
<li>值类型是布尔值</li>
<li>默认值为true</li>
</ul>
<p>如果为true，则将单值字段设置为该值，而不是包含该值的数组。</p>
<p><strong>tag_on_failure</strong></p>
<ul>
<li>值类型是数组</li>
<li>默认值为[“<code>_grokparsefailure</code>”]</li>
</ul>
<p>当没有成功匹配时，将值附加到标记字段</p>
<h3 id="json"><a href="#json" class="headerlink" title="json"></a>json</h3><p>这是一个JSON解析过滤器。 它需要一个包含JSON的现有字段，并在Logstash事件中将其扩展为实际的数据结构。</p>
<p>默认情况下，它会将解析的JSON放在Logstash事件的根（顶级）中，但是可以配置此过滤器以使用目标配置将JSON放入任意事件字段。</p>
<h4 id="概述-6"><a href="#概述-6" class="headerlink" title="概述"></a>概述</h4><p>此插件支持以下配置选项：</p>
<p>所需的配置选项：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">json &#123;</div><div class="line">    source =&gt; ...</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>可用配置选项：</p>
<table>
<thead>
<tr>
<th>Setting</th>
<th>Input type</th>
<th>Required</th>
<th>Default value</th>
</tr>
</thead>
<tbody>
<tr>
<td>add_field</td>
<td>hash</td>
<td>No</td>
<td>{}</td>
</tr>
<tr>
<td>add_tag</td>
<td>array</td>
<td>No</td>
<td>[]</td>
</tr>
<tr>
<td>periodic_flush</td>
<td>boolean</td>
<td>No</td>
<td>false</td>
</tr>
<tr>
<td>remove_field</td>
<td>array</td>
<td>No</td>
<td>[]</td>
</tr>
<tr>
<td>remove_tag</td>
<td>array</td>
<td>No</td>
<td>[]</td>
</tr>
<tr>
<td>source</td>
<td>string</td>
<td>Yes</td>
<td></td>
</tr>
<tr>
<td>target</td>
<td>string</td>
<td>No</td>
<td></td>
</tr>
</tbody>
</table>
<h4 id="详情-6"><a href="#详情-6" class="headerlink" title="详情"></a>详情</h4><p><strong>add_field</strong></p>
<ul>
<li>值类型是哈希</li>
<li>默认值为{}</li>
</ul>
<p>如果此过滤器成功，请将任意字段添加到此事件。字段名称可以是动态的，并使用％{field}包括事件的部分。</p>
<p>例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">filter &#123;</div><div class="line">  json &#123;</div><div class="line">    add_field =&gt; &#123; &quot;foo_%&#123;somefield&#125;&quot; =&gt; &quot;Hello world, from %&#123;host&#125;&quot; &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"># You can also add multiple fields at once:</div><div class="line">filter &#123;</div><div class="line">  json &#123;</div><div class="line">    add_field =&gt; &#123;</div><div class="line">      &quot;foo_%&#123;somefield&#125;&quot; =&gt; &quot;Hello world, from %&#123;host&#125;&quot;</div><div class="line">      &quot;new_field&quot; =&gt; &quot;new_static_value&quot;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>如果事件有字段“somefield”==“hello”此过滤器，如果成功，将添加字段foo_hello，如果它存在，与上面的值和％{host}块替换的事件中的值。第二个例子也将添加一个硬编码字段。</p>
<p><strong>add_tag</strong></p>
<ul>
<li>值类型是数组</li>
<li>默认值为[]</li>
</ul>
<p>如果此过滤器成功，请向事件中添加任意标记。标签可以是动态的，并使用％{字段}语法包括事件的部分。</p>
<p>例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">filter &#123;</div><div class="line">  json &#123;</div><div class="line">    add_tag =&gt; [ &quot;foo_%&#123;somefield&#125;&quot; ]</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"># You can also add multiple tags at once:</div><div class="line">filter &#123;</div><div class="line">  json &#123;</div><div class="line">    add_tag =&gt; [ &quot;foo_%&#123;somefield&#125;&quot;, &quot;taggedy_tag&quot;]</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>如果事件有字段“somefield”==“hello”这个过滤器，在成功时，将添加一个标签foo_hello（第二个例子当然会添加一个taggedy_tag标签）。</p>
<p><strong>periodic_flush</strong></p>
<ul>
<li>值类型是布尔值</li>
<li>默认值为false</li>
</ul>
<p>定期调用过滤器flush方法。可选的。</p>
<p><strong>remove_field</strong></p>
<ul>
<li>值类型是数组</li>
<li>默认值为[]</li>
</ul>
<p>如果此过滤器成功，请从此事件中删除任意字段。例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">filter &#123;</div><div class="line">  json &#123;</div><div class="line">    remove_field =&gt; [ &quot;foo_%&#123;somefield&#125;&quot; ]</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"># You can also remove multiple fields at once:</div><div class="line">filter &#123;</div><div class="line">  json &#123;</div><div class="line">    remove_field =&gt; [ &quot;foo_%&#123;somefield&#125;&quot;, &quot;my_extraneous_field&quot; ]</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>如果事件有字段“somefield”==“hello”此过滤器，如果成功，将删除名为foo_hello的字段（如果存在）。第二个示例将删除一个附加的非动态字段。</p>
<p><strong>remove_tag</strong></p>
<ul>
<li>值类型是数组</li>
<li>默认值为[]</li>
</ul>
<p>如果此过滤器成功，请从事件中删除任意标记。标签可以是动态的，并使用％{字段}语法包括事件的部分。</p>
<p>例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">filter &#123;</div><div class="line">  json &#123;</div><div class="line">    remove_tag =&gt; [ &quot;foo_%&#123;somefield&#125;&quot; ]</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"># You can also remove multiple tags at once:</div><div class="line">filter &#123;</div><div class="line">  json &#123;</div><div class="line">    remove_tag =&gt; [ &quot;foo_%&#123;somefield&#125;&quot;, &quot;sad_unwanted_tag&quot;]</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>如果事件有字段“somefield”==“hello”此过滤器，如果成功，将删除标签foo_hello如果它存在。第二个例子也会删除一个悲伤的，不需要的标签。</p>
<p><strong>source</strong></p>
<ul>
<li>这是必需的设置。</li>
<li>值类型是字符串</li>
<li>此设置没有默认值。</li>
</ul>
<p>JSON过滤器的配置：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">source =&gt; source_field</div></pre></td></tr></table></figure>
<p>例如，如果您在消息字段中有JSON数据：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">filter &#123;</div><div class="line">  json &#123;</div><div class="line">    source =&gt; &quot;message&quot;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>上面将解析从消息字段的json</p>
<p><strong>target</strong></p>
<ul>
<li>值类型是字符串</li>
<li>此设置没有默认值。</li>
</ul>
<p>定义放置解析数据的目标字段。如果省略此设置，JSON数据将存储在事件的根（顶级）。</p>
<p>例如，如果您想将数据放在doc字段中：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">filter &#123;</div><div class="line">  json &#123;</div><div class="line">    target =&gt; &quot;doc&quot;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>在源字段的值中的JSON将在目标字段中展开为数据结构。</p>
<blockquote>
<p>注意: 如果目标字段已经存在，它将被覆盖！</p>
</blockquote>
<h3 id="json-encode"><a href="#json-encode" class="headerlink" title="json_encode"></a>json_encode</h3><p>这是一个社区维护的插件！ 它默认不随Logstash一起提供，但它很容易安装通过运行bin / logstash-plugin install logstash-filter-json_encode。</p>
<p>JSON编码过滤器。 获取字段并将其序列化为JSON</p>
<p>如果未指定目标，源字段将被JSON文本覆盖。</p>
<p>例如，如果您有一个名为foo的字段，并且您想要在bar中存储JSON编码的字符串，请执行以下操作：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">filter &#123;</div><div class="line">  json_encode &#123;</div><div class="line">    source =&gt; &quot;foo&quot;</div><div class="line">    target =&gt; &quot;bar&quot;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h4 id="概述-7"><a href="#概述-7" class="headerlink" title="概述"></a>概述</h4><p>此插件支持以下配置选项：</p>
<p>所需的配置选项：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">json_encode &#123;</div><div class="line">    source =&gt; ...</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>可用配置选项：</p>
<table>
<thead>
<tr>
<th>Setting</th>
<th>Input type</th>
<th>Required</th>
<th>Default value</th>
</tr>
</thead>
<tbody>
<tr>
<td>add_field</td>
<td>hash</td>
<td>No</td>
<td>{}</td>
</tr>
<tr>
<td>add_tag</td>
<td>array</td>
<td>No</td>
<td>[]</td>
</tr>
<tr>
<td>periodic_flush</td>
<td>boolean</td>
<td>No</td>
<td>false</td>
</tr>
<tr>
<td>remove_field</td>
<td>array</td>
<td>No</td>
<td>[]</td>
</tr>
<tr>
<td>remove_tag</td>
<td>array</td>
<td>No</td>
<td>[]</td>
</tr>
<tr>
<td>source</td>
<td>string</td>
<td>Yes</td>
<td></td>
</tr>
<tr>
<td>target</td>
<td>string</td>
<td>No</td>
<td></td>
</tr>
</tbody>
</table>
<h4 id="详情-7"><a href="#详情-7" class="headerlink" title="详情"></a>详情</h4><p><strong>add_field</strong></p>
<ul>
<li>值类型是哈希</li>
<li>默认值为{}</li>
</ul>
<p>如果此过滤器成功，请将任意字段添加到此事件。字段名称可以是动态的，并使用％{field}包括事件的部分。</p>
<p>例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">filter &#123;</div><div class="line">  json_encode &#123;</div><div class="line">    add_field =&gt; &#123; &quot;foo_%&#123;somefield&#125;&quot; =&gt; &quot;Hello world, from %&#123;host&#125;&quot; &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"># You can also add multiple fields at once:</div><div class="line">filter &#123;</div><div class="line">  json_encode &#123;</div><div class="line">    add_field =&gt; &#123;</div><div class="line">      &quot;foo_%&#123;somefield&#125;&quot; =&gt; &quot;Hello world, from %&#123;host&#125;&quot;</div><div class="line">      &quot;new_field&quot; =&gt; &quot;new_static_value&quot;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>如果事件有字段“somefield”==“hello”此过滤器，如果成功，将添加字段foo_hello，如果它存在，与上面的值和％{host}块替换的事件中的值。第二个例子也将添加一个硬编码字段。</p>
<p><strong>add_tag</strong></p>
<ul>
<li>值类型是数组</li>
<li>默认值为[]</li>
</ul>
<p>如果此过滤器成功，请向事件中添加任意标记。标签可以是动态的，并使用％{字段}语法包括事件的部分。</p>
<p>例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">filter &#123;</div><div class="line">  json_encode &#123;</div><div class="line">    add_tag =&gt; [ &quot;foo_%&#123;somefield&#125;&quot; ]</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"># You can also add multiple tags at once:</div><div class="line">filter &#123;</div><div class="line">  json_encode &#123;</div><div class="line">    add_tag =&gt; [ &quot;foo_%&#123;somefield&#125;&quot;, &quot;taggedy_tag&quot;]</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>如果事件有字段“somefield”==“hello”这个过滤器，在成功时，将添加一个标签foo_hello（第二个例子当然会添加一个taggedy_tag标签）。</p>
<p><strong>periodic_flush</strong></p>
<ul>
<li>值类型是布尔值</li>
<li>默认值为false</li>
</ul>
<p>定期调用过滤器flush方法。可选的。</p>
<p><strong>remove_field</strong></p>
<ul>
<li>值类型是数组</li>
<li>默认值为[]</li>
</ul>
<p>如果此过滤器成功，请从此事件中删除任意字段。例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">filter &#123;</div><div class="line">  json_encode &#123;</div><div class="line">    remove_field =&gt; [ &quot;foo_%&#123;somefield&#125;&quot; ]</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"># You can also remove multiple fields at once:</div><div class="line">filter &#123;</div><div class="line">  json_encode &#123;</div><div class="line">    remove_field =&gt; [ &quot;foo_%&#123;somefield&#125;&quot;, &quot;my_extraneous_field&quot; ]</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>如果事件有字段“somefield”==“hello”此过滤器，如果成功，将删除名为foo_hello的字段（如果存在）。第二个示例将删除一个附加的非动态字段。</p>
<p><strong>remove_tag</strong></p>
<ul>
<li>值类型是数组</li>
<li>默认值为[]</li>
</ul>
<p>如果此过滤器成功，请从事件中删除任意标记。标签可以是动态的，并使用％{字段}语法包括事件的部分。</p>
<p>例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">filter &#123;</div><div class="line">  json_encode &#123;</div><div class="line">    remove_tag =&gt; [ &quot;foo_%&#123;somefield&#125;&quot; ]</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"># You can also remove multiple tags at once:</div><div class="line">filter &#123;</div><div class="line">  json_encode &#123;</div><div class="line">    remove_tag =&gt; [ &quot;foo_%&#123;somefield&#125;&quot;, &quot;sad_unwanted_tag&quot;]</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>如果事件有字段“somefield”==“hello”此过滤器，如果成功，将删除标签foo_hello如果它存在。第二个例子也会删除一个悲伤的，不需要的标签。</p>
<p><strong>source</strong></p>
<ul>
<li>这是必需的设置。</li>
<li>值类型是字符串</li>
<li>此设置没有默认值。</li>
</ul>
<p>要转换为JSON的字段。</p>
<p><strong>target</strong></p>
<ul>
<li>值类型是字符串</li>
<li>此设置没有默认值。</li>
</ul>
<p>将JSON写入的字段。如果未指定，源字段将被覆盖。</p>
<h3 id="ruby"><a href="#ruby" class="headerlink" title="ruby"></a>ruby</h3><p>执行ruby代码。</p>
<p>例如，要取消90％的事件，您可以执行以下操作：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">filter &#123;</div><div class="line">  ruby &#123;</div><div class="line">    # Cancel 90% of events</div><div class="line">    code =&gt; &quot;event.cancel if rand &lt;= 0.90&quot;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h4 id="概述-8"><a href="#概述-8" class="headerlink" title="概述"></a>概述</h4><p>此插件支持以下配置选项：</p>
<p>所需的配置选项：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">ruby &#123;</div><div class="line">    code =&gt; ...</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>可用配置选项：</p>
<table>
<thead>
<tr>
<th>Setting</th>
<th>Input type</th>
<th>Required</th>
<th>Default value</th>
</tr>
</thead>
<tbody>
<tr>
<td>add_field</td>
<td>hash</td>
<td>No</td>
<td>{}</td>
</tr>
<tr>
<td>add_tag</td>
<td>array</td>
<td>No</td>
<td>[]</td>
</tr>
<tr>
<td>code</td>
<td>string</td>
<td>Yes</td>
<td></td>
</tr>
<tr>
<td>init</td>
<td>string</td>
<td>No</td>
<td></td>
</tr>
<tr>
<td>periodic_flush</td>
<td>boolean</td>
<td>No</td>
<td>false</td>
</tr>
<tr>
<td>remove_field</td>
<td>array</td>
<td>No</td>
<td>[]</td>
</tr>
<tr>
<td>remove_tag</td>
<td>array</td>
<td>No</td>
<td>[]</td>
</tr>
</tbody>
</table>
<h4 id="详情-8"><a href="#详情-8" class="headerlink" title="详情"></a>详情</h4><p><strong>add_field</strong></p>
<ul>
<li>值类型是哈希</li>
<li>默认值为{}</li>
</ul>
<p>如果此过滤器成功，请将任意字段添加到此事件。字段名称可以是动态的，并使用％{field}包括事件的部分。</p>
<p>例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">filter &#123;</div><div class="line">  ruby &#123;</div><div class="line">    add_field =&gt; &#123; &quot;foo_%&#123;somefield&#125;&quot; =&gt; &quot;Hello world, from %&#123;host&#125;&quot; &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"># You can also add multiple fields at once:</div><div class="line">filter &#123;</div><div class="line">  ruby &#123;</div><div class="line">    add_field =&gt; &#123;</div><div class="line">      &quot;foo_%&#123;somefield&#125;&quot; =&gt; &quot;Hello world, from %&#123;host&#125;&quot;</div><div class="line">      &quot;new_field&quot; =&gt; &quot;new_static_value&quot;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>如果事件有字段“somefield”==“hello”此过滤器，如果成功，将添加字段foo_hello，如果它存在，与上面的值和％{host}块替换的事件中的值。第二个例子也将添加一个硬编码字段。</p>
<p><strong>add_tag</strong></p>
<ul>
<li>值类型是数组</li>
<li>默认值为[]</li>
</ul>
<p>如果此过滤器成功，请向事件中添加任意标记。标签可以是动态的，并使用％{字段}语法包括事件的部分。</p>
<p>例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">filter &#123;</div><div class="line">  ruby &#123;</div><div class="line">    add_tag =&gt; [ &quot;foo_%&#123;somefield&#125;&quot; ]</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"># You can also add multiple tags at once:</div><div class="line">filter &#123;</div><div class="line">  ruby &#123;</div><div class="line">    add_tag =&gt; [ &quot;foo_%&#123;somefield&#125;&quot;, &quot;taggedy_tag&quot;]</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>如果事件有字段“somefield”==“hello”这个过滤器，在成功时，将添加一个标签foo_hello（第二个例子当然会添加一个taggedy_tag标签）。</p>
<p><strong>code</strong></p>
<ul>
<li>这是必需的设置。</li>
<li>值类型是字符串</li>
<li>此设置没有默认值。</li>
</ul>
<p>为每个事件执行的代码。您将有一个事件变量可用，它是事件本身。</p>
<p><strong>init</strong></p>
<ul>
<li>值类型是字符串</li>
<li>此设置没有默认值。</li>
</ul>
<p>在logstash启动时执行的任何代码</p>
<p><strong>periodic_flush</strong></p>
<ul>
<li>值类型是布尔值</li>
<li>默认值为false</li>
</ul>
<p>定期调用过滤器flush方法。可选的。</p>
<p><strong>remove_field</strong></p>
<ul>
<li>值类型是数组</li>
<li>默认值为[]</li>
</ul>
<p>如果此过滤器成功，请从此事件中删除任意字段。例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">filter &#123;</div><div class="line">  ruby &#123;</div><div class="line">    remove_field =&gt; [ &quot;foo_%&#123;somefield&#125;&quot; ]</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"># You can also remove multiple fields at once:</div><div class="line">filter &#123;</div><div class="line">  ruby &#123;</div><div class="line">    remove_field =&gt; [ &quot;foo_%&#123;somefield&#125;&quot;, &quot;my_extraneous_field&quot; ]</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>如果事件有字段“somefield”==“hello”此过滤器，如果成功，将删除名为foo_hello的字段（如果存在）。第二个示例将删除一个附加的非动态字段。</p>
<p><strong>remove_tag</strong></p>
<ul>
<li>值类型是数组</li>
<li>默认值为[]</li>
</ul>
<p>如果此过滤器成功，请从事件中删除任意标记。标签可以是动态的，并使用％{字段}语法包括事件的部分。</p>
<p>例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">filter &#123;</div><div class="line">  ruby &#123;</div><div class="line">    remove_tag =&gt; [ &quot;foo_%&#123;somefield&#125;&quot; ]</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"># You can also remove multiple tags at once:</div><div class="line">filter &#123;</div><div class="line">  ruby &#123;</div><div class="line">    remove_tag =&gt; [ &quot;foo_%&#123;somefield&#125;&quot;, &quot;sad_unwanted_tag&quot;]</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>如果事件有字段“somefield”==“hello”此过滤器，如果成功，将删除标签foo_hello如果它存在。第二个例子也会删除一个悲伤的，不需要的标签。</p>
<h3 id="split"><a href="#split" class="headerlink" title="split"></a>split</h3><p>分割过滤器通过拆分其中一个字段并将分割后的每个值放入原始事件的克隆中来克隆事件。 要分割的字段可以是字符串或数组。</p>
<p>此过滤器的一个示例用例是从exec输入插件获取输出，该输出为命令的整个输出发出一个事件，并通过换行分割该输出 - 使每行成为事件。</p>
<p>每个拆分的最终结果是事件的完整副本，只有给定字段的当前拆分部分已更改。</p>
<h4 id="概述-9"><a href="#概述-9" class="headerlink" title="概述"></a>概述</h4><p>此插件支持以下配置选项：</p>
<p>所需的配置选项：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">split &#123;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>可用配置选项：</p>
<table>
<thead>
<tr>
<th>Setting</th>
<th>Input type</th>
<th>Required</th>
<th>Default value</th>
</tr>
</thead>
<tbody>
<tr>
<td>add_field</td>
<td>hash</td>
<td>No</td>
<td>{}</td>
</tr>
<tr>
<td>add_tag</td>
<td>array</td>
<td>No</td>
<td>[]</td>
</tr>
<tr>
<td>field</td>
<td>string</td>
<td>No</td>
<td>“message”</td>
</tr>
<tr>
<td>periodic_flush</td>
<td>boolean</td>
<td>No</td>
<td>false</td>
</tr>
<tr>
<td>remove_field</td>
<td>array</td>
<td>No</td>
<td>[]</td>
</tr>
<tr>
<td>remove_tag</td>
<td>array</td>
<td>No</td>
<td>[]</td>
</tr>
<tr>
<td>target</td>
<td>string</td>
<td>No</td>
<td></td>
</tr>
<tr>
<td>terminator</td>
<td>string</td>
<td>No</td>
<td>“\n”</td>
</tr>
</tbody>
</table>
<h4 id="详情-9"><a href="#详情-9" class="headerlink" title="详情"></a>详情</h4><p><strong>add_field</strong></p>
<ul>
<li>值类型是哈希</li>
<li>默认值为{}</li>
</ul>
<p>如果此过滤器成功，请将任意字段添加到此事件。字段名称可以是动态的，并使用％{field}包括事件的部分。</p>
<p>例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">filter &#123;</div><div class="line">  split &#123;</div><div class="line">    add_field =&gt; &#123; &quot;foo_%&#123;somefield&#125;&quot; =&gt; &quot;Hello world, from %&#123;host&#125;&quot; &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"># You can also add multiple fields at once:</div><div class="line">filter &#123;</div><div class="line">  split &#123;</div><div class="line">    add_field =&gt; &#123;</div><div class="line">      &quot;foo_%&#123;somefield&#125;&quot; =&gt; &quot;Hello world, from %&#123;host&#125;&quot;</div><div class="line">      &quot;new_field&quot; =&gt; &quot;new_static_value&quot;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>如果事件有字段“somefield”==“hello”此过滤器，如果成功，将添加字段foo_hello，如果它存在，与上面的值和％{host}块替换的事件中的值。第二个例子也将添加一个硬编码字段。</p>
<p><strong>add_tag</strong></p>
<ul>
<li>值类型是数组</li>
<li>默认值为[]</li>
</ul>
<p>如果此过滤器成功，请向事件中添加任意标记。标签可以是动态的，并使用％{字段}语法包括事件的部分。</p>
<p>例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">filter &#123;</div><div class="line">  split &#123;</div><div class="line">    add_tag =&gt; [ &quot;foo_%&#123;somefield&#125;&quot; ]</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"># You can also add multiple tags at once:</div><div class="line">filter &#123;</div><div class="line">  split &#123;</div><div class="line">    add_tag =&gt; [ &quot;foo_%&#123;somefield&#125;&quot;, &quot;taggedy_tag&quot;]</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>如果事件有字段“somefield”==“hello”这个过滤器，在成功时，将添加一个标签foo_hello（第二个例子当然会添加一个taggedy_tag标签）。</p>
<p><strong>field</strong></p>
<ul>
<li>值类型是字符串</li>
<li>默认值为“message”</li>
</ul>
<p>其值由终止符拆分的字段。</p>
<p><strong>periodic_flush</strong></p>
<ul>
<li>值类型是布尔值</li>
<li>默认值为false</li>
</ul>
<p>定期调用过滤器flush方法。可选的。</p>
<p><strong>remove_field</strong></p>
<ul>
<li>值类型是数组</li>
<li>默认值为[]</li>
</ul>
<p>如果此过滤器成功，请从此事件中删除任意字段。例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">filter &#123;</div><div class="line">  split &#123;</div><div class="line">    remove_field =&gt; [ &quot;foo_%&#123;somefield&#125;&quot; ]</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"># You can also remove multiple fields at once:</div><div class="line">filter &#123;</div><div class="line">  split &#123;</div><div class="line">    remove_field =&gt; [ &quot;foo_%&#123;somefield&#125;&quot;, &quot;my_extraneous_field&quot; ]</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>如果事件有字段“somefield”==“hello”此过滤器，如果成功，将删除名为foo_hello的字段（如果存在）。第二个示例将删除一个附加的非动态字段。</p>
<p><strong>remove_tag</strong></p>
<ul>
<li>值类型是数组</li>
<li>默认值为[]</li>
</ul>
<p>如果此过滤器成功，请从事件中删除任意标记。标签可以是动态的，并使用％{字段}语法包括事件的部分。</p>
<p>例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">filter &#123;</div><div class="line">  split &#123;</div><div class="line">    remove_tag =&gt; [ &quot;foo_%&#123;somefield&#125;&quot; ]</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"># You can also remove multiple tags at once:</div><div class="line">filter &#123;</div><div class="line">  split &#123;</div><div class="line">    remove_tag =&gt; [ &quot;foo_%&#123;somefield&#125;&quot;, &quot;sad_unwanted_tag&quot;]</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>如果事件有字段“somefield”==“hello”此过滤器，如果成功，将删除标签foo_hello如果它存在。第二个例子也会删除一个悲伤的，不需要的标签。</p>
<p><strong>target</strong></p>
<ul>
<li>值类型是字符串</li>
<li>此设置没有默认值。</li>
</ul>
<p>新事件中的值将被分割为的字段。如果未设置，目标字段默认为拆分字段名称。</p>
<p><strong>terminator</strong></p>
<ul>
<li>值类型是字符串</li>
<li>默认值为“<code>\n</code>”</li>
</ul>
<p>要拆分的字符串。这通常是行终止符，但可以是任何字符串。</p>
<h3 id="uuid"><a href="#uuid" class="headerlink" title="uuid"></a>uuid</h3><p>uuid过滤器允许您生成UUID，并将其作为字段添加到每个已处理的事件。</p>
<p>如果您需要生成每个事件唯一的字符串，即使同一个输入被处理多次，这也很有用。 如果要生成每次处理具有给定内容的事件（即哈希）时相同的字符串，则应使用指纹过滤器。</p>
<p>生成的UUID遵循RFC 4122中的版本4定义），并且将被表示为标准十六进制字符串格式，例如。 “e08806fe-02af-406c-bbde-8a5ae4475e57”。</p>
<h4 id="概述-10"><a href="#概述-10" class="headerlink" title="概述"></a>概述</h4><p>此插件支持以下配置选项：</p>
<p>所需的配置选项：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">uuid &#123;</div><div class="line">    target =&gt; ...</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>可用配置选项：</p>
<table>
<thead>
<tr>
<th>Setting</th>
<th>Input type</th>
<th>Required</th>
<th>Default value</th>
</tr>
</thead>
<tbody>
<tr>
<td>add_field</td>
<td>hash</td>
<td>No</td>
<td>{}</td>
</tr>
<tr>
<td>add_tag</td>
<td>array</td>
<td>No</td>
<td>[]</td>
</tr>
<tr>
<td>overwrite</td>
<td>boolean</td>
<td>No</td>
<td>false</td>
</tr>
<tr>
<td>periodic_flush</td>
<td>boolean</td>
<td>No</td>
<td>false</td>
</tr>
<tr>
<td>remove_field</td>
<td>array</td>
<td>No</td>
<td>[]</td>
</tr>
<tr>
<td>remove_tag</td>
<td>array</td>
<td>No</td>
<td>[]</td>
</tr>
<tr>
<td>target</td>
<td>string</td>
<td>Yes</td>
<td></td>
</tr>
</tbody>
</table>
<h4 id="详情-10"><a href="#详情-10" class="headerlink" title="详情"></a>详情</h4><p><strong>add_field</strong></p>
<ul>
<li>值类型是哈希</li>
<li>默认值为{}</li>
</ul>
<p>如果此过滤器成功，请将任意字段添加到此事件。字段名称可以是动态的，并使用％{field}包括事件的部分。</p>
<p>例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">filter &#123;</div><div class="line">  uuid &#123;</div><div class="line">    add_field =&gt; &#123; &quot;foo_%&#123;somefield&#125;&quot; =&gt; &quot;Hello world, from %&#123;host&#125;&quot; &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>您也可以一次添加多个字段：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">filter &#123;</div><div class="line">  uuid &#123;</div><div class="line">    add_field =&gt; &#123;</div><div class="line">      &quot;foo_%&#123;somefield&#125;&quot; =&gt; &quot;Hello world, from %&#123;host&#125;&quot;</div><div class="line">      &quot;new_field&quot; =&gt; &quot;new_static_value&quot;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>如果事件有字段“somefield”==“hello”此过滤器，如果成功，将添加字段foo_hello，如果它存在，与上面的值和％{host}块替换的事件中的值。第二个例子也将添加一个硬编码字段。</p>
<p><strong>add_tag</strong></p>
<ul>
<li>值类型是数组</li>
<li>默认值为[]</li>
</ul>
<p>如果此过滤器成功，请向事件中添加任意标记。标签可以是动态的，并使用％{字段}语法包括事件的部分。</p>
<p>例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">filter &#123;</div><div class="line">  uuid &#123;</div><div class="line">    add_tag =&gt; [ &quot;foo_%&#123;somefield&#125;&quot; ]</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>您也可以一次添加多个代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">filter &#123;</div><div class="line">  uuid &#123;</div><div class="line">    add_tag =&gt; [ &quot;foo_%&#123;somefield&#125;&quot;, &quot;taggedy_tag&quot;]</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>如果事件有字段“somefield”==“hello”这个过滤器，在成功时，将添加一个标签foo_hello（第二个例子当然会添加一个taggedy_tag标签）。</p>
<p><strong>overwrite</strong></p>
<ul>
<li>值类型是布尔值</li>
<li>默认值为false</li>
</ul>
<p>如果当前字段中的值（如果有）应该被生成的UUID覆盖。默认为false（即，如果字段存在，具有ANY值，则不会被覆盖）</p>
<p>例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">filter &#123;</div><div class="line">   uuid &#123;</div><div class="line">     target    =&gt; &quot;@uuid&quot;</div><div class="line">     overwrite =&gt; true</div><div class="line">   &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><strong>periodic_flush</strong></p>
<ul>
<li>值类型是布尔值</li>
<li>默认值为false</li>
</ul>
<p>定期调用过滤器flush方法。可选的。</p>
<p><strong>remove_field</strong></p>
<ul>
<li>值类型是数组</li>
<li>默认值为[]</li>
</ul>
<p>如果此过滤器成功，请从此事件中删除任意字段。例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">filter &#123;</div><div class="line">  uuid &#123;</div><div class="line">    remove_field =&gt; [ &quot;foo_%&#123;somefield&#125;&quot; ]</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>您也可以一次删除多个字段：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">filter &#123;</div><div class="line">  uuid &#123;</div><div class="line">    remove_field =&gt; [ &quot;foo_%&#123;somefield&#125;&quot;, &quot;my_extraneous_field&quot; ]</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>如果事件有字段“somefield”==“hello”此过滤器，如果成功，将删除名为foo_hello的字段（如果存在）。第二个示例将删除一个附加的非动态字段。</p>
<p><strong>remove_tag</strong></p>
<ul>
<li>值类型是数组</li>
<li>默认值为[]</li>
</ul>
<p>如果此过滤器成功，请从事件中删除任意标记。标签可以是动态的，并使用％{字段}语法包括事件的部分。</p>
<p>例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">filter &#123;</div><div class="line">  uuid &#123;</div><div class="line">    remove_tag =&gt; [ &quot;foo_%&#123;somefield&#125;&quot; ]</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>您也可以一次移除多个标记：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">filter &#123;</div><div class="line">  uuid &#123;</div><div class="line">    remove_tag =&gt; [ &quot;foo_%&#123;somefield&#125;&quot;, &quot;sad_unwanted_tag&quot;]</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>如果事件有字段“somefield”==“hello”此过滤器，如果成功，将删除标签foo_hello如果它存在。第二个例子也会删除一个悲伤的，不需要的标签。</p>
<p><strong>target</strong></p>
<ul>
<li>这是必需的设置。</li>
<li>值类型是字符串</li>
<li>此设置没有默认值。</li>
</ul>
<p>向字段添加UUID。</p>
<p>例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">filter &#123;</div><div class="line">  uuid &#123;</div><div class="line">    target =&gt; &quot;@uuid&quot;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="urldecode"><a href="#urldecode" class="headerlink" title="urldecode"></a>urldecode</h3><p>urldecode过滤器用于解码被urlencoded的字段。</p>
<h4 id="概述-11"><a href="#概述-11" class="headerlink" title="概述"></a>概述</h4><p>此插件支持以下配置选项：</p>
<p>所需的配置选项：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">urldecode &#123;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>可用配置选项：</p>
<table>
<thead>
<tr>
<th>Setting</th>
<th>Input type</th>
<th>Required</th>
<th>Default value</th>
</tr>
</thead>
<tbody>
<tr>
<td>add_field</td>
<td>hash</td>
<td>No</td>
<td>{}</td>
</tr>
<tr>
<td>add_tag</td>
<td>array</td>
<td>No</td>
<td>[]</td>
</tr>
<tr>
<td>all_fields</td>
<td>boolean</td>
<td>No</td>
<td>false</td>
</tr>
<tr>
<td>charset</td>
<td>string, one of [“ASCII-8BIT”, “Big5”, “Big5-HKSCS”, “Big5-UAO”, “CP949”, “Emacs-Mule”, “EUC-JP”, “EUC-KR”, “EUC-TW”, “GB18030”, “GBK”, “ISO-8859-1”, “ISO-8859-2”, “ISO-8859-3”, “ISO-8859-4”, “ISO-8859-5”, “ISO-8859-6”, “ISO-8859-7”, “ISO-8859-8”, “ISO-8859-9”, “ISO-8859-10”, “ISO-8859-11”, “ISO-8859-13”, “ISO-8859-14”, “ISO-8859-15”, “ISO-8859-16”, “KOI8-R”, “KOI8-U”, “Shift_JIS”, “US-ASCII”, “UTF-8”, “UTF-16BE”, “UTF-16LE”, “UTF-32BE”, “UTF-32LE”, “Windows-1251”, “GB2312”, “Windows-31J”, “IBM437”, “IBM737”, “IBM775”, “CP850”, “IBM852”, “CP852”, “IBM855”, “CP855”, “IBM857”, “IBM860”, “IBM861”, “IBM862”, “IBM863”, “IBM864”, “IBM865”, “IBM866”, “IBM869”, “Windows-1258”, “GB1988”, “macCentEuro”, “macCroatian”, “macCyrillic”, “macGreek”, “macIceland”, “macRoman”, “macRomania”, “macThai”, “macTurkish”, “macUkraine”, “CP950”, “CP951”, “stateless-ISO-2022-JP”, “eucJP-ms”, “CP51932”, “EUC-JIS-2004”, “GB12345”, “ISO-2022-JP”, “ISO-2022-JP-2”, “CP50220”, “CP50221”, “Windows-1252”, “Windows-1250”, “Windows-1256”, “Windows-1253”, “Windows-1255”, “Windows-1254”, “TIS-620”, “Windows-874”, “Windows-1257”, “MacJapanese”, “UTF-7”, “UTF8-MAC”, “UTF-16”, “UTF-32”, “UTF8-DoCoMo”, “SJIS-DoCoMo”, “UTF8-KDDI”, “SJIS-KDDI”, “ISO-2022-JP-KDDI”, “stateless-ISO-2022-JP-KDDI”, “UTF8-SoftBank”, “SJIS-SoftBank”, “BINARY”, “CP437”, “CP737”, “CP775”, “IBM850”, “CP857”, “CP860”, “CP861”, “CP862”, “CP863”, “CP864”, “CP865”, “CP866”, “CP869”, “CP1258”, “Big5-HKSCS:2008”, “eucJP”, “euc-jp-ms”, “EUC-JISX0213”, “eucKR”, “eucTW”, “EUC-CN”, “eucCN”, “CP936”, “ISO2022-JP”, “ISO2022-JP2”, “ISO8859-1”, “CP1252”, “ISO8859-2”, “CP1250”, “ISO8859-3”, “ISO8859-4”, “ISO8859-5”, “ISO8859-6”, “CP1256”, “ISO8859-7”, “CP1253”, “ISO8859-8”, “CP1255”, “ISO8859-9”, “CP1254”, “ISO8859-10”, “ISO8859-11”, “CP874”, “ISO8859-13”, “CP1257”, “ISO8859-14”, “ISO8859-15”, “ISO8859-16”, “CP878”, “MacJapan”, “ASCII”, “ANSI_X3.4-1968”, “646”, “CP65000”, “CP65001”, “UTF-8-MAC”, “UTF-8-HFS”, “UCS-2BE”, “UCS-4BE”, “UCS-4LE”, “CP932”, “csWindows31J”, “SJIS”, “PCK”, “CP1251”, “external”, “locale”]</td>
<td>No</td>
<td>“UTF-8”</td>
</tr>
<tr>
<td>field</td>
<td>string</td>
<td>No</td>
<td>“message”</td>
</tr>
<tr>
<td>periodic_flush</td>
<td>boolean</td>
<td>No</td>
<td>false</td>
</tr>
<tr>
<td>remove_field</td>
<td>array</td>
<td>No</td>
<td>[]</td>
</tr>
<tr>
<td>remove_tag</td>
<td>array</td>
<td>No</td>
<td>[]</td>
</tr>
</tbody>
</table>
<h4 id="详情-11"><a href="#详情-11" class="headerlink" title="详情"></a>详情</h4><p><strong>add_field</strong></p>
<ul>
<li>值类型是哈希</li>
<li>默认值为{}</li>
</ul>
<p>如果此过滤器成功，请将任意字段添加到此事件。字段名称可以是动态的，并使用％{field}包括事件的部分。</p>
<p>例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">filter &#123;</div><div class="line">  urldecode &#123;</div><div class="line">    add_field =&gt; &#123; &quot;foo_%&#123;somefield&#125;&quot; =&gt; &quot;Hello world, from %&#123;host&#125;&quot; &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"># 您也可以一次添加多个字段</div><div class="line">filter &#123;</div><div class="line">  urldecode &#123;</div><div class="line">    add_field =&gt; &#123;</div><div class="line">      &quot;foo_%&#123;somefield&#125;&quot; =&gt; &quot;Hello world, from %&#123;host&#125;&quot;</div><div class="line">      &quot;new_field&quot; =&gt; &quot;new_static_value&quot;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>如果事件有字段“somefield”==“hello”此过滤器，如果成功，将添加字段foo_hello，如果它存在，与上面的值和％{host}块替换的事件中的值。第二个例子也将添加一个硬编码字段。</p>
<p><strong>add_tag</strong></p>
<ul>
<li>值类型是数组</li>
<li>默认值为[]</li>
</ul>
<p>如果此过滤器成功，请向事件中添加任意标记。标签可以是动态的，并使用％{字段}语法包括事件的部分。</p>
<p>例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">filter &#123;</div><div class="line">  urldecode &#123;</div><div class="line">    add_tag =&gt; [ &quot;foo_%&#123;somefield&#125;&quot; ]</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"># You can also add multiple tags at once:</div><div class="line">filter &#123;</div><div class="line">  urldecode &#123;</div><div class="line">    add_tag =&gt; [ &quot;foo_%&#123;somefield&#125;&quot;, &quot;taggedy_tag&quot;]</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>如果事件有字段“somefield”==“hello”这个过滤器，在成功时，将添加一个标签foo_hello（第二个例子当然会添加一个taggedy_tag标签）。</p>
<p><strong>all_fields</strong></p>
<ul>
<li>值类型是布尔值</li>
<li>默认值为false</li>
</ul>
<p>Urldecode所有字段</p>
<p><strong>charset</strong></p>
<ul>
<li>值可以是以下任何一个：ASCII-8BIT，Big5，Big5-HKSCS，Big5-UAO，CP949，Emacs-Mule，EUC-JP，EUC-KR，EUC-TW，GB18030，GBK，ISO-8859-1，ISO- ISO-8859-3，ISO-8859-4，ISO-8859-5，ISO-8859-6，ISO-8859-7，ISO-8859-8，ISO-8859-9，ISO- 10，ISO-8859-11，ISO-8859-13，ISO-8859-14，ISO-8859-15，ISO-8859-16，KOI8-R，KOI8-U，Shift_JIS，US-ASCII，UTF- UT85，IBM855，IBM855，IBM857，IBM860，IBM861，IBM862，IBM853，UT86，UTF-16BE，UTF-16LE，UTF-32BE，UTF-32LE，Windows-1251，GB2312，Windows-31J，IBM437，IBM737，IBM775， IBM863，IBM864，IBM865，IBM866，IBM869，Windows-1258，GB1988，macCentEuro，macCroatian，macCyrillic，macGreek，macIlandland，macRoman，macRomania，macThai，macTurkish，macUkraine，CP950，CP951，stateless-ISO-2022-JP，eucJP- ms，CP51932，EUC-JIS-2004，GB12345，ISO-2022-JP，ISO-2022-JP-2，CP50220，CP50221，Windows-1252，Windows-1250，Windows-1256，Windows-1253， Windows-1254，TIS-620，Windows-874，Windows-1257，MacJapanese，UTF-7，UTF8-MAC，UTF-16，UTF-32，UTF8-DoCoMo，SJIS-DoCoMo，UTF8-KDDI，SJIS- ISO-2022-JP-KDDI，无状态ISO-2022-JP-KDDI，UTF8-软银行，SJIS-软银行，BINARY，CP437，CP737，CP775，IBM850，CP857，CP860，CP861，CP862，CP863，CP864，CP865， CP866，CP869，CP1258，Big5-HKSCS：2008，eucJP，euc-jp-ms，EUC-JISX0213，eucKR，eucTW，EUC-CN，eucCN，CP936，ISO2022-JP，ISO2022-JP2，ISO8859-1， ISO8859-3，ISO8859-4，ISO8859-5，ISO8859-6，CP1256，ISO8859-7，CP1253，ISO8859-8，CP1255，ISO8859-9，CP1254，ISO8859-10，ISO8859-11， CP874，ISO8859-13，CP1257，ISO8859-14，ISO8859-15，ISO8859-16，CP878，MacJapan，ASCII，ANSI_X3.4-1968,646，CP65000，CP65001，UTF-8-MAC，UTF-8-HFS， UCS-2BE，UCS-4BE，UCS-4LE，CP932，csWindows31J，SJIS，PCK，CP1251，external，locale</li>
<li>默认值为“UTF-8”</li>
</ul>
<p>此过滤器中使用的字符编码。例子包括UTF-8和cp1252</p>
<p>如果您的url已解码的字符串是Latin-1（又名cp1252）或除UTF-8之外的其他字符集，此设置很有用。</p>
<p><strong>field</strong></p>
<ul>
<li>值类型是字符串</li>
<li>默认值为“message”</li>
</ul>
<p>值被urldecoded的字段</p>
<p><strong>periodic_flush</strong></p>
<ul>
<li>值类型是布尔值</li>
<li>默认值为false</li>
</ul>
<p>定期调用过滤器flush方法。可选的。</p>
<p><strong>remove_field</strong></p>
<ul>
<li>值类型是数组</li>
<li>默认值为[]</li>
</ul>
<p>如果此过滤器成功，请从此事件中删除任意字段。例：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">filter &#123;</div><div class="line">  urldecode &#123;</div><div class="line">    remove_field =&gt; [ &quot;foo_%&#123;somefield&#125;&quot; ]</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"># You can also remove multiple fields at once:</div><div class="line">filter &#123;</div><div class="line">  urldecode &#123;</div><div class="line">    remove_field =&gt; [ &quot;foo_%&#123;somefield&#125;&quot;, &quot;my_extraneous_field&quot; ]</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>如果事件有字段“somefield”==“hello”此过滤器，如果成功，将删除名为foo_hello的字段（如果存在）。第二个示例将删除一个附加的非动态字段。</p>
<p><strong>remove_tag</strong></p>
<ul>
<li>值类型是数组</li>
<li>默认值为[]</li>
</ul>
<p>如果此过滤器成功，请从事件中删除任意标记。标签可以是动态的，并使用％{字段}语法包括事件的部分。</p>
<p>例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">filter &#123;</div><div class="line">  urldecode &#123;</div><div class="line">    remove_tag =&gt; [ &quot;foo_%&#123;somefield&#125;&quot; ]</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"># You can also remove multiple tags at once:</div><div class="line">filter &#123;</div><div class="line">  urldecode &#123;</div><div class="line">    remove_tag =&gt; [ &quot;foo_%&#123;somefield&#125;&quot;, &quot;sad_unwanted_tag&quot;]</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>如果事件有字段“somefield”==“hello”此过滤器，如果成功，将删除标签foo_hello如果它存在。第二个例子也会删除一个悲伤的，不需要的标签。</p>
<h3 id="useragent"><a href="#useragent" class="headerlink" title="useragent"></a>useragent</h3><p>基于BrowserScope数据将用户代理字符串解析为结构化数据</p>
<p>UserAgent过滤器，添加有关用户代理的信息，如系列，操作系统，版本和设备</p>
<p>Logstash发行版随附了使用Apache 2.0许可证从ua-parser提供的regexes.yaml数据库。 有关ua-parser的更多详细信息，请参见<a href="https://github.com/tobie/ua-parser/。" target="_blank" rel="external">https://github.com/tobie/ua-parser/。</a></p>
<h4 id="概述-12"><a href="#概述-12" class="headerlink" title="概述"></a>概述</h4><p>此插件支持以下配置选项：</p>
<p>所需的配置选项：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">useragent &#123;</div><div class="line">    source =&gt; ...</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>可用配置选项：</p>
<table>
<thead>
<tr>
<th>Setting</th>
<th>Input type</th>
<th>Required</th>
<th>Default value</th>
</tr>
</thead>
<tbody>
<tr>
<td>add_field</td>
<td>hash</td>
<td>No</td>
<td>{}</td>
</tr>
<tr>
<td>add_tag</td>
<td>array</td>
<td>No</td>
<td>[]</td>
</tr>
<tr>
<td>lru_cache_size</td>
<td>number</td>
<td>No</td>
<td>1000</td>
</tr>
<tr>
<td>periodic_flush</td>
<td>boolean</td>
<td>No</td>
<td>false</td>
</tr>
<tr>
<td>prefix</td>
<td>string</td>
<td>No</td>
<td>“”</td>
</tr>
<tr>
<td>regexes</td>
<td>string</td>
<td>No</td>
<td></td>
</tr>
<tr>
<td>remove_field</td>
<td>array</td>
<td>No</td>
<td>[]</td>
</tr>
<tr>
<td>remove_tag</td>
<td>array</td>
<td>No</td>
<td>[]</td>
</tr>
<tr>
<td>source</td>
<td>string</td>
<td>Yes</td>
<td></td>
</tr>
<tr>
<td>target</td>
<td>string</td>
<td>No</td>
<td></td>
</tr>
</tbody>
</table>
<h4 id="详情-12"><a href="#详情-12" class="headerlink" title="详情"></a>详情</h4><p><strong>add_field</strong></p>
<ul>
<li>值类型是哈希</li>
<li>默认值为{}</li>
</ul>
<p>如果此过滤器成功，请将任意字段添加到此事件。字段名称可以是动态的，并使用％{field}包括事件的部分。</p>
<p>例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">filter &#123;</div><div class="line">  useragent &#123;</div><div class="line">    add_field =&gt; &#123; &quot;foo_%&#123;somefield&#125;&quot; =&gt; &quot;Hello world, from %&#123;host&#125;&quot; &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"># 您也可以一次添加多个字段：</div><div class="line">filter &#123;</div><div class="line">  useragent &#123;</div><div class="line">    add_field =&gt; &#123;</div><div class="line">      &quot;foo_%&#123;somefield&#125;&quot; =&gt; &quot;Hello world, from %&#123;host&#125;&quot;</div><div class="line">      &quot;new_field&quot; =&gt; &quot;new_static_value&quot;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>如果事件有字段“somefield”==“hello”此过滤器，如果成功，将添加字段foo_hello，如果它存在，与上面的值和％{host}块替换的事件中的值。第二个例子也将添加一个硬编码字段。</p>
<p><strong>add_tag</strong></p>
<ul>
<li>值类型是数组</li>
<li>默认值为[]</li>
</ul>
<p>如果此过滤器成功，请向事件中添加任意标记。标签可以是动态的，并使用％{字段}语法包括事件的部分。</p>
<p>例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">filter &#123;</div><div class="line">  useragent &#123;</div><div class="line">    add_tag =&gt; [ &quot;foo_%&#123;somefield&#125;&quot; ]</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"># You can also add multiple tags at once:</div><div class="line">filter &#123;</div><div class="line">  useragent &#123;</div><div class="line">    add_tag =&gt; [ &quot;foo_%&#123;somefield&#125;&quot;, &quot;taggedy_tag&quot;]</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>如果事件有字段“somefield”==“hello”这个过滤器，在成功时，将添加一个标签foo_hello（第二个例子当然会添加一个taggedy_tag标签）。</p>
<p><strong>lru_cache_size</strong></p>
<ul>
<li>值类型是数字</li>
<li>默认值为1000</li>
</ul>
<p>UA解析是惊人的昂贵。此过滤器使用LRU缓存来利用这样的事实：用户代理经常在日志文件中彼此相邻，并且很少具有随机分布。设置的越高，项目在缓存中的可能性越大，并且此过滤器运行的速度越快。但是，如果您设置太高，您可以使用比所需的更多的内存。</p>
<p>为此选项尝试不同的值，以便为数据集找到最佳性能。</p>
<p>这必须设置为值&gt; 0。真的没有理由不想要这种行为，开销是最小的，速度增益很大。</p>
<p>重要的是注意这个配置值是全局的。也就是说，用户代理过滤器的所有实例共享同一缓存。最后声明的缓存大小将赢。这样做的原因是，对于在流水线中的不同点处的不同实例具有多个高速缓存将没有益处，这只会增加高速缓存未命中和浪费存储器的数量。</p>
<p><strong>periodic_flush</strong></p>
<ul>
<li>值类型是布尔值</li>
<li>默认值为false</li>
</ul>
<p>定期调用过滤器flush方法。可选的。</p>
<p><strong>prefix</strong></p>
<ul>
<li>值类型是字符串</li>
<li>默认值为“”</li>
</ul>
<p>预先附加到所有提取的键的字符串</p>
<p><strong>regexes</strong></p>
<ul>
<li>值类型是字符串</li>
<li>此设置没有默认值。</li>
</ul>
<p>regexes.yaml文件使用</p>
<p>如果不指定，这将默认为与logstash一起提供的regexes.yaml。</p>
<p>您可以在这里找到最新版本：https：//github.com/tobie/ua-parser/blob/master/regexes.yaml</p>
<p><strong>remove_field</strong></p>
<ul>
<li>值类型是数组</li>
<li>默认值为[]</li>
</ul>
<p>如果此过滤器成功，请从此事件中删除任意字段。例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">filter &#123;</div><div class="line">  useragent &#123;</div><div class="line">    remove_field =&gt; [ &quot;foo_%&#123;somefield&#125;&quot; ]</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"># You can also remove multiple fields at once:</div><div class="line">filter &#123;</div><div class="line">  useragent &#123;</div><div class="line">    remove_field =&gt; [ &quot;foo_%&#123;somefield&#125;&quot;, &quot;my_extraneous_field&quot; ]</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>如果事件有字段“somefield”==“hello”此过滤器，如果成功，将删除名为foo_hello的字段（如果存在）。第二个示例将删除一个附加的非动态字段。</p>
<p><strong>remove_tag</strong></p>
<ul>
<li>值类型是数组</li>
<li>默认值为[]</li>
</ul>
<p>如果此过滤器成功，请从事件中删除任意标记。标签可以是动态的，并使用％{字段}语法包括事件的部分。</p>
<p>例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">filter &#123;</div><div class="line">  useragent &#123;</div><div class="line">    remove_tag =&gt; [ &quot;foo_%&#123;somefield&#125;&quot; ]</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"># You can also remove multiple tags at once:</div><div class="line">filter &#123;</div><div class="line">  useragent &#123;</div><div class="line">    remove_tag =&gt; [ &quot;foo_%&#123;somefield&#125;&quot;, &quot;sad_unwanted_tag&quot;]</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>如果事件有字段“somefield”==“hello”此过滤器，如果成功，将删除标签foo_hello如果它存在。第二个例子也会删除一个悲伤的，不需要的标签。</p>
<p><strong>source</strong></p>
<ul>
<li>这是必需的设置。</li>
<li>值类型是字符串</li>
<li>此设置没有默认值。</li>
</ul>
<p>包含用户代理字符串的字段。如果此字段是数组，则仅使用第一个值。</p>
<p><strong>target</strong></p>
<ul>
<li>值类型是字符串</li>
<li>此设置没有默认值。</li>
</ul>
<p>要将用户代理数据分配到的字段的名称。</p>
<p>如果没有指定，用户代理数据将存储在事件的根中。</p>
<h3 id="xml"><a href="#xml" class="headerlink" title="xml"></a>xml</h3><p>XML过滤器。 获取包含XML的字段，并将其扩展为实际的数据结构。</p>
<h4 id="概述-13"><a href="#概述-13" class="headerlink" title="概述"></a>概述</h4><p>此插件支持以下配置选项：</p>
<p>所需的配置选项：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">xml &#123;</div><div class="line">    source =&gt; ...</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>可用配置选项：</p>
<table>
<thead>
<tr>
<th>Setting</th>
<th>Input type</th>
<th>Required</th>
<th>Default value</th>
</tr>
</thead>
<tbody>
<tr>
<td>add_field</td>
<td>hash</td>
<td>No</td>
<td>{}</td>
</tr>
<tr>
<td>add_tag</td>
<td>array</td>
<td>No</td>
<td>[]</td>
</tr>
<tr>
<td>force_array</td>
<td>boolean</td>
<td>No</td>
<td>true</td>
</tr>
<tr>
<td>namespaces</td>
<td>hash</td>
<td>No</td>
<td>{}</td>
</tr>
<tr>
<td>periodic_flush</td>
<td>boolean</td>
<td>No</td>
<td>false</td>
</tr>
<tr>
<td>remove_field</td>
<td>array</td>
<td>No</td>
<td>[]</td>
</tr>
<tr>
<td>remove_namespaces</td>
<td>boolean</td>
<td>No</td>
<td>false</td>
</tr>
<tr>
<td>remove_tag</td>
<td>array</td>
<td>No</td>
<td>[]</td>
</tr>
<tr>
<td>source</td>
<td>string</td>
<td>Yes</td>
<td></td>
</tr>
<tr>
<td>store_xml</td>
<td>boolean</td>
<td>No</td>
<td>true</td>
</tr>
<tr>
<td>target</td>
<td>string</td>
<td>No</td>
<td></td>
</tr>
<tr>
<td>xpath</td>
<td>hash</td>
<td>No</td>
<td>{}</td>
</tr>
</tbody>
</table>
<h4 id="详情-13"><a href="#详情-13" class="headerlink" title="详情"></a>详情</h4><p><strong>add_field</strong><br>值类型是哈希<br>默认值为{}<br>如果此过滤器成功，请将任意字段添加到此事件。字段名称可以是动态的，并使用％{field}包括事件的部分。</p>
<p>例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">filter &#123;</div><div class="line">  xml &#123;</div><div class="line">    add_field =&gt; &#123; &quot;foo_%&#123;somefield&#125;&quot; =&gt; &quot;Hello world, from %&#123;host&#125;&quot; &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"># You can also add multiple fields at once:</div><div class="line">filter &#123;</div><div class="line">  xml &#123;</div><div class="line">    add_field =&gt; &#123;</div><div class="line">      &quot;foo_%&#123;somefield&#125;&quot; =&gt; &quot;Hello world, from %&#123;host&#125;&quot;</div><div class="line">      &quot;new_field&quot; =&gt; &quot;new_static_value&quot;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>如果事件有字段“somefield”==“hello”此过滤器，如果成功，将添加字段foo_hello，如果它存在，与上面的值和％{host}块替换的事件中的值。第二个例子也将添加一个硬编码字段。</p>
<p><strong>add_tag</strong></p>
<ul>
<li>值类型是数组</li>
<li>默认值为[]</li>
</ul>
<p>如果此过滤器成功，请向事件中添加任意标记。标签可以是动态的，并使用％{字段}语法包括事件的部分。</p>
<p>例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">filter &#123;</div><div class="line">  xml &#123;</div><div class="line">    add_tag =&gt; [ &quot;foo_%&#123;somefield&#125;&quot; ]</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"># You can also add multiple tags at once:</div><div class="line">filter &#123;</div><div class="line">  xml &#123;</div><div class="line">    add_tag =&gt; [ &quot;foo_%&#123;somefield&#125;&quot;, &quot;taggedy_tag&quot;]</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>如果事件有字段“somefield”==“hello”这个过滤器，在成功时，将添加一个标签foo_hello（第二个例子当然会添加一个taggedy_tag标签）。</p>
<p><strong>force_array</strong></p>
<ul>
<li>值类型是布尔值</li>
<li>默认值为true</li>
</ul>
<p>默认情况下，过滤器会强制单个元素为数组。将此设置为false将阻止在数组中存储单个元素。</p>
<p><strong>namespaces</strong></p>
<ul>
<li>值类型是哈希</li>
<li>默认值为{}</li>
</ul>
<p>默认情况下，只考虑根元素上的命名空间声明。这允许配置所有命名空间声明来解析XML文档。</p>
<p>例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">filter &#123;</div><div class="line">  xml &#123;</div><div class="line">    namespaces =&gt; &#123;</div><div class="line">      &quot;xsl&quot; =&gt; &quot;http://www.w3.org/1999/XSL/Transform&quot;</div><div class="line">      &quot;xhtml&quot; =&gt; http://www.w3.org/1999/xhtml&quot;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><strong>periodic_flush</strong></p>
<ul>
<li>值类型是布尔值</li>
<li>默认值为false</li>
</ul>
<p>定期调用过滤器flush方法。可选的。</p>
<p><strong>remove_field</strong></p>
<ul>
<li>值类型是数组</li>
<li>默认值为[]</li>
</ul>
<p>如果此过滤器成功，请从此事件中删除任意字段。例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">filter &#123;</div><div class="line">  xml &#123;</div><div class="line">    remove_field =&gt; [ &quot;foo_%&#123;somefield&#125;&quot; ]</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"># You can also remove multiple fields at once:</div><div class="line">filter &#123;</div><div class="line">  xml &#123;</div><div class="line">    remove_field =&gt; [ &quot;foo_%&#123;somefield&#125;&quot;, &quot;my_extraneous_field&quot; ]</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>如果事件有字段“somefield”==“hello”此过滤器，如果成功，将删除名为foo_hello的字段（如果存在）。第二个示例将删除一个附加的非动态字段。</p>
<p><strong>remove_namespaces</strong></p>
<ul>
<li>值类型是布尔值</li>
<li>默认值为false</li>
</ul>
<p>从文档中的所有节点中删除所有命名空间。当然，如果文档具有相同名称但不同命名空间的节点，它们现在将是不明确的。</p>
<p><strong>remove_tag</strong></p>
<ul>
<li>值类型是数组</li>
<li>默认值为[]</li>
</ul>
<p>如果此过滤器成功，请从事件中删除任意标记。标签可以是动态的，并使用％{字段}语法包括事件的部分。</p>
<p>例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">filter &#123;</div><div class="line">  xml &#123;</div><div class="line">    remove_tag =&gt; [ &quot;foo_%&#123;somefield&#125;&quot; ]</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"># You can also remove multiple tags at once:</div><div class="line">filter &#123;</div><div class="line">  xml &#123;</div><div class="line">    remove_tag =&gt; [ &quot;foo_%&#123;somefield&#125;&quot;, &quot;sad_unwanted_tag&quot;]</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>如果事件有字段“somefield”==“hello”此过滤器，如果成功，将删除标签foo_hello如果它存在。第二个例子也会删除一个悲伤的，不需要的标签。</p>
<p><strong>source</strong></p>
<ul>
<li>这是必需的设置。</li>
<li>值类型是字符串</li>
<li>此设置没有默认值。</li>
</ul>
<p>配置xml到哈希是：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">source =&gt; source_field</div></pre></td></tr></table></figure>
<p>例如，如果您在消息字段中具有整个XML文档<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">filter &#123;</div><div class="line">  xml &#123;</div><div class="line">    source =&gt; &quot;message&quot;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>上面将解析消息字段中的XML。</p>
<p><strong>store_xml</strong></p>
<ul>
<li>值类型是布尔值</li>
<li>默认值为true</li>
</ul>
<p>默认情况下，过滤器会将整个解析的XML存储在目标字段中，如上所述。设置为false将阻止。</p>
<p><strong>target</strong></p>
<ul>
<li>值类型是字符串</li>
<li>此设置没有默认值。</li>
</ul>
<p>定义放置数据的目标</p>
<p>例如，如果您希望将数据放在doc字段中：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">filter &#123;</div><div class="line">  xml &#123;</div><div class="line">    target =&gt; &quot;doc&quot;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>源字段值中的XML将扩展为目标字段中的数据结构。注意：如果目标字段已存在，它将被覆盖。如果store_xml为true（这是缺省值），那么是必需的。</p>
<p><strong>xpath</strong></p>
<ul>
<li>值类型是哈希</li>
<li>默认值为{}</li>
</ul>
<p>xpath将使用解析的XML（使用上述方法定义的每个源字段）另外选择字符串值（非字符串将使用Ruby的to_s函数转换为字符串），并将这些值放在目标字段中。组态：Configuration:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">xpath =&gt; [ &quot;xpath-syntax&quot;, &quot;destination-field&quot; ]</div></pre></td></tr></table></figure></p>
<p>XPath从xpath语法解析返回的值将放在目标字段中。返回的多个值将作为数组推送到目标字段。因此，跨多个源字段的多个匹配将在字段中产生重复条目。</p>
<p>更多关于XPath：http：//www.w3schools.com/xml/xml_xpath.asp</p>
<p>XPath函数特别强大：<a href="http://www.w3schools.com/xsl/xsl_functions.asp" target="_blank" rel="external">http://www.w3schools.com/xsl/xsl_functions.asp</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;过滤插件&quot;&gt;&lt;a href=&quot;#过滤插件&quot; class=&quot;headerlink&quot; title=&quot;过滤插件&quot;&gt;&lt;/a&gt;过滤插件&lt;/h2&gt;&lt;p&gt;过滤器插件对事件执行中间处理。 过滤器通常根据事件的特征有条件地应用。&lt;/p&gt;
&lt;p&gt;以下过滤器插件可用：&lt;/p&gt;
&lt;p&gt;&lt;
    
    </summary>
    
      <category term="Logstash" scheme="https://weizhimiao.github.io/categories/Logstash/"/>
    
    
      <category term="Logstash" scheme="https://weizhimiao.github.io/tags/Logstash/"/>
    
  </entry>
  
  <entry>
    <title>Logstash学习六</title>
    <link href="https://weizhimiao.github.io/2016/10/26/Logstash%E5%AD%A6%E4%B9%A0%E5%85%AD/"/>
    <id>https://weizhimiao.github.io/2016/10/26/Logstash学习六/</id>
    <published>2016-10-26T12:30:00.000Z</published>
    <updated>2016-10-26T13:21:52.000Z</updated>
    
    <content type="html"><![CDATA[<ul>
<li>编解码器插件</li>
</ul>
<a id="more"></a>
<h2 id="编解码器插件"><a href="#编解码器插件" class="headerlink" title="编解码器插件"></a>编解码器插件</h2><p>编解码器插件更改事件的数据表示。编解码器本质上是可以作为输入或输出的一部分操作的流过滤器。</p>
<p>以下编解码器插件可用：</p>
<p><strong>avro</strong></p>
<blockquote>
<p>将序列化的Avro记录读取为Logstash事件</p>
</blockquote>
<p><a href="https://github.com/logstash-plugins/logstash-codec-avro" target="_blank" rel="external">logstash-codec-avro</a></p>
<p><strong>cef</strong></p>
<blockquote>
<p>读取ArcSight公共事件格式（CEF）。</p>
</blockquote>
<p><a href="https://github.com/logstash-plugins/logstash-codec-cef" target="_blank" rel="external">logstash-codec-cef</a></p>
<p><strong>cloudtrail</strong></p>
<blockquote>
<p>读取AWS Cloudtrail事件</p>
</blockquote>
<p><a href="https://github.com/logstash-plugins/logstash-codec-cloudtrail" target="_blank" rel="external">logstash-codec-cloudtrail</a></p>
<p><strong>cloudfront</strong></p>
<blockquote>
<p>阅读AWS CloudFront报告</p>
</blockquote>
<p><a href="https://github.com/logstash-plugins/logstash-codec-cloudfront" target="_blank" rel="external">logstash-codec-cloudfront</a></p>
<p><strong>collectd</strong></p>
<blockquote>
<p>使用UDP从collectd二进制协议读取事件。</p>
</blockquote>
<p><a href="https://github.com/logstash-plugins/logstash-codec-collectd" target="_blank" rel="external">logstash-codec-collectd</a></p>
<p><strong>compress_spooler</strong></p>
<blockquote>
<p>将事件压缩为假脱机批处理</p>
</blockquote>
<p><a href="https://github.com/logstash-plugins/logstash-codec-compress_spooler" target="_blank" rel="external">logstash-codec-compress_spooler</a></p>
<p><strong>dots</strong></p>
<blockquote>
<p>每个事件发送1个点到stdout用于性能跟踪</p>
</blockquote>
<p><a href="https://github.com/logstash-plugins/logstash-codec-dots" target="_blank" rel="external">logstash-codec-dots</a></p>
<p><strong>edn</strong></p>
<blockquote>
<p>读取EDN格式数据</p>
</blockquote>
<p><a href="https://github.com/logstash-plugins/logstash-codec-edn" target="_blank" rel="external">logstash-codec-edn</a></p>
<p><strong>edn_lines</strong></p>
<blockquote>
<p>读取换行分隔的EDN格式数据</p>
</blockquote>
<p><a href="https://github.com/logstash-plugins/logstash-codec-edn_lines" target="_blank" rel="external">logstash-codec-edn_lines</a></p>
<p><strong>es_bulk</strong></p>
<blockquote>
<p>将Elasticsearch批量格式读取为单独的事件以及元数据</p>
</blockquote>
<p><a href="https://github.com/logstash-plugins/logstash-codec-es_bulk" target="_blank" rel="external">logstash-codec-es_bulk</a></p>
<p><strong>fluent</strong></p>
<blockquote>
<p>读取fluentd msgpack模式</p>
</blockquote>
<p><a href="https://github.com/logstash-plugins/logstash-codec-fluent" target="_blank" rel="external">logstash-codec-fluent</a></p>
<p><strong>graphite</strong></p>
<blockquote>
<p>读取graphite格式的行</p>
</blockquote>
<p><a href="https://github.com/logstash-plugins/logstash-codec-graphite" target="_blank" rel="external">logstash-codec-graphite</a></p>
<p><strong>gzip_lines</strong></p>
<blockquote>
<p>读取gzip编码内容</p>
</blockquote>
<p><a href="https://github.com/logstash-plugins/logstash-codec-gzip_lines" target="_blank" rel="external">logstash-codec-gzip_lines</a></p>
<p><strong>json</strong></p>
<blockquote>
<p>读取JSON格式的内容，在JSON数组中为每个元素创建一个事件</p>
</blockquote>
<p><a href="https://github.com/logstash-plugins/logstash-codec-json" target="_blank" rel="external">logstash-codec-json</a></p>
<p><strong>json_lines</strong></p>
<blockquote>
<p>读取以换行符分隔的JSON</p>
</blockquote>
<p><a href="https://github.com/logstash-plugins/logstash-codec-json_lines" target="_blank" rel="external">logstash-codec-json_lines</a></p>
<p><strong>line</strong></p>
<blockquote>
<p>读取面向行的文本数据</p>
</blockquote>
<p><a href="https://github.com/logstash-plugins/logstash-codec-line" target="_blank" rel="external">logstash-codec-line</a></p>
<p><strong>msgpack</strong></p>
<p><a href="https://github.com/logstash-plugins/logstash-codec-msgpack" target="_blank" rel="external">logstash-codec-msgpack</a></p>
<p><strong>multiline</strong></p>
<blockquote>
<p>将多行消息合并为单个事件</p>
</blockquote>
<p><a href="https://github.com/logstash-plugins/logstash-codec-multiline" target="_blank" rel="external">logstash-codec-multiline</a></p>
<p><strong>netflow</strong></p>
<blockquote>
<p>读取Netflow v5和Netflow v9数据</p>
</blockquote>
<p><a href="https://github.com/logstash-plugins/logstash-codec-netflow" target="_blank" rel="external">logstash-codec-netflow</a></p>
<p><strong>nmap</strong></p>
<blockquote>
<p>以XML格式读取Nmap数据</p>
</blockquote>
<p><a href="https://github.com/logstash-plugins/logstash-codec-nmap" target="_blank" rel="external">logstash-codec-nmap</a></p>
<p><strong>oldlogstashjson</strong></p>
<blockquote>
<p>在Logstash 1.2.0之前版本中使用的模式中读取Logstash JSON</p>
</blockquote>
<p><a href="https://github.com/logstash-plugins/logstash-codec-oldlogstashjson" target="_blank" rel="external">logstash-codec-oldlogstashjson</a></p>
<p><strong>plain</strong></p>
<blockquote>
<p>读取纯文本，而不在事件之间进行分隔</p>
</blockquote>
<p><a href="https://github.com/logstash-plugins/logstash-codec-plain" target="_blank" rel="external">logstash-codec-plain</a></p>
<p><strong>rubydebug</strong></p>
<blockquote>
<p>将Ruby Awesome打印库应用于Logstash事件</p>
</blockquote>
<p><a href="https://github.com/logstash-plugins/logstash-codec-rubydebug" target="_blank" rel="external">logstash-codec-rubydebug</a></p>
<p><strong>s3_plain</strong></p>
<blockquote>
<p>提供与早期版本的S3输出的向后兼容性</p>
</blockquote>
<p><a href="https://github.com/logstash-plugins/logstash-codec-s3_plain" target="_blank" rel="external">logstash-codec-s3_plain</a></p>
<p><strong>spool</strong></p>
<blockquote>
<p>收集事件并批量传输</p>
</blockquote>
<p><a href="https://github.com/logstash-plugins/logstash-codec-spool" target="_blank" rel="external">logstash-codec-spool</a></p>
<h3 id="edn-lines"><a href="#edn-lines" class="headerlink" title="edn_lines"></a>edn_lines</h3><h4 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h4><p>这个插件支持下列配置选项：</p>
<p>所需的配置选项：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">edn_lines &#123;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="es-bulk"><a href="#es-bulk" class="headerlink" title="es_bulk"></a>es_bulk</h3><p>此编解码器会将Elasticsearch批量格式解码为单个事件，并将元数据解码为@metadata字段。</p>
<p>目前不支持编码，因为Elasticsearch输出以批量格式提交Logstash事件。</p>
<h4 id="概述-1"><a href="#概述-1" class="headerlink" title="概述"></a>概述</h4><p>这个插件支持下列配置选项：</p>
<p>所需的配置选项：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">es_bulk &#123;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="gzip-lines"><a href="#gzip-lines" class="headerlink" title="gzip_lines"></a>gzip_lines</h3><blockquote>
<p>这是一个社区维护的插件！ 默认情况下它不随Logstash一起提供，但通过运行<code>bin/logstash-plugin install logstash-codec-gzip_lines</code> 可以很容易地安装。</p>
</blockquote>
<p>此编解码器将读取gzip编码的内容</p>
<h4 id="概述-2"><a href="#概述-2" class="headerlink" title="概述"></a>概述</h4><p>这个插件支持下列配置选项：</p>
<p>所需的配置选项：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">gzip_lines &#123;</div><div class="line">  &#125;</div></pre></td></tr></table></figure></p>
<p>可用的配置选项：</p>
<table>
<thead>
<tr>
<th>Setting</th>
<th>Input type</th>
<th>Required</th>
<th>Default value</th>
</tr>
</thead>
<tbody>
<tr>
<td>charset</td>
<td>string, one of [“ASCII-8BIT”, “Big5”, “Big5-HKSCS”, “Big5-UAO”, “CP949”, “Emacs-Mule”, “EUC-JP”, “EUC-KR”, “EUC-TW”, “GB18030”, “GBK”, “ISO-8859-1”, “ISO-8859-2”, “ISO-8859-3”, “ISO-8859-4”, “ISO-8859-5”, “ISO-8859-6”, “ISO-8859-7”, “ISO-8859-8”, “ISO-8859-9”, “ISO-8859-10”, “ISO-8859-11”, “ISO-8859-13”, “ISO-8859-14”, “ISO-8859-15”, “ISO-8859-16”, “KOI8-R”, “KOI8-U”, “Shift_JIS”, “US-ASCII”, “UTF-8”, “UTF-16BE”, “UTF-16LE”, “UTF-32BE”, “UTF-32LE”, “Windows-1251”, “GB2312”, “Windows-31J”, “IBM437”, “IBM737”, “IBM775”, “CP850”, “IBM852”, “CP852”, “IBM855”, “CP855”, “IBM857”, “IBM860”, “IBM861”, “IBM862”, “IBM863”, “IBM864”, “IBM865”, “IBM866”, “IBM869”, “Windows-1258”, “GB1988”, “macCentEuro”, “macCroatian”, “macCyrillic”, “macGreek”, “macIceland”, “macRoman”, “macRomania”, “macThai”, “macTurkish”, “macUkraine”, “CP950”, “CP951”, “stateless-ISO-2022-JP”, “eucJP-ms”, “CP51932”, “EUC-JIS-2004”, “GB12345”, “ISO-2022-JP”, “ISO-2022-JP-2”, “CP50220”, “CP50221”, “Windows-1252”, “Windows-1250”, “Windows-1256”, “Windows-1253”, “Windows-1255”, “Windows-1254”, “TIS-620”, “Windows-874”, “Windows-1257”, “MacJapanese”, “UTF-7”, “UTF8-MAC”, “UTF-16”, “UTF-32”, “UTF8-DoCoMo”, “SJIS-DoCoMo”, “UTF8-KDDI”, “SJIS-KDDI”, “ISO-2022-JP-KDDI”, “stateless-ISO-2022-JP-KDDI”, “UTF8-SoftBank”, “SJIS-SoftBank”, “BINARY”, “CP437”, “CP737”, “CP775”, “IBM850”, “CP857”, “CP860”, “CP861”, “CP862”, “CP863”, “CP864”, “CP865”, “CP866”, “CP869”, “CP1258”, “Big5-HKSCS:2008”, “eucJP”, “euc-jp-ms”, “EUC-JISX0213”, “eucKR”, “eucTW”, “EUC-CN”, “eucCN”, “CP936”, “ISO2022-JP”, “ISO2022-JP2”, “ISO8859-1”, “CP1252”, “ISO8859-2”, “CP1250”, “ISO8859-3”, “ISO8859-4”, “ISO8859-5”, “ISO8859-6”, “CP1256”, “ISO8859-7”, “CP1253”, “ISO8859-8”, “CP1255”, “ISO8859-9”, “CP1254”, “ISO8859-10”, “ISO8859-11”, “CP874”, “ISO8859-13”, “CP1257”, “ISO8859-14”, “ISO8859-15”, “ISO8859-16”, “CP878”, “MacJapan”, “ASCII”, “ANSI_X3.4-1968”, “646”, “CP65000”, “CP65001”, “UTF-8-MAC”, “UTF-8-HFS”, “UCS-2BE”, “UCS-4BE”, “UCS-4LE”, “CP932”, “csWindows31J”, “SJIS”, “PCK”, “CP1251”, “external”, “locale”]</td>
<td>No</td>
<td>“UTF-8”</td>
</tr>
</tbody>
</table>
<h4 id="详情"><a href="#详情" class="headerlink" title="详情"></a>详情</h4><p><strong>charset</strong></p>
<ul>
<li>值可以是以下任何一个：ASCII-8BIT，Big5，Big5-HKSCS，Big5-UAO，CP949，Emacs-Mule，EUC-JP，EUC-KR，EUC-TW，GB18030，GBK，ISO-8859-1，ISO- ISO-8859-3，ISO-8859-4，ISO-8859-5，ISO-8859-6，ISO-8859-7，ISO-8859-8，ISO-8859-9，ISO- 10，ISO-8859-11，ISO-8859-13，ISO-8859-14，ISO-8859-15，ISO-8859-16，KOI8-R，KOI8-U，Shift_JIS，US-ASCII，UTF- UT85，IBM855，IBM855，IBM857，IBM860，IBM861，IBM862，IBM853，UT86，UTF-16BE，UTF-16LE，UTF-32BE，UTF-32LE，Windows-1251，GB2312，Windows-31J，IBM437，IBM737，IBM775， IBM863，IBM864，IBM865，IBM866，IBM869，Windows-1258，GB1988，macCentEuro，macCroatian，macCyrillic，macGreek，macIlandland，macRoman，macRomania，macThai，macTurkish，macUkraine，CP950，CP951，stateless-ISO-2022-JP，eucJP- ms，CP51932，EUC-JIS-2004，GB12345，ISO-2022-JP，ISO-2022-JP-2，CP50220，CP50221，Windows-1252，Windows-1250，Windows-1256，Windows-1253， Windows-1254，TIS-620，Windows-874，Windows-1257，MacJapanese，UTF-7，UTF8-MAC，UTF-16，UTF-32，UTF8-DoCoMo，SJIS-DoCoMo，UTF8-KDDI，SJIS- ISO-2022-JP-KDDI，无状态ISO-2022-JP-KDDI，UTF8-软银行，SJIS-软银行，BINARY，CP437，CP737，CP775，IBM850，CP857，CP860，CP861，CP862，CP863，CP864，CP865， CP866，CP869，CP1258，Big5-HKSCS：2008，eucJP，euc-jp-ms，EUC-JISX0213，eucKR，eucTW，EUC-CN，eucCN，CP936，ISO2022-JP，ISO2022-JP2，ISO8859-1， ISO8859-3，ISO8859-4，ISO8859-5，ISO8859-6，CP1256，ISO8859-7，CP1253，ISO8859-8，CP1255，ISO8859-9，CP1254，ISO8859-10，ISO8859-11， CP874，ISO8859-13，CP1257，ISO8859-14，ISO8859-15，ISO8859-16，CP878，MacJapan，ASCII，ANSI_X3.4-1968,646，CP65000，CP65001，UTF-8-MAC，UTF-8-HFS， UCS-2BE，UCS-4BE，UCS-4LE，CP932，csWindows31J，SJIS，PCK，CP1251，external，locale</li>
<li>默认值为“UTF-8”</li>
</ul>
<p>此编解码器中使用的字符编码。实例包括“UTF-8”和“CP1252”</p>
<p>JSON需要有效的UTF-8字符串，但在某些情况下，发出JSON的软件在另一种编码（例如nxlog）中也是如此。在这样的奇怪的情况下，你可以设置charset设置为文本的实际编码，logstash会为你转换它。</p>
<p>对于nxlog用户，您需要将其设置为“CP1252”</p>
]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;编解码器插件&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="Logstash" scheme="https://weizhimiao.github.io/categories/Logstash/"/>
    
    
      <category term="Logstash" scheme="https://weizhimiao.github.io/tags/Logstash/"/>
    
  </entry>
  
  <entry>
    <title>Logstash学习三</title>
    <link href="https://weizhimiao.github.io/2016/10/25/Logstash%E5%AD%A6%E4%B9%A0%E4%B8%89/"/>
    <id>https://weizhimiao.github.io/2016/10/25/Logstash学习三/</id>
    <published>2016-10-25T12:30:00.000Z</published>
    <updated>2016-10-25T13:47:09.000Z</updated>
    
    <content type="html"><![CDATA[<ul>
<li>性能故障排除指南</li>
<li>使用插件</li>
<li>输入插件</li>
</ul>
<a id="more"></a>
<h2 id="性能故障排除指南"><a href="#性能故障排除指南" class="headerlink" title="性能故障排除指南"></a>性能故障排除指南</h2><p>您可以使用此故障排除指南快速诊断和解决Logstash性能问题。 对管线内部的高级知识不需要理解本指南。 然而，如果你想超越本指南，建议阅读管道文档。</p>
<p>您可能会试图前进并更改设置，如-w作为第一次尝试提高性能。 根据我们的经验，更改此设置使得更难以排除性能问题，因为您增加了正在使用的变量数。 相反，每次进行一次更改并测量结果。 从这个列表的末尾开始是一个确定的方式来创建一个混乱的情况。</p>
<h3 id="性能清单"><a href="#性能清单" class="headerlink" title="性能清单"></a>性能清单</h3><ol>
<li>检查输入源和输出目的地的性能：<ul>
<li>Logstash只有它连接的服务一样快。 Logstash只能消耗和产生数据，因为它的输入和输出目的地可以！</li>
</ul>
</li>
</ol>
<ol>
<li><p>检查系统统计信息：</p>
<ul>
<li>CPU<ul>
<li>请注意CPU是否被大量使用。在Linux / Unix上，您可以运行top -H以查看线程分解的进程统计信息，以及总CPU统计信息。</li>
<li>如果CPU使用率很高，请跳到有关检查JVM堆的部分，然后阅读有关调整Logstash工作线程设置的部分。</li>
</ul>
</li>
<li>Memory<ul>
<li>请注意Logstash在Java VM上运行的事实。这意味着Logstash将始终使用您分配给它的最大内存量。</li>
<li>查找使用大量内存的其他应用程序，并可能导致Logstash切换到磁盘。如果应用程序使用的总内存超过物理内存，则会发生这种情况。</li>
</ul>
</li>
<li>I / O利用率<ul>
<li>监视磁盘I / O以检查磁盘饱和。<ul>
<li>如果您使用Logstash插件（例如文件输出），可能会使存储饱和，则可能会出现磁盘饱和。</li>
<li>磁盘饱和也可能发生，如果你遇到很多错误，强制Logstash生成大的错误日志。</li>
<li>在Linux上，可以使用iostat，dstat或类似于监视磁盘I / O的东西。</li>
</ul>
</li>
<li>监视网络I / O以实现网络饱和。<ul>
<li>如果您使用执行大量网络操作的输入/输出，则可能发生网络饱和。</li>
<li>在Linux上，可以使用诸如dstat或iftop之类的工具来监视网络。</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li><p>检查JVM堆：</p>
<ul>
<li>通常情况下，如果堆大小太低，CPU利用率可以通过屋顶，导致JVM不断进行垃圾回收。</li>
<li>检查此问题的快速方法是将堆大小加倍，并查看性能是否提高。 不要增加超过物理内存量的堆大小。 为操作系统和其他进程保留至少1GB的空闲空间。</li>
<li>您可以使用随Java分发的jmap命令行实用程序或使用VisualVM对JVM堆进行更准确的度量。</li>
</ul>
</li>
<li><p>调整Logstash工作线程设置：</p>
<ul>
<li>首先使用-w标志扩大管道工作线程的数量。 这将增加可用于过滤器和输出的线程数。 如果需要，可以安全地将其扩展到多个CPU内核，因为线程可以在I / O上变为空闲。</li>
<li>默认情况下，每个输出只能在单个管道工作线程中处于活动状态。 您可以通过更改每个输出的配置块中的workers设置来增加此值。 不要使此值大于管道工人的数量。</li>
<li>您还可以调整输出批处理大小。 对于许多输出，例如Elasticsearch输出，此设置将对应于I / O操作的大小。 在Elasticsearch输出的情况下，此设置对应于批处理大小。</li>
</ul>
</li>
</ol>
<h2 id="使用插件"><a href="#使用插件" class="headerlink" title="使用插件"></a>使用插件</h2><p>Logstash有丰富的输入，过滤器，编解码器和输出插件。 插件可以作为自包含的包称为gems并托管在RubyGems.org上。 通过bin / logstash-plugin脚本访问的插件管理器用于管理Logstash部署中的插件的生命周期。 您可以使用下面描述的命令行界面（CLI）调用来安装，卸载和升级插件。</p>
<h3 id="使用插件-1"><a href="#使用插件-1" class="headerlink" title="使用插件"></a>使用插件</h3><h4 id="查看插件"><a href="#查看插件" class="headerlink" title="查看插件"></a>查看插件</h4><p>Logstash发行包捆绑公共插件，以便您可以立即使用它们。 要列出部署中当前可用的插件：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">bin/logstash-plugin list</div><div class="line">bin/logstash-plugin list --verbose</div><div class="line">bin/logstash-plugin list &apos;*namefragment*&apos;</div><div class="line">bin/logstash-plugin list --group output</div></pre></td></tr></table></figure></p>
<ul>
<li>将列出所有已安装的插件</li>
<li>将列出已安装的插件与版本信息</li>
<li>将列出所有已安装的包含namefragment的插件</li>
<li>将列出特定组的所有已安装的插件（输入，过滤器，编解码器，输出）</li>
</ul>
<h4 id="向部署中添加插件"><a href="#向部署中添加插件" class="headerlink" title="向部署中添加插件"></a>向部署中添加插件</h4><p>处理插件安装时最常见的情况是您可以访问互联网。 使用此方法，您将能够检索托管在公共存储库（RubyGems.org）上的插件，并安装在Logstash安装之上。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">bin / logstash-plugin install logstash-output-kafka</div></pre></td></tr></table></figure></p>
<p>插件成功安装后，您可以开始在配置文件中使用它。</p>
<h5 id="高级：添加本地构建的插件"><a href="#高级：添加本地构建的插件" class="headerlink" title="高级：添加本地构建的插件"></a>高级：添加本地构建的插件</h5><p>在某些情况下，您想要安装尚未发布并且未托管在RubyGems.org上的插件。 Logstash提供了安装本地构建的插件的选项，该插件包装为ruby gem。 使用文件位置：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">bin / logstash-plugin install /path/to/logstash-output-kafka-1.0.0.gem</div></pre></td></tr></table></figure></p>
<h5 id="高级：使用–pluginpath"><a href="#高级：使用–pluginpath" class="headerlink" title="高级：使用–pluginpath"></a>高级：使用–pluginpath</h5><p>使用–pluginpath标志，可以加载位于文件系统上的插件源代码。 通常，这是由开发人员使用的迭代在一个自定义插件，并希望在创建ruby宝石之前测试。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">bin / logstash --pluginpath /opt/shared/lib/logstash/input/my-custom-plugin-code.rb</div></pre></td></tr></table></figure></p>
<h4 id="更新插件"><a href="#更新插件" class="headerlink" title="更新插件"></a>更新插件</h4><p>插件有自己的发布周期，通常独立于Logstash的核心发布周期发布。 使用update子命令，您可以获取最新的或更新到特定版本的插件。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">bin / logstash-plugin更新</div><div class="line">bin / logstash-plugin update logstash-output-kafka</div></pre></td></tr></table></figure></p>
<ul>
<li>将更新所有已安装的插件</li>
<li>将只更新此插件</li>
</ul>
<h4 id="删除插件"><a href="#删除插件" class="headerlink" title="删除插件"></a>删除插件</h4><p>如果您需要从Logstash安装中删除插件：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">bin / logstash-plugin卸载logstash-output-kafka</div></pre></td></tr></table></figure></p>
<h4 id="代理支持"><a href="#代理支持" class="headerlink" title="代理支持"></a>代理支持</h4><p>前面的部分依赖于Logstash能够与RubyGems.org通信。 在某些环境中，转发代理用于处理HTTP请求。 通过设置HTTP_PROXY环境变量，可以通过代理安装和更新Logstash插件：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">export HTTP_PROXY=http://127.0.0.1:3128</div><div class="line"></div><div class="line">bin/logstash-plugin install logstash-output-kafka</div></pre></td></tr></table></figure></p>
<p>一旦设置，插件命令安装，更新可以通过这个代理使用。</p>
<h3 id="生成插件"><a href="#生成插件" class="headerlink" title="生成插件"></a>生成插件</h3><p>现在，您可以在几秒钟内创建自己的Logstash插件！ bin / logstash-plugin的generate子命令为带有模板化文件的新Logstash插件创建基础。 它创建正确的目录结构，gemspec文件和依赖关系，以便您可以开始添加自定义代码以使用Logstash处理数据。</p>
<p>用法示例<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">bin/logstash-plugin generate --type input --name xkcd --path ~/ws/elastic/plugins</div></pre></td></tr></table></figure></p>
<p>–type：插件的类型 - input(输入), filter(过滤器), output(输出), or codec(编解码器)<br>–name：新插件的名称<br>–path：将创建新插件结构的目录路径。 如果未指定，它将在当前目录中创建。</p>
<h3 id="离线插件管理"><a href="#离线插件管理" class="headerlink" title="离线插件管理"></a>离线插件管理</h3><p>Logstash插件管理器在1.5版本中引入。 本节讨论设置插件的本地存储库，以便在无法访问Internet的系统上使用。</p>
<p>本节中的过程需要运行Logstash的暂存机器，该Logstash可以访问公共或私有Rubygems服务器。 此暂存计算机下载并打包用于脱机安装的文件。</p>
<p>有关设置您自己的专用Rubygems服务器的信息，请参阅私有Gem Repositories部分。</p>
<p>可以使用更大的Logstash工件大小的用户可以使用Logstash产品页面中的Logstash（所有插件）下载链接下载与所有可用插件的最新版本捆绑在一起的Logstash。 您可以将此捆绑包分发到所有节点，而无需进一步插件分级。</p>
<h4 id="构建离线包"><a href="#构建离线包" class="headerlink" title="构建离线包"></a>构建离线包</h4><p>使用离线插件需要您创建一个离线包，这是一个压缩文件，包含您的离线Logstash安装所需的所有插件，以及这些插件的依赖关系。<br>使用bin / logstash-plugin pack子命令创建脱机包。</p>
<ol>
<li><p>当您运行bin / logstash-plugin pack子命令时，Logstash会创建一个压缩包，其中包含当前安装的所有插件以及这些插件的依赖关系。 默认情况下，当您在UNIX计算机上运行bin / logstash-plugin pack子命令时，压缩包是一个GZipped TAR文件。 默认情况下，在Windows计算机上运行bin / logstash-plugin pack子命令时，压缩包是ZIP文件。 有关更改这些默认行为的详细信息，请参阅管理插件包。</p>
<blockquote>
<p>注意: 下载指定插件的所有依赖关系可能需要一些时间，具体取决于列出的插件。</p>
</blockquote>
</li>
<li><p>将压缩包移动到作为脱机插件安装源的脱机计算机，然后使用bin / logstash-plugin unpack子命令使打包的插件可用。</p>
</li>
</ol>
<h4 id="安装或更新本地插件"><a href="#安装或更新本地插件" class="headerlink" title="安装或更新本地插件"></a>安装或更新本地插件</h4><p>要安装或更新本地插件，请在安装和更新命令中使用–local选项，如以下示例所示：</p>
<p>示例1。 安装本地插件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">bin/logstash-plugin install --local logstash-input-jdbc</div></pre></td></tr></table></figure></p>
<p>示例2.更新本地插件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">bin/logstash-plugin update --local logstash-input-jdbc</div></pre></td></tr></table></figure></p>
<p>示例3.在一个命令中更新所有本地插件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">bin/logstash-plugin update --local</div></pre></td></tr></table></figure></p>
<h4 id="管理插件包"><a href="#管理插件包" class="headerlink" title="管理插件包"></a>管理插件包</h4><p><code>bin / logstash-plugin</code> 的pack和unpack子命令采用以下选项：</p>
<ul>
<li><p>–tgz</p>
<blockquote>
<p>生成脱机包作为GZipped TAR文件。 UNIX系统上的默认行为。</p>
</blockquote>
</li>
<li><p>–zip</p>
<blockquote>
<p>生成脱机包为ZIP文件。 Windows系统上的默认行为。</p>
</blockquote>
</li>
<li><p>[packname] –override</p>
<blockquote>
<p>生成新的脱机包，使用指定的名称覆盖现有脱机包。 [packname] - [no-] clean：删除与指定名称匹配的脱机包。</p>
</blockquote>
</li>
</ul>
<h3 id="Private-Gem库"><a href="#Private-Gem库" class="headerlink" title="Private Gem库"></a>Private Gem库</h3><p>Logstash插件管理器连接到Ruby gems资源库以安装和更新Logstash插件。 默认情况下，此存储库为<a href="http://rubygems.org。" target="_blank" rel="external">http://rubygems.org。</a></p>
<p>某些用例无法使用默认存储库，如以下示例所示：</p>
<ul>
<li>防火墙阻止对默认存储库的访问。</li>
<li>您正在本地开发自己的插件。</li>
<li>气隙对本地系统的要求。</li>
</ul>
<p>当您使用自定义gem存储库时，请确保提供插件依赖。</p>
<p>几个开源项目使您能够运行自己的插件服务器，其中包括：</p>
<ul>
<li><a href="https://github.com/geminabox/geminabox" target="_blank" rel="external">Geminabox</a></li>
<li><a href="https://github.com/PierreRambaud/gemirro" target="_blank" rel="external">Gemirro</a></li>
<li><a href="https://gemfury.com/" target="_blank" rel="external">Gemfury</a></li>
<li><a href="http://www.jfrog.com/open-source/" target="_blank" rel="external">Artifactory</a></li>
</ul>
<h4 id="编辑Gemfile"><a href="#编辑Gemfile" class="headerlink" title="编辑Gemfile"></a>编辑Gemfile</h4><p>gemfile是一个配置文件，指定插件管理所需的信息。 每个gem文件都有一个源行，用于指定插件内容的位置。</p>
<p>默认情况下，gemfile的源代码行为：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"># This is a Logstash generated Gemfile.</div><div class="line"># If you modify this file manually all comments and formatting will be lost.</div><div class="line"></div><div class="line">source &quot;https://rubygems.org&quot;</div></pre></td></tr></table></figure>
<p>要更改源，请编辑源行以包含首选源，如以下示例所示：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"># This is a Logstash generated Gemfile.</div><div class="line"># If you modify this file manually all comments and formatting will be lost.</div><div class="line"></div><div class="line">source &quot;https://my.private.repository&quot;</div></pre></td></tr></table></figure></p>
<p>保存新版本的gemfile后，正常使用插件管理命令。</p>
<p>以下链接包含有关设置一些常用存储库的其他资料：</p>
<ul>
<li><a href="https://github.com/geminabox/geminabox/blob/master/README.markdown" target="_blank" rel="external">Geminabox</a></li>
<li><a href="https://www.jfrog.com/confluence/display/RTF/RubyGems+Repositories" target="_blank" rel="external">Artifactory</a></li>
<li>Running a <a href="http://guides.rubygems.org/run-your-own-gem-server/" target="_blank" rel="external">rubygems mirror</a></li>
</ul>
<h2 id="输入插件"><a href="#输入插件" class="headerlink" title="输入插件"></a>输入插件</h2><p>输入插件使得Logstash可以读取特定的事件源。</p>
<p>提供以下输入插件：</p>
<p><strong>beats</strong></p>
<blockquote>
<p>从Elastic Beats框架接收事件</p>
</blockquote>
<p><a href="https://github.com/logstash-plugins/logstash-input-beats" target="_blank" rel="external">logstash-input-beats</a></p>
<p><strong>couchdb_changes</strong></p>
<blockquote>
<p>从CouchDB流的事件_changes URI</p>
</blockquote>
<p><a href="https://github.com/logstash-plugins/logstash-input-couchdb_changes" target="_blank" rel="external">logstash-input-couchdb_changes</a></p>
<p><strong>drupal_dblog</strong></p>
<blockquote>
<p>从启用DBLog的Drupal安装中检索看门狗日志事件</p>
</blockquote>
<p><a href="https://github.com/logstash-plugins/logstash-input-drupal_dblog" target="_blank" rel="external">logstash-input-drupal_dblog</a></p>
<p><strong>elasticsearch</strong></p>
<blockquote>
<p>从Elasticsearch集群读取查询结果</p>
</blockquote>
<p><a href="https://github.com/logstash-plugins/logstash-input-elasticsearch" target="_blank" rel="external">logstash-input-elasticsearch</a></p>
<p><strong>exec</strong></p>
<blockquote>
<p>捕获shell命令的输出作为事件</p>
</blockquote>
<p><a href="https://github.com/logstash-plugins/logstash-input-exec" target="_blank" rel="external">logstash-input-exec</a></p>
<p><strong>eventlog</strong></p>
<blockquote>
<p>从Windows事件日志中提取事件</p>
</blockquote>
<p><a href="https://github.com/logstash-plugins/logstash-input-eventlog" target="_blank" rel="external">logstash-input-eventlog</a></p>
<p><strong>file</strong></p>
<blockquote>
<p>从文件流流式传输事件</p>
</blockquote>
<p><a href="https://github.com/logstash-plugins/logstash-input-file" target="_blank" rel="external">logstash-input-file</a></p>
<p><strong>ganglia</strong></p>
<blockquote>
<p>通过UDP读取Ganglia数据包</p>
</blockquote>
<p><a href="https://github.com/logstash-plugins/logstash-input-ganglia" target="_blank" rel="external">logstash-input-ganglia</a></p>
<p><strong>gelf</strong></p>
<blockquote>
<p>从Graylog2读取GELF格式的消息作为事件</p>
</blockquote>
<p><a href="https://github.com/logstash-plugins/logstash-input-gelf" target="_blank" rel="external">logstash-input-gelf</a></p>
<p><strong>generator</strong></p>
<blockquote>
<p>生成用于测试目的的随机日志事件</p>
</blockquote>
<p><a href="https://github.com/logstash-plugins/logstash-input-generator" target="_blank" rel="external">logstash-input-generator</a></p>
<p><strong>graphite</strong></p>
<blockquote>
<p>从graphite工具读取指标</p>
</blockquote>
<p><a href="https://github.com/logstash-plugins/logstash-input-graphite" target="_blank" rel="external">logstash-input-graphite</a></p>
<p><strong>github</strong></p>
<blockquote>
<p>从GitHub webhook读取事件</p>
</blockquote>
<p><a href="https://github.com/logstash-plugins/logstash-input-github" target="_blank" rel="external">logstash-input-github</a></p>
<p><strong>heartbeat</strong></p>
<blockquote>
<p>生成测试用的心跳事件</p>
</blockquote>
<p><a href="https://github.com/logstash-plugins/logstash-input-heartbeat" target="_blank" rel="external">logstash-input-heartbeat</a></p>
<p><strong>heroku</strong></p>
<blockquote>
<p>从Heroku应用程序的日志中流式传输事件</p>
</blockquote>
<p><a href="https://github.com/logstash-plugins/logstash-input-heroku" target="_blank" rel="external">logstash-input-heroku</a></p>
<p><strong>http</strong></p>
<blockquote>
<p>通过HTTP或HTTPS接收事件</p>
</blockquote>
<p><a href="https://github.com/logstash-plugins/logstash-input-http" target="_blank" rel="external">logstash-input-http</a></p>
<p><strong>http_poller</strong></p>
<blockquote>
<p>将HTTP API的输出解码为事件</p>
</blockquote>
<p><a href="https://github.com/logstash-plugins/logstash-input-http_poller" target="_blank" rel="external">logstash-input-http_poller</a></p>
<p><strong>irc</strong></p>
<blockquote>
<p>从IRC服务器读取事件</p>
</blockquote>
<p><a href="https://github.com/logstash-plugins/logstash-input-irc" target="_blank" rel="external">logstash-input-irc</a></p>
<p><strong>imap</strong></p>
<blockquote>
<p>从IMAP服务器读取电子邮件</p>
</blockquote>
<p><a href="https://github.com/logstash-plugins/logstash-input-imap" target="_blank" rel="external">logstash-input-imap</a></p>
<p><strong>jdbc</strong></p>
<blockquote>
<p>从JDBC数据创建事件</p>
</blockquote>
<p><a href="https://github.com/logstash-plugins/logstash-input-jdbc" target="_blank" rel="external">logstash-input-jdbc</a></p>
<p><strong>jmx</strong></p>
<blockquote>
<p>通过JMX从远程Java应用程序检索指标</p>
</blockquote>
<p><a href="https://github.com/logstash-plugins/logstash-input-jmx" target="_blank" rel="external">logstash-input-jmx</a></p>
<p><strong>kafka</strong></p>
<blockquote>
<p>读取Kafka主题的事件</p>
</blockquote>
<p><a href="https://github.com/logstash-plugins/logstash-input-kafka" target="_blank" rel="external">logstash-input-kafka</a></p>
<p><strong>log4j</strong></p>
<blockquote>
<p>从Log4j SocketAppender对象通过TCP套接字读取事件</p>
</blockquote>
<p><a href="https://github.com/logstash-plugins/logstash-input-log4j" target="_blank" rel="external">logstash-input-log4j</a></p>
<p><strong>lumberjack</strong></p>
<blockquote>
<p>使用Lumberjack协议接收事件</p>
</blockquote>
<p><a href="https://github.com/logstash-plugins/logstash-input-lumberjack" target="_blank" rel="external">logstash-input-lumberjack</a></p>
<p><strong>meetup</strong></p>
<blockquote>
<p>作为事件捕获命令行工具的输出</p>
</blockquote>
<p><a href="https://github.com/logstash-plugins/logstash-input-meetup" target="_blank" rel="external">logstash-input-meetup</a></p>
<p><strong>pipe</strong></p>
<blockquote>
<p>从长时间运行的命令管道流出事件</p>
</blockquote>
<p><a href="https://github.com/logstash-plugins/logstash-input-pipe" target="_blank" rel="external">logstash-input-pipe</a></p>
<p><strong>puppet_facter</strong></p>
<blockquote>
<p>从Puppet服务器接收事实</p>
</blockquote>
<p><a href="https://github.com/logstash-plugins/logstash-input-puppet_facter" target="_blank" rel="external">logstash-input-puppet_facter</a></p>
<p><strong>relp</strong></p>
<blockquote>
<p>通过TCP套接字接收RELP事件</p>
</blockquote>
<p><a href="https://github.com/logstash-plugins/logstash-input-relp" target="_blank" rel="external">logstash-input-relp</a></p>
<p><strong>rss</strong></p>
<blockquote>
<p>作为事件捕获命令行工具的输出</p>
</blockquote>
<p><a href="https://github.com/logstash-plugins/logstash-input-rss" target="_blank" rel="external">logstash-input-rss</a></p>
<p><strong>rackspace</strong></p>
<blockquote>
<p>从Rackspace Cloud Queue服务接收事件</p>
</blockquote>
<p><a href="https://github.com/logstash-plugins/logstash-input-rackspace" target="_blank" rel="external">logstash-input-rackspace</a></p>
<p><strong>rabbitmq</strong></p>
<blockquote>
<p>从RabbitMQ交换中提取事件</p>
</blockquote>
<p><a href="https://github.com/logstash-plugins/logstash-input-rabbitmq" target="_blank" rel="external">logstash-input-rabbitmq</a></p>
<p><strong>redis</strong></p>
<blockquote>
<p>从Redis实例读取事件</p>
</blockquote>
<p><a href="https://github.com/logstash-plugins/logstash-input-redis" target="_blank" rel="external">logstash-input-redis</a></p>
<p><strong>salesforce</strong></p>
<blockquote>
<p>基于Salesforce SOQL查询创建事件</p>
</blockquote>
<p><a href="https://github.com/logstash-plugins/logstash-input-salesforce" target="_blank" rel="external">logstash-input-salesforce</a></p>
<p><strong>snmptrap</strong></p>
<blockquote>
<p>基于SNMP陷阱消息创建事件</p>
</blockquote>
<p><a href="https://github.com/logstash-plugins/logstash-input-snmptrap" target="_blank" rel="external">logstash-input-snmptrap</a></p>
<p><strong>stdin</strong></p>
<blockquote>
<p>从标准输入读取事件</p>
</blockquote>
<p><a href="https://github.com/logstash-plugins/logstash-input-stdin" target="_blank" rel="external">logstash-input-stdin</a></p>
<p><strong>sqlite</strong></p>
<blockquote>
<p>基于SQLite数据库中的行创建事件</p>
</blockquote>
<p><a href="https://github.com/logstash-plugins/logstash-input-sqlite" target="_blank" rel="external">logstash-input-sqlite</a></p>
<p><strong>s3</strong></p>
<blockquote>
<p>从S3存储桶中的文件流传输事件</p>
</blockquote>
<p><a href="https://github.com/logstash-plugins/logstash-input-s3" target="_blank" rel="external">logstash-input-s3</a></p>
<p><strong>sqs</strong></p>
<blockquote>
<p>从Amazon Web Services简单队列服务队列中提取事件</p>
</blockquote>
<p><a href="https://github.com/logstash-plugins/logstash-input-sqs" target="_blank" rel="external">logstash-input-sqs</a></p>
<p><strong>stomp</strong></p>
<blockquote>
<p>创建使用STOMP协议接收的事件</p>
</blockquote>
<p><a href="https://github.com/logstash-plugins/logstash-input-stomp" target="_blank" rel="external">logstash-input-stomp</a></p>
<p><strong>syslog</strong></p>
<blockquote>
<p>将syslog消息读为事件</p>
</blockquote>
<p><a href="https://github.com/logstash-plugins/logstash-input-syslog" target="_blank" rel="external">logstash-input-syslog</a></p>
<p><strong>tcp</strong></p>
<blockquote>
<p>从TCP套接字读取事件</p>
</blockquote>
<p><a href="https://github.com/logstash-plugins/logstash-input-tcp" target="_blank" rel="external">logstash-input-tcp</a></p>
<p><strong>twitter</strong></p>
<blockquote>
<p>从Twitter Streaming API读取事件</p>
</blockquote>
<p><a href="https://github.com/logstash-plugins/logstash-input-twitter" target="_blank" rel="external">logstash-input-twitter</a></p>
<p><strong>unix</strong></p>
<blockquote>
<p>通过UNIX套接字读取事件</p>
</blockquote>
<p><a href="https://github.com/logstash-plugins/logstash-input-unix" target="_blank" rel="external">logstash-input-unix</a></p>
<p><strong>udp</strong></p>
<blockquote>
<p>通过UDP读取事件</p>
</blockquote>
<p><a href="https://github.com/logstash-plugins/logstash-input-udp" target="_blank" rel="external">logstash-input-udp</a></p>
<p><strong>varnishlog</strong></p>
<blockquote>
<p>从varnish缓存中读取共享内存日志</p>
</blockquote>
<p><a href="https://github.com/logstash-plugins/logstash-input-varnishlog" target="_blank" rel="external">logstash-input-varnishlog</a></p>
<p><strong>wmi</strong></p>
<blockquote>
<p>基于WMI查询的结果创建事件</p>
</blockquote>
<p><a href="https://github.com/logstash-plugins/logstash-input-wmi" target="_blank" rel="external">logstash-input-wmi</a></p>
<p><strong>websocket</strong></p>
<blockquote>
<p>从websocket读取事件</p>
</blockquote>
<p><a href="https://github.com/logstash-plugins/logstash-input-websocket" target="_blank" rel="external">logstash-input-websocket</a></p>
<p><strong>xmpp</strong></p>
<blockquote>
<p>通过XMPP / Jabber协议接收事件</p>
</blockquote>
<p><a href="https://github.com/logstash-plugins/logstash-input-xmpp" target="_blank" rel="external">logstash-input-xmpp</a></p>
<p><strong>zenoss</strong></p>
<blockquote>
<p>从fanout交换机读取Zenoss事件</p>
</blockquote>
<p><a href="https://github.com/logstash-plugins/logstash-input-zenoss" target="_blank" rel="external">logstash-input-zenoss</a></p>
<p><strong>zeromq</strong></p>
<blockquote>
<p>从ZeroMQ SUB插槽读取事件</p>
</blockquote>
<p><a href="https://github.com/logstash-plugins/logstash-input-zeromq" target="_blank" rel="external">logstash-input-zeromq</a></p>
<h3 id="beats"><a href="#beats" class="headerlink" title="beats"></a>beats</h3><p>这个输入插件使Logstash能够接收来自Elastic Beats框架的事件。</p>
<p>以下示例显示如何配置Logstash在端口5044上侦听传入的Beats连接并索引到Elasticsearch：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">input &#123;</div><div class="line">  beats &#123;</div><div class="line">    port =&gt; 5044</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">output &#123;</div><div class="line">  elasticsearch &#123;</div><div class="line">    hosts =&gt; &quot;localhost:9200&quot;</div><div class="line">    manage_template =&gt; false</div><div class="line">    index =&gt; &quot;%&#123;[@metadata][beat]&#125;-%&#123;+YYYY.MM.dd&#125;&quot;</div><div class="line">    document_type =&gt; &quot;%&#123;[@metadata][type]&#125;&quot;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>“beats”会自动在事件上设置类型字段。 您不能在Logstash配置中覆盖此设置。 如果在Logstash中为类型配置选项指定了一个设置，则会被忽略。</p>
<h4 id="概要"><a href="#概要" class="headerlink" title="概要"></a>概要</h4><p>此插件支持以下配置选项：</p>
<p>所需的配置选项：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">beats &#123;</div><div class="line">    port =&gt; ...</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>可用配置选项：</p>
<table>
<thead>
<tr>
<th>Setting</th>
<th>Input type</th>
<th>Required</th>
<th>Default value</th>
</tr>
</thead>
<tbody>
<tr>
<td>add_field</td>
<td>hash</td>
<td>No</td>
<td>{}</td>
</tr>
<tr>
<td>cipher_suites</td>
<td>array</td>
<td>No</td>
<td></td>
</tr>
<tr>
<td>client_inactivity_timeout</td>
<td>number</td>
<td>No</td>
<td>15</td>
</tr>
<tr>
<td>codec</td>
<td>codec</td>
<td>No</td>
<td>“plain”</td>
</tr>
<tr>
<td>congestion_threshold</td>
<td>number</td>
<td>No</td>
<td>5</td>
</tr>
<tr>
<td>host</td>
<td>string</td>
<td>No</td>
<td>“0.0.0.0”</td>
</tr>
<tr>
<td>include_codec_tag</td>
<td>boolean</td>
<td>No</td>
<td>true</td>
</tr>
<tr>
<td>port</td>
<td>number</td>
<td>Yes</td>
<td></td>
</tr>
<tr>
<td>ssl</td>
<td>boolean</td>
<td>No</td>
<td>false</td>
</tr>
<tr>
<td>ssl_certificate</td>
<td>a valid filesystem path</td>
<td>No</td>
<td></td>
</tr>
<tr>
<td>ssl_certificate_authorities</td>
<td>array</td>
<td>No</td>
<td>[]</td>
</tr>
<tr>
<td>ssl_handshake_timeout</td>
<td>number</td>
<td>No</td>
<td>10000</td>
</tr>
<tr>
<td>ssl_key</td>
<td>a valid filesystem path</td>
<td>No</td>
<td></td>
</tr>
<tr>
<td>ssl_key_passphrase</td>
<td>password</td>
<td>No</td>
<td></td>
</tr>
<tr>
<td>ssl_verify_mode</td>
<td>string, one of [“none”, “peer”, “force_peer”]</td>
<td>No</td>
<td>“none”</td>
</tr>
<tr>
<td>tags</td>
<td>array</td>
<td>No</td>
<td></td>
</tr>
<tr>
<td>tls_max_version</td>
<td>number</td>
<td>No</td>
<td>1.2</td>
</tr>
<tr>
<td>tls_min_version</td>
<td>number</td>
<td>No</td>
<td>1</td>
</tr>
<tr>
<td>type</td>
<td>string</td>
<td>No</td>
<td></td>
</tr>
</tbody>
</table>
<h5 id="详情"><a href="#详情" class="headerlink" title="详情"></a>详情</h5><p><strong>add_field</strong></p>
<ul>
<li>值类型是哈希</li>
<li>默认值为{}<br>向事件添加字段</li>
</ul>
<p><strong>cipher_suites</strong></p>
<ul>
<li>值类型是数组</li>
<li>默认值为java.lang.String [TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA38，TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384，TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256，TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256，TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384，TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384，TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256] // @ 210af31f</li>
</ul>
<p>要使用的密码套件列表，按优先级列出。</p>
<p><strong>client_inactivity_timeout</strong></p>
<ul>
<li>值类型是数字</li>
<li>默认值为15</li>
</ul>
<p>在X秒钟不活动后关闭空闲客户端。</p>
<p><strong>codec</strong></p>
<ul>
<li>值类型是编解码器</li>
<li>默认值为“plain”</li>
</ul>
<p>用于输入数据的编解码器。输入的编解码器是用于在进入输入之前，无需一个单独的过滤器中的Logstash管道解码数据的简便方法。</p>
<p><strong>congestion_threshold</strong></p>
<ul>
<li>值类型是数字</li>
<li>默认值为5</li>
</ul>
<p>在我们提出超时之前的秒数。此选项很有用控制多少时间来等待，如果事情是阻止管道。</p>
<p><strong>host</strong></p>
<ul>
<li>值类型是字符串</li>
<li>默认值为“0.0.0.0”</li>
</ul>
<p>要监听的IP地址。</p>
<p><strong>include_codec_tag</strong></p>
<ul>
<li>值类型是布尔值</li>
<li>默认值为true</li>
</ul>
<p><strong>port</strong></p>
<ul>
<li>这是必需的设置。</li>
<li>值类型是数字</li>
<li>此设置没有默认值。</li>
</ul>
<p>要监听的端口。</p>
<p><strong>ssl</strong></p>
<ul>
<li>值类型是布尔值</li>
<li>默认值为false</li>
</ul>
<p>事件默认情况下以纯文本发送。你可以通过设置SSL为true，并配置ssl_certificate和ssl_key选项启用加密。</p>
<p><strong>ssl_certificate</strong></p>
<ul>
<li>值类型为路径</li>
<li>此设置没有默认值。<br>要使用的SSL证书。</li>
</ul>
<p><strong>ssl_certificate_authorities</strong></p>
<ul>
<li>值类型是数组</li>
<li>默认值为[]</li>
</ul>
<p>根据这些权限验证客户端证书。您可以定义多个文件或路径。将读取所有证书并将其添加到信任存储区。您需要配置ssl_verify_mode同行或force_peer启用验证。</p>
<p>此功能只支持直接通过你的根CA签署的证书当前不支持中间CA.</p>
<p><strong>ssl_handshake_timeout</strong></p>
<ul>
<li>值类型是数字</li>
<li>缺省值为10000</li>
</ul>
<p>时间以毫秒为单位一个不完整的SSL握手超时</p>
<p><strong>ssl_key**</strong></p>
<ul>
<li>值类型为路径</li>
<li>此设置没有默认值。</li>
</ul>
<p>要使用的SSL密钥。</p>
<p><strong>ssl_key_passphrase</strong></p>
<ul>
<li>值类型为密码</li>
<li>此设置没有默认值。</li>
</ul>
<p>要使用的SSL密钥密码。</p>
<p><strong>ssl_verify_mode</strong></p>
<ul>
<li>值可以是以下任何值：none，peer，force_peer</li>
<li>默认值为“none”</li>
</ul>
<p>默认情况下，服务器不执行任何客户端验证。</p>
<p>同行就会使服务器要求客户提供证书。如果客户端提供证书，它将被验证。</p>
<p>force_peer将使服务器要求客户端提供证书。如果客户端不提供证书，连接将关闭。</p>
<p>此选项需要与ssl_certificate_authorities和定义的CA列表一起使用。</p>
<p><strong>tags</strong></p>
<ul>
<li>值类型是数组</li>
<li>此设置没有默认值。</li>
</ul>
<p>向您的活动添加任意数量的任意标签。</p>
<p>这可以帮助稍后处理。</p>
<p><strong>target_field_for_codec (DEPRECATED)</strong></p>
<ul>
<li>DEPRECATED WARNING：此配置项目已弃用，并且可能在将来的版本中不可用。</li>
<li>值类型是字符串</li>
<li>默认值为“message”</li>
</ul>
<p>这是将应用指定的编解码器的默认字段。</p>
<p><strong>tls_max_version</strong></p>
<ul>
<li>值类型是数字</li>
<li>默认值为1.2</li>
</ul>
<p>加密连接允许的最大TLS版本。该值必须为以下值之一：TLS 1.0为1.0，TLS 1.1为1.1，TLS 1.2为1.2</p>
<p><strong>tls_min_version</strong></p>
<ul>
<li>值类型是数字</li>
<li>默认值为1</li>
</ul>
<p>加密连接允许的最低TLS版本。该值必须为以下值之一：TLS 1.0为1.0，TLS 1.1为1.1，TLS 1.2为1.2</p>
<p><strong>type</strong></p>
<ul>
<li>值类型是字符串</li>
<li>此设置没有默认值。</li>
</ul>
<p>向此输入处理的所有事件添加一个类型字段。</p>
<p>类型主要用于过滤器激活。</p>
<p>类型存储为事件本身的一部分，因此您也可以使用类型在Kibana中搜索它。</p>
<p>如果您尝试在已有一个事件的事件上设置类型（例如，当您将事件从发件人发送到索引器时），则新输入不会覆盖现有类型。发货人设置的类型即使在发送到另一个Logstash服务器时也会保持该事件的有效期。</p>
<h3 id="couchdb-changes"><a href="#couchdb-changes" class="headerlink" title="couchdb_changes"></a>couchdb_changes</h3><p>此CouchDB输入允许您从CouchDB _changes URI自动流事件。 此外，任何“未来”更改将自动流式传输，以便轻松将CouchDB数据与任何目标目标同步</p>
<p>＃Upsert和delete可以使用事件元数据来允许删除文档。 所有非删除操作都被视为上行插入</p>
<p>＃从特定序列开始CouchDB输入存储由sequence_path定义的位置中的最后序列号值。 您可以使用此事实以特定顺序启动或恢复流。</p>
<h4 id="概要-1"><a href="#概要-1" class="headerlink" title="概要"></a>概要</h4><p>此插件支持以下配置选项：<br>所需的配置选项：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">couchdb_changes &#123;</div><div class="line">    db =&gt; ...</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>可用配置选项：</p>
<table>
<thead>
<tr>
<th>Setting</th>
<th>Input type</th>
<th>Required</th>
<th>Default value</th>
</tr>
</thead>
<tbody>
<tr>
<td>add_field</td>
<td>hash</td>
<td>No</td>
<td>{}</td>
</tr>
<tr>
<td>always_reconnect</td>
<td>boolean</td>
<td>No</td>
<td>true</td>
</tr>
<tr>
<td>ca_file</td>
<td>a valid filesystem path</td>
<td>No</td>
<td></td>
</tr>
<tr>
<td>codec</td>
<td>odec</td>
<td>No</td>
<td>“plain”</td>
</tr>
<tr>
<td>db</td>
<td>string</td>
<td>Yes</td>
<td></td>
</tr>
<tr>
<td>heartbeat</td>
<td>number</td>
<td>No</td>
<td>1000</td>
</tr>
<tr>
<td>host</td>
<td>string</td>
<td>No</td>
<td>“localhost”</td>
</tr>
<tr>
<td>ignore_attachments</td>
<td>boolean</td>
<td>No</td>
<td>true</td>
</tr>
<tr>
<td>initial_sequence</td>
<td>number</td>
<td>No</td>
<td></td>
</tr>
<tr>
<td>keep_revision</td>
<td>boolean</td>
<td>No</td>
<td>false</td>
</tr>
<tr>
<td>password</td>
<td>password</td>
<td>No</td>
<td>nil</td>
</tr>
<tr>
<td>port</td>
<td>number</td>
<td>No</td>
<td>5984</td>
</tr>
<tr>
<td>reconnect_delay</td>
<td>number</td>
<td>No</td>
<td>10</td>
</tr>
<tr>
<td>secure</td>
<td>boolean</td>
<td>No</td>
<td>false</td>
</tr>
<tr>
<td>sequence_path</td>
<td>string</td>
<td>No</td>
<td></td>
</tr>
<tr>
<td>tags</td>
<td>array</td>
<td>No</td>
<td></td>
</tr>
<tr>
<td>timeout</td>
<td>number</td>
<td>No</td>
<td></td>
</tr>
<tr>
<td>type</td>
<td>string</td>
<td>No</td>
<td></td>
</tr>
<tr>
<td>username</td>
<td>string</td>
<td>No</td>
<td>nil</td>
</tr>
</tbody>
</table>
<h5 id="详情-1"><a href="#详情-1" class="headerlink" title="详情"></a>详情</h5><p><strong>add_field</strong></p>
<ul>
<li>值类型是哈希</li>
<li>默认值为{}</li>
</ul>
<p>向事件添加字段</p>
<p><strong>always_reconnect</strong></p>
<ul>
<li>值类型是布尔值</li>
<li>默认值为true</li>
</ul>
<p>重新连接标志。当为true时，总是尝试在失败后重新连接</p>
<p><strong>ca_file</strong></p>
<ul>
<li>值类型为路径</li>
<li>此设置没有默认值。</li>
</ul>
<p>CA证书文件的路径，用于验证证书</p>
<p><strong>codec</strong></p>
<ul>
<li>值类型是编解码器</li>
<li>默认值为“plain”</li>
</ul>
<p>用于输入数据的编解码器。输入的编解码器是用于在进入输入之前，无需一个单独的过滤器中的Logstash管道解码数据的简便方法。</p>
<p><strong>db</strong></p>
<ul>
<li>这是必需的设置。</li>
<li>值类型是字符串</li>
<li>此设置没有默认值。</li>
</ul>
<p>要连接到的CouchDB数据库。必需参数。</p>
<p><strong>heartbeat</strong></p>
<ul>
<li>值类型是数字</li>
<li>默认值为1000</li>
</ul>
<p>Logstash连接到CouchDB的_changes with feed = continuous心跳是多久（以毫秒为单位）Logstash将ping CouchDB以确保连接被维护。不建议更改此设置，除非您知道您在做什么。</p>
<p><strong>host</strong></p>
<ul>
<li>值类型是字符串</li>
<li>默认值为“localhost”</li>
<li>IP或CouchDB实例的主机名</li>
</ul>
<p><strong>ignore_attachments</strong></p>
<ul>
<li>值类型是布尔值</li>
<li>默认值为true</li>
</ul>
<p>未来功能！直到实现，改变这个从默认不会做任何事情。</p>
<p>忽略与CouchDB文档关联的附件。</p>
<p><strong>initial_sequence</strong></p>
<ul>
<li>值类型是数字</li>
<li>此设置没有默认值。</li>
</ul>
<p>如果未指定，Logstash将尝试从sequence_path文件读取最后一个序列号。如果它是空的或不存在，它将从0开始。</p>
<p>如果指定此值，则预计您将只在特殊情况下进行初始读取，并且此后您将取消设置此值。</p>
<p><strong>keep_revision</strong></p>
<ul>
<li>值类型是布尔值</li>
<li>默认值为false</li>
</ul>
<p>保留输出中的CouchDB文档版本“<code>_rev</code>”值。</p>
<p><strong>password</strong></p>
<ul>
<li>值类型为密码</li>
<li>默认值为nil</li>
</ul>
<p>密码，如果需要认证以连接到CouchDB</p>
<p><strong>port</strong></p>
<ul>
<li>值类型是数字</li>
<li>默认值为5984</li>
</ul>
<p>您的CouchDB实例的端口。</p>
<p><strong>reconnect_delay</strong></p>
<ul>
<li>值类型是数字</li>
<li>默认值为10</li>
</ul>
<p>重新连接延迟：重新连接尝试之间的时间（以秒为单位）。</p>
<p><strong>secure</strong></p>
<ul>
<li>值类型是布尔值</li>
<li>默认值为false</li>
</ul>
<p>安全地连接到CouchDB的_changes订阅源（通过https）默认值：false（通过http）</p>
<p><strong>sequence_path</strong></p>
<ul>
<li>值类型是字符串</li>
<li>此设置没有默认值。</li>
</ul>
<p>存储_changes流中最后一个序列号的文件路径。如果取消设置，它将写入$ HOME / .couchdb_seq</p>
<p><strong>tags</strong></p>
<ul>
<li>值类型是数组</li>
<li>此设置没有默认值。</li>
</ul>
<p>向您的活动添加任意数量的任意标签。</p>
<p>这可以帮助稍后处理。</p>
<p><strong>timeout</strong></p>
<ul>
<li>值类型是数字</li>
<li>此设置没有默认值。</li>
</ul>
<p>超时：在终止连接之前等待新数据的毫秒数。如果设置了超时，它将禁用心跳配置选项。</p>
<p><strong>type</strong></p>
<ul>
<li>值类型是字符串</li>
<li>此设置没有默认值。</li>
</ul>
<p>向此输入处理的所有事件添加一个类型字段。</p>
<p>类型主要用于过滤器激活。</p>
<p>类型存储为事件本身的一部分，因此您也可以使用类型在Kibana中搜索它。</p>
<p>如果您尝试在已有一个事件的事件上设置类型（例如，当您将事件从发件人发送到索引器时），则新输入不会覆盖现有类型。发货人设置的类型即使在发送到另一个Logstash服务器时也会保持该事件的有效期。</p>
<p><strong>username</strong></p>
<ul>
<li>值类型是字符串</li>
<li>默认值为nil</li>
</ul>
<p>用户名，如果需要认证以连接到CouchDB</p>
<h3 id="elasticsearch"><a href="#elasticsearch" class="headerlink" title="elasticsearch"></a>elasticsearch</h3><p>从Elasticsearch群集中根据搜索查询结果读取。 这对于重放测试日志，重建索引等非常有用。</p>
<p>例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">input &#123;</div><div class="line">  # Read all documents from Elasticsearch matching the given query</div><div class="line">  elasticsearch &#123;</div><div class="line">    hosts =&gt; &quot;localhost&quot;</div><div class="line">    query =&gt; &apos;&#123; &quot;query&quot;: &#123; &quot;match&quot;: &#123; &quot;statuscode&quot;: 200 &#125; &#125;, &quot;sort&quot;: [ &quot;_doc&quot; ] &#125;&apos;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这将创建具有以下格式的Elasticsearch查询：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">curl &apos;http://localhost:9200/logstash-*/_search?&amp;scroll=1m&amp;size=1000&apos; -d &apos;&#123;</div><div class="line">  &quot;query&quot;: &#123;</div><div class="line">    &quot;match&quot;: &#123;</div><div class="line">      &quot;statuscode&quot;: 200</div><div class="line">    &#125;</div><div class="line">  &#125;,</div><div class="line">  &quot;sort&quot;: [ &quot;_doc&quot; ]</div><div class="line">&#125;&apos;</div></pre></td></tr></table></figure></p>
<h4 id="概要-2"><a href="#概要-2" class="headerlink" title="概要"></a>概要</h4><p>此插件支持以下配置选项：</p>
<p>所需的配置选项：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">elasticsearch &#123;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>可用的配置选项：</p>
<table>
<thead>
<tr>
<th>Setting</th>
<th>Input type</th>
<th>Required</th>
<th>Default value</th>
</tr>
</thead>
<tbody>
<tr>
<td>add_field</td>
<td>hash</td>
<td>No</td>
<td>{}</td>
</tr>
<tr>
<td>ca_file</td>
<td>a valid filesystem path</td>
<td>No</td>
<td></td>
</tr>
<tr>
<td>codec</td>
<td>codec</td>
<td>No</td>
<td>“json”</td>
</tr>
<tr>
<td>docinfo</td>
<td>boolean</td>
<td>No</td>
<td>false</td>
</tr>
<tr>
<td>docinfo_fields</td>
<td>array</td>
<td>No</td>
<td>[“_index”, “_type”, “_id”]</td>
</tr>
<tr>
<td>docinfo_target</td>
<td>string</td>
<td>No</td>
<td>“\@metadata”</td>
</tr>
<tr>
<td>hosts</td>
<td>array</td>
<td>No</td>
<td></td>
</tr>
<tr>
<td>index</td>
<td>string</td>
<td>No</td>
<td>“logstash-*“</td>
</tr>
<tr>
<td>password</td>
<td>password</td>
<td>No</td>
<td></td>
</tr>
<tr>
<td>query</td>
<td>string</td>
<td>No</td>
<td>“{ \”sort\”: [ \”_doc\” ] }”</td>
</tr>
<tr>
<td>scroll</td>
<td>string</td>
<td>No</td>
<td>“1m”</td>
</tr>
<tr>
<td>size</td>
<td>number</td>
<td>No</td>
<td>1000</td>
</tr>
<tr>
<td>ssl</td>
<td>boolean</td>
<td>No</td>
<td>false</td>
</tr>
<tr>
<td>tags</td>
<td>array</td>
<td>No</td>
<td></td>
</tr>
<tr>
<td>type</td>
<td>string</td>
<td>No</td>
<td></td>
</tr>
<tr>
<td>user</td>
<td>string</td>
<td>No</td>
<td></td>
</tr>
</tbody>
</table>
<h4 id="详细"><a href="#详细" class="headerlink" title="详细"></a>详细</h4><p><strong>add_field</strong></p>
<ul>
<li>值类型是哈希</li>
<li>默认值为{}</li>
</ul>
<p>向事件添加字段</p>
<p><strong>ca_file</strong></p>
<ul>
<li>值类型为路径</li>
<li>此设置没有默认值。</li>
</ul>
<p>SSL证书授权文件</p>
<p><strong>codec</strong></p>
<ul>
<li>值类型是编解码器</li>
<li>默认值为“json”</li>
</ul>
<p>用于输入数据的编解码器。输入的编解码器是用于在进入输入之前，无需一个单独的过滤器中的Logstash管道解码数据的简便方法。</p>
<p><strong>docinfo</strong></p>
<ul>
<li>值类型是布尔值</li>
<li>默认值为false</li>
</ul>
<p>如果设置，请在事件中包括Elasticsearch文档信息，如索引，类型和ID。</p>
<p>关于元数据，可能需要注意的是，如果你正在接收文档，并且想要重新索引它们（或者只是更新它们），那么弹性搜索输出中的操作选项想要知道如何处理这些事情。它可以动态分配一个添加到元数据的字段。</p>
<p>例<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">input &#123;</div><div class="line">  elasticsearch &#123;</div><div class="line">    hosts =&gt; &quot;es.production.mysite.org&quot;</div><div class="line">    index =&gt; &quot;mydata-2018.09.*&quot;</div><div class="line">    query =&gt; &quot;*&quot;</div><div class="line">    size =&gt; 500</div><div class="line">    scroll =&gt; &quot;5m&quot;</div><div class="line">    docinfo =&gt; true</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line">output &#123;</div><div class="line">  elasticsearch &#123;</div><div class="line">    index =&gt; &quot;copy-of-production.%&#123;[@metadata][_index]&#125;&quot;</div><div class="line">    index_type =&gt; &quot;%&#123;[@metadata][_type]&#125;&quot;</div><div class="line">    document_id =&gt; &quot;%&#123;[@metadata][_id]&#125;&quot;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><strong>docinfo_fields</strong></p>
<ul>
<li>值类型是数组</li>
<li>默认值为<code>[“_index”，“_type”，“_id”]</code></li>
</ul>
<p>要移动到docinfo_target字段的文档元数据列表要了解有关Elasticsearch元数据字段的详细信息，请阅读<a href="http://www.elasticsearch.org/guide/en/elasticsearch/guide/current/_document_metadata.html" target="_blank" rel="external">http://www.elasticsearch.org/guide/en/elasticsearch/guide/current/_document_metadata.html</a></p>
<p><strong>docinfo_target</strong></p>
<ul>
<li>值类型是字符串</li>
<li>默认值为“@metadata”</li>
</ul>
<p>默认情况下，在哪里移动Elasticsearch文档信息，我们使用@metadata字段。</p>
<p><strong>hosts</strong></p>
<ul>
<li>值类型是数组</li>
<li>此设置没有默认值。</li>
</ul>
<p>用于查询的elasticsearch主机列表。每个主机可以是IP，HOST，IP：端口或HOST：端口端口默认为9200</p>
<p>如果你不明确设置这个变量，Logstash会生成一个唯一的名字。</p>
<p><strong>index</strong></p>
<ul>
<li>值类型是字符串</li>
<li>默认值为“<code>logstash-*</code>”</li>
</ul>
<p>要搜索的索引或别名。</p>
<p><strong>password</strong></p>
<ul>
<li>值类型为密码</li>
<li>此设置没有默认值。</li>
</ul>
<p>Basic Auth - password</p>
<p><strong>query</strong></p>
<ul>
<li>值类型是字符串</li>
<li>默认值为“<code>{\”sort \“：[\”_ doc \“]}</code>”</li>
</ul>
<p>要执行的查询。有关详细信息，请阅读Elasticsearch查询DSL文档<a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl.html" target="_blank" rel="external">https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl.html</a></p>
<p><strong>scroll</strong></p>
<ul>
<li>值类型是字符串</li>
<li>默认值为“1m”</li>
</ul>
<p>此参数控制滚动请求的保持活动时间（以秒为单位），并启动滚动过程。每次往返（即，在上一个滚动请求与下一个滚动请求之间）应用超时。</p>
<p><strong>size</strong></p>
<ul>
<li>值类型是数字</li>
<li>默认值为1000</li>
</ul>
<p>这允许您设置每次滚动返回的最大命中数。</p>
<p><strong>ssl</strong></p>
<ul>
<li>值类型是布尔值</li>
<li>默认值为false</li>
</ul>
<p>SSL</p>
<p><strong>tags</strong></p>
<ul>
<li>值类型是数组</li>
<li>此设置没有默认值。</li>
</ul>
<p>向您的活动添加任意数量的任意标签。</p>
<p>这可以帮助稍后处理。</p>
<p><strong>type</strong></p>
<ul>
<li>值类型是字符串</li>
<li>此设置没有默认值。</li>
</ul>
<p>向此输入处理的所有事件添加一个类型字段。</p>
<p>类型主要用于过滤器激活。</p>
<p>类型存储为事件本身的一部分，因此您也可以使用类型在Kibana中搜索它。</p>
<p>如果您尝试在已有一个事件的事件上设置类型（例如，当您将事件从发件人发送到索引器时），则新输入不会覆盖现有类型。发货人设置的类型即使在发送到另一个Logstash服务器时也会保持该事件的有效期。</p>
<p><strong>user</strong></p>
<ul>
<li>值类型是字符串</li>
<li>此设置没有默认值。</li>
</ul>
<p>Basic Auth - username</p>
<h3 id="exec"><a href="#exec" class="headerlink" title="exec"></a>exec</h3><p>定期运行shell命令并将整个输出捕获为事件。</p>
<p>笔记：</p>
<ul>
<li>此事件的命令字段将是命令运行。</li>
<li>此事件的消息字段将是命令的整个stdout。</li>
</ul>
<h4 id="概要-3"><a href="#概要-3" class="headerlink" title="概要"></a>概要</h4><p>此插件支持以下配置选项：</p>
<p>所需的配置选项：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">exec &#123;</div><div class="line">    command =&gt; ...</div><div class="line">    interval =&gt; ...</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>可用配置选项：</p>
<table>
<thead>
<tr>
<th>Setting</th>
<th>Input type</th>
<th>Required</th>
<th>Default value</th>
</tr>
</thead>
<tbody>
<tr>
<td>add_field</td>
<td>hash</td>
<td>No</td>
<td>{}</td>
</tr>
<tr>
<td>codec</td>
<td>codec</td>
<td>No</td>
<td>“plain”</td>
</tr>
<tr>
<td>command</td>
<td>string</td>
<td>Yes</td>
<td></td>
</tr>
<tr>
<td>interval</td>
<td>number</td>
<td>Yes</td>
<td></td>
</tr>
<tr>
<td>tags</td>
<td>array</td>
<td>No</td>
<td></td>
</tr>
<tr>
<td>type</td>
<td>string</td>
<td>No</td>
<td></td>
</tr>
</tbody>
</table>
<h4 id="Details"><a href="#Details" class="headerlink" title="Details"></a>Details</h4><p><strong>add_field</strong></p>
<ul>
<li>值类型是哈希</li>
<li>默认值为{}</li>
</ul>
<p>向事件添加字段</p>
<p><strong>codec</strong></p>
<ul>
<li>值类型是编解码器</li>
<li>默认值为“plain”</li>
</ul>
<p>用于输入数据的编解码器。输入的编解码器是用于在进入输入之前，无需一个单独的过滤器中的Logstash管道解码数据的简便方法。</p>
<p><strong>command</strong></p>
<ul>
<li>这是必需的设置。</li>
<li>值类型是字符串</li>
<li>此设置没有默认值。</li>
</ul>
<p>命令运行。例如，uptime</p>
<p><strong>debug (DEPRECATED)</strong></p>
<ul>
<li>DEPRECATED WARNING：此配置项目已弃用，并且可能在将来的版本中不可用。</li>
<li>值类型是布尔值</li>
<li>默认值为false</li>
</ul>
<p>将此设置为true可对输入启用调试。</p>
<p><strong>interval</strong></p>
<ul>
<li>这是必需的设置。</li>
<li>值类型是数字</li>
<li>此设置没有默认值。</li>
</ul>
<p>运行命令的间隔。值以秒为单位。</p>
<p><strong>tags</strong></p>
<ul>
<li>值类型是数组</li>
<li>此设置没有默认值。</li>
</ul>
<p>向您的活动添加任意数量的任意标签。</p>
<p>这可以帮助稍后处理。</p>
<p><strong>type</strong></p>
<ul>
<li>值类型是字符串</li>
<li>此设置没有默认值。</li>
</ul>
<p>向此输入处理的所有事件添加一个类型字段。</p>
<p>类型主要用于过滤器激活。</p>
<p>类型存储为事件本身的一部分，因此您也可以使用类型在Kibana中搜索它。</p>
<p>如果您尝试在已有一个事件的事件上设置类型（例如，当您将事件从发件人发送到索引器时），则新输入不会覆盖现有类型。发货人设置的类型即使在发送到另一个Logstash服务器时也会保持该事件的有效期。</p>
<h3 id="file"><a href="#file" class="headerlink" title="file"></a>file</h3><p>从文件流事件，通常通过拖尾它们以类似于尾-0F的方式，但可选地从开始读取它们。</p>
<p>默认情况下，每个事件假定为一行。 如果您希望将多个日志行连接到一个事件中，则需要使用多行编解码器或过滤器。</p>
<p>该插件旨在跟踪更改的文件，并发出新内容，因为它附加到每个文件。 它不太适合从头到尾读取文件，并将其存储在单个事件中（即使使用多线编解码器或过滤器）。</p>
<h4 id="监视文件中当前位置的跟踪"><a href="#监视文件中当前位置的跟踪" class="headerlink" title="监视文件中当前位置的跟踪"></a>监视文件中当前位置的跟踪</h4><p>插件通过将其记录在名为sincedb的单独文件中来跟踪每个文件中的当前位置。这使得可以停止和重新启动Logstash，并让它从停止的位置选择，而不会丢失在Logstash停止时添加到文件的行。</p>
<p>默认情况下，sincedb文件放置在运行Logstash的用户的主目录中，文件名基于被监视的文件名模式（即路径选项）。因此，更改文件名模式将导致使用新的sincedb文件，并且任何现有的当前位置状态将丢失。如果你用任何频率改变模式，用sincedb_path选项显式选择一个sincedb路径可能是有意义的。</p>
<p>每个输入必须使用不同的sincedb_path。使用相同的路径将导致问题。每个输入的读取检查点必须存储在不同的路径中，因此信息不会覆盖。</p>
<p>Sincedb文件是具有四列的文本文件：</p>
<ul>
<li>inode号（或等效值）。</li>
<li>文件系统（或等效的）的主设备号。</li>
<li>文件系统的次设备号（或等效设备号）。</li>
<li>文件中当前的字节偏移量。</li>
</ul>
<p>在非Windows系统上，您可以获取文件的索引节点号。 ls -li。</p>
<h4 id="文件旋转"><a href="#文件旋转" class="headerlink" title="文件旋转"></a>文件旋转</h4><p>文件旋转由此输入检测和处理，无论文件是通过重命名还是复制操作旋转。 要支持在旋转之后写入旋转文件一段时间的程序，请在文件名模式中包括原始文件名和旋转文件名（例如/ var / log / syslog和/var/log/syslog.1） 观看（路径选项）。 请注意，旋转的文件名将被视为一个新文件，因此如果start_position设置为开始旋转的文件将被重新处理。</p>
<p>使用默认值start_position（end）将任何写入文件末尾的消息（在旋转之前的最后一个读取操作和在新名称下重新打开之间的间隔（由stat_interval和discover_interval选项确定的间隔））将不会被拾取 。</p>
<h4 id="概要-4"><a href="#概要-4" class="headerlink" title="概要"></a>概要</h4><p>此插件支持以下配置选项：</p>
<p>所需的配置选项：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">file &#123;</div><div class="line">    path =&gt; ...</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>可用配置选项：</p>
<table>
<thead>
<tr>
<th>Setting</th>
<th>Input type</th>
<th>Required</th>
<th>Default value</th>
</tr>
</thead>
<tbody>
<tr>
<td>add_field</td>
<td>hash</td>
<td>No</td>
<td>{}</td>
</tr>
<tr>
<td>close_older</td>
<td>number</td>
<td>No</td>
<td>3600</td>
</tr>
<tr>
<td>codec</td>
<td>codec</td>
<td>No</td>
<td>“plain”</td>
</tr>
<tr>
<td>delimiter</td>
<td>string</td>
<td>No</td>
<td>“\n”</td>
</tr>
<tr>
<td>discover_interval</td>
<td>number</td>
<td>No</td>
<td>15</td>
</tr>
<tr>
<td>exclude</td>
<td>array</td>
<td>No</td>
<td></td>
</tr>
<tr>
<td>ignore_older</td>
<td>number</td>
<td>No</td>
<td>86400</td>
</tr>
<tr>
<td>max_open_files</td>
<td>number</td>
<td>No</td>
<td></td>
</tr>
<tr>
<td>path</td>
<td>array</td>
<td>Yes</td>
<td></td>
</tr>
<tr>
<td>sincedb_path</td>
<td>string</td>
<td>No</td>
<td></td>
</tr>
<tr>
<td>sincedb_write_interval</td>
<td>number</td>
<td>No</td>
<td>15</td>
</tr>
<tr>
<td>start_position</td>
<td>string, one of [“beginning”, “end”]</td>
<td>No”end”</td>
</tr>
<tr>
<td>stat_interval</td>
<td>number</td>
<td>No</td>
<td>1</td>
</tr>
<tr>
<td>tags</td>
<td>array</td>
<td>No</td>
<td></td>
</tr>
<tr>
<td>type</td>
<td>string</td>
<td>No</td>
<td></td>
</tr>
</tbody>
</table>
<h4 id="细节"><a href="#细节" class="headerlink" title="细节"></a>细节</h4><p><strong>add_field</strong></p>
<ul>
<li>值类型是哈希</li>
<li>默认值为{}</li>
</ul>
<p>向事件添加字段</p>
<p><strong>close_older</strong></p>
<ul>
<li>值类型是数字</li>
<li>默认值为3600</li>
</ul>
<p>文件输入关闭上次在几秒钟前读取指定时间跨度的任何文件。这具有不同的含义，这取决于文件是否被拖尾或读取。如果拖尾，并且在传入数据中存在大的时间间隔，则可以关闭文件（允许打开其他文件），但是当检测到新数据时将排队等待重新打开。如果读取，该文件将在从读取最后一个字节后的closed_older秒后关闭。默认值为1小时</p>
<p><strong>codec</strong></p>
<ul>
<li>值类型是编解码器</li>
<li>默认值为“plain”</li>
</ul>
<p>用于输入数据的编解码器。输入的编解码器是用于在进入输入之前，无需一个单独的过滤器中的Logstash管道解码数据的简便方法。</p>
<p><strong>delimiter</strong></p>
<ul>
<li>值类型是字符串</li>
<li>默认值为“\n”</li>
</ul>
<p>设置新的行分隔符，默认为“\n”</p>
<p><strong>discover_interval</strong></p>
<ul>
<li>值类型是数字</li>
<li>默认值为15</li>
</ul>
<p>我们扩展路径选项中的文件名模式以发现新文件以观察的频率（以秒为单位）。</p>
<p><strong>exclude</strong></p>
<ul>
<li>值类型是数组</li>
<li>此设置没有默认值。</li>
</ul>
<p>排除（与文件名匹配，而不是完整路径）。文件名模式也在这里有效。例如，如果你有<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">path =&gt; &quot;/var/log/*&quot;</div></pre></td></tr></table></figure></p>
<p>您可能希望排除gzip压缩文件：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">exclude =&gt; &quot;*.gz&quot;</div></pre></td></tr></table></figure></p>
<p><strong>ignore_older</strong></p>
<ul>
<li>值类型是数字</li>
<li>默认值为86400</li>
</ul>
<p>当文件输入发现在指定的时间间隔（以秒为单位）之前最后一次修改的文件时，该文件将被忽略。发现后，如果忽略的文件被修改，它不再被忽略，任何新的数据被读取。默认值为24小时。</p>
<p><strong>max_open_files</strong></p>
<ul>
<li>值类型是数字</li>
<li>此设置没有默认值。</li>
</ul>
<p>此输入在任何时间消耗的file_handles的最大数量是多少。如果需要处理比此数字更多的文件，请使用close_older关闭某些文件。这不应该设置为操作系统可以做的最大值，因为其他LS插件和OS进程需要文件句柄。在filewatch中设置默认值4095。</p>
<p><strong>path</strong><br>这是必需的设置。<br>值类型是数组<br>此设置没有默认值。<br>要用作输入的文件的路径。您可以在此处使用文件名模式，例如<code>/var/log/**/*.log</code>。如果使用类似<code>/var/log/**/*.log</code>的模式，将对所有<code>* .log</code>文件执行<code>/var/log</code>的递归搜索。路径必须是绝对的，不能是相对的。</p>
<p>您还可以配置多个路径。请参见Logstash配置页面上的示例。</p>
<p><strong>sincedb_path</strong></p>
<ul>
<li>值类型是字符串</li>
<li>此设置没有默认值。</li>
</ul>
<p>将写入磁盘的sincedb数据库文件的路径（记录被监视日志文件的当前位置）。默认情况下会将sincedb文件写入与<code>$HOME/.sincedb*</code>匹配的路径注意：它必须是文件路径，而不是目录路径</p>
<p><strong>sincedb_write_interval</strong><br>值类型是数字<br>默认值为15<br>使用受监视日志文件的当前位置写入自从数据库的频率（以秒为单位）。</p>
<p><strong>start_position</strong></p>
<ul>
<li>值可以是以下任意值：beginning, end</li>
<li>默认值为“end”</li>
</ul>
<p>选择Logstash最初开始读取文件的位置：开始或结束。默认行为处理像直播流这样的文件，因此从结束处开始。如果您有要导入的旧数据，请将其设置为开始。</p>
<p>此选项仅修改文件是新的且之前不可见的“第一接触”情况，即，没有当前位置的文件记录在由Logstash读取的sincedb文件中。如果以前已经看过一个文件，该选项不起作用，并且将使用记录在sincedb文件中的位置。</p>
<p><strong>stat_interval</strong></p>
<ul>
<li>值类型是数字</li>
<li>默认值为1</li>
</ul>
<p>stat文件的频率（以秒为单位），以查看它们是否已被修改。增加此间隔将减少我们进行的系统调用的数量，但增加检测新日志行的时间。</p>
<p><strong>tags</strong></p>
<ul>
<li>值类型是数组</li>
<li>此设置没有默认值。</li>
</ul>
<p>向您的活动添加任意数量的任意标签。</p>
<p>这可以帮助稍后处理。</p>
<p><strong>type</strong></p>
<ul>
<li>值类型是字符串</li>
<li>此设置没有默认值。</li>
</ul>
<p>向此输入处理的所有事件添加一个类型字段。</p>
<p>类型主要用于过滤器激活。</p>
<p>类型存储为事件本身的一部分，因此您也可以使用类型在Kibana中搜索它。</p>
<p>如果您尝试在已有一个事件的事件上设置类型（例如，当您将事件从发件人发送到索引器时），则新输入不会覆盖现有类型。发货人设置的类型即使在发送到另一个Logstash服务器时也会保持该事件的有效期。</p>
<h3 id="heartbeat"><a href="#heartbeat" class="headerlink" title="heartbeat"></a>heartbeat</h3><p>生成心跳消息。</p>
<p>这个的一般意图是测试Logstash的性能和可用性。</p>
<h4 id="概要-5"><a href="#概要-5" class="headerlink" title="概要"></a>概要</h4><p>此插件支持以下配置选项：</p>
<p>所需的配置选项：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">heartbeat &#123;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>可用的配置选项：</p>
<table>
<thead>
<tr>
<th>Setting</th>
<th>Input type</th>
<th>Required</th>
<th>Default value</th>
</tr>
</thead>
<tbody>
<tr>
<td>add_field</td>
<td>hash</td>
<td>No</td>
<td>{}</td>
</tr>
<tr>
<td>codec</td>
<td>codec</td>
<td>No</td>
<td>“plain”</td>
</tr>
<tr>
<td>count</td>
<td>number</td>
<td>No</td>
<td>-1</td>
</tr>
<tr>
<td>interval</td>
<td>number</td>
<td>No</td>
<td>60</td>
</tr>
<tr>
<td>message</td>
<td>string</td>
<td>No</td>
<td>“ok”</td>
</tr>
<tr>
<td>tags</td>
<td>array</td>
<td>No</td>
<td></td>
</tr>
<tr>
<td>threads</td>
<td>number</td>
<td>No</td>
<td>1</td>
</tr>
<tr>
<td>type</td>
<td>string</td>
<td>No</td>
<td></td>
</tr>
</tbody>
</table>
<h4 id="细节-1"><a href="#细节-1" class="headerlink" title="细节"></a>细节</h4><p><strong>add_field</strong></p>
<ul>
<li>值类型是哈希</li>
<li>默认值为{}</li>
</ul>
<p>向事件添加字段</p>
<p><strong>codec</strong></p>
<ul>
<li>值类型是编解码器</li>
<li>默认值为“plain”</li>
</ul>
<p>用于输入数据的编解码器。输入的编解码器是用于在进入输入之前，无需一个单独的过滤器中的Logstash管道解码数据的简便方法。</p>
<p><strong>count</strong></p>
<ul>
<li>值类型是数字</li>
<li>默认值为-1</li>
</ul>
<p>迭代次数。这通常仅用于测试目的。</p>
<p><strong>interval</strong></p>
<ul>
<li>值类型是数字</li>
<li>默认值为60</li>
</ul>
<p>设置应发送邮件的频率。</p>
<p>默认值为60，表示每60秒发送一条消息。</p>
<p><strong>message</strong></p>
<ul>
<li>值类型是字符串</li>
<li>默认值为“ok”</li>
</ul>
<p>要在事件中使用的消息字符串。</p>
<p>如果将此设置为epoch，则此插件将使用unix时间戳（根据定义，UTC）中的当前时间戳。它将该值输出到称为时钟的字段</p>
<p>如果你设置为序列，然后这个插件将发送从0开始的序列号，并增加每个间隔。它将该值输出到称为时钟的字段</p>
<p>否则，此值将被逐字用作事件消息。它将该值输出到一个名为message的字段</p>
<p><strong>tags</strong></p>
<ul>
<li>值类型是数组</li>
<li>此设置没有默认值。</li>
</ul>
<p>向您的活动添加任意数量的任意标签。</p>
<p>这可以帮助稍后处理。</p>
<p><strong>threads</strong></p>
<ul>
<li>值类型是数字</li>
<li>默认值为1</li>
</ul>
<p><strong>type</strong></p>
<ul>
<li>值类型是字符串</li>
<li>此设置没有默认值。</li>
</ul>
<p>向此输入处理的所有事件添加一个类型字段。</p>
<p>类型主要用于过滤器激活。</p>
<p>类型存储为事件本身的一部分，因此您也可以使用类型在Kibana中搜索它。</p>
<p>如果您尝试在已有一个事件的事件上设置类型（例如，当您将事件从发件人发送到索引器时），则新输入不会覆盖现有类型。发货人设置的类型即使在发送到另一个Logstash服务器时也会保持该事件的有效期。</p>
<h3 id="http"><a href="#http" class="headerlink" title="http"></a>http</h3><p>使用此输入，您可以通过http（s）接收单行或多行事件。应用程序可以向由此输入启动的端点发送具有正文的HTTP POST请求，Logstash会将其转换为事件以供后续处理。用户可以传递纯文本，JSON或任何格式的数据，并使用相应的编解码器与此输入。对于Content-Type application / json，使用json编解码器，但对于所有其他数据格式，使用纯编解码器。</p>
<p>此输入还可用于接收Webhook请求以与其他服务和应用程序集成。通过利用Logstash中可用的大量插件生态系统，您可以直接从应用程序触发可操作的事件。</p>
<h4 id="安全"><a href="#安全" class="headerlink" title="安全"></a>安全</h4><p>此插件支持标准HTTP基本认证头以标识请求者。您可以在向此输入发送数据时传递用户名，密码组合</p>
<p>您还可以设置SSL并通过https安全地发送数据，并具有验证客户端证书的选项。目前，证书设置是通过Java Keystore格式</p>
<h4 id="概要-6"><a href="#概要-6" class="headerlink" title="概要"></a>概要</h4><p>此插件支持以下配置选项：</p>
<p>所需的配置选项：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">http &#123;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>可用配置选项：</p>
<table>
<thead>
<tr>
<th>Setting</th>
<th>Input type</th>
<th>Required</th>
<th>Default value</th>
</tr>
</thead>
<tbody>
<tr>
<td>add_field</td>
<td>hash</td>
<td>No</td>
<td>{}</td>
</tr>
<tr>
<td>additional_codecs</td>
<td>hash</td>
<td>No</td>
<td>{“application/json”=&gt;”json”}</td>
</tr>
<tr>
<td>codec</td>
<td>codec</td>
<td>No</td>
<td>“plain”</td>
</tr>
<tr>
<td>host</td>
<td>string</td>
<td>No</td>
<td>“0.0.0.0”</td>
</tr>
<tr>
<td>keystore</td>
<td>a valid filesystem path</td>
<td>No</td>
<td></td>
</tr>
<tr>
<td>keystore_password</td>
<td>password</td>
<td>No</td>
<td></td>
</tr>
<tr>
<td>password</td>
<td>password</td>
<td>No</td>
<td></td>
</tr>
<tr>
<td>port</td>
<td>number</td>
<td>No</td>
<td>8080</td>
</tr>
<tr>
<td>response_headers</td>
<td>hash</td>
<td>No</td>
<td>{“Content-Type”=&gt;”text/plain”}</td>
</tr>
<tr>
<td>ssl</td>
<td>boolean</td>
<td>No</td>
<td>false</td>
</tr>
<tr>
<td>tags</td>
<td>array</td>
<td>No</td>
<td></td>
</tr>
<tr>
<td>threads</td>
<td>number</td>
<td>No</td>
<td>4</td>
</tr>
<tr>
<td>type</td>
<td>string</td>
<td>No</td>
<td></td>
</tr>
<tr>
<td>user</td>
<td>string</td>
<td>No</td>
<td></td>
</tr>
<tr>
<td>verify_mode</td>
<td>string, one of [“none”, “peer”, “force_peer”]</td>
<td>No</td>
<td>“none”</td>
</tr>
</tbody>
</table>
<h4 id="细节-2"><a href="#细节-2" class="headerlink" title="细节"></a>细节</h4><p><strong>add_field</strong></p>
<ul>
<li>值类型是哈希</li>
<li>默认值为{}</li>
</ul>
<p>向事件添加字段</p>
<p><strong>additional_codecs</strong></p>
<ul>
<li>值类型是哈希</li>
<li>默认值为{“application / json”=&gt;“json”}</li>
</ul>
<p>为特定内容类型应用特定的编解码器。默认编解码器将仅在此列表选中并且未找到请求的内容类型的编解码器之后才应用</p>
<p><strong>codec</strong></p>
<ul>
<li>值类型是编解码器</li>
<li>默认值为“plain”</li>
</ul>
<p>用于输入数据的编解码器。输入的编解码器是用于在进入输入之前，无需一个单独的过滤器中的Logstash管道解码数据的简便方法。</p>
<p><strong>host</strong></p>
<ul>
<li>值类型是字符串</li>
<li>默认值为“0.0.0.0”</li>
</ul>
<p>编解码器用于解码输入数据。如果在“additional_codecs”散列中找不到内容类型，则此编解码器将用作后退。主机或ip绑定</p>
<p><strong>keystore</strong></p>
<ul>
<li>值类型为路径</li>
<li>此设置没有默认值。</li>
</ul>
<p>JKS密钥库用于验证客户端的证书</p>
<p><strong>keystore_password</strong></p>
<ul>
<li>值类型为密码</li>
<li>此设置没有默认值。</li>
</ul>
<p>设置信任库密码</p>
<p><strong>password</strong></p>
<ul>
<li>值类型为密码</li>
<li>此设置没有默认值。</li>
</ul>
<p>基本授权密码</p>
<p><strong>port</strong></p>
<ul>
<li>值类型是数字</li>
<li>默认值为8080</li>
</ul>
<p>要绑定的TCP端口</p>
<p><strong>response_headers</strong></p>
<ul>
<li>值类型是哈希</li>
<li>默认值为{“Content-Type”=&gt;“text / plain”}</li>
</ul>
<p>指定一组自定义的响应头</p>
<p><strong>ssl</strong></p>
<ul>
<li>值类型是布尔值</li>
<li>默认值为false</li>
</ul>
<p>SSL配置</p>
<p>启用S​​SL</p>
<p><strong>tags</strong></p>
<ul>
<li>值类型是数组</li>
<li>此设置没有默认值。</li>
</ul>
<p>向您的活动添加任意数量的任意标签。</p>
<p>这可以帮助稍后处理。</p>
<p><strong>threads</strong></p>
<ul>
<li>值类型是数字</li>
<li>默认值为4</li>
</ul>
<p>要使用的最大线程数</p>
<p><strong>type</strong></p>
<ul>
<li>值类型是字符串</li>
<li>此设置没有默认值。</li>
</ul>
<p>向此输入处理的所有事件添加一个类型字段。</p>
<p>类型主要用于过滤器激活。</p>
<p>类型存储为事件本身的一部分，因此您也可以使用类型在Kibana中搜索它。</p>
<p>如果您尝试在已有一个事件的事件上设置类型（例如，当您将事件从发件人发送到索引器时），则新输入不会覆盖现有类型。发货人设置的类型即使在发送到另一个Logstash服务器时也会保持该事件的有效期。</p>
<p><strong>user</strong></p>
<ul>
<li>值类型是字符串</li>
<li>此设置没有默认值。</li>
</ul>
<p>基本授权的用户名</p>
<p><strong>verify_mode</strong></p>
<ul>
<li>值可以是以下任何值：none，peer，force_peer</li>
<li>默认值为“none”</li>
</ul>
<p>设置客户端证书验证方法。有效方法：none, peer, force_peer</p>
<h3 id="kafka"><a href="#kafka" class="headerlink" title="kafka"></a>kafka</h3><p>此输入将读取来自Kafka主题的事件。 它使用Kafka提供的高级消费者API从代理读取消息。 它还维护使用Zookeeper消耗的状态。 默认输入编解码器是json。</p>
<p>这里有一个兼容性矩阵，显示与Logstash和Kafka输入插件的每个组合兼容的Kafka客户端版本：</p>
<table>
<thead>
<tr>
<th>Kafka Client Version</th>
<th>Logstash Version</th>
<th>Plugin Version</th>
<th>Security Features</th>
<th>Why?</th>
</tr>
</thead>
<tbody>
<tr>
<td>0.8</td>
<td>2.0.0 - 2.x.x</td>
<td>&lt;3.0.0</td>
<td></td>
<td>Legacy, 0.8 is still popular</td>
</tr>
<tr>
<td>0.9</td>
<td>2.0.0 - 2.3.x</td>
<td>3.x.x</td>
<td>Basic Auth, SSL</td>
<td>Works with the old Ruby Event API (event[‘product’][‘price’] = 10)</td>
</tr>
<tr>
<td>0.9</td>
<td>2.4.0 - 5.0.x</td>
<td>4.x.x</td>
<td>Basic Auth, SSL</td>
<td>Works with the new getter/setter APIs (event.set(‘[product][price]’, 10))</td>
</tr>
<tr>
<td>0.10</td>
<td>2.4.0 - 5.0.x</td>
<td>5.x.x</td>
<td>Basic Auth, SSL</td>
<td>Not compatible with the 0.9 broker</td>
</tr>
</tbody>
</table>
<p><code>nitice：</code>我们建议您使用匹配的Kafka客户端和代理版本。 在升级期间，您应该在客户端之前升级代理，因为代理的目标向后兼容。 例如，0.9代理与0.8消费者API和0.9消费者API兼容，但不是相反。</p>
<p>您必须配置topic_id，white_list或black_list。 默认情况下，它将连接到在localhost上运行的Zookeeper。 所有代理信息从Zookeeper状态读取。</p>
<p>理想情况下，您应该具有与分区数目一样多的线程以实现完美平衡 - 比分区更多的线程意味着某些线程将是空闲的</p>
<p>有关详细信息，请参阅<a href="http://kafka.apache.org/documentation.html#theconsumer" target="_blank" rel="external">http://kafka.apache.org/documentation.html#theconsumer</a></p>
<p>Kafka使用者配置：<a href="http://kafka.apache.org/documentation.html#consumerconfigs" target="_blank" rel="external">http://kafka.apache.org/documentation.html#consumerconfigs</a></p>
<h4 id="概要-7"><a href="#概要-7" class="headerlink" title="概要"></a>概要</h4><p>此插件支持以下配置选项：</p>
<p>所需的配置选项：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">kafka &#123;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>可用的配置选项：</p>
<table>
<thead>
<tr>
<th>Setting</th>
<th>Input type</th>
<th>Required</th>
<th>Default value</th>
</tr>
</thead>
<tbody>
<tr>
<td>add_field</td>
<td>hash</td>
<td>No</td>
<td>{}</td>
</tr>
<tr>
<td>auto_offset_reset</td>
<td>string, one of [“largest”, “smallest”]</td>
<td>No</td>
<td>“largest”</td>
</tr>
<tr>
<td>black_list</td>
<td>string</td>
<td>No</td>
<td>nil</td>
</tr>
<tr>
<td>codec</td>
<td>codec</td>
<td>No</td>
<td>“json”</td>
</tr>
<tr>
<td>consumer_id</td>
<td>string</td>
<td>No</td>
<td>nil</td>
</tr>
<tr>
<td>consumer_restart_on_error</td>
<td>boolean</td>
<td>No</td>
<td>true</td>
</tr>
<tr>
<td>consumer_restart_sleep_ms</td>
<td>number</td>
<td>No</td>
<td>0</td>
</tr>
<tr>
<td>consumer_threads</td>
<td>number</td>
<td>No</td>
<td>1</td>
</tr>
<tr>
<td>consumer_timeout_ms</td>
<td>number</td>
<td>No</td>
<td>-1</td>
</tr>
<tr>
<td>decoder_class</td>
<td>string</td>
<td>No</td>
<td>“kafka.serializer.DefaultDecoder”</td>
</tr>
<tr>
<td>decorate_events</td>
<td>boolean</td>
<td>No</td>
<td>false</td>
</tr>
<tr>
<td>fetch_message_max_bytes</td>
<td>number</td>
<td>No</td>
<td>1048576</td>
</tr>
<tr>
<td>group_id</td>
<td>string</td>
<td>No</td>
<td>“logstash”</td>
</tr>
<tr>
<td>key_decoder_class</td>
<td>string</td>
<td>No</td>
<td>“kafka.serializer.DefaultDecoder”</td>
</tr>
<tr>
<td>queue_size</td>
<td>number</td>
<td>No</td>
<td>20</td>
</tr>
<tr>
<td>rebalance_backoff_ms</td>
<td>number</td>
<td>No</td>
<td>2000</td>
</tr>
<tr>
<td>rebalance_max_retries</td>
<td>number</td>
<td>No</td>
<td>4</td>
</tr>
<tr>
<td>reset_beginning</td>
<td>boolean</td>
<td>No</td>
<td>false</td>
</tr>
<tr>
<td>tags</td>
<td>array</td>
<td>No</td>
<td></td>
</tr>
<tr>
<td>topic_id</td>
<td>string</td>
<td>No</td>
<td></td>
</tr>
<tr>
<td>nil</td>
<td>type</td>
<td>string</td>
<td>No</td>
<td></td>
</tr>
<tr>
<td>white_list</td>
<td>string</td>
<td>No</td>
<td>nil</td>
</tr>
<tr>
<td>zk_connect</td>
<td>string</td>
<td>No</td>
<td>“localhost:2181”</td>
</tr>
</tbody>
</table>
<h4 id="细节-3"><a href="#细节-3" class="headerlink" title="细节"></a>细节</h4><p><strong>add_field</strong></p>
<ul>
<li>值类型是哈希</li>
<li>默认值为{}</li>
</ul>
<p>向事件添加字段</p>
<p><strong>auto_offset_reset</strong></p>
<ul>
<li>值可以是以下任意值：最大，最小</li>
<li>默认值为“最大”</li>
</ul>
<p>最小或最大 - （可选，默认最大）如果消费者没有已建立的偏移量或偏移量无效，请从日志中最早的消息（最小）或日志中最后一个消息（最大）开始。</p>
<p><strong>black_list</strong></p>
<ul>
<li>值类型是字符串</li>
<li>默认值为nil</li>
</ul>
<p>从消费中排除的主题黑名单。</p>
<p><strong>codec</strong></p>
<ul>
<li>值类型是编解码器</li>
<li>默认值为“json”</li>
</ul>
<p>用于输入数据的编解码器。输入的编解码器是用于在进入输入之前，无需一个单独的过滤器中的Logstash管道解码数据的简便方法。</p>
<p><strong>consumer_id</strong></p>
<ul>
<li>值类型是字符串</li>
<li>默认值为nil</li>
</ul>
<p>消费者的唯一ID;如果未设置则自动生成。</p>
<p><strong>consumer_restart_on_error</strong></p>
<ul>
<li>值类型是布尔值</li>
<li>默认值为true</li>
</ul>
<p>选项在出错时重新启动使用者循环</p>
<p><strong>consumer_restart_sleep_ms</strong></p>
<ul>
<li>值类型是数字</li>
<li>默认值为0</li>
</ul>
<p>以毫为单位等待消费者在出现错误后重新启动的时间</p>
<p><strong>consumer_threads</strong></p>
<ul>
<li>值类型是数字</li>
<li>默认值为1</li>
</ul>
<p>从分区读取的线程数。理想情况下，您应该具有与分区数量一样多的线程以实现完美平衡。比分区更多的线程意味着一些线程将是空闲的。较少的线程意味着单个线程可能正在从多个分区消耗</p>
<p><strong>consumer_timeout_ms</strong></p>
<ul>
<li>值类型是数字</li>
<li>默认值为-1</li>
</ul>
<p>如果在指定的时间间隔后没有消息可用，则向使用者抛出超时异常</p>
<p><strong>decoder_class</strong></p>
<ul>
<li>值类型是字符串</li>
<li>默认值为“kafka.serializer.DefaultDecoder”</li>
</ul>
<p>消息的序列化类。默认解码器接受一个字节[]并返回相同的字节[]</p>
<p><strong>decorate_events</strong></p>
<ul>
<li>值类型是布尔值</li>
<li>默认值为false</li>
</ul>
<p>选项添加Kafka元数据，如主题，消息大小到事件。这将在logstash事件中添加一个名为kafka的字段，其中包含以下属性：msg_size：此消息的完整序列化大小（以字节为单位）（包括crc，头属性等）主题：此消息与consumer_group关联的主题：用于读取此事件分区：此消息与分区相关联的键：包含消息键的ByteBuffer</p>
<p><strong>fetch_message_max_bytes</strong></p>
<ul>
<li>值类型是数字</li>
<li>默认值为1048576</li>
</ul>
<p>尝试在每个抓取请求中为每个主题分区获取的消息的字节数。这些字节将被读入每个分区的内存，因此这有助于控制消费者使用的内存。获取请求大小必须至少与服务器允许的最大消息大小一样大，否则生产者可能发送大于客户可以提取的消息。</p>
<p><strong>group_id</strong></p>
<ul>
<li>值类型是字符串</li>
<li>默认值为“logstash”</li>
</ul>
<p>唯一标识此消费者所属的消费者进程组的字符串。通过设置相同的组ID，多个进程指示它们都是同一使用者组的一部分。</p>
<p><strong>key_decoder_class</strong></p>
<ul>
<li>值类型是字符串</li>
<li>默认值为“kafka.serializer.DefaultDecoder”</li>
</ul>
<p>键的序列化类（默认与消息的默认值相同）</p>
<p><strong>queue_size</strong></p>
<ul>
<li>值类型是数字</li>
<li>默认值为20</li>
</ul>
<p>内部Logstash队列大小，用于在从Kafka读取事件后将事件保存在内存中</p>
<p><strong>rebalance_backoff_ms</strong></p>
<ul>
<li>值类型是数字</li>
<li>默认值为2000<br>在重新平衡期间重试之间的退避时间。</li>
</ul>
<p><strong>rebalance_max_retries</strong></p>
<ul>
<li>值类型是数字</li>
<li>默认值为4</li>
</ul>
<p>当新消费者加入消费者组时，该组消费者尝试“重新平衡”负载以向每个消费者分配分区。如果在进行此分配时，消费者集合发生变化，则重新平衡将失败并重试。此设置控制放弃之前的最大尝试次数。</p>
<p><strong>reset_beginning</strong></p>
<ul>
<li>值类型是布尔值</li>
<li>默认值为false</li>
</ul>
<p>通过清除存储在Zookeeper中的组的任何偏移量，将使用者组重置为从日志中存在的最早消息开始。这是破坏性的！必须与auto_offset_reset⇒smallest 结合使用</p>
<p><strong>tags</strong></p>
<ul>
<li>值类型是数组</li>
<li>此设置没有默认值。</li>
</ul>
<p>向您的活动添加任意数量的任意标签。</p>
<p>这可以帮助稍后处理。</p>
<p><strong>topic_id</strong></p>
<ul>
<li>值类型是字符串</li>
<li>默认值为nil</li>
</ul>
<p>使用消息的主题</p>
<p><strong>type</strong></p>
<ul>
<li>值类型是字符串</li>
<li>此设置没有默认值。</li>
</ul>
<p>向此输入处理的所有事件添加一个类型字段。</p>
<p>类型主要用于过滤器激活。</p>
<p>类型存储为事件本身的一部分，因此您也可以使用类型在Kibana中搜索它。</p>
<p>如果您尝试在已有一个事件的事件上设置类型（例如，当您将事件从发件人发送到索引器时），则新输入不会覆盖现有类型。发货人设置的类型即使在发送到另一个Logstash服务器时也会保持该事件的有效期。</p>
<p><strong>white_list</strong></p>
<ul>
<li>值类型是字符串</li>
<li>默认值为nil</li>
</ul>
<p>包括消费的主题的白名单。</p>
<p><strong>zk_connect</strong></p>
<ul>
<li>值类型是字符串</li>
<li>默认值为“localhost：2181”</li>
</ul>
<p>指定ZooKeeper连接字符串，格式为hostname：port，其中host和port是ZooKeeper服务器的主机和端口。您还可以指定多个主机，格式为hostname1：port1，hostname2：port2，hostname3：port3。</p>
<p>服务器也可能有一个ZooKeeper chroot路径作为其ZooKeeper连接字符串的一部分，该连接字符串将其数据放在全局ZooKeeper命名空间中的某个路径下。如果是这样，消费者应在其连接字符串中使用相同的chroot路径。例如，要给出/ chroot / path的chroot路径，您将给出连接字符串为hostname1：port1，hostname2：port2，hostname3：port3 / chroot / path。</p>
<h3 id="pipe"><a href="#pipe" class="headerlink" title="pipe"></a>pipe</h3><blockquote>
<p>这是一个社区维护的插件！</p>
</blockquote>
<p>从长时间运行的命令管道流事件。</p>
<p>默认情况下，每个事件假定为一行。 如果要连接线，您将需要使用多行过滤器。</p>
<h4 id="概要-8"><a href="#概要-8" class="headerlink" title="概要"></a>概要</h4><p>此插件支持以下配置选项：</p>
<p>所需的配置选项：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">pipe &#123;</div><div class="line">    command =&gt; ...</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>可用的配置选项：</p>
<table>
<thead>
<tr>
<th>Setting</th>
<th>Input type</th>
<th>Required</th>
<th>Default value</th>
</tr>
</thead>
<tbody>
<tr>
<td>add_field</td>
<td>hash</td>
<td>No</td>
<td>{}</td>
</tr>
<tr>
<td>codec</td>
<td>codec</td>
<td>No</td>
<td>“plain”</td>
</tr>
<tr>
<td>command</td>
<td>string</td>
<td>Yes</td>
<td></td>
</tr>
<tr>
<td>tags</td>
<td>array</td>
<td>No</td>
<td></td>
</tr>
<tr>
<td>type</td>
<td>string</td>
<td>No</td>
<td></td>
</tr>
</tbody>
</table>
<h4 id="细节-4"><a href="#细节-4" class="headerlink" title="细节"></a>细节</h4><p><strong>add_field</strong></p>
<ul>
<li>值类型是哈希</li>
<li>默认值为{}</li>
</ul>
<p>向事件添加字段</p>
<p><strong>codec</strong></p>
<ul>
<li>值类型是编解码器</li>
<li>默认值为“plain”</li>
</ul>
<p>用于输入数据的编解码器。输入的编解码器是用于在进入输入之前，无需一个单独的过滤器中的Logstash管道解码数据的简便方法。</p>
<p><strong>command</strong></p>
<ul>
<li>这是必需的设置。</li>
<li>值类型是字符串</li>
<li>此设置没有默认值。</li>
</ul>
<p>TODO（sissel）：我们应该切换到默认使用行编解码器，一旦我们从执行readline命令开始运行和读取事件，一次一行。</p>
<p>Example:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">command =&gt; &quot;echo hello world&quot;</div></pre></td></tr></table></figure></p>
<p><strong>tags</strong></p>
<ul>
<li>值类型是数组</li>
<li>此设置没有默认值。</li>
</ul>
<p>向您的活动添加任意数量的任意标签。</p>
<p>这可以帮助稍后处理。</p>
<p><strong>type</strong></p>
<ul>
<li>值类型是字符串</li>
<li>此设置没有默认值。</li>
</ul>
<p>向此输入处理的所有事件添加一个类型字段。</p>
<p>类型主要用于过滤器激活。</p>
<p>类型存储为事件本身的一部分，因此您也可以使用类型在Kibana中搜索它。</p>
<p>如果您尝试在已有一个事件的事件上设置类型（例如，当您将事件从发件人发送到索引器时），则新输入不会覆盖现有类型。发货人设置的类型即使在发送到另一个Logstash服务器时也会保持该事件的有效期。</p>
<h3 id="rabbitmq"><a href="#rabbitmq" class="headerlink" title="rabbitmq"></a>rabbitmq</h3><p>从RabbitMQ队列拉取事件。</p>
<p>默认设置将创建一个完全暂时的队列并默认侦听所有消息。 如果您需要耐久性或任何其他高级设置，请设置相应的选项</p>
<p>此插件使用March Hare库与RabbitMQ服务器进行交互。 大多数配置选项直接映射到标准RabbitMQ和AMQP概念。 AMQP 0-9-1参考指南和RabbitMQ文档的其他部分有助于更深入的理解。</p>
<p>如果选中@metadata_enabled设置，接收的邮件的属性将存储在[\@metadata] [rabbitmq_properties]字段中。 请注意，存储元数据可能会降低性能。 以下属性可用（在大多数情况下，取决于它们是否由发件人设置）：</p>
<ul>
<li>app-id</li>
<li>cluster-id</li>
<li>consumer-tag</li>
<li>content-encoding</li>
<li>content-type</li>
<li>correlation-id</li>
<li>delivery-mode</li>
<li>exchange</li>
<li>expiration</li>
<li>message-id</li>
<li>priority</li>
<li>redeliver</li>
<li>reply-to</li>
<li>routing-key</li>
<li>timestamp</li>
<li>type</li>
<li>user-id</li>
</ul>
<p>例如，要将RabbitMQ消息的timestamp属性导入Logstash事件的@timestamp字段，请使用日期过滤器解析[\@metadata][rabbitmq_properties] [timestamp]字段：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">filter &#123;</div><div class="line">  if [@metadata][rabbitmq_properties][timestamp] &#123;</div><div class="line">    date &#123;</div><div class="line">      match =&gt; [&quot;[@metadata][rabbitmq_properties][timestamp]&quot;, &quot;UNIX&quot;]</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>此外，任何邮件标头都将保存在[\@metadata][rabbitmq_headers]字段中。</p>
<h4 id="概要-9"><a href="#概要-9" class="headerlink" title="概要"></a>概要</h4><p>此插件支持以下配置选项：<br>所需的配置选项：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">rabbitmq &#123;</div><div class="line">    host =&gt; ...</div><div class="line">    subscription_retry_interval_seconds =&gt; ...</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>可用的配置选项：</p>
<table>
<thead>
<tr>
<th>Setting</th>
<th>Input type</th>
<th>Required</th>
<th>Default value</th>
</tr>
</thead>
<tbody>
<tr>
<td>ack</td>
<td>boolean</td>
<td>No</td>
<td>true</td>
</tr>
<tr>
<td>add_field</td>
<td>hash</td>
<td>No</td>
<td>{}</td>
</tr>
<tr>
<td>arguments</td>
<td>array</td>
<td>No</td>
<td>{}</td>
</tr>
<tr>
<td>auto_delete</td>
<td>boolean</td>
<td>No</td>
<td>false</td>
</tr>
<tr>
<td>automatic_recovery</td>
<td>boolean</td>
<td>No</td>
<td>true</td>
</tr>
<tr>
<td>codec</td>
<td>codec</td>
<td>No</td>
<td>“json”</td>
</tr>
<tr>
<td>connect_retry_interval</td>
<td>number</td>
<td>No</td>
<td>1</td>
</tr>
<tr>
<td>connection_timeout</td>
<td>number</td>
<td>No</td>
</tr>
<tr>
<td>durable</td>
<td>boolean</td>
<td>No</td>
<td>false</td>
</tr>
<tr>
<td>exchange</td>
<td>string</td>
<td>No</td>
</tr>
<tr>
<td>exclusive</td>
<td>boolean</td>
<td>No</td>
<td>false</td>
</tr>
<tr>
<td>heartbeat</td>
<td>number</td>
<td>No</td>
</tr>
<tr>
<td>host</td>
<td>string</td>
<td>Yes</td>
<td></td>
</tr>
<tr>
<td>key</td>
<td>string</td>
<td>No</td>
<td>“logstash”</td>
</tr>
<tr>
<td>metadata_enabled</td>
<td>boolean</td>
<td>No</td>
<td>false</td>
</tr>
<tr>
<td>passive</td>
<td>boolean</td>
<td>No</td>
<td>false</td>
</tr>
<tr>
<td>password</td>
<td>password</td>
<td>No</td>
<td>“guest”</td>
</tr>
<tr>
<td>port</td>
<td>number</td>
<td>No</td>
<td>5672</td>
</tr>
<tr>
<td>prefetch_count</td>
<td>number</td>
<td>No</td>
<td>256</td>
</tr>
<tr>
<td>queue</td>
<td>string</td>
<td>No</td>
<td>“”</td>
</tr>
<tr>
<td>ssl</td>
<td>boolean</td>
<td>No</td>
<td>false</td>
</tr>
<tr>
<td>subscription_retry_interval_seconds</td>
<td>number</td>
<td>Yes</td>
<td>5</td>
</tr>
<tr>
<td>tags</td>
<td>array</td>
<td>No</td>
<td></td>
</tr>
<tr>
<td>threads</td>
<td>number</td>
<td>No</td>
<td>1</td>
</tr>
<tr>
<td>type</td>
<td>string</td>
<td>No</td>
<td></td>
</tr>
<tr>
<td>user</td>
<td>string</td>
<td>No</td>
<td>“guest”</td>
</tr>
<tr>
<td>verify_ssl</td>
<td>boolean</td>
<td>No</td>
<td>false</td>
</tr>
<tr>
<td>vhost</td>
<td>string</td>
<td>No</td>
<td>“/“</td>
</tr>
</tbody>
</table>
<h4 id="细节-5"><a href="#细节-5" class="headerlink" title="细节"></a>细节</h4><p><strong>ack</strong></p>
<ul>
<li>值类型是布尔值</li>
<li>默认值为true</li>
</ul>
<p>启用消息确认。如果Logstash关闭，由Logstash获取但尚未发送到Logstash管道中的确认消息将由服务器重新排队。然而，确认将损害消息吞吐量。</p>
<p>这将只发送一个回来每个prefetch_count消息。批量工作在这里提供了性能提升。</p>
<p><strong>add_field</strong></p>
<ul>
<li>值类型是哈希</li>
<li>默认值为{}</li>
</ul>
<p>向事件添加字段</p>
<p><strong>arguments</strong></p>
<ul>
<li>值类型是数组</li>
<li>默认值为{}</li>
</ul>
<p>额外的队列参数作为数组。要使RabbitMQ队列镜像，请使用：{“x-ha-policy”=&gt;“all”}</p>
<p><strong>auto_delete</strong></p>
<ul>
<li>值类型是布尔值</li>
<li>默认值为false</li>
</ul>
<p>当最后一个消费者断开连接时，应该在代理上删除队列吗？如果希望队列保留在代理上，将消息排队等待消费者消费，则将此选项设置为false。</p>
<p><strong>automatic_recovery</strong></p>
<ul>
<li>值类型是布尔值</li>
<li>默认值为true</li>
</ul>
<p>将此设置为从断开的连接自动恢复。你几乎肯定不想覆盖这个！</p>
<p><strong>codec</strong></p>
<ul>
<li>值类型是编解码器</li>
<li>默认值为“json”</li>
</ul>
<p>用于输入数据的编解码器。输入的编解码器是用于在进入输入之前，无需一个单独的过滤器中的Logstash管道解码数据的简便方法。</p>
<p><strong>connect_retry_interval</strong></p>
<ul>
<li>值类型是数字</li>
<li>默认值为1</li>
</ul>
<p>重试连接前等待的时间（以秒为单位）</p>
<p><strong>connection_timeout</strong></p>
<ul>
<li>值类型是数字</li>
<li>此设置没有默认值。</li>
</ul>
<p>默认连接超时（以毫秒为单位）。如果没有指定超时是无限的。</p>
<p><strong>debug (DEPRECATED)</strong></p>
<ul>
<li>DEPRECATED WARNING：此配置项目已弃用，并且可能在将来的版本中不可用。</li>
<li>值类型是布尔值</li>
<li>默认值为false</li>
</ul>
<p>启用或禁用日志记录</p>
<p><strong>durable</strong></p>
<ul>
<li>值类型是布尔值</li>
<li>默认值为false</li>
</ul>
<p>这个队列是否持久？ （aka;它应该存活经纪人重新启动吗？）</p>
<p><strong>exchange</strong></p>
<ul>
<li>值类型是字符串</li>
<li>此设置没有默认值。</li>
</ul>
<p>绑定队列的交换机的名称。</p>
<p><strong>exclusive</strong></p>
<ul>
<li>值类型是布尔值</li>
<li>默认值为false</li>
</ul>
<p>队列是独占吗？独占队列只能由声明它们的连接使用，并且在关闭时会被删除（例如，由于Logstash重新启动）。</p>
<p><strong>heartbeat</strong></p>
<ul>
<li>值类型是数字</li>
<li>此设置没有默认值。</li>
</ul>
<p>心跳延迟（以秒为单位）。如果未指定，则不发送心跳</p>
<p><strong>host</strong></p>
<ul>
<li>这是必需的设置。</li>
<li>值类型是字符串</li>
<li>此设置没有默认值。</li>
</ul>
<p>RabbitMQ服务器地址</p>
<p><strong>key</strong></p>
<ul>
<li>值类型是字符串</li>
<li>默认值为“logstash”</li>
</ul>
<p>将队列绑定到交换机时使用的路由密钥。这只与直接或主题交换有关。</p>
<ul>
<li>在扇出交换上忽略路由密钥。</li>
<li>通配符在直接交换上无效。</li>
</ul>
<p><strong>metadata_enabled</strong></p>
<ul>
<li>值类型是布尔值</li>
<li>默认值为false</li>
</ul>
<p>启用@metadata中邮件标头和属性的存储。这可能会影响性能</p>
<p><strong>passive</strong></p>
<ul>
<li>值类型是布尔值</li>
<li>默认值为false</li>
</ul>
<p>如果为true，队列将被动地声明，这意味着它必须已经存在于服务器上。要使Logstash创建队列（如果需要），将此选项保留为false。如果主动声明一个已经存在的队列，该插件的队列选项（持久等）必须与现有队列的队列选项匹配。</p>
<p><strong>password</strong></p>
<ul>
<li>值类型为密码</li>
<li>默认值为“guest”</li>
</ul>
<p>RabbitMQ密码</p>
<p><strong>port</strong></p>
<ul>
<li>值类型是数字</li>
<li>默认值为5672</li>
</ul>
<p>RabbitMQ端口连接</p>
<p><strong>prefetch_count</strong></p>
<ul>
<li>值类型是数字</li>
<li>默认值为256</li>
</ul>
<p>预取计数。如果使用ack选项启用确认，请指定未确认的未确认数量</p>
<p><strong>queue</strong></p>
<ul>
<li>值类型是字符串</li>
<li>默认值为“”</li>
</ul>
<p>Logstash队列的名称将消耗事件。如果为空，将创建具有随机选择的名称的瞬时队列。</p>
<p><strong>ssl</strong></p>
<ul>
<li>值类型是布尔值</li>
<li>默认值为false</li>
</ul>
<p>启用或禁用SSL</p>
<p><strong>subscription_retry_interval_seconds</strong></p>
<ul>
<li>这是必需的设置。</li>
<li>值类型是数字</li>
<li>默认值为5</li>
</ul>
<p>重试前失败的订阅请求后等待的时间（秒）。如果服务器离开然后返回，订阅可能会失败</p>
<p><strong>tags</strong></p>
<ul>
<li>值类型是数组</li>
<li>此设置没有默认值。</li>
</ul>
<p>向您的活动添加任意数量的任意标签。</p>
<p>这可以帮助稍后处理。</p>
<p><strong>threads</strong></p>
<ul>
<li>值类型是数字</li>
<li>默认值为1</li>
</ul>
<p><strong>type</strong></p>
<ul>
<li>值类型是字符串</li>
<li>此设置没有默认值。</li>
</ul>
<p>向此输入处理的所有事件添加一个类型字段。</p>
<p>类型主要用于过滤器激活。</p>
<p>类型存储为事件本身的一部分，因此您也可以使用类型在Kibana中搜索它。</p>
<p>如果您尝试在已有一个事件的事件上设置类型（例如，当您将事件从发件人发送到索引器时），则新输入不会覆盖现有类型。发货人设置的类型即使在发送到另一个Logstash服务器时也会保持该事件的有效期。</p>
<p><strong>user</strong></p>
<ul>
<li>值类型是字符串</li>
<li>默认值为“guest”</li>
</ul>
<p>RabbitMQ用户名</p>
<p><strong>verify_ssl</strong></p>
<ul>
<li>值类型是布尔值</li>
<li>默认值为false</li>
</ul>
<p>验证SSL证书</p>
<p><strong>vhost</strong></p>
<ul>
<li>值类型是字符串</li>
<li>默认值为“/”</li>
</ul>
<p>要使用的vhost。如果你不知道这是什么，离开默认。</p>
<h3 id="redis"><a href="#redis" class="headerlink" title="redis"></a>redis</h3><h4 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h4><p>此插件支持以下配置选项：</p>
<p>所需的配置选项：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">redis &#123;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>可用的配置选项：</p>
<table>
<thead>
<tr>
<th>Setting</th>
<th>Input type</th>
<th>Required</th>
<th>Default value</th>
</tr>
</thead>
<tbody>
<tr>
<td>add_field</td>
<td>hash</td>
<td>No</td>
<td>{}</td>
</tr>
<tr>
<td>batch_count</td>
<td>number</td>
<td>No</td>
<td>1</td>
</tr>
<tr>
<td>codec</td>
<td>codec</td>
<td>No</td>
<td>“json”</td>
</tr>
<tr>
<td>data_type</td>
<td>string, one of [“list”, “channel”, “pattern_channel”]</td>
<td>No</td>
<td></td>
</tr>
<tr>
<td>db</td>
<td>number</td>
<td>No</td>
<td>0</td>
</tr>
<tr>
<td>host</td>
<td>string</td>
<td>No</td>
<td>“127.0.0.1”</td>
</tr>
<tr>
<td>key</td>
<td>string</td>
<td>No</td>
<td></td>
</tr>
<tr>
<td>password</td>
<td>password</td>
<td>No</td>
<td></td>
</tr>
<tr>
<td>port</td>
<td>number</td>
<td>No</td>
<td>6379</td>
</tr>
<tr>
<td>tags</td>
<td>array</td>
<td>No</td>
<td></td>
</tr>
<tr>
<td>threads</td>
<td>number</td>
<td>No</td>
<td>1</td>
</tr>
<tr>
<td>timeout</td>
<td>number</td>
<td>No</td>
<td>5</td>
</tr>
<tr>
<td>type</td>
<td>string</td>
<td>No</td>
<td></td>
</tr>
</tbody>
</table>
<h4 id="详细-1"><a href="#详细-1" class="headerlink" title="详细"></a>详细</h4><p><strong>add_field</strong></p>
<ul>
<li>值类型是哈希</li>
<li>默认值为{}</li>
</ul>
<p>向事件添加字段</p>
<p><strong>batch_count</strong></p>
<ul>
<li>值类型是数字</li>
<li>默认值为1</li>
</ul>
<p>使用EVAL从Redis返回的事件数。</p>
<p><strong>codec</strong></p>
<ul>
<li>值类型是编解码器</li>
<li>默认值为“json”</li>
</ul>
<p>用于输入数据的编解码器。输入的编解码器是用于在进入输入之前，无需一个单独的过滤器中的Logstash管道解码数据的简便方法。</p>
<p><strong>data_type</strong></p>
<ul>
<li>值可以是以下任何值：list，channel，pattern_channel</li>
<li>此设置没有默认值。</li>
</ul>
<p>指定列表或通道。如果<code>redis\_type</code> 是list，那么我们将BLPOP的键。如果<code>redis\_type</code>是channel，那么我们将SUBSCRIBE给key。如果<code>redis\_type</code>是pattern_channel，那么我们将PSUBSCRIBE给键。</p>
<p><strong>db</strong></p>
<ul>
<li>值类型是数字</li>
<li>默认值为0</li>
</ul>
<p>Redis数据库号。</p>
<p><strong>host</strong></p>
<ul>
<li>值类型是字符串</li>
<li>默认值为“127.0.0.1”</li>
</ul>
<p>Redis服务器的主机名。</p>
<p><strong>key</strong></p>
<ul>
<li>值类型是字符串</li>
<li>此设置没有默认值。</li>
</ul>
<p>Redis列表或通道的名称。</p>
<p><strong>name (DEPRECATED)</strong></p>
<ul>
<li>DEPRECATED WARNING：此配置项目已弃用，并且可能在将来的版本中不可用。</li>
<li>值类型是字符串</li>
<li>默认值为“default”</li>
</ul>
<p><code>class LogStash::Inputs::Redis &lt; LogStash::Inputs::Threadable</code>名称配置用于在有多个实例的情况下进行日志记录。此功能没有实际功能，将在以后的版本中删除。</p>
<p><strong>password</strong></p>
<ul>
<li>值类型为密码</li>
<li>此设置没有默认值。</li>
</ul>
<p>要验证的密码。默认情况下没有身份验证。</p>
<p><strong>port</strong></p>
<ul>
<li>值类型是数字</li>
<li>默认值为6379</li>
</ul>
<p>要连接的端口。</p>
<p><strong>queue (DEPRECATED)</strong></p>
<ul>
<li>DEPRECATED WARNING：此配置项目已弃用，并且可能在将来的版本中不可用。</li>
<li>值类型是字符串</li>
<li>此设置没有默认值。</li>
</ul>
<p>Redis队列的名称（我们将使用BLPOP）。</p>
<p><strong>tags</strong></p>
<ul>
<li>值类型是数组</li>
<li>此设置没有默认值。</li>
</ul>
<p>向您的活动添加任意数量的任意标签。</p>
<p>这可以帮助稍后处理。</p>
<p><strong>threads</strong></p>
<ul>
<li>值类型是数字</li>
<li>默认值为1</li>
</ul>
<p><strong>Timeout</strong></p>
<ul>
<li>值类型是数字</li>
<li>默认值为5</li>
</ul>
<p>初始连接超时（以秒为单位）。</p>
<p><strong>type</strong></p>
<ul>
<li>值类型是字符串</li>
<li>此设置没有默认值。</li>
</ul>
<p>向此输入处理的所有事件添加一个类型字段。</p>
<p>类型主要用于过滤器激活。</p>
<p>类型存储为事件本身的一部分，因此您也可以使用类型在Kibana中搜索它。</p>
<p>如果您尝试在已有一个事件的事件上设置类型（例如，当您将事件从发件人发送到索引器时），则新输入不会覆盖现有类型。发货人设置的类型即使在发送到另一个Logstash服务器时也会保持该事件的有效期。</p>
<h3 id="stdin"><a href="#stdin" class="headerlink" title="stdin"></a>stdin</h3><p>从标准输入读取事件。</p>
<p>默认情况下，每个事件假定为一行。 如果要连接线，您将需要使用多行过滤器。</p>
<h4 id="概述-1"><a href="#概述-1" class="headerlink" title="概述"></a>概述</h4><p>此插件支持以下配置选项：</p>
<p>所需的配置选项：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">stdin &#123;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>可用的配置选项：</p>
<table>
<thead>
<tr>
<th>Setting</th>
<th>Input type</th>
<th>Required</th>
<th>Default value</th>
</tr>
</thead>
<tbody>
<tr>
<td>add_field</td>
<td>hash</td>
<td>No</td>
<td>{}</td>
</tr>
<tr>
<td>codec</td>
<td>codec</td>
<td>No</td>
<td>“line”</td>
</tr>
<tr>
<td>tags</td>
<td>array</td>
<td>No</td>
<td></td>
</tr>
<tr>
<td>type</td>
<td>string</td>
<td>No</td>
<td></td>
</tr>
</tbody>
</table>
<h4 id="细节-6"><a href="#细节-6" class="headerlink" title="细节"></a>细节</h4><p><strong>add_field</strong></p>
<ul>
<li>值类型是哈希</li>
<li>默认值为{}</li>
</ul>
<p>向事件添加字段</p>
<p><strong>codec</strong></p>
<ul>
<li>值类型是编解码器</li>
<li>默认值为“line”</li>
</ul>
<p>用于输入数据的编解码器。输入的编解码器是用于在进入输入之前，无需一个单独的过滤器中的Logstash管道解码数据的简便方法。</p>
<p><strong>tags</strong></p>
<ul>
<li>值类型是数组</li>
<li>此设置没有默认值。</li>
</ul>
<p>向您的活动添加任意数量的任意标签。</p>
<p>这可以帮助稍后处理。</p>
<p><strong>type</strong></p>
<ul>
<li>值类型是字符串</li>
<li>此设置没有默认值。<br>向此输入处理的所有事件添加一个类型字段。</li>
</ul>
<p>类型主要用于过滤器激活。</p>
<p>类型存储为事件本身的一部分，因此您也可以使用类型在Kibana中搜索它。</p>
<p>如果您尝试在已有一个事件的事件上设置类型（例如，当您将事件从发件人发送到索引器时），则新输入不会覆盖现有类型。发货人设置的类型即使在发送到另一个Logstash服务器时也会保持该事件的有效期。</p>
<h3 id="sqlite"><a href="#sqlite" class="headerlink" title="sqlite"></a>sqlite</h3><blockquote>
<p>这是一个社区维护的插件！ 它默认不随Logstash一起提供，但它很容易安装通过运行bin / logstash-plugin install logstash-input-sqlite。</p>
</blockquote>
<p>从sqlite数据库读取行。</p>
<p>这在您直接记录到表的情况下最有用。 任何被监视的表必须有一个单调增加的id列。</p>
<p>默认读取所有表，除了：</p>
<ul>
<li>匹配<code>sqlite_％</code>的那些 - 这些是sqlite的内部/管理表</li>
<li>since_table - 此插件用于跟踪状态。</li>
</ul>
<p>示例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">% sqlite /tmp/example.db</div><div class="line">sqlite&gt; CREATE TABLE weblogs (</div><div class="line">    id INTEGER PRIMARY KEY AUTOINCREMENT,</div><div class="line">    ip STRING,</div><div class="line">    request STRING,</div><div class="line">    response INTEGER);</div><div class="line">sqlite&gt; INSERT INTO weblogs (ip, request, response)</div><div class="line">    VALUES (&quot;1.2.3.4&quot;, &quot;/index.html&quot;, 200);</div></pre></td></tr></table></figure></p>
<p>然后用这个logstash配置：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">input &#123;</div><div class="line">  sqlite &#123;</div><div class="line">    path =&gt; &quot;/tmp/example.db&quot;</div><div class="line">    type =&gt; weblogs</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line">output &#123;</div><div class="line">  stdout &#123;</div><div class="line">    debug =&gt; true</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>输出示例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  &quot;@source&quot;      =&gt; &quot;sqlite://sadness/tmp/x.db&quot;,</div><div class="line">  &quot;@tags&quot;        =&gt; [],</div><div class="line">  &quot;@fields&quot;      =&gt; &#123;</div><div class="line">    &quot;ip&quot;       =&gt; &quot;1.2.3.4&quot;,</div><div class="line">    &quot;request&quot;  =&gt; &quot;/index.html&quot;,</div><div class="line">    &quot;response&quot; =&gt; 200</div><div class="line">  &#125;,</div><div class="line">  &quot;@timestamp&quot;   =&gt; &quot;2013-05-29T06:16:30.850Z&quot;,</div><div class="line">  &quot;@source_host&quot; =&gt; &quot;sadness&quot;,</div><div class="line">  &quot;@source_path&quot; =&gt; &quot;/tmp/x.db&quot;,</div><div class="line">  &quot;@message&quot;     =&gt; &quot;&quot;,</div><div class="line">  &quot;@type&quot;        =&gt; &quot;foo&quot;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h4 id="概要-10"><a href="#概要-10" class="headerlink" title="概要"></a>概要</h4><p>这个插件支持下列配置选项：</p>
<p>所需的配置选项：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">sqlite &#123;</div><div class="line">    path =&gt; ...</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>可用的配置选项：</p>
<table>
<thead>
<tr>
<th>Setting</th>
<th>Input type</th>
<th>Required</th>
<th>Default value</th>
</tr>
</thead>
<tbody>
<tr>
<td>add_field</td>
<td>hash</td>
<td>No</td>
<td>{}</td>
</tr>
<tr>
<td>batch</td>
<td>number</td>
<td>No</td>
<td>5</td>
</tr>
<tr>
<td>codec</td>
<td>codec</td>
<td>No</td>
<td>“plain”</td>
</tr>
<tr>
<td>exclude_tables</td>
<td>array</td>
<td>No</td>
<td>[]</td>
</tr>
<tr>
<td>path</td>
<td>string</td>
<td>Yes</td>
<td></td>
</tr>
<tr>
<td>tags</td>
<td>array</td>
<td>No</td>
<td></td>
</tr>
<tr>
<td>type</td>
<td>string</td>
<td>No</td>
<td></td>
</tr>
</tbody>
</table>
<h4 id="详情-2"><a href="#详情-2" class="headerlink" title="详情"></a>详情</h4><p><strong>add_field</strong></p>
<ul>
<li>值类型是哈希</li>
<li>默认值为{}</li>
</ul>
<p>向事件添加字段</p>
<p><strong>batch</strong></p>
<ul>
<li>值类型是数字</li>
<li>默认值为5</li>
</ul>
<p>每次SELECT调用时一次获取多少行。</p>
<p><strong>codec</strong></p>
<ul>
<li>值类型是编解码器</li>
<li>默认值为“plain”</li>
</ul>
<p>用于输入数据的编解码器。输入的编解码器是用于在进入输入之前，无需一个单独的过滤器中的Logstash管道解码数据的简便方法。</p>
<p><strong>exclude_tables</strong></p>
<ul>
<li>值类型是数组</li>
<li>默认值为[]</li>
</ul>
<p>按名称排除的任何表。默认情况下，将遵循所有表。</p>
<p><strong>path</strong></p>
<ul>
<li>这是必需的设置。</li>
<li>值类型是字符串</li>
<li>此设置没有默认值。</li>
</ul>
<p>sqlite数据库文件的路径。</p>
<p><strong>tags</strong></p>
<ul>
<li>值类型是数组</li>
<li>此设置没有默认值。</li>
</ul>
<p>向您的活动添加任意数量的任意标签。</p>
<p>这可以帮助稍后处理。</p>
<p><strong>type</strong></p>
<ul>
<li>值类型是字符串</li>
<li>此设置没有默认值。</li>
</ul>
<p>向此输入处理的所有事件添加一个类型字段。</p>
<p>类型主要用于过滤器激活。</p>
<p>类型存储为事件本身的一部分，因此您也可以使用类型在Kibana中搜索它。</p>
<p>如果您尝试在已有一个事件的事件上设置类型（例如，当您将事件从发件人发送到索引器时），则新输入不会覆盖现有类型。发货人设置的类型即使在发送到另一个Logstash服务器时也会保持该事件的有效期。</p>
<h3 id="syslog"><a href="#syslog" class="headerlink" title="syslog"></a>syslog</h3><p>通过网络将syslog消息读为事件。</p>
<p>如果你今天已经使用syslog，这个输入是一个不错的选择。 如果要从不能运行自己的日志收集器的设备和网络设备接收日志，这也是一个不错的选择。</p>
<p>当然，syslog是一个非常泥泞的术语。 此输入仅支持具有一些小修改的RFC3164 syslog。 日期格式允许为RFC3164样式或ISO8601。 否则，必须遵守RFC3164的其余部分。 如果不使用RFC3164，请不要使用此输入。</p>
<p>有关详细信息，请参阅<a href="http://www.ietf.org/rfc/rfc3164.txt" target="_blank" rel="external">RFC3164页</a>。</p>
<p>注意：此输入将在TCP和UDP上启动侦听器。</p>
<h4 id="概述-2"><a href="#概述-2" class="headerlink" title="概述"></a>概述</h4><p>这个插件支持下列配置选项：</p>
<p>所需的配置选项：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">syslog &#123;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>可用的配置选项：</p>
<table>
<thead>
<tr>
<th>Setting</th>
<th>Input type</th>
<th>Required</th>
<th>Default value</th>
</tr>
</thead>
<tbody>
<tr>
<td>add_field</td>
<td>hash</td>
<td>No</td>
<td>{}</td>
</tr>
<tr>
<td>codec</td>
<td>codec</td>
<td>No</td>
<td>“plain”</td>
</tr>
<tr>
<td>facility_labels</td>
<td>array</td>
<td>No</td>
<td>[“kernel”, “user-level”, “mail”, “system”, “security/authorization”, “syslogd”, “line printer”, “network news”, “UUCP”, “clock”, “security/authorization”, “FTP”, “NTP”, “log audit”, “log alert”, “clock”, “local0”, “local1”, “local2”, “local3”, “local4”, “local5”, “local6”, “local7”]</td>
</tr>
<tr>
<td>host</td>
<td>string</td>
<td>No</td>
<td>“0.0.0.0”</td>
</tr>
<tr>
<td>locale</td>
<td>string</td>
<td>No</td>
<td></td>
</tr>
<tr>
<td>port</td>
<td>number</td>
<td>No</td>
<td>514</td>
</tr>
<tr>
<td>severity_labels</td>
<td>array</td>
<td>No</td>
<td>[“Emergency”, “Alert”, “Critical”, “Error”, “Warning”, “Notice”, “Informational”, “Debug”]</td>
</tr>
<tr>
<td>tags</td>
<td>array</td>
<td>No</td>
<td></td>
</tr>
<tr>
<td>timezone</td>
<td>string</td>
<td>No</td>
<td></td>
</tr>
<tr>
<td>type</td>
<td>string</td>
<td>No</td>
<td></td>
</tr>
<tr>
<td>use_labels</td>
<td>boolean</td>
<td>No</td>
<td>true</td>
</tr>
</tbody>
</table>
<h4 id="详情-3"><a href="#详情-3" class="headerlink" title="详情"></a>详情</h4><p><strong>add_field</strong></p>
<ul>
<li>值类型是哈希</li>
<li>默认值为{}</li>
</ul>
<p>向事件添加字段</p>
<p><strong>codec</strong></p>
<ul>
<li>值类型是编解码器</li>
<li>默认值为“plain”</li>
</ul>
<p>用于输入数据的编解码器。输入的编解码器是用于在进入输入之前，无需一个单独的过滤器中的Logstash管道解码数据的简便方法。</p>
<p><strong>facility_labels</strong></p>
<ul>
<li>值类型是数组</li>
<li>默认值是[“内核”，“用户级”，“邮件”，“系统”，“安全/授权”，“syslogd”，“行式打印机”，“网络新闻”，“UUCP” “security / authorization”，“FTP”，“NTP”，“log audit”，“log alert”，“clock”，“local0”，“local1”，“local2”，“local3”，“local4”，“local5 “，”local6“，”local7“]</li>
</ul>
<p>设施级别的标签。这些在RFC3164中定义。</p>
<p><strong>host</strong></p>
<ul>
<li>值类型是字符串</li>
<li>默认值为“0.0.0.0”</li>
</ul>
<p>要听的地址。</p>
<p><strong>locale</strong></p>
<ul>
<li>值类型是字符串</li>
<li>此设置没有默认值。</li>
</ul>
<p>使用IETF-BCP47或POSIX语言标记指定用于日期解析的区域设置。简单示例是en，en-US for BCP47或en_US for POSIX。如果未指定，将使用平台默认值。</p>
<p>对于解析月份名称（使用MMM的模式）和工作日名称（使用EEE的模式），区域设置几乎是必需的。</p>
<p><strong>port</strong></p>
<ul>
<li>值类型是数字</li>
<li>默认值为514</li>
</ul>
<p>要监听的端口。记住小于1024的端口（特权端口）可能需要root才能使用。</p>
<p><strong>severity_labels</strong></p>
<ul>
<li>值类型是数组</li>
<li>默认值为[“Emergency”，“Alert”，“Critical”，“Error”，“Warning”，“Notice”，“Informational”，“Debug”]</li>
</ul>
<p>严重性级别的标签。这些在RFC3164中定义。</p>
<p><strong>tags</strong></p>
<ul>
<li>值类型是数组</li>
<li>此设置没有默认值。</li>
</ul>
<p>向您的活动添加任意数量的任意标签。</p>
<p>这可以帮助稍后处理。</p>
<p><strong>timezone</strong></p>
<ul>
<li>值类型是字符串</li>
<li>此设置没有默认值。</li>
</ul>
<p>指定要用于日期解析的时区标准ID。有效ID列在[Joda.org可用时区页面]（<a href="http://joda-time.sourceforge.net/timezones.html）上。这在时区无法从值中提取，而不是平台默认值的情况下非常有用。如果未指定，将使用平台默认值。标准ID是好的，因为它照顾您的夏令时例如，美洲/" target="_blank" rel="external">http://joda-time.sourceforge.net/timezones.html）上。这在时区无法从值中提取，而不是平台默认值的情况下非常有用。如果未指定，将使用平台默认值。标准ID是好的，因为它照顾您的夏令时例如，美洲/</a> Los_Angeles或欧洲/法国是有效的ID。</p>
<p><strong>type</strong></p>
<ul>
<li>值类型是字符串</li>
<li>此设置没有默认值。</li>
</ul>
<p>向此输入处理的所有事件添加一个类型字段。</p>
<p>类型主要用于过滤器激活。</p>
<p>类型存储为事件本身的一部分，因此您也可以使用类型在Kibana中搜索它。</p>
<p>如果您尝试在已有一个事件的事件上设置类型（例如，当您将事件从发件人发送到索引器时），则新输入不会覆盖现有类型。发货人设置的类型即使在发送到另一个Logstash服务器时也会保持该事件的有效期。</p>
<p><strong>use_labels</strong></p>
<ul>
<li>值类型是布尔值</li>
<li>默认值为true</li>
</ul>
<p>对严重性和设施级别使用标签解析。</p>
<h3 id="tcp"><a href="#tcp" class="headerlink" title="tcp"></a>tcp</h3><p>通过TCP套接字读取事件。</p>
<p>与标准输入和文件输入一样，每个事件假定为一行文本。</p>
<p>可以接受来自客户端的连接或连接到服务器，具体取决于模式。</p>
<h4 id="概述-3"><a href="#概述-3" class="headerlink" title="概述"></a>概述</h4><p>此插件支持以下配置选项：</p>
<p>所需的配置选项：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">tcp &#123;</div><div class="line">    port =&gt; ...</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>可用配置选项：</p>
<table>
<thead>
<tr>
<th>Setting</th>
<th>Input type</th>
<th>Required</th>
<th>Default value</th>
</tr>
</thead>
<tbody>
<tr>
<td>add_field</td>
<td>hash</td>
<td>No</td>
<td>{}</td>
</tr>
<tr>
<td>codec</td>
<td>codec</td>
<td>No</td>
<td>“line”</td>
</tr>
<tr>
<td>host</td>
<td>string</td>
<td>No</td>
<td>“0.0.0.0”</td>
</tr>
<tr>
<td>mode</td>
<td>string, one of [“server”, “client”]</td>
<td>No</td>
<td>“server”</td>
</tr>
<tr>
<td>port</td>
<td>number</td>
<td>Yes</td>
<td></td>
</tr>
<tr>
<td>ssl_cert</td>
<td>a valid filesystem path</td>
<td>No</td>
<td></td>
</tr>
<tr>
<td>ssl_enable</td>
<td>boolean</td>
<td>No</td>
<td>false</td>
</tr>
<tr>
<td>ssl_extra_chain_certs</td>
<td>array</td>
<td>No</td>
<td>[]</td>
</tr>
<tr>
<td>ssl_key</td>
<td>a valid filesystem path</td>
<td>No</td>
<td></td>
</tr>
<tr>
<td>ssl_key_passphrase</td>
<td>password</td>
<td>No</td>
<td>nil</td>
</tr>
<tr>
<td>ssl_verify</td>
<td>boolean</td>
<td>No</td>
<td>true</td>
</tr>
<tr>
<td>tags</td>
<td>array</td>
<td>No</td>
<td></td>
</tr>
<tr>
<td>type</td>
<td>string</td>
<td>No</td>
<td></td>
</tr>
</tbody>
</table>
<h4 id="详情-4"><a href="#详情-4" class="headerlink" title="详情"></a>详情</h4><p><strong>add_field</strong></p>
<ul>
<li>值类型是哈希</li>
<li>默认值为{}</li>
</ul>
<p>向事件添加字段</p>
<p><strong>codec</strong></p>
<ul>
<li>值类型是编解码器</li>
<li>默认值为“line”</li>
</ul>
<p>用于输入数据的编解码器。输入的编解码器是用于在进入输入之前，无需一个单独的过滤器中的Logstash管道解码数据的简便方法。</p>
<p><strong>data_timeout (DEPRECATED)</strong></p>
<ul>
<li>DEPRECATED WARNING：此配置项目已弃用，并且可能在将来的版本中不可用。</li>
<li>值类型是数字</li>
<li>默认值为-1</li>
</ul>
<p><strong>host</strong></p>
<ul>
<li>值类型是字符串</li>
<li>默认值为“0.0.0.0”</li>
</ul>
<p>当模式是服务器时，地址要监听。当模式为客户端时，连接的地址。</p>
<p><strong>mode</strong></p>
<ul>
<li>值可以是以下任意值：服务器，客户端</li>
<li>默认值为“server”</li>
</ul>
<p>模式操作。服务器侦听客户端连接，客户端连接到服务器。</p>
<p><strong>port</strong></p>
<ul>
<li>这是必需的设置。</li>
<li>值类型是数字</li>
<li>此设置没有默认值。</li>
</ul>
<p>当模式是服务器时，端口要监听。当模式为客户端时，连接到的端口。</p>
<p><strong>ssl_cacert (DEPRECATED)</strong></p>
<ul>
<li>DEPRECATED WARNING：此配置项目已弃用，并且可能在将来的版本中不可用。</li>
<li>值类型为路径</li>
<li>此设置没有默认值。</li>
</ul>
<p>SSL CA证书，chainfile或CA路径。将自动包括系统CA路径。</p>
<p><strong>ssl_cert</strong></p>
<ul>
<li>值类型为路径</li>
<li>此设置没有默认值。</li>
</ul>
<p>SSL证书路径</p>
<p><strong>ssl_enable</strong></p>
<ul>
<li>值类型是布尔值</li>
<li>默认值为false</li>
</ul>
<p>启用S​​SL（必须设置为使其他ssl_选项生效）。</p>
<p><strong>ssl_extra_chain_certs</strong></p>
<ul>
<li>值类型是数组</li>
<li>默认值为[]</li>
</ul>
<p>要添加到证书链的额外X509证书的数组。当系统存储中不需要CA链时很有用。</p>
<p><strong>ssl_key</strong></p>
<ul>
<li>值类型为路径</li>
<li>此设置没有默认值。</li>
</ul>
<p>SSL密钥路径</p>
<p><strong>ssl_key_passphrase</strong></p>
<ul>
<li>值类型为密码</li>
<li>默认值为nil</li>
</ul>
<p>SSL密钥密码</p>
<p><strong>ssl_verify</strong></p>
<ul>
<li>值类型是布尔值</li>
<li>默认值为true</li>
</ul>
<p>验证SSL连接的另一端与CA的身份。对于输入，将字段sslsubject设置为客户端证书的字段。</p>
<p><strong>tags</strong></p>
<ul>
<li>值类型是数组</li>
<li>此设置没有默认值。</li>
</ul>
<p>向您的活动添加任意数量的任意标签。</p>
<p>这可以帮助稍后处理。</p>
<p><strong>type</strong><br>值类型是字符串<br>此设置没有默认值。<br>向此输入处理的所有事件添加一个类型字段。</p>
<p>类型主要用于过滤器激活。</p>
<p>类型存储为事件本身的一部分，因此您也可以使用类型在Kibana中搜索它。</p>
<p>如果您尝试在已有一个事件的事件上设置类型（例如，当您将事件从发件人发送到索引器时），则新输入不会覆盖现有类型。发货人设置的类型即使在发送到另一个Logstash服务器时也会保持该事件的有效期。</p>
<h3 id="unix"><a href="#unix" class="headerlink" title="unix"></a>unix</h3><blockquote>
<p>这是一个社区维护的插件！</p>
</blockquote>
<p>通过UNIX套接字读取事件。</p>
<p>与标准输入和文件输入一样，每个事件假定为一行文本。</p>
<p>可以接受来自客户端的连接或连接到服务器，具体取决于模式。</p>
<h4 id="概述-4"><a href="#概述-4" class="headerlink" title="概述"></a>概述</h4><p>此插件支持以下配置选项：</p>
<p>所需的配置选项：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">unix &#123;</div><div class="line">    path =&gt; ...</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>可用配置选项：</p>
<table>
<thead>
<tr>
<th>Setting</th>
<th>Input type</th>
<th>Required</th>
<th>Default value</th>
</tr>
</thead>
<tbody>
<tr>
<td>add_field</td>
<td>hash</td>
<td>No</td>
<td>{}</td>
</tr>
<tr>
<td>codec</td>
<td>codec</td>
<td>No</td>
<td>“line”</td>
</tr>
<tr>
<td>data_timeout</td>
<td>number</td>
<td>No</td>
<td>-1</td>
</tr>
<tr>
<td>force_unlink</td>
<td>boolean</td>
<td>No</td>
<td>false</td>
</tr>
<tr>
<td>mode</td>
<td>string, one of [“server”, “client”]</td>
<td>No</td>
<td>“server”</td>
</tr>
<tr>
<td>path</td>
<td>string</td>
<td>Yes</td>
<td></td>
</tr>
<tr>
<td>tags</td>
<td>array</td>
<td>No</td>
<td></td>
</tr>
<tr>
<td>type</td>
<td>string</td>
<td>No</td>
<td></td>
</tr>
</tbody>
</table>
<h4 id="详情-5"><a href="#详情-5" class="headerlink" title="详情"></a>详情</h4><p><strong>add_field</strong></p>
<ul>
<li>值类型是哈希</li>
<li>默认值为{}</li>
</ul>
<p>向事件添加字段</p>
<p><strong>codec</strong></p>
<ul>
<li>值类型是编解码器</li>
<li>默认值为“line”</li>
</ul>
<p>用于输入数据的编解码器。输入的编解码器是用于在进入输入之前，无需一个单独的过滤器中的Logstash管道解码数据的简便方法。</p>
<p><strong>data_timeout</strong></p>
<ul>
<li>值类型是数字</li>
<li>默认值为-1</li>
</ul>
<p>读取超时（以秒为单位）。如果特定连接空闲超过此超时时间，我们将假定它已经死了并关闭它。</p>
<p>如果你不想超时，请使用-1。</p>
<p><strong>force_unlink</strong></p>
<ul>
<li>值类型是布尔值</li>
<li>默认值为false</li>
</ul>
<p>在EADDRINUSE故障的情况下删除套接字文件</p>
<p><strong>mode</strong></p>
<ul>
<li>值可以是以下任意值：服务器，客户端</li>
<li>默认值为“server”</li>
</ul>
<p>模式操作。服务器侦听客户端连接，客户端连接到服务器。</p>
<p><strong>path</strong></p>
<ul>
<li>这是必需的设置。</li>
<li>值类型是字符串</li>
<li>此设置没有默认值。</li>
</ul>
<p>当模式是服务器时，要监听的路径。当模式为客户端时，连接到的路径。</p>
<p><strong>tags</strong></p>
<ul>
<li>值类型是数组</li>
<li>此设置没有默认值。</li>
</ul>
<p>向您的活动添加任意数量的任意标签。</p>
<p>这可以帮助稍后处理。</p>
<p><strong>type</strong></p>
<ul>
<li>值类型是字符串</li>
<li>此设置没有默认值。</li>
</ul>
<p>向此输入处理的所有事件添加一个类型字段。</p>
<p>类型主要用于过滤器激活。</p>
<p>类型存储为事件本身的一部分，因此您也可以使用类型在Kibana中搜索它。</p>
<p>如果您尝试在已有一个事件的事件上设置类型（例如，当您将事件从发件人发送到索引器时），则新输入不会覆盖现有类型。发货人设置的类型即使在发送到另一个Logstash服务器时也会保持该事件的有效期。</p>
<h3 id="udp"><a href="#udp" class="headerlink" title="udp"></a>udp</h3><p>通过udp将消息作为事件读取。 唯一需要的配置项是port，它指定logstash将侦听事件流的udp端口。</p>
<h4 id="概述-5"><a href="#概述-5" class="headerlink" title="概述"></a>概述</h4><p>这个插件支持下列配置选项：</p>
<p>所需的配置选项：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">udp &#123;</div><div class="line">    port =&gt; ...</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>可用的配置选项:</p>
<table>
<thead>
<tr>
<th>Setting</th>
<th>Input type</th>
<th>Required</th>
<th>Default value</th>
</tr>
</thead>
<tbody>
<tr>
<td>add_field</td>
<td>hash</td>
<td>No</td>
<td>{}</td>
</tr>
<tr>
<td>buffer_size</td>
<td>number</td>
<td>No</td>
<td>8192</td>
</tr>
<tr>
<td>codec</td>
<td>codec</td>
<td>No</td>
<td>“plain”</td>
</tr>
<tr>
<td>host</td>
<td>string</td>
<td>No</td>
<td>“0.0.0.0”</td>
</tr>
<tr>
<td>port</td>
<td>number</td>
<td>Yes</td>
<td></td>
</tr>
<tr>
<td>queue_size</td>
<td>number</td>
<td>No</td>
<td>2000</td>
</tr>
<tr>
<td>tags</td>
<td>array</td>
<td>No</td>
<td></td>
</tr>
<tr>
<td>type</td>
<td>string</td>
<td>No</td>
<td></td>
</tr>
<tr>
<td>workers</td>
<td>number</td>
<td>No</td>
<td>2</td>
</tr>
</tbody>
</table>
<h4 id="详情-6"><a href="#详情-6" class="headerlink" title="详情"></a>详情</h4><p><strong>add_field</strong></p>
<ul>
<li>值类型是哈希</li>
<li>默认值为{}</li>
</ul>
<p>向事件添加字段</p>
<p><strong>buffer_size</strong></p>
<ul>
<li>值类型是数字</li>
<li>默认值为8192</li>
</ul>
<p>要从网络读取的最大数据包大小</p>
<p><strong>codec</strong></p>
<ul>
<li>值类型是编解码器</li>
<li>默认值为“plain”</li>
</ul>
<p>用于输入数据的编解码器。输入的编解码器是用于在进入输入之前，无需一个单独的过滤器中的Logstash管道解码数据的简便方法。</p>
<p><strong>host</strong></p>
<ul>
<li>值类型是字符串</li>
<li>默认值为“0.0.0.0”</li>
</ul>
<p>logstash将侦听的地址。</p>
<p><strong>port</strong></p>
<ul>
<li>这是必需的设置。</li>
<li>值类型是数字</li>
<li>此设置没有默认值。</li>
</ul>
<p>logstash将侦听的端口。记住小于1024的端口（特权端口）可能需要root或提升权限才能使用。</p>
<p><strong>queue_size</strong></p>
<ul>
<li>值类型是数字</li>
<li>默认值为2000</li>
</ul>
<p>这是在数据包开始丢弃之前可以在内存中保存的未处理UDP数据包的数量。</p>
<p><strong>tags</strong></p>
<ul>
<li>值类型是数组</li>
<li>此设置没有默认值。</li>
</ul>
<p>向您的活动添加任意数量的任意标签。</p>
<p>这可以帮助稍后处理。</p>
<p><strong>type</strong></p>
<ul>
<li>值类型是字符串</li>
<li>此设置没有默认值。</li>
</ul>
<p>向此输入处理的所有事件添加一个类型字段。</p>
<p>类型主要用于过滤器激活。</p>
<p>类型存储为事件本身的一部分，因此您也可以使用类型在Kibana中搜索它。</p>
<p>如果您尝试在已有一个事件的事件上设置类型（例如，当您将事件从发件人发送到索引器时），则新输入不会覆盖现有类型。发货人设置的类型即使在发送到另一个Logstash服务器时也会保持该事件的有效期。</p>
<p><strong>workers</strong></p>
<ul>
<li>值类型是数字</li>
<li>默认值为2</li>
</ul>
<p>处理数据包的线程数</p>
<h3 id="varnishlog"><a href="#varnishlog" class="headerlink" title="varnishlog"></a>varnishlog</h3><blockquote>
<p>这是一个社区维护的插件！ 它默认不随Logstash一起提供，但它很容易安装通过运行bin / logstash-plugin install logstash-input-varnishlog。</p>
</blockquote>
<p>从varnish缓存的共享内存日志中读取</p>
<h4 id="概述-6"><a href="#概述-6" class="headerlink" title="概述"></a>概述</h4><p>这个插件支持下列配置选项：</p>
<p>所需的配置选项：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">varnishlog &#123;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>可用的配置选项：</p>
<table>
<thead>
<tr>
<th>Setting</th>
<th>Input type</th>
<th>Required</th>
<th>Default value</th>
</tr>
</thead>
<tbody>
<tr>
<td>add_field</td>
<td>hash</td>
<td>No</td>
<td>{}</td>
</tr>
<tr>
<td>codec</td>
<td>codec</td>
<td>No</td>
<td>“plain”</td>
</tr>
<tr>
<td>tags</td>
<td>array</td>
<td>No</td>
<td></td>
</tr>
<tr>
<td>threads</td>
<td>number</td>
<td>No</td>
<td>1</td>
</tr>
<tr>
<td>type</td>
<td>string</td>
<td>No</td>
<td></td>
</tr>
</tbody>
</table>
<h4 id="详情-7"><a href="#详情-7" class="headerlink" title="详情"></a>详情</h4><p><strong>add_field</strong></p>
<ul>
<li>值类型是哈希</li>
<li>默认值为{}</li>
</ul>
<p>向事件添加字段</p>
<p><strong>codec</strong></p>
<ul>
<li>值类型是编解码器</li>
<li>默认值为“plain”</li>
</ul>
<p>用于输入数据的编解码器。输入的编解码器是用于在进入输入之前，无需一个单独的过滤器中的Logstash管道解码数据的简便方法。</p>
<p><strong>tags</strong></p>
<ul>
<li>值类型是数组</li>
<li>此设置没有默认值。</li>
</ul>
<p>向您的活动添加任意数量的任意标签。</p>
<p>这可以帮助稍后处理。</p>
<p><strong>threads</strong></p>
<ul>
<li>值类型是数字</li>
<li>默认值为1</li>
</ul>
<p><strong>type</strong></p>
<ul>
<li>值类型是字符串</li>
<li>此设置没有默认值。</li>
</ul>
<p>向此输入处理的所有事件添加一个类型字段。</p>
<p>类型主要用于过滤器激活。</p>
<p>类型存储为事件本身的一部分，因此您也可以使用类型在Kibana中搜索它。</p>
<p>如果您尝试在已有一个事件的事件上设置类型（例如，当您将事件从发件人发送到索引器时），则新输入不会覆盖现有类型。发货人设置的类型即使在发送到另一个Logstash服务器时也会保持该事件的有效期。</p>
<h3 id="websocket"><a href="#websocket" class="headerlink" title="websocket"></a>websocket</h3><blockquote>
<p>这是一个社区维护的插件！ 它默认不随Logstash一起提供，但它很容易安装通过运行bin / logstash-plugin install logstash-input-websocket。</p>
</blockquote>
<p>通过websocket协议读取事件。</p>
<h4 id="概述-7"><a href="#概述-7" class="headerlink" title="概述"></a>概述</h4><p>这个插件支持下列配置选项：</p>
<p>所需的配置选项：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">websocket &#123;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>可用的配置选项：</p>
<table>
<thead>
<tr>
<th>Setting</th>
<th>Input type</th>
<th>Required</th>
<th>Default value</th>
</tr>
</thead>
<tbody>
<tr>
<td>add_field</td>
<td>hash</td>
<td>No</td>
<td>{}</td>
</tr>
<tr>
<td>codec</td>
<td>codec</td>
<td>No</td>
<td>“json”</td>
</tr>
<tr>
<td>mode</td>
<td>string, one of [“server”, “client”]</td>
<td>No</td>
<td>“client”</td>
</tr>
<tr>
<td>tags</td>
<td>array</td>
<td>No</td>
<td></td>
</tr>
<tr>
<td>type</td>
<td>string</td>
<td>No</td>
<td></td>
</tr>
<tr>
<td>url</td>
<td>string</td>
<td>No</td>
<td>“0.0.0.0”</td>
</tr>
</tbody>
</table>
<h4 id="详情-8"><a href="#详情-8" class="headerlink" title="详情"></a>详情</h4><p><strong>add_field</strong></p>
<ul>
<li>值类型是哈希</li>
<li>默认值为{}</li>
</ul>
<p>向事件添加字段</p>
<p><strong>codec</strong></p>
<ul>
<li>值类型是编解码器</li>
<li>默认值为“json”</li>
</ul>
<p>用于输入数据的编解码器。输入的编解码器是用于在进入输入之前，无需一个单独的过滤器中的Logstash管道解码数据的简便方法。</p>
<p><strong>mode</strong></p>
<ul>
<li>值可以是以下任意值：server, client</li>
<li>默认值为“client”</li>
</ul>
<p>作为客户端或服务器运行。</p>
<p>客户端模式导致此插件作为websocket客户端连接到给定的URL。它期望接收事件作为websocket消息。</p>
<p>（NOT IMPLEMENTED YET）服务器模式导致此插件侦听websocket客户端的给定URL。它期望从这些客户端接收作为websocket消息的事件。</p>
<p><strong>tags</strong></p>
<ul>
<li>值类型是数组</li>
<li>此设置没有默认值。</li>
</ul>
<p>向您的活动添加任意数量的任意标签。</p>
<p>这可以帮助稍后处理。</p>
<p><strong>type</strong></p>
<ul>
<li>值类型是字符串</li>
<li>此设置没有默认值。</li>
</ul>
<p>向此输入处理的所有事件添加一个类型字段。</p>
<p>类型主要用于过滤器激活。</p>
<p>类型存储为事件本身的一部分，因此您也可以使用类型在Kibana中搜索它。</p>
<p>如果您尝试在已有一个事件的事件上设置类型（例如，当您将事件从发件人发送到索引器时），则新输入不会覆盖现有类型。发货人设置的类型即使在发送到另一个Logstash服务器时也会保持该事件的有效期。</p>
<p><strong>url</strong></p>
<ul>
<li>值类型是字符串</li>
<li>默认值为“0.0.0.0”</li>
</ul>
<p>连接到或服务于的网址</p>
]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;性能故障排除指南&lt;/li&gt;
&lt;li&gt;使用插件&lt;/li&gt;
&lt;li&gt;输入插件&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="Logstash" scheme="https://weizhimiao.github.io/categories/Logstash/"/>
    
    
      <category term="Logstash" scheme="https://weizhimiao.github.io/tags/Logstash/"/>
    
  </entry>
  
  <entry>
    <title>Logstash学习四</title>
    <link href="https://weizhimiao.github.io/2016/10/25/Logstash%E5%AD%A6%E4%B9%A0%E5%9B%9B/"/>
    <id>https://weizhimiao.github.io/2016/10/25/Logstash学习四/</id>
    <published>2016-10-25T12:30:00.000Z</published>
    <updated>2016-10-26T02:56:15.000Z</updated>
    
    <content type="html"><![CDATA[<ul>
<li>输出插件</li>
</ul>
<a id="more"></a>
<h2 id="输出插件"><a href="#输出插件" class="headerlink" title="输出插件"></a>输出插件</h2><p>输出插件将事件数据发送到特定目标。 输出是事件管道中的最后一个阶段。</p>
<p>以下输出插件可用：</p>
<p><strong>boundary</strong></p>
<blockquote>
<p>基于Logstash事件将注释发送到Boundary</p>
</blockquote>
<p><a href="https://github.com/logstash-plugins/logstash-output-boundary" target="_blank" rel="external">logstash-output-boundary</a></p>
<p><strong>circonus</strong></p>
<blockquote>
<p>基于Logstash事件向Circonus发送注释</p>
</blockquote>
<p><a href="https://github.com/logstash-plugins/logstash-output-circonus" target="_blank" rel="external">logstash-output-circonus</a></p>
<p><strong>csv</strong></p>
<blockquote>
<p>以分隔格式将事件写入磁盘</p>
</blockquote>
<p><a href="https://github.com/logstash-plugins/logstash-output-csv" target="_blank" rel="external">logstash-output-csv</a></p>
<p><strong>cloudwatch</strong></p>
<blockquote>
<p>聚合并将度量标准数据发送到AWS CloudWatch</p>
</blockquote>
<p><a href="https://github.com/logstash-plugins/logstash-output-cloudwatch" target="_blank" rel="external">logstash-output-cloudwatch</a></p>
<p><strong>datadog</strong></p>
<blockquote>
<p>基于Logstash事件将事件发送到DataDogHQ</p>
</blockquote>
<p><a href="https://github.com/logstash-plugins/logstash-output-datadog" target="_blank" rel="external">logstash-output-datadog</a></p>
<p><strong>datadog_metrics</strong></p>
<blockquote>
<p>基于Logstash事件将度量标准发送到DataDogHQ</p>
</blockquote>
<p><a href="https://github.com/logstash-plugins/logstash-output-datadog_metrics" target="_blank" rel="external">logstash-output-datadog_metrics</a></p>
<p><strong>email</strong></p>
<blockquote>
<p>收到输出时将电子邮件发送到指定的地址</p>
</blockquote>
<p><a href="https://github.com/logstash-plugins/logstash-output-email" target="_blank" rel="external">logstash-output-email</a></p>
<p><strong>elasticsearch</strong></p>
<blockquote>
<p>将日志存储在Elasticsearch中</p>
</blockquote>
<p><a href="https://github.com/logstash-plugins/logstash-output-elasticsearch" target="_blank" rel="external">logstash-output-elasticsearch</a></p>
<p><strong>elasticsearch_java</strong></p>
<blockquote>
<p>使用节点和传输协议将日志存储在Elasticsearch中</p>
</blockquote>
<p><a href="https://github.com/logstash-plugins/logstash-output-elasticsearch_java" target="_blank" rel="external">logstash-output-elasticsearch_java</a></p>
<p><strong>exec</strong></p>
<blockquote>
<p>为匹配的事件运行命令</p>
</blockquote>
<p><a href="https://github.com/logstash-plugins/logstash-output-exec" target="_blank" rel="external">logstash-output-exec</a></p>
<p><strong>file</strong></p>
<blockquote>
<p>将事件写入磁盘上的文件</p>
</blockquote>
<p><a href="https://github.com/logstash-plugins/logstash-output-file" target="_blank" rel="external">logstash-output-file</a></p>
<p><strong>google_bigquery</strong></p>
<blockquote>
<p>将事件写入Google BigQuery</p>
</blockquote>
<p><a href="https://github.com/logstash-plugins/logstash-output-google_bigquery" target="_blank" rel="external">logstash-output-google_bigquery</a></p>
<p><strong>google_cloud_storage</strong></p>
<blockquote>
<p>将活动写入Google云端存储</p>
</blockquote>
<p><a href="https://github.com/logstash-plugins/logstash-output-google_cloud_storage" target="_blank" rel="external">logstash-output-google_cloud_storage</a></p>
<p><strong>ganglia</strong></p>
<blockquote>
<p>写指标到Ganglia的gmond</p>
</blockquote>
<p><a href="https://github.com/logstash-plugins/logstash-output-ganglia" target="_blank" rel="external">logstash-output-ganglia</a></p>
<p><strong>gelf</strong></p>
<blockquote>
<p>为Graylog2生成GELF格式化输出</p>
</blockquote>
<p><a href="https://github.com/logstash-plugins/logstash-output-gelf" target="_blank" rel="external">logstash-output-gelf</a></p>
<p><strong>graphtastic</strong></p>
<blockquote>
<p>在Windows上发送度量标准数据</p>
</blockquote>
<p><a href="https://github.com/logstash-plugins/logstash-output-graphtastic" target="_blank" rel="external">logstash-output-graphtastic</a></p>
<p><strong>graphite</strong></p>
<blockquote>
<p>向Graphite写入指标</p>
</blockquote>
<p><a href="https://github.com/logstash-plugins/logstash-output-graphite" target="_blank" rel="external">logstash-output-graphite</a></p>
<p><strong>hipchat</strong></p>
<blockquote>
<p>将事件写入HipChat</p>
</blockquote>
<p><a href="https://github.com/logstash-plugins/logstash-output-hipchat" target="_blank" rel="external">logstash-output-hipchat</a></p>
<p><strong>http</strong></p>
<blockquote>
<p>将事件发送到通用HTTP或HTTPS端点</p>
</blockquote>
<p><a href="https://github.com/logstash-plugins/logstash-output-http" target="_blank" rel="external">logstash-output-http</a></p>
<p><strong>irc</strong></p>
<blockquote>
<p>将事件写入IRC</p>
</blockquote>
<p><a href="https://github.com/logstash-plugins/logstash-output-irc" target="_blank" rel="external">logstash-output-irc</a></p>
<p><strong>influxdb</strong></p>
<blockquote>
<p>将指标写入InfluxDB</p>
</blockquote>
<p><a href="https://github.com/logstash-plugins/logstash-output-influxdb" target="_blank" rel="external">logstash-output-influxdb</a></p>
<p><strong>juggernaut</strong></p>
<blockquote>
<p>将消息推送到Juggernaut websockets服务器</p>
</blockquote>
<p><a href="https://github.com/logstash-plugins/logstash-output-juggernaut" target="_blank" rel="external">logstash-output-juggernaut</a></p>
<p><strong>jira</strong></p>
<blockquote>
<p>将结构化JSON事件写入JIRA</p>
</blockquote>
<p><a href="https://github.com/logstash-plugins/logstash-output-jira" target="_blank" rel="external">logstash-output-jira</a></p>
<p><strong>kafka</strong></p>
<p>将事件写入Kafka</p>
<p><a href="https://github.com/logstash-plugins/logstash-output-kafka" target="_blank" rel="external">logstash-output-kafka</a></p>
<p><strong>lumberjack</strong></p>
<blockquote>
<p>使用lumberjack协议发送事件</p>
</blockquote>
<p><a href="https://github.com/logstash-plugins/logstash-output-lumberjack" target="_blank" rel="external">logstash-output-lumberjack</a></p>
<p><strong>librato</strong></p>
<blockquote>
<p>基于Logstash事件向Librato发送度量，注释和警报</p>
</blockquote>
<p><a href="https://github.com/logstash-plugins/logstash-output-librato" target="_blank" rel="external">logstash-output-librato</a></p>
<p><strong>loggly</strong></p>
<blockquote>
<p>将日志发送到Loggly</p>
</blockquote>
<p><a href="https://github.com/logstash-plugins/logstash-output-loggly" target="_blank" rel="external">logstash-output-loggly</a></p>
<p><strong>mongodb</strong></p>
<blockquote>
<p>将事件写入MongoDB</p>
</blockquote>
<p><a href="https://github.com/logstash-plugins/logstash-output-mongodb" target="_blank" rel="external">logstash-output-mongodb</a></p>
<p><strong>metriccatcher</strong></p>
<blockquote>
<p>将指标写入MetricCatcher</p>
</blockquote>
<p><a href="https://github.com/logstash-plugins/logstash-output-metriccatcher" target="_blank" rel="external">logstash-output-metriccatcher</a></p>
<p><strong>nagios</strong></p>
<blockquote>
<p>将被动检查结果发送到Nagios</p>
</blockquote>
<p><a href="https://github.com/logstash-plugins/logstash-output-nagios" target="_blank" rel="external">logstash-output-nagios</a></p>
<p><strong>nagios_nsca</strong></p>
<blockquote>
<p>使用NSCA协议将被动检查结果发送到Nagios</p>
</blockquote>
<p><a href="https://github.com/logstash-plugins/logstash-output-nagios_nsca" target="_blank" rel="external">logstash-output-nagios_nsca</a></p>
<p><strong>null</strong></p>
<blockquote>
<p>用于测试的null输出</p>
</blockquote>
<p><a href="https://github.com/logstash-plugins/logstash-output-null" target="_blank" rel="external">logstash-output-null</a></p>
<p><strong>opentsdb</strong></p>
<blockquote>
<p>将指标写入OpenTSDB</p>
</blockquote>
<p><a href="https://github.com/logstash-plugins/logstash-output-opentsdb" target="_blank" rel="external">logstash-output-opentsdb</a></p>
<p><strong>pagerduty</strong></p>
<blockquote>
<p>根据预配置的服务和上报策略发送通知</p>
</blockquote>
<p><a href="https://github.com/logstash-plugins/logstash-output-pagerduty" target="_blank" rel="external">logstash-output-pagerduty</a></p>
<p><strong>pipe</strong></p>
<blockquote>
<p>将事件管道传送到另一个程序的标准输入</p>
</blockquote>
<p><a href="https://github.com/logstash-plugins/logstash-output-pipe" target="_blank" rel="external">logstash-output-pipe</a></p>
<p><strong>riemann</strong></p>
<blockquote>
<p>向Riemann发送指标</p>
</blockquote>
<p><a href="https://github.com/logstash-plugins/logstash-output-riemann" target="_blank" rel="external">logstash-output-riemann</a></p>
<p><strong>redmine</strong></p>
<blockquote>
<p>使用Redmine API创建票证</p>
</blockquote>
<p><a href="https://github.com/logstash-plugins/logstash-output-redmine" target="_blank" rel="external">logstash-output-redmine</a></p>
<p><strong>rackspace</strong></p>
<blockquote>
<p>将事件发送到Rackspace云队列服务</p>
</blockquote>
<p><a href="https://github.com/logstash-plugins/logstash-output-rackspace" target="_blank" rel="external">logstash-output-rackspace</a></p>
<p><strong>rabbitmq</strong></p>
<blockquote>
<p>将事件推送到RabbitMQ</p>
</blockquote>
<p><a href="https://github.com/logstash-plugins/logstash-output-rabbitmq" target="_blank" rel="external">logstash-output-rabbitmq</a></p>
<p><strong>redis</strong></p>
<blockquote>
<p>使用RPUSH命令将事件发送到Redis队列</p>
</blockquote>
<p><a href="https://github.com/logstash-plugins/logstash-output-redis" target="_blank" rel="external">logstash-output-redis</a></p>
<p><strong>riak</strong></p>
<blockquote>
<p>将事件写入Riak分布式键/值存储</p>
</blockquote>
<p><a href="https://github.com/logstash-plugins/logstash-output-riak" target="_blank" rel="external">logstash-output-riak</a></p>
<p><strong>s3</strong></p>
<blockquote>
<p>将Logstash事件发送到Amazon Simple Storage Service</p>
</blockquote>
<p><a href="https://github.com/logstash-plugins/logstash-output-s3" target="_blank" rel="external">logstash-output-s3</a></p>
<p><strong>sqs</strong></p>
<blockquote>
<p>将事件推送到Amazon Web服务简单队列Serice队列</p>
</blockquote>
<p><a href="https://github.com/logstash-plugins/logstash-output-sqs" target="_blank" rel="external">logstash-output-sqs</a></p>
<p><strong>stomp</strong></p>
<blockquote>
<p>使用STOMP协议写入事件</p>
</blockquote>
<p><a href="https://github.com/logstash-plugins/logstash-output-stomp" target="_blank" rel="external">logstash-output-stomp</a></p>
<p><strong>statsd</strong></p>
<blockquote>
<p>使用statsd网络守护程序发送指标</p>
</blockquote>
<p><a href="https://github.com/logstash-plugins/logstash-output-statsd" target="_blank" rel="external">logstash-output-statsd</a></p>
<p><strong>solr_http</strong></p>
<blockquote>
<p>在Solr中存储和索引日志</p>
</blockquote>
<p><a href="https://github.com/logstash-plugins/logstash-output-solr_http" target="_blank" rel="external">logstash-output-solr_http</a></p>
<p><strong>sns</strong></p>
<blockquote>
<p>将事件发送到Amazon的简单通知服务</p>
</blockquote>
<p><a href="https://github.com/logstash-plugins/logstash-output-sns" target="_blank" rel="external">logstash-output-sns</a></p>
<p><strong>syslog</strong></p>
<blockquote>
<p>将事件发送到系统日志服务器</p>
</blockquote>
<p><a href="https://github.com/logstash-plugins/logstash-output-syslog" target="_blank" rel="external">logstash-output-syslog</a></p>
<p><strong>stdout</strong></p>
<blockquote>
<p>将事件打印到标准输出</p>
</blockquote>
<p><a href="https://github.com/logstash-plugins/logstash-output-stdout" target="_blank" rel="external">logstash-output-stdout</a></p>
<p><strong>tcp</strong></p>
<blockquote>
<p>通过TCP套接字写事件</p>
</blockquote>
<p><a href="https://github.com/logstash-plugins/logstash-output-tcp" target="_blank" rel="external">logstash-output-tcp</a></p>
<p><strong>udp</strong></p>
<blockquote>
<p>通过UDP发送事件</p>
</blockquote>
<p><a href="https://github.com/logstash-plugins/logstash-output-udp" target="_blank" rel="external">logstash-output-udp</a></p>
<p><strong>webhdfs</strong></p>
<blockquote>
<p>使用webhdfs REST API将Logstash事件发送到HDFS</p>
</blockquote>
<p><a href="https://github.com/logstash-plugins/logstash-output-webhdfs" target="_blank" rel="external">logstash-output-webhdfs</a></p>
<p><strong>websocket</strong></p>
<blockquote>
<p>将消息发布到websocket</p>
</blockquote>
<p><a href="https://github.com/logstash-plugins/logstash-output-websocket" target="_blank" rel="external">logstash-output-websocket</a></p>
<p><strong>xmpp</strong></p>
<blockquote>
<p>通过XMPP上传事件</p>
</blockquote>
<p><a href="https://github.com/logstash-plugins/logstash-output-xmpp" target="_blank" rel="external">logstash-output-xmpp</a></p>
<p><strong>zabbix</strong></p>
<blockquote>
<p>将事件发送到Zabbix服务器</p>
</blockquote>
<p><a href="https://github.com/logstash-plugins/logstash-output-zabbix" target="_blank" rel="external">logstash-output-zabbix</a></p>
<p><strong>zeromq</strong></p>
<blockquote>
<p>将事件写入ZeroMQ PUB套接字</p>
</blockquote>
<p><a href="https://github.com/logstash-plugins/logstash-output-zeromq" target="_blank" rel="external">logstash-output-zeromq</a></p>
<h3 id="elasticsearch"><a href="#elasticsearch" class="headerlink" title="elasticsearch"></a>elasticsearch</h3><p>此插件是在Elasticsearch中存储日志的推荐方法。 如果计划使用Kibana Web界面，您将需要使用此输出。</p>
<p>此输出仅讲HTTP协议。 HTTP是从Logstash 2.0开始与Elasticsearch交互的首选协议。 我们强烈建议在节点协议上使用HTTP有很多原因。 HTTP只是稍微减慢，但更容易管理和使用。 当使用HTTP协议时，可以升级Elasticsearch版本，而不必在锁定步骤中升级Logstash。 对于那些仍然希望使用节点或传输协议的用户，请参阅elasticsearch_java输出插件。</p>
<p>您可以在<a href="https://www.elastic.co/products/elasticsearch了解有关Elasticsearch的更多信息" target="_blank" rel="external">https://www.elastic.co/products/elasticsearch了解有关Elasticsearch的更多信息</a></p>
<h4 id="重试策略"><a href="#重试策略" class="headerlink" title="重试策略"></a>重试策略</h4><p>重试策略在2.2.0版本中发生了显着更改。 此插件使用Elasticsearch批量API来优化其导入Elasticsearch。 这些请求可能会部分或全部失败。</p>
<p>以下错误无限重试：</p>
<ul>
<li>网络错误（无法连接）</li>
<li>429（请求过多）和</li>
<li>503（服务不可用）错误</li>
</ul>
<blockquote>
<p>注意: 409异常不再重试。 如果遇到409异常，请设置更高的retry_on_conflict值。 Elasticsearch比这个插件重试这些异常更有效率。</p>
</blockquote>
<h4 id="DNS缓存"><a href="#DNS缓存" class="headerlink" title="DNS缓存"></a>DNS缓存</h4><p>此插件使用JVM来查找DNS条目，并受networkaddress.cache.ttl的值（即JVM的全局设置）的约束。</p>
<p>例如，要将DNS TTL设置为1秒，您应将LS_JAVA_OPTS环境变量设置为-Dnetwordaddress.cache.ttl = 1。</p>
<p>请记住，启用keepalive的连接将不会在keepalive有效时重新评估其DNS值。</p>
<h4 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h4><p>这个插件支持下列配置选项：</p>
<p>所需的配置选项：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">elasticsearch &#123;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>可用的配置选项：</p>
<table>
<thead>
<tr>
<th>Setting</th>
<th>Input type</th>
<th>Required</th>
<th>Default value</th>
</tr>
</thead>
<tbody>
<tr>
<td>action</td>
<td>string, one of [“index”, “delete”, “create”, “update”]</td>
<td>No</td>
<td>“index”</td>
</tr>
<tr>
<td>cacert</td>
<td>a valid filesystem path</td>
<td>No</td>
<td></td>
</tr>
<tr>
<td>codec</td>
<td>codec</td>
<td>No</td>
<td>“plain”</td>
</tr>
<tr>
<td>doc_as_upsert</td>
<td>boolean</td>
<td>No</td>
<td>false</td>
</tr>
<tr>
<td>document_id</td>
<td>string</td>
<td>No</td>
<td></td>
</tr>
<tr>
<td>document_type</td>
<td>string</td>
<td>No</td>
<td></td>
</tr>
<tr>
<td>flush_size</td>
<td>number</td>
<td>No</td>
<td>500</td>
</tr>
<tr>
<td>hosts</td>
<td>array</td>
<td>No</td>
<td>[“127.0.0.1”]</td>
</tr>
<tr>
<td>idle_flush_time</td>
<td>number</td>
<td>No</td>
<td>1</td>
</tr>
<tr>
<td>index</td>
<td>string</td>
<td>No</td>
<td>“logstash-%{+YYYY.MM.dd}”</td>
</tr>
<tr>
<td>keystore</td>
<td>a valid filesystem path</td>
<td>No</td>
<td></td>
</tr>
<tr>
<td>keystore_password</td>
<td>password</td>
<td>No</td>
<td></td>
</tr>
<tr>
<td>manage_template</td>
<td>boolean</td>
<td>No</td>
<td>true</td>
</tr>
<tr>
<td>max_retries</td>
<td>number</td>
<td>No</td>
<td>3</td>
</tr>
<tr>
<td>parent</td>
<td>string</td>
<td>No</td>
<td>nil</td>
</tr>
<tr>
<td>password</td>
<td>password</td>
<td>No</td>
<td></td>
</tr>
<tr>
<td>path</td>
<td>string</td>
<td>No</td>
<td>“/“</td>
</tr>
<tr>
<td>proxy</td>
<td>&lt;&lt;,&gt;&gt;</td>
<td>No</td>
<td></td>
</tr>
<tr>
<td>retry_max_interval</td>
<td>number</td>
<td>No</td>
<td>2</td>
</tr>
<tr>
<td>routing</td>
<td>string</td>
<td>No</td>
<td></td>
</tr>
<tr>
<td>script</td>
<td>string</td>
<td>No</td>
<td>“”</td>
</tr>
<tr>
<td>script_lang</td>
<td>string</td>
<td>No</td>
<td>“”</td>
</tr>
<tr>
<td>script_type</td>
<td>string, one of [“inline”, “indexed”, “file”]</td>
<td>No</td>
<td>[“inline”]</td>
</tr>
<tr>
<td>script_var_name</td>
<td>string</td>
<td>No</td>
<td>“event”</td>
</tr>
<tr>
<td>scripted_upsert</td>
<td>boolean</td>
<td>No</td>
<td>false</td>
</tr>
<tr>
<td>sniffing</td>
<td>boolean</td>
<td>No</td>
<td>false</td>
</tr>
<tr>
<td>sniffing_delay</td>
<td>number</td>
<td>No</td>
<td>5</td>
</tr>
<tr>
<td>ssl</td>
<td>boolean</td>
<td>No</td>
<td></td>
</tr>
<tr>
<td>ssl_certificate_verification</td>
<td>boolean</td>
<td>No</td>
<td>true</td>
</tr>
<tr>
<td>template</td>
<td>a valid filesystem path</td>
<td>No</td>
</tr>
<tr>
<td>template_name</td>
<td>string</td>
<td>No</td>
<td>“logstash”</td>
</tr>
<tr>
<td>template_overwrite</td>
<td>boolean</td>
<td>No</td>
<td>false</td>
</tr>
<tr>
<td>timeout</td>
<td>number</td>
<td>No</td>
<td></td>
</tr>
<tr>
<td>truststore</td>
<td>a valid filesystem path</td>
<td>No</td>
<td></td>
</tr>
<tr>
<td>truststore_password</td>
<td>password</td>
<td>No</td>
<td></td>
</tr>
<tr>
<td>upsert</td>
<td>string</td>
<td>No</td>
<td>“”</td>
</tr>
<tr>
<td>user</td>
<td>string</td>
<td>No</td>
<td></td>
</tr>
<tr>
<td>workers</td>
<td>number</td>
<td>No</td>
<td>1</td>
</tr>
</tbody>
</table>
<h4 id="详情"><a href="#详情" class="headerlink" title="详情"></a>详情</h4><p><strong>action</strong></p>
<ul>
<li>值可以是以下任何值：index，delete，create，update</li>
<li>默认值为“index”</li>
</ul>
<p>要执行的Elasticsearch操作。有效操作是：</p>
<ul>
<li>index：索引文档（来自Logstash的事件）。</li>
<li>delete：按id删除文档（此操作需要id）</li>
<li>create：索引文档，如果该id的文档已经存在于索引中，则失败。</li>
<li>update：按id更新文档。更新有一个特殊情况，你可以upsert - 更新文档，如果还没有。请参见upsert选项</li>
<li>基于事件内容更改操作的sprintf样式字符串。值％{[foo]}将使用foo字段作为操作</li>
</ul>
<p>有关操作的更多详细信息，请参阅<a href="http://www.elastic.co/guide/en/elasticsearch/reference/current/docs-bulk.html" target="_blank" rel="external">Elasticsearch批量API文档</a></p>
<p><strong>cacert</strong></p>
<ul>
<li>值类型为路径</li>
<li>此设置没有默认值。</li>
</ul>
<p>.cer或.pem文件以验证服务器的证书</p>
<p><strong>codec</strong></p>
<ul>
<li>值类型是编解码器</li>
<li>默认值为“plain”</li>
</ul>
<p>用于输出数据的编解码器。输出编解码器是一种方便的方法，用于在离开输出之前对数据进行编码，而无需在Logstash管道中使用单独的过滤器。</p>
<p><strong>doc_as_upsert</strong></p>
<ul>
<li>值类型是布尔值</li>
<li>默认值为false</li>
</ul>
<p>为更新模式启用doc_as_upsert。如果Elasticsearch中不存在document_id，请使用源代码创建新文档</p>
<p><strong>document_id</strong></p>
<ul>
<li>值类型是字符串</li>
<li>此设置没有默认值。</li>
</ul>
<p>索引的文档ID。用于使用相同的ID覆盖Elasticsearch中的现有条目。</p>
<p><strong>document_type</strong></p>
<ul>
<li>值类型是字符串</li>
<li>此设置没有默认值。</li>
</ul>
<p>要将事件写入的文档类型。一般来说，你应该尝试只写相似类型的事件。字符串扩展％{foo}在这里工作。除非设置document_type，否则将使用事件类型（如果存在），否则将为文档类型分配日志值</p>
<p><strong>flush_size</strong></p>
<ul>
<li>值类型是数字</li>
<li>默认值为500</li>
</ul>
<p>此插件使用批量索引API提高索引性能。在Logstashes&gt; = 2.2中，此设置定义了Logstash会创建的最大大小的批量请求。您可能希望将其增加到与管道的批量大小一致。如果您指定的数字大于管道的批处理大小，则不会生效，除非过滤器通过输出事件来增加飞动批处理的大小。</p>
<p>在Logstashes 2.1中，这个插件使用自己的内部事件缓冲区。此配置选项设置该大小。在这些较旧的logstash中，这个大小可能对堆使用有重大影响，而在2.2+以上它永远不会增加它。为了进行有效的批量API调用，我们将缓冲一定数量的事件，然后将其刷新到Elasticsearch。此设置控制在发送一批事件之前将缓冲的事件数。增加flush_size对Logstash的堆大小有影响。如果要发送大文档或将flush_size增加到更高的值，请记住也使用LS_HEAP_SIZE增加堆大小。</p>
<p><strong>hosts</strong></p>
<ul>
<li>值类型是数组</li>
<li>默认值为[“127.0.0.1”]</li>
</ul>
<p>设置远程实例的主机。如果给定一个数组，它将在hosts参数中指定的主机上负载均衡请求。请记住，http协议使用http地址（例如，9200，而不是9300）。 “127.0.0.1”[“127.0.0.1:9200”,”127.0.0.2:9200”] [“<a href="https://127.0.0.1:9200”" target="_blank" rel="external">https://127.0.0.1:9200”</a>] [“<a href="https://127.0.0.1:9200/mypath”" target="_blank" rel="external">https://127.0.0.1:9200/mypath”</a>] （如果在子路径上使用代理）重要的是从主机列表中排除专用主节点，以防止LS向主节点发送批量请求。因此，此参数应仅引用Elasticsearch中的数据或客户端节点。</p>
<p><strong>idle_flush_time</strong></p>
<ul>
<li>值类型是数字</li>
<li>默认值为1</li>
</ul>
<p>强制刷新之前自上次刷新以来的时间量。</p>
<p>此设置有助于确保缓慢的事件率不会陷入Logstash。例如，如果您的flush_size为100，并且已经收到10个事件，并且自上次刷新以来已经超过idle_flush_time秒，Logstash将自动刷新这10个事件。</p>
<p>这有助于保持快速和慢速日志流几乎实时地移动。</p>
<p><strong>index</strong></p>
<ul>
<li>值类型是字符串</li>
<li>默认值为“logstash - ％{+ YYYY.MM.dd}”</li>
</ul>
<p>将事件写入的索引。这可以是使用％{foo}语法的动态。默认值将按日划分索引，以便您可以更轻松地删除旧数据或仅搜索特定日期范围。索引不能包含大写字符。对于每周索引，建议使用ISO 8601格式，例如。 logstash - ％{+ xxxx.ww}</p>
<p><strong>keystore</strong></p>
<ul>
<li>值类型为路径</li>
<li>此设置没有默认值。</li>
</ul>
<p>用于向服务器提供证书的密钥库。它可以是.jks或.p12</p>
<p><strong>keystore_password</strong></p>
<ul>
<li>值类型为密码</li>
<li>此设置没有默认值。</li>
</ul>
<p>设置信任库密码</p>
<p><strong>manage_template</strong></p>
<ul>
<li>值类型是布尔值</li>
<li>默认值为true</li>
</ul>
<p>从Logstash 1.3开始（除非将option_template选项设置为false），如果您还没有一个集合来匹配定义的索引模式（默认为logstash - ％{+ YYYY.MM.dd），将应用Elasticsearch的默认映射模板}），减去任何变量。例如，在这种情况下，模板将应用于所有索引，从logstash- *</p>
<p>如果您有动态模板（例如，根据字段名称创建索引），则应将manage_template设置为false，并使用REST API手动上传模板。</p>
<p><strong>max_retries</strong></p>
<ul>
<li>值类型是数字</li>
<li>默认值为3</li>
</ul>
<p>＃DEPRECATED此设置不再有任何作用。它将在以后的版本中标记为过时。</p>
<p><strong>parent</strong></p>
<ul>
<li>值类型是字符串</li>
<li>默认值为nil</li>
</ul>
<p>对于子文档，相关父级的ID。这可以是使用％{foo}语法的动态。</p>
<p><strong>password</strong></p>
<ul>
<li>值类型为密码</li>
<li>此设置没有默认值。</li>
</ul>
<p>用于向安全Elasticsearch群集进行身份验证的密码</p>
<p><strong>path</strong></p>
<ul>
<li>值类型是字符串</li>
<li>默认值为“/”</li>
</ul>
<p>HTTP Elasticsearch服务器所在的路径。如果必须在代理之后运行Elasticsearch，重新映射Elasticsearch HTTP API的根路径，请使用此选项。</p>
<p><strong>proxy</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&lt;li&gt; Value type is &lt;&lt;string,string&gt;&gt;</div><div class="line">* There is no default value for this setting.</div></pre></td></tr></table></figure></p>
<p>设置转发HTTP代理的地址。可以是字符串，例如http：// localhost：123，也可以是{host：’proxy.org’port：80 scheme：’http’}形式的哈希。注意，这不是SOCKS代理，而是纯HTTP代理</p>
<p><strong>retry_max_interval</strong></p>
<ul>
<li>值类型是数字</li>
<li>默认值为2</li>
</ul>
<p>设置批量重试之间的最大间隔。</p>
<p><strong>retry_max_items (DEPRECATED)</strong></p>
<ul>
<li>DEPRECATED WARNING：此配置项目已弃用，并且可能在将来的版本中不可用。</li>
<li>值类型是数字</li>
<li>默认值为500</li>
</ul>
<p><strong>routing</strong></p>
<ul>
<li>值类型是字符串</li>
<li>此设置没有默认值。</li>
</ul>
<p>要应用于所有已处理事件的路由覆盖。这可以是使用％{foo}语法的动态。</p>
<p><strong>script</strong></p>
<ul>
<li>值类型是字符串</li>
<li>默认值为“”</li>
</ul>
<p>设置脚本更新模式的脚本名称</p>
<p><strong>script_lang</strong></p>
<ul>
<li>值类型是字符串</li>
<li>默认值为“”</li>
</ul>
<p>设置使用的脚本的语言</p>
<p><strong>script_type</strong></p>
<ul>
<li>值可以是以下任何值：inline, indexed, file</li>
<li>默认值为[“inline”]</li>
</ul>
<p>定义由“script”变量引用的脚本类型inline：“script”包含索引的内联脚本：“script”包含在elasticsearch文件中直接索引的脚本的名称：“script”包含存储在elasticseach的config目录中的脚本的名称</p>
<p><strong>script_var_name</strong></p>
<ul>
<li>值类型是字符串</li>
<li>默认值为“event”</li>
</ul>
<p>设置变量名传递给脚本（脚本更新）</p>
<p><strong>scripted_upsert</strong></p>
<ul>
<li>值类型是布尔值</li>
<li>默认值为false</li>
</ul>
<p>如果启用，脚本负责创建不存在的文档（脚本式更新）</p>
<p><strong>sniffing</strong></p>
<ul>
<li>值类型是布尔值</li>
<li>默认值为false</li>
</ul>
<p>此设置要求Elasticsearch查找所有集群节点的列表，并将它们添加到主机列表中。注意：这将返回所有节点启用HTTP（包括主节点！）。如果将此与主节点一起使用，则可能希望通过在elasticsearch.yml中将http.enabled设置为false来禁用HTTP。您可以使用sniffing选项，也可以使用hosts参数手动输入多个Elasticsearch主机。</p>
<p><strong>sniffing_delay</strong></p>
<ul>
<li>值类型是数字</li>
<li>默认值为5</li>
</ul>
<p>在嗅探尝试之间等待几秒钟</p>
<p><strong>ssl</strong></p>
<ul>
<li>值类型是布尔值</li>
<li>此设置没有默认值。</li>
</ul>
<p>启用到Elasticsearch群集的SSL / TLS安全通信。留下此未指定将使用在主机中列出的URL中指定的任何方案。如果没有指定明确的协议，将使用纯HTTP。如果在此处显式禁用SSL，则如果在主机中指定了HTTPS URL，插件将拒绝启动</p>
<p><strong>ssl_certificate_verification</strong></p>
<ul>
<li>值类型是布尔值</li>
<li>默认值为true</li>
</ul>
<p>用于验证服务器证书的选项。禁用此操作会严重危及安全性。有关禁用证书验证的详细信息，请参阅<a href="https://www.cs.utexas.edu/~shmat/shmat_ccs12.pdf" target="_blank" rel="external">https://www.cs.utexas.edu/~shmat/shmat_ccs12.pdf</a></p>
<p><strong>template</strong></p>
<ul>
<li>值类型为路径</li>
<li>此设置没有默认值。</li>
</ul>
<p>你可以在这里设置你自己的模板的路径，如果你愿意的话。如果未设置，将使用包含的模板。</p>
<p><strong>template_name</strong></p>
<ul>
<li>值类型是字符串</li>
<li>默认值为“logstash”</li>
</ul>
<p>此配置选项定义模板在Elasticsearch中的命名方式。请注意，如果您已使用模板管理功能并随后更改此设置，则需要手动修剪旧模板，例如。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">curl -XDELETE &lt;http://localhost:9200/_template/OldTemplateName?pretty&gt;</div></pre></td></tr></table></figure></p>
<p>其中OldTemplateName是以前的设置。</p>
<p><strong>template_overwrite</strong></p>
<ul>
<li>值类型是布尔值</li>
<li>默认值为false</li>
</ul>
<p>template_overwrite选项将始终使用模板或包含的模板指示的模板覆盖Elasticsearch中指示的模板。默认情况下，此选项设置为false。如果你总是想保持最新的Logstash提供的模板，这个选项可能对你非常有用。同样，如果你有自己的模板文件由puppet管理，例如，你想要能够定期更新，这个选项也可以帮助那里。</p>
<p>请注意，如果您使用自己的自定义版本的Logstash模板（logstash），将其设置为true将使Logstash覆盖“logstash”模板（即删除所有自定义设置）</p>
<p><strong>timeout</strong></p>
<ul>
<li>值类型是数字</li>
<li>此设置没有默认值。</li>
</ul>
<p>设置发送Elasticsearch的网络操作和请求的超时。如果发生超时，将重试请求。</p>
<p><strong>truststore</strong></p>
<ul>
<li>值类型为路径</li>
<li>此设置没有默认值。</li>
</ul>
<p>JKS信任库以验证服务器的证书。使用：truststore或：cacert</p>
<p><strong>truststore_password</strong></p>
<ul>
<li>值类型为密码</li>
<li>此设置没有默认值。</li>
</ul>
<p>设置信任库密码</p>
<p><strong>upsert</strong></p>
<ul>
<li>值类型是字符串</li>
<li>默认值为“”</li>
</ul>
<p>设置更新模式的内容。使用此参数创建一个新文档作为json字符串（如果document_id不存在）</p>
<p><strong>user</strong></p>
<ul>
<li>值类型是字符串</li>
<li>此设置没有默认值。</li>
</ul>
<p>用于向安全Elasticsearch集群进行身份验证的用户名</p>
<p><strong>workers</strong></p>
<ul>
<li>值类型是数字</li>
<li>默认值为1</li>
</ul>
<p>用于此输出的工人数。请注意，此设置可能不适用于所有输出。</p>
<h3 id="exec"><a href="#exec" class="headerlink" title="exec"></a>exec</h3><p>此输出将运行任何匹配的事件的命令。例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">output &#123;</div><div class="line">  exec &#123;</div><div class="line">    type =&gt; abuse</div><div class="line">    command =&gt; &quot;iptables -A INPUT -s %&#123;clientip&#125; -j DROP&quot;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>通过系统ruby函数运行子进程</p>
<blockquote>
<p>警告: 如果你想要它的非阻塞，你应该使用＆或分离或其他这样的技术</p>
</blockquote>
<h4 id="概述-1"><a href="#概述-1" class="headerlink" title="概述"></a>概述</h4><p>这个插件支持下列配置选项：</p>
<p>所需的配置选项：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">exec &#123;</div><div class="line">    command =&gt; ...</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>可用的配置选项：</p>
<table>
<thead>
<tr>
<th>Setting</th>
<th>Input type</th>
<th>Required</th>
<th>Default value</th>
</tr>
</thead>
<tbody>
<tr>
<td>codec</td>
<td>codec</td>
<td>No</td>
<td>“plain”</td>
</tr>
<tr>
<td>command</td>
<td>string</td>
<td>Yes</td>
<td></td>
</tr>
<tr>
<td>workers</td>
<td>number</td>
<td>No</td>
<td>1</td>
</tr>
</tbody>
</table>
<h4 id="详情-1"><a href="#详情-1" class="headerlink" title="详情"></a>详情</h4><p><strong>codec</strong></p>
<ul>
<li>值类型是编解码器</li>
<li>默认值为“plain”</li>
</ul>
<p>用于输出数据的编解码器。 输出编解码器是一种方便的方法，用于在离开输出之前对数据进行编码，而无需在Logstash管道中使用单独的过滤器。</p>
<p><strong>command</strong></p>
<ul>
<li>这是必需的设置。</li>
<li>值类型是字符串</li>
<li>此设置没有默认值。</li>
</ul>
<p>通过子进程执行的命令行。 使用dtach或屏幕使它不阻塞</p>
<p><strong>workers</strong></p>
<ul>
<li>值类型为数字</li>
<li>默认值为1</li>
</ul>
<p>用于此输出的工人数。 请注意，此设置可能不适用于所有输出。</p>
<h3 id="file"><a href="#file" class="headerlink" title="file"></a>file</h3><p>此输出将事件写入磁盘上的文件。 您可以使用事件中的字段作为文件名和/或路径的一部分。</p>
<p>默认情况下，此输出以json格式每行写入一个事件。 您可以使用线路编解码器自定义线路格式<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">output &#123;</div><div class="line"> file &#123;</div><div class="line">   path =&gt; ...</div><div class="line">   codec =&gt; line &#123; format =&gt; &quot;custom format: %&#123;message&#125;&quot;&#125;</div><div class="line"> &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h5 id="概述-2"><a href="#概述-2" class="headerlink" title="概述"></a>概述</h5><p>这个插件支持下列配置选项：</p>
<p>所需的配置选项：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">file &#123;</div><div class="line">    path =&gt; ...</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>可用的配置选项:</p>
<table>
<thead>
<tr>
<th>Setting</th>
<th>Input type</th>
<th>Required</th>
<th>Default value</th>
</tr>
</thead>
<tbody>
<tr>
<td>codec</td>
<td>codec</td>
<td>No</td>
<td>“json_lines”</td>
</tr>
<tr>
<td>create_if_deleted</td>
<td>boolean</td>
<td>No</td>
<td>true</td>
</tr>
<tr>
<td>dir_mode</td>
<td>number</td>
<td>No</td>
<td>-1</td>
</tr>
<tr>
<td>file_mode</td>
<td>number</td>
<td>No</td>
<td>-1</td>
</tr>
<tr>
<td>filename_failure</td>
<td>string</td>
<td>No</td>
<td>“_filepath_failures”</td>
</tr>
<tr>
<td>flush_interval</td>
<td>number</td>
<td>No</td>
<td>2</td>
</tr>
<tr>
<td>gzip</td>
<td>boolean</td>
<td>No</td>
<td>false</td>
</tr>
<tr>
<td>path</td>
<td>string</td>
<td>Yes</td>
<td></td>
</tr>
<tr>
<td>workers</td>
<td>number</td>
<td>No</td>
<td>1</td>
</tr>
</tbody>
</table>
<h4 id="详情-2"><a href="#详情-2" class="headerlink" title="详情"></a>详情</h4><p><strong>codec</strong></p>
<ul>
<li>值类型是编解码器</li>
<li>默认值为“json_lines”</li>
</ul>
<p>用于输出数据的编解码器。输出编解码器是一种方便的方法，用于在离开输出之前对数据进行编码，而无需在Logstash管道中使用单独的过滤器。</p>
<p><strong>create_if_deleted</strong></p>
<ul>
<li>值类型是布尔值</li>
<li>默认值为true</li>
</ul>
<p>如果一个文件被删除，但事件正在进行，需要存储在这样的文件，插件将创建一个增益这个文件。 Default ⇒ true</p>
<p><strong>dir_mode</strong></p>
<ul>
<li>值类型是数字</li>
<li>默认值为-1</li>
</ul>
<p>使用的dir访问模式。注意，由于jruby系统中的错误umask在linux上被忽略：<a href="https://github.com/jruby/jruby/issues/3426将其设置为-1使用默认操作系统值。示例：“dir_mode”=&gt;" target="_blank" rel="external">https://github.com/jruby/jruby/issues/3426将其设置为-1使用默认操作系统值。示例：“dir_mode”=&gt;</a> 0750</p>
<p><strong>file_mode</strong></p>
<ul>
<li>值类型是数字</li>
<li>默认值为-1</li>
</ul>
<p>要使用的文件访问模式。注意，由于jruby系统中的错误umask在linux上被忽略：<a href="https://github.com/jruby/jruby/issues/3426将其设置为-1使用默认操作系统值。示例：“file_mode”=&gt;" target="_blank" rel="external">https://github.com/jruby/jruby/issues/3426将其设置为-1使用默认操作系统值。示例：“file_mode”=&gt;</a> 0640</p>
<p><strong>filename_failure</strong></p>
<ul>
<li>值类型是字符串</li>
<li>默认值为“<code>_filepath_failures</code>”</li>
</ul>
<p>如果生成的路径无效，则事件将保存到此文件和定义的路径内。</p>
<p><strong>flush_interval</strong></p>
<ul>
<li>值类型是数字</li>
<li>默认值为2</li>
</ul>
<p>刷新间隔（以秒为单位）刷新写入日志文件。 0将刷新每条消息。</p>
<p><strong>gzip</strong></p>
<ul>
<li>值类型是布尔值</li>
<li>默认值为false</li>
</ul>
<p>在写入磁盘之前将输出流压缩。</p>
<p><strong>message_format (DEPRECATED)</strong></p>
<ul>
<li>DEPRECATED WARNING：此配置项目已弃用，并且可能在将来的版本中不可用。</li>
<li>值类型是字符串</li>
<li>此设置没有默认值。</li>
</ul>
<p>将事件写入文件时使用的格式。此值支持任何字符串，并且可以包括％{name}和其他动态字符串。</p>
<p>如果省略此设置，事件的完整json表示将写为单行。</p>
<p><strong>path</strong></p>
<ul>
<li>这是必需的设置。</li>
<li>值类型是字符串</li>
<li>此设置没有默认值。</li>
</ul>
<p>要写入的文件的路径。可以在这里使用事件字段，如<code>/var/log/logstash/%{host}/%{application}</code>也可以通过joda时间格式使用路径选项进行基于日期的日志轮换。这将使用事件时间戳。例如：<code>path =&gt; &quot;./test-%{+YYYY-MM-dd}.txt&quot;</code>创建./test-2013-05-29.txt</p>
<p>如果使用绝对路径，则不能以动态字符串开头。例如：<code>/%{myfield}/</code>，<code>/test-%{myfield}/</code>不是有效的路径</p>
<p><strong>workers</strong></p>
<ul>
<li>值类型是数字</li>
<li>默认值为1</li>
</ul>
<p>用于此输出的工人数。请注意，此设置可能不适用于所有输出。</p>
<h3 id="http"><a href="#http" class="headerlink" title="http"></a>http</h3><h4 id="概述-3"><a href="#概述-3" class="headerlink" title="概述"></a>概述</h4><p>这个插件支持下列配置选项：</p>
<p>所需的配置选项：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">http &#123;</div><div class="line">    http_method =&gt; ...</div><div class="line">    url =&gt; ...</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>可用的配置选项：</p>
<table>
<thead>
<tr>
<th>Setting</th>
<th>Input type</th>
<th>Required</th>
<th>Default value</th>
</tr>
</thead>
<tbody>
<tr>
<td>automatic_retries</td>
<td>number</td>
<td>No</td>
<td>1</td>
</tr>
<tr>
<td>cacert</td>
<td>a valid filesystem path</td>
<td>No</td>
<td></td>
</tr>
<tr>
<td>client_cert</td>
<td>a valid filesystem path</td>
<td>No</td>
<td></td>
</tr>
<tr>
<td>client_key</td>
<td>a valid filesystem path</td>
<td>No</td>
<td></td>
</tr>
<tr>
<td>codec</td>
<td>codec</td>
<td>No</td>
<td>“plain”</td>
</tr>
<tr>
<td>connect_timeout</td>
<td>number</td>
<td>No</td>
<td>10</td>
</tr>
<tr>
<td>content_type</td>
<td>string</td>
<td>No</td>
<td></td>
</tr>
<tr>
<td>cookies</td>
<td>boolean</td>
<td>No</td>
<td>true</td>
</tr>
<tr>
<td>follow_redirects</td>
<td>boolean</td>
<td>No</td>
<td>true</td>
</tr>
<tr>
<td>format</td>
<td>string, one of [“json”, “form”, “message”]</td>
<td>No</td>
<td>“json”</td>
</tr>
<tr>
<td>headers</td>
<td>hash</td>
<td>No</td>
<td></td>
</tr>
<tr>
<td>http_method</td>
<td>string, one of [“put”, “post”, “patch”, “delete”, “get”, “head”]</td>
<td>Yes</td>
<td></td>
</tr>
<tr>
<td>keepalive</td>
<td>boolean</td>
<td>No</td>
<td>true</td>
</tr>
<tr>
<td>keystore</td>
<td>a valid filesystem path</td>
<td>No</td>
<td></td>
</tr>
<tr>
<td>keystore_password</td>
<td>password</td>
<td>No</td>
<td></td>
</tr>
<tr>
<td>keystore_type</td>
<td>string</td>
<td>No</td>
<td>“JKS”</td>
</tr>
<tr>
<td>mapping</td>
<td>hash</td>
<td>No</td>
<td></td>
</tr>
<tr>
<td>message</td>
<td>string</td>
<td>No</td>
<td></td>
</tr>
<tr>
<td>pool_max</td>
<td>number</td>
<td>No</td>
<td>50</td>
</tr>
<tr>
<td>pool_max_per_route</td>
<td>number</td>
<td>No</td>
<td>25</td>
</tr>
<tr>
<td>proxy</td>
<td>&lt;&lt;,&gt;&gt;</td>
<td>No</td>
<td></td>
</tr>
<tr>
<td>request_timeout</td>
<td>number</td>
<td>No</td>
<td>60</td>
</tr>
<tr>
<td>retry_non_idempotent</td>
<td>boolean</td>
<td>No</td>
<td>false</td>
</tr>
<tr>
<td>socket_timeout</td>
<td>number</td>
<td>No</td>
<td>10</td>
</tr>
<tr>
<td>ssl_certificate_validation</td>
<td>boolean</td>
<td>No</td>
<td>true</td>
</tr>
<tr>
<td>truststore</td>
<td>a valid filesystem path</td>
<td>No</td>
<td></td>
</tr>
<tr>
<td>truststore_password</td>
<td>password</td>
<td>No</td>
<td></td>
</tr>
<tr>
<td>truststore_type</td>
<td>string</td>
<td>No</td>
<td>“JKS”</td>
</tr>
<tr>
<td>url</td>
<td>string</td>
<td>Yes</td>
<td></td>
</tr>
<tr>
<td>workers</td>
<td>number</td>
<td>No</td>
<td>1</td>
</tr>
</tbody>
</table>
<h4 id="详情-3"><a href="#详情-3" class="headerlink" title="详情"></a>详情</h4><p><strong>automatic_retries</strong></p>
<ul>
<li>值类型是数字</li>
<li>默认值为1</li>
</ul>
<p><strong>cacert</strong></p>
<ul>
<li>值类型为路径</li>
<li>此设置没有默认值。</li>
</ul>
<p><strong>client_cert</strong></p>
<ul>
<li>值类型为路径</li>
<li>此设置没有默认值。</li>
</ul>
<p><strong>client_key</strong></p>
<ul>
<li>值类型为路径</li>
<li>此设置没有默认值。</li>
</ul>
<p><strong>codec</strong></p>
<ul>
<li>值类型是编解码器</li>
<li>默认值为“plain”</li>
</ul>
<p>用于输出数据的编解码器。输出编解码器是一种方便的方法，用于在离开输出之前对数据进行编码，而无需在Logstash管道中使用单独的过滤器。</p>
<p><strong>connect_timeout</strong></p>
<ul>
<li>值类型是数字</li>
<li>默认值为10</li>
</ul>
<p><strong>content_type</strong></p>
<ul>
<li>值类型是字符串</li>
<li>此设置没有默认值。</li>
</ul>
<p>内容类型</p>
<p>如果未指定，则默认为以下内容：</p>
<ul>
<li>如果格式为“json”，”application/json”</li>
<li>如果格式是“form”，”application/x-www-form-urlencoded”</li>
</ul>
<p><strong>cookies</strong></p>
<ul>
<li>值类型是布尔值</li>
<li>默认值为true</li>
</ul>
<p><strong>follow_redirects</strong></p>
<ul>
<li>值类型是布尔值</li>
<li>默认值为true</li>
</ul>
<p><strong>format</strong></p>
<ul>
<li>值可以是以下任何值：json，form，message</li>
<li>默认值为“json”</li>
</ul>
<p>设置http主体的格式。</p>
<p>如果是form，那么主体将映射（或整个事件）转换为查询参数字符串，例如。 <code>foo=bar&amp;baz=fizz...</code></p>
<p>如果消息，那么正文将根据消息格式化事件的结果</p>
<p>否则，事件将作为json发送。</p>
<p><strong>headers</strong></p>
<ul>
<li>值类型是哈希</li>
<li>此设置没有默认值。</li>
</ul>
<p>要使用格式的自定义标头是headers =&gt; [“X-My-Header”, “%{host}”]</p>
<p><strong>http_method</strong></p>
<ul>
<li>这是必需的设置。</li>
<li>值可以是任何：put，post，patch，delete，get，head</li>
<li>此设置没有默认值。</li>
</ul>
<p>HTTP动词“put”，“post”，“patch”，“delete”，“get”，“head”</p>
<p><strong>keepalive</strong></p>
<ul>
<li>值类型是布尔值</li>
<li>默认值为true</li>
</ul>
<p><strong>keystore</strong></p>
<ul>
<li>值类型为路径</li>
<li>此设置没有默认值。</li>
</ul>
<p><strong>keystore_password</strong></p>
<ul>
<li>值类型为密码</li>
<li>此设置没有默认值。</li>
</ul>
<p><strong>keystore_type</strong></p>
<ul>
<li>值类型是字符串</li>
<li>默认值为“JKS”</li>
</ul>
<p><strong>mapping</strong></p>
<ul>
<li>值类型是哈希</li>
<li>此设置没有默认值。</li>
</ul>
<p>这允许您选择发送的事件的结构和部分。</p>
<p>例如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mapping =&gt; &#123;&quot;foo&quot;, &quot;%&#123;host&#125;&quot;, &quot;bar&quot;, &quot;%&#123;type&#125;&quot;&#125;</div></pre></td></tr></table></figure></p>
<p><strong>message</strong></p>
<ul>
<li>值类型是字符串</li>
<li>此设置没有默认值。</li>
</ul>
<p><strong>pool_max</strong></p>
<ul>
<li>值类型是数字</li>
<li>默认值为50</li>
</ul>
<p><strong>pool_max_per_route</strong></p>
<ul>
<li>值类型是数字</li>
<li>默认值为25</li>
</ul>
<p><strong>proxy</strong></p>
<ul>
<li>值类型为string</li>
<li>此设置没有默认值</li>
</ul>
<p><strong>request_timeout</strong></p>
<ul>
<li>值类型是数字</li>
<li>默认值为60</li>
</ul>
<p><strong>retry_non_idempotent</strong></p>
<ul>
<li>值类型是布尔值</li>
<li>默认值为false</li>
</ul>
<p><strong>socket_timeout</strong></p>
<ul>
<li>值类型是数字</li>
<li>默认值为10</li>
</ul>
<p><strong>ssl_certificate_validation</strong></p>
<ul>
<li>值类型是布尔值</li>
<li>默认值为true</li>
</ul>
<p><strong>truststore</strong></p>
<ul>
<li>值类型为路径</li>
<li>此设置没有默认值。</li>
</ul>
<p><strong>truststore_password</strong></p>
<ul>
<li>值类型为密码</li>
<li>此设置没有默认值。</li>
</ul>
<p><strong>truststore_type</strong></p>
<ul>
<li>值类型是字符串</li>
<li>默认值为“JKS”</li>
</ul>
<p><strong>url</strong></p>
<ul>
<li>这是必需的设置。</li>
<li>值类型是字符串</li>
<li>此设置没有默认值。</li>
</ul>
<p>此输出允许您将事件发送到通用HTTP（S）端点</p>
<p>此输出将并行执行pool_max请求以提高性能。在调整此插件的性能时，请考虑这一点。</p>
<p>此外，请注意，当使用并行执行时，不能保证事件的严格排序！</p>
<p>当心，这个gem还不支持编解码器。请立即使用格式选项。要使用的网址</p>
<p><strong>verify_ssl (DEPRECATED)</strong></p>
<ul>
<li>DEPRECATED WARNING：此配置项目已弃用，并且可能在将来的版本中不可用。</li>
<li>值类型是布尔值</li>
<li>默认值为true</li>
</ul>
<p>DEPRECATED。请改为设置ssl_certificate_validation</p>
<p><strong>workers</strong></p>
<ul>
<li>值类型是数字</li>
<li>默认值为1</li>
</ul>
<p>用于此输出的工人数。请注意，此设置可能不适用于所有输出。</p>
<h3 id="kafka"><a href="#kafka" class="headerlink" title="kafka"></a>kafka</h3><p>将事件写入Kafka主题。 这使用Kafka Producer API将消息写入代理上的主题。</p>
<p>这里有一个兼容性矩阵，显示与每个Logstash和Kafka输出插件组合兼容的Kafka客户端版本：</p>
<table>
<thead>
<tr>
<th>Kafka Client Version</th>
<th>Logstash Version</th>
<th>Plugin Version</th>
<th>Security Features</th>
<th>Why?</th>
</tr>
</thead>
<tbody>
<tr>
<td>0.8</td>
<td>2.0.0 - 2.x.x</td>
<td>&lt;3.0.0</td>
<td></td>
<td>Legacy, 0.8 is still popular</td>
</tr>
<tr>
<td>0.9</td>
<td>2.0.0 - 2.3.x</td>
<td>3.x.x</td>
<td>Basic Auth, SSL</td>
<td>Works with the old Ruby Event API (event[‘product’][‘price’] = 10)</td>
</tr>
<tr>
<td>0.9</td>
<td>2.4.0 - 5.0.x</td>
<td>4.x.x</td>
<td>Basic Auth, SSL</td>
<td>Works with the new getter/setter APIs (event.set(‘[product][price]’, 10))</td>
</tr>
<tr>
<td>0.10</td>
<td>2.4.0 - 5.0.x</td>
<td>5.x.x</td>
<td>Basic Auth, SSL</td>
<td>Not compatible with the 0.9 broker</td>
</tr>
</tbody>
</table>
<blockquote>
<p>建议： 我们建议您使用匹配的Kafka客户端和代理版本。 在升级期间，您应该在客户端之前升级代理，因为代理的目标向后兼容。 例如，0.9代理与0.8消费者API和0.9消费者API兼容，但不是相反。</p>
</blockquote>
<p>唯一需要的配置是主题名称。 默认编解码器是json，所以事件将以json格式保存在代理上。 如果您选择一个纯文本编码，Logstash将编码您的消息不仅消息，而且与时间戳和主机名。 如果你不想要任何东西，但你的消息传递，你应该使输出配置：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">    output &#123;&#123;</div><div class="line">      kafka &#123;&#123;</div><div class="line">        codec =&gt; plain &#123;=&gt; plain &#123;</div><div class="line">           format =&gt; &quot;%&#123;message&#125;&quot;=&gt; &quot;%&#123;message&#125;&quot;</div><div class="line">        &#125;&#125;</div><div class="line">      &#125;&#125;</div><div class="line">    &#125;&#125;</div><div class="line">For more information see http://kafka.apache.org/documentation.html#theproducerFor more information see http://kafka.apache.org/documentation.html#theproducer</div></pre></td></tr></table></figure>
<p>Kafka 配置详情: <a href="http://kafka.apache.org/documentation.html#newproducerconfigs" target="_blank" rel="external">http://kafka.apache.org/documentation.html#newproducerconfigs</a></p>
<h4 id="概述-4"><a href="#概述-4" class="headerlink" title="概述"></a>概述</h4><p>这个插件支持下列配置选项：</p>
<p>所需的配置选项：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">kafka &#123;&#123;</div><div class="line">    topic_id =&gt; ...=&gt; ...</div><div class="line">&#125;&#125;</div></pre></td></tr></table></figure></p>
<p>可用的配置选项：</p>
<table>
<thead>
<tr>
<th>Setting</th>
<th>Input type</th>
<th>Required</th>
<th>Default value</th>
</tr>
</thead>
<tbody>
<tr>
<td>acks</td>
<td>string, one of [“0”, “1”, “all”]</td>
<td>No</td>
<td>“1”</td>
</tr>
<tr>
<td>batch_size</td>
<td>number</td>
<td>No</td>
<td>16384</td>
</tr>
<tr>
<td>block_on_buffer_full</td>
<td>boolean</td>
<td>No</td>
<td>true</td>
</tr>
<tr>
<td>bootstrap_servers</td>
<td>string</td>
<td>No</td>
<td>“localhost:9092”</td>
</tr>
<tr>
<td>buffer_memory</td>
<td>number</td>
<td>No</td>
<td>33554432</td>
</tr>
<tr>
<td>client_id</td>
<td>string</td>
<td>No</td>
<td></td>
</tr>
<tr>
<td>codec</td>
<td>codec</td>
<td>No</td>
<td>“json”</td>
</tr>
<tr>
<td>compression_type</td>
<td>string, one of [“none”, “gzip”, “snappy”]</td>
<td>No</td>
<td>“none”</td>
</tr>
<tr>
<td>key_serializer</td>
<td>string</td>
<td>No</td>
<td>“org.apache.kafka.common.serialization.StringSerializer”</td>
</tr>
<tr>
<td>linger_ms</td>
<td>number</td>
<td>No</td>
<td>0</td>
</tr>
<tr>
<td>max_request_size</td>
<td>number</td>
<td>No</td>
<td>1048576</td>
</tr>
<tr>
<td>message_key</td>
<td>string</td>
<td>No</td>
<td></td>
</tr>
<tr>
<td>metadata_fetch_timeout_ms</td>
<td>number</td>
<td>No</td>
<td>60000</td>
</tr>
<tr>
<td>metadata_max_age_ms</td>
<td>number</td>
<td>No</td>
<td>300000</td>
</tr>
<tr>
<td>receive_buffer_bytes</td>
<td>number</td>
<td>No</td>
<td>32768</td>
</tr>
<tr>
<td>reconnect_backoff_ms</td>
<td>number</td>
<td>No</td>
<td>10</td>
</tr>
<tr>
<td>retries</td>
<td>number</td>
<td>No</td>
<td>0</td>
</tr>
<tr>
<td>retry_backoff_ms</td>
<td>number</td>
<td>No</td>
<td>100</td>
</tr>
<tr>
<td>send_buffer_bytes</td>
<td>number</td>
<td>No</td>
<td>131072</td>
</tr>
<tr>
<td>timeout_ms</td>
<td>number</td>
<td>No</td>
<td>30000</td>
</tr>
<tr>
<td>topic_id</td>
<td>string</td>
<td>Yes</td>
<td></td>
</tr>
<tr>
<td>value_serializer</td>
<td>string</td>
<td>No</td>
<td>“org.apache.kafka.common.serialization.StringSerializer”</td>
</tr>
<tr>
<td>workers</td>
<td>number</td>
<td>No</td>
<td>1</td>
</tr>
</tbody>
</table>
<h4 id="详情-4"><a href="#详情-4" class="headerlink" title="详情"></a>详情</h4><p><strong>acks</strong></p>
<ul>
<li>值可以是以下任意值：0，1，all</li>
<li>默认值为“1”</li>
</ul>
<p>生产者需要领导者在考虑请求完成之前已接收的确认的数目。</p>
<p>acks = 0，生产者将不会等待来自服务器的任何确认。 acks = 1，这将意味着领导者将记录写入其本地日志，但将在不等待所有跟随者的完全确认的情况下进行响应。 acks = all，这意味着领导将等待完整的同步副本集合来确认记录。</p>
<p><strong>batch_size</strong></p>
<ul>
<li>值类型是数字</li>
<li>默认值为16384</li>
</ul>
<p>每当多个记录被发送到同一分区时，生产者将尝试将批记录一起分成较少的请求。这有助于客户端和服务器上的性能。此配置控制默认批量大小（以字节为单位）。</p>
<p><strong>block_on_buffer_full</strong></p>
<ul>
<li>值类型是布尔值</li>
<li>默认值为true</li>
</ul>
<p>当我们的内存缓冲区用尽时，我们必须停止接受新的记录（块）或抛出错误。默认情况下，此设置为true，我们阻止，但是在某些情况下阻塞是不可取的，最好立即给出错误。</p>
<p><strong>bootstrap_servers</strong></p>
<ul>
<li>值类型是字符串</li>
<li>默认值为“localhost：9092”</li>
</ul>
<p>这是用于引导，生产者将只使用它来获取元数据（主题，分区和副本）。用于发送实际数据的套接字连接将基于元数据中返回的代理信息来建立。格式为host1：port1，host2：port2，并且列表可以是代理的子集或指向代理子集的VIP。</p>
<p><strong>buffer_memory</strong></p>
<ul>
<li>值类型是数字</li>
<li>默认值为33554432</li>
</ul>
<p>生产者可以用来缓冲等待发送到服务器的记录的内存的总字节数。</p>
<p><strong>client_id</strong></p>
<ul>
<li>值类型是字符串</li>
<li>此设置没有默认值。</li>
</ul>
<p>在发出请求时传递给服务器的id字符串。这样做的目的是通过允许逻辑应用程序名称包含在请求中来跟踪超出ip / port的请求源</p>
<p><strong>codec</strong></p>
<ul>
<li>值类型是编解码器</li>
<li>默认值为“json”</li>
</ul>
<p>用于输出数据的编解码器。输出编解码器是一种方便的方法，用于在离开输出之前对数据进行编码，而无需在Logstash管道中使用单独的过滤器。</p>
<p><strong>compression_type</strong></p>
<ul>
<li>值可以是以下任何值：none，gzip，snappy</li>
<li>默认值为“none”</li>
</ul>
<p>生产者生成的所有数据的压缩类型。默认值为none（即不压缩）。有效值为none，gzip或snappy。</p>
<p><strong>key_serializer</strong></p>
<ul>
<li>值类型是字符串</li>
<li>默认值为“org.apache.kafka.common.serialization.StringSerializer”</li>
</ul>
<p>用于消息的密钥的序列化程序类</p>
<p><strong>linger_ms</strong></p>
<ul>
<li>值类型是数字</li>
<li>默认值为0</li>
</ul>
<p>生成器将在请求传输之间到达的任何记录集合到单个成批请求中。通常这仅在负载下发生，当记录到达比它们可以被发送时快。然而在某些情况下，即使在中等负载下，客户端也可能希望减少请求的数量。该设置通过添加少量的人为延迟来实现这一点，即，不是立即发出记录，而是生产者将等待给定的延迟，以允许发送其他记录，使得发送可以被批处理在一起。</p>
<p><strong>max_request_size</strong></p>
<ul>
<li>值类型是数字</li>
<li>默认值为1048576</li>
</ul>
<p>请求的最大大小</p>
<p><strong>message_key</strong></p>
<ul>
<li>值类型是字符串</li>
<li>此设置没有默认值。</li>
</ul>
<p>消息的键</p>
<p><strong>metadata_fetch_timeout_ms</strong></p>
<ul>
<li>值类型是数字</li>
<li>默认值为60000</li>
</ul>
<p>用于获取主题元数据的初始元数据请求的超时设置。</p>
<p><strong>metadata_max_age_ms</strong></p>
<ul>
<li>值类型是数字</li>
<li>默认值为300000</li>
</ul>
<p>强制元数据刷新之前的最长时间（以毫秒为单位）。</p>
<p><strong>receive_buffer_bytes</strong></p>
<ul>
<li>值类型是数字</li>
<li>默认值为32768</li>
</ul>
<p>读取数据时使用的TCP接收缓冲区的大小</p>
<p><strong>reconnect_backoff_ms</strong></p>
<ul>
<li>值类型是数字</li>
<li>默认值为10</li>
</ul>
<p>连接失败时尝试重新连接到给定主机之前等待的时间。</p>
<p><strong>retries</strong></p>
<ul>
<li>值类型是数字</li>
<li>默认值为0</li>
</ul>
<p>设置大于零的值将导致客户端重新发送任何发送失败且可能存在临时错误的记录。</p>
<p><strong>retry_backoff_ms</strong></p>
<ul>
<li>值类型是数字</li>
<li>默认值为100</li>
</ul>
<p>在尝试对给定主题分区重试失败的产生请求之前等待的时间量。</p>
<p><strong>send_buffer_bytes</strong></p>
<ul>
<li>值类型是数字</li>
<li>默认值为131072</li>
</ul>
<p>发送数据时使用的TCP发送缓冲区的大小。</p>
<p><strong>timeout_ms</strong></p>
<ul>
<li>值类型是数字</li>
<li>缺省值为30000</li>
</ul>
<p>配置控制服务器等待来自跟随者的确认以满足生产者使用ack配置指定的确认要求的最大时间量。如果在超时过期时未满足所请求的确认数量，则将返回错误。此超时在服务器端测量，不包括请求的网络延迟。</p>
<p><strong>topic_id</strong></p>
<ul>
<li>这是必需的设置。</li>
<li>值类型是字符串</li>
<li>此设置没有默认值。</li>
</ul>
<p>产生消息的主题</p>
<p><strong>value_serializer</strong></p>
<ul>
<li>值类型是字符串</li>
<li>默认值为“org.apache.kafka.common.serialization.StringSerializer”</li>
</ul>
<p>用于消息值的Serializer类</p>
<p><strong>workers</strong></p>
<ul>
<li>值类型是数字</li>
<li>默认值为1</li>
</ul>
<p>用于此输出的工人数。请注意，此设置可能不适用于所有输出。</p>
<h3 id="nagios"><a href="#nagios" class="headerlink" title="nagios"></a>nagios</h3><blockquote>
<p>这是一个社区维护的插件！</p>
</blockquote>
<p>Nagios输出用于通过Nagios命令文件将被动检查结果发送到Nagios。 此输出目前支持Nagios 3。</p>
<p>要使此输出正常工作，您的事件必须具有以下Logstash事件字段：</p>
<ul>
<li>nagios_host</li>
<li>nagios_service</li>
</ul>
<p>支持这些Logstash事件字段，但可选：</p>
<ul>
<li>nagios_annotation</li>
<li>nagios_level (覆盖nagios级别配置选项)</li>
</ul>
<p>有两个配置选项：</p>
<ul>
<li>commandfile - Nagios外部命令文件的位置。 默认为/var/lib/nagios3/rw/nagios.cmd</li>
<li>nagios_level - 指定要发送的检查的级别。 默认为CRITICAL，可以通过将“nagios_level”字段设置为“OK”，“WARNING”，“CRITICAL”或“UNKNOWN”之一<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">output&#123;</div><div class="line">  if [message] =~ /(error|ERROR|CRITICAL)/ &#123;</div><div class="line">    nagios &#123;</div><div class="line">      # your config here</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="概述-5"><a href="#概述-5" class="headerlink" title="概述"></a>概述</h4><p>这个插件支持下列配置选项：</p>
<p>所需的配置选项：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">nagios &#123;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>可用的配置选项：</p>
<table>
<thead>
<tr>
<th>Setting</th>
<th>Input type</th>
<th>Required</th>
<th>Default value</th>
</tr>
</thead>
<tbody>
<tr>
<td>codec</td>
<td>codec</td>
<td>No</td>
<td>“plain”</td>
</tr>
<tr>
<td>commandfile</td>
<td>&lt;&lt;,&gt;&gt;</td>
<td>No</td>
<td>“/var/lib/nagios3/rw/nagios.cmd”</td>
</tr>
<tr>
<td>nagios_level</td>
<td>string, one of [“0”, “1”, “2”, “3”]</td>
<td>No</td>
<td>“2”</td>
</tr>
<tr>
<td>workers</td>
<td>number</td>
<td>No</td>
<td>1</td>
</tr>
</tbody>
</table>
<h4 id="详情-5"><a href="#详情-5" class="headerlink" title="详情"></a>详情</h4><p><strong>codec</strong></p>
<ul>
<li>值类型是编解码器</li>
<li>默认值为“plain”</li>
</ul>
<p>用于输出数据的编解码器。 输出编解码器是一种方便的方法，用于在离开输出之前对数据进行编码，而无需在Logstash管道中使用单独的过滤器。</p>
<p><strong>commandfile</strong></p>
<ul>
<li>值类型是字符串</li>
<li>默认值为“/var/lib/nagios3/rw/nagios.cmd”`</li>
</ul>
<p>Nagios命令文件的完整路径。</p>
<p><strong>nagios_level</strong></p>
<ul>
<li>值可以是以下任意值：0，1，2，3</li>
<li>默认值为“2”</li>
</ul>
<p>Nagios检查级别。 应为0 =正常，1 =警告，2 =严重，3 =未知。 默认为2 - CRITICAL。</p>
<p><strong>workers</strong></p>
<ul>
<li>值类型为数字</li>
<li>默认值为1</li>
</ul>
<p>用于此输出的工人数。 请注意，此设置可能不适用于所有输出。</p>
<h3 id="pipe"><a href="#pipe" class="headerlink" title="pipe"></a>pipe</h3><blockquote>
<p>这是一个社区维护的插件！</p>
</blockquote>
<p>管道输出。</p>
<p>管道事件到另一个程序的stdin。 您可以使用事件中的字段作为命令的一部分。 警告：如果你不关心per-event命令行，这个功能可以导致logstash分叉多个孩子。</p>
<h4 id="概述-6"><a href="#概述-6" class="headerlink" title="概述"></a>概述</h4><p>这个插件支持下列配置选项：</p>
<p>所需的配置选项：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">pipe &#123;</div><div class="line">    command =&gt; ...</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>可用的配置选项：</p>
<table>
<thead>
<tr>
<th>Setting</th>
<th>Input type</th>
<th>Required</th>
<th>Default value</th>
</tr>
</thead>
<tbody>
<tr>
<td>codec</td>
<td>codec</td>
<td>No</td>
<td>“plain”</td>
</tr>
<tr>
<td>command</td>
<td>string</td>
<td>Yes</td>
<td></td>
</tr>
<tr>
<td>message_format</td>
<td>string</td>
<td>No</td>
<td></td>
</tr>
<tr>
<td>ttl</td>
<td>number</td>
<td>No</td>
<td>10</td>
</tr>
<tr>
<td>workers</td>
<td>number</td>
<td>No</td>
<td>1</td>
</tr>
</tbody>
</table>
<h4 id="详情-6"><a href="#详情-6" class="headerlink" title="详情"></a>详情</h4><p><strong>codec</strong></p>
<ul>
<li>值类型是编解码器</li>
<li>默认值为“plain”</li>
</ul>
<p>用于输出数据的编解码器。 输出编解码器是一种方便的方法，用于在离开输出之前对数据进行编码，而无需在Logstash管道中使用单独的过滤器。</p>
<p><strong>command</strong></p>
<ul>
<li>这是必需的设置。</li>
<li>值类型是字符串</li>
<li>此设置没有默认值。</li>
</ul>
<p>命令行启动和管道</p>
<p><strong>message_format</strong></p>
<ul>
<li>值类型是字符串</li>
<li>此设置没有默认值。</li>
</ul>
<p>将事件写入管道时使用的格式。 此值支持任何字符串，并且可以包括％{name}和其他动态字符串。</p>
<p>如果省略此设置，事件的完整json表示将写为单行。</p>
<p><strong>ttl</strong></p>
<ul>
<li>值类型为数字</li>
<li>默认值为10</li>
</ul>
<p>关闭尚未用于TTL秒的管道。 -1或0表示永不关闭。</p>
<p><strong>workers</strong></p>
<ul>
<li>值类型为数字</li>
<li>默认值为1</li>
</ul>
<p>用于此输出的工人数。 请注意，此设置可能不适用于所有输出。</p>
<h3 id="rabbitmq"><a href="#rabbitmq" class="headerlink" title="rabbitmq"></a>rabbitmq</h3><p>将事件推送到RabbitMQ交换。 需要RabbitMQ 2.x或更高版本（建议使用3.x）。</p>
<p>相关链接：</p>
<ul>
<li><a href="http://www.rabbitmq.com/" target="_blank" rel="external">RabbitMQ</a></li>
<li><a href="http://rubymarchhare.info/" target="_blank" rel="external">March Hare</a></li>
</ul>
<h4 id="概述-7"><a href="#概述-7" class="headerlink" title="概述"></a>概述</h4><p>这个插件支持下列配置选项：</p>
<p>所需的配置选项：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">rabbitmq &#123;</div><div class="line">    exchange =&gt; ...</div><div class="line">    exchange_type =&gt; ...</div><div class="line">    host =&gt; ...</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>可用的配置选项：</p>
<table>
<thead>
<tr>
<th>Setting</th>
<th>Input type</th>
<th>Required</th>
<th>Default value</th>
</tr>
</thead>
<tbody>
<tr>
<td>arguments</td>
<td>array</td>
<td>No</td>
<td>{}</td>
</tr>
<tr>
<td>automatic_recovery</td>
<td>boolean</td>
<td>No</td>
<td>true</td>
</tr>
<tr>
<td>codec</td>
<td>codec</td>
<td>No</td>
<td>“json”</td>
</tr>
<tr>
<td>connect_retry_interval</td>
<td>number</td>
<td>No</td>
<td>1</td>
</tr>
<tr>
<td>connection_timeout</td>
<td>number</td>
<td>No</td>
<td></td>
</tr>
<tr>
<td>durable</td>
<td>boolean</td>
<td>No</td>
<td>true</td>
</tr>
<tr>
<td>exchange</td>
<td>string</td>
<td>Yes</td>
<td></td>
</tr>
<tr>
<td>exchange_type</td>
<td>string, one of [“fanout”, “direct”, “topic”]</td>
<td>Yes</td>
<td></td>
</tr>
<tr>
<td>heartbeat</td>
<td>number</td>
<td>No</td>
<td></td>
</tr>
<tr>
<td>host</td>
<td>string</td>
<td>Yes</td>
<td></td>
</tr>
<tr>
<td>key</td>
<td>string</td>
<td>No</td>
<td>“logstash”</td>
</tr>
<tr>
<td>passive</td>
<td>boolean</td>
<td>No</td>
<td>false</td>
</tr>
<tr>
<td>password</td>
<td>password</td>
<td>No</td>
<td>“guest”</td>
</tr>
<tr>
<td>persistent</td>
<td>boolean</td>
<td>No</td>
<td>true</td>
</tr>
<tr>
<td>port</td>
<td>number</td>
<td>No</td>
<td>5672</td>
</tr>
<tr>
<td>ssl</td>
<td>boolean</td>
<td>No</td>
<td>false</td>
</tr>
<tr>
<td>user</td>
<td>string</td>
<td>No</td>
<td>“guest”</td>
</tr>
<tr>
<td>verify_ssl</td>
<td>boolean</td>
<td>No</td>
<td>false</td>
</tr>
<tr>
<td>vhost</td>
<td>string</td>
<td>No</td>
<td>“/“</td>
</tr>
<tr>
<td>workers</td>
<td>number</td>
<td>No</td>
<td>1</td>
</tr>
</tbody>
</table>
<h4 id="详情-7"><a href="#详情-7" class="headerlink" title="详情"></a>详情</h4><p><strong>arguments</strong></p>
<ul>
<li>值类型是数组</li>
<li>默认值为{}</li>
</ul>
<p><strong>automatic_recovery</strong></p>
<ul>
<li>值类型是布尔值</li>
<li>默认值为true</li>
</ul>
<p><strong>codec</strong></p>
<ul>
<li>值类型是编解码器</li>
<li>默认值为“json”</li>
</ul>
<p>用于输出数据的编解码器。输出编解码器是一种方便的方法，用于在离开输出之前对数据进行编码，而无需在Logstash管道中使用单独的过滤器。</p>
<p><strong>connect_retry_interval</strong></p>
<ul>
<li>值类型是数字</li>
<li>默认值为1</li>
</ul>
<p><strong>connection_timeout</strong></p>
<ul>
<li>值类型是数字</li>
<li>此设置没有默认值。</li>
</ul>
<p><strong>debug (DEPRECATED)</strong></p>
<ul>
<li>DEPRECATED WARNING：此配置项目已弃用，并且可能在将来的版本中不可用。</li>
<li>值类型是布尔值</li>
<li>默认值为false</li>
</ul>
<p>启用或禁用日志记录</p>
<p><strong>durable</strong></p>
<ul>
<li>值类型是布尔值</li>
<li>默认值为true</li>
</ul>
<p>这种交换是否耐用？ （aka;它应该存活经纪人重新启动吗？）</p>
<p><strong>exchange</strong></p>
<ul>
<li>这是必需的设置。</li>
<li>值类型是字符串</li>
<li>此设置没有默认值。</li>
</ul>
<p>交换的名称</p>
<p><strong>exchange_type</strong></p>
<ul>
<li>这是必需的设置。</li>
<li>值可以是以下任意值：fanout，direct，topic</li>
<li>此设置没有默认值。</li>
</ul>
<p>交换类型（fanout，topic，direct）</p>
<p><strong>heartbeat</strong></p>
<ul>
<li>值类型是数字</li>
<li>此设置没有默认值。</li>
</ul>
<p><strong>host</strong></p>
<ul>
<li>这是必需的设置。</li>
<li>值类型是字符串</li>
<li>此设置没有默认值。</li>
</ul>
<p><strong>key</strong></p>
<ul>
<li>值类型是字符串</li>
<li>默认值为“logstash”</li>
</ul>
<p>默认路由到的键。默认为logstash</p>
<p>在fanout交换上忽略路由密钥。</p>
<p><strong>passive</strong></p>
<ul>
<li>值类型是布尔值</li>
<li>默认值为false</li>
</ul>
<p><strong>password</strong></p>
<ul>
<li>值类型为密码</li>
<li>默认值为“guest”</li>
</ul>
<p><strong>persistent</strong></p>
<ul>
<li>值类型是布尔值</li>
<li>默认值为true</li>
</ul>
<p>RabbitMQ应该将消息持久化到磁盘吗？</p>
<p><strong>port</strong></p>
<ul>
<li>值类型是数字</li>
<li>默认值为5672</li>
</ul>
<p><strong>ssl</strong></p>
<ul>
<li>值类型是布尔值</li>
<li>默认值为false</li>
</ul>
<p><strong>user</strong></p>
<ul>
<li>值类型是字符串</li>
<li>默认值为“guest”</li>
</ul>
<p><strong>verify_ssl</strong></p>
<ul>
<li>值类型是布尔值</li>
<li>默认值为false</li>
</ul>
<p>验证SSL证书</p>
<p><strong>vhost</strong></p>
<ul>
<li>值类型是字符串</li>
<li>默认值为“/”</li>
</ul>
<p>要使用的vhost。如果你不知道这是什么，离开默认。</p>
<p><strong>workers</strong></p>
<ul>
<li>值类型是数字</li>
<li>默认值为1</li>
</ul>
<p>用于此输出的工人数。请注意，此设置可能不适用于所有输出。</p>
<h3 id="redis"><a href="#redis" class="headerlink" title="redis"></a>redis</h3><p>此输出将使用RPUSH将事件发送到Redis队列。 Redis v0.0.7 +中支持RPUSH命令。 对一个频道使用PUBLISH至少需要v1.3.8 +。 虽然你可以使这些Redis版本工作，最好的性能和稳定性将在最近的稳定版本中找到。 建议使用2.6.0+版本。</p>
<p>有关更多信息，请参阅<a href="http://redis.io/" target="_blank" rel="external">Redis主页</a></p>
<h4 id="概述-8"><a href="#概述-8" class="headerlink" title="概述"></a>概述</h4><p>此插件支持以下配置选项：</p>
<p>所需的配置选项：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">redis &#123;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>可用配置选项：</p>
<table>
<thead>
<tr>
<th>Setting</th>
<th>Input type</th>
<th>Required</th>
<th>Default value</th>
</tr>
</thead>
<tbody>
<tr>
<td>batch</td>
<td>boolean</td>
<td>No</td>
<td>false</td>
</tr>
<tr>
<td>batch_events</td>
<td>number</td>
<td>No</td>
<td>50</td>
</tr>
<tr>
<td>batch_timeout</td>
<td>number</td>
<td>No</td>
<td>5</td>
</tr>
<tr>
<td>codec</td>
<td>codec</td>
<td>No</td>
<td>“plain”</td>
</tr>
<tr>
<td>congestion_interval</td>
<td>number</td>
<td>No</td>
<td>1</td>
</tr>
<tr>
<td>congestion_threshold</td>
<td>number</td>
<td>No</td>
<td>0</td>
</tr>
<tr>
<td>data_type</td>
<td>string, one of [“list”, “channel”]</td>
<td>No</td>
<td></td>
</tr>
<tr>
<td>db</td>
<td>number</td>
<td>No</td>
<td>0</td>
</tr>
<tr>
<td>host</td>
<td>array</td>
<td>No</td>
<td>[“127.0.0.1”]</td>
</tr>
<tr>
<td>key</td>
<td>string</td>
<td>No</td>
<td></td>
</tr>
<tr>
<td>password</td>
<td>password</td>
<td>No</td>
<td></td>
</tr>
<tr>
<td>port</td>
<td>number</td>
<td>No</td>
<td>6379</td>
</tr>
<tr>
<td>reconnect_interval</td>
<td>number</td>
<td>No</td>
<td>1</td>
</tr>
<tr>
<td>shuffle_hosts</td>
<td>boolean</td>
<td>No</td>
<td>true</td>
</tr>
<tr>
<td>timeout</td>
<td>number</td>
<td>No</td>
<td>5</td>
</tr>
<tr>
<td>workers</td>
<td>number</td>
<td>No</td>
<td>1</td>
</tr>
</tbody>
</table>
<h4 id="详情-8"><a href="#详情-8" class="headerlink" title="详情"></a>详情</h4><p><strong>batch</strong></p>
<ul>
<li>值类型是布尔值</li>
<li>默认值为false</li>
</ul>
<p>如果希望Redis对值进行批处理并发送1个RPUSH命令而不是每个值的一个命令来推送列表，请设置为true。注意，这只适用于data_type =“list”模式。</p>
<p>如果为true，我们发送一个RPUSH每“batch_events”事件或“batch_timeout”秒（以先到者为准）。只支持data_type为“list”。</p>
<p><strong>batch_events</strong></p>
<ul>
<li>值类型是数字</li>
<li>默认值为50</li>
</ul>
<p>如果batch设置为true，我们为RPUSH排队的事件数。</p>
<p><strong>batch_timeout</strong></p>
<ul>
<li>值类型是数字</li>
<li>默认值为5</li>
</ul>
<p>如果batch设置为true，则在有待清除事件时RPUSH命令之间的最大时间量。</p>
<p><strong>codec</strong></p>
<ul>
<li>值类型是编解码器</li>
<li>默认值为“plain”</li>
</ul>
<p>用于输出数据的编解码器。输出编解码器是一种方便的方法，用于在离开输出之前对数据进行编码，而无需在Logstash管道中使用单独的过滤器。</p>
<p><strong>congestion_interval</strong></p>
<ul>
<li>值类型是数字</li>
<li>默认值为1</li>
</ul>
<p>检查拥塞的频率。默认值为1秒。零意味着检查每个事件。</p>
<p><strong>congestion_threshold</strong></p>
<ul>
<li>值类型是数字</li>
<li>默认值为0</li>
</ul>
<p>如果Redis data_type是列表并且具有多于<code>@congestion_threshold</code>项，阻塞直到有人使用它们并减少拥塞，否则如果没有消费者，Redis将耗尽内存，除非它配置了OOM保护。但是即使使用OOM保护，单个Redis列表也可以阻止Redis的所有其他用户，直到Redis CPU消耗达到允许的最大RAM大小。默认值为0表示禁用此限制。仅支持列表Redis data_type。</p>
<p><strong>data_type</strong><br>值可以是以下任何值：list，channel<br>此设置没有默认值。<br>列表或频道。如果redis_type是list，那么我们将设置RPUSH为key。如果redis_type是channel，那么我们将PUBLISH改为key。</p>
<p><strong>db</strong></p>
<ul>
<li>值类型是数字</li>
<li>默认值为0</li>
</ul>
<p>Redis数据库号。</p>
<p><strong>host</strong></p>
<ul>
<li>值类型是数组</li>
<li>默认值为[“127.0.0.1”]</li>
</ul>
<p>您的Redis服务器的主机名。端口可以​​在任何主机名上指​​定，这将覆盖全局端口配置。</p>
<p>例如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&quot;127.0.0.1&quot;</div><div class="line">[&quot;127.0.0.1&quot;, &quot;127.0.0.2&quot;]</div><div class="line">[&quot;127.0.0.1:6380&quot;, &quot;127.0.0.1&quot;]</div></pre></td></tr></table></figure></p>
<p><strong>key</strong></p>
<ul>
<li>值类型是字符串</li>
<li>此设置没有默认值。</li>
</ul>
<p>Redis列表或通道的名称。动态名称在此处有效，例如, <code>logstash-%{type}</code>.</p>
<p><strong>name (DEPRECATED)</strong></p>
<ul>
<li>DEPRECATED WARNING：此配置项目已弃用，并且可能在将来的版本中不可用。</li>
<li>值类型是字符串</li>
<li>默认值为“default”</li>
</ul>
<p>名称用于在有多个实例的情况下进行日志记录。</p>
<p><strong>password</strong></p>
<ul>
<li>值类型为密码</li>
<li>此设置没有默认值。</li>
</ul>
<p>要验证的密码。默认情况下没有身份验证。</p>
<p><strong>port</strong></p>
<ul>
<li>值类型是数字</li>
<li>默认值为6379</li>
</ul>
<p>要连接的默认端口。可以覆盖任何主机名。</p>
<p><strong>queue (DEPRECATED)</strong></p>
<ul>
<li>DEPRECATED WARNING：此配置项目已弃用，并且可能在将来的版本中不可用。</li>
<li>值类型是字符串</li>
<li>此设置没有默认值。</li>
</ul>
<p>Redis队列的名称（我们将在此使用RPUSH）。动态名称在此有效，例如,<code>logstash-%{type}</code></p>
<p><strong>reconnect_interval</strong></p>
<ul>
<li>值类型是数字</li>
<li>默认值为1</li>
</ul>
<p>重新连接到失败的Redis连接的间隔</p>
<p><strong>shuffle_hosts</strong></p>
<ul>
<li>值类型是布尔值</li>
<li>默认值为true</li>
</ul>
<p>在Logstash启动期间洗牌主机列表。</p>
<p><strong>timeout</strong></p>
<ul>
<li>值类型是数字</li>
<li>默认值为5</li>
</ul>
<p>Redis初始连接超时（以秒为单位）。</p>
<p><strong>workers</strong></p>
<ul>
<li>值类型是数字</li>
<li>默认值为1</li>
</ul>
<p>用于此输出的工人数。请注意，此设置可能不适用于所有输出。</p>
<h3 id="stdout"><a href="#stdout" class="headerlink" title="stdout"></a>stdout</h3><p>一个简单的输出，打印到运行Logstash的shell的STDOUT。 当调试插件配置时，通过允许在事件数据通过输入和过滤器之后立即访问该事件数据，此输出可以非常方便。</p>
<p>例如，以下输出配置与Logstash -e命令行标志一起，将允许您查看事件管道的结果，以便快速迭代。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">output &#123;</div><div class="line">  stdout &#123;&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>有用的编解码器包括：</p>
<p>rubydebug: 使用ruby“awesome_print”库输出事件数据<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">output &#123;</div><div class="line">  stdout &#123; codec =&gt; rubydebug &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>json: 以结构化JSON格式输出事件数据<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">output &#123;</div><div class="line">  stdout &#123; codec =&gt; json &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h4 id="概述-9"><a href="#概述-9" class="headerlink" title="概述"></a>概述</h4><p>此插件支持以下配置选项：</p>
<p>所需的配置选项：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">stdout &#123;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>可用配置选项：</p>
<table>
<thead>
<tr>
<th>Setting</th>
<th>Input type</th>
<th>Required</th>
<th>Default value</th>
</tr>
</thead>
<tbody>
<tr>
<td>codec</td>
<td>codec</td>
<td>No</td>
<td>“line”</td>
</tr>
<tr>
<td>workers</td>
<td>number</td>
<td>No</td>
<td>1</td>
</tr>
</tbody>
</table>
<h4 id="详情-9"><a href="#详情-9" class="headerlink" title="详情"></a>详情</h4><p><strong>codec</strong></p>
<ul>
<li>值类型是编解码器</li>
<li>默认值为“line”</li>
</ul>
<p>用于输出数据的编解码器。 输出编解码器是一种方便的方法，用于在离开输出之前对数据进行编码，而无需在Logstash管道中使用单独的过滤器。</p>
<p><strong>workers</strong></p>
<ul>
<li>值类型为数字</li>
<li>默认值为1</li>
</ul>
<p>用于此输出的工人数。 请注意，此设置可能不适用于所有输出。</p>
<h3 id="tcp"><a href="#tcp" class="headerlink" title="tcp"></a>tcp</h3><p>通过TCP套接字写事件。</p>
<p>每个事件json由换行符分隔。</p>
<p>可以接受来自客户端的连接或连接到服务器，具体取决于模式。</p>
<h4 id="概述-10"><a href="#概述-10" class="headerlink" title="概述"></a>概述</h4><p>此插件支持以下配置选项：</p>
<p>所需的配置选项：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">tcp &#123;</div><div class="line">    host =&gt; ...</div><div class="line">    port =&gt; ...</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>可用配置选项：</p>
<table>
<thead>
<tr>
<th>Setting</th>
<th>Input type</th>
<th>Required</th>
<th>Default value</th>
</tr>
</thead>
<tbody>
<tr>
<td>codec</td>
<td>codec</td>
<td>No</td>
<td>“json”</td>
</tr>
<tr>
<td>host</td>
<td>string</td>
<td>Yes</td>
<td></td>
</tr>
<tr>
<td>mode</td>
<td>string, one of [“server”, “client”]</td>
<td>No</td>
<td>“client”</td>
</tr>
<tr>
<td>port</td>
<td>number</td>
<td>Yes</td>
<td></td>
</tr>
<tr>
<td>reconnect_interval</td>
<td>number</td>
<td>No</td>
<td>10</td>
</tr>
<tr>
<td>workers</td>
<td>number</td>
<td>No</td>
<td>1</td>
</tr>
</tbody>
</table>
<h4 id="详情-10"><a href="#详情-10" class="headerlink" title="详情"></a>详情</h4><p><strong>codec</strong></p>
<ul>
<li>值类型是编解码器</li>
<li>默认值为“json”</li>
</ul>
<p>用于输出数据的编解码器。输出编解码器是一种方便的方法，用于在离开输出之前对数据进行编码，而无需在Logstash管道中使用单独的过滤器。</p>
<p><strong>host</strong></p>
<ul>
<li>这是必需的设置。</li>
<li>值类型是字符串</li>
<li>此设置没有默认值。</li>
</ul>
<p>当模式是服务器时，地址要监听。当模式为客户端时，连接的地址。</p>
<p><strong>message_format (DEPRECATED)</strong></p>
<ul>
<li>DEPRECATED WARNING：此配置项目已弃用，并且可能在将来的版本中不可用。</li>
<li>值类型是字符串</li>
<li>此设置没有默认值。</li>
</ul>
<p>将事件写入文件时使用的格式。此值支持任何字符串，并且可以包括％{name}和其他动态字符串。</p>
<p><strong>mode</strong></p>
<ul>
<li>值可以是以下任意值：server, client</li>
<li>默认值为“client”</li>
</ul>
<p>模式操作。服务器侦听客户端连接，客户端连接到服务器。</p>
<p><strong>port</strong></p>
<ul>
<li>这是必需的设置。</li>
<li>值类型是数字</li>
<li>此设置没有默认值。</li>
</ul>
<p>当模式是服务器时，端口要监听。当模式为客户端时，连接到的端口。</p>
<p><strong>reconnect_interval</strong></p>
<ul>
<li>值类型是数字</li>
<li>默认值为10</li>
</ul>
<p>当连接失败时，请以秒为单位重试间隔。</p>
<p><strong>workers</strong></p>
<ul>
<li>值类型是数字</li>
<li>默认值为1</li>
</ul>
<p>用于此输出的工人数。请注意，此设置可能不适用于所有输出。</p>
<h3 id="udp"><a href="#udp" class="headerlink" title="udp"></a>udp</h3><p>通过UDP发送事件</p>
<p>请记住，UDP将丢失消息。</p>
<h4 id="概述-11"><a href="#概述-11" class="headerlink" title="概述"></a>概述</h4><p>此插件支持以下配置选项：</p>
<p>所需的配置选项：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">udp &#123;</div><div class="line">    host =&gt; ...</div><div class="line">    port =&gt; ...</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>可用配置选项：</p>
<table>
<thead>
<tr>
<th>Setting</th>
<th>Input type</th>
<th>Required</th>
<th>Default value</th>
</tr>
</thead>
<tbody>
<tr>
<td>codec</td>
<td>codec</td>
<td>No</td>
<td>“json”</td>
</tr>
<tr>
<td>host</td>
<td>string</td>
<td>Yes</td>
<td></td>
</tr>
<tr>
<td>port</td>
<td>number</td>
<td>Yes</td>
<td></td>
</tr>
<tr>
<td>workers</td>
<td>number</td>
<td>No</td>
<td>1</td>
</tr>
</tbody>
</table>
<h4 id="详情-11"><a href="#详情-11" class="headerlink" title="详情"></a>详情</h4><p><strong>codec</strong></p>
<ul>
<li>值类型是编解码器</li>
<li>默认值为“json”</li>
</ul>
<p>用于输出数据的编解码器。 输出编解码器是一种方便的方法，用于在离开输出之前对数据进行编码，而无需在Logstash管道中使用单独的过滤器。</p>
<p><strong>host</strong></p>
<ul>
<li>这是必需的设置。</li>
<li>值类型是字符串</li>
<li>此设置没有默认值。</li>
</ul>
<p>发送邮件的地址</p>
<p><strong>port</strong></p>
<ul>
<li>这是必需的设置。</li>
<li>值类型为数字</li>
<li>此设置没有默认值。</li>
</ul>
<p>发送邮件的端口</p>
<p><strong>workers</strong></p>
<ul>
<li>值类型为数字</li>
<li>默认值为1</li>
</ul>
<p>用于此输出的工人数。 请注意，此设置可能不适用于所有输出。</p>
<h3 id="websocket"><a href="#websocket" class="headerlink" title="websocket"></a>websocket</h3><p>这是一个社区维护的插件！ 它默认不随Logstash一起提供，但它很容易安装通过运行bin / logstash-plugin install logstash-output-websocket。</p>
<p>此输出运行websocket服务器并将所有消息发布到所有连接的websocket客户端。</p>
<p>您可以使用<code>ws://&lt;host\&gt;:&lt;port\&gt;/</code></p>
<p>如果没有连接客户端，则忽略接收的任何消息。</p>
<h4 id="概述-12"><a href="#概述-12" class="headerlink" title="概述"></a>概述</h4><p>此插件支持以下配置选项：</p>
<p>所需的配置选项：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">websocket &#123;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>可用配置选项：</p>
<table>
<thead>
<tr>
<th>Setting</th>
<th>Input type</th>
<th>Required</th>
<th>Default value</th>
</tr>
</thead>
<tbody>
<tr>
<td>codec</td>
<td>codec</td>
<td>No</td>
<td>“plain”</td>
</tr>
<tr>
<td>host</td>
<td>string</td>
<td>No</td>
<td>“0.0.0.0”</td>
</tr>
<tr>
<td>port</td>
<td>number</td>
<td>No</td>
<td>3232</td>
</tr>
<tr>
<td>workers</td>
<td>number</td>
<td>No</td>
<td>1</td>
</tr>
</tbody>
</table>
<h4 id="详情-12"><a href="#详情-12" class="headerlink" title="详情"></a>详情</h4><p><strong>codec</strong></p>
<ul>
<li>值类型是编解码器</li>
<li>默认值为“plain”</li>
</ul>
<p>用于输出数据的编解码器。 输出编解码器是一种方便的方法，用于在离开输出之前对数据进行编码，而无需在Logstash管道中使用单独的过滤器。</p>
<p><strong>host</strong></p>
<ul>
<li>值类型是字符串</li>
<li>默认值为“0.0.0.0”</li>
</ul>
<p>从中提供websocket数据的地址</p>
<p><strong>port</strong></p>
<ul>
<li>值类型为数字</li>
<li>默认值为3232</li>
</ul>
<p>从中提供websocket数据的端口</p>
<p><strong>workers</strong></p>
<ul>
<li>值类型为数字</li>
<li>默认值为1</li>
</ul>
<p>用于此输出的工人数。 请注意，此设置可能不适用于所有输出。</p>
]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;输出插件&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="Logstash" scheme="https://weizhimiao.github.io/categories/Logstash/"/>
    
    
      <category term="Logstash" scheme="https://weizhimiao.github.io/tags/Logstash/"/>
    
  </entry>
  
  <entry>
    <title>Logstash学习二</title>
    <link href="https://weizhimiao.github.io/2016/10/24/Logstash%E5%AD%A6%E4%B9%A0%E4%BA%8C/"/>
    <id>https://weizhimiao.github.io/2016/10/24/Logstash学习二/</id>
    <published>2016-10-24T14:30:00.000Z</published>
    <updated>2016-10-25T13:46:59.000Z</updated>
    
    <content type="html"><![CDATA[<ul>
<li>版本的变化</li>
<li>升级Logstash</li>
<li>配置Logstash<a id="more"></a>
</li>
</ul>
<h2 id="版本的变化"><a href="#版本的变化" class="headerlink" title="版本的变化"></a>版本的变化</h2><p>本节讨论在将应用程序从一个版本的Logstash迁移到另一个版本时需要注意的更改。</p>
<h3 id="2-4的变化"><a href="#2-4的变化" class="headerlink" title="2.4的变化"></a>2.4的变化</h3><h4 id="Beats输入配置更改"><a href="#Beats输入配置更改" class="headerlink" title="Beats输入配置更改"></a>Beats输入配置更改</h4><p>Beats输入已经使用Netty重新实现，Netty是Java的异步IO框架。这种重写性能使插件符合Logstash转发器+ LS组合。作为Beats重构器的一部分，我们现在仅支持PKCS＃8格式的私钥。您可以通过使用OpenSSL工具包轻松地将现有密钥转换为使用PKCS＃8格式。请参阅OpenSSL文档。</p>
<h3 id="2-2"><a href="#2-2" class="headerlink" title="2.2"></a>2.2</h3><p>尽管2.2与旧版本的配置完全兼容，但是在部署到生产环境之前，用户需要考虑到管道的一些架构更改。这些更改在语义版本意义上不会严格“打破”，但是它们使Logstash在运行时的行为不同，并且也会影响性能。我们在升级Logstash中编译了这样的列表到2.2部分。请在部署2.2版本之前查看它。</p>
<h3 id="2-0中的更改"><a href="#2-0中的更改" class="headerlink" title="2.0中的更改"></a>2.0中的更改</h3><p>Logstash的2.0版本有一些与先前版本的Logstash不兼容的更改。本节讨论迁移到此版本时需要注意的事项。</p>
<h4 id="Elasticsearch输出默认值"><a href="#Elasticsearch输出默认值" class="headerlink" title="Elasticsearch输出默认值"></a>Elasticsearch输出默认值</h4><p>从Logstash的2.0版本开始，Elasticsearch的默认Logstash输出是HTTP。 要使用节点或传输协议，请下载Elasticsearch Java插件。 Logstash到Elasticsearch的HTTP输出现在支持嗅探。</p>
<blockquote>
<p>注意:elasticsearch_java插件有两个特定于底层Elasticsearch集群版本的版本。 请务必在安装期间为–version选项指定正确的值：*对于2.0之前的Elasticsearch版本，请使用命令bin / plugin install –version 1.5.x logstash-output-elasticsearch_java *对于Elasticsearch版本2.0及更高版本，请使用 命令bin / plugin install –version 2.0.0 logstash-output-elasticsearch_java</p>
</blockquote>
<h4 id="Elasticsearch输出配置更改"><a href="#Elasticsearch输出配置更改" class="headerlink" title="Elasticsearch输出配置更改"></a>Elasticsearch输出配置更改</h4><p>Elasticsearch输出插件配置具有以下更改：</p>
<ul>
<li>主机配置选项现在是主机，允许您在myhost：9200格式中指定多个主机和关联端口</li>
<li>新选项：bind_host，bind_port，cluster，embedded，embedded_http_port，port，sniffing_delay</li>
<li>max_inflight_requests选项（在1.5版本中已弃用）现已删除</li>
<li>由于hosts选项允许为主机指定端口，因此现在将删除冗余端口选项</li>
<li>node_name和协议选项已移至elasticsearch_java插件</li>
</ul>
<h4 id="已删除插件配置设置"><a href="#已删除插件配置设置" class="headerlink" title="已删除插件配置设置"></a>已删除插件配置设置</h4><p>在此版本中删除以下弃用的配置设置：</p>
<ul>
<li>输入插件配置设置：debug，format，charset，message_format</li>
<li>输出插件配置设置：type，tags，exclude_tags。</li>
<li>过滤器插件配置设置：type，tags，exclude_tags。</li>
<li>具有这些设置的配置文件无效，并防止Logstash启动。</li>
</ul>
<h4 id="Kafka输出配置更改"><a href="#Kafka输出配置更改" class="headerlink" title="Kafka输出配置更改"></a>Kafka输出配置更改</h4><p>Logstash的2.0版本包括一个新版本的Kafka输出插件，并进行了重大的配置更改。 请比较Logstash 1.5和Logstash 2.0版本的Kafka输出插件的文档页面，并相应地更新配置文件。</p>
<h4 id="指标过滤器更改"><a href="#指标过滤器更改" class="headerlink" title="指标过滤器更改"></a>指标过滤器更改</h4><p>以前的指标过滤器插件的实现使用点字段名称。 Elasticsearch不允许字段名称有从2.0版开始的点，所以更改使用子字段而不是在此插件中的点。 请注意，这些更改使得版本3.0.0的指标过滤器插件与以前的版本不兼容。</p>
<h4 id="过滤器工作者默认更改"><a href="#过滤器工作者默认更改" class="headerlink" title="过滤器工作者默认更改"></a>过滤器工作者默认更改</h4><p>从Logstash的2.0版本开始，过滤器插件的filter_workers配置选项的默认值是可用CPU内核的一半，而不是1.此更改增加了资源密集型过滤操作的过滤器执行的并行性。 您可以继续使用-w标志来手动设置此选项的值，如在以前的版本中。</p>
<h2 id="升级Logstash"><a href="#升级Logstash" class="headerlink" title="升级Logstash"></a>升级Logstash</h2><p><strong>重要</strong> 升级Logstash之前：</p>
<p>请参阅最新更改文档。<br>在升级生产集群之前在开发环境中测试升级。</p>
<h3 id="使用软件包管理器升级"><a href="#使用软件包管理器升级" class="headerlink" title="使用软件包管理器升级"></a>使用软件包管理器升级</h3><p>此过程使用包管理器来升级Logstash。</p>
<ol>
<li>关闭Logstash管道，包括将事件发送到Logstash的任何输入。</li>
<li>使用“软件包存储库”部分中的说明，将存储库链接更新为指向2.0存储库，而不是先前的版本。</li>
<li>针对您的操作系统，运行apt-get upgrade logstash或yum update logstash命令。</li>
<li>使用logstash –configtest -f <configuration-file>命令测试配置文件。 某些Logstash插件的配置选项在2.0版本中已更改。</configuration-file></li>
<li>更新配置文件后重新启动Logstash管道。</li>
</ol>
<h3 id="使用直接下载升级"><a href="#使用直接下载升级" class="headerlink" title="使用直接下载升级"></a>使用直接下载升级</h3><p>此过程直接从Elastic下载相关的Logstash二进制文件。</p>
<ol>
<li>关闭Logstash管道，包括将事件发送到Logstash的任何输入。</li>
<li>下载与您的主机环境匹配的Logstash安装文件。</li>
<li>将安装文件解包到Logstash目录中。</li>
<li>使用logstash –configtest -f <configuration-file>命令测试配置文件。 某些Logstash插件的配置选项在2.0版本中已更改。</configuration-file></li>
<li>更新配置文件后重新启动Logstash管道。</li>
</ol>
<h3 id="将Logstash和Elasticsearch升级到2-0"><a href="#将Logstash和Elasticsearch升级到2-0" class="headerlink" title="将Logstash和Elasticsearch升级到2.0"></a>将Logstash和Elasticsearch升级到2.0</h3><p>如果您使用Elasticsearch作为输出，并希望升级到Elasticsearch 2.0，请注意在升级之前的更改。 此外，升级到Elasticsearch 2.0后需要执行以下步骤：</p>
<p><strong>映射更改：</strong> 用户可能有自定义模板更改，因此默认情况下，Logstash升级将保留模板。 即使您没有自定义模板，默认情况下Logstash也不会覆盖现有模板。</p>
<p>使用需要手动更新模板的GeoIP过滤器有一个已知问题（删除路径）。</p>
<p>注意：如果您有自定义模板更改，请务必保存并合并所有更改。 您可以通过运行以下命令获取现有模板：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">curl -XGET localhost:9200/_template/logstash</div></pre></td></tr></table></figure></p>
<p>下列选项添加到您的Logstash配置：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">output &#123;</div><div class="line">        elasticsearch &#123;</div><div class="line">                template_overwrite =&gt; true</div><div class="line">        &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>重新启动Logstash。</p>
<p><strong>字段中的点：</strong> Elasticsearch 2.0不允许字段名包含。 字符。 有关此更改的更多详细信息。 某些插件已经更新，以补偿此中断更改，包括logstash-filter-metrics和logstash-filter-elapsed。 这些插件更新可用于Logstash 2.0。 要升级到这些插件的最新版本，命令是：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">bin/logstash-plugin update &lt;plugin_name&gt;</div></pre></td></tr></table></figure></p>
<p><strong>多行过滤器：</strong> 如果您在配置中使用多行过滤器并升级到Logstash 2.0，则会出现错误。 确保显式设置过滤器工作程序（-w）的数目为1.您可以通过传递命令行标志来设置工作程序的数目，例如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">bin/logstash -w 1</div></pre></td></tr></table></figure></p>
<h3 id="将Logstash升级到2-2"><a href="#将Logstash升级到2-2" class="headerlink" title="将Logstash升级到2.2"></a>将Logstash升级到2.2</h3><p>Logstash 2.2重新构建了流水线阶段，以提供更多的性能，并帮助未来增强弹性。 新管道引入了微批次，一次处理一组事件。 默认批处理大小为每个工作程序125。 此外，过滤器和输出级在相同的线程中执行，但仍然，作为不同的级。 CLI标志–pipeline-workers或-w控制执行线程的数量，默认情况下将其设置为内核数。</p>
<p><strong>Elasticsearch输出的注意事项</strong> 管道的默认批处理大小为每个工作程序125个事件。 默认情况下，这也将是用于弹性搜索输出的批量大小。 Elasticsearch输出的flush_size现在仅作为最大批量大小（仍默认为500）。 例如，如果您的管道批处理大小为3000个事件，Elasticsearch输出将在6个单独的批量请求中一次发送500个事件。 换句话说，对于Elasticsearch输出，批量请求大小基于flush_size和–pipeline-batch-size进行分块。 如果flush_size设置为大于–pipeline-batch-size，则会被忽略，并将使用–pipeline-batch-size。</p>
<p>Logstash 2.2中的输出工作程序的默认数目现在等于管道工作程序的数目（-w），除非在Logstash配置文件中被覆盖。 这对于一些用户可能是有问题的，因为额外的工作者可能消耗诸如文件句柄的额外资源，尤其是在Elasticsearch输出的情况下。 具有多个Elasticsearch主机的用户可能想在其Logstash配置中覆盖Elasticsearch输出的workers设置，以将该数字限制为1到4之间的较小值。</p>
<p><strong>2.2中的性能调优</strong> 由于过滤器和输出工作程序都在同一个线程上，这可能导致线程在I / O等待状态中空闲。 因此，在2.2中，您可以安全地将-w设置为一个数字，该数字是计算机上核心数的倍数。 调整性能的一种常用方法是，不断增加-w超过核心数，直到性能不再提高。 注意注意 - 确保您还记住大小，因为正在进行的事件的数量是#workers <em> batch_size </em> average_event大小。 更多的飞行中事件可能会增加内存压力，最终导致内存不足错误。 您可以通过设置LS_HEAP_SIZE更改Logstash中的堆大小</p>
<h2 id="配置Logstash"><a href="#配置Logstash" class="headerlink" title="配置Logstash"></a>配置Logstash</h2><p>要配置Logstash，请创建一个配置文件，指定要使用的插件和每个插件的设置。 您可以引用配置中的事件字段，并使用条件来处理满足特定条件的事件。 当您运行logstash时，您使用-f指定您的配置文件。</p>
<p>让我们通过创建一个简单的配置文件并使用它来运行Logstash。 创建一个名为“logstash-simple.conf”的文件，并将其保存在与Logstash相同的目录中。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">input &#123; stdin &#123; &#125; &#125;</div><div class="line">output &#123;</div><div class="line">  elasticsearch &#123; hosts =&gt; [&quot;localhost:9200&quot;] &#125;</div><div class="line">  stdout &#123; codec =&gt; rubydebug &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>然后，运行logstash并指定使用-f标志的配置文件。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">bin/logstash -f logstash-simple.conf</div></pre></td></tr></table></figure></p>
<p>Logstash读取指定的配置文件，并输出到Elasticsearch和stdout。 在我们继续讨论一些更复杂的例子之前，让我们仔细看看配置文件中的内容。</p>
<h3 id="配置文件的结构"><a href="#配置文件的结构" class="headerlink" title="配置文件的结构"></a>配置文件的结构</h3><p>Logstash配置文件对于要添加到事件处理管道的每种类型的插件都有一个单独的部分。 例如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"># This is a comment. You should use comments to describe</div><div class="line"># parts of your configuration.</div><div class="line">input &#123;</div><div class="line">  ...</div><div class="line">&#125;</div><div class="line"></div><div class="line">filter &#123;</div><div class="line">  ...</div><div class="line">&#125;</div><div class="line"></div><div class="line">output &#123;</div><div class="line">  ...</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>每个部分包含一个或多个插件的配置选项。 如果指定多个过滤器，它们将按照其在配置文件中的显示顺序应用。</p>
<h4 id="插件配置"><a href="#插件配置" class="headerlink" title="插件配置"></a>插件配置</h4><p>插件的配置包括插件名称，后面是该插件的一组设置。 例如，此输入节配置两个文件输入：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">input &#123;</div><div class="line">  file &#123;</div><div class="line">    path =&gt; &quot;/var/log/messages&quot;</div><div class="line">    type =&gt; &quot;syslog&quot;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  file &#123;</div><div class="line">    path =&gt; &quot;/var/log/apache/access.log&quot;</div><div class="line">    type =&gt; &quot;apache&quot;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在此示例中，为每个文件输入配置了两个设置：路径和类型。</p>
<p>您可以配置的设置因插件类型而异。 有关每个插件的信息，请参阅输入插件，输出插件，过滤器插件和编解码器插件。</p>
<h4 id="值类型"><a href="#值类型" class="headerlink" title="值类型"></a>值类型</h4><p>插件可以要求设置的值为某种类型，例如布尔值，列表或哈希。 支持以下值类型。</p>
<ol>
<li>数组</li>
</ol>
<p>这种类型现在大多已被废弃，赞成使用标准类型，如字符串与插件定义：更多类型检查：list =&gt; true属性。 它仍然需要处理哈希或混合类型的列表，其中不需要类型检查。</p>
<p>例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">users =&gt; [ &#123;id =&gt; 1, name =&gt; bob&#125;, &#123;id =&gt; 2, name =&gt; jane&#125; ]</div></pre></td></tr></table></figure></p>
<ol>
<li>列表<br>不是一个类型本身，而是一个属性类型可以有。 这使得可以键入检查多个值。 插件作者可以通过在声明参数时指定：list =&gt; true来启用列表检查。</li>
</ol>
<p>例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">path =&gt; [ &quot;/var/log/messages&quot;, &quot;/var/log/*.log&quot; ]</div><div class="line"> uris =&gt; [ &quot;http://elastic.co&quot;, &quot;http://example.net&quot; ]</div></pre></td></tr></table></figure></p>
<p>此示例配置path，它是一个字符串，它是一个包含三个字符串中每个字符串的元素的列表。 它还将配置uris参数为URI列表，如果提供的任何URI无效，则失败。</p>
<ol>
<li>布尔值<br>布尔值必须为true或false。 请注意，true和false关键字不用引号括起来。</li>
</ol>
<p>例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ssl_enable =&gt; true</div></pre></td></tr></table></figure></p>
<ol>
<li>字节<br>字节字段是表示有效字节单位的字符串字段。 在插件选项中声明特定大小是一种方便的方法。 支持SI（k M G T P E Z Y）和二进制（Ki Mi Gi Ti Pi Ei Zi Yi）单位。 二进制单位以base-1024为单位，SI单位为base-1000。 此字段不区分大小写，并接受值和单位之间的空格。 如果未指定单位，则整数字符串表示字节数。</li>
</ol>
<p>例子：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">my_bytes =&gt; &quot;1113&quot;   # 1113 bytes</div><div class="line">my_bytes =&gt; &quot;10MiB&quot;  # 10485760 bytes</div><div class="line">my_bytes =&gt; &quot;100kib&quot; # 102400 bytes</div><div class="line">my_bytes =&gt; &quot;180 mb&quot; # 180000000 bytes</div></pre></td></tr></table></figure></p>
<ol>
<li>编解码器<br>编解码器是用于表示数据的Logstash编解码器的名称。 编解码器可用于输入和输出。</li>
</ol>
<p>输入编解码器提供了一种方便的方式在数据进入输入之前对其进行解码。 输出编解码器提供了一种方便的方式在离开输出之前对数据进行编码。 使用输入或输出编解码器无需在Logstash管道中使用单独的过滤器。</p>
<p>可在Codec插件页面找到可用编解码器的列表。</p>
<p>例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">codec =&gt; &quot;json&quot;</div></pre></td></tr></table></figure></p>
<ol>
<li>哈希<br>散列是以格式“field1”=&gt;“value1”指定的键值对的集合。 请注意，多个键值值条目之间用空格分隔，而不是逗号。</li>
</ol>
<p>例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">match =&gt; &#123;</div><div class="line">  &quot;field1&quot; =&gt; &quot;value1&quot;</div><div class="line">  &quot;field2&quot; =&gt; &quot;value2&quot;</div><div class="line">  ...</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<ol>
<li>数值<br>数字必须是有效的数字值（浮点数或整数）。</li>
</ol>
<p>例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">port =&gt; 33</div></pre></td></tr></table></figure></p>
<ol>
<li>密码<br>密码是具有未记录或打印的单个值的字符串。</li>
</ol>
<p>例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">my_password =&gt; &quot;password&quot;</div></pre></td></tr></table></figure></p>
<ol>
<li>URI<br>URI可以是从完整URL（如<a href="http://elastic.co/）到简单标识符（如foobar）的任何内容。" target="_blank" rel="external">http://elastic.co/）到简单标识符（如foobar）的任何内容。</a> 如果URI包含密码，例如http：// user：pass@example.net，则不会记录或打印URI的密码部分。</li>
</ol>
<p>例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">my_uri =&gt; &quot;http://foo:bar@example.net&quot;</div></pre></td></tr></table></figure></p>
<ol>
<li>路径<br>路径是表示有效操作系统路径的字符串。</li>
</ol>
<p>例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">my_path =&gt; &quot;/tmp/logstash&quot;</div></pre></td></tr></table></figure></p>
<ol>
<li>字符串<br>字符串必须是单个字符序列。 请注意，字符串值用双引号或单引号括起来。 字符串中的字面引号需要使用反斜杠转义，如果它们与字符串分隔符相同，即单引号字符串中的单引号需要转义，以及双引号字符串中的双引号。</li>
</ol>
<p>例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">name =&gt; &quot;Hello world&quot;</div><div class="line">name =&gt; &apos;It\&apos;s a beautiful day&apos;</div></pre></td></tr></table></figure></p>
<h4 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h4><p>注释与perl，ruby和python中的注释相同。 注释以＃字符开头，不需要在行的开头。 例如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"># this is a comment</div><div class="line"></div><div class="line">input &#123; # comments can appear at the end of a line, too</div><div class="line">  # ...</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="事件相关配置"><a href="#事件相关配置" class="headerlink" title="事件相关配置"></a>事件相关配置</h3><p>logstash代理是一个具有3个阶段的处理流水线：输入→过滤器→输出。 输入生成事件，过滤器修改它们，输出发送到其他地方。</p>
<p>所有事件都有属性。 例如，apache访问日志将具有诸如状态代码（200,404），请求路径（“/”，“index.html”），HTTP动词（GET，POST），客户端IP地址等的东西.Logstash调用这些 属性“字段。</p>
<p>Logstash中的一些配置选项需要存在字段才能运行。 因为输入生成事件，所以在输入块中没有要计算的字段 - 它们不存在！</p>
<p>由于它们依赖于事件和字段，因此以下配置选项只能在过滤器和输出块中使用。</p>
<blockquote>
<p>重要: 下面描述的字段引用，sprintf格式和条件不会在输入块中工作。</p>
</blockquote>
<h4 id="字段引用"><a href="#字段引用" class="headerlink" title="字段引用"></a>字段引用</h4><p>通过名称引用字段通常很有用。 为此，可以使用Logstash字段引用语法。</p>
<p>访问字段的语法是[fieldname]。 如果您要引用顶级字段，则可以省略[]，只需使用fieldname。 要引用嵌套字段，请指定该字段的完整路径：[顶级字段] [嵌套字段]。</p>
<p>例如，以下事件有五个顶级字段（代理，ip，请求，响应，ua）和三个嵌套字段（状态，字节，os）。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  &quot;agent&quot;: &quot;Mozilla/5.0 (compatible; MSIE 9.0)&quot;,</div><div class="line">  &quot;ip&quot;: &quot;192.168.24.44&quot;,</div><div class="line">  &quot;request&quot;: &quot;/index.html&quot;</div><div class="line">  &quot;response&quot;: &#123;</div><div class="line">    &quot;status&quot;: 200,</div><div class="line">    &quot;bytes&quot;: 52353</div><div class="line">  &#125;,</div><div class="line">  &quot;ua&quot;: &#123;</div><div class="line">    &quot;os&quot;: &quot;Windows 7&quot;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>要引用os字段，请指定[ua] [os]。 要引用顶级字段（如请求），您只需指定字段名称即可。</p>
<h4 id="sprintf格式"><a href="#sprintf格式" class="headerlink" title="sprintf格式"></a>sprintf格式</h4><p>字段引用格式也用于Logstash调用sprintf格式。 此格式允许您引用其他字符串中的字段值。 例如，statsd输出具有增量设置，使您能够通过状态代码保留apache日志的计数：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">output &#123;</div><div class="line">  statsd &#123;</div><div class="line">    increment =&gt; &quot;apache.%&#123;[response][status]&#125;&quot;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>您还可以使用此sprintf格式来格式化时间。 而不是指定字段名称，请使用+ FORMAT语法，其中FORMAT是时间格式。</p>
<p>例如，如果要使用文件输出根据小时和类型字段写入日志：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">output &#123;</div><div class="line">  file &#123;</div><div class="line">    path =&gt; &quot;/var/log/%&#123;type&#125;.%&#123;+yyyy.MM.dd.HH&#125;&quot;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h4 id="条件"><a href="#条件" class="headerlink" title="条件"></a>条件</h4><p>有时您只想在特定条件下过滤或输出事件。 为此，您可以使用条件。</p>
<p>Logstash中的条件看起来和行为方式与在编程语言中相同。 条件支持if，else if和else语句并且可以嵌套。</p>
<p>条件语法是：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">if EXPRESSION &#123;</div><div class="line">  ...</div><div class="line">&#125; else if EXPRESSION &#123;</div><div class="line">  ...</div><div class="line">&#125; else &#123;</div><div class="line">  ...</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>什么是表达式？ 比较测试，布尔逻辑等等！</p>
<p>您可以使用以下比较运算符：</p>
<ul>
<li>equality：==，！=，&lt;，&gt;，&lt;=，&gt; =</li>
<li>regex：=〜，！〜（在左边检查一个字符串值的模式）</li>
<li>包含：in，not in</li>
</ul>
<p>支持的布尔运算符为：</p>
<ul>
<li>and, or, nand, xor</li>
</ul>
<p>支持的一元运算符是：</p>
<ul>
<li>!</li>
</ul>
<p>表达式可以长而复杂。 表达式可以包含其他表达式，可以使用！否定表达式，并且可以使用括号（…）将它们分组。</p>
<p>例如，如果字段操作的值为login，则以下条件使用mutate过滤器删除字段secret：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">filter &#123;</div><div class="line">  if [action] == &quot;login&quot; &#123;</div><div class="line">    mutate &#123; remove_field =&gt; &quot;secret&quot; &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>您可以指定单个条件的多个表达式：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">output &#123;</div><div class="line">  # Send production errors to pagerduty</div><div class="line">  if [loglevel] == &quot;ERROR&quot; and [deployment] == &quot;production&quot; &#123;</div><div class="line">    pagerduty &#123;</div><div class="line">    ...</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>您可以使用in运算符来测试字段是否包含特定字符串，键或（对于lists）元素：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">filter &#123;</div><div class="line">  if [foo] in [foobar] &#123;</div><div class="line">    mutate &#123; add_tag =&gt; &quot;field in field&quot; &#125;</div><div class="line">  &#125;</div><div class="line">  if [foo] in &quot;foo&quot; &#123;</div><div class="line">    mutate &#123; add_tag =&gt; &quot;field in string&quot; &#125;</div><div class="line">  &#125;</div><div class="line">  if &quot;hello&quot; in [greeting] &#123;</div><div class="line">    mutate &#123; add_tag =&gt; &quot;string in field&quot; &#125;</div><div class="line">  &#125;</div><div class="line">  if [foo] in [&quot;hello&quot;, &quot;world&quot;, &quot;foo&quot;] &#123;</div><div class="line">    mutate &#123; add_tag =&gt; &quot;field in list&quot; &#125;</div><div class="line">  &#125;</div><div class="line">  if [missing] in [alsomissing] &#123;</div><div class="line">    mutate &#123; add_tag =&gt; &quot;shouldnotexist&quot; &#125;</div><div class="line">  &#125;</div><div class="line">  if !(&quot;foo&quot; in [&quot;hello&quot;, &quot;world&quot;]) &#123;</div><div class="line">    mutate &#123; add_tag =&gt; &quot;shouldexist&quot; &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>你使用不是在条件相同的方式。 例如，当grok成功时，您可以使用not in仅将事件路由到Elasticsearch：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">output &#123;</div><div class="line">  if &quot;_grokparsefailure&quot; not in [tags] &#123;</div><div class="line">    elasticsearch &#123; ... &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>您可以检查特定字段的存在，但是目前没有办法区分不存在的字段和简单为false的字段。 表达式if [foo]在以下情况下返回false：</p>
<ul>
<li>[foo]在事件中不存在，</li>
<li>[foo]存在于事件中，但是为false，或</li>
<li>[foo]存在于事件中，但是无</li>
</ul>
<p>有关更复杂的示例，<a href="https://www.elastic.co/guide/en/logstash/current/config-examples.html#using-conditionals" target="_blank" rel="external">请参阅使用条件</a>。</p>
<h4 id="metadata字段"><a href="#metadata字段" class="headerlink" title="\@metadata字段"></a>\@metadata字段</h4><p>在Logstash 1.5和更高版本中，有一个称为@metadata的特殊字段。 @metadata的内容在输出时不会成为任何事件的一部分，这使得它非常适合用于条件语句，或扩展和构建具有字段引用和sprintf格式的事件字段。</p>
<p>以下配置文件将从STDIN产生事件。 无论键入什么将成为事件中的消息字段。 过滤器块中的mutate事件将添加几个字段，一些嵌套在@metadata字段中。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">input &#123; stdin &#123; &#125; &#125;</div><div class="line"></div><div class="line">filter &#123;</div><div class="line">  mutate &#123; add_field =&gt; &#123; &quot;show&quot; =&gt; &quot;This data will be in the output&quot; &#125; &#125;</div><div class="line">  mutate &#123; add_field =&gt; &#123; &quot;[@metadata][test]&quot; =&gt; &quot;Hello&quot; &#125; &#125;</div><div class="line">  mutate &#123; add_field =&gt; &#123; &quot;[@metadata][no_show]&quot; =&gt; &quot;This data will not be in the output&quot; &#125; &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">output &#123;</div><div class="line">  if [@metadata][test] == &quot;Hello&quot; &#123;</div><div class="line">    stdout &#123; codec =&gt; rubydebug &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>让我们看看出来：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">$ bin/logstash -f ../test.conf</div><div class="line">Settings: Default pipeline workers: 8</div><div class="line">Pipeline main started</div><div class="line">asdf</div><div class="line">&#123;</div><div class="line">       &quot;message&quot; =&gt; &quot;asdf&quot;,</div><div class="line">      &quot;@version&quot; =&gt; &quot;1&quot;,</div><div class="line">    &quot;@timestamp&quot; =&gt; &quot;2016-06-30T02:08:03.148Z&quot;,</div><div class="line">          &quot;host&quot; =&gt; &quot;example.com&quot;,</div><div class="line">          &quot;show&quot; =&gt; &quot;This data will be in the output&quot;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>输入的“asdf”成为消息字段内容，条件成功地评估嵌套在@metadata字段中的测试字段的内容。 但是输出没有显示一个称为@metadata或其内容的字段。</p>
<p>rubydebug编解码器允许您显示@metadata字段的内容，如果添加配置标志，metadata =&gt; true：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">stdout &#123; codec =&gt; rubydebug &#123; metadata =&gt; true &#125; &#125;</div></pre></td></tr></table></figure></p>
<p>让我们看看这个变化的输出：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">$ bin/logstash -f ../test.conf</div><div class="line">Settings: Default pipeline workers: 8</div><div class="line">Pipeline main started</div><div class="line">asdf</div><div class="line">&#123;</div><div class="line">       &quot;message&quot; =&gt; &quot;asdf&quot;,</div><div class="line">      &quot;@version&quot; =&gt; &quot;1&quot;,</div><div class="line">    &quot;@timestamp&quot; =&gt; &quot;2016-06-30T02:10:25.044Z&quot;,</div><div class="line">          &quot;host&quot; =&gt; &quot;example.com&quot;,</div><div class="line">          &quot;show&quot; =&gt; &quot;This data will be in the output&quot;,</div><div class="line">     &quot;@metadata&quot; =&gt; &#123;</div><div class="line">           &quot;test&quot; =&gt; &quot;Hello&quot;,</div><div class="line">        &quot;no_show&quot; =&gt; &quot;This data will not be in the output&quot;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>现在，您可以看到@metadata字段及其子字段。</p>
<blockquote>
<p>重要: 只有rubydebug编解码器允许您显示@metadata字段的内容。</p>
</blockquote>
<p>每当您需要一个临时字段，但不希望它在最终输出中时，使用@metadata字段。</p>
<p>也许这个新字段最常见的用例之一是使用日期过滤器并具有临时时间戳。</p>
<p>此配置文件已经过简化，但使用Apache和Nginx Web服务器通用的时间戳格式。 在过去，您必须自己删除时间戳字段，在使用它覆盖@timestamp字段后。 使用@metadata字段，不再需要：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">input &#123; stdin &#123; &#125; &#125;</div><div class="line"></div><div class="line">filter &#123;</div><div class="line">  grok &#123; match =&gt; [ &quot;message&quot;, &quot;%&#123;HTTPDATE:[@metadata][timestamp]&#125;&quot; ] &#125;</div><div class="line">  date &#123; match =&gt; [ &quot;[@metadata][timestamp]&quot;, &quot;dd/MMM/yyyy:HH:mm:ss Z&quot; ] &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">output &#123;</div><div class="line">  stdout &#123; codec =&gt; rubydebug &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>请注意，此配置将提取的数据放入grok过滤器中的[\@metadata] [timestamp]字段中。 让我们给这个配置一个示例日期字符串，看看什么出来：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">$ bin/logstash -f ../test.conf</div><div class="line">Settings: Default pipeline workers: 8</div><div class="line">Pipeline main started</div><div class="line">&#123;</div><div class="line">       &quot;message&quot; =&gt; &quot;02/Mar/2014:15:36:43 +0100&quot;,</div><div class="line">      &quot;@version&quot; =&gt; &quot;1&quot;,</div><div class="line">    &quot;@timestamp&quot; =&gt; &quot;2014-03-02T14:36:43.000Z&quot;,</div><div class="line">          &quot;host&quot; =&gt; &quot;example.com&quot;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>而已！ 在输出中没有额外的字段，并且更干净的配置文件，因为您不必在日期过滤器中转换后删除“时间戳”字段。</p>
<p>另一个用例是CouchDB Changes输入插件（请参阅<a href="https://github.com/logstash-plugins/logstash-input-couchdb_changes）。" target="_blank" rel="external">https://github.com/logstash-plugins/logstash-input-couchdb_changes）。</a> 此插件会自动将CouchDB文档字段元数据捕获到输入插件本身的@metadata字段中。 当事件通过以由Elasticsearch索引时，Elasticsearch输出插件允许您指定操作（删除，更新，插入等）和document_id，如下所示：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">output &#123;</div><div class="line">  elasticsearch &#123;</div><div class="line">    action =&gt; &quot;%&#123;[@metadata][action]&#125;&quot;</div><div class="line">    document_id =&gt; &quot;%&#123;[@metadata][_id]&#125;&quot;</div><div class="line">    hosts =&gt; [&quot;example.com&quot;]</div><div class="line">    index =&gt; &quot;index_name&quot;</div><div class="line">    protocol =&gt; &quot;http&quot;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="在配置中使用环境变量"><a href="#在配置中使用环境变量" class="headerlink" title="在配置中使用环境变量"></a>在配置中使用环境变量</h3><p>此功能是实验性的，要启用它，您将需要使用–allow-env标志运行logstash。</p>
<h4 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h4><ul>
<li>您可以使用${var}在Logstash插件的配置中设置环境变量引用。</li>
<li>在Logstash启动时，每个引用将由环境变量的值替换。</li>
<li>替换是区分大小写的。</li>
<li>对未定义变量的引用引发Logstash配置错误。</li>
<li>您可以使用${var：default value}形式提供默认值。 如果环境变量未定义，Logstash使用默认值。</li>
<li>您可以在任何插件选项类型中添加环境变量引用：string，number，boolean，array或hash。</li>
<li>环境变量是不可变的。 如果更新环境变量，则必须重新启动Logstash以获取更新的值。</li>
</ul>
<h4 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h4><p>以下示例说明如何使用环境变量设置一些常用配置选项的值。</p>
<h5 id="设置TCP端口"><a href="#设置TCP端口" class="headerlink" title="设置TCP端口"></a>设置TCP端口</h5><p>下面是一个使用环境变量设置TCP端口的示例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">input &#123;</div><div class="line">  tcp &#123;</div><div class="line">    port =&gt; &quot;$&#123;TCP_PORT&#125;&quot;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>现在让我们设置TCP_PORT的值：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">export TCP_PORT=12345</div></pre></td></tr></table></figure></p>
<p>在启动时，Logstash使用以下配置：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">input &#123;</div><div class="line">  tcp &#123;</div><div class="line">    port =&gt; 12345</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>如果未设置TCP_PORT环境变量，则Logstash返回配置错误。</p>
<p>您可以通过指定默认值来解决此问题：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">input &#123;</div><div class="line">  tcp &#123;</div><div class="line">    port =&gt; &quot;$&#123;TCP_PORT:54321&#125;&quot;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>现在，如果变量未定义，而不是返回配置错误，Logstash使用默认值：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">input &#123;</div><div class="line">  tcp &#123;</div><div class="line">    port =&gt; 54321</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>如果定义了环境变量，Logstash将使用为变量指定的值，而不是默认值。</p>
<h5 id="设置标签的值"><a href="#设置标签的值" class="headerlink" title="设置标签的值"></a>设置标签的值</h5><p>以下是使用环境变量设置标记值的示例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">filter &#123;</div><div class="line">  mutate &#123;</div><div class="line">    add_tag =&gt; [ &quot;tag1&quot;, &quot;$&#123;ENV_TAG&#125;&quot; ]</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>我们设置ENV_TAG的值：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">export ENV_TAG=&quot;tag2&quot;</div></pre></td></tr></table></figure></p>
<p>在启动时，Logstash使用以下配置：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">filter &#123;</div><div class="line">  mutate &#123;</div><div class="line">    add_tag =&gt; [ &quot;tag1&quot;, &quot;tag2&quot; ]</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h5 id="设置文件路径"><a href="#设置文件路径" class="headerlink" title="设置文件路径"></a>设置文件路径</h5><p>下面是一个使用环境变量设置日志文件路径的示例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">filter &#123;</div><div class="line">  mutate &#123;</div><div class="line">    add_field =&gt; &#123;</div><div class="line">      &quot;my_path&quot; =&gt; &quot;$&#123;HOME&#125;/file.log&quot;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>让我们设置HOME的值：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">export HOME=&quot;/path&quot;</div></pre></td></tr></table></figure></p>
<p>在启动时，Logstash使用以下配置：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">filter &#123;</div><div class="line">  mutate &#123;</div><div class="line">    add_field =&gt; &#123;</div><div class="line">      &quot;my_path&quot; =&gt; &quot;/path/file.log&quot;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="Logstash配置示例"><a href="#Logstash配置示例" class="headerlink" title="Logstash配置示例"></a>Logstash配置示例</h3><p>以下示例说明如何配置Logstash以过滤事件，处理Apache日志和syslog消息，以及使用条件控制过滤器或输出处理哪些事件。</p>
<h4 id="配置过滤器"><a href="#配置过滤器" class="headerlink" title="配置过滤器"></a>配置过滤器</h4><p>过滤器是一种内联处理机制，可以灵活地根据您的需要对数据进行切片和切片。 让我们来看看一些行动中的过滤器。 以下配置文件设置grok和日期过滤器。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">input &#123; stdin &#123; &#125; &#125;</div><div class="line"></div><div class="line">filter &#123;</div><div class="line">  grok &#123;</div><div class="line">    match =&gt; &#123; &quot;message&quot; =&gt; &quot;%&#123;COMBINEDAPACHELOG&#125;&quot; &#125;</div><div class="line">  &#125;</div><div class="line">  date &#123;</div><div class="line">    match =&gt; [ &quot;timestamp&quot; , &quot;dd/MMM/yyyy:HH:mm:ss Z&quot; ]</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">output &#123;</div><div class="line">  elasticsearch &#123; hosts =&gt; [&quot;localhost:9200&quot;] &#125;</div><div class="line">  stdout &#123; codec =&gt; rubydebug &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>使用此配置运行Logstash：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">bin/logstash -f logstash-filter.conf</div></pre></td></tr></table></figure></p>
<p>现在，将以下行粘贴到您的终端，以便它将被stdin输入处理：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">127.0.0.1 - - [11/Dec/2013:00:01:45 -0800] &quot;GET /xampp/status.php HTTP/1.1&quot; 200 3891 &quot;http://cadenza/xampp/navi.php&quot; &quot;Mozilla/5.0 (Macintosh; Intel Mac OS X 10.9; rv:25.0) Gecko/20100101 Firefox/25.0&quot;</div></pre></td></tr></table></figure></p>
<p>你应该看到一些返回到stdout的东西，看起来像这样：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">        &quot;message&quot; =&gt; &quot;127.0.0.1 - - [11/Dec/2013:00:01:45 -0800] \&quot;GET /xampp/status.php HTTP/1.1\&quot; 200 3891 \&quot;http://cadenza/xampp/navi.php\&quot; \&quot;Mozilla/5.0 (Macintosh; Intel Mac OS X 10.9; rv:25.0) Gecko/20100101 Firefox/25.0\&quot;&quot;,</div><div class="line">     &quot;@timestamp&quot; =&gt; &quot;2013-12-11T08:01:45.000Z&quot;,</div><div class="line">       &quot;@version&quot; =&gt; &quot;1&quot;,</div><div class="line">           &quot;host&quot; =&gt; &quot;cadenza&quot;,</div><div class="line">       &quot;clientip&quot; =&gt; &quot;127.0.0.1&quot;,</div><div class="line">          &quot;ident&quot; =&gt; &quot;-&quot;,</div><div class="line">           &quot;auth&quot; =&gt; &quot;-&quot;,</div><div class="line">      &quot;timestamp&quot; =&gt; &quot;11/Dec/2013:00:01:45 -0800&quot;,</div><div class="line">           &quot;verb&quot; =&gt; &quot;GET&quot;,</div><div class="line">        &quot;request&quot; =&gt; &quot;/xampp/status.php&quot;,</div><div class="line">    &quot;httpversion&quot; =&gt; &quot;1.1&quot;,</div><div class="line">       &quot;response&quot; =&gt; &quot;200&quot;,</div><div class="line">          &quot;bytes&quot; =&gt; &quot;3891&quot;,</div><div class="line">       &quot;referrer&quot; =&gt; &quot;\&quot;http://cadenza/xampp/navi.php\&quot;&quot;,</div><div class="line">          &quot;agent&quot; =&gt; &quot;\&quot;Mozilla/5.0 (Macintosh; Intel Mac OS X 10.9; rv:25.0) Gecko/20100101 Firefox/25.0\&quot;&quot;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>如您所见，Logstash（在grok过滤器的帮助下）能够解析日志行（恰巧是以“组合日志”格式），并将其分解成许多不同的离散信息位。当您开始查询和分析我们的日志数据时，这是非常有用的。例如，您可以轻松地生成有关HTTP响应代码，IP地址，引荐来源网址等的报告。 Logstash包含了很多grok模式，所以很可能如果你需要解析一个通用的日志格式，有人已经为你做了工作。有关更多信息，请参阅GitHub上的Logstash grok模式列表。</p>
<p>在此示例中使用的其他过滤器是日期过滤器。此过滤器解析时间戳，并将其用作事件的时间戳（无论您何时接收日志数据）。您会注意到，此示例中的@timestamp字段设置为2013年12月11日，即使Logstash之后在某个时间点获取了事件。这在回填日志时很方便。它使您能够告诉Logstash“将此值用作此事件的时间戳”。</p>
<h4 id="处理Apache日志"><a href="#处理Apache日志" class="headerlink" title="处理Apache日志"></a>处理Apache日志</h4><p>让我们做一些实际有用的事情：process apache2 access log files！ 我们将从localhost上的文件中读取输入，并使用条件来根据我们的需要处理事件。 首先，创建一个名为logstash-apache.conf的文件，其中包含以下内容（您可以更改日志的文件路径以满足您的需要）：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">input &#123;</div><div class="line">  file &#123;</div><div class="line">    path =&gt; &quot;/tmp/access_log&quot;</div><div class="line">    start_position =&gt; &quot;beginning&quot;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">filter &#123;</div><div class="line">  if [path] =~ &quot;access&quot; &#123;</div><div class="line">    mutate &#123; replace =&gt; &#123; &quot;type&quot; =&gt; &quot;apache_access&quot; &#125; &#125;</div><div class="line">    grok &#123;</div><div class="line">      match =&gt; &#123; &quot;message&quot; =&gt; &quot;%&#123;COMBINEDAPACHELOG&#125;&quot; &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  date &#123;</div><div class="line">    match =&gt; [ &quot;timestamp&quot; , &quot;dd/MMM/yyyy:HH:mm:ss Z&quot; ]</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">output &#123;</div><div class="line">  elasticsearch &#123;</div><div class="line">    hosts =&gt; [&quot;localhost:9200&quot;]</div><div class="line">  &#125;</div><div class="line">  stdout &#123; codec =&gt; rubydebug &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>然后，使用以下日志条目（或使用自己的Web服务器中的一些）创建上面配置的输入文件（在本例中为“/ tmp / access log”）：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">71.141.244.242 - kurt [18/May/2011:01:48:10 -0700] &quot;GET /admin HTTP/1.1&quot; 301 566 &quot;-&quot; &quot;Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US; rv:1.9.2.3) Gecko/20100401 Firefox/3.6.3&quot;</div><div class="line">134.39.72.245 - - [18/May/2011:12:40:18 -0700] &quot;GET /favicon.ico HTTP/1.1&quot; 200 1189 &quot;-&quot; &quot;Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 5.1; Trident/4.0; .NET CLR 2.0.50727; .NET CLR 3.0.4506.2152; .NET CLR 3.5.30729; InfoPath.2; .NET4.0C; .NET4.0E)&quot;</div><div class="line">98.83.179.51 - - [18/May/2011:19:35:08 -0700] &quot;GET /css/main.css HTTP/1.1&quot; 200 1837 &quot;http://www.safesand.com/information.htm&quot; &quot;Mozilla/5.0 (Windows NT 6.0; WOW64; rv:2.0.1) Gecko/20100101 Firefox/4.0.1&quot;</div></pre></td></tr></table></figure></p>
<p>现在，使用-f标志运行Logstash以传递配置文件：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">bin/logstash -f logstash-apache.conf</div></pre></td></tr></table></figure></p>
<p>现在你应该在Elasticsearch中看到你的apache日志数据！ Logstash打开并读取指定的输入文件，处理遇到的每个事件。 记录到此文件的任何其他行也将被捕获，由Logstash作为事件处理，并存储在Elasticsearch中。 作为附加的好处，它们被存储为字段“type”设置为“apache_access”（这通过输入配置中的类型⇒“apache_access”行来完成）。</p>
<p>在此配置中，Logstash只监视apache access_log，但通过更改上述配置中的一行，可以轻松查看access_log和error_log（实际上，任何匹配* log的文件）：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">input &#123;</div><div class="line">  file &#123;</div><div class="line">    path =&gt; &quot;/tmp/*_log&quot;</div><div class="line">...</div></pre></td></tr></table></figure></p>
<p>当您重新启动Logstash时，它将处理错误日志和访问日志。 但是，如果您检查数据（可能使用elasticsearch-kopf），您会看到access_log被分解为离散字段，但error_log不是。 这是因为我们使用一个grok过滤器来匹配标准的组合apache日志格式，并自动将数据分割成单独的字段。 如果我们可以控制一行是如何解析的，根据它的格式不是很好吗？ 好吧，我们可以…</p>
<p>注意，Logstash没有重新处理已经在access_log文件中看到的事件。 当从文件读取时，Logstash保存其位置，并且只有在添加新行时才处理新行。 整齐！</p>
<h4 id="使用条件"><a href="#使用条件" class="headerlink" title="使用条件"></a>使用条件</h4><p>您可以使用条件控制过滤器或输出处理哪些事件。 例如，您可以根据出现在哪个文件（access_log，error_log和以“log”结尾的其他随机文件）标记每个事件。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">input &#123;</div><div class="line">  file &#123;</div><div class="line">    path =&gt; &quot;/tmp/*_log&quot;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">filter &#123;</div><div class="line">  if [path] =~ &quot;access&quot; &#123;</div><div class="line">    mutate &#123; replace =&gt; &#123; type =&gt; &quot;apache_access&quot; &#125; &#125;</div><div class="line">    grok &#123;</div><div class="line">      match =&gt; &#123; &quot;message&quot; =&gt; &quot;%&#123;COMBINEDAPACHELOG&#125;&quot; &#125;</div><div class="line">    &#125;</div><div class="line">    date &#123;</div><div class="line">      match =&gt; [ &quot;timestamp&quot; , &quot;dd/MMM/yyyy:HH:mm:ss Z&quot; ]</div><div class="line">    &#125;</div><div class="line">  &#125; else if [path] =~ &quot;error&quot; &#123;</div><div class="line">    mutate &#123; replace =&gt; &#123; type =&gt; &quot;apache_error&quot; &#125; &#125;</div><div class="line">  &#125; else &#123;</div><div class="line">    mutate &#123; replace =&gt; &#123; type =&gt; &quot;random_logs&quot; &#125; &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">output &#123;</div><div class="line">  elasticsearch &#123; hosts =&gt; [&quot;localhost:9200&quot;] &#125;</div><div class="line">  stdout &#123; codec =&gt; rubydebug &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>此示例使用类型字段标记所有事件，但实际上不会解析错误或随机文件。 有这么多类型的错误日志，他们应该如何标记真的取决于你正在使用什么日志。</p>
<p>类似地，您可以使用条件将事件定向到特定输出。 例如，您可以：</p>
<ul>
<li>警报任何具有状态5xx的apache事件的nagios</li>
<li>将任何4xx状态记录到Elasticsearch</li>
<li>通过statsd记录所有状态码的命中</li>
</ul>
<p>要告诉nagios任何具有5xx状态代码的http事件，您首先需要检查类型字段的值。 如果是apache，那么您可以检查状态字段是否包含5xx错误。 如果是，请将其发送到nagios。 如果不是5xx错误，请检查状态字段是否包含4xx错误。 如果是，请将其发送到Elasticsearch。 最后，无论状态字段包含以下内容，将所有apache状态代码发送到statsd：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">output &#123;</div><div class="line">  if [type] == &quot;apache&quot; &#123;</div><div class="line">    if [status] =~ /^5\d\d/ &#123;</div><div class="line">      nagios &#123; ...  &#125;</div><div class="line">    &#125; else if [status] =~ /^4\d\d/ &#123;</div><div class="line">      elasticsearch &#123; ... &#125;</div><div class="line">    &#125;</div><div class="line">    statsd &#123; increment =&gt; &quot;apache.%&#123;status&#125;&quot; &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="处理Syslog消息"><a href="#处理Syslog消息" class="headerlink" title="处理Syslog消息"></a>处理Syslog消息</h4><p>Syslog是Logstash最常见的用例之一，它处理得非常好（只要日志行大致符合RFC3164）。 Syslog是事实上的UNIX网络日志记录标准，通过rsyslog将消息从客户端计算机发送到本地文件或集中式日志服务器。 对于这个例子，你不需要一个正常的syslog实例; 我们将从命令行中伪造它，以便您可以感觉到发生了什么。</p>
<p>首先，让我们为Logstash + syslog创建一个简单的配置文件，称为logstash-syslog.conf。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">input &#123;</div><div class="line">  tcp &#123;</div><div class="line">    port =&gt; 5000</div><div class="line">    type =&gt; syslog</div><div class="line">  &#125;</div><div class="line">  udp &#123;</div><div class="line">    port =&gt; 5000</div><div class="line">    type =&gt; syslog</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">filter &#123;</div><div class="line">  if [type] == &quot;syslog&quot; &#123;</div><div class="line">    grok &#123;</div><div class="line">      match =&gt; &#123; &quot;message&quot; =&gt; &quot;%&#123;SYSLOGTIMESTAMP:syslog_timestamp&#125; %&#123;SYSLOGHOST:syslog_hostname&#125; %&#123;DATA:syslog_program&#125;(?:\[%&#123;POSINT:syslog_pid&#125;\])?: %&#123;GREEDYDATA:syslog_message&#125;&quot; &#125;</div><div class="line">      add_field =&gt; [ &quot;received_at&quot;, &quot;%&#123;@timestamp&#125;&quot; ]</div><div class="line">      add_field =&gt; [ &quot;received_from&quot;, &quot;%&#123;host&#125;&quot; ]</div><div class="line">    &#125;</div><div class="line">    date &#123;</div><div class="line">      match =&gt; [ &quot;syslog_timestamp&quot;, &quot;MMM  d HH:mm:ss&quot;, &quot;MMM dd HH:mm:ss&quot; ]</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">output &#123;</div><div class="line">  elasticsearch &#123; hosts =&gt; [&quot;localhost:9200&quot;] &#125;</div><div class="line">  stdout &#123; codec =&gt; rubydebug &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>使用此新配置运行Logstash：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">bin/logstash -f logstash-syslog.conf</div></pre></td></tr></table></figure></p>
<p>通常，客户端机器将连接到端口5000上的Logstash实例并发送其消息。 对于这个例子，我们将telnet到Logstash并输入日志行（类似于我们之前输入的日志行到STDIN）。 打开另一个shell窗口以与Logstash syslog输入进行交互并输入以下命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">telnet localhost 5000</div></pre></td></tr></table></figure></p>
<p>复制并粘贴以下行作为示例。 （随意尝试一些自己的，但记住，如果grok过滤器不正确的数据，他们可能不会解析）。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Dec 23 12:11:43 louis postfix/smtpd[31499]: connect from unknown[95.75.93.154]</div><div class="line">Dec 23 14:42:56 louis named[16000]: client 199.48.164.7#64817: query (cache) &apos;amsterdamboothuren.com/MX/IN&apos; denied</div><div class="line">Dec 23 14:30:01 louis CRON[619]: (www-data) CMD (php /usr/share/cacti/site/poller.php &gt;/dev/null 2&gt;/var/log/cacti/poller-error.log)</div><div class="line">Dec 22 18:28:06 louis rsyslogd: [origin software=&quot;rsyslogd&quot; swVersion=&quot;4.2.0&quot; x-pid=&quot;2253&quot; x-info=&quot;http://www.rsyslog.com&quot;] rsyslogd was HUPed, type &apos;lightweight&apos;.</div></pre></td></tr></table></figure></p>
<p>现在，在处理和解析消息时，您应该在原始shell中看到Logstash的输出！<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">                 &quot;message&quot; =&gt; &quot;Dec 23 14:30:01 louis CRON[619]: (www-data) CMD (php /usr/share/cacti/site/poller.php &gt;/dev/null 2&gt;/var/log/cacti/poller-error.log)&quot;,</div><div class="line">              &quot;@timestamp&quot; =&gt; &quot;2013-12-23T22:30:01.000Z&quot;,</div><div class="line">                &quot;@version&quot; =&gt; &quot;1&quot;,</div><div class="line">                    &quot;type&quot; =&gt; &quot;syslog&quot;,</div><div class="line">                    &quot;host&quot; =&gt; &quot;0:0:0:0:0:0:0:1:52617&quot;,</div><div class="line">        &quot;syslog_timestamp&quot; =&gt; &quot;Dec 23 14:30:01&quot;,</div><div class="line">         &quot;syslog_hostname&quot; =&gt; &quot;louis&quot;,</div><div class="line">          &quot;syslog_program&quot; =&gt; &quot;CRON&quot;,</div><div class="line">              &quot;syslog_pid&quot; =&gt; &quot;619&quot;,</div><div class="line">          &quot;syslog_message&quot; =&gt; &quot;(www-data) CMD (php /usr/share/cacti/site/poller.php &gt;/dev/null 2&gt;/var/log/cacti/poller-error.log)&quot;,</div><div class="line">             &quot;received_at&quot; =&gt; &quot;2013-12-23 22:49:22 UTC&quot;,</div><div class="line">           &quot;received_from&quot; =&gt; &quot;0:0:0:0:0:0:0:1:52617&quot;,</div><div class="line">    &quot;syslog_severity_code&quot; =&gt; 5,</div><div class="line">    &quot;syslog_facility_code&quot; =&gt; 1,</div><div class="line">         &quot;syslog_facility&quot; =&gt; &quot;user-level&quot;,</div><div class="line">         &quot;syslog_severity&quot; =&gt; &quot;notice&quot;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="重新加载配置文件"><a href="#重新加载配置文件" class="headerlink" title="重新加载配置文件"></a>重新加载配置文件</h3><p>从Logstash 2.3开始，您可以将Logstash设置为自动检测和重新加载配置更改。</p>
<p>要启用自动配置重新加载，请使用指定的–auto-reload（或-r）命令行选项启动Logstash。 例如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">bin/logstash –f apache.config --auto-reload</div></pre></td></tr></table></figure></p>
<blockquote>
<p>当您从命令行指定要在配置设置中传递的-e标志时，–auto-reload选项不可用。</p>
</blockquote>
<p>默认情况下，Logstash每3秒检查一次配置更改。 要更改此时间间隔，请使用–reload-interval <seconds>选项，其中seconds指定Logstash检查配置文件以进行更改的频率。</seconds></p>
<p>如果Logstash已在运行但未启用自动重新加载，则可以强制Logstash重新加载配置文件，并通过向运行Logstash的进程发送SIGHUP（信号挂断）来重新启动管道。 例如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">kill -1 14175</div></pre></td></tr></table></figure></p>
<p>其中14175是运行Logstash的进程的ID。</p>
<h5 id="自动配置重新加载的工作原理"><a href="#自动配置重新加载的工作原理" class="headerlink" title="自动配置重新加载的工作原理"></a>自动配置重新加载的工作原理</h5><p>当Logstash检测到配置文件中的更改时，它会通过停止所有输入来停止当前管道，并尝试创建使用更新配置的新管道。 在验证新配置的语法后，Logstash验证所有输入和输出都可以初始化（例如，所有需要的端口都打开）。 如果检查成功，Logstash将使用新管道交换现有管道。 如果检查失败，旧的管道继续运行，并且错误传播到控制台。</p>
<p>在自动配置重新加载期间，JVM不会重新启动。 管道的创建和交换都发生在同一过程中。</p>
<h3 id="命令行标志"><a href="#命令行标志" class="headerlink" title="命令行标志"></a>命令行标志</h3><p>Logstash有以下标志。 您可以使用–help标志来显示此信息。</p>
<ul>
<li><p>-f, –config CONFIG_PATH<br>从特定文件或目录加载Logstash配置。 如果给定目录，那个目录中的所有文件将按字典顺序连接，然后解析为单个配置文件。 您还可以指定通配符（globs）和任何匹配的文件将按照上述顺序加载。</p>
</li>
<li><p>-e CONFIG_STRING<br>使用给定的字符串作为配置数据。 与配置文件相同的语法。 如果未指定输入，则使用以下命令作为默认输入：input {stdin {type =&gt; stdin}}，如果未指定输出，则使用以下命令作为默认输出：output {stdout {codec = rubydebug}}。 如果您希望使用两个默认值，请使用空字符串作为-e标志。 默认值为“”。</p>
</li>
<li><p>-w, –pipeline-workers COUNT<br>设置要运行的管道工作线程的数量。 默认值为8。</p>
</li>
<li><p>-b, –pipeline-batch-size SIZE<br>管道工作的批次大小。默认值为125.此参数定义单个工作线程在尝试执行其过滤器和输出之前将收集的最大事件数。 较大的批量大小通常更有效，但是以增加的内存开销为代价。 您可能必须通过设置LS_HEAP_SIZE变量来有效地使用该选项来增加JVM堆大小。</p>
</li>
<li><p>-u, –pipeline-batch-delay DELAY_IN_MS<br>在创建管道事件批处理时，在轮询下一个事件时等待的时间。 默认值为5ms。</p>
</li>
<li><p>-w, –filterworkers COUNT<br>DEPRECATED。 现在是–pipeline-workers和-w的别名。</p>
</li>
<li><p>-l, –log FILE<br>将Logstash内部日志写入给定文件。 没有这个标志，Logstash会将日志发送到标准输出。</p>
</li>
<li><p>-v<br>DEPRECATED。 增加Logstash内部日志的详细程度。 指定一次将显示信息日志。 指定两次会显示调试日志。 此标志已弃用。 您应该使用–verbose或–debug。</p>
</li>
<li><p>–quiet<br>Quieter Logstash日志记录。 这仅仅导致错误被发出。</p>
</li>
<li><p>–verbose<br>更详细的日志记录。 这导致发出信息级日志。</p>
</li>
<li><p>–debug<br>最详细的日志记录。 这将导致发出调试级日志。</p>
</li>
<li><p>–debug-config<br>将编译的配置ruby代码打印为调试日志（您还必须启用–debug）。 警告：这将包括传递到插件配置为明文的任何密码选项，并可能导致明文密码出现在您的日志！ 默认值为false。</p>
</li>
<li><p>-V, –version<br>发出Logstash及其朋友的版本，然后退出。</p>
</li>
<li><p>-p, –pluginpath PATH<br>一个在哪里找到插件的路径。 此标志可以多次提供以包括多个路径。 插件应该在特定的目录层次结构中：PATH / logstash / TYPE / NAME.rb其中TYPE是输入，过滤器，输出或编解码器，NAME是插件的名称。</p>
</li>
<li><p>-t, –configtest<br>检查配置的有效语法，然后退出。 注意，不使用此标志检查grok模式的正确性。 Logstash可以从目录中读取多个配置文件。 如果将此标志与–debug组合，Logstash将记录组合的配置文件，注释各个配置块与源文件。</p>
</li>
<li><p>–[no-]allow-unsafe-shutdown<br>强制Logstash在关机期间退出，即使内存中仍然存在飞行事件。 默认情况下，Logstash将拒绝退出，直到所有接收到的事件都被推送到输出。 默认值为false。</p>
</li>
<li><p>-r, –[no-]auto-reload<br>监视配置更改，并在配置更改时重新加载。 NOT：使用SIGHUP手动重新加载配置默认值为false。</p>
</li>
<li><p>–reload-interval RELOAD_INTERVAL<br>轮询轮询配置位置的频率（以秒为单位）。 默认值为3秒。</p>
</li>
<li><p>–allow-env<br>[实验性]此功能是实验性功能，可能会在将来的版本中完全更改或删除。 启用环境变量值的模板。 字符串中的$ {VAR}实例将替换为各自的名为“VAR”的环境变量值。 默认值为false。</p>
</li>
<li><p>–[no-]log-in-json<br>指定Logstash应以JSON格式写入自己的日志 - 每行一个事件。 如果为false，Logstash将使用Ruby的Object＃inspect（不容易进行机器解析）进行日志记录。 默认值为false。</p>
</li>
<li><p>-h, –help<br>打印帮助</p>
</li>
</ul>
<h3 id="管理多行事件"><a href="#管理多行事件" class="headerlink" title="管理多行事件"></a>管理多行事件</h3><p>几个用例生成跨越多行文本的事件。 为了正确处理这些多行事件，Logstash需要知道如何分辨哪些行是单个事件的一部分。</p>
<p>多线事件处理是复杂的，并且依赖于正确的事件排序。 保证有序日志处理的最好方法是尽可能早地在流水线中实现处理。 Logstash管道中的首选工具是多行编解码器，它使用一组简单的规则从单个输入合并行。</p>
<p>配置多线插件的最重要的方面如下：</p>
<ul>
<li>pattern选项指定正则表达式。 与指定的正则表达式匹配的行被视为上一行的连续或新的多行事件的开始。 您可以使用grok正则表达式模板与此配置选项。</li>
<li>what选项有两个值：previous或next。 上一个值指定与pattern选项中的值匹配的行是上一行的一部分。 下一个值指定与pattern选项中的值匹配的行是以下行的一部分。* negate选项将多行编解码器应用于与pattern选项中指定的正则表达式不匹配的行。</li>
</ul>
<p>有关配置选项的更多信息，请参阅多线编解码器或多线滤波器插件的完整文档。</p>
<blockquote>
<p>注意： 对于更复杂的需求，多线过滤器在处理的过滤阶段执行类似的任务，其中Logstash实例聚合多个输入。 多线过滤器插件不是线程安全的。 避免对多行过滤器使用多个过滤器工作。 您可以在此Github问题上跟踪升级多行编解码器功能的进度。</p>
</blockquote>
<h4 id="Multiline插件配置示例"><a href="#Multiline插件配置示例" class="headerlink" title="Multiline插件配置示例"></a>Multiline插件配置示例</h4><p>本节中的示例涵盖以下用例：</p>
<ul>
<li>将Java堆栈跟踪合并到单个事件中</li>
<li>将C风格的线延续组合成单个事件</li>
<li>组合来自时间戳事件的多个行</li>
</ul>
<h5 id="Java堆栈跟踪"><a href="#Java堆栈跟踪" class="headerlink" title="Java堆栈跟踪"></a>Java堆栈跟踪</h5><p>Java堆栈跟踪由多行组成，每行后面以空格开头，如下例所示：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Exception in thread &quot;main&quot; java.lang.NullPointerException</div><div class="line">        at com.example.myproject.Book.getTitle(Book.java:16)</div><div class="line">        at com.example.myproject.Author.getBookTitles(Author.java:25)</div><div class="line">        at com.example.myproject.Bootstrap.main(Bootstrap.java:14)</div></pre></td></tr></table></figure></p>
<p>要将这些行合并到Logstash中的单个事件中，请对多行编解码器使用以下配置：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">input &#123;</div><div class="line">  stdin &#123;</div><div class="line">    codec =&gt; multiline &#123;</div><div class="line">      pattern =&gt; &quot;^\s&quot;</div><div class="line">      what =&gt; &quot;previous&quot;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>此配置将以空格开头的任何行合并到上一行。</p>
<h5 id="连续的行"><a href="#连续的行" class="headerlink" title="连续的行"></a>连续的行</h5><p>一些编程语言使用行尾的\字符来表示行继续，如下例所示：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">printf (&quot;%10.10ld  \t %10.10ld \t %s\</div><div class="line">  %f&quot;, w, x, y, z );</div></pre></td></tr></table></figure></p>
<p>要将这些行合并到Logstash中的单个事件中，请对多行编解码器使用以下配置：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">input &#123;</div><div class="line">  stdin &#123;</div><div class="line">    codec =&gt; multiline &#123;</div><div class="line">      pattern =&gt; &quot;\\$&quot;</div><div class="line">      what =&gt; &quot;next&quot;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>此配置将以\字符结尾的任何行合并到以下行。</p>
<h5 id="时间戳"><a href="#时间戳" class="headerlink" title="时间戳"></a>时间戳</h5><p>来自服务（例如Elasticsearch）的活动日志通常以时间戳开头，后跟有关特定活动的信息，如下例所示：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[2015-08-24 11:49:14,389][INFO ][env                      ] [Letha] using [1] data paths, mounts [[/</div><div class="line">(/dev/disk1)]], net usable_space [34.5gb], net total_space [118.9gb], types [hfs]</div></pre></td></tr></table></figure></p>
<p>要将这些行合并到Logstash中的单个事件中，请对多行编解码器使用以下配置：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">input &#123;</div><div class="line">  file &#123;</div><div class="line">    path =&gt; &quot;/var/log/someapp.log&quot;</div><div class="line">    codec =&gt; multiline &#123;</div><div class="line">      pattern =&gt; &quot;^%&#123;TIMESTAMP_ISO8601&#125; &quot;</div><div class="line">      negate =&gt; true</div><div class="line">      what =&gt; previous</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>此配置使用negate选项指定不以时间戳开头的任何行属于上一行。</p>
<h3 id="部署和扩展Logstash"><a href="#部署和扩展Logstash" class="headerlink" title="部署和扩展Logstash"></a>部署和扩展Logstash</h3><p>随着Logstash的用例不断发展，给定规模的首选架构将发生变化。 本节从复杂性的增加顺序讨论一系列Logstash体系结构，从最小安装和向系统添加元素开始。 本节中的示例部署写入Elasticsearch集群，但Logstash可以写入大量的端点。</p>
<h4 id="最小安装"><a href="#最小安装" class="headerlink" title="最小安装"></a>最小安装</h4><p>最小Logstash安装具有一个Logstash实例和一个Elasticsearch实例。 这些实例是直接连接的。 Logstash使用输入插件来接收数据，并使用Elasticsearch输出插件来索引Elasticsearch中的数据，跟在Logstash处理管道之后。 Logstash实例具有基于实例的配置文件在启动时构建的固定管道。 您必须指定输入插件。 输出默认为stdout，并且管道的过滤部分（在下一部分中讨论）是可选的。</p>
<p><img src="http://n.sinaimg.cn/games/3ece443e/20161024/deploy_1.png" alt="img"></p>
<h4 id="使用过滤器"><a href="#使用过滤器" class="headerlink" title="使用过滤器"></a>使用过滤器</h4><p>日志数据通常是非结构化的，通常包含与您的用例无关的无关信息，有时缺少可从日志内容导出的相关信息。您可以使用过滤器插件来解析日志到字段，删除不必要的信息，并从现有字段中导出其他信息。例如，过滤器可以从IP地址导出地理位置信息，并将该信息添加到日志，或者使用grok过滤器解析和构造任意文本。</p>
<p>添加过滤器插件可能会显着影响性能，具体取决于过滤器插件执行的计算量，以及正在处理的日志的卷。 grok过滤器的正则表达式计算特别是资源密集型。解决这种对计算资源的增加的需求的一种方式是在多核机器上使用并行处理。使用-w开关设置Logstash过滤任务的执行线程数。例如，bin / logstash -w 8命令使用八个不同的线程进行过滤器处理。</p>
<p><img src="http://n.sinaimg.cn/games/3ece443e/20161024/deploy_2.png" alt="img"></p>
<h4 id="使用Filebeat"><a href="#使用Filebeat" class="headerlink" title="使用Filebeat"></a>使用Filebeat</h4><p>Filebeat是一个轻量级的，资源友好的工具，在Go中编写，从服务器上的文件收集日志，并将这些日志转发到其他机器进行处理。 Filebeat使用Beats协议与集中式Logstash实例通信。 配置接收Beats数据的Logstash实例以使用Beats输入插件。</p>
<p>Filebeat使用托管源数据的机器的计算资源，Beats输入插件将对Logstash实例的资源需求最小化，使得此架构对于具有资源约束的用例非常有吸引力。</p>
<p><img src="http://n.sinaimg.cn/games/3ece443e/20161024/deploy_3.png" alt="img"></p>
<h4 id="缩放到较大的Elasticsearch群集"><a href="#缩放到较大的Elasticsearch群集" class="headerlink" title="缩放到较大的Elasticsearch群集"></a>缩放到较大的Elasticsearch群集</h4><p>通常，Logstash不与单个Elasticsearch节点通信，而是与包含多个节点的集群通信。默认情况下，Logstash使用HTTP协议将数据移入集群。</p>
<p>您可以使用Elasticsearch HTTP REST API将数据索引到Elasticsearch集群中。这些API表示JSON中的索引数据。使用REST API不需要Java客户端类或任何其他JAR文件，并且与传输或节点协议相比没有性能上的缺点。您可以使用支持SSL和HTTP基本身份验证的Shield插件来保护使用HTTP REST API的通信。</p>
<p>使用HTTP协议时，您可以配置Logstash Elasticsearch输出插件，以自动在Elasticsearch集群中的指定主机集上负载平衡索引请求。指定多个Elasticsearch节点还通过将流量路由到活动的Elasticsearch节点来为Elasticsearch集群提供高可用性。</p>
<p>您还可以使用Elasticsearch Java API将数据序列化为二进制表示，使用传输协议。传输协议可以侦听请求的端点，并在Elasticsearch集群中选择任意客户端或数据节点。</p>
<p>使用HTTP或传输协议使Logstash实例与Elasticsearch集群分离。相反，节点协议使运行Logstash实例的机器加入Elasticsearch集群，运行Elasticsearch实例。需要索引的数据从此节点传播到集群的其余部分。由于机器是集群的一部分，因此集群拓扑可用，使得节点协议非常适合使用相对较少数量的持久连接的用例。</p>
<p>您还可以使用第三方硬件或软件负载平衡器来处理Logstash和外部应用程序之间的连接。</p>
<blockquote>
<p>注意: 请确保您的Logstash配置不直接连接到执行专用群集管理的Elasticsearch专用主节点。将Logstash连接到客户端或数据节点以保护Elasticsearch集群的稳定性。</p>
</blockquote>
<p><img src="http://n.sinaimg.cn/games/3ece443e/20161024/deploy_4.png" alt="img"></p>
<h4 id="管理吞吐量峰值与消息队列"><a href="#管理吞吐量峰值与消息队列" class="headerlink" title="管理吞吐量峰值与消息队列"></a>管理吞吐量峰值与消息队列</h4><p>当进入Logstash管道的数据超过Elasticsearch集群获取数据的能力时，可以使用消息队列作为缓冲区。默认情况下，当索引器使用率低于传入数据速率时，Logstash控制传入事件。由于此限制可能导致事件在数据源中缓冲，因此防止消息队列的背压成为管理部署的重要部分。</p>
<p>向Logstash部署添加消息队列还提供了防止数据丢失的级别。当从消息队列中消耗数据的Logstash实例失败时，数据可以从消息队列重播到活动Logstash实例。</p>
<p>存在多个第三方消息队列，例如Redis，Kafka或RabbitMQ。 Logstash提供输入和输出插件来与其中几个第三方消息队列集成。当Logstash部署配置了消息队列时，Logstash在功能上分为两个阶段：运送实例（用于处理消息队列中的数据提取和存储）和索引实例（从消息队列检索数据），应用任何配置的过滤，以及将过滤的数据写入Elasticsearch索引。</p>
<p><img src="http://n.sinaimg.cn/games/3ece443e/20161024/deploy_5.png" alt="img"></p>
<h4 id="多个连接用于Logstash高可用性"><a href="#多个连接用于Logstash高可用性" class="headerlink" title="多个连接用于Logstash高可用性"></a>多个连接用于Logstash高可用性</h4><p>要使Logstash部署对单个实例故障更具弹性，您可以在数据源计算机和Logstash集群之间设置负载均衡器。 负载平衡器处理与Logstash实例的各个连接，以确保即使在单个实例不可用时，数据提取和处理的连续性。</p>
<p><img src="http://n.sinaimg.cn/games/3ece443e/20161024/deploy_6.png" alt="img"></p>
<p>如果专用于该输入类型的Logstash实例不可用，则上图中的体系结构无法处理来自特定类型（例如RSS源或文件）的输入。 为了更稳健的输入处理，请为多个输入配置每个Logstash实例，如下图所示：<br><img src="http://n.sinaimg.cn/games/3ece443e/20161024/deploy_7.png" alt="img"></p>
<p>此架构根据您配置的输入来并行化Logstash工作负载。 使用更多输入，您可以添加更多Logstash实例以水平缩放。 独立的并行管道还通过消除单点故障来提高堆栈的可靠性。</p>
<h4 id="缩放Logstash"><a href="#缩放Logstash" class="headerlink" title="缩放Logstash"></a>缩放Logstash</h4><p>成熟的Logstash部署通常具有以下管道：</p>
<ul>
<li>输入层使用来自源的数据，并由具有正确输入插件的Logstash实例组成。</li>
<li>消息队列用作缓冲区以保存所接收的数据，并用作故障转移保护。</li>
<li>过滤器层对从消息队列消耗的数据应用解析和其他处理。</li>
<li>索引层将处理的数据移动到Elasticsearch中。</li>
</ul>
<p>这些层中的任何层可以通过添加计算资源来缩放。 随着用例的发展和根据需要添加资源，定期检查这些组件的性能。 当Logstash常规地限制传入事件时，请考虑为消息队列添加存储。 或者，通过添加更多Logstash索引实例来增加Elasticsearch集群的数据消耗速率。</p>
]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;版本的变化&lt;/li&gt;
&lt;li&gt;升级Logstash&lt;/li&gt;
&lt;li&gt;配置Logstash
    
    </summary>
    
      <category term="Logstash" scheme="https://weizhimiao.github.io/categories/Logstash/"/>
    
    
      <category term="Logstash" scheme="https://weizhimiao.github.io/tags/Logstash/"/>
    
  </entry>
  
  <entry>
    <title>Logstash学习一</title>
    <link href="https://weizhimiao.github.io/2016/10/24/Logstash%E5%AD%A6%E4%B9%A0%E4%B8%80/"/>
    <id>https://weizhimiao.github.io/2016/10/24/Logstash学习一/</id>
    <published>2016-10-24T12:30:00.000Z</published>
    <updated>2016-10-25T13:46:42.000Z</updated>
    
    <content type="html"><![CDATA[<ul>
<li>Logstash简介</li>
<li>Logstash入门</li>
</ul>
<a id="more"></a>
<h2 id="Logstash简介"><a href="#Logstash简介" class="headerlink" title="Logstash简介"></a>Logstash简介</h2><p>Logstash是具有实时流水线功能的开源数据收集引擎。 Logstash可以动态统一来自不同来源的数据，并将数据标准化为您选择的目的地。清理和民主化您的所有数据，用于各种高级下游分析和可视化用例。</p>
<p>尽管Logstash最初推动了日志收集的创新，但其功能远远超出了用例。任何类型的事件都可以用丰富的输入，过滤器和输出插件进行丰富和转换，其中许多本地编解码器进一步简化了摄取过程。 Logstash通过利用更大量和各种数据来加速您的洞察力。</p>
<h3 id="Logstashedit的特点"><a href="#Logstashedit的特点" class="headerlink" title="Logstashedit的特点"></a>Logstashedit的特点</h3><h4 id="摄取的主力为Elasticsearch和更多"><a href="#摄取的主力为Elasticsearch和更多" class="headerlink" title="摄取的主力为Elasticsearch和更多"></a>摄取的主力为Elasticsearch和更多</h4><p>具有强大的Elasticsearch和Kibana协同作用的水平可扩展的数据处理渠道</p>
<p><img src="http://n.sinaimg.cn/games/3ece443e/20161024/logstash.png" alt="img"></p>
<h4 id="可插拔管线架构"><a href="#可插拔管线架构" class="headerlink" title="可插拔管线架构"></a>可插拔管线架构</h4><p>混合，匹配和协调不同的输入，滤波器和输出以在管道和谐中播放</p>
<h4 id="社区可扩展和开发人员友好的插件生态系统"><a href="#社区可扩展和开发人员友好的插件生态系统" class="headerlink" title="社区可扩展和开发人员友好的插件生态系统"></a>社区可扩展和开发人员友好的插件生态系统</h4><p>超过200个插件可用，加上创建和贡献自己的灵活性</p>
<h3 id="Logstash喜欢数据"><a href="#Logstash喜欢数据" class="headerlink" title="Logstash喜欢数据"></a>Logstash喜欢数据</h3><p>收集更多，所以你可以知道更多。 Logstash欢迎各种形状和大小的数据。</p>
<h3 id="日志和度量"><a href="#日志和度量" class="headerlink" title="日志和度量"></a>日志和度量</h3><p>这一切都开始了。</p>
<ul>
<li>处理所有类型的日志数据<ul>
<li>轻松获取大量Web日志（如Apache）和应用程序日志（如log4j for Java）</li>
<li>捕获许多其他日志格式，如syslog，Windows事件日志，网络和防火墙日志等</li>
</ul>
</li>
<li>通过Filebeat获得补充的安全日志转发功能</li>
<li>通过TCP和UDP从Ganglia，collectd，NetFlow，JMX和许多其他基础架构和应用程序平台收集指标</li>
</ul>
<h3 id="网络"><a href="#网络" class="headerlink" title="网络"></a>网络</h3><p>解锁万维网。</p>
<ul>
<li>将HTTP请求转换为事件（博客）<ul>
<li>从web服务firehoses像Twitter的社会情绪分析</li>
<li>Webhook支持GitHub，HipChat，JIRA和无数其他应用程序</li>
<li>启用许多Watcher警报用例</li>
</ul>
</li>
<li>通过按需轮询HTTP端点来创建事件（博客）<ul>
<li>通常从Web应用程序接口捕获运行状况，性能，指标和其他类型的数据</li>
<li>非常适合于轮询控制优于接收的情况</li>
</ul>
</li>
</ul>
<h3 id="数据存储和流"><a href="#数据存储和流" class="headerlink" title="数据存储和流"></a>数据存储和流</h3><p>从您已拥有的数据中发掘更多价值。</p>
<ul>
<li>更好地了解您的数据从任何关系数据库或NoSQL存储与JDBC接口（博客）</li>
<li>统一来自消息队列的各种数据流，如Apache Kafka（博客），RabbitMQ，Amazon SQS和ZeroMQ</li>
</ul>
<h3 id="传感器和物联网"><a href="#传感器和物联网" class="headerlink" title="传感器和物联网"></a>传感器和物联网</h3><p>探索广泛的其他数据。</p>
<ul>
<li>在这个技术进步的时代，大规模的IoT世界通过捕获和利用来自连接的传感器的数据来释放无尽的用例。</li>
<li>Logstash是用于从移动设备向智能家庭，连接的车辆，医疗保健传感器以及许多其他行业特定应用程序发送数据的常见事件收集骨干网。</li>
<li>观看Logstash，结合更广泛的ELK堆栈，集中和丰富传感器数据，以获得有关住宅的更深入的知识。</li>
</ul>
<h3 id="轻松地丰富一切"><a href="#轻松地丰富一切" class="headerlink" title="轻松地丰富一切"></a>轻松地丰富一切</h3><p>数据越好，知识越好。 在提取期间清理并转换数据，以便在索引或输出时立即获取近实时的洞察信息。 Logstash包含许多聚合和突变以及模式匹配，地理位置映射和动态查找功能。</p>
<ul>
<li>Grok是Logstash过滤器的面包和黄油，并且无处不在地从非结构化数据中导出结构。 享受丰富的集成模式，旨在帮助快速解决网络，系统，网络和其他类型的事件格式。</li>
<li>通过从IP地址解密地理坐标，规范日期复杂性，简化键值对和CSV数据，隐藏敏感信息，以及使用本地查找或Elasticsearch查询进一步丰富您的数据，扩展您的视野。</li>
<li>编解码器通常用于简化JSON和多线事件等常见事件结构的处理。</li>
</ul>
<h3 id="选择您的stash"><a href="#选择您的stash" class="headerlink" title="选择您的stash"></a>选择您的stash</h3><p>将数据路由到最重要的位置。 通过存储，分析和对您的数据采取行动，解锁各种下游分析和操作用例。</p>
<p>分析</p>
<ul>
<li>Elasticsearch</li>
<li>数据存储如MongoDB和Riak</li>
</ul>
<p>存档</p>
<ul>
<li>HDFS</li>
<li>S3</li>
<li>Google云端存储</li>
</ul>
<p>监控</p>
<ul>
<li>Nagios</li>
<li>Ganglia</li>
<li>Zabbix</li>
<li>Graphite</li>
<li>Datadog</li>
<li>CloudWatch</li>
</ul>
<p>警报</p>
<ul>
<li>Watcher with Elasticsearch</li>
<li>Email</li>
<li>Pagerduty</li>
<li>HipChat</li>
<li>IRC</li>
<li>SNS</li>
</ul>
<h2 id="Logstash入门"><a href="#Logstash入门" class="headerlink" title="Logstash入门"></a>Logstash入门</h2><p>本节将指导您完成安装Logstash并验证一切正常运行的过程。 后面的章节讨论越来越复杂的配置，以解决选定的用例。 本节包括以下主题：</p>
<ul>
<li>安装Logstash</li>
<li>保存您的第一个事件：基本Logstash示例</li>
<li>使用Logstash解析日志</li>
<li>停机检测</li>
<li>Logstash处理管道</li>
</ul>
<h3 id="安装Logstash"><a href="#安装Logstash" class="headerlink" title="安装Logstash"></a>安装Logstash</h3><blockquote>
<p>注意: Logstash需要Java 7或更高版本。 使用官方Oracle发行版或开源发行版（如OpenJDK）。</p>
</blockquote>
<p>要检查Java版本，请运行以下命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">java -version</div></pre></td></tr></table></figure></p>
<p>在安装了Java的系统上，此命令将生成类似于以下内容的输出：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">java version &quot;1.7.0_45&quot;</div><div class="line">Java(TM) SE Runtime Environment (build 1.7.0_45-b18)</div><div class="line">Java HotSpot(TM) 64-Bit Server VM (build 24.45-b08, mixed mode)</div></pre></td></tr></table></figure></p>
<h4 id="从下载的二进制文件安装"><a href="#从下载的二进制文件安装" class="headerlink" title="从下载的二进制文件安装"></a>从下载的二进制文件安装</h4><p>下载与您的主机环境匹配的Logstash安装文件。 解压缩文件。 不要将Logstash安装到包含冒号（:)字符的目录路径中。</p>
<p>在支持的Linux操作系统上，可以使用软件包管理器安装Logstash。</p>
<h4 id="从软件包存储库安装"><a href="#从软件包存储库安装" class="headerlink" title="从软件包存储库安装"></a>从软件包存储库安装</h4><p>我们还有可用于基于APT和YUM的发行版的存储库。 注意，我们只提供二进制包，但没有源包，因为这些包是作为Logstash构建的一部分创建的。</p>
<p>我们已将Logstash软件包存储库按版本拆分为单独的网址，以避免在主要版本或次要版本之间意外升级。 对于所有2.4.x版本使用2.4版本号，2.3.x使用2.3，等等。</p>
<p>我们使用PGP密钥D88E42B4，Elastic的签名密钥，用指纹<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">4609 5ACC 8548 582C 1A26 99A9 D27D 666C D88E 42B4</div></pre></td></tr></table></figure></p>
<p>签署我们的所有包。 它可从<a href="https://pgp.mit.edu获得。" target="_blank" rel="external">https://pgp.mit.edu获得。</a></p>
<h4 id="APT"><a href="#APT" class="headerlink" title="APT"></a>APT</h4><p>下载并安装公共签名密钥：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">wget -qO - https://packages.elastic.co/GPG-KEY-elasticsearch | sudo apt-key add -</div></pre></td></tr></table></figure></p>
<p>将存储库定义添加到/etc/apt/sources.list文件中：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">echo &quot;deb https://packages.elastic.co/logstash/2.4/debian stable main&quot; | sudo tee -a /etc/apt/sources.list</div></pre></td></tr></table></figure></p>
<blockquote>
<p>使用上述echo方法添加Logstash存储库。 不要使用add-apt-repository，因为它将添加一个deb-src条目，但我们不提供源包。 如果您已添加deb-src条目，您将看到类似如下的错误：<br><code>Unable to find expected entry &#39;main/source/Sources&#39; in Release file (Wrong sources.list entry or malformed file)</code><br>只需从/etc/apt/sources.list文件中删除deb-src条目，然后在按照正常程序进行安装。</p>
</blockquote>
<p>运行sudo apt-get update并且存储库已准备就绪可以使用。 您可以安装：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo apt-get update &amp;&amp; sudo apt-get install logstash</div></pre></td></tr></table></figure></p>
<h4 id="YUM"><a href="#YUM" class="headerlink" title="YUM"></a>YUM</h4><p>下载并安装公共签名密钥：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">rpm --import https://packages.elastic.co/GPG-KEY-elasticsearch</div></pre></td></tr></table></figure></p>
<p>将以下内容添加到具有.repo后缀的文件中的/etc/yum.repos.d/目录中，例如logstash.repo<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">[logstash-2.4]</div><div class="line">name=Logstash repository for 2.4.x packages</div><div class="line">baseurl=https://packages.elastic.co/logstash/2.4/centos</div><div class="line">gpgcheck=1</div><div class="line">gpgkey=https://packages.elastic.co/GPG-KEY-elasticsearch</div><div class="line">enabled=1</div></pre></td></tr></table></figure></p>
<p>您的存储库已准备就绪。 您可以安装：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">yum install logstash</div></pre></td></tr></table></figure></p>
<h3 id="基本Logstash示例"><a href="#基本Logstash示例" class="headerlink" title="基本Logstash示例"></a>基本Logstash示例</h3><p>要测试Logstash安装，运行最基本的Logstash管道：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">cd logstash-2.4.0</div><div class="line">bin/logstash -e &apos;input &#123; stdin &#123; &#125; &#125; output &#123; stdout &#123;&#125; &#125;&apos;</div></pre></td></tr></table></figure></p>
<p>-e标志使您能够直接从命令行指定配置。 在命令行中指定配置允许您快速测试配置，而无需在迭代之间编辑文件。 此管道从标准输入stdin接收输入，并以结构化格式将输入移动到标准输出stdout。</p>
<p>一旦显示“Pipeline main started”，在命令提示符下键入hello world以查看Logstash响应：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">hello world</div><div class="line">2013-11-21T01:22:14.405+0000 0.0.0.0 hello world</div></pre></td></tr></table></figure></p>
<p>Logstash向消息添加时间戳和IP地址信息。 通过在Logstash运行的shell中发出CTRL-D命令，退出Logstash。</p>
<p>您已创建并运行基本的Logstash管道。 接下来，您将学习如何创建更加逼真的管道。</p>
<h3 id="使用Logstash解析日志"><a href="#使用Logstash解析日志" class="headerlink" title="使用Logstash解析日志"></a>使用Logstash解析日志</h3><p>在大多数使用情况下，Logstash管道具有一个或多个输入，过滤器和输出插件。 本节中的场景构建Logstash配置文件以指定这些插件，并讨论每个插件正在做什么。</p>
<p>Logstash配置文件定义了您的Logstash管道。 当您启动Logstash实例时，请使用 -f <path to="" file=""></path>选项指定定义该实例的管道的配置文件。</p>
<p>Logstash管道有两个必需的元素，输入和输出，以及一个可选元素，过滤器。 输入插件从源消耗数据，过滤器插件根据您指定的内容修改数据，输出插件将数据写入目标。</p>
<p><img src="http://n.sinaimg.cn/games/3ece443e/20161024/basic_logstash_pipeline.png" alt="img"></p>
<p>在本节中，您将创建一个Logstash管道，它将Apache Web日志作为输入，解析这些日志以从日志中创建特定的命名字段，并将解析的数据写入Elasticsearch集群。 而不是在命令行定义管道配置，您将在配置文件中定义管道。</p>
<p>以下文本表示配置管道的骨架：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"># The # character at the beginning of a line indicates a comment. Use</div><div class="line"># comments to describe your configuration.</div><div class="line">input &#123;</div><div class="line">&#125;</div><div class="line"># The filter part of this file is commented out to indicate that it is</div><div class="line"># optional.</div><div class="line"># filter &#123;</div><div class="line">#</div><div class="line"># &#125;</div><div class="line">output &#123;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>此框架不起作用，因为输入和输出节没有定义任何有效选项。</p>
<p>要开始，请将骨架配置管道复制并粘贴到 Logstash home目录中名为first-pipeline.conf的文件中。 然后转到此处下载此示例中使用的示例数据集。 解压缩文件。</p>
<p>为文件输入配置Logstash</p>
<blockquote>
<p>为了方便起见，本示例使用文件输入插件。 要在现实世界中拖拽文件，您将使用Filebeat将日志事件发送到Logstash。 您以后在构建更复杂的管道时学习如何配置Filebeat输入插件。</p>
</blockquote>
<p>要开始Logstash管道，请将Logstash实例配置为通过使用文件输入插件从文件读取。</p>
<p>编辑first-pipeline.conf文件，并将整个输入节替换为以下文本：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">input &#123;</div><div class="line">    file &#123;</div><div class="line">        path =&gt; &quot;/path/to/file/*.log&quot;</div><div class="line">        start_position =&gt; beginning</div><div class="line">        ignore_older =&gt; 0</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<ul>
<li><p>文件输入插件的默认行为是以类似于UNIX tail -f命令的方式监视文件的新信息。 要更改此默认行为并处理整个文件，我们需要指定Logstash开始处理文件的位置。</p>
</li>
<li><p>将ignore_older设置为0会禁用文件年龄检查，因此即使教程文件的时间已超过一天，也会对其进行处理。</p>
</li>
</ul>
<p>将/ path / to / file替换为文件系统中logstash-tutorial.log所在位置的绝对路径。</p>
<h4 id="使用Grok-Filter插件解析Web日志"><a href="#使用Grok-Filter插件解析Web日志" class="headerlink" title="使用Grok Filter插件解析Web日志"></a>使用Grok Filter插件解析Web日志</h4><p>grok过滤器插件是Logstash中默认提供的几个插件之一。 有关如何管理Logstash插件的详细信息，请参阅插件管理器的参考文档。</p>
<p>grok过滤器插件使您能够将非结构化日志数据解析为结构化和可查询的数据。</p>
<p>因为grok过滤器插件在传入日志数据中查找模式，配置需要您决定如何识别您的用例感兴趣的模式。 来自Web服务器日志示例的代表行如下所示：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">83.149.9.216 - - [04/Jan/2015:05:13:42 +0000] &quot;GET /presentations/logstash-monitorama-2013/images/kibana-search.png</div><div class="line">HTTP/1.1&quot; 200 203023 &quot;http://semicomplete.com/presentations/logstash-monitorama-2013/&quot; &quot;Mozilla/5.0 (Macintosh; Intel</div><div class="line">Mac OS X 10_9_1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/32.0.1700.77 Safari/537.36&quot;</div></pre></td></tr></table></figure></p>
<p>行开头的IP地址很容易识别，括号中的时间戳也很容易识别。 要解析数据，可以使用％{COMBINEDAPACHELOG} grok模式，该模式使用以下模式构建Apache日志中的行：</p>
<table>
<thead>
<tr>
<th>含义</th>
<th>字段</th>
</tr>
</thead>
<tbody>
<tr>
<td>IP地址</td>
<td>clientip</td>
</tr>
<tr>
<td>用户ID</td>
<td>ident</td>
</tr>
<tr>
<td>用户认证</td>
<td>auth</td>
</tr>
<tr>
<td>时间戳</td>
<td>timestamp</td>
</tr>
<tr>
<td>HTTP动词</td>
<td>verb</td>
</tr>
<tr>
<td>请求正文</td>
<td>request</td>
</tr>
<tr>
<td>HTTP版本</td>
<td>httpversion</td>
</tr>
<tr>
<td>HTTP状态码</td>
<td>response</td>
</tr>
<tr>
<td>字节数</td>
<td>bytes</td>
</tr>
<tr>
<td>Referrer URL</td>
<td>referrer</td>
</tr>
<tr>
<td>User agent</td>
<td>agent</td>
</tr>
</tbody>
</table>
<p>编辑first-pipeline.conf文件，并用以下文本替换整个过滤器部分：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">filter &#123;</div><div class="line">    grok &#123;</div><div class="line">        match =&gt; &#123; &quot;message&quot; =&gt; &quot;%&#123;COMBINEDAPACHELOG&#125;&quot;&#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>使用grok模式处理日志文件后，示例行将具有以下JSON表示形式：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">&quot;clientip&quot; : &quot;83.149.9.216&quot;,</div><div class="line">&quot;ident&quot; : ,</div><div class="line">&quot;auth&quot; : ,</div><div class="line">&quot;timestamp&quot; : &quot;04/Jan/2015:05:13:42 +0000&quot;,</div><div class="line">&quot;verb&quot; : &quot;GET&quot;,</div><div class="line">&quot;request&quot; : &quot;/presentations/logstash-monitorama-2013/images/kibana-search.png&quot;,</div><div class="line">&quot;httpversion&quot; : &quot;HTTP/1.1&quot;,</div><div class="line">&quot;response&quot; : &quot;200&quot;,</div><div class="line">&quot;bytes&quot; : &quot;203023&quot;,</div><div class="line">&quot;referrer&quot; : &quot;http://semicomplete.com/presentations/logstash-monitorama-2013/&quot;,</div><div class="line">&quot;agent&quot; : &quot;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_9_1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/32.0.1700.77 Safari/537.36&quot;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h4 id="使用Geoip过滤插件增强您的数据"><a href="#使用Geoip过滤插件增强您的数据" class="headerlink" title="使用Geoip过滤插件增强您的数据"></a>使用Geoip过滤插件增强您的数据</h4><p>除了解析日志数据以获得更好的搜索外，过滤器插件还可以从现有数据中导出补充信息。 作为示例，geoip插件查找IP地址，从地址导出地理位置信息，并将该位置信息添加到日志。</p>
<p>通过将以下行添加到first-pipeline.conf文件的过滤器部分，将您的Logstash实例配置为使用geoip过滤器插件：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">geoip &#123;</div><div class="line">    source =&gt; &quot;clientip&quot;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>geoip插件配置要求您指定包含要查找的IP地址的源字段的名称。 在此示例中，clientip字段包含IP地址。</p>
<p>由于过滤器是按顺序评估的，请确保geoip部分位于配置文件的grok部分之后，并且grok和geoip部分嵌套在过滤器部分中，如下所示：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">filter &#123;</div><div class="line">    grok &#123;</div><div class="line">        match =&gt; &#123; &quot;message&quot; =&gt; &quot;%&#123;COMBINEDAPACHELOG&#125;&quot;&#125;</div><div class="line">    &#125;</div><div class="line">    geoip &#123;</div><div class="line">        source =&gt; &quot;clientip&quot;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h4 id="将数据索引到Elasticsearch"><a href="#将数据索引到Elasticsearch" class="headerlink" title="将数据索引到Elasticsearch"></a>将数据索引到Elasticsearch</h4><p>现在，Web日志被细分为特定的字段，Logstash管道可以将数据索引到Elasticsearch集群中。 编辑first-pipeline.conf文件，并将整个输出部分替换为以下文本：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">output &#123;</div><div class="line">    elasticsearch &#123;</div><div class="line">        hosts =&gt; [ &quot;localhost:9200&quot; ]</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>使用此配置，Logstash使用http协议连接到Elasticsearch。 上面的例子假设Logstash和Elasticsearch在同一个实例上运行。 您可以通过使用hosts配置指定类似hosts =&gt; [“es-machine：9092”]的内容来指定远程Elasticsearch实例。</p>
<h4 id="测试您的初始流水线"><a href="#测试您的初始流水线" class="headerlink" title="测试您的初始流水线"></a>测试您的初始流水线</h4><p>此时，您的第一个pipeline.conf文件具有正确配置的输入，过滤器和输出节，并且如下所示：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">input &#123;</div><div class="line">    file &#123;</div><div class="line">        path =&gt; &quot;/Users/myusername/tutorialdata/*.log&quot;</div><div class="line">        start_position =&gt; beginning</div><div class="line">        ignore_older =&gt; 0</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">filter &#123;</div><div class="line">    grok &#123;</div><div class="line">        match =&gt; &#123; &quot;message&quot; =&gt; &quot;%&#123;COMBINEDAPACHELOG&#125;&quot;&#125;</div><div class="line">    &#125;</div><div class="line">    geoip &#123;</div><div class="line">        source =&gt; &quot;clientip&quot;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">output &#123;</div><div class="line">    elasticsearch &#123;</div><div class="line">        hosts =&gt; [ &quot;localhost:9200&quot; ]</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>要验证您的配置，请运行以下命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">bin/logstash -f first-pipeline.conf --configtest</div></pre></td></tr></table></figure></p>
<p>–configtest选项解析您的配置文件并报告任何错误。 当配置文件通过配置测试时，使用以下命令启动Logstash：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">bin/logstash -f first-pipeline.conf</div></pre></td></tr></table></figure></p>
<p>基于grok过滤器插件创建的字段，尝试对Elasticsearch进行测试查询：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">curl -XGET &apos;localhost:9200/logstash-$DATE/_search?pretty&amp;q=response=200&apos;</div></pre></td></tr></table></figure></p>
<p>将$ DATE替换为当前日期，格式为YYYY.MM.DD。</p>
<p>我们得到了多次点击。 例如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  &quot;took&quot; : 4,</div><div class="line">  &quot;timed_out&quot; : false,</div><div class="line">  &quot;_shards&quot; : &#123;</div><div class="line">    &quot;total&quot; : 5,</div><div class="line">    &quot;successful&quot; : 5,</div><div class="line">    &quot;failed&quot; : 0</div><div class="line">  &#125;,</div><div class="line">  &quot;hits&quot; : &#123;</div><div class="line">    &quot;total&quot; : 98,</div><div class="line">    &quot;max_score&quot; : 5.0091305,</div><div class="line">    &quot;hits&quot; : [ &#123;</div><div class="line">      &quot;_index&quot; : &quot;logstash-2016.08.30&quot;,</div><div class="line">      &quot;_type&quot; : &quot;logs&quot;,</div><div class="line">      &quot;_id&quot; : &quot;AVbd1HyuICXLyJ--dz7g&quot;,</div><div class="line">      &quot;_score&quot; : 5.0091305,</div><div class="line">      &quot;_source&quot; : &#123;</div><div class="line">        &quot;message&quot; : &quot;83.149.9.216 - - [04/Jan/2015:05:13:45 +0000] \&quot;GET /presentations/logstash-monitorama-2013/images/frontend-response-codes.png HTTP/1.1\&quot; 200 52878 \&quot;http://semicomplete.com/presentations/logstash-monitorama-2013/\&quot; \&quot;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_9_1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/32.0.1700.77 Safari/537.36\&quot;&quot;,</div><div class="line">        &quot;@version&quot; : &quot;1&quot;,</div><div class="line">        &quot;@timestamp&quot; : &quot;2016-08-30T23:41:45.044Z&quot;,</div><div class="line">        &quot;path&quot; : &quot;/Users/myusername/tutorialdata/logstash-tutorial.log&quot;,</div><div class="line">        &quot;host&quot; : &quot;My-Macbook.local&quot;,</div><div class="line">        &quot;clientip&quot; : &quot;83.149.9.216&quot;,</div><div class="line">        &quot;ident&quot; : &quot;-&quot;,</div><div class="line">        &quot;auth&quot; : &quot;-&quot;,</div><div class="line">        &quot;timestamp&quot; : &quot;04/Jan/2015:05:13:45 +0000&quot;,</div><div class="line">        &quot;verb&quot; : &quot;GET&quot;,</div><div class="line">        &quot;request&quot; : &quot;/presentations/logstash-monitorama-2013/images/frontend-response-codes.png&quot;,</div><div class="line">        &quot;httpversion&quot; : &quot;1.1&quot;,</div><div class="line">        &quot;response&quot; : &quot;200&quot;,</div><div class="line">        &quot;bytes&quot; : &quot;52878&quot;,</div><div class="line">        &quot;referrer&quot; : &quot;\&quot;http://semicomplete.com/presentations/logstash-monitorama-2013/\&quot;&quot;,</div><div class="line">        &quot;agent&quot; : &quot;\&quot;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_9_1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/32.0.1700.77 Safari/537.36\&quot;&quot;,</div><div class="line">        &quot;geoip&quot; : &#123;</div><div class="line">          &quot;ip&quot; : &quot;83.149.9.216&quot;,</div><div class="line">          &quot;country_code2&quot; : &quot;RU&quot;,</div><div class="line">          &quot;country_code3&quot; : &quot;RUS&quot;,</div><div class="line">          &quot;country_name&quot; : &quot;Russian Federation&quot;,</div><div class="line">          &quot;continent_code&quot; : &quot;EU&quot;,</div><div class="line">          &quot;region_name&quot; : &quot;48&quot;,</div><div class="line">          &quot;city_name&quot; : &quot;Moscow&quot;,</div><div class="line">          &quot;latitude&quot; : 55.75219999999999,</div><div class="line">          &quot;longitude&quot; : 37.6156,</div><div class="line">          &quot;timezone&quot; : &quot;Europe/Moscow&quot;,</div><div class="line">          &quot;real_region_name&quot; : &quot;Moscow City&quot;,</div><div class="line">          &quot;location&quot; : [ 37.6156, 55.75219999999999 ]</div><div class="line">        &#125;</div><div class="line">      &#125;</div><div class="line">    &#125;,</div><div class="line">    ...</div></pre></td></tr></table></figure></p>
<p>尝试再次搜索从IP地址导出的地理位置信息：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">curl -XGET &apos;localhost:9200/logstash-$DATE/_search?pretty&amp;q=geoip.city_name=Buffalo&apos;</div></pre></td></tr></table></figure></p>
<p>将$ DATE替换为当前日期，格式为YYYY.MM.DD。</p>
<p>其中一个日志条目来自Buffalo，因此查询产生以下响应：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  &quot;took&quot; : 6,</div><div class="line">  &quot;timed_out&quot; : false,</div><div class="line">  &quot;_shards&quot; : &#123;</div><div class="line">    &quot;total&quot; : 5,</div><div class="line">    &quot;successful&quot; : 5,</div><div class="line">    &quot;failed&quot; : 0</div><div class="line">  &#125;,</div><div class="line">  &quot;hits&quot; : &#123;</div><div class="line">    &quot;total&quot; : 1,</div><div class="line">    &quot;max_score&quot; : 1.0149983,</div><div class="line">    &quot;hits&quot; : [ &#123;</div><div class="line">      &quot;_index&quot; : &quot;logstash-2016.08.30&quot;,</div><div class="line">      &quot;_type&quot; : &quot;logs&quot;,</div><div class="line">      &quot;_id&quot; : &quot;AVbd1HyuICXLyJ--dz8u&quot;,</div><div class="line">      &quot;_score&quot; : 1.0149983,</div><div class="line">      &quot;_source&quot; : &#123;</div><div class="line">        &quot;message&quot; : &quot;108.174.55.234 - - [04/Jan/2015:05:27:45 +0000] \&quot;GET /?flav=rss20 HTTP/1.1\&quot; 200 29941 \&quot;-\&quot; \&quot;-\&quot;&quot;,</div><div class="line">        &quot;@version&quot; : &quot;1&quot;,</div><div class="line">        &quot;@timestamp&quot; : &quot;2016-08-30T23:41:45.066Z&quot;,</div><div class="line">        &quot;path&quot; : &quot;/Users/myusername/tutorialdata/logstash-tutorial.log&quot;,</div><div class="line">        &quot;host&quot; : &quot;My-Macbook&quot;,</div><div class="line">        &quot;clientip&quot; : &quot;108.174.55.234&quot;,</div><div class="line">        &quot;ident&quot; : &quot;-&quot;,</div><div class="line">        &quot;auth&quot; : &quot;-&quot;,</div><div class="line">        &quot;timestamp&quot; : &quot;04/Jan/2015:05:27:45 +0000&quot;,</div><div class="line">        &quot;verb&quot; : &quot;GET&quot;,</div><div class="line">        &quot;request&quot; : &quot;/?flav=rss20&quot;,</div><div class="line">        &quot;httpversion&quot; : &quot;1.1&quot;,</div><div class="line">        &quot;response&quot; : &quot;200&quot;,</div><div class="line">        &quot;bytes&quot; : &quot;29941&quot;,</div><div class="line">        &quot;referrer&quot; : &quot;\&quot;-\&quot;&quot;,</div><div class="line">        &quot;agent&quot; : &quot;\&quot;-\&quot;&quot;,</div><div class="line">        &quot;geoip&quot; : &#123;</div><div class="line">          &quot;ip&quot; : &quot;108.174.55.234&quot;,</div><div class="line">          &quot;country_code2&quot; : &quot;US&quot;,</div><div class="line">          &quot;country_code3&quot; : &quot;USA&quot;,</div><div class="line">          &quot;country_name&quot; : &quot;United States&quot;,</div><div class="line">          &quot;continent_code&quot; : &quot;NA&quot;,</div><div class="line">          &quot;region_name&quot; : &quot;NY&quot;,</div><div class="line">          &quot;city_name&quot; : &quot;Buffalo&quot;,</div><div class="line">          &quot;postal_code&quot; : &quot;14221&quot;,</div><div class="line">          &quot;latitude&quot; : 42.9864,</div><div class="line">          &quot;longitude&quot; : -78.7279,</div><div class="line">          &quot;dma_code&quot; : 514,</div><div class="line">          &quot;area_code&quot; : 716,</div><div class="line">          &quot;timezone&quot; : &quot;America/New_York&quot;,</div><div class="line">          &quot;real_region_name&quot; : &quot;New York&quot;,</div><div class="line">          &quot;location&quot; : [ -78.7279, 42.9864 ]</div><div class="line">        &#125;</div><div class="line">      &#125;</div><div class="line">    &#125; ]</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h4 id="多个输入和输出插件"><a href="#多个输入和输出插件" class="headerlink" title="多个输入和输出插件"></a>多个输入和输出插件</h4><p>您需要管理的信息通常来自多个不同的来源，用例可能需要多个目的地的数据。 您的Logstash管道可以使用多个输入和输出插件来处理这些要求。</p>
<p>在本节中，您将创建一个Logstash管道，它从Twitter feed和Filebeat客户端接收输入，然后将信息发送到Elasticsearch集群以及将信息直接写入文件。</p>
<h4 id="从Twitter-feed阅读"><a href="#从Twitter-feed阅读" class="headerlink" title="从Twitter feed阅读"></a>从Twitter feed阅读</h4><p>要添加Twitter Feed，请使用twitter输入插件。 要配置插件，您需要几个信息：</p>
<ul>
<li>消费者密钥，用于唯一标识您的Twitter应用。</li>
<li>消费者秘密，作为您的Twitter应用程序的密码。</li>
<li>在传入Feed中搜索的一个或多个关键字。</li>
<li>oauth令牌，它使用此应用程序标识Twitter帐户。</li>
<li>oauth令牌密钥，用作Twitter帐户的密码。</li>
</ul>
<p>访问<a href="https://dev.twitter.com/apps以设置Twitter帐户，并生成您的用户密钥和密钥，以及您的访问令牌和密钥。" target="_blank" rel="external">https://dev.twitter.com/apps以设置Twitter帐户，并生成您的用户密钥和密钥，以及您的访问令牌和密钥。</a> 如果您不确定如何生成这些键，请参阅twitter输入插件的文档。</p>
<p>就像你以前在使用Logstash进行解析日志时一样，创建一个包含配置管道骨架的配置文件（称为second-pipeline.conf）。 如果需要，您可以重复使用之前创建的文件，但确保在运行Logstash时传递正确的配置文件名。</p>
<p>将以下行添加到second-pipeline.conf文件的输入部分，将您的值替换为如下所示的占位符值：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">twitter &#123;</div><div class="line">    consumer_key =&gt; &quot;enter_your_consumer_key_here&quot;</div><div class="line">    consumer_secret =&gt; &quot;enter_your_secret_here&quot;</div><div class="line">    keywords =&gt; [&quot;cloud&quot;]</div><div class="line">    oauth_token =&gt; &quot;enter_your_access_token_here&quot;</div><div class="line">    oauth_token_secret =&gt; &quot;enter_your_access_token_secret_here&quot;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h4 id="Filebeat客户端"><a href="#Filebeat客户端" class="headerlink" title="Filebeat客户端"></a>Filebeat客户端</h4><p>Filebeat客户端是一个轻量级的，资源友好的工具，从服务器上的文件收集日志，并将这些日志转发到Logstash实例进行处理。 Filebeat设计用于可靠性和低延迟。 Filebeat使用托管源数据的计算机资源，Beats输入插件可最大限度地减少对Logstash实例的资源需求。</p>
<blockquote>
<p>注意:在典型的使用情况下，Filebeat在运行Logstash实例的机器的单独机器上运行。为了本教程的目的，Logstash和Filebeat在同一台机器上运行。</p>
</blockquote>
<p>默认的Logstash安装包括Beats输入插件。要在数据源计算机上安装Filebeat，请从Filebeat产品页面下载相应的软件包。</p>
<p>安装Filebeat后，您需要配置它。打开位于Filebeat安装目录中的filebeat.yml文件，并使用以下行替换内容。确保路径指向您的syslog：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">filebeat:</div><div class="line">  prospectors:</div><div class="line">    -</div><div class="line">      paths:</div><div class="line">        - /var/log/*.log</div><div class="line">      fields:</div><div class="line">        type: syslog</div><div class="line">output:</div><div class="line">  logstash:</div><div class="line">    hosts: [&quot;localhost:5043&quot;]</div></pre></td></tr></table></figure></p>
<ul>
<li><p>Filebeat处理的文件的绝对路径。</p>
</li>
<li><p>在事件中添加一个名为syslog的名为type的字段。</p>
</li>
</ul>
<p>保存更改。</p>
<p>为了保持配置简单，您不会像在真实场景中那样指定TLS / SSL设置。</p>
<p>通过将以下行添加到second-pipeline.conf文件的输入部分，将Logstash实例配置为使用Filebeat输入插件：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">beats &#123;</div><div class="line">    port =&gt; &quot;5043&quot;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h4 id="将LogStash数据写入文件"><a href="#将LogStash数据写入文件" class="headerlink" title="将LogStash数据写入文件"></a>将LogStash数据写入文件</h4><p>您可以配置Logstash管道，使用文件输出插件将数据直接写入文件。</p>
<p>通过将以下行添加到second-pipeline.conf文件的输出部分，将Logstash实例配置为使用文件输出插件：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">file &#123;</div><div class="line">    path =&gt; /path/to/target/file</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h4 id="写入多个Elasticsearch节点"><a href="#写入多个Elasticsearch节点" class="headerlink" title="写入多个Elasticsearch节点"></a>写入多个Elasticsearch节点</h4><p>写入多个Elasticsearch节点可减轻给定Elasticsearch节点上的资源需求，以及在特定节点不可用时向集群提供冗余入口点。</p>
<p>要将Logstash实例配置为写入多个Elasticsearch节点，请编辑second-pipeline.conf文件的输出部分，以读取：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">output &#123;</div><div class="line">    elasticsearch &#123;</div><div class="line">        hosts =&gt; [&quot;IP Address 1:port1&quot;, &quot;IP Address 2:port2&quot;, &quot;IP Address 3&quot;]</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>在主机行中使用Elasticsearch集群中的三个非主节点的IP地址。 当hosts参数列出多个IP地址时，Logstash会跨地址列表对请求进行负载平衡。 另请注意，Elasticsearch的默认端口为9200，在上述配置中可以省略。</p>
<h4 id="测试管道"><a href="#测试管道" class="headerlink" title="测试管道"></a>测试管道</h4><p>此时，您的second-pipeline.conf文件如下所示：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">input &#123;</div><div class="line">    twitter &#123;</div><div class="line">        consumer_key =&gt; &quot;enter_your_consumer_key_here&quot;</div><div class="line">        consumer_secret =&gt; &quot;enter_your_secret_here&quot;</div><div class="line">        keywords =&gt; [&quot;cloud&quot;]</div><div class="line">        oauth_token =&gt; &quot;enter_your_access_token_here&quot;</div><div class="line">        oauth_token_secret =&gt; &quot;enter_your_access_token_secret_here&quot;</div><div class="line">    &#125;</div><div class="line">    beats &#123;</div><div class="line">        port =&gt; &quot;5043&quot;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">output &#123;</div><div class="line">    elasticsearch &#123;</div><div class="line">        hosts =&gt; [&quot;IP Address 1:port1&quot;, &quot;IP Address 2:port2&quot;, &quot;IP Address 3&quot;]</div><div class="line">    &#125;</div><div class="line">    file &#123;</div><div class="line">        path =&gt; &quot;/path/to/target/file&quot;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Logstash正在使用您配置的Twitter源中的数据，从Filebeat接收数据，并将此信息索引到Elasticsearch集群中的三个节点以及写入文件。</p>
<p>在数据源计算机上，使用以下命令运行Filebeat：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo ./filebeat -e -c filebeat.yml -d &quot;publish&quot;</div></pre></td></tr></table></figure></p>
<p>Filebeat将尝试在端口5403上连接。直到Logstash以活动的Beats插件启动，该端口将不会有任何答案，因此，您看到的有关无法在该端口上连接的任何消息是正常的。</p>
<p>要验证您的配置，请运行以下命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">bin/logstash -f second-pipeline.conf --configtest</div></pre></td></tr></table></figure></p>
<p>–configtest选项解析您的配置文件并报告任何错误。 当配置文件通过配置测试时，使用以下命令启动Logstash：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">bin/logstash -f second-pipeline.conf</div></pre></td></tr></table></figure></p>
<p>使用grep实用程序在目标文件中搜索以验证信息是否存在：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">grep syslog /path/to/target/file</div></pre></td></tr></table></figure></p>
<p>运行Elasticsearch查询以在Elasticsearch集群中查找相同的信息：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">curl -XGET &apos;localhost:9200/logstash-$DATE/_search?pretty&amp;q=fields.type:syslog&apos;</div></pre></td></tr></table></figure></p>
<p>将$ DATE替换为当前日期，格式为YYYY.MM.DD。</p>
<p>要查看Twitter Feed中的数据，请尝试以下查询：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">curl -XGET &apos;http://localhost:9200/logstash-$DATE/_search?pretty&amp;q=client:iphone&apos;</div></pre></td></tr></table></figure></p>
<p>同样，请记住用YYYY.MM.DD格式的当前日期替换$ DATE。</p>
<h3 id="停机检测"><a href="#停机检测" class="headerlink" title="停机检测"></a>停机检测</h3><p>关闭正在运行的Logstash实例涉及以下步骤：</p>
<ul>
<li>停止所有输入，过滤器和输出插件</li>
<li>处理所有飞行中事件</li>
<li>终止Logstash进程</li>
</ul>
<p>以下条件影响关闭过程：</p>
<ul>
<li>输入插件以缓慢的速度接收数据。</li>
<li>慢速过滤器，如执行sleep（10000）的Ruby过滤器或执行非常繁重的查询的Elasticsearch过滤器。</li>
<li>正在等待重新连接以清除飞行中事件的已断开连接的输出插件。</li>
</ul>
<p>这些情况使关闭过程的持续时间和成功不可预测。</p>
<p>Logstash有一个停止检测机制，它在关闭期间分析管道和插件的行为。 此机制生成有关内部队列中飞行事件计数的周期性信息和繁忙的工作线程列表。</p>
<p>要在停止关闭的情况下启用Logstash强制终止，请在启动Logstash时使用–allow-unsafe-shutdown标志。</p>
<h4 id="失速检测实例"><a href="#失速检测实例" class="headerlink" title="失速检测实例"></a>失速检测实例</h4><p>在此示例中，慢速过滤器执行阻止管道干净关闭。 通过使用–allow-unsafe-shutdown标志启动Logstash，使用Ctrl + C退出会导致最终关闭，导致事件丢失。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">bin/logstash -e &apos;input &#123; generator &#123; &#125; &#125; filter &#123; ruby &#123; code =&gt; &quot;sleep 10000&quot; &#125; &#125;</div><div class="line">  output &#123; stdout &#123; codec =&gt; dots &#125; &#125;&apos; -w 1 --allow-unsafe-shutdown</div><div class="line">Settings: User set pipeline workers: 1, Default pipeline workers: 8</div><div class="line">Pipeline main started</div><div class="line">^CSIGINT received. Shutting down the agent. &#123;:level=&gt;:warn&#125;</div><div class="line">stopping pipeline &#123;:id=&gt;&quot;main&quot;&#125;</div><div class="line">Received shutdown signal, but pipeline is still waiting for in-flight events</div><div class="line">to be processed. Sending another ^C will force quit Logstash, but this may cause</div><div class="line">data loss. &#123;:level=&gt;:warn&#125;</div><div class="line">&#123;&quot;inflight_count&quot;=&gt;125, &quot;stalling_thread_info&quot;=&gt;&#123;[&quot;LogStash::Filters::Ruby&quot;,</div><div class="line">&#123;&quot;code&quot;=&gt;&quot;sleep 10000&quot;&#125;]=&gt;[&#123;&quot;thread_id&quot;=&gt;17, &quot;name&quot;=&gt;&quot;[main]&gt;worker0&quot;,</div><div class="line">&quot;current_call&quot;=&gt;&quot;(ruby filter code):1:in `sleep&apos;&quot;&#125;]&#125;&#125; &#123;:level=&gt;:warn&#125;</div><div class="line">The shutdown process appears to be stalled due to busy or blocked plugins.</div><div class="line">Check the logs for more information. &#123;:level=&gt;:error&#125;</div><div class="line">&#123;&quot;inflight_count&quot;=&gt;125, &quot;stalling_thread_info&quot;=&gt;&#123;[&quot;LogStash::Filters::Ruby&quot;,</div><div class="line">&#123;&quot;code&quot;=&gt;&quot;sleep 10000&quot;&#125;]=&gt;[&#123;&quot;thread_id&quot;=&gt;17, &quot;name&quot;=&gt;&quot;[main]&gt;worker0&quot;,</div><div class="line">&quot;current_call&quot;=&gt;&quot;(ruby filter code):1:in `sleep&apos;&quot;&#125;]&#125;&#125; &#123;:level=&gt;:warn&#125;</div><div class="line">&#123;&quot;inflight_count&quot;=&gt;125, &quot;stalling_thread_info&quot;=&gt;&#123;[&quot;LogStash::Filters::Ruby&quot;,</div><div class="line">&#123;&quot;code&quot;=&gt;&quot;sleep 10000&quot;&#125;]=&gt;[&#123;&quot;thread_id&quot;=&gt;17, &quot;name&quot;=&gt;&quot;[main]&gt;worker0&quot;,</div><div class="line">&quot;current_call&quot;=&gt;&quot;(ruby filter code):1:in `sleep&apos;&quot;&#125;]&#125;&#125; &#123;:level=&gt;:warn&#125;</div><div class="line">Forcefully quitting logstash.. &#123;:level=&gt;:fatal&#125;</div></pre></td></tr></table></figure></p>
<p>当–allow-unsafe-shutdown未启用时，Logstash会继续运行并定期生成这些报告。</p>
<h3 id="Logstash处理管道"><a href="#Logstash处理管道" class="headerlink" title="Logstash处理管道"></a>Logstash处理管道</h3><p>Logstash事件处理管道有三个阶段：输入→过滤器→输出。 输入生成事件，过滤器修改它们，并将输出发送到其他地方。 输入和输出支持编解码器，使您能够在数据进入或退出流水线时对其进行编码或解码，而无需使用单独的过滤器。</p>
<h4 id="input"><a href="#input" class="headerlink" title="input"></a>input</h4><p>使用输入将数据导入Logstash。 一些更常用的输入是：</p>
<ul>
<li>file：从文件系统上的文件读取，很像UNIX命令尾-0F</li>
<li>syslog：在公知的端口514上侦听syslog消息并根据RFC3164格式解析</li>
<li>redis：从redis服务器读取，使用redis通道和redis列表。 Redis通常在集中式Logstash安装中用作“代理”，它会从远程Logstash“shippers”对Logstash事件进行排队。</li>
<li>beats：处理Filebeat发送的事件。</li>
</ul>
<p>有关可用输入的更多信息，请参阅input插件。</p>
<h4 id="过滤器"><a href="#过滤器" class="headerlink" title="过滤器"></a>过滤器</h4><p>过滤器是Logstash管道中的中间处理设备。 您可以将过滤器与条件组合，以便在事件满足特定条件时对其执行操作。 一些有用的过滤器包括：</p>
<ul>
<li>grok：解析和结构任意文本。 Grok是目前Logstash将非结构化日志数据解析为结构化和可查询的最佳方式。 对于Logstash内置的120个模式，它更有可能找到一个满足您的需求！</li>
<li>mutate：对事件字段执行常规转换。 您可以重命名，删除，替换和修改事件中的字段。</li>
<li>drop：完全删除事件，例如，调试事件。</li>
<li>clone：创建事件的副本，可能添加或删除字段。</li>
<li>geoip：添加IP地址的地理位置信息（也显示在Kibana惊人的图表！）</li>
</ul>
<p>有关可用过滤器的详细信息，请参阅过滤器插件。</p>
<h4 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h4><p>输出是Logstash管道的最后一个阶段。 事件可以传递多个输出，但是一旦所有输出处理完成，事件就完成了它的执行。 一些常用的输出包括：</p>
<ul>
<li>elasticsearch：将事件数据发送到Elasticsearch。 如果您打算以高效，方便，易于查询的格式保存您的数据… Elasticsearch是要走的路。 期。 是的，我们有偏见:)</li>
<li>file：将事件数据写到磁盘上的文件。</li>
<li>graphite：将事件数据发送到graphite，graphite是一种流行的开源工具，用于存储和绘制指标。 <a href="http://graphite.readthedocs.io/en/latest/" target="_blank" rel="external">http://graphite.readthedocs.io/en/latest/</a></li>
<li>statsd：将事件数据发送到statsd，该服务“监听通过UDP发送的统计信息（如计数器和计时器），并将聚合发送到一个或多个可插拔后端服务”。 如果你已经使用statsd，这可能对你有用！</li>
</ul>
<p>有关可用输出的详细信息，请参阅Output插件。</p>
<h4 id="编解码器"><a href="#编解码器" class="headerlink" title="编解码器"></a>编解码器</h4><p>编解码器基本上是可以作为输入或输出的一部分进行操作的流过滤器。 编解码器使您能够轻松地将消息的传输与序列化过程分离。 流行的编解码器包括json，msgpack和plain（text）。</p>
<ul>
<li>json：以JSON格式编码或解码数据。</li>
<li>multiline：将多行文本事件（如java异常和stacktrace消息）合并为单个事件。</li>
</ul>
<p>有关可用编解码器的详细信息，请参阅编解码器插件。</p>
<h4 id="容错"><a href="#容错" class="headerlink" title="容错"></a>容错</h4><p>Logstash在处理期间将所有事件保留在主存储器中。 Logstash通过尝试暂停输入并等待挂起事件在关闭之前完成处理，来响应SIGTERM。 当管道由于卡住的输出或过滤器而无法刷新时，Logstash会无限期地等待。 例如，当管道将输出发送到Logstash实例无法访问的数据库时，实例在接收到SIGTERM后无限期等待。</p>
<p>要使Logstash能够检测这些情况并以停止的管道终止，请使用–allow-unsafe-shutdown标志。</p>
<blockquote>
<p>警告:不安全的关闭，强制杀死Logstash进程或由于任何其他原因导致Logstash进程崩溃导致数据丢失。 尽可能安全地关闭Logstash。</p>
</blockquote>
<h4 id="执行模型"><a href="#执行模型" class="headerlink" title="执行模型"></a>执行模型</h4><p>Logstash管道协调输入，过滤器和输出的执行。 以下示意图描绘了流水线的数据流：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">input threads | pipeline worker threads</div></pre></td></tr></table></figure></p>
<p>管道在当前版本的Logstash进程过滤和输出在同一个线程。在2.2版本的Logstash之前，过滤和输出是由不同线程处理的不同阶段。对Logstash架构的这种更改可以提高性能并支持未来的持久性功能。新的流水线大大提高了线程活性，减少了资源使用，并增加了吞吐量。当前的Logstash管道是一个微批处理管道，其本质上比一次一个方法更有效。这些效率在许多地方出现，其中两个更突出的是减少争用和随之而来的线程活性的改善。这些效率在多核机器上尤其显着。</p>
<p>Logstash配置文件中的每个input{}语句都在其自己的线程中运行。将事件输入到公共Java同步队列。此队列不保留任何事件，而是将每个已推送事件转移到空闲工作线程，阻止所有工作线程忙。每个流水线工作线程从此队列中取出一批事件，为每个工人创建一个缓冲区，通过配置的过滤器运行该批事件，然后通过任何输出运行过滤的事件。批处理的大小和流水线工作线程的数量是可配置的。以下伪代码说明了过程流程：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">synchronous_queue = SynchronousQueue.new</div><div class="line">inputs.each do |input|</div><div class="line">  Thread.new do</div><div class="line">    input.run(synchronous_queue)</div><div class="line">  end</div><div class="line">end</div><div class="line">num_pipeline_workers.times do</div><div class="line">  Thread.new do</div><div class="line">    while true</div><div class="line">      batch = take_batch(synchronous_queue, batch_size, batch_delay)</div><div class="line">      output_batch(filter_batch(batch))</div><div class="line">    end</div><div class="line">  end</div><div class="line">end</div><div class="line">wait_for_threads_to_terminate()</div></pre></td></tr></table></figure></p>
<p>在管道中有三个可配置选项，–pipeline-workers，–pipeline-batch-size和–pipeline-batch-delay。</p>
<ul>
<li><p>–pipeline-workers或-w参数确定要为过滤器和输出处理运行多少线程。如果发现事件正在备份，或CPU未饱和，请考虑增加此参数的值以更好地利用可用的处理能力。好的结果甚至可以发现增加这个数字超过可用处理器的数量，因为这些线程在写入外部系统时可能在I / O等待状态中花费大量时间。此参数的合法值为正整数。</p>
</li>
<li><p>–pipeline-batch-size或-b参数定义单个工作线程在尝试执行过滤器和输出之前收集的最大事件数。较大的批量大小通常更高效，但增加了内存开销。某些硬件配置要求您通过设置LS_HEAP_SIZE变量来增加JVM堆大小，以避免使用此选项导致性能下降。此参数的值超过最佳范围会导致由于频繁的垃圾回收或与内存不足异常相关的JVM崩溃而导致性能下降。输出插件可以将每个批处理作为逻辑单元处理。例如，Elasticsearch输出针对接收的每个批生产批量请求。调整-b参数可调整发送到Elasticsearch的批量请求的大小。</p>
</li>
<li><p>–pipeline-batch-delay选项很少需要调整。此选项可调整Logstash管道的延迟。流水线批处理延迟是Logstash在当前管道工作线程中接收到事件后等待新消息的最大时间（毫秒）。在此时间过后，Logstash开始执行过滤器和输出.Logstash在接收事件和在过滤器中处理该事件之间等待的最大时间是pipeline_batch_delay和pipeline_batch_size设置的乘积。</p>
</li>
</ul>
<h4 id="关于流水线配置和性能的注意事项"><a href="#关于流水线配置和性能的注意事项" class="headerlink" title="关于流水线配置和性能的注意事项"></a>关于流水线配置和性能的注意事项</h4><p>飞行事件的总数由pipeline_workers和pipeline_batch_size参数的乘积确定。本产品称为飞行计数。在调整pipeline_workers和pipeline_batch_size参数时，请记住飞行计数的值。以不规则间隔间歇接收大型事件的管道需要足够的内存来处理这些尖峰。相应地配置LS_HEAP_SIZE选项。</p>
<p>Logstash默认值是为大多数用户提供快速，安全的性能。要提高性能，请增加管道工作者的数量或批量大小，同时考虑以下建议：</p>
<p>测量每个更改以确保其性能提高，而不是降低。确保您留下足够的内存可用来应付突然增加的事件大小。例如，生成表示为大文本块的异常的应用程序。工作程序的数量可以设置为高于CPU核心的数量，因为输出经常在I / O等待条件中花费空闲时间。</p>
<p>Java中的线程具有名称，您可以使用jstack，top和VisualVM图形工具来确定给定线程使用的资源。</p>
<p>在Linux平台上，Logstash标记了所有可以描述的线程。例如，输入显示为[base] <inputname，过滤器 输出工作者显示为[base]=""> workerN，其中N是整数。在可能的情况下，还会标记其他线程以帮助您确定其目的。</inputname，过滤器></p>
<h4 id="分析堆"><a href="#分析堆" class="headerlink" title="分析堆"></a>分析堆</h4><p>当调整Logstash时，您可能需要调整堆大小。 您可以使用VisualVM工具来分析堆。 监视器窗格特别适用于检查堆分配是否足以满足当前工作负载。 下面的屏幕截图显示示例监视器窗格。 第一个窗格检查配置了太多飞行事件的Logstash实例。 第二个窗格检查配置有适当数量的飞行事件的Logstash实例。 请注意，此处使用的特定批量大小很可能不适用于您的特定工作负载，因为Logstash的内存需求在很大程度上取决于您要发送的消息类型。</p>
<p><img src="http://n.sinaimg.cn/games/3ece443e/20161024/pipeline_overload.png" alt="img"></p>
<p><img src="http://n.sinaimg.cn/games/3ece443e/20161024/pipeline_correct_load.png" alt="img"></p>
<p>在第一个例子中，我们看到CPU没有被非常有效地使用。 事实上，JVM经常需要停止VM的“完全GC”。 完全的垃圾收集是过度内存压力的常见症状。 这在CPU图表上的尖锐模式中可见。 在更高效配置的示例中，GC图形图案更光滑，并且CPU以更均匀的方式使用。 你还可以看到，在分配的堆大小和最大允许之间有足够的余量，给JVM GC一个很大的空间使用。</p>
<p>使用类似于优秀的VisualGC插件的工具来检查深入的GC统计数据表明，与在更资源密集型的“全”GC中花费的时间相比，过度分配的VM在高效的Eden GC中花费的时间非常少 。</p>
<blockquote>
<p>只要GC模式可以接受，堆大小偶尔增加到最大是可以接受的。 这种堆大小尖峰响应于通过流水线的大事件的突发而发生。 在一般实践中，保持使用的堆内存量和最大值之间的差距。 本文档不是JVM GC调优的全面指南。 阅读官方Oracle指南有关该主题的更多信息。 我们还建议您阅读调试Java性能。</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;Logstash简介&lt;/li&gt;
&lt;li&gt;Logstash入门&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="Logstash" scheme="https://weizhimiao.github.io/categories/Logstash/"/>
    
    
      <category term="Logstash" scheme="https://weizhimiao.github.io/tags/Logstash/"/>
    
  </entry>
  
  <entry>
    <title>PHP根据文件头检测文件类型</title>
    <link href="https://weizhimiao.github.io/2016/10/23/PHP%E6%A0%B9%E6%8D%AE%E6%96%87%E4%BB%B6%E5%A4%B4%E6%A3%80%E6%B5%8B%E6%96%87%E4%BB%B6%E7%B1%BB%E5%9E%8B/"/>
    <id>https://weizhimiao.github.io/2016/10/23/PHP根据文件头检测文件类型/</id>
    <published>2016-10-23T10:30:00.000Z</published>
    <updated>2016-10-26T13:46:17.000Z</updated>
    
    <content type="html"><![CDATA[<p>文件签名一般都在文件的头部，如果你用十六进制方式查看文件，你就可以看到文件的一些签名信息。如用uestudio以十六进制方式查看zip格式的文件，其文件内容头部有50 4B 03 04这样的十六进制信息。同理jpg文件状况有FF D8 FF E0 xx xx 4A 46这样的十六进制信息，其实这此十六进制都是表示一些特殊字条。</p>
<a id="more"></a>
<p>php怎么样验证文件类型？先来看一个简单的方法：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">checkFileType</span><span class="params">($fileName)</span></span>&#123;  </div><div class="line">       $file = fopen($fileName, <span class="string">"rb"</span>);  </div><div class="line">       $bin = fread($file, <span class="number">2</span>); <span class="comment">//只读2字节  </span></div><div class="line">       fclose($file);  </div><div class="line">	<span class="comment">// C为无符号整数，网上搜到的都是c，为有符号整数，这样会产生负数判断不正常</span></div><div class="line">       $strInfo  = @unpack(<span class="string">"C2chars"</span>, $bin);</div><div class="line">       $typeCode = intval($strInfo[<span class="string">'chars1'</span>].$strInfo[<span class="string">'chars2'</span>]);  </div><div class="line">       $fileType = <span class="string">''</span>;  </div><div class="line"></div><div class="line">	<span class="keyword">switch</span>( $typeCode )</div><div class="line">	&#123;</div><div class="line">		<span class="keyword">case</span> <span class="string">'255216'</span>:</div><div class="line">			<span class="keyword">return</span> $typeCode. <span class="string">' : '</span> .<span class="string">'jpg'</span>;</div><div class="line">			<span class="keyword">break</span>;</div><div class="line">		<span class="keyword">case</span> <span class="string">'7173'</span>:</div><div class="line">			<span class="keyword">return</span> $typeCode. <span class="string">' : '</span> .<span class="string">'gif'</span>;</div><div class="line">			<span class="keyword">break</span>;</div><div class="line">		<span class="keyword">case</span> <span class="string">'13780'</span>:</div><div class="line">			<span class="keyword">return</span> $typeCode. <span class="string">' : '</span> .<span class="string">'png'</span>;</div><div class="line">			<span class="keyword">break</span>;</div><div class="line">		<span class="keyword">case</span> <span class="string">'6677'</span>:</div><div class="line">			<span class="keyword">return</span> $typeCode. <span class="string">' : '</span> .<span class="string">'bmp'</span>;</div><div class="line">			<span class="keyword">break</span>;</div><div class="line">		<span class="keyword">case</span> <span class="string">'7790'</span>:</div><div class="line">			<span class="keyword">return</span> $typeCode. <span class="string">' : '</span> .<span class="string">'exe'</span>;</div><div class="line">			<span class="keyword">break</span>;</div><div class="line">		<span class="keyword">case</span> <span class="string">'7784'</span>:</div><div class="line">			<span class="keyword">return</span> $typeCode. <span class="string">' : '</span> .<span class="string">'midi'</span>;</div><div class="line">			<span class="keyword">break</span>;</div><div class="line">		<span class="keyword">case</span> <span class="string">'8297'</span>:</div><div class="line">			<span class="keyword">return</span> $typeCode. <span class="string">' : '</span> .<span class="string">'rar'</span>;</div><div class="line">			<span class="keyword">break</span>;</div><div class="line">		<span class="keyword">default</span>:</div><div class="line">			<span class="keyword">return</span> $typeCode. <span class="string">' : '</span> .<span class="string">'Unknown'</span>;</div><div class="line">			<span class="keyword">break</span>;</div><div class="line">	&#125;</div><div class="line">	<span class="comment">//return $typeCode;</span></div><div class="line">   &#125;</div><div class="line"></div><div class="line">$file_name = <span class="string">'11.doc'</span>;</div><div class="line"><span class="keyword">echo</span> checkFileType($file_name);</div></pre></td></tr></table></figure></p>
<p>下来提供一个类的实现：</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"><span class="comment">/*通过文件名，获得文件类型*</span></div><div class="line"> *<span class="doctag">@author</span> chengmo QQ:8292669*</div><div class="line"> *<span class="doctag">@copyright</span> &lt;a href="http://www.cnblogs.com/chengmo"&gt;http://www.cnblogs.com/chengmo&lt;/a&gt; 2010-10-17</div><div class="line"> *<span class="doctag">@version</span> 0.1</div><div class="line"> *$filename="d:/1.png";echo cFileTypeCheck::getFileType($filename); 打印：png</div><div class="line"> */</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">cFileTypeCheck</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> $_TypeList=<span class="keyword">array</span>();</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> $CheckClass=<span class="keyword">null</span>;</div><div class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($filename)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">self</span>::$_TypeList=<span class="keyword">$this</span>-&gt;getTypeList();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     *处理文件类型映射关系表*</div><div class="line">     *</div><div class="line">     * <span class="doctag">@param</span> string $filename 文件类型</div><div class="line">     * <span class="doctag">@return</span> string 文件类型，没有找到返回：other</div><div class="line">     */</div><div class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">_getFileType</span><span class="params">($filename)</span></span></div><div class="line">    &#123;</div><div class="line">        $filetype=<span class="string">"other"</span>;</div><div class="line">        <span class="keyword">if</span>(!file_exists($filename)) <span class="keyword">throw</span> <span class="keyword">new</span> <span class="keyword">Exception</span>(<span class="string">"no found file!"</span>);</div><div class="line">        $file = @fopen($filename,<span class="string">"rb"</span>);</div><div class="line">        <span class="keyword">if</span>(!$file) <span class="keyword">throw</span> <span class="keyword">new</span> <span class="keyword">Exception</span>(<span class="string">"file refuse!"</span>);</div><div class="line">        $bin = fread($file, <span class="number">15</span>); <span class="comment">//只读15字节 各个不同文件类型，头信息不一样。</span></div><div class="line">        fclose($file);</div><div class="line"></div><div class="line">        $typelist=<span class="keyword">self</span>::$_TypeList;</div><div class="line">        <span class="keyword">foreach</span> ($typelist <span class="keyword">as</span> $v)</div><div class="line">        &#123;</div><div class="line">            $blen=strlen(pack(<span class="string">"H*"</span>,$v[<span class="number">0</span>])); <span class="comment">//得到文件头标记字节数</span></div><div class="line">            $tbin=substr($bin,<span class="number">0</span>,intval($blen)); <span class="comment">///需要比较文件头长度</span></div><div class="line"></div><div class="line">            <span class="keyword">if</span>(strtolower($v[<span class="number">0</span>])==strtolower(array_shift(unpack(<span class="string">"H*"</span>,$tbin))))</div><div class="line">            &#123;</div><div class="line">                <span class="keyword">return</span> $v[<span class="number">1</span>];</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> $filetype;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     *得到文件头与文件类型映射表*</div><div class="line">     *</div><div class="line">     * <span class="doctag">@return</span> array array(array('key',value)...)</div><div class="line">     */</div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getTypeList</span><span class="params">()</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">array</span>(<span class="keyword">array</span>(<span class="string">"FFD8FFE1"</span>,<span class="string">"jpg"</span>),</div><div class="line">        <span class="keyword">array</span>(<span class="string">"89504E47"</span>,<span class="string">"png"</span>),</div><div class="line">        <span class="keyword">array</span>(<span class="string">"47494638"</span>,<span class="string">"gif"</span>),</div><div class="line">        <span class="keyword">array</span>(<span class="string">"49492A00"</span>,<span class="string">"tif"</span>),</div><div class="line">        <span class="keyword">array</span>(<span class="string">"424D"</span>,<span class="string">"bmp"</span>),</div><div class="line">        <span class="keyword">array</span>(<span class="string">"41433130"</span>,<span class="string">"dwg"</span>),</div><div class="line">        <span class="keyword">array</span>(<span class="string">"38425053"</span>,<span class="string">"psd"</span>),</div><div class="line">        <span class="keyword">array</span>(<span class="string">"7B5C727466"</span>,<span class="string">"rtf"</span>),</div><div class="line">        <span class="keyword">array</span>(<span class="string">"3C3F786D6C"</span>,<span class="string">"xml"</span>),</div><div class="line">        <span class="keyword">array</span>(<span class="string">"68746D6C3E"</span>,<span class="string">"html"</span>),</div><div class="line">        <span class="keyword">array</span>(<span class="string">"44656C69766572792D646174"</span>,<span class="string">"eml"</span>),</div><div class="line">        <span class="keyword">array</span>(<span class="string">"CFAD12FEC5FD746F"</span>,<span class="string">"dbx"</span>),</div><div class="line">        <span class="keyword">array</span>(<span class="string">"2142444E"</span>,<span class="string">"pst"</span>),</div><div class="line">        <span class="keyword">array</span>(<span class="string">"D0CF11E0"</span>,<span class="string">"xls/doc"</span>),</div><div class="line">        <span class="keyword">array</span>(<span class="string">"5374616E64617264204A"</span>,<span class="string">"mdb"</span>),</div><div class="line">        <span class="keyword">array</span>(<span class="string">"FF575043"</span>,<span class="string">"wpd"</span>),</div><div class="line">        <span class="keyword">array</span>(<span class="string">"252150532D41646F6265"</span>,<span class="string">"eps/ps"</span>),</div><div class="line">        <span class="keyword">array</span>(<span class="string">"255044462D312E"</span>,<span class="string">"pdf"</span>),</div><div class="line">        <span class="keyword">array</span>(<span class="string">"E3828596"</span>,<span class="string">"pwl"</span>),</div><div class="line">        <span class="keyword">array</span>(<span class="string">"504B0304"</span>,<span class="string">"zip"</span>),</div><div class="line">        <span class="keyword">array</span>(<span class="string">"52617221"</span>,<span class="string">"rar"</span>),</div><div class="line">        <span class="keyword">array</span>(<span class="string">"57415645"</span>,<span class="string">"wav"</span>),</div><div class="line">        <span class="keyword">array</span>(<span class="string">"41564920"</span>,<span class="string">"avi"</span>),</div><div class="line">        <span class="keyword">array</span>(<span class="string">"2E7261FD"</span>,<span class="string">"ram"</span>),</div><div class="line">        <span class="keyword">array</span>(<span class="string">"2E524D46"</span>,<span class="string">"rm"</span>),</div><div class="line">        <span class="keyword">array</span>(<span class="string">"000001BA"</span>,<span class="string">"mpg"</span>),</div><div class="line">        <span class="keyword">array</span>(<span class="string">"000001B3"</span>,<span class="string">"mpg"</span>),</div><div class="line">        <span class="keyword">array</span>(<span class="string">"6D6F6F76"</span>,<span class="string">"mov"</span>),</div><div class="line">        <span class="keyword">array</span>(<span class="string">"3026B2758E66CF11"</span>,<span class="string">"asf"</span>),</div><div class="line">        <span class="keyword">array</span>(<span class="string">"4D546864"</span>,<span class="string">"mid"</span>));</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">getFileType</span><span class="params">($filename)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span>(!<span class="keyword">self</span>::$CheckClass) <span class="keyword">self</span>::$CheckClass=<span class="keyword">new</span> <span class="keyword">self</span>($filename);</div><div class="line">        $class=<span class="keyword">self</span>::$CheckClass;</div><div class="line">        <span class="keyword">return</span> $class-&gt;_getFileType($filename);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line">$filename=<span class="string">"22.jpg"</span>;</div><div class="line"><span class="keyword">echo</span> $filename,<span class="string">"t"</span>,cFileTypeCheck::getFileType($filename),<span class="string">"rn"</span>;</div><div class="line">$filename=<span class="string">"11.doc"</span>;</div><div class="line"><span class="keyword">echo</span> $filename,<span class="string">"t"</span>,cFileTypeCheck::getFileType($filename),<span class="string">"rn"</span>;</div></pre></td></tr></table></figure>
<p>或者可以这么检测：</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line">$filename = <span class="string">'22.jpg'</span>;</div><div class="line"></div><div class="line">$extname = strtolower(substr($filename, strrpos($filename, <span class="string">'.'</span>) + <span class="number">1</span>));</div><div class="line"><span class="keyword">echo</span> $extname.<span class="string">'&lt;br /&gt;'</span>;</div><div class="line">$file = @fopen($filename, <span class="string">'rb'</span>);</div><div class="line">    <span class="keyword">if</span> ($file)</div><div class="line">    &#123;</div><div class="line">        $str = @fread($file, <span class="number">0x400</span>); <span class="comment">// 读取前 1024 个字节</span></div><div class="line">		<span class="keyword">echo</span> substr($str, <span class="number">0</span>, <span class="number">4</span>);</div><div class="line">        @fclose($file);</div><div class="line">    &#125;</div><div class="line"> 	<span class="keyword">if</span> (substr($str, <span class="number">0</span>, <span class="number">4</span>) == <span class="string">'MThd'</span> &amp;&amp; $extname != <span class="string">'txt'</span>)</div><div class="line">        &#123;</div><div class="line">            $format = <span class="string">'mid'</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">elseif</span> (substr($str, <span class="number">0</span>, <span class="number">4</span>) == <span class="string">'RIFF'</span> &amp;&amp; $extname == <span class="string">'wav'</span>)</div><div class="line">        &#123;</div><div class="line">            $format = <span class="string">'wav'</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">elseif</span> (substr($str ,<span class="number">0</span>, <span class="number">3</span>) == <span class="string">"/xFF/xD8/xFF"</span>)</div><div class="line">        &#123;</div><div class="line">            $format = <span class="string">'jpg'</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">elseif</span> (substr($str ,<span class="number">0</span>, <span class="number">4</span>) == <span class="string">'GIF8'</span> &amp;&amp; $extname != <span class="string">'txt'</span>)</div><div class="line">        &#123;</div><div class="line">            $format = <span class="string">'gif'</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">elseif</span> (substr($str ,<span class="number">0</span>, <span class="number">8</span> ) == <span class="string">"/x89/x50/x4E/x47/x0D/x0A/x1A/x0A"</span>)</div><div class="line">        &#123;</div><div class="line">            $format = <span class="string">'png'</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">elseif</span> (substr($str ,<span class="number">0</span>, <span class="number">2</span>) == <span class="string">'BM'</span> &amp;&amp; $extname != <span class="string">'txt'</span>)</div><div class="line">        &#123;</div><div class="line">            $format = <span class="string">'bmp'</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">elseif</span> ((substr($str ,<span class="number">0</span>, <span class="number">3</span>) == <span class="string">'CWS'</span> || substr($str ,<span class="number">0</span>, <span class="number">3</span>) == <span class="string">'FWS'</span>) &amp;&amp; $extname != <span class="string">'txt'</span>)</div><div class="line">        &#123;</div><div class="line">            $format = <span class="string">'swf'</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">elseif</span> (substr($str ,<span class="number">0</span>, <span class="number">4</span>) == <span class="string">"/xD0/xCF/x11/xE0"</span>)</div><div class="line">        &#123;   <span class="comment">// D0CF11E == DOCFILE == Microsoft Office Document</span></div><div class="line">            <span class="keyword">if</span> (substr($str,<span class="number">0x200</span>,<span class="number">4</span>) == <span class="string">"/xEC/xA5/xC1/x00"</span> || $extname == <span class="string">'doc'</span>)</div><div class="line">            &#123;</div><div class="line">                $format = <span class="string">'doc'</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">elseif</span> (substr($str,<span class="number">0x200</span>,<span class="number">2</span>) == <span class="string">"/x09/x08"</span> || $extname == <span class="string">'xls'</span>)</div><div class="line">            &#123;</div><div class="line">                $format = <span class="string">'xls'</span>;</div><div class="line">            &#125; <span class="keyword">elseif</span> (substr($str,<span class="number">0x200</span>,<span class="number">4</span>) == <span class="string">"/xFD/xFF/xFF/xFF"</span> || $extname == <span class="string">'ppt'</span>)</div><div class="line">            &#123;</div><div class="line">                $format = <span class="string">'ppt'</span>;</div><div class="line">            &#125;</div><div class="line">        &#125; <span class="keyword">elseif</span> (substr($str ,<span class="number">0</span>, <span class="number">4</span>) == <span class="string">"PK/x03/x04"</span>)</div><div class="line">        &#123;</div><div class="line">            $format = <span class="string">'zip'</span>;</div><div class="line">        &#125; <span class="keyword">elseif</span> (substr($str ,<span class="number">0</span>, <span class="number">4</span>) == <span class="string">'Rar!'</span> &amp;&amp; $extname != <span class="string">'txt'</span>)</div><div class="line">        &#123;</div><div class="line">            $format = <span class="string">'rar'</span>;</div><div class="line">        &#125; <span class="keyword">elseif</span> (substr($str ,<span class="number">0</span>, <span class="number">4</span>) == <span class="string">"/x25PDF"</span>)</div><div class="line">        &#123;</div><div class="line">            $format = <span class="string">'pdf'</span>;</div><div class="line">        &#125; <span class="keyword">elseif</span> (substr($str ,<span class="number">0</span>, <span class="number">3</span>) == <span class="string">"/x30/x82/x0A"</span>)</div><div class="line">        &#123;</div><div class="line">            $format = <span class="string">'cert'</span>;</div><div class="line">        &#125; <span class="keyword">elseif</span> (substr($str ,<span class="number">0</span>, <span class="number">4</span>) == <span class="string">'ITSF'</span> &amp;&amp; $extname != <span class="string">'txt'</span>)</div><div class="line">        &#123;</div><div class="line">            $format = <span class="string">'chm'</span>;</div><div class="line">        &#125; <span class="keyword">elseif</span> (substr($str ,<span class="number">0</span>, <span class="number">4</span>) == <span class="string">"/x2ERMF"</span>)</div><div class="line">        &#123;</div><div class="line">            $format = <span class="string">'rm'</span>;</div><div class="line">        &#125; <span class="keyword">elseif</span> ($extname == <span class="string">'sql'</span>)</div><div class="line">        &#123;</div><div class="line">            $format = <span class="string">'sql'</span>;</div><div class="line">        &#125; <span class="keyword">elseif</span> ($extname == <span class="string">'txt'</span>)</div><div class="line">        &#123;</div><div class="line">            $format = <span class="string">'txt'</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">		<span class="keyword">echo</span> $format;</div></pre></td></tr></table></figure>
<p><a href="http://www.nowamagic.net/librarys/veda/detail/836" target="_blank" rel="external">转自：http://www.nowamagic.net/librarys/veda/detail/836</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;文件签名一般都在文件的头部，如果你用十六进制方式查看文件，你就可以看到文件的一些签名信息。如用uestudio以十六进制方式查看zip格式的文件，其文件内容头部有50 4B 03 04这样的十六进制信息。同理jpg文件状况有FF D8 FF E0 xx xx 4A 46这样的十六进制信息，其实这此十六进制都是表示一些特殊字条。&lt;/p&gt;
    
    </summary>
    
      <category term="PHP" scheme="https://weizhimiao.github.io/categories/PHP/"/>
    
    
  </entry>
  
  <entry>
    <title>Xdebug之PHP脚本剖析</title>
    <link href="https://weizhimiao.github.io/2016/10/22/Xdebug%E4%B9%8BPHP%E8%84%9A%E6%9C%AC%E5%89%96%E6%9E%90/"/>
    <id>https://weizhimiao.github.io/2016/10/22/Xdebug之PHP脚本剖析/</id>
    <published>2016-10-22T12:30:00.000Z</published>
    <updated>2016-10-22T16:06:38.000Z</updated>
    
    <content type="html"><![CDATA[<p>Xdebug内置分析器允许您在脚本中找到瓶颈，并使用外部工具（如KCacheGrind或WinCacheGrind）可视化这些瓶颈。</p>
<a id="more"></a>
<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>Xdebug的Profiler是一个强大的工具，使您能够分析您的PHP代码并确定瓶颈，或者通常查看代码的哪些部分很慢，并可以使用速度提升。<br>Xdebug 2中的分析器以高速缓存磨削兼容文件的形式输出分析信息。这允许您使用优秀的KCacheGrind工具（Linux，KDE）来分析概要分析数据。</p>
<ul>
<li><p>如果你在Linux上，你可以安装KCacheGrind通过你最喜欢的包管理器。</p>
</li>
<li><p>如果你在Windows上，有预编译的QCacheGrind二进制文件可用。 （QCacheGrind是没有KDE绑定的KCacheGrind）。</p>
</li>
<li><p>如果你在Mac OSX上，还有如何构建QCacheGrind的说明。</p>
</li>
</ul>
<p>Windows的用户可以选择使用WinCacheGrind。该功能不同于KCacheGrind，因此在此页面上记录使用KCacheGrind的部分不适用于此程序。 WinCacheGrind目前不支持Xdebug 2.3引入的cachegrind文件的文件和函数压缩。</p>
<p>还有一个替代的配置文件信息呈现工具xdebugtoolkit，一个称为Webgrind的基于Web的前端，以及一个名为XCallGraph的基于Java的工具。</p>
<p>如果您不能使用KDE（或不想使用KDE），kcachegrind软件包也会附带一个perl脚本“ct_annotate”，该脚本从profiler跟踪文件生成ASCII输出。</p>
<h2 id="启动Profiler"><a href="#启动Profiler" class="headerlink" title="启动Profiler"></a>启动Profiler</h2><p>通过在php.ini中将xdebug.profiler_enable设置为1来启用分析。<br>这将指示Xdebug开始将分析信息写入使用xdebug.profiler_output_dir指令配置的转储目录。<br>生成的文件的名称始终以“cachegrind.out”开头。并以PHP（或Apache）进程的PID（进程ID）或包含最初调试的脚本的目录的crc32哈希结束。<br>请确保您的xdebug.profiler_output_dir中有足够的空间，因为分析器生成的信息量对于复杂脚本非常大，例如对于像eZ Publish这样的复杂应用程序，最多可以有500MB的空间。</p>
<p>您还可以选择性地启用分析器，将xdebug.profiler_enable_trigger设置为1.<br>如果设置为1，那么可以使用名为XDEBUG_PROFILE的GET / POST或COOKIE变量启用分析器。<br>可以用于启用调试器（请参阅HTTP调试会话）的FireFox 2扩展也可以与此设置一起使用。为了使触发器正常工作，xdebug.profiler_enable需要设置为0。</p>
<h2 id="分析Profiler"><a href="#分析Profiler" class="headerlink" title="分析Profiler"></a>分析Profiler</h2><p>生成配置文件信息文件后，可以使用 <a href="https://kcachegrind.github.io/" target="_blank" rel="external">KCacheGrind</a> 打开它：</p>
<p><img src="https://xdebug.org/images/docs/kc-open.png" alt="img"></p>
<p>一旦打开文件，您就可以在KCacheGrind的不同窗格中获得大量信息。在左侧，找到“Flat Profile”窗格，其中显示了脚本中按照此函数中的时间花费及其所有子项排序的所​​有函数。第二列“Self”显示此函数（没有其子项）的时间花费，第三列“Called”显示特定函数的调用频率，最后一列“Function”显示函数的名称。 Xdebug通过用“php ::”作为前缀来更改内部PHP函数名称，并且包含文件也以特殊方式处理。调用include（和include_one，require和require_once）后跟“::”和包含文件的文件名。在左边的截图中你可以看到“include :: / home / httpd / ez_34 / v …”，内部PHP函数的例子是“php :: mysql_query”。前两列中的数字可以是脚本的完整运行时间的百分比（如在示例中）或绝对时间（1单位是1 / 1,000,000秒）。您可以使用右侧显示的按钮在两种模式之间切换。</p>
<p><img src="https://xdebug.org/images/docs/kc-profile.png" alt="img"></p>
<p>右侧的窗格包含上窗格和下窗格。 上面的图显示了有关称为当前所选函数的函数的信息（“eztemplatedesignresource-&gt; executecompiledtemplate”）。下面的窗格显示当前所选函数调用的函数的信息。</p>
<p><img src="https://xdebug.org/images/docs/kc-right-call.png" alt="img"></p>
<p>上方窗格中的“成本”列显示从列表中的函数调用时当前所选函数的时间花费。 添加的“费用”列中的数字将始终为100％。 下方窗格中的“成本”列显示从列表中调用函数所花费的时间。 在添加此列表中的数字时，您很可能永远不会达到100％，因为所选的函数本身也需要时间来执行。</p>
<p><img src="https://xdebug.org/images/docs/kc-right-callers.png" alt="img"></p>
<p>“所有呼叫者”和“所有呼叫”选项卡不仅显示从其调用该函数的直接调用，而且还显示所有直接调用的函数调用，还显示函数调用更多级别上下调用。 左侧屏幕截图中的上部窗格显示了所有调用当前所选函数的函数，直接和间接地使用堆栈上它们之间的其他函数。 “距离”列显示列出的和当前选择的函数调用之间有多少个函数调用（-1）。 如果两个函数之间有不同的距离，则显示为一个范围（例如“5-24”）。 括号中的数字是中值距离。 下面的窗格是类似的，除了它显示从当前选择的函数调用的函数的信息，再次是直接或间接。</p>
<h2 id="相关的设置"><a href="#相关的设置" class="headerlink" title="相关的设置"></a>相关的设置</h2><h3 id="xdebug-profiler-append"><a href="#xdebug-profiler-append" class="headerlink" title="xdebug.profiler_append"></a>xdebug.profiler_append</h3><p>类型：整数，默认值：0</p>
<p>当此设置设置为1时，当新请求映射到同一文件时（不在xdebug.profiler_output_name设置上），将不会覆盖分析器文件，而是使用新配置文件附加文件。</p>
<h3 id="xdebug-profiler-enable"><a href="#xdebug-profiler-enable" class="headerlink" title="xdebug.profiler_enable"></a>xdebug.profiler_enable</h3><p>类型：整数，默认值：0</p>
<p>启用Xdebug的概要分析器，它在概要文件输出目录中创建文件。这些文件可以由KCacheGrind读取以可视化您的数据。<br>无法使用ini_set（）在脚本中设置此设置。如果要选择性地启用分析器，请将xdebug.profiler_enable_trigger设置为1，而不使用此设置。</p>
<h3 id="xdebug-profiler-enable-trigger"><a href="#xdebug-profiler-enable-trigger" class="headerlink" title="xdebug.profiler_enable_trigger"></a>xdebug.profiler_enable_trigger</h3><p>类型：整数，默认值：0</p>
<p>当此设置设置为1时，可以使用XDEBUG_PROFILE GET / POST参数触发剖析器文件的生成，或者设置名为XDEBUG_PROFILE的cookie。<br>这将然后将分析器数据写入定义的目录。为了防止profiler为每个请求生成概要文件文件，您需要将xdebug.profiler_enable设置为0.对触发器本身的访问可以通过xdebug.profiler_enable_trigger_value配置。</p>
<h3 id="xdebug-profiler-enable-trigger-value"><a href="#xdebug-profiler-enable-trigger-value" class="headerlink" title="xdebug.profiler_enable_trigger_value"></a>xdebug.profiler_enable_trigger_value</h3><p>类型：字符串，默认值：“”，在Xdebug&gt; 2.3中引入</p>
<p>此设置可用于限制谁可以使用xdebug.profiler_enable_trigger中概述的XDEBUG_PROFILE功能。当从空字符串的默认值更改时，cookie，GET或POST参数的值需要使用此设置匹配共享机密集，<br>以便分析器启动。</p>
<h3 id="xdebug-profiler-output-dir"><a href="#xdebug-profiler-output-dir" class="headerlink" title="xdebug.profiler_output_dir"></a>xdebug.profiler_output_dir</h3><p>类型：字符串，默认值：/ tmp</p>
<p>将写入分析器输出的目录，确保PHP将运行的用户具有对该目录的写入权限。无法使用ini_set（）在脚本中设置此设置。</p>
<h3 id="xdebug-profiler-output-name"><a href="#xdebug-profiler-output-name" class="headerlink" title="xdebug.profiler_output_name"></a>xdebug.profiler_output_name</h3><p>类型：字符串，默认值：cachegrind.out。％p</p>
<p>此设置确定用于将跟踪转储到的文件的名称。设置使用格式说明符指定格式，非常类似于sprintf（）和strftime（）。有几个格式说明符可以用于格式化文件名。</p>
<p>有关受支持的说明符，请参见 <a href="https://xdebug.org/docs/all_settings#trace_output_name" target="_blank" rel="external">xdebug.trace_output_name</a> 文档。</p>
<h2 id="相关函数"><a href="#相关函数" class="headerlink" title="相关函数"></a>相关函数</h2><h3 id="string-xdebug-get-profiler-filename（）"><a href="#string-xdebug-get-profiler-filename（）" class="headerlink" title="string xdebug get profiler filename（）"></a>string xdebug get profiler filename（）</h3><p>返回配置文件信息文件名</p>
<p>返回用于将配置文件信息保存到的文件的名称。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Xdebug内置分析器允许您在脚本中找到瓶颈，并使用外部工具（如KCacheGrind或WinCacheGrind）可视化这些瓶颈。&lt;/p&gt;
    
    </summary>
    
      <category term="PHP" scheme="https://weizhimiao.github.io/categories/PHP/"/>
    
    
      <category term="Xdebug" scheme="https://weizhimiao.github.io/tags/Xdebug/"/>
    
  </entry>
  
  <entry>
    <title>Xdebug之远程调试</title>
    <link href="https://weizhimiao.github.io/2016/10/22/Xdebug%E4%B9%8B%E8%BF%9C%E7%A8%8B%E8%B0%83%E8%AF%95/"/>
    <id>https://weizhimiao.github.io/2016/10/22/Xdebug之远程调试/</id>
    <published>2016-10-22T12:30:00.000Z</published>
    <updated>2016-10-22T16:07:44.000Z</updated>
    
    <content type="html"><![CDATA[<p>Xdebug为与运行PHP脚本交互的调试器客户端提供了一个接口。 本节介绍如何设置PHP和Xdebug来允许这一点，并介绍一些客户端。</p>
<a id="more"></a>
<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>Xdebug的（远程）调试器允许您检查数据结构，交互式地浏览和调试您的代码。 正在使用的协议是打开的，称为DBGp。 此协议在Xdebug 2中实现，并替换不再支持的旧的GDB类协议。</p>
<h2 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h2><p>Xdebug 2捆绑了一个用于DBGp协议的简单命令行客户端。 还有一些其他客户端实现（免费和商业）。 我不是任何这些的作者，所以请参考原作者的支持：</p>
<ul>
<li>Dev-PHP (IDE: Windows)</li>
<li>Eclipse plugin (IDE).</li>
<li>Emacs plugin (Editor Plugin).</li>
<li>KDevelop (IDE: Linux (KDE); Open Source).</li>
<li>ActiveState’s Komodo (IDE: Windows, Linux, Mac; Commercial).</li>
<li>MacGDBP (Standalone client for Mac OS X; Free)</li>
<li>NetBeans (IDE: Windows, Linux, Mac OS X and Solaris).</li>
<li>Notepad++ plugin (Editor: Windows).</li>
<li>WaterProof’s PHPEdit (IDE, from version 2.10: Windows; Commercial).</li>
<li>PHPEclipse (Editor Plugin).</li>
<li>Devsense’s PHP Tools for Visual Studio (MS Visual Studio Plugin; Commercial).</li>
<li>JetBrain’s PhpStorm (IDE; Commercial).</li>
<li>Protoeditor (Editor: Linux).</li>
<li>pugdebug (Standalone client for Linux, Windows and Mac OS X; Open Source).</li>
<li>VIM plugin (Editor Plugin).</li>
<li>jcx software’s VS.Php (MS Visual Studio Plugin; Commercial).</li>
<li>Xdebug Chrome App (Chrome Application; Open Source)</li>
<li>XDebugClient (Standalone client for Windows).</li>
</ul>
<p>用于调试的简单命令行客户机与debugclient目录中的Xdebug捆绑在一起。</p>
<h2 id="启动调试器"><a href="#启动调试器" class="headerlink" title="启动调试器"></a>启动调试器</h2><p>为了启用Xdebug的调试器，您需要在php.ini中进行一些配置设置。 这些设置为xdebug.remote_enable以启用调试器xdebug.remote_host和xdebug.remote_port来配置调试器应连接到的IP地址和端口。 还有一个xdebug.remote_connect_back设置，如果您的开发服务器与多个开发人员共享，则可以使用此设置。</p>
<p>如果希望调试器在发生错误情况（PHP错误或异常）时启动会话，则还需要更改xdebug.remote_mode设置。 此设置的允许值为“req”（默认值），这使得调试器在脚本启动时启动会话，或者“jit”，当会话只应在错误时启动。</p>
<p>完成所有这些设置后，Xdebug仍然不会在脚本运行时自动启动调试会话。 你需要激活Xdebug的调试器，你可以通过三种方式：</p>
<p>1、当从命令行运行脚本时，您需要设置一个环境变量，如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">export XDEBUG_CONFIG=&quot;idekey=session_name&quot;</div><div class="line">php myscript.php</div></pre></td></tr></table></figure></p>
<p>您还可以在此相同的环境变量中配置xdebug.remote_host，xdebug.remote_port，xdebug.remote_mode和xdebug.remote_handler，只要使用空格分隔值即可：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">export XDEBUG_CONFIG=&quot;idekey=session_name remote_host=localhost profiler_enable=1&quot;</div></pre></td></tr></table></figure></p>
<p>通过XDEBUG_CONFIG设置可以获得的所有设置也可以使用正常的php.ini设置进行设置。</p>
<p>2、如果要调试通过Web浏览器启动的脚本，只需将XDEBUG_SESSION_START = session_name作为参数添加到URL。 而不是使用GET参数，您还可以将XDEBUG_SESSION_START设置为POST参数，或通过cookie。 请参阅下一节，了解调试会话如何在浏览器窗口中工作。</p>
<p>3、通过Web服务器运行PHP时激活调试器的另一种方法是安装以下四个浏览器扩展之一。 它们中的每一个都允许您通过单击一个按钮来启用调试器。 当这些扩展是活动的，他们直接设置XDEBUG_SESSION cookie，而不是通过XDEBUG_SESSION_START进一步的HTTP调试会话中描述。 扩展名为：</p>
<ul>
<li><p>The easiest Xdebug</p>
<blockquote>
<p>这个扩展的Firefox是为了使IDE的调试更容易。 您可以在<a href="https://addons.mozilla.org/en-US/firefox/addon/the-easiest-xdebug/找到扩展程序。" target="_blank" rel="external">https://addons.mozilla.org/en-US/firefox/addon/the-easiest-xdebug/找到扩展程序。</a></p>
</blockquote>
</li>
<li><p>Xdebug Helper for Chrome</p>
<blockquote>
<p>Chrome的此扩展程序将帮助您通过一次点击启用/禁用调试和分析。 您可以在<a href="https://chrome.google.com/extensions/detail/eadndfjplgieldjbigjakmdgkmoaaaoc找到扩展程序。" target="_blank" rel="external">https://chrome.google.com/extensions/detail/eadndfjplgieldjbigjakmdgkmoaaaoc找到扩展程序。</a></p>
</blockquote>
</li>
<li><p>Xdebug Toggler for Safari</p>
<blockquote>
<p>Safari的这个扩展允许你从Safari中自动启动Xdebug调试。 你可以从Github <a href="https://github.com/benmatselby/xdebug-toggler获取它。" target="_blank" rel="external">https://github.com/benmatselby/xdebug-toggler获取它。</a></p>
</blockquote>
</li>
<li><p>Xdebug launcher for Opera</p>
<blockquote>
<p>这个扩展的Opera允许您从Opera启动Xdebug会话。</p>
</blockquote>
</li>
</ul>
<p>在你开始你的脚本之前，你需要告诉你的客户端它可以接收调试连接，请参考具体客户端的文档如何做到这一点。 要使用捆绑的客户端，只需在编译和安装后启动它。 您可以通过运行“debugclient”启动它。</p>
<p>当debugclient启动时，它将显示以下信息，然后等待，直到调试服务器启动连接：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">Xdebug Simple DBGp client (0.10.0)</div><div class="line">Copyright 2002-2007 by Derick Rethans.</div><div class="line">- libedit support: enabled</div><div class="line"></div><div class="line">Waiting for debug server to connect.</div></pre></td></tr></table></figure></p>
<p>在建立连接后，将显示调试服务器的输出：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">Connect</div><div class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;iso-8859-1&quot;?&gt;</div><div class="line">&lt;init xmlns=&quot;urn:debugger_protocol_v1&quot;</div><div class="line">      xmlns:xdebug=&quot;http://xdebug.org/dbgp/xdebug&quot;</div><div class="line">      fileuri=&quot;file:///home/httpd/www.xdebug.org/html/docs/index.php&quot;</div><div class="line">      language=&quot;PHP&quot;</div><div class="line">      protocol_version=&quot;1.0&quot;</div><div class="line">      appid=&quot;13202&quot;</div><div class="line">      idekey=&quot;derick&quot;&gt;</div><div class="line">  &lt;engine version=&quot;2.0.0RC4-dev&quot;&gt;&lt;![CDATA[Xdebug]]&gt;&lt;/engine&gt;</div><div class="line">  &lt;author&gt;&lt;![CDATA[Derick Rethans]]&gt;&lt;/author&gt;</div><div class="line">  &lt;url&gt;&lt;![CDATA[http://xdebug.org]]&gt;&lt;/url&gt;</div><div class="line">  &lt;copyright&gt;&lt;![CDATA[Copyright (c) 2002-2007 by Derick Rethans]]&gt;&lt;/copyright&gt;</div><div class="line">&lt;/init&gt;</div><div class="line">(cmd)</div></pre></td></tr></table></figure></p>
<p>现在，您可以使用DBGp文档页面中说明的命令集。 当脚本结束时，调试服务器与客户端断开连接，并且调试客户端在等待新连接时恢复。</p>
<h2 id="通讯建立"><a href="#通讯建立" class="headerlink" title="通讯建立"></a>通讯建立</h2><h3 id="使用静态IP-单个开发者"><a href="#使用静态IP-单个开发者" class="headerlink" title="使用静态IP /单个开发者"></a>使用静态IP /单个开发者</h3><p>通过远程调试，嵌入在PHP中的Xdebug就像客户端，而IDE作为服务器。 以下动画显示了通信通道的设置：</p>
<p><img src="https://xdebug.org/images/docs/dbgp-setup.gif" alt="img"></p>
<ul>
<li>服务器的IP是10.0.1.2，HTTP在端口80上</li>
<li>IDE在IP 10.0.1.42上，因此xdebug.remote_host设置为10.0.1.42</li>
<li>IDE侦听端口9000，因此xdebug.remote_port设置为9000</li>
<li>HTTP请求在运行IDE的计算机上启动</li>
<li>Xdebug连接到10.0.1.42:9000</li>
<li>调试运行，提供HTTP响应</li>
</ul>
<h3 id="与未知IP-多开发者"><a href="#与未知IP-多开发者" class="headerlink" title="与未知IP /多开发者"></a>与未知IP /多开发者</h3><p>如果使用xdebug.remote_connect_back，设置稍有不同：</p>
<p><img src="https://xdebug.org/images/docs/dbgp-setup2.gif" alt="img"></p>
<ul>
<li>服务器的IP是10.0.1.2，HTTP在端口80上</li>
<li>IDE处于未知IP，因此xdebug.remote_connect_back设置为1</li>
<li>IDE侦听端口9000，因此xdebug.remote_port设置为9000</li>
<li>发出HTTP请求后，Xdebug将从HTTP头中检测IP地址</li>
<li>Xdebug连接到端口9000上检测到的IP（10.0.1.42）</li>
<li>调试运行，提供HTTP响应</li>
</ul>
<h2 id="HTTP调试会话"><a href="#HTTP调试会话" class="headerlink" title="HTTP调试会话"></a>HTTP调试会话</h2><p>Xdebug包含通过浏览器启动时跟踪调试会话的功能：Cookie。 这是这样工作：</p>
<ul>
<li><p>当URL变量XDEBUG_SESSION_START = name附加到URL或通过具有相同名称的POST变量时，-Xdebug会发出名为“XDEBUG_SESSION”的cookie，并将值设置为XDEBUG_SESSION_START URL参数的值。 cookie的到期时间为1小时。 当连接到“idekey”属性中的debugclient时，DBGp协议也将此相同的值传递给init包。</p>
</li>
<li><p>当有一个GET（或POST）变量XDEBUG_SESSION_START或XDEBUG_SESSION cookie被设置时，Xdebug将尝试连接到一个调试客户端。</p>
</li>
<li><p>要停止调试会话（并销毁cookie），只需添加URL参数XDEBUG_SESSION_STOP即可。 Xdebug将不再尝试连接到调试客户端。</p>
</li>
</ul>
<h2 id="多用户调试"><a href="#多用户调试" class="headerlink" title="多用户调试"></a>多用户调试</h2><p>Xdebug仅允许您在执行远程调试时指定一个IP地址与xdebug.remote_host连接。它不会自动连接回浏览器运行的计算机的IP地址，除非您使用xdebug.remote_connect_back。</p>
<p>如果所有开发人员在同一（开发）服务器上的不同项目上工作，则可以通过Apache的.htaccess功能为每个目录设置xdebug.remote_host设置，方法是使用php_value xdebug.remote_host = 10.0.0.5。但是，对于多个开发人员在同一代码上工作的情况，.htaccess技巧不工作，因为代码所在的目录是相同的。</p>
<p>有两个解决方案。首先，你可以使用DBGp代理。有关如何使用此代理的概述，请参阅多个用户调试中的文章。您可以在ActiveState的网站上下载代理作为python远程调试包的一部分。 Komodo FAQ中还有一些文档。</p>
<p>其次，您可以使用Xdebug 2.1中引入的xdebug.remote_connect_back设置。</p>
<h2 id="实施细则"><a href="#实施细则" class="headerlink" title="实施细则"></a>实施细则</h2><p>Xdebug的DBGp协议的context_names命令的实现不依赖于栈级别。 在每个调试器会话期间返回的值总是相同的，因此，可以安全地缓存。</p>
<h2 id="相关的设置"><a href="#相关的设置" class="headerlink" title="相关的设置"></a>相关的设置</h2><h3 id="xdebug-extended-info"><a href="#xdebug-extended-info" class="headerlink" title="xdebug.extended_info"></a>xdebug.extended_info</h3><p>类型：整数，默认值：1</p>
<p>控制Xdebug是否应该为PHP解析器强制执行’extended_info’模式;这允许Xdebug使用远程调试器执行文件/行断点。当跟踪或剖析脚本时，通常希望关闭此选项，因为PHP生成的oparrays将增加大约三分之一的大小减慢脚本。此设置不能在带有ini_set（）的脚本中设置，但只能在php.ini中设置。</p>
<h3 id="xdebug-idekey"><a href="#xdebug-idekey" class="headerlink" title="xdebug.idekey"></a>xdebug.idekey</h3><p>类型：字符串，默认值：<em> complex </em></p>
<p>控制哪个IDE密钥Xdebug应该传递到DBGp调试器处理程序。默认值基于环境设置。首先查询环境设置DBGP_IDEKEY，然后查询USER和最后一个USERNAME。默认值设置为找到的第一个环境变量。如果找不到，则设置为默认的“”。如果设置此设置，它始终覆盖环境变量。</p>
<h3 id="xdebug-remote-addr-header"><a href="#xdebug-remote-addr-header" class="headerlink" title="xdebug.remote_addr_header"></a>xdebug.remote_addr_header</h3><p>类型：字符串，默认值：“”，在Xdebug&gt; 2.4中引入</p>
<p>如果xdebug.remote_addr_header配置为非空字符串，那么该值将用作$ SERVER超全局数组中的键，以确定用于查找用于“连接回”的IP地址或主机名的头。此设置仅与xdebug.remote_connect_back结合使用，否则将被忽略。</p>
<h3 id="xdebug-remote-autostart"><a href="#xdebug-remote-autostart" class="headerlink" title="xdebug.remote_autostart"></a>xdebug.remote_autostart</h3><p>类型：布尔值，默认值：0</p>
<p>通常，您需要使用特定的HTTP GET / POST变量来启动远程调试（请参阅远程调试）。当此设置设置为1时，Xdebug将始终尝试启动远程调试会话并尝试连接到客户端，即使GET / POST / COOKIE变量不存在。</p>
<h3 id="xdebug-remote-connect-back"><a href="#xdebug-remote-connect-back" class="headerlink" title="xdebug.remote_connect_back"></a>xdebug.remote_connect_back</h3><p>类型：boolean，默认值：0，在Xdebug&gt; 2.1中引入</p>
<p>如果启用，xdebug.remote_host设置将被忽略，Xdebug将尝试连接到发出HTTP请求的客户端。它检查$_SERVER [‘HTTP_X_FORWARDED_FOR’]和$_SERVER [‘REMOTE_ADDR’]变量以找出要使用的IP地址。</p>
<p>如果配置了xdebug.remote_addr_header，那么将在$_SERVER [‘HTTP_X_FORWARDED_FOR’]和$_SERVER [‘REMOTE_ADDR’]变量之前检查具有配置名称的$ SERVER变量。</p>
<p>此设置不适用于通过CLI进行调试，因为$ SERVER标题变量在那里不可用。</p>
<p>请注意，没有可用的过滤器，任何可以连接到Web服务器的人都能够启动调试会话，即使他们的地址与xdebug.remote_host不匹配。</p>
<h3 id="xdebug-remote-cookie-expire-time"><a href="#xdebug-remote-cookie-expire-time" class="headerlink" title="xdebug.remote_cookie_expire_time"></a>xdebug.remote_cookie_expire_time</h3><p>类型：整数，默认值：3600，在Xdebug&gt; 2.1中引入</p>
<p>此设置可用于增加（或减少）远程调试会话通过会话cookie保持活动的时间。</p>
<h3 id="xdebug-remote-enable"><a href="#xdebug-remote-enable" class="headerlink" title="xdebug.remote_enable"></a>xdebug.remote_enable</h3><p>类型：布尔值，默认值：0</p>
<p>此开关控制Xdebug是否应尝试联系正在侦听主机上的调试客户端，并使用设置xdebug.remote_host和xdebug.remote_port设置的端口。如果无法建立连接，脚本将继续，就像此设置为0。</p>
<h3 id="xdebug-remote-handler"><a href="#xdebug-remote-handler" class="headerlink" title="xdebug.remote_handler"></a>xdebug.remote_handler</h3><p>类型：字符串，默认值：dbgp</p>
<p>可以是“php3”选择旧的PHP 3式调试器输出，“gdb”启用GDB像调试器接口或’dbgp’ - 调试器协议。 DBGp协议是唯一支持的协议。</p>
<p>注意：Xdebug 2.1和更高版本只支持’db​​gp’作为协议。</p>
<h3 id="xdebug-remote-host"><a href="#xdebug-remote-host" class="headerlink" title="xdebug.remote_host"></a>xdebug.remote_host</h3><p>类型：字符串，默认值：localhost<br>选择运行调试客户端的主机，您可以使用主机名或IP地址。如果启用xdebug.remote_connect_back，将忽略此设置。</p>
<h3 id="xdebug-remote-log"><a href="#xdebug-remote-log" class="headerlink" title="xdebug.remote_log"></a>xdebug.remote_log</h3><p>类型：字符串，默认值：</p>
<p>如果设置为某个值，则将其用作所有远程调试器通信记录到的文件的文件名。 该文件始终以附加模式打开，因此默认情况下不会被覆盖。 没有可用的并发保护。 该文件的格式如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">Log opened at 2007-05-27 14:28:15</div><div class="line">-&gt; &lt;init xmlns=&quot;urn:debugger_protocol_v1&quot; xmlns:xdebug=&quot;http://xdebug.org/dbgp/x ... ight&gt;&lt;/init&gt;</div><div class="line"></div><div class="line">&lt;- step_into -i 1</div><div class="line">-&gt; &lt;response xmlns=&quot;urn:debugger_protocol_v1&quot; xmlns:xdebug=&quot;http://xdebug.org/db ... &gt;&lt;/response&gt;</div></pre></td></tr></table></figure></p>
<h3 id="xdebug-remote-mode"><a href="#xdebug-remote-mode" class="headerlink" title="xdebug.remote_mode"></a>xdebug.remote_mode</h3><p>类型：字符串，默认值：req</p>
<p>选择启动调试连接的时间。 此设置可以有两个不同的值：</p>
<ul>
<li><p>req</p>
<blockquote>
<p>一旦脚本启动，Xdebug将尝试连接到调试客户端。</p>
</blockquote>
</li>
<li><p>jit</p>
<blockquote>
<p>Xdebug只会在出现错误情况时尝试连接到调试客户端。</p>
</blockquote>
</li>
</ul>
<h3 id="xdebug-remote-port"><a href="#xdebug-remote-port" class="headerlink" title="xdebug.remote_port"></a>xdebug.remote_port</h3><p>类型：整数，默认值：9000</p>
<p>Xdebug尝试在远程主机上连接的端口。 端口9000是客户端和捆绑的debugclient的默认值。 由于许多客户端使用此端口号，最好保持此设置不变。</p>
<h2 id="相关函数"><a href="#相关函数" class="headerlink" title="相关函数"></a>相关函数</h2><h3 id="bool-xdebug-break（）"><a href="#bool-xdebug-break（）" class="headerlink" title="bool xdebug_break（）"></a>bool xdebug_break（）</h3><p>向调试客户端发出断点。</p>
<p>此函数使调试器在特定行上断开，就好像在此行上设置了正常的文件/行断点。</p>
<p>over~</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Xdebug为与运行PHP脚本交互的调试器客户端提供了一个接口。 本节介绍如何设置PHP和Xdebug来允许这一点，并介绍一些客户端。&lt;/p&gt;
    
    </summary>
    
      <category term="PHP" scheme="https://weizhimiao.github.io/categories/PHP/"/>
    
    
      <category term="Xdebug" scheme="https://weizhimiao.github.io/tags/Xdebug/"/>
    
  </entry>
  
  <entry>
    <title>Xdebug之函数轨迹跟踪</title>
    <link href="https://weizhimiao.github.io/2016/10/22/Xdebug%E4%B9%8B%E5%87%BD%E6%95%B0%E8%BD%A8%E8%BF%B9%E8%B7%9F%E8%B8%AA/"/>
    <id>https://weizhimiao.github.io/2016/10/22/Xdebug之函数轨迹跟踪/</id>
    <published>2016-10-22T12:30:00.000Z</published>
    <updated>2016-10-22T16:07:06.000Z</updated>
    
    <content type="html"><![CDATA[<p>Xdebug允许您记录所有函数调用，包括参数和返回值到不同格式的文件。</p>
<p>那些所谓的“函数跟踪”可以帮助当你是新的一个应用程序，或当你试图找出当你的应用程序运行时究竟是怎么回事。<br>函数跟踪还可以选择显示传递给函数和方法的变量的值，以及返回值。 在默认跟踪中，这两个元素不可用。</p>
<a id="more"></a>
<h2 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h2><p>有三种输出格式。 一个是作为一个人类可读的跟踪，另一个更适合计算机程序，因为它更容易解析，最后一个使用HTML格式化跟踪。 您可以使用xdebug.trace_format设置在两种不同的格式之间切换。 有一些设置控制哪些信息写入跟踪文件。 有一些设置包括变量（xdebug.collect_params）和包括返回值（xdebug.collect_return）例如。 下面的示例显示了不同设置对人类可读功能轨迹的影响。</p>
<p>脚本<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line">$str = <span class="string">"Xdebug"</span>;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">ret_ord</span><span class="params">( $c )</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">return</span> ord( $c );</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">foreach</span> ( str_split( $str ) <span class="keyword">as</span> $char )</div><div class="line">&#123;</div><div class="line">    <span class="keyword">echo</span> $char, <span class="string">": "</span>, ret_ord( $char ), <span class="string">"\n"</span>;</div><div class="line">&#125;</div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure></p>
<p>结果：</p>
<p>以下是使用xdebug.collect_params设置的不同设置的结果。 因为这不是一个Web环境,值2没有任何意义，因为工具提示不工作在文本文件。</p>
<ul>
<li><p>default</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">TRACE START [2007-05-06 14:37:06]</div><div class="line">    0.0003     114112   -&gt; &#123;main&#125;() ../trace.php:0</div><div class="line">    0.0004     114272     -&gt; str_split() ../trace.php:8</div><div class="line">    0.0153     117424     -&gt; ret_ord() ../trace.php:10</div><div class="line">    0.0165     117584       -&gt; ord() ../trace.php:5</div><div class="line">    0.0166     117584     -&gt; ret_ord() ../trace.php:10</div><div class="line">    0.0167     117584       -&gt; ord() ../trace.php:5</div><div class="line">    0.0168     117584     -&gt; ret_ord() ../trace.php:10</div><div class="line">    0.0168     117584       -&gt; ord() ../trace.php:5</div><div class="line">    0.0170     117584     -&gt; ret_ord() ../trace.php:10</div><div class="line">    0.0170     117584       -&gt; ord() ../trace.php:5</div><div class="line">    0.0172     117584     -&gt; ret_ord() ../trace.php:10</div><div class="line">    0.0172     117584       -&gt; ord() ../trace.php:5</div><div class="line">    0.0173     117584     -&gt; ret_ord() ../trace.php:10</div><div class="line">    0.0174     117584       -&gt; ord() ../trace.php:5</div><div class="line">    0.0177      41152</div><div class="line">TRACE END   [2007-05-06 14:37:07]</div></pre></td></tr></table></figure>
</li>
<li><p>collect_params=1</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">TRACE START [2007-05-06 14:37:11]</div><div class="line">    0.0003     114112   -&gt; &#123;main&#125;() ../trace.php:0</div><div class="line">    0.0004     114272     -&gt; str_split(string(6)) ../trace.php:8</div><div class="line">    0.0007     117424     -&gt; ret_ord(string(1)) ../trace.php:10</div><div class="line">    0.0007     117584       -&gt; ord(string(1)) ../trace.php:5</div><div class="line">    0.0009     117584     -&gt; ret_ord(string(1)) ../trace.php:10</div><div class="line">    0.0009     117584       -&gt; ord(string(1)) ../trace.php:5</div><div class="line">    0.0010     117584     -&gt; ret_ord(string(1)) ../trace.php:10</div><div class="line">    0.0011     117584       -&gt; ord(string(1)) ../trace.php:5</div><div class="line">    0.0012     117584     -&gt; ret_ord(string(1)) ../trace.php:10</div><div class="line">    0.0013     117584       -&gt; ord(string(1)) ../trace.php:5</div><div class="line">    0.0014     117584     -&gt; ret_ord(string(1)) ../trace.php:10</div><div class="line">    0.0014     117584       -&gt; ord(string(1)) ../trace.php:5</div><div class="line">    0.0016     117584     -&gt; ret_ord(string(1)) ../trace.php:10</div><div class="line">    0.0016     117584       -&gt; ord(string(1)) ../trace.php:5</div><div class="line">    0.0019      41152</div><div class="line">TRACE END   [2007-05-06 14:37:11]</div></pre></td></tr></table></figure>
</li>
<li><p>collect_params=3</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">TRACE START [2007-05-06 14:37:13]</div><div class="line">    0.0003     114112   -&gt; &#123;main&#125;() ../trace.php:0</div><div class="line">    0.0004     114272     -&gt; str_split(&apos;Xdebug&apos;) ../trace.php:8</div><div class="line">    0.0007     117424     -&gt; ret_ord(&apos;X&apos;) ../trace.php:10</div><div class="line">    0.0007     117584       -&gt; ord(&apos;X&apos;) ../trace.php:5</div><div class="line">    0.0009     117584     -&gt; ret_ord(&apos;d&apos;) ../trace.php:10</div><div class="line">    0.0009     117584       -&gt; ord(&apos;d&apos;) ../trace.php:5</div><div class="line">    0.0010     117584     -&gt; ret_ord(&apos;e&apos;) ../trace.php:10</div><div class="line">    0.0011     117584       -&gt; ord(&apos;e&apos;) ../trace.php:5</div><div class="line">    0.0012     117584     -&gt; ret_ord(&apos;b&apos;) ../trace.php:10</div><div class="line">    0.0013     117584       -&gt; ord(&apos;b&apos;) ../trace.php:5</div><div class="line">    0.0014     117584     -&gt; ret_ord(&apos;u&apos;) ../trace.php:10</div><div class="line">    0.0014     117584       -&gt; ord(&apos;u&apos;) ../trace.php:5</div><div class="line">    0.0016     117584     -&gt; ret_ord(&apos;g&apos;) ../trace.php:10</div><div class="line">    0.0016     117584       -&gt; ord(&apos;g&apos;) ../trace.php:5</div><div class="line">    0.0019      41152</div><div class="line">TRACE END   [2007-05-06 14:37:13]</div></pre></td></tr></table></figure>
</li>
<li><p>collect_params=4</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">TRACE START [2007-05-06 14:37:16]</div><div class="line">    0.0003     114112   -&gt; &#123;main&#125;() ../trace.php:0</div><div class="line">    0.0004     114272     -&gt; str_split(&apos;Xdebug&apos;) ../trace.php:8</div><div class="line">    0.0007     117424     -&gt; ret_ord($c = &apos;X&apos;) ../trace.php:10</div><div class="line">    0.0007     117584       -&gt; ord(&apos;X&apos;) ../trace.php:5</div><div class="line">    0.0009     117584     -&gt; ret_ord($c = &apos;d&apos;) ../trace.php:10</div><div class="line">    0.0009     117584       -&gt; ord(&apos;d&apos;) ../trace.php:5</div><div class="line">    0.0010     117584     -&gt; ret_ord($c = &apos;e&apos;) ../trace.php:10</div><div class="line">    0.0011     117584       -&gt; ord(&apos;e&apos;) ../trace.php:5</div><div class="line">    0.0012     117584     -&gt; ret_ord($c = &apos;b&apos;) ../trace.php:10</div><div class="line">    0.0013     117584       -&gt; ord(&apos;b&apos;) ../trace.php:5</div><div class="line">    0.0014     117584     -&gt; ret_ord($c = &apos;u&apos;) ../trace.php:10</div><div class="line">    0.0014     117584       -&gt; ord(&apos;u&apos;) ../trace.php:5</div><div class="line">    0.0016     117584     -&gt; ret_ord($c = &apos;g&apos;) ../trace.php:10</div><div class="line">    0.0016     117584       -&gt; ord(&apos;g&apos;) ../trace.php:5</div><div class="line">    0.0019      41152</div><div class="line">TRACE END   [2007-05-06 14:37:16]</div></pre></td></tr></table></figure>
</li>
</ul>
<p>除了xdebug.collect_params设置，还有另一些影响跟踪文件输出的设置。<br>第一个选项卡“默认”显示与上面的默认值相同。<br>第二个选项卡“show_mem_delta = 1”还显示输出文件中两个不同行之间的内存使用差异。</p>
<p>在“collect return = 1”选项卡上，所有函数调用的返回值也是可见的。 这使用xdebug.collect返回设置打开。</p>
<p>名为“collect assignments = 1”的选项卡显示可变分配，可以使用xdebug.collect分配设置打开。</p>
<p>最后一个选项卡显示不同的输出格式，更容易解析，但更难阅读。<br>因此，如果有一个额外的工具来解释跟踪文件，xdebug.trace_format设置是非常有用的。</p>
<ul>
<li><p>default</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">TRACE START [2007-05-06 14:37:06]</div><div class="line">    0.0003     114112   -&gt; &#123;main&#125;() ../trace.php:0</div><div class="line">    0.0004     114272     -&gt; str_split() ../trace.php:8</div><div class="line">    0.0153     117424     -&gt; ret_ord() ../trace.php:10</div><div class="line">    0.0165     117584       -&gt; ord() ../trace.php:5</div><div class="line">    0.0166     117584     -&gt; ret_ord() ../trace.php:10</div><div class="line">    0.0167     117584       -&gt; ord() ../trace.php:5</div><div class="line">    0.0168     117584     -&gt; ret_ord() ../trace.php:10</div><div class="line">    0.0168     117584       -&gt; ord() ../trace.php:5</div><div class="line">    0.0170     117584     -&gt; ret_ord() ../trace.php:10</div><div class="line">    0.0170     117584       -&gt; ord() ../trace.php:5</div><div class="line">    0.0172     117584     -&gt; ret_ord() ../trace.php:10</div><div class="line">    0.0172     117584       -&gt; ord() ../trace.php:5</div><div class="line">    0.0173     117584     -&gt; ret_ord() ../trace.php:10</div><div class="line">    0.0174     117584       -&gt; ord() ../trace.php:5</div><div class="line">    0.0177      41152</div><div class="line">TRACE END   [2007-05-06 14:37:07]</div></pre></td></tr></table></figure>
</li>
<li><p>show_mem_delta=1</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">TRACE START [2007-05-06 14:37:26]</div><div class="line">    0.0003     114112  +114112   -&gt; &#123;main&#125;() ../trace.php:0</div><div class="line">    0.0004     114272     +160     -&gt; str_split(&apos;Xdebug&apos;) ../trace.php:8</div><div class="line">    0.0007     117424    +3152     -&gt; ret_ord($c = &apos;X&apos;) ../trace.php:10</div><div class="line">    0.0007     117584     +160       -&gt; ord(&apos;X&apos;) ../trace.php:5</div><div class="line">    0.0009     117584       +0     -&gt; ret_ord($c = &apos;d&apos;) ../trace.php:10</div><div class="line">    0.0009     117584       +0       -&gt; ord(&apos;d&apos;) ../trace.php:5</div><div class="line">    0.0011     117584       +0     -&gt; ret_ord($c = &apos;e&apos;) ../trace.php:10</div><div class="line">    0.0011     117584       +0       -&gt; ord(&apos;e&apos;) ../trace.php:5</div><div class="line">    0.0013     117584       +0     -&gt; ret_ord($c = &apos;b&apos;) ../trace.php:10</div><div class="line">    0.0013     117584       +0       -&gt; ord(&apos;b&apos;) ../trace.php:5</div><div class="line">    0.0014     117584       +0     -&gt; ret_ord($c = &apos;u&apos;) ../trace.php:10</div><div class="line">    0.0015     117584       +0       -&gt; ord(&apos;u&apos;) ../trace.php:5</div><div class="line">    0.0016     117584       +0     -&gt; ret_ord($c = &apos;g&apos;) ../trace.php:10</div><div class="line">    0.0017     117584       +0       -&gt; ord(&apos;g&apos;) ../trace.php:5</div><div class="line">    0.0019      41152</div><div class="line">TRACE END   [2007-05-06 14:37:26]</div></pre></td></tr></table></figure>
</li>
<li><p>collect_return=1</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">TRACE START [2007-05-06 14:37:35]</div><div class="line">    0.0003     114112   -&gt; &#123;main&#125;() ../trace.php:0</div><div class="line">    0.0004     114272     -&gt; str_split(&apos;Xdebug&apos;) ../trace.php:8</div><div class="line">                          &gt;=&gt; array (0 =&gt; &apos;X&apos;, 1 =&gt; &apos;d&apos;, 2 =&gt; &apos;e&apos;, 3 =&gt; &apos;b&apos;, 4 =&gt; &apos;u&apos;, 5 =&gt; &apos;g&apos;)</div><div class="line">    0.0007     117424     -&gt; ret_ord($c = &apos;X&apos;) ../trace.php:10</div><div class="line">    0.0007     117584       -&gt; ord(&apos;X&apos;) ../trace.php:5</div><div class="line">                            &gt;=&gt; 88</div><div class="line">                          &gt;=&gt; 88</div><div class="line">    0.0009     117584     -&gt; ret_ord($c = &apos;d&apos;) ../trace.php:10</div><div class="line">    0.0009     117584       -&gt; ord(&apos;d&apos;) ../trace.php:5</div><div class="line">                            &gt;=&gt; 100</div><div class="line">                          &gt;=&gt; 100</div><div class="line">    0.0011     117584     -&gt; ret_ord($c = &apos;e&apos;) ../trace.php:10</div><div class="line">    0.0011     117584       -&gt; ord(&apos;e&apos;) ../trace.php:5</div><div class="line">                            &gt;=&gt; 101</div><div class="line">                          &gt;=&gt; 101</div><div class="line">    0.0013     117584     -&gt; ret_ord($c = &apos;b&apos;) ../trace.php:10</div><div class="line">    0.0013     117584       -&gt; ord(&apos;b&apos;) ../trace.php:5</div><div class="line">                            &gt;=&gt; 98</div><div class="line">                          &gt;=&gt; 98</div><div class="line">    0.0015     117584     -&gt; ret_ord($c = &apos;u&apos;) ../trace.php:10</div><div class="line">    0.0016     117584       -&gt; ord(&apos;u&apos;) ../trace.php:5</div><div class="line">                            &gt;=&gt; 117</div><div class="line">                          &gt;=&gt; 117</div><div class="line">    0.0017     117584     -&gt; ret_ord($c = &apos;g&apos;) ../trace.php:10</div><div class="line">    0.0018     117584       -&gt; ord(&apos;g&apos;) ../trace.php:5</div><div class="line">                            &gt;=&gt; 103</div><div class="line">                          &gt;=&gt; 103</div><div class="line">                        &gt;=&gt; 1</div><div class="line">    0.0021      41152</div><div class="line">TRACE END   [2007-05-06 14:37:35]</div></pre></td></tr></table></figure>
</li>
<li><p>trace_format=1</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">Version: 2.0.0RC4-dev</div><div class="line">TRACE START [2007-05-06 18:29:01]</div><div class="line">1	0	0	0.010870	114112	&#123;main&#125;	1	../trace.php	0</div><div class="line">2	1	0	0.032009	114272	str_split	0	../trace.php	8</div><div class="line">2	1	1	0.032073	116632</div><div class="line">2	2	0	0.033505	117424	ret_ord	1	../trace.php	10</div><div class="line">3	3	0	0.033531	117584	ord	0	../trace.php	5</div><div class="line">3	3	1	0.033551	117584</div><div class="line">2	2	1	0.033567	117584</div><div class="line">2	4	0	0.033718	117584	ret_ord	1	../trace.php	10</div><div class="line">3	5	0	0.033740	117584	ord	0	../trace.php	5</div><div class="line">3	5	1	0.033758	117584</div><div class="line">2	4	1	0.033770	117584</div><div class="line">2	6	0	0.033914	117584	ret_ord	1	../trace.php	10</div><div class="line">3	7	0	0.033936	117584	ord	0	../trace.php	5</div><div class="line">3	7	1	0.033953	117584</div><div class="line">2	6	1	0.033965	117584</div><div class="line">2	8	0	0.034108	117584	ret_ord	1	../trace.php	10</div><div class="line">3	9	0	0.034130	117584	ord	0	../trace.php	5</div><div class="line">3	9	1	0.034147	117584</div><div class="line">2	8	1	0.034160	117584</div><div class="line">2	10	0	0.034302	117584	ret_ord	1	../trace.php	10</div><div class="line">3	11	0	0.034325	117584	ord	0	../trace.php	5</div><div class="line">3	11	1	0.034342	117584</div><div class="line">2	10	1	0.034354	117584</div><div class="line">2	12	0	0.034497	117584	ret_ord	1	../trace.php	10</div><div class="line">3	13	0	0.034519	117584	ord	0	../trace.php	5</div><div class="line">3	13	1	0.034536	117584</div><div class="line">2	12	1	0.034549	117584</div><div class="line">1	0	1	0.034636	117584</div><div class="line">TRACE END   [2007-05-06 18:29:01]</div></pre></td></tr></table></figure>
</li>
</ul>
<p><strong>VIM语法文件</strong></p>
<p>Xdebug附带了语法高亮显示跟踪文件的VIM语法文件：xt.vim。<br>为了使VIM能够识别这种新格式，您需要执行以下步骤：</p>
<ol>
<li>复制 xt.vim 文件到 ~/.vim/syntax</li>
<li>修改, 或者创建, ~/.vim/filetype.vim 并添加下列内容<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">augroup filetypedetect</div><div class="line">au BufNewFile,BufRead *.xt  setf xt</div><div class="line">augroup END</div></pre></td></tr></table></figure>
</li>
</ol>
<p>使用这些设置，打开的跟踪文件看起来像：</p>
<p><img src="http://n.sinaimg.cn/games/3ece443e/20161022/QQ20161022-10@2x.png" alt="img"></p>
<h2 id="相关的设置"><a href="#相关的设置" class="headerlink" title="相关的设置"></a>相关的设置</h2><h3 id="xdebug-auto-trace"><a href="#xdebug-auto-trace" class="headerlink" title="xdebug.auto_trace"></a><strong>xdebug.auto_trace</strong></h3><p>类型：布尔值，默认值：0</p>
<p>当此设置设置为on时，将在脚本运行之前启用函数调用的跟踪。这使得可以跟踪auto_prepend_file中的代码。</p>
<h3 id="xdebug-collect-assignments"><a href="#xdebug-collect-assignments" class="headerlink" title="xdebug.collect_assignments"></a><strong>xdebug.collect_assignments</strong></h3><p>类型：boolean，默认值：0，在Xdebug&gt; 2.1中引入</p>
<p>此设置（默认为0）控制Xdebug是否应向函数轨迹添加变量分配。</p>
<h3 id="xdebug-collect-includes"><a href="#xdebug-collect-includes" class="headerlink" title="xdebug.collect_includes"></a><strong>xdebug.collect_includes</strong></h3><p>类型：布尔值，默认值：1</p>
<p>此设置默认为1，控制Xdebug是否应将include（），include_once（），require（）或require_once（）中使用的文件名写入跟踪文件。</p>
<h3 id="xdebug-collect-params"><a href="#xdebug-collect-params" class="headerlink" title="xdebug.collect_params"></a><strong>xdebug.collect_params</strong></h3><p>类型：整数，默认值：0</p>
<p>此设置默认为0，控制在函数跟踪或堆栈跟踪中记录函数调用时，Xdebug是否应收集传递给函数的参数。</p>
<p>该设置默认为0，因为对于非常大的脚本，它可能使用大量的内存，因此使巨量脚本无法运行。您可以最安全地打开此设置，但是您可以预期在具有大量函数调用和/或巨大的数据结构作为参数的脚本中存在一些问题。 Xdebug 2不会有增加的内存使用这个问题，因为它永远不会将此信息存储在内存中。相反，它将只被写入磁盘。这意味着您需要查看磁盘使用情况。</p>
<p>此设置可以有四个不同的值。对于每个值，示出了不同量的信息。下面你将看到每个值提供什么信息。另请参见功能堆栈跟踪的几个截图的介绍。</p>
<table>
<thead>
<tr>
<th>显示的值</th>
<th>参数信息</th>
</tr>
</thead>
<tbody>
<tr>
<td>0</td>
<td>无。</td>
</tr>
<tr>
<td>1</td>
<td>元素的类型和数量（f.e. string（6），array（8））。</td>
</tr>
<tr>
<td>2</td>
<td>元素的类型和数量，带有完整信息的工具提示1。1在CLI版本的PHP中，它不会有工具提示，也不会在输出文件中。</td>
</tr>
<tr>
<td>3</td>
<td>完全变量内容（具有由xdebug.var_display_max_children，xdebug.var_display_max_data和xdebug.var_display_max_depth设置的限制）。</td>
</tr>
<tr>
<td>4</td>
<td>完全变量内容和变量名。</td>
</tr>
<tr>
<td>5</td>
<td>PHP序列化变量内容，没有名称。 （Xdebug 2.3中的新功能）</td>
</tr>
</tbody>
</table>
<h3 id="xdebug-collect-return"><a href="#xdebug-collect-return" class="headerlink" title="xdebug.collect_return"></a><strong>xdebug.collect_return</strong></h3><p>类型：布尔值，默认值：0</p>
<p>此设置默认为0，控制Xdebug是否应将函数调用的返回值写入跟踪文件。</p>
<p>对于计算机化的跟踪文件（xdebug.trace_format = 1），这只能从Xdebug 2.3起。</p>
<h3 id="xdebug-show-mem-delta"><a href="#xdebug-show-mem-delta" class="headerlink" title="xdebug.show_mem_delta"></a><strong>xdebug.show_mem_delta</strong></h3><p>类型：整数，默认值：0</p>
<p>当这个设置设置为某些！= 0 Xdebug的人类可读的生成的跟踪文件将显示在函数调用之间的内存使用的差异。如果Xdebug配置为生成计算机可读的跟踪文件，则它们将始终显示此信息。</p>
<h3 id="xdebug-trace-enable-trigger"><a href="#xdebug-trace-enable-trigger" class="headerlink" title="xdebug.trace_enable_trigger"></a><strong>xdebug.trace_enable_trigger</strong></h3><p>类型：boolean，默认值：0，在Xdebug&gt; 2.2中引入</p>
<p>当此设置设置为1时，可以使用XDEBUG_TRACE GET / POST参数触发跟踪文件的生成，或者设置名为XDEBUG_TRACE的cookie。然后将跟踪数据写入定义的目录。为了防止Xdebug为每个请求生成跟踪文件，您需要将xdebug.auto_trace设置为0.对触发器本身的访问可以通过xdebug.trace_enable_trigger_value配置。</p>
<h3 id="xdebug-trace-enable-trigger-value"><a href="#xdebug-trace-enable-trigger-value" class="headerlink" title="xdebug.trace_enable_trigger_value"></a><strong>xdebug.trace_enable_trigger_value</strong></h3><p>类型：字符串，默认值：“”，在Xdebug&gt; 2.3中引入</p>
<p>此设置可用于限制谁可以使用xdebug.trace_enable_trigger中概述的XDEBUG_TRACE功能。当从空字符串的默认值更改时，cookie，GET或POST参数的值需要使用此设置匹配共享机密集，以便生成跟踪文件。</p>
<h3 id="xdebug-trace-format"><a href="#xdebug-trace-format" class="headerlink" title="xdebug.trace_format"></a><strong>xdebug.trace_format</strong></h3><p>类型：整数，默认值：0</p>
<p>跟踪文件的格式。</p>
<table>
<thead>
<tr>
<th>值</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>0</td>
<td>显示一个人工可读的缩进跟踪文件，具有：时间索引，内存使用，内存增量（如果设置xdebug.show_mem_delta启用），级别，函数名称，函数参数（如果设置xdebug.collect_params启用），文件名和行 数。</td>
</tr>
<tr>
<td>1</td>
<td>写入具有两个不同记录的计算机可读格式。 有不同的记录用于输入堆栈帧，并留下堆栈帧。 下表列出了每种记录类型中的字段。 字段是制表符分隔的。</td>
</tr>
<tr>
<td>2</td>
<td>写入以（简单）HTML格式化的跟踪。</td>
</tr>
</tbody>
</table>
<h3 id="xdebug-trace-options"><a href="#xdebug-trace-options" class="headerlink" title="xdebug.trace_options"></a><strong>xdebug.trace_options</strong></h3><p>类型：整数，默认值：0</p>
<p>当设置为’1’时，跟踪文件将被附加到，而不是在后续请求中被覆盖。</p>
<h3 id="xdebug-trace-output-dir"><a href="#xdebug-trace-output-dir" class="headerlink" title="xdebug.trace_output_dir"></a><strong>xdebug.trace_output_dir</strong></h3><p>类型：字符串，默认值：/ tmp</p>
<p>将写入跟踪文件的目录，确保PHP将运行的用户具有对该目录的写入权限。</p>
<h3 id="xdebug-trace-output-name"><a href="#xdebug-trace-output-name" class="headerlink" title="xdebug.trace_output_name"></a><strong>xdebug.trace_output_name</strong></h3><p>类型：字符串，默认值：trace。％c</p>
<p>此设置确定用于将跟踪转储到的文件的名称。 设置使用格式说明符指定格式，非常类似于sprintf（）和strftime（）。 有几个格式说明符可以用于格式化文件名。 “.xt”扩展名总是自动添加。</p>
<p>可能的格式说明符是：</p>
<table>
<thead>
<tr>
<th>指定符</th>
<th>含义</th>
<th>示例格式</th>
<th>示例文件名</th>
</tr>
</thead>
<tbody>
<tr>
<td>%c</td>
<td>crc32 of the current working directory</td>
<td>trace.%c</td>
<td>trace.1258863198.xt</td>
</tr>
<tr>
<td>%p</td>
<td>pid</td>
<td>trace.%p</td>
<td>trace.5174.xt</td>
</tr>
<tr>
<td>%r</td>
<td>random number</td>
<td>trace.%r</td>
<td>trace.072db0.xt</td>
</tr>
<tr>
<td>%s</td>
<td>script name 这一个不可用于跟踪文件名。</td>
<td>cachegrind.out.%s</td>
<td>cachegrind.out._home_httpd_html_test_xdebug_test_php</td>
</tr>
<tr>
<td>%t</td>
<td>timestamp (seconds)</td>
<td>trace.%t</td>
<td>trace.1179434742.xt</td>
</tr>
<tr>
<td>%u</td>
<td>timestamp (microseconds)</td>
<td>trace.%u</td>
<td>trace.1179434749_642382.xt</td>
</tr>
<tr>
<td>%H</td>
<td>$_SERVER[‘HTTP_HOST’]</td>
<td>trace.%H</td>
<td>trace.kossu.xt</td>
</tr>
<tr>
<td>%R</td>
<td>$_SERVER[‘REQUEST_URI’]</td>
<td>trace.%R</td>
<td>trace._test_xdebug_test_php_var=1_var2=2.xt</td>
</tr>
<tr>
<td>%U</td>
<td>$_SERVER[‘UNIQUE_ID’] 版本2.2中的新功能。 这个由Apache mod_unique_id模块设置</td>
<td>trace.%U</td>
<td>trace.TRX4n38AAAEAAB9gBFkAAAAB.xt</td>
</tr>
<tr>
<td>%S</td>
<td>session_id (from $_COOKIE if set)</td>
<td>trace.%S</td>
<td>trace.c70c1ec2375af58f74b390bbdd2a679d.xt</td>
</tr>
<tr>
<td>%%</td>
<td>literal %</td>
<td>trace.%%</td>
<td>trace.%%.xt</td>
</tr>
</tbody>
</table>
<h3 id="xdebug-var-display-max-children"><a href="#xdebug-var-display-max-children" class="headerlink" title="xdebug.var_display_max_children"></a><strong>xdebug.var_display_max_children</strong></h3><p>类型：整数，默认值：128</p>
<p>控制使用xdebug_var_dump（），xdebug.show_local_vars或通过函数跟踪显示变量时显示的数组子元素和对象的属性的数量。</p>
<p>要禁用任何限制，请使用-1作为值。</p>
<p>此设置对通过远程调试功能发送到客户端的子项数没有任何影响。</p>
<h3 id="xdebug-var-display-max-data"><a href="#xdebug-var-display-max-data" class="headerlink" title="xdebug.var_display_max_data"></a><strong>xdebug.var_display_max_data</strong></h3><p>类型：整数，默认值：512</p>
<p>控制使用xdebug_var_dump（），xdebug.show_local_vars或通过函数跟踪显示变量时显示的最大字符串长度。</p>
<p>要禁用任何限制，请使用-1作为值。</p>
<p>此设置对通过远程调试功能发送到客户端的子项数没有任何影响。</p>
<h3 id="xdebug-var-display-max-depth"><a href="#xdebug-var-display-max-depth" class="headerlink" title="xdebug.var_display_max_depth"></a><strong>xdebug.var_display_max_depth</strong></h3><p>类型：整数，默认值：3</p>
<p>当使用xdebug_var_dump（），xdebug.show_local_vars或通过函数跟踪显示变量时，控制数组元素和对象属性的嵌套级别数。</p>
<p>您可以选择的最大值为1023.您还可以使用-1作为值来选择此最大数。</p>
<p>此设置对通过远程调试功能发送到客户端的子项数没有任何影响。</p>
<h2 id="相关函数"><a href="#相关函数" class="headerlink" title="相关函数"></a>相关函数</h2><h3 id="string-xdebug-get-tracefile-name（）"><a href="#string-xdebug-get-tracefile-name（）" class="headerlink" title="string xdebug_get_tracefile_name（）"></a><strong>string xdebug_get_tracefile_name（）</strong></h3><p>返回函数跟踪文件的名称</p>
<p>返回用于跟踪此脚本的输出的文件的名称。这在启用xdebug.auto_trace时非常有用。</p>
<h3 id="string-xdebug-start-trace（-string-trace-file-，integer-options-）"><a href="#string-xdebug-start-trace（-string-trace-file-，integer-options-）" class="headerlink" title="string xdebug_start_trace（[string trace_file [，integer options]]）"></a><strong>string xdebug_start_trace（[string trace_file [，integer options]]）</strong></h3><p>启动新的函数跟踪</p>
<p>启动跟踪从此点到trace_file参数中的文件的函数调用。如果未指定文件名，则跟踪文件将放置在由xdebug.trace_output_dir设置配置的目录中。</p>
<p>如果文件名称作为第一个参数，则名称相对于当前工作目录。此当前工作目录可能与您预期的不同，因此，如果指定文件名，请使用绝对路径。使用PHP函数getcwd（）来找出当前工作目录是什么。</p>
<p>跟踪文件的名称为“{trace_file} .xt”。如果启用了xdebug.auto_trace，则文件名的格式为“{filename} .xt”，其中“{filename}”部分取决于xdebug.trace_output_name设置。 options参数是一个位域;目前有三个选项：</p>
<ul>
<li><p>XDEBUG_TRACE_APPEND（1）</p>
<blockquote>
<p>使追踪文件在追加模式而不是覆盖模式下打开</p>
</blockquote>
</li>
<li><p>XDEBUG_TRACE_COMPUTERIZED（2）</p>
<blockquote>
<p>创建具有1“xdebug.trace_format”下描述的格式的跟踪文件。</p>
</blockquote>
</li>
<li><p>XDEBUG_TRACE_HTML（4）</p>
<blockquote>
<p>将跟踪文件创建为HTML表</p>
</blockquote>
</li>
<li><p>XDEBUG_TRACE_NAKED_FILENAME（8）</p>
<blockquote>
<p>通常，Xdebug总是将“.xt”添加到文件名的末尾，该文件名作为第一个参数传递给此函数。 如果设置了XDEBUG_TRACE_NAKED_FILENAME标志，则不会添加“.xt”。 （Xdebug 2.3中的新功能）。</p>
</blockquote>
</li>
</ul>
<p>与Xdebug 1不同，Xdebug 2不会在内存中存储函数调用，但始终只写入磁盘以减轻对已用内存的压力。 设置xdebug.collect_includes，xdebug.collect_params和xdebug.collect_return影响什么信息记录到跟踪文件，设置xdebug.trace_format影响跟踪文件的格式。<br>从此函数返回Xdebug跟踪的完整路径和文件名。 这将是您传入的文件名（可能添加了“.xt”），或者如果没有传入文件名，则为自动生成的文件名。</p>
<h3 id="string-xdebug-start-trace（）"><a href="#string-xdebug-start-trace（）" class="headerlink" title="string xdebug_start_trace（）"></a><strong>string xdebug_start_trace（）</strong></h3><p>停止当前函数轨迹</p>
<p>停止跟踪函数调用并关闭跟踪文件。</p>
<p>该函数返回写入跟踪的文件的文件名。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Xdebug允许您记录所有函数调用，包括参数和返回值到不同格式的文件。&lt;/p&gt;
&lt;p&gt;那些所谓的“函数跟踪”可以帮助当你是新的一个应用程序，或当你试图找出当你的应用程序运行时究竟是怎么回事。&lt;br&gt;函数跟踪还可以选择显示传递给函数和方法的变量的值，以及返回值。 在默认跟踪中，这两个元素不可用。&lt;/p&gt;
    
    </summary>
    
      <category term="PHP" scheme="https://weizhimiao.github.io/categories/PHP/"/>
    
    
      <category term="Xdebug" scheme="https://weizhimiao.github.io/tags/Xdebug/"/>
    
  </entry>
  
  <entry>
    <title>Xdebug之变量显示功能</title>
    <link href="https://weizhimiao.github.io/2016/10/22/Xdebug%E4%B9%8B%E5%8F%98%E9%87%8F%E6%98%BE%E7%A4%BA%E5%8A%9F%E8%83%BD/"/>
    <id>https://weizhimiao.github.io/2016/10/22/Xdebug之变量显示功能/</id>
    <published>2016-10-22T12:30:00.000Z</published>
    <updated>2016-10-22T16:07:20.000Z</updated>
    
    <content type="html"><![CDATA[<p>Xdebug替换了PHP的var_dump（）函数来显示变量。 Xdebug的版本包括不同类型的不同颜色，并且限制了数组元素/对象属性的数量，最大深度和字符串长度。 还有一些其他函数处理可变显示。</p>
<a id="more"></a>
<p>有一些设置控制Xdebug修改的var_dump（）函数的输出：</p>
<ul>
<li>xdebug.var_display_max_children，</li>
<li>xdebug.var_display_max_data</li>
<li><p>xdebug.var_display_max_depth</p>
<p>这三个设置的效果最好用一个例子。 下面的脚本运行四次，每次使用不同的设置。 您可以使用选项卡查看差异。</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">test</span> </span>&#123;</div><div class="line">    <span class="keyword">public</span> $pub = <span class="keyword">false</span>;</div><div class="line">    <span class="keyword">private</span> $priv = <span class="keyword">true</span>;</div><div class="line">    <span class="keyword">protected</span> $prot = <span class="number">42</span>;</div><div class="line">&#125;</div><div class="line">$t = <span class="keyword">new</span> test;</div><div class="line">$t-&gt;pub = $t;</div><div class="line">$data = <span class="keyword">array</span>(</div><div class="line">    <span class="string">'one'</span> =&gt; <span class="string">'a somewhat long string!'</span>,</div><div class="line">    <span class="string">'two'</span> =&gt; <span class="keyword">array</span>(</div><div class="line">        <span class="string">'two.one'</span> =&gt; <span class="keyword">array</span>(</div><div class="line">            <span class="string">'two.one.zero'</span> =&gt; <span class="number">210</span>,</div><div class="line">            <span class="string">'two.one.one'</span> =&gt; <span class="keyword">array</span>(</div><div class="line">                <span class="string">'two.one.one.zero'</span> =&gt; <span class="number">3.141592564</span>,</div><div class="line">                <span class="string">'two.one.one.one'</span>  =&gt; <span class="number">2.7</span>,</div><div class="line">            ),</div><div class="line">        ),</div><div class="line">    ),</div><div class="line">    <span class="string">'three'</span> =&gt; $t,</div><div class="line">    <span class="string">'four'</span> =&gt; range(<span class="number">0</span>, <span class="number">5</span>),</div><div class="line">);</div><div class="line">var_dump( $data );</div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p>默认</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">array</div><div class="line">  &apos;one&apos; =&gt; string &apos;a somewhat long string!&apos; (length=23)</div><div class="line">  &apos;two&apos; =&gt;</div><div class="line">    array</div><div class="line">      &apos;two.one&apos; =&gt;</div><div class="line">        array</div><div class="line">          &apos;two.one.zero&apos; =&gt; int 210</div><div class="line">          &apos;two.one.one&apos; =&gt;</div><div class="line">            array</div><div class="line">              ...</div><div class="line">  &apos;three&apos; =&gt;</div><div class="line">    object(test)[1]</div><div class="line">      public &apos;pub&apos; =&gt;</div><div class="line">        &amp;object(test)[1]</div><div class="line">      private &apos;priv&apos; =&gt; boolean true</div><div class="line">      protected &apos;prot&apos; =&gt; int 42</div><div class="line">  &apos;four&apos; =&gt;</div><div class="line">    array</div><div class="line">      0 =&gt; int 0</div><div class="line">      1 =&gt; int 1</div><div class="line">      2 =&gt; int 2</div><div class="line">      3 =&gt; int 3</div><div class="line">      4 =&gt; int 4</div><div class="line">      5 =&gt; int 5</div></pre></td></tr></table></figure>
</li>
<li><p>children=2</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">array</div><div class="line">  &apos;one&apos; =&gt; string &apos;a somewhat long string!&apos; (length=23)</div><div class="line">  &apos;two&apos; =&gt;</div><div class="line">    array</div><div class="line">      &apos;two.one&apos; =&gt;</div><div class="line">        array</div><div class="line">          &apos;two.one.zero&apos; =&gt; int 210</div><div class="line">          &apos;two.one.one&apos; =&gt;</div><div class="line">            array</div><div class="line">              ...</div><div class="line">  more elements...</div></pre></td></tr></table></figure>
</li>
<li><p>data=16</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">array</div><div class="line">  &apos;one&apos; =&gt; string &apos;a somewhat long &apos;... (length=23)</div><div class="line">  &apos;two&apos; =&gt;</div><div class="line">    array</div><div class="line">      &apos;two.one&apos; =&gt;</div><div class="line">        array</div><div class="line">          &apos;two.one.zero&apos; =&gt; int 210</div><div class="line">          &apos;two.one.one&apos; =&gt;</div><div class="line">            array</div><div class="line">              ...</div><div class="line">  &apos;three&apos; =&gt;</div><div class="line">    object(test)[1]</div><div class="line">      public &apos;pub&apos; =&gt;</div><div class="line">        &amp;object(test)[1]</div><div class="line">      private &apos;priv&apos; =&gt; boolean true</div><div class="line">      protected &apos;prot&apos; =&gt; int 42</div><div class="line">  &apos;four&apos; =&gt;</div><div class="line">    array</div><div class="line">      0 =&gt; int 0</div><div class="line">      1 =&gt; int 1</div><div class="line">      2 =&gt; int 2</div><div class="line">      3 =&gt; int 3</div><div class="line">      4 =&gt; int 4</div><div class="line">      5 =&gt; int 5</div></pre></td></tr></table></figure>
</li>
<li><p>depth=2</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">array</div><div class="line">  &apos;one&apos; =&gt; string &apos;a somewhat long string!&apos; (length=23)</div><div class="line">  &apos;two&apos; =&gt;</div><div class="line">    array</div><div class="line">      &apos;two.one&apos; =&gt;</div><div class="line">        array</div><div class="line">          ...</div><div class="line">  &apos;three&apos; =&gt;</div><div class="line">    object(test)[1]</div><div class="line">      public &apos;pub&apos; =&gt;</div><div class="line">        &amp;object(test)[1]</div><div class="line">      private &apos;priv&apos; =&gt; boolean true</div><div class="line">      protected &apos;prot&apos; =&gt; int 42</div><div class="line">  &apos;four&apos; =&gt;</div><div class="line">    array</div><div class="line">      0 =&gt; int 0</div><div class="line">      1 =&gt; int 1</div><div class="line">      2 =&gt; int 2</div><div class="line">      3 =&gt; int 3</div><div class="line">      4 =&gt; int 4</div><div class="line">      5 =&gt; int 5</div></pre></td></tr></table></figure>
</li>
<li><p>children=3, data=8, depth=1</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">array</div><div class="line">  &apos;one&apos; =&gt; string &apos;a somewh&apos;... (length=23)</div><div class="line">  &apos;two&apos; =&gt;</div><div class="line">    array</div><div class="line">      ...</div><div class="line">  &apos;three&apos; =&gt;</div><div class="line">    object(test)[1]</div><div class="line">      ...</div><div class="line">  more elements...</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="相关设置"><a href="#相关设置" class="headerlink" title="相关设置"></a>相关设置</h2><h3 id="xdebug-cli-color"><a href="#xdebug-cli-color" class="headerlink" title="xdebug.cli_color"></a><strong>xdebug.cli_color</strong></h3><p>类型：整数，默认值：0，在Xdebug&gt; 2.2中引入</p>
<ul>
<li><p>如果此设置为1，则Xdebug将在CLI模式下和输出为tty时对var_dumps和堆栈跟踪输出进行颜色。在Windows上，需要安装ANSICON工具。</p>
</li>
<li><p>如果设置为2，那么无论Xdebug是否连接到tty或是否安装了ANSICON，Xdebug都将始终对var_dumps和堆栈跟踪进行着色。在这种情况下，您可能会看到转义码。</p>
</li>
</ul>
<p>有关更多信息，请参阅此<a href="http://drck.me/clicolor-9cr" target="_blank" rel="external">文章</a>。</p>
<h3 id="xdebug-overload-var-dump"><a href="#xdebug-overload-var-dump" class="headerlink" title="xdebug.overload_var_dump"></a><strong>xdebug.overload_var_dump</strong></h3><p>类型：boolean，默认值：2，在Xdebug&gt; 2.1中引入</p>
<ul>
<li><p>默认情况下，当html_errors php.ini设置为1或2时，Xdebug会自动重载var_dump（）并显示变量。</p>
</li>
<li><p>如果您不想要，可以将此设置设置为0，但首先检查它是否不是更聪明的关闭html_errors。</p>
</li>
<li><p>您也可以使用2作为此设置的值。除了格式化var_dump（）输出很好，它还将添加文件名和行号到输出。还尊重xdebug.file_link_format设置。 （Xdebug 2.3中的新功能）</p>
</li>
</ul>
<p>在Xdebug 2.4之前，此设置的默认值为1。</p>
<h3 id="xdebug-var-display-max-children"><a href="#xdebug-var-display-max-children" class="headerlink" title="xdebug.var_display_max_children"></a><strong>xdebug.var_display_max_children</strong></h3><p>类型：整数，默认值：128</p>
<p>控制使用xdebug_var_dump（），xdebug.show_local_vars或通过函数跟踪显示变量时显示的数组子元素和对象的属性的数量。</p>
<ul>
<li>要禁用任何限制，请使用-1作为值。</li>
</ul>
<p>此设置对通过远程调试功能发送到客户端的子项数没有任何影响。</p>
<h3 id="xdebug-var-display-max-data"><a href="#xdebug-var-display-max-data" class="headerlink" title="xdebug.var_display_max_data"></a><strong>xdebug.var_display_max_data</strong></h3><p>类型：整数，默认值：512</p>
<p>控制使用xdebug_var_dump（），xdebug.show_local_vars或通过函数跟踪显示变量时显示的最大字符串长度。</p>
<ul>
<li>要禁用任何限制，请使用-1作为值。</li>
</ul>
<p>此设置对通过远程调试功能发送到客户端的子项数没有任何影响。</p>
<h3 id="xdebug-var-display-max-depth"><a href="#xdebug-var-display-max-depth" class="headerlink" title="xdebug.var_display_max_depth"></a><strong>xdebug.var_display_max_depth</strong></h3><p>类型：整数，默认值：3</p>
<p>当使用xdebug_var_dump（），xdebug.show_local_vars或通过函数跟踪显示变量时，控制数组元素和对象属性的嵌套级别数。</p>
<ul>
<li>您可以选择的最大值为1023.您还可以使用-1作为值来选择此最大数。</li>
</ul>
<p>此设置对通过远程调试功能发送到客户端的子项数没有任何影响。</p>
<h2 id="相关函数"><a href="#相关函数" class="headerlink" title="相关函数"></a>相关函数</h2><h3 id="void-var-dump（-mixture-var-，…-）"><a href="#void-var-dump（-mixture-var-，…-）" class="headerlink" title="void var_dump（[mixture var [，…]]）"></a><strong>void var_dump（[mixture var [，…]]）</strong></h3><blockquote>
<p>显示有关变量的详细信息</p>
</blockquote>
<p>此函数由Xdebug重载，请参阅xdebug_var_dump（）的说明。</p>
<h3 id="void-xdebug-debug-zval（-string-varname-，…-）"><a href="#void-xdebug-debug-zval（-string-varname-，…-）" class="headerlink" title="void xdebug_debug_zval（[string varname [，…]]）"></a><strong>void xdebug_debug_zval（[string varname [，…]]）</strong></h3><blockquote>
<p>显示有关变量的信息</p>
</blockquote>
<p>此函数显示有关一个或多个变量的结构化信息，包括其类型，值和引用计数信息。使用值递归地探索数组。这个函数的实现不同于PHP的debug_zval_dump（）函数，以解决该函数的问题，因为变量本身实际上传递给函数。 Xdebug的版本是更好的，因为它使用变量名称来查找内部符号表中的变量，并直接访问所有的属性，而不必处理实际传递一个变量到一个函数。结果是，该函数返回的信息比PHP自己的用于显示zval信息的函数准确得多。</p>
<p>从Xdebug 2.3开始支持除了简单变量名（例如下面的“a [2]”）之外的任何东西。</p>
<p>Example:<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line">    $a = <span class="keyword">array</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>);</div><div class="line">    $b =&amp; $a;</div><div class="line">    $c =&amp; $a[<span class="number">2</span>];</div><div class="line"></div><div class="line">    xdebug_debug_zval(<span class="string">'a'</span>);</div><div class="line">    xdebug_debug_zval(<span class="string">"a[2]"</span>);</div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure></p>
<p>结果：(refcount:引用次数，)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">a: (refcount=2, is_ref=1)=array (</div><div class="line">	0 =&gt; (refcount=1, is_ref=0)=1,</div><div class="line">	1 =&gt; (refcount=1, is_ref=0)=2,</div><div class="line">	2 =&gt; (refcount=2, is_ref=1)=3)</div><div class="line">a[2]: (refcount=2, is_ref=1)=3</div></pre></td></tr></table></figure></p>
<h3 id="void-xdebug-debug-zval-stdout（-string-varname-，…-）"><a href="#void-xdebug-debug-zval-stdout（-string-varname-，…-）" class="headerlink" title="void xdebug_debug_zval_stdout（[string varname [，…]]）"></a><strong>void xdebug_debug_zval_stdout（[string varname [，…]]）</strong></h3><blockquote>
<p>将有关变量的信息返回到stdout。</p>
</blockquote>
<p>此函数显示有关一个或多个变量的结构化信息，包括其类型，值和引用计数信息。 使用值递归地探索数组。 与xdebug_debug_zval（）的区别在于，该信息不通过Web服务器API层显示，而是直接显示在stdout上（因此，在Apache以单进程模式运行时，它会在控制台上运行）。</p>
<p>Example:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;?php</div><div class="line">    $a = array(1, 2, 3);</div><div class="line">    $b =&amp; $a;</div><div class="line">    $c =&amp; $a[2];</div><div class="line"></div><div class="line">    xdebug_debug_zval_stdout(&apos;a&apos;);</div></pre></td></tr></table></figure></p>
<p>返回：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">a: (refcount=2, is_ref=1)=array (</div><div class="line">	0 =&gt; (refcount=1, is_ref=0)=1,</div><div class="line">	1 =&gt; (refcount=1, is_ref=0)=2,</div><div class="line">	2 =&gt; (refcount=2, is_ref=1)=3)</div></pre></td></tr></table></figure></p>
<h3 id="void-xdebug-dump-superglobals（）"><a href="#void-xdebug-dump-superglobals（）" class="headerlink" title="void xdebug_dump_superglobals（）"></a><strong>void xdebug_dump_superglobals（）</strong></h3><blockquote>
<p>显示有关超级全局的信息</p>
</blockquote>
<p>此函数转储指定的超级全局元素的值通过php.ini中的xdebug.dump.*选项。 对于下面的示例，php.ini中的设置是：</p>
<p>Example:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">xdebug.dump.GET=*</div><div class="line">xdebug.dump.SERVER=REMOTE_ADDR</div><div class="line"></div><div class="line">Query string:</div><div class="line">?var=fourty%20two&amp;array[a]=a&amp;array[9]=b</div></pre></td></tr></table></figure></p>
<p>结果：<br><img src="http://n.sinaimg.cn/games/3ece443e/20161022/8F0658D7-C951-4B12-BC74-92E15E31C44C.png" alt="img"></p>
<h3 id="void-xdebug-var-dump（-mixed-var-，…-）"><a href="#void-xdebug-var-dump（-mixed-var-，…-）" class="headerlink" title="void xdebug_var_dump（[mixed var [，…]]）"></a><strong>void xdebug_var_dump（[mixed var [，…]]）</strong></h3><blockquote>
<p>显示有关变量的详细信息</p>
</blockquote>
<p>此函数显示有关包含其类型和值的一个或多个表达式的结构化信息。 使用值递归地探索数组。 请参阅变量显示功能的介绍，其中php.ini设置影响此功能。</p>
<p>Example:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">&lt;?php</div><div class="line">ini_set(&apos;xdebug.var_display_max_children&apos;, 3 );</div><div class="line">$c = new stdClass;</div><div class="line">$c-&gt;foo = &apos;bar&apos;;</div><div class="line">$c-&gt;file = fopen( &apos;/etc/passwd&apos;, &apos;r&apos; );</div><div class="line">var_dump(</div><div class="line">    array(</div><div class="line">        array(TRUE, 2, 3.14, &apos;foo&apos;),</div><div class="line">        &apos;object&apos; =&gt; $c</div><div class="line">    )</div><div class="line">);</div><div class="line">?&gt;</div></pre></td></tr></table></figure></p>
<p>结果<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">array</div><div class="line">  0 =&gt;</div><div class="line">    array</div><div class="line">      0 =&gt; boolean true</div><div class="line">      1 =&gt; int 2</div><div class="line">      2 =&gt; float 3.14</div><div class="line">      more elements...</div><div class="line">  &apos;object&apos; =&gt;</div><div class="line">    object(stdClass)[1]</div><div class="line">      public &apos;foo&apos; =&gt; string &apos;bar&apos; (length=3)</div><div class="line">      public &apos;file&apos; =&gt; resource(3, stream)</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Xdebug替换了PHP的var_dump（）函数来显示变量。 Xdebug的版本包括不同类型的不同颜色，并且限制了数组元素/对象属性的数量，最大深度和字符串长度。 还有一些其他函数处理可变显示。&lt;/p&gt;
    
    </summary>
    
      <category term="PHP" scheme="https://weizhimiao.github.io/categories/PHP/"/>
    
    
      <category term="Xdebug" scheme="https://weizhimiao.github.io/tags/Xdebug/"/>
    
  </entry>
  
  <entry>
    <title>Xdebug之变量显示功能</title>
    <link href="https://weizhimiao.github.io/2016/10/22/Xdebug%E4%B9%8B%E5%A0%86%E6%A0%88%E8%B7%9F%E8%B8%AA/"/>
    <id>https://weizhimiao.github.io/2016/10/22/Xdebug之堆栈跟踪/</id>
    <published>2016-10-22T12:30:00.000Z</published>
    <updated>2016-10-22T16:07:31.000Z</updated>
    
    <content type="html"><![CDATA[<p>当Xdebug被激活时，只要PHP决定显示通知，警告，错误等，它将显示一个堆栈跟踪。堆栈跟踪显示的信息以及它们的呈现方式可以配置为满足您的需要。</p>
<p>Xdebug在错误情况下显示的堆栈跟踪（如果display_errors在php.ini中设置为On）在它们显示的信息量上相当保守。 这是因为大量的信息可以减慢脚本的执行和在浏览器中呈现堆栈跟踪本身。 但是，可以使堆栈跟踪显示具有不同设置的更详细信息。</p>
<a id="more"></a>
<h2 id="堆栈跟踪中的变量"><a href="#堆栈跟踪中的变量" class="headerlink" title="堆栈跟踪中的变量"></a>堆栈跟踪中的变量</h2><p>默认情况下，Xdebug现在会在它生成的堆栈跟踪中显示变量信息。 在收集或显示时，可变信息可能需要相当多的资源。 然而，在许多情况下，显示变量信息是有用的，这就是为什么Xdebug具有设置xdebug.collect_params。 下面的脚本结合了该设置的不同值的输出结果，如下例所示。</p>
<p>示例：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span><span class="params">( $a )</span> </span>&#123;</div><div class="line">    <span class="keyword">for</span> ($i = <span class="number">1</span>; $i &lt; $a[<span class="string">'foo'</span>]; $i++) &#123;</div><div class="line">        <span class="keyword">if</span> ($i == <span class="number">500000</span>) xdebug_break();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">set_time_limit(<span class="number">1</span>);</div><div class="line">$c = <span class="keyword">new</span> stdClass;</div><div class="line">$c-&gt;bar = <span class="number">100</span>;</div><div class="line">$a = <span class="keyword">array</span>(</div><div class="line">    <span class="number">42</span> =&gt; <span class="keyword">false</span>, <span class="string">'foo'</span> =&gt; <span class="number">912124</span>,</div><div class="line">    $c, <span class="keyword">new</span> stdClass, fopen( <span class="string">'/etc/passwd'</span>, <span class="string">'r'</span> )</div><div class="line">);</div><div class="line">foo( $a );</div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure></p>
<p>结果:<br>xdebug.collect_params设置的不同值提供不同的输出，您可以在下面看到：</p>
<ul>
<li>default</li>
</ul>
<p><img src="http://n.sinaimg.cn/games/3ece443e/20161022/QQ20161022-0@2x.png" alt="default"></p>
<ul>
<li>1<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ini_set(&apos;xdebug.collect_params&apos;, &apos;1&apos;);</div></pre></td></tr></table></figure>
</li>
</ul>
<p><img src="http://n.sinaimg.cn/games/3ece443e/20161022/QQ20161022-1@2x.png" alt="default"></p>
<ul>
<li>2<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ini_set(&apos;xdebug.collect_params&apos;, &apos;2&apos;);</div></pre></td></tr></table></figure>
</li>
</ul>
<p><img src="http://n.sinaimg.cn/games/3ece443e/20161022/QQ20161022-2@2x.png" alt="default"></p>
<ul>
<li>3<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ini_set(&apos;xdebug.collect_params&apos;, &apos;3&apos;);</div></pre></td></tr></table></figure>
</li>
</ul>
<p><img src="http://n.sinaimg.cn/games/3ece443e/20161022/QQ20161022-3@2x.png" alt="default"></p>
<ul>
<li>4<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ini_set(&apos;xdebug.collect_params&apos;, &apos;4&apos;);</div></pre></td></tr></table></figure>
</li>
</ul>
<p><img src="http://n.sinaimg.cn/games/3ece443e/20161022/QQ20161022-4@2x.png" alt="default"></p>
<h2 id="附加信息"><a href="#附加信息" class="headerlink" title="附加信息"></a>附加信息</h2><p>除了显示传递给每个函数的变量的值之外，Xdebug还可以通过使用xdebug.dump_globals和xdebug.dump.* 设置来选择性地显示关于所选超级元素的信息。 设置xdebug.dump_once和xdebug.dump_undefined会稍微修改可用超级元素显示的时间和信息。 使用xdebug.show_local_vars设置，您可以指示Xdebug为用户定义的函数显示最顶层栈级中可用的所有变量。 下面的示例显示了这一点（脚本从上面的示例中使用）。</p>
<ul>
<li>default</li>
</ul>
<p><img src="http://n.sinaimg.cn/games/3ece443e/20161022/QQ20161022-5@2x.png" alt="default"></p>
<ul>
<li>dump_superglobals=1<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">ini_set(&apos;xdebug.collect_vars&apos;, &apos;on&apos;);</div><div class="line">ini_set(&apos;xdebug.collect_params&apos;, &apos;4&apos;);</div><div class="line">ini_set(&apos;xdebug.dump_globals&apos;, &apos;on&apos;);</div><div class="line">ini_set(&apos;xdebug.dump.SERVER&apos;, &apos;REQUEST_URI&apos;);</div></pre></td></tr></table></figure>
</li>
</ul>
<p><img src="http://n.sinaimg.cn/games/3ece443e/20161022/QQ20161022-6@2x.png" alt="default"></p>
<ul>
<li>show_local_vars=1<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">ini_set(&apos;xdebug.collect_vars&apos;, &apos;on&apos;);</div><div class="line">ini_set(&apos;xdebug.collect_params&apos;, &apos;4&apos;);</div><div class="line">ini_set(&apos;xdebug.dump_globals&apos;, &apos;on&apos;);</div><div class="line">ini_set(&apos;xdebug.dump.SERVER&apos;, &apos;REQUEST_URI&apos;);</div><div class="line">ini_set(&apos;xdebug.show_local_vars&apos;, &apos;on&apos;);</div></pre></td></tr></table></figure>
</li>
</ul>
<p><img src="http://n.sinaimg.cn/games/3ece443e/20161022/QQ20161022-8@2x.png" alt="default"></p>
<h2 id="相关设置"><a href="#相关设置" class="headerlink" title="相关设置"></a>相关设置</h2><h3 id="xdebug-cli-color"><a href="#xdebug-cli-color" class="headerlink" title="xdebug.cli_color"></a><strong>xdebug.cli_color</strong></h3><p>类型：整数，默认值：0，在Xdebug&gt; 2.2中引入</p>
<p>如果此设置为1，则Xdebug将在CLI模式下和输出为tty时对var_dumps和堆栈跟踪输出进行颜色。在Windows上，需要安装ANSICON工具。</p>
<p>如果设置为2，那么无论Xdebug是否连接到tty或是否安装了ANSICON，Xdebug都将始终对var_dumps和堆栈跟踪进行着色。在这种情况下，您可能会看到转义码。</p>
<p>有关更多信息，请参阅此<a href="http://drck.me/clicolor-9cr" target="_blank" rel="external">文章</a>。</p>
<h3 id="xdebug-collect-includes"><a href="#xdebug-collect-includes" class="headerlink" title="xdebug.collect_includes"></a><strong>xdebug.collect_includes</strong></h3><p>类型：布尔值，默认值：1</p>
<p>此设置默认为1，控制Xdebug是否应将include（），include_once（），require（）或require_once（）中使用的文件名写入跟踪文件。</p>
<h3 id="xdebug-collect-params"><a href="#xdebug-collect-params" class="headerlink" title="xdebug.collect_params"></a><strong>xdebug.collect_params</strong></h3><p>类型：整数，默认值：0</p>
<p>此设置默认为0，控制在函数跟踪或堆栈跟踪中记录函数调用时，Xdebug是否应收集传递给函数的参数。</p>
<p>该设置默认为0，因为对于非常大的脚本，它可能使用大量的内存，因此使巨量脚本无法运行。您可以最安全地打开此设置，但是您可以预期在具有大量函数调用和/或巨大的数据结构作为参数的脚本中存在一些问题。</p>
<p>Xdebug 2不会有增加的内存使用这个问题，因为它永远不会将此信息存储在内存中。相反，它将只被写入磁盘。这意味着您需要查看磁盘使用情况。</p>
<p>此设置可以有四个不同的值。对于每个值，示出了不同量的信息。下面你将看到每个值提供什么信息。另请参见功能堆栈跟踪的几个截图的介绍。</p>
<table>
<thead>
<tr>
<th>值</th>
<th>显示参数信息</th>
</tr>
</thead>
<tbody>
<tr>
<td>0</td>
<td>无。</td>
</tr>
<tr>
<td>1</td>
<td>元素的类型和数量（f.e. string（6），array（8））。</td>
</tr>
<tr>
<td>2</td>
<td>元素的类型和数量，带有完整信息的工具提示1。在CLI版本的PHP它不会有工具提示，而不是在输出文件。</td>
</tr>
<tr>
<td>3</td>
<td>完全变量内容（具有由xdebug.var_display_max_children，xdebug.var_display_max_data和xdebug.var_display_max_depth设置的限制）。</td>
</tr>
<tr>
<td>4</td>
<td>完全变量内容和变量名称。</td>
</tr>
<tr>
<td>5</td>
<td>PHP序列化变量内容，没有名称。 （Xdebug 2.3中的新功能）</td>
</tr>
</tbody>
</table>
<h3 id="xdebug-collect-vars"><a href="#xdebug-collect-vars" class="headerlink" title="xdebug.collect_vars"></a><strong>xdebug.collect_vars</strong></h3><p>类型：布尔值，默认值：0</p>
<p>此设置告诉Xdebug收集有关在某个范围中使用哪些变量的信息。 这个分析可能很慢，因为Xdebug必须逆向工程PHP的操作码数组。 此设置不会记录不同变量具有的值，因为使用xdebug.collect_params。 仅当您希望使用xdebug_get_declared_vars（）时，才需要启用此设置。</p>
<h3 id="xdebug-dump"><a href="#xdebug-dump" class="headerlink" title="xdebug.dump.*"></a><strong>xdebug.dump.*</strong></h3><p>类型：字符串，默认值：空</p>
<p>*可以是COOKIE，FILES，GET，POST，REQUEST，SERVER，SESSION中的任何一个。 这七个设置控制当发生错误情况时来自超级溶剂的数据。</p>
<p>每个php.ini设置可以包括一个逗号分隔的变量从这个超级全局转储，或*所有的。 请确保您在此设置中不添加空格。</p>
<p>为了在发生错误时转储REMOTE_ADDR和REQUEST_METHOD，以及所有GET参数，请添加以下设置：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">xdebug.dump.SERVER = REMOTE_ADDR,REQUEST_METHOD</div><div class="line">xdebug.dump.GET = *</div></pre></td></tr></table></figure></p>
<h3 id="xdebug-dump-globals"><a href="#xdebug-dump-globals" class="headerlink" title="xdebug.dump_globals"></a><strong>xdebug.dump_globals</strong></h3><p>类型：布尔值，默认值：1</p>
<p>控制是否应显示由xdebug.dump.*设置定义的超级元素的值。</p>
<h3 id="xdebug-dump-once"><a href="#xdebug-dump-once" class="headerlink" title="xdebug.dump_once"></a><strong>xdebug.dump_once</strong></h3><p>类型：布尔值，默认值：1</p>
<p>控制是否应在所有错误情况（设置为0）或仅在第一个（设置为1）上转储超级元素的值。</p>
<h3 id="xdebug-dump-undefined"><a href="#xdebug-dump-undefined" class="headerlink" title="xdebug.dump_undefined"></a><strong>xdebug.dump_undefined</strong></h3><p>类型：布尔值，默认值：0<br>如果要从超级元组转储未定义的值，您应该将此设置设置为1，否则将其设置为0。</p>
<h3 id="xdebug-file-link-format"><a href="#xdebug-file-link-format" class="headerlink" title="xdebug.file_link_format"></a><strong>xdebug.file_link_format</strong></h3><p>类型：字符串，默认值：，在Xdebug&gt; 2.1中引入</p>
<p>此设置确定在使用文件名的堆栈跟踪显示中进行的链接的格式。 这允许IDE设置一个链接协议，通过单击Xdebug在堆栈跟踪中显示的文件名，可以直接转到行和文件。 示例格式可能如下所示：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">myide://%f@%l</div></pre></td></tr></table></figure></p>
<p>可能的格式说明符是：</p>
<table>
<thead>
<tr>
<th>说明符</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr>
<td>％f</td>
<td>文件名</td>
</tr>
<tr>
<td>％l</td>
<td>行号</td>
</tr>
</tbody>
</table>
<p>对于各种IDE / OSses，有一些关于如何使这项工作的指示：</p>
<p>Linux上的Firefox</p>
<ul>
<li>打开about：config</li>
<li>添加一个新的布尔设置“network.protocol-handler.expose.xdebug”并将其设置为“false”</li>
<li>将以下内容添加到shell脚本〜/ bin / ff-xdebug.sh中：<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#! /bin/sh</span></div><div class="line">f=`<span class="built_in">echo</span> <span class="variable">$1</span> | cut <span class="_">-d</span> @ <span class="_">-f</span> 1 | sed <span class="string">'s/xdebug:\/\///'</span>`</div><div class="line">l=`<span class="built_in">echo</span> <span class="variable">$1</span> | cut <span class="_">-d</span> @ <span class="_">-f</span> 2`</div></pre></td></tr></table></figure>
</li>
</ul>
<p>添加（取决于你有komodo，vim vs netbeans）：<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">komodo <span class="variable">$f</span> <span class="_">-l</span> <span class="variable">$l</span></div><div class="line">gvim --remote-tab +<span class="variable">$l</span> <span class="variable">$f</span></div><div class="line">netbeans <span class="string">"<span class="variable">$f</span>:<span class="variable">$l</span>"</span></div></pre></td></tr></table></figure></p>
<ul>
<li>使用chmod + x〜/ bin / ff-xdebug.sh来使脚本可执行</li>
<li>将xdebug.file_link_format设置为xdebug：//％f @％l</li>
</ul>
<p>Windows和netbeans</p>
<ul>
<li>创建文件netbeans.bat并将其保存在您的路径（C：\ Windows）：<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">@echo off</div><div class="line">setlocal enableextensions enabledelayedexpansion</div><div class="line">set NETBEANS=%1</div><div class="line">set FILE=%~2</div><div class="line">%NETBEANS% --nosplash --console suppress --open &quot;%FILE:~19%&quot;</div><div class="line">nircmd win activate process netbeans.exe</div></pre></td></tr></table></figure>
</li>
</ul>
<p>注意：如果没有nircmd，请删除最后一行。</p>
<ul>
<li>将以下代码保存在netbeans protocol.reg中：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">Windows Registry Editor Version 5.00</div><div class="line"></div><div class="line">[HKEY_CLASSES_ROOT\netbeans]</div><div class="line">&quot;URL Protocol&quot;=&quot;&quot;</div><div class="line">@=&quot;URL:Netbeans Protocol&quot;</div><div class="line"></div><div class="line">[HKEY_CLASSES_ROOT\netbeans\DefaultIcon]</div><div class="line">@=&quot;\&quot;C:\\Program Files\\NetBeans 7.1.1\\bin\\netbeans.exe,1\&quot;&quot;</div><div class="line"></div><div class="line">[HKEY_CLASSES_ROOT\netbeans\shell]</div><div class="line"></div><div class="line">[HKEY_CLASSES_ROOT\netbeans\shell\open]</div><div class="line"></div><div class="line">[HKEY_CLASSES_ROOT\netbeans\shell\open\command]</div><div class="line">@=&quot;\&quot;C:\\Windows\\netbeans.bat\&quot; \&quot;C:\\Program Files\\NetBeans 7.1.1\\bin\\netbeans.exe\&quot; \&quot;%1\&quot;&quot;</div></pre></td></tr></table></figure>
<p>注意：确保更改Netbeans（两次）的路径以及netbeans.bat批处理文件（如果将其保存在C：\Windows 以外的其他位置）。</p>
<p>Double click on the netbeans_protocol.reg file to import it into the registry.<br>Set the xdebug.file_link_format setting to</p>
<ul>
<li><p>双击netbeans protocol.reg文件将其导入到注册表中。</p>
</li>
<li><p>将xdebug.file_link_format设置设置为<code>xdebug.file_link_format = &quot;netbeans://open/?f=%f:%l&quot;</code></p>
</li>
</ul>
<h3 id="xdebug-manual-url"><a href="#xdebug-manual-url" class="headerlink" title="xdebug.manual_url"></a><strong>xdebug.manual_url</strong></h3><p>类型：字符串，默认值：http：//www.php.net，在Xdebug &lt;2.2.1中引入</p>
<p>这是从函数跟踪和错误消息到函数的手册页的链接的基本URL。建议将此设置设置为使用最近的镜像。</p>
<h3 id="xdebug-show-exception-trace"><a href="#xdebug-show-exception-trace" class="headerlink" title="xdebug.show_exception_trace"></a><strong>xdebug.show_exception_trace</strong></h3><p>类型：整数，默认值：0</p>
<p>当此设置设置为1时，每当引发异常时，即使此异常实际被捕获，Xdebug也将显示堆栈跟踪。</p>
<h3 id="xdebug-show-local-vars"><a href="#xdebug-show-local-vars" class="headerlink" title="xdebug.show_local_vars"></a><strong>xdebug.show_local_vars</strong></h3><p>类型：整数，默认值：0</p>
<p>当这个设置设置为某事！= 0 Xdebug的错误情况下生成的堆栈转储也将显示最顶层范围中的所有变量。请注意，这可能会生成大量的信息，因此默认情况下关闭。</p>
<h3 id="xdebug-show-mem-delta"><a href="#xdebug-show-mem-delta" class="headerlink" title="xdebug.show_mem_delta"></a><strong>xdebug.show_mem_delta</strong></h3><p>类型：整数，默认值：0</p>
<p>当这个设置设置为某些！= 0 Xdebug的人类可读的生成的跟踪文件将显示在函数调用之间的内存使用的差异。如果Xdebug配置为生成计算机可读的跟踪文件，则它们将始终显示此信息。</p>
<h3 id="xdebug-var-display-max-children"><a href="#xdebug-var-display-max-children" class="headerlink" title="xdebug.var_display_max_children"></a><strong>xdebug.var_display_max_children</strong></h3><p>类型：整数，默认值：128</p>
<p>控制使用xdebug_var_dump（），xdebug.show_local_vars或通过函数跟踪显示变量时显示的数组子元素和对象的属性的数量。</p>
<p>要禁用任何限制，请使用-1作为值。</p>
<p>此设置对通过远程调试功能发送到客户端的子项数没有任何影响。</p>
<h3 id="xdebug-var-display-max-data"><a href="#xdebug-var-display-max-data" class="headerlink" title="xdebug.var_display_max_data"></a><strong>xdebug.var_display_max_data</strong></h3><p>类型：整数，默认值：512</p>
<p>控制使用xdebug_var_dump（），xdebug.show_local_vars或通过函数跟踪显示变量时显示的最大字符串长度。</p>
<p>要禁用任何限制，请使用-1作为值。</p>
<p>此设置对通过远程调试功能发送到客户端的子项数没有任何影响。</p>
<h3 id="xdebug-var-display-max-depth"><a href="#xdebug-var-display-max-depth" class="headerlink" title="xdebug.var_display_max_depth"></a><strong>xdebug.var_display_max_depth</strong></h3><p>类型：整数，默认值：3</p>
<p>当使用xdebug_var_dump（），xdebug.show_local_vars或通过函数跟踪显示变量时，控制数组元素和对象属性的嵌套级别数。</p>
<p>您可以选择的最大值为1023.您还可以使用-1作为值来选择此最大数。</p>
<p>此设置对通过远程调试功能发送到客户端的子项数没有任何影响。</p>
<h2 id="相关函数"><a href="#相关函数" class="headerlink" title="相关函数"></a>相关函数</h2><h3 id="array-xdebug-get-declared-vars（）"><a href="#array-xdebug-get-declared-vars（）" class="headerlink" title="array xdebug_get_declared_vars（）"></a><strong>array xdebug_get_declared_vars（）</strong></h3><p>返回声明的变量</p>
<p>返回一个数组，其中每个元素是在当前范围中定义的变量名称。 需要启用xdebug.collect_vars设置。</p>
<p>Example:<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line">    <span class="class"><span class="keyword">class</span> <span class="title">strings</span> </span>&#123;</div><div class="line">        <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">fix_strings</span><span class="params">($a, $b)</span> </span>&#123;</div><div class="line">            <span class="keyword">foreach</span> ($b <span class="keyword">as</span> $item) &#123;</div><div class="line">            &#125;</div><div class="line">            var_dump(xdebug_get_declared_vars());</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    strings::fix_strings(<span class="keyword">array</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>), <span class="keyword">array</span>(<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>));</div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure></p>
<p>Returns:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">array</div><div class="line">  0 =&gt; string &apos;a&apos; (length=1)</div><div class="line">  1 =&gt; string &apos;b&apos; (length=1)</div><div class="line">  2 =&gt; string &apos;item&apos; (length=4)</div></pre></td></tr></table></figure></p>
<p>在5.1之前的PHP版本中，变量名“a”不在返回的数组中，因为它在调用函数xdebug_get_declared_vars（）的作用域中不使用。</p>
<h3 id="array-xdebug-get-function-stack（）"><a href="#array-xdebug-get-function-stack（）" class="headerlink" title="array xdebug_get_function_stack（）"></a><strong>array xdebug_get_function_stack（）</strong></h3><p>返回有关堆栈的信息</p>
<p>返回类似于此点的堆栈跟踪的数组。 示例脚本：</p>
<p>Example:<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line">    <span class="class"><span class="keyword">class</span> <span class="title">strings</span> </span>&#123;</div><div class="line">        <span class="function"><span class="keyword">function</span> <span class="title">fix_string</span><span class="params">($a)</span></span></div><div class="line">        &#123;</div><div class="line">            var_dump(xdebug_get_function_stack());</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">function</span> <span class="title">fix_strings</span><span class="params">($b)</span> </span>&#123;</div><div class="line">            <span class="keyword">foreach</span> ($b <span class="keyword">as</span> $item) &#123;</div><div class="line">                <span class="keyword">$this</span>-&gt;fix_string($item);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    $s = <span class="keyword">new</span> strings();</div><div class="line">    $ret = $s-&gt;fix_strings(<span class="keyword">array</span>(<span class="string">'Derick'</span>));</div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure></p>
<p>Returns:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">array</div><div class="line">  0 =&gt;</div><div class="line">    array</div><div class="line">      &apos;function&apos; =&gt; string &apos;&#123;main&#125;&apos; (length=6)</div><div class="line">      &apos;file&apos; =&gt; string &apos;/var/www/xdebug_get_function_stack.php&apos; (length=63)</div><div class="line">      &apos;line&apos; =&gt; int 0</div><div class="line">      &apos;params&apos; =&gt;</div><div class="line">        array</div><div class="line">          empty</div><div class="line">  1 =&gt;</div><div class="line">    array</div><div class="line">      &apos;function&apos; =&gt; string &apos;fix_strings&apos; (length=11)</div><div class="line">      &apos;class&apos; =&gt; string &apos;strings&apos; (length=7)</div><div class="line">      &apos;file&apos; =&gt; string &apos;/var/www/xdebug_get_function_stack.php&apos; (length=63)</div><div class="line">      &apos;line&apos; =&gt; int 18</div><div class="line">      &apos;params&apos; =&gt;</div><div class="line">        array</div><div class="line">          &apos;b&apos; =&gt; string &apos;array (0 =&gt; &apos;Derick&apos;)&apos; (length=21)</div><div class="line">  2 =&gt;</div><div class="line">    array</div><div class="line">      &apos;function&apos; =&gt; string &apos;fix_string&apos; (length=10)</div><div class="line">      &apos;class&apos; =&gt; string &apos;strings&apos; (length=7)</div><div class="line">      &apos;file&apos; =&gt; string &apos;/var/www/xdebug_get_function_stack.php&apos; (length=63)</div><div class="line">      &apos;line&apos; =&gt; int 12</div><div class="line">      &apos;params&apos; =&gt;</div><div class="line">        array</div><div class="line">          &apos;a&apos; =&gt; string &apos;&apos;Derick&apos;&apos; (length=8)</div></pre></td></tr></table></figure></p>
<h3 id="array-xdebug-get-monitored-functions（）"><a href="#array-xdebug-get-monitored-functions（）" class="headerlink" title="array xdebug_get_monitored_functions（）"></a><strong>array xdebug_get_monitored_functions（）</strong></h3><p>返回有关受监视函数的信息</p>
<p>在2.4版本中引入</p>
<p>返回一个结构，其中包含有关在脚本中执行受监视函数的位置的信息。 以下示例显示如何使用此和返回的信息：</p>
<p>Example:<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"><span class="comment">/* Start the function monitor for strrev and array_push: */</span></div><div class="line">xdebug_start_function_monitor( [ <span class="string">'strrev'</span>, <span class="string">'array_push'</span> ] );</div><div class="line"></div><div class="line"><span class="comment">/* Run some code: */</span></div><div class="line"><span class="keyword">echo</span> strrev(<span class="string">"yes!"</span>), <span class="string">"\n"</span>;</div><div class="line"></div><div class="line"><span class="keyword">echo</span> strrev(<span class="string">"yes!"</span>), <span class="string">"\n"</span>;</div><div class="line"></div><div class="line">var_dump(xdebug_get_monitored_functions());</div><div class="line">xdebug_stop_function_monitor();</div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure></p>
<p>Returns:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">/tmp/monitor-example.php:10:</div><div class="line">array(2) &#123;</div><div class="line">  [0] =&gt;</div><div class="line">  array(3) &#123;</div><div class="line">    &apos;function&apos; =&gt;</div><div class="line">    string(6) &quot;strrev&quot;</div><div class="line">    &apos;filename&apos; =&gt;</div><div class="line">    string(24) &quot;/tmp/monitor-example.php&quot;</div><div class="line">    &apos;lineno&apos; =&gt;</div><div class="line">    int(6)</div><div class="line">  &#125;</div><div class="line">  [1] =&gt;</div><div class="line">  array(3) &#123;</div><div class="line">    &apos;function&apos; =&gt;</div><div class="line">    string(6) &quot;strrev&quot;</div><div class="line">    &apos;filename&apos; =&gt;</div><div class="line">    string(24) &quot;/tmp/monitor-example.php&quot;</div><div class="line">    &apos;lineno&apos; =&gt;</div><div class="line">    int(8)</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="integer-xdebug-get-stack-depth（）"><a href="#integer-xdebug-get-stack-depth（）" class="headerlink" title="integer xdebug_get_stack_depth（）"></a><strong>integer xdebug_get_stack_depth（）</strong></h3><p>返回当前堆栈深度级别</p>
<p>返回堆栈深度级别。 脚本的主体是级别0，每个包含和/或函数调用将向堆栈深度级别添加一个。</p>
<h3 id="none-xdebug-print-function-stack-string-message-int-options"><a href="#none-xdebug-print-function-stack-string-message-int-options" class="headerlink" title="none xdebug_print_function_stack( [ string message [, int options ] ] )"></a><strong>none xdebug_print_function_stack( [ string message [, int options ] ] )</strong></h3><p>显示当前函数栈</p>
<p>以类似于Xdebug在错误情况下显示的方式显示当前函数堆栈。</p>
<p>“message”参数允许您使用自己的头部替换消息。 （在Xdebug 2.1中引入）。</p>
<p>Example:<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span><span class="params">( $far, $out )</span></span></div><div class="line">&#123;</div><div class="line">    xdebug_print_function_stack( <span class="string">'Your own message'</span> );</div><div class="line">&#125;</div><div class="line">foo( <span class="number">42</span>, <span class="number">3141592654</span> );</div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure></p>
<p>Returns:</p>
<p><img src="http://n.sinaimg.cn/games/3ece443e/20161022/QQ20161022-9@2x.png" alt="img"></p>
<p>位掩码“options”允许您配置一些额外的选项。 目前支持以下选项：</p>
<ul>
<li>XDEBUG_STACK_NO_DESC<blockquote>
<p>如果设置了此选项，则打印的堆栈跟踪将不具有标题。 如果要从自己的错误处理程序打印堆栈跟踪，否则打印位置是从中调用xdebug_print_function_stack（）时，这是有用的。 （在Xdebug 2.3中引入）。</p>
</blockquote>
</li>
</ul>
<h3 id="void-xdebug-start-function-monitor（array-list-of-functions-to-monitor）"><a href="#void-xdebug-start-function-monitor（array-list-of-functions-to-monitor）" class="headerlink" title="void xdebug_start_function_monitor（array $ list_of_functions_to_monitor）"></a><strong>void xdebug_start_function_monitor（array $ list_of_functions_to_monitor）</strong></h3><p>开始功能监控</p>
<p>在2.4版本中引入</p>
<p>此函数开始监视列表中给出的函数作为此函数的参数。 函数监视允许您找到代码中提供的作为参数的函数在哪里调用。 这可以用于跟踪使用旧的或不鼓励的函数的位置。</p>
<p>Example:<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line">xdebug_start_function_monitor( [ <span class="string">'strrev'</span>, <span class="string">'array_push'</span> ] );</div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure></p>
<p>您还可以向定义要监视的函数的数组添加类方法和静态方法。 例如，要捕获对DramModel :: canSee的静态调用和对Whisky-&gt; drink的动态调用，您将启动监视器：</p>
<p>Example:<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line">xdebug_start_function_monitor( [ <span class="string">'DramModel::canSee'</span>, <span class="string">'Whisky-&gt;drink'</span>] );</div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure></p>
<p>定义的函数区分大小写，并且不会捕获对静态方法的动态调用。</p>
<h3 id="void-xdebug-stop-function-monitor（）"><a href="#void-xdebug-stop-function-monitor（）" class="headerlink" title="void xdebug_stop_function_monitor（）"></a><strong>void xdebug_stop_function_monitor（）</strong></h3><p>停止监视功能</p>
<p>在2.4版本中引入</p>
<p>此功能停止功能监视器。 为了获得受监视函数的列表，您需要使用xdebug_get_monitored_functions（）函数。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;当Xdebug被激活时，只要PHP决定显示通知，警告，错误等，它将显示一个堆栈跟踪。堆栈跟踪显示的信息以及它们的呈现方式可以配置为满足您的需要。&lt;/p&gt;
&lt;p&gt;Xdebug在错误情况下显示的堆栈跟踪（如果display_errors在php.ini中设置为On）在它们显示的信息量上相当保守。 这是因为大量的信息可以减慢脚本的执行和在浏览器中呈现堆栈跟踪本身。 但是，可以使堆栈跟踪显示具有不同设置的更详细信息。&lt;/p&gt;
    
    </summary>
    
      <category term="PHP" scheme="https://weizhimiao.github.io/categories/PHP/"/>
    
    
      <category term="Xdebug" scheme="https://weizhimiao.github.io/tags/Xdebug/"/>
    
  </entry>
  
  <entry>
    <title>Xdebug之代码覆盖率分析</title>
    <link href="https://weizhimiao.github.io/2016/10/22/Xdebug%E4%B9%8B%E4%BB%A3%E7%A0%81%E8%A6%86%E7%9B%96%E7%8E%87%E5%88%86%E6%9E%90/"/>
    <id>https://weizhimiao.github.io/2016/10/22/Xdebug之代码覆盖率分析/</id>
    <published>2016-10-22T12:30:00.000Z</published>
    <updated>2016-10-22T16:06:51.000Z</updated>
    
    <content type="html"><![CDATA[<p>代码覆盖率告诉您在请求期间已执行了哪些行的脚本（或一组脚本）。 有了这些信息，你可以找出你的单元测试有多好。</p>
<a id="more"></a>
<h2 id="相关设置"><a href="#相关设置" class="headerlink" title="相关设置"></a>相关设置</h2><h3 id="xdebug-coverage-enable"><a href="#xdebug-coverage-enable" class="headerlink" title="xdebug.coverage_enable"></a>xdebug.coverage_enable</h3><p>类型：boolean，默认值：1，在Xdebug&gt; = 2.2中引入</p>
<p>如果此设置设置为0，则Xdebug不会设置内部结构以允许代码覆盖。 这加快了Xdebug相当有点，但当然，代码覆盖率分析将不工作。</p>
<h2 id="相关函数"><a href="#相关函数" class="headerlink" title="相关函数"></a>相关函数</h2><h3 id="boolean-xdebug-code-coverage-started（）"><a href="#boolean-xdebug-code-coverage-started（）" class="headerlink" title="boolean xdebug_code_coverage_started（）"></a>boolean xdebug_code_coverage_started（）</h3><p>返回代码覆盖是否处于活动状态。</p>
<p>返回代码覆盖是否已开始。</p>
<p>Example:</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line">    var_dump(xdebug_code_coverage_started());</div><div class="line"></div><div class="line">    xdebug_start_code_coverage();</div><div class="line"></div><div class="line">    var_dump(xdebug_code_coverage_started());</div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure>
<p>Returns:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">bool(false)</div><div class="line">bool(true)</div></pre></td></tr></table></figure>
<h3 id="array-xdebug-get-code-coverage（）"><a href="#array-xdebug-get-code-coverage（）" class="headerlink" title="array xdebug_get_code_coverage（）"></a>array xdebug_get_code_coverage（）</h3><p>返回代码覆盖率信息</p>
<p>返回一个结构，其中包含有关在脚本中执行哪些行（包括include文件）的信息。 以下示例显示了一个特定文件的代码覆盖率：</p>
<p>Example:<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line">    xdebug_start_code_coverage();</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">a</span><span class="params">($a)</span> </span>&#123;</div><div class="line">        <span class="keyword">echo</span> $a * <span class="number">2.5</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">b</span><span class="params">($count)</span> </span>&#123;</div><div class="line">        <span class="keyword">for</span> ($i = <span class="number">0</span>; $i &lt; $count; $i++) &#123;</div><div class="line">            a($i + <span class="number">0.17</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    b(<span class="number">6</span>);</div><div class="line">    b(<span class="number">10</span>);</div><div class="line"></div><div class="line">    var_dump(xdebug_get_code_coverage());</div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure></p>
<p>Returns:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">array</div><div class="line">  &apos;/home/httpd/html/test/xdebug/docs/xdebug_get_code_coverage.php&apos; =&gt;</div><div class="line">    array</div><div class="line">      5 =&gt; int 1</div><div class="line">      6 =&gt; int 1</div><div class="line">      7 =&gt; int 1</div><div class="line">      9 =&gt; int 1</div><div class="line">      10 =&gt; int 1</div><div class="line">      11 =&gt; int 1</div><div class="line">      12 =&gt; int 1</div><div class="line">      13 =&gt; int 1</div><div class="line">      15 =&gt; int 1</div><div class="line">      16 =&gt; int 1</div><div class="line">      18 =&gt; int 1</div></pre></td></tr></table></figure></p>
<h3 id="void-xdebug-start-code-coverage（-int-options-）"><a href="#void-xdebug-start-code-coverage（-int-options-）" class="headerlink" title="void xdebug_start_code_coverage（[int options]）"></a>void xdebug_start_code_coverage（[int options]）</h3><p>开始代码覆盖</p>
<p>此函数开始收集代码覆盖的信息。 收集的信息包括一个二维数组，其主要索引为执行的文件名，辅助键为行号。 元素中的值表示行是否已执行或它是否具有不可达行。</p>
<p>每行的返回值为：</p>
<ul>
<li><p>1：这行被执行</p>
</li>
<li><p>-1：此行未执行</p>
</li>
<li><p>-2：这行没有可执行代码就可以了</p>
</li>
</ul>
<p>值-1仅在启用XDEBUG_CC_UNUSED时返回，并且仅当启用了XDEBUG_CC_UNUSED和XDEBUG_CC_DEAD_CODE时才返回值-2。</p>
<p>此函数有两个选项，用作位字段：</p>
<ul>
<li><p>XDEBUG_CC_UNUSED</p>
<blockquote>
<p>启用代码扫描，以确定哪行有可执行代码。 如果没有这个选项，返回的数组将只包含实际执行的行。</p>
</blockquote>
</li>
<li><p>XDEBUG_CC_DEAD_CODE</p>
<blockquote>
<p>启用分支分析以确定是否可以执行代码。<br>启用这些选项会使代码覆盖率显着降低。<br>您可以使用以下示例中所示的选项。</p>
</blockquote>
</li>
</ul>
<p>Example:<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line">xdebug_start_code_coverage( XDEBUG_CC_UNUSED | XDEBUG_CC_DEAD_CODE );</div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure></p>
<h3 id="void-xdebug-stop-code-coverage（-int-cleanup-true-）"><a href="#void-xdebug-stop-code-coverage（-int-cleanup-true-）" class="headerlink" title="void xdebug_stop_code_coverage（[int cleanup = true]）"></a>void xdebug_stop_code_coverage（[int cleanup = true]）</h3><p>停止代码覆盖</p>
<p>此功能停止收集信息，内存中的信息将被销毁。 如果传递“false”作为参数，那么代码覆盖率信息不会被销毁，因此您可以再次使用xdebug_start_code_coverage（）函数恢复信息收集。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;代码覆盖率告诉您在请求期间已执行了哪些行的脚本（或一组脚本）。 有了这些信息，你可以找出你的单元测试有多好。&lt;/p&gt;
    
    </summary>
    
      <category term="PHP" scheme="https://weizhimiao.github.io/categories/PHP/"/>
    
    
      <category term="Xdebug" scheme="https://weizhimiao.github.io/tags/Xdebug/"/>
    
  </entry>
  
  <entry>
    <title>Xdebug之常见问题</title>
    <link href="https://weizhimiao.github.io/2016/10/22/Xdebug%E4%B9%8B%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/"/>
    <id>https://weizhimiao.github.io/2016/10/22/Xdebug之常见问题/</id>
    <published>2016-10-22T12:30:00.000Z</published>
    <updated>2016-10-22T16:06:16.000Z</updated>
    
    <content type="html"><![CDATA[<ul>
<li><p>xdebug的使用</p>
</li>
<li><p>xdebug的编译安装</p>
</li>
</ul>
<a id="more"></a>
<h2 id="xdebug的使用"><a href="#xdebug的使用" class="headerlink" title="xdebug的使用"></a>xdebug的使用</h2><p>问：phpinfo（）报告Xdebug已安装和启用，但我仍然不会得到任何堆栈跟踪时发生错误。</p>
<p>A1：你必须搜索所有的PHP库，并包含任何“set_error<em>handler”调用的文件。如果有任何，你必须将其注释掉，或者更改handler函数的主体以调用xdebug</em> * api函数。</p>
<p>A2：您没有在php.ini中将display_errors设置为1</p>
<hr>
<p>问：Xdebug不格式化输出。</p>
<p>A：确保php.ini中的PHP的html_errors设置为1</p>
<hr>
<p>问：调试客户端没有收到任何连接，我怎么办？</p>
<p>A：您可能忘记设置环境变量或向URL中添加必要的信息。有关详细信息，请参阅文档。</p>
<p>A：您检查过防火墙设置了吗？确保Xdebug正在侦听的端口（默认为9000）未被阻止。</p>
<p>A：你使用FastCGI，可能是通过FPM（FastCGI过程管理器）？它默认使用相同的端口作为Xdebug（9000），因此您需要将其中一个更改为不同的数字。在Xdebug，你可以使用xdebug.remote_port。</p>
<p>A：如果你使用SELinux运行，你应该确保它不会阻止连接;查找关于name_connect或与Xdebug端口相关的任何警告。您可能必须明确允许访问。访问此网站或搜索“selinux name_connect apache”有关如何执行此操作的详细信息</p>
<h2 id="xdebug的编译安装"><a href="#xdebug的编译安装" class="headerlink" title="xdebug的编译安装"></a>xdebug的编译安装</h2><p>问：我没有phpize工具。</p>
<p>答：Debian和Ubuntu用户需要用apt安装php5-dev软件包。</p>
<hr>
<p>问：如何处理：Xdebug需要Zend Engine API版本xxxxxxxx。安装的Zend Engine API版本2xxxxxxxx较新。</p>
<p>A：此消息意味着您正在尝试加载Xdebug的PHP版本，它不是为它构建的。如果你自己编译PHP，很可能是因为你编译Xdebug对PHP头，属于你运行的不同的PHP版本。例如，你使用PHP 5.3，你使用的头仍然是PHP 5.2。如果你使用一个预编译的二进制文件，那么你使用的是错误的。</p>
<p>要诊断这是否是您的问题，请执行以下步骤：</p>
<ul>
<li><p>通过查看phpinfo（）（或“php -i”）输出，检查您正在运行的PHP版本的“Zend Extension”API号。您可以在输出的顶部找到它，与PHP徽标和PHP版本在同一个块中。例如，对于PHP 5.2，数字是“220060519”，对于PHP 5.3，它是“220090626”。</p>
</li>
<li><p>当您完成编译步骤时，检查“phpize”的输出。您要查找的数字是在“Zend Extension Api No”的行上。</p>
</li>
</ul>
<p>如果上面的两个数字不匹配，你正在使用错误的PHP头文件进行编译。请参阅下一个常见问题条目以确定要使用的phpize。</p>
<hr>
<p>问：Xdebug仅作为PHP扩展加载，而不是作为Zend扩展。<br>定制的安装指导可能已指向此条目。</p>
<p>为了使Xdebug正常工作，包括断点等，它需要它作为Zend扩展加载，而不只是作为一个普通的PHP扩展。有些安装工具（PEAR / PECL）有时建议您使用extension = xdebug.so加载Xdebug。这是不正确的。为了解决这个问题，请在顶部块中“加载配置文件”和“其他.ini文件解析”下列出的任何INI文件中查找一行extension = xdebug.so。删除此行，并返回到定制安装说明。</p>
<hr>
<p>问：我如何找到使用哪个phpize？</p>
<p>A：运行：“phpize –help”。这将显示phpize的完整路径。此路径应该与您具有CLI二进制文件“php-config”和安装的“pear”和“pecl”二进制文件的路径相同。如果你运行“php-config –version”它应该显示与你运行的PHP版本相同。如果它不匹配，并且可能在路径上找到错误的“phpize”二进制，您可以运行configure如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">/full/path/to/php/bin/phpize</div><div class="line">./configure --with-php-config=/full/path/to/php/bin/php-config</div></pre></td></tr></table></figure>
<hr>
<p>问：我使用XAMPP，但我似乎不能得到打包的xdebug扩展正常工作。</p>
<p>A：如果你取消注释“extension = php_xdebug.dll”行，这是预期的。 Xdebug需要加载zend_extension_ts =“C：\ path \ to \ php_xdebug.dll”指令。 你也可能必须禁用加载Zend优化器，因为它默认情况下启用，并且不能很好地与Xdebug。 因此，查找php.ini中的相关条目，并将其注释掉。 从PHP 5.3起，您总是需要使用zend_extension PHP.ini设置名称，而不是zend_extension_ts。<br>问：在Debian，我看到以下问题与Xdebug的构建….任何修复？</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">/usr/lib/libc_nonshared.a(stat.oS)(.text.__i686.get_pc_thunk.bx+0x0):</div><div class="line">In function `__i686.get_pc_thunk.bx&apos;:</div><div class="line">: multiple definition of `__i686.get_pc_thunk.bx&apos;</div><div class="line">/usr/lib/gcc-lib/i486-linux/3.3.5/crtbeginS.o</div><div class="line">(.gnu.linkonce.t.__i686.get_pc_thunk.bx+0x0): first defined here</div><div class="line">collect2: ld returned 1 exit status</div><div class="line">make: *** [xdebug.la] Error 1</div></pre></td></tr></table></figure>
<p>A：这是Debian本身的问题，有关更多信息，请参阅<a href="http://www.xdebug.org/archives/xdebug-general/0825.html" target="_blank" rel="external">此处</a>和<a href="http://www.xdebug.org/archives/xdebug-general/0825.html" target="_blank" rel="external">此处</a>。</p>
]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;&lt;p&gt;xdebug的使用&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;xdebug的编译安装&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="PHP" scheme="https://weizhimiao.github.io/categories/PHP/"/>
    
    
      <category term="Xdebug" scheme="https://weizhimiao.github.io/tags/Xdebug/"/>
    
  </entry>
  
  <entry>
    <title>PHP程序调试之Xdebug</title>
    <link href="https://weizhimiao.github.io/2016/10/22/PHP%E7%A8%8B%E5%BA%8F%E8%B0%83%E8%AF%95%E4%B9%8BXdebug/"/>
    <id>https://weizhimiao.github.io/2016/10/22/PHP程序调试之Xdebug/</id>
    <published>2016-10-22T10:30:00.000Z</published>
    <updated>2016-10-22T16:09:21.000Z</updated>
    
    <content type="html"><![CDATA[<p>Xdebug是一个开放源代码的PHP程序调试器(即一个Debug工具)，可以用来跟踪，调试和分析PHP程序的运行状况。</p>
<a id="more"></a>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">$ tar -zxvf xdebug-2.4.1.tgz</div><div class="line">$ cd xdebug-2.4.1</div><div class="line">$ /usr/local/bin/phpize</div><div class="line">$ ./configure</div><div class="line">$ make</div><div class="line">$ make install</div><div class="line">Installing shared extensions:     /usr/local/Cellar/php54/5.4.45_6/lib/php/extensions/no-debug-non-zts-20100525/</div></pre></td></tr></table></figure>
<p>在<code>/usr/local/Cellar/php54/5.4.45_6/lib/php/extensions/no-debug-non-zts-20100525/</code> 查看<code>xdebug.so</code>是否已经生成</p>
<p>注：<code>/usr/local/Cellar/php54/5.4.45_6/lib/php/extensions/no-debug-non-zts-20100525/</code> 不同的PHP版本路径不同，也不一定要放在该路径，可以在zend_extension_ts中自行指定xdebug.so所在位置。</p>
<h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>修改配置文件 php.ini</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">[XDebug]  </div><div class="line">zend_extension =&quot;/usr/local/Cellar/php54/5.4.45_6/lib/php/extensions/no-debug-non-zts-20100525/xdebug.so&quot;  </div><div class="line"></div><div class="line">xdebug.remote_handler=dbgp  </div><div class="line">;开启远程调试  </div><div class="line">xdebug.remote_enable = On  </div><div class="line">;远程主机  </div><div class="line">xdebug.remote_host=localhost  </div><div class="line">;主机端口  </div><div class="line">xdebug.remote_port=9000  </div><div class="line">;开启自动跟踪  </div><div class="line">xdebug.auto_trace = On  </div><div class="line">;开启异常跟踪  </div><div class="line">xdebug.show_exception_trace = On  </div><div class="line">;开启远程调试自动启动  </div><div class="line">xdebug.remote_autostart = On  </div><div class="line">;收集变量   </div><div class="line">xdebug.collect_vars = On  </div><div class="line">;收集返回值   </div><div class="line">xdebug.collect_return = On  </div><div class="line">;收集参数   </div><div class="line">xdebug.collect_params = On  </div><div class="line">;设定函数调用监测信息的输出文件的路径。</div><div class="line">;xdebug.trace_output_dir=&quot;/home/xdebug_log&quot;  </div><div class="line">;显示局部变量  </div><div class="line">xdebug.show_local_vars = On  </div><div class="line">xdebug.profiler_enable = On  </div><div class="line">;设定效能监测信息输出文件的路径。</div><div class="line">;xdebug.profiler_output_dir =&quot;/home/xdebug_log&quot;  </div><div class="line">xdebug.trace_enable_trigger =On</div></pre></td></tr></table></figure>
<p>注：xdebug是一个zend扩展，所以要用zend_extension来加载，不能使用extensions来加载</p>
<p>运行<code>php -m</code>查看xdebug模块是否已经加载</p>
<h3 id="其他配置选项说明："><a href="#其他配置选项说明：" class="headerlink" title="其他配置选项说明："></a>其他配置选项说明：</h3><h4 id="日志"><a href="#日志" class="headerlink" title="日志"></a>日志</h4><p>xdebug.trace_output_dir</p>
<blockquote>
<p>日志追踪输出目录</p>
<p>类型：字符串，默认值：/tmp</p>
<p>确保php运行用户对该目录有写权限</p>
</blockquote>
<p>xdebug.trace_output_name</p>
<blockquote>
<p>日志文件名，xdebug提供了一系列的标识符，生成相应格式的文件名</p>
<p>类型: string, 默认值: trace.%c</p>
<p>此设置确定用于将跟踪转储到的文件的名称。 设置使用格式说明符指定格式，非常类似于sprintf（）和strftime（）。 有几个格式说明符可以用于格式化文件名。 “.xt”扩展名总是自动添加。</p>
</blockquote>
<p>可能的格式说明符是：</p>
<table>
<thead>
<tr>
<th>说明</th>
<th>含义</th>
<th>示例</th>
<th>对应文件名</th>
</tr>
</thead>
<tbody>
<tr>
<td>%c</td>
<td>crc32 of the current working directory</td>
<td>trace.%c</td>
<td>trace.1258863198.xt</td>
</tr>
<tr>
<td>%p</td>
<td>pid</td>
<td>trace.%p</td>
<td>trace.5174.xt</td>
</tr>
<tr>
<td>%r</td>
<td>random number</td>
<td>trace.%r</td>
<td>trace.072db0.xt</td>
</tr>
<tr>
<td>%s</td>
<td>script name</td>
<td>cachegrind.out.%s</td>
<td>cachegrind.out._home_httpd_html_test_xdebug_test_php</td>
</tr>
<tr>
<td>%t</td>
<td>timestamp (seconds)</td>
<td>trace.%t</td>
<td>trace.1179434742.xt</td>
</tr>
<tr>
<td>%u</td>
<td>timestamp (microseconds)</td>
<td>trace.%u</td>
<td>trace.1179434749_642382.xt</td>
</tr>
<tr>
<td>%H</td>
<td>$_SERVER[‘HTTP_HOST’]</td>
<td>trace.%H</td>
<td>trace.kossu.xt</td>
</tr>
<tr>
<td>%R</td>
<td>$_SERVER[‘REQUEST_URI’]</td>
<td>trace.%R</td>
<td>trace._test_xdebug_test_php_var=1_var2=2.xt</td>
</tr>
<tr>
<td>%U</td>
<td>$_SERVER[‘UNIQUE_ID’] 3</td>
<td>trace.%U</td>
<td>trace.TRX4n38AAAEAAB9gBFkAAAAB.xt</td>
</tr>
<tr>
<td>%S</td>
<td>session_id (from $_COOKIE if set)</td>
<td>trace.%S</td>
<td>trace.c70c1ec2375af58f74b390bbdd2a679d.xt</td>
</tr>
<tr>
<td>%%</td>
<td>literal %</td>
<td>trace.%%</td>
<td>trace.%%.xt</td>
</tr>
</tbody>
</table>
<p>xdebug.trace_options</p>
<blockquote>
<p>记录添加到文件中方式：</p>
<p>类型：整数，默认值：0</p>
<p>当设置为’1’时，跟踪文件将被附加到，而不是在后续请求中被覆盖。</p>
</blockquote>
<h4 id="显示数据"><a href="#显示数据" class="headerlink" title="显示数据"></a>显示数据</h4><p>xdebug.collect_params</p>
<blockquote>
<p>类型：整数，默认值：0</p>
<p>此设置默认为0，控制function的参数显示选项</p>
<ul>
<li>0    不显示.</li>
<li>1    参数类型，值  (例如：array(9))</li>
<li>2    同上1，只是在CLI模式下略微有区别</li>
<li>3    所有变量内容</li>
<li>4    所有变量内容和变量名(例如：array(0 =&gt; 9))</li>
<li>5    PHP序列化变量内容，没有名称。 （Xdebug 2.3中的新功能）</li>
</ul>
</blockquote>
<p>xdebug.collect_return</p>
<blockquote>
<p>类型：布尔值，默认值：0</p>
<p>此设置默认为0，控制Xdebug是否应将函数调用的返回值写入跟踪文件。</p>
<p>对于计算机化的跟踪文件（xdebug.trace_format = 1），这只能从Xdebug 2.3起。</p>
</blockquote>
<p>xdebug.collect_vars</p>
<blockquote>
<p>类型：布尔值，默认值：0</p>
<p>此设置告诉Xdebug收集有关在某个范围中使用哪些变量的信息。 这个分析可能很慢，因为Xdebug必须逆向工程PHP的操作码数组。 此设置不会记录不同变量具有的值，因为使用xdebug.collect_params。 仅当您希望使用xdebug_get_declared_vars（）时，才需要启用此设置。</p>
<p>显示当前作用域使用了哪些变量，显示变量名，该选项不会记录变量的值，如果需要，使用xdebug.collect_params</p>
</blockquote>
<p>xdebug.collect_assignments</p>
<blockquote>
<p>类型：boolean，默认值：0，在Xdebug&gt; 2.1中引入</p>
<p>此设置（默认为0）控制Xdebug是否应向函数轨迹添加变量分配。</p>
<p>1 = 添加一行显示变量赋值（若为1，形如$a = 1;这类Assignment Expression会在trace文件里显示）</p>
</blockquote>
<h4 id="格式"><a href="#格式" class="headerlink" title="格式"></a>格式</h4><p>xdebug.trace_format</p>
<blockquote>
<p>类型：整数，默认值：0</p>
<ul>
<li>0 = 人可读. 从左至右每列分别表示：时间点, 内存, 内存差 (需要设置xdebug.show_mem_delta=1), 等级, 函数名,函数参数 (需要设置，xdebug.collect_params=1，只要是非零), 当前代码行所在文件名 , 行号;</li>
<li>1 = 机器可读[1]. 需要借助第三方app，例如：xdebug trace file parser 或者 xdebug trace viewer; 2 = html格式 即table，用browser打开，显示table</li>
</ul>
</blockquote>
<p>xdebug.show_mem_delta</p>
<blockquote>
<p>类型：整数，默认值：0</p>
<p>当这个设置设置为某些！= 0 Xdebug的人类可读的生成的跟踪文件将显示在函数调用之间的内存使用的差异。 如果Xdebug配置为生成计算机可读的跟踪文件，则它们将始终显示此信息。</p>
<ul>
<li>1 = 显示每次函数调用内存消耗（内存差）</li>
</ul>
</blockquote>
<h4 id="行为"><a href="#行为" class="headerlink" title="行为"></a>行为</h4><p>xdebug.auto_trace</p>
<blockquote>
<p>类型：布尔值，默认值：0</p>
<p>当此设置设置为on时，将在脚本运行之前启用函数调用的跟踪。 这使得可以跟踪auto_prepend_file中的代码。</p>
<p>1 = 打开自动追踪. （追踪方式有2种，一种是自动追踪，所有php脚本运行时，都会产生trace文件；另一种是触发方式追踪，如下）</p>
</blockquote>
<p>xdebug.trace_enable_trigger[2]</p>
<blockquote>
<p>类型：boolean，默认值：0，在Xdebug&gt; 2.2中引入</p>
<p>当此设置设置为1时，可以使用XDEBUG_TRACE GET / POST参数触发跟踪，或者设置名为XDEBUG_TRACE的cookie。 然后将跟踪数据写入定义的目录。 为了防止Xdebug为每个请求生成跟踪文件，您需要将xdebug.auto_trace设置为0.对触发器本身的访问可以通过xdebug.trace_enable_trigger_value配置。</p>
<p>1 = 使用 XDEBUG_TRACE GET/POST 触发追踪, 或者通过设置cookie XDEBUG_TRACE. 为了避免每次请求时，都会生成相应trace追踪文件，你需要把auto_trace设置为0</p>
<p>注：该特性只在2.2+版本才能设置<br>[xdebug-general] Re: Is trace_enable_trigger defunct?</p>
</blockquote>
<h4 id="限制"><a href="#限制" class="headerlink" title="限制"></a>限制</h4><p>xdebug.var_display_max_depth</p>
<blockquote>
<p>类型：整数，默认值：3</p>
<p>当使用xdebug_var_dump（），xdebug.show_local_vars或通过函数跟踪显示变量时，控制数组元素和对象属性的嵌套级别数。</p>
<p>您可以选择的最大值为1023.您还可以使用-1作为值来选择此最大数。</p>
<p>此设置对通过远程调试功能发送到客户端的子项数没有任何影响。</p>
<p>数组和对象元素显示深度：主要用在数组嵌套，对象属性嵌套时，显示几级的元素内容. Default 3.</p>
</blockquote>
<p>xdebug.var_display_max_data</p>
<blockquote>
<p>变量值为字符串时显示多长. Default 512.</p>
<p>类型：整数，默认值：512<br>控制使用xdebug_var_dump（），xdebug.show_local_vars或通过函数跟踪显示变量时显示的最大字符串长度。</p>
<p>要禁用任何限制，请使用-1作为值。</p>
<p>此设置对通过远程调试功能发送到客户端的子项数没有任何影响。</p>
</blockquote>
<p>xdebug.var_display_max_children</p>
<blockquote>
<p>数组和对象元素显示的个数. Default 128</p>
<p>类型：整数，默认值：128<br>控制使用xdebug_var_dump（），xdebug.show_local_vars或通过函数跟踪显示变量时显示的数组子元素和对象的属性的数量。</p>
<p>要禁用任何限制，请使用-1作为值。</p>
<p>此设置对通过远程调试功能发送到客户端的子项数没有任何影响。</p>
</blockquote>
<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>一些常用到的xdebug函数</p>
<table>
<thead>
<tr>
<th>Function</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>void xdebug_enable()</td>
<td>手动打开，相当于xdebug.default_enable=on</td>
</tr>
<tr>
<td>void var_dump()</td>
<td>覆写php提供的var_dump，出错时，显示函数堆栈信息，（前提：php.ini里html_errors为1），使用xdebug.overload_var_dump 设置是否覆写</td>
</tr>
<tr>
<td>void xdebug_start_trace( string trace_file_path [, integer options] )</td>
<td>手动控制需要追踪的代码段 trace_file_path ：文件路径（相对或绝对，若为空）.如果为空，或者不传参， 使用xdebug.trace_output_dir设置的目录options ：XDEBUG_TRACE_APPEND: 1 = 追加文件内容末尾, 0 = 覆写该文件 XDEBUG_TRACE_COMPUTERIZED:2 =同 xdebug.trace_format=1 .XDEBUG_TRACE_HTML: 4 = 输出HTML表格，浏览器打开为一table</td>
</tr>
<tr>
<td>void xdebug_stop_trace()</td>
<td>停止追踪，代码追踪在该行停止</td>
</tr>
<tr>
<td>string xdebug_get_tracefile_name()</td>
<td>获得输出文件名，与 xdebug.auto_trace配合使用.</td>
</tr>
<tr>
<td>void xdebug_var_dump([mixed var[,…]])</td>
<td>输出变量详细信息，相当于php里的var_dump，具体显示请看这里xdebug.show_local_vars     默认为0，不显示；非零时，在php执行出错时，显示出错代码所在作用域所有本地变量（注：这会产生大量信息，因此默认是closed），具体显示差别如下图[3]</td>
</tr>
<tr>
<td>array xdebug_get_declared_vars()</td>
<td>显示当前作用域中已声明的变量</td>
</tr>
<tr>
<td>array xdebug_get_code_coverage()</td>
<td>显示某一段代码内，代码执行到哪些行[4]</td>
</tr>
</tbody>
</table>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Xdebug是一个开放源代码的PHP程序调试器(即一个Debug工具)，可以用来跟踪，调试和分析PHP程序的运行状况。&lt;/p&gt;
    
    </summary>
    
      <category term="PHP" scheme="https://weizhimiao.github.io/categories/PHP/"/>
    
    
      <category term="Xdebug" scheme="https://weizhimiao.github.io/tags/Xdebug/"/>
    
  </entry>
  
  <entry>
    <title>apache上运行PHP的几种方式汇总</title>
    <link href="https://weizhimiao.github.io/2016/10/21/apache%E4%B8%8A%E8%BF%90%E8%A1%8CPHP%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E5%BC%8F%E6%B1%87%E6%80%BB/"/>
    <id>https://weizhimiao.github.io/2016/10/21/apache上运行PHP的几种方式汇总/</id>
    <published>2016-10-21T14:40:00.000Z</published>
    <updated>2016-10-21T15:01:13.000Z</updated>
    
    <content type="html"><![CDATA[<p>之前也有整理过一篇 「apache中PHP的几种支持模式」的blog，但是感觉还是比较混乱，很多问题没有理清楚，一些方式也没有整理到。所以今天通过这篇blog再整理一下。</p>
<ul>
<li><p>Using proxy_fcgi and php-fpm (for apache 2.4)</p>
</li>
<li><p>Using php with fastcgi (for 2.2 and older)</p>
</li>
<li><p>Using php with fcgid (for 2.2 and older)</p>
</li>
<li><p>Using mod_php as a DSO with a threaded mpm (2.0 and newer)</p>
</li>
<li><p>Using mod_php as a DSO (deprecated)</p>
</li>
</ul>
<a id="more"></a>
<h2 id="Using-proxy-fcgi-and-php-fpm-for-apache-2-4"><a href="#Using-proxy-fcgi-and-php-fpm-for-apache-2-4" class="headerlink" title="Using proxy_fcgi and php-fpm (for apache 2.4)"></a>Using proxy_fcgi and php-fpm (for apache 2.4)</h2><p>此方法优先于所有其他方案，适用于Apache 2.4及更高版本。 它还允许线程mpm，如event或worker，这将显著减少对服务器的RAM需求。</p>
<p>详情见<a href="https://weizhimiao.github.io/2016/10/20/High-performance%20PHP%20on%20apache%20httpd%202.4.x%20using%20mod_proxy_fcgi%20and%20php-fpm/">httpd 2.4.x上使用mod_proxy_fcgi和php-fpm实现高性能PHP</a></p>
<h2 id="Using-php-with-fastcgi-for-2-2-and-older"><a href="#Using-php-with-fastcgi-for-2-2-and-older" class="headerlink" title="Using php with fastcgi (for 2.2 and older)"></a>Using php with fastcgi (for 2.2 and older)</h2><p>此方法适用于2.2及更高版本。 它还允许线程mpm，如event或worker，这将显著减少对服务器的RAM需求。</p>
<p>本文的范围是讨论使用Apache httpd 2.2和php的可能配置。在大多数情况下使用mod_php不是一个可行的解决方案，因为它引入了对每个httpd进程增加的RAM需求的可扩展性问题。另外，此外，它排除了使用线程MPM，因为php扩展在许多情况下不是线程安全的。</p>
<p>理想的配置是轻线程httpd进程，与外部fastcgi服务器（如PHP-FPM）通信。</p>
<p>第一个使用mod_fastcgi的方案<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">Alias /php5.fcgi /var/www/fcgi/php5.fcgi</div><div class="line">FastCGIExternalServer /var/www/fcgi/php5.fcgi -flush -host 127.0.0.1:9000</div><div class="line"># 创建一个新的处理程序名称并将其用于PHP文件</div><div class="line">AddHandler my-fastcgi .php</div><div class="line">#  *.php的请求实际上作为参数馈送到php-fastcgi</div><div class="line">Action my-fastcgi /php5.fcgi</div><div class="line">&lt;Directory &quot;/var/www/fcgi/&quot;&gt;</div><div class="line">  Order deny,allow</div><div class="line">  Deny from all</div><div class="line">  &lt;Files &quot;php5.fcgi&quot;&gt;</div><div class="line">    Order allow,deny</div><div class="line">    Allow from all</div><div class="line">  &lt;/Files&gt;</div><div class="line">&lt;/Directory&gt;</div></pre></td></tr></table></figure></p>
<h2 id="Using-php-with-fcgid-for-2-2-and-older"><a href="#Using-php-with-fcgid-for-2-2-and-older" class="headerlink" title="Using php with fcgid (for 2.2 and older)"></a>Using php with fcgid (for 2.2 and older)</h2><p>此方法适用于2.0或2.2版本。 它允许线程mpm，如worker，这将显着减少您的服务器上的RAM要求。 而mod_fcgid是一个官方的Apache模块。</p>
<h3 id="Why"><a href="#Why" class="headerlink" title="Why ?"></a>Why ?</h3><ul>
<li>因为mod_php迫使你加载prefork MPM，这是低效的。</li>
<li>因为mod_php将被加载到httpd内存中，即使在服务静态页面</li>
<li>2013年发布的大多数发行版提供了预编译的包，让您可以使用fcgi运行php。 这只是一个配置问题。</li>
<li>mod_fcgid是一个官方Apache模块，可在 <a href="http://httpd.apache.org/mod_fcgid/" target="_blank" rel="external">http://httpd.apache.org/mod_fcgid/</a> 查看</li>
</ul>
<h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><ul>
<li>巨大的性能提升，在CPU和内存消耗</li>
<li>PHP运行在一个单独的进程</li>
</ul>
<h3 id="不在fcgid上运行php的情况"><a href="#不在fcgid上运行php的情况" class="headerlink" title="不在fcgid上运行php的情况"></a>不在fcgid上运行php的情况</h3><p>如果你运行httpd 2.4，你应该考虑<a href="http://wiki.apache.org/httpd/PHP-FPM" target="_blank" rel="external">PHP-FPM</a></p>
<h3 id="快速体验"><a href="#快速体验" class="headerlink" title="快速体验"></a>快速体验</h3><p>按照所有步骤，或许最终会丢失一些东西。</p>
<p>1、摆脱mod_php。 你需要从你的配置中注释掉“LoadModule php5_module”。<br>在debian上，只要运行“apt-get remove libapache2-mod-php5”</p>
<p>2、Install mod_fcgid<br>在 debian上, “apt-get install libapache2-mod-fcgid”</p>
<p>3、Install PHP as CGI<br>在 debian上, “apt-get install php5-cgi”</p>
<p>编写一个小封装包，例如：/usr/local/bin/php-wrapper<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">#!/bin/sh</div><div class="line"></div><div class="line"># Set desired PHP_FCGI_* environment variables.</div><div class="line"></div><div class="line"># Example:</div><div class="line"></div><div class="line"># PHP FastCGI processes exit after 1000 requests by default.</div><div class="line"></div><div class="line">PHP_FCGI_MAX_REQUESTS=1000</div><div class="line"></div><div class="line">export PHP_FCGI_MAX_REQUESTS</div><div class="line"></div><div class="line"># Replace with the path to your FastCGI-enabled PHP executable</div><div class="line"></div><div class="line">exec /usr/lib/cgi-bin/php5</div></pre></td></tr></table></figure></p>
<p>确保它是可读的和可执行的apache user/group.</p>
<p>5、修改配置 httpd.conf<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">LoadModule fcgid_module /usr/lib/apache2/modules/mod_fcgid.so</div><div class="line"></div><div class="line">AddHandler fcgid-script .php</div><div class="line"></div><div class="line">FcgidWrapper /usr/local/bin/php-wrapper .php</div></pre></td></tr></table></figure></p>
<p>6、用多线程MPM替换prefork MPM，例如worker。</p>
<p>在debian上，只需运行“apt-get install apache2-mpm-worker”</p>
<h3 id="常见问题-It-doesn’t-work"><a href="#常见问题-It-doesn’t-work" class="headerlink" title="常见问题/It doesn’t work"></a>常见问题/It doesn’t work</h3><p>不要惊慌。 检查apache错误日志。</p>
<p>PHP文件被下载，不解释<br>PHP files are downloaded, not interpreted</p>
<p>If you have a handler already set for PHP, it may be conflicting. So you can try something like : “grep -ri handler /etc/httpd | grep php” depending on the result, you may need to comment out some config you are having.</p>
<p>如果您已经为PHP设置了处理程序，则可能会发生冲突。 所以你可以尝试类似：“grep -ri handler /etc/httpd | grep php”根据结果，你可能需要注释掉一些存在配置。</p>
<h3 id="更多选项"><a href="#更多选项" class="headerlink" title="更多选项"></a>更多选项</h3><p>请参考： <a href="http://httpd.apache.org/mod_fcgid/mod/mod_fcgid.html#upgrade" target="_blank" rel="external">http://httpd.apache.org/mod_fcgid/mod/mod_fcgid.html#upgrade</a></p>
<h2 id="Using-mod-php-as-a-DSO-with-a-threaded-mpm-2-0-and-newer"><a href="#Using-mod-php-as-a-DSO-with-a-threaded-mpm-2-0-and-newer" class="headerlink" title="Using mod_php as a DSO with a threaded mpm (2.0 and newer)"></a>Using mod_php as a DSO with a threaded mpm (2.0 and newer)</h2><p>这种方法与下一个配方相同，只是可以使用event或worker等线程化的mpm。主要的要求是php系统库和DSO必须用线程安全标志（重新）编译。</p>
<p>如果使用apache httpd 2.0或更早版本，必须重新编译才能更改mpm。 对于2.4，加载适当的mpm模块后缀。</p>
<p>必须特别注意确保工作程序经常重启（MaxConnectionsPerChild&gt; 0），因为子进程仍然容易出现php内存泄漏，并且进程可能消耗大量RAM并耗尽可用的系统资源。</p>
<p>这可能是所有最少使用的方法，由于维护一个线程安全的php库是一件非常头痛的事，并且因为大多数linux发行版不发运这些包。</p>
<h2 id="Using-mod-php-as-a-DSO-deprecated"><a href="#Using-mod-php-as-a-DSO-deprecated" class="headerlink" title="Using mod_php as a DSO (deprecated)"></a>Using mod_php as a DSO (deprecated)</h2><p>此方法是最早和可能是最慢的配置。 它适合2.2版本和更旧，并要求使用prefork mpm。</p>
<h3 id="为什么你不应该使用mod-php与prefork-mpm了"><a href="#为什么你不应该使用mod-php与prefork-mpm了" class="headerlink" title="为什么你不应该使用mod_php与prefork mpm了"></a>为什么你不应该使用mod_php与prefork mpm了</h3><ul>
<li>mod_php始终加载到每个httpd进程中。 即使当httpd服务静态/非php内容。</li>
<li>mod_php不是线程安全的，并且迫使你坚持使用prefork mpm（多进程，没有线程），这可能是最慢的配置</li>
</ul>
<h3 id="如何使用"><a href="#如何使用" class="headerlink" title="如何使用"></a>如何使用</h3><p>首先，必须加载模块：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">LoadModule php5_module lib/httpd/modules/libphp5.so</div></pre></td></tr></table></figure></p>
<p>然后，添加dso的处理程序：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"># Then, configure the handler for all files that end with .php</div><div class="line"># A regexp such as \.(php|php4|php5)$ can also be used to support more extensions</div><div class="line">&lt;FilesMatch \.php$&gt;</div><div class="line">  SetHandler application/x-httpd-php</div><div class="line">&lt;/FilesMatch&gt;</div></pre></td></tr></table></figure>
<p>参考:</p>
<p><a href="http://www.php.net/manual/en/install.unix.apache2.php" target="_blank" rel="external">官方php安装和配置说明</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;之前也有整理过一篇 「apache中PHP的几种支持模式」的blog，但是感觉还是比较混乱，很多问题没有理清楚，一些方式也没有整理到。所以今天通过这篇blog再整理一下。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Using proxy_fcgi and php-fpm (for apache 2.4)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Using php with fastcgi (for 2.2 and older)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Using php with fcgid (for 2.2 and older)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Using mod_php as a DSO with a threaded mpm (2.0 and newer)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Using mod_php as a DSO (deprecated)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="Apache" scheme="https://weizhimiao.github.io/categories/Apache/"/>
    
    
  </entry>
  
  <entry>
    <title>httpd 2.4.x上使用mod_proxy_fcgi和php-fpm实现高性能PHP</title>
    <link href="https://weizhimiao.github.io/2016/10/20/High-performance%20PHP%20on%20apache%20httpd%202.4.x%20using%20mod_proxy_fcgi%20and%20php-fpm/"/>
    <id>https://weizhimiao.github.io/2016/10/20/High-performance PHP on apache httpd 2.4.x using mod_proxy_fcgi and php-fpm/</id>
    <published>2016-10-20T14:40:00.000Z</published>
    <updated>2016-10-21T03:14:14.000Z</updated>
    
    <content type="html"><![CDATA[<p>内容</p>
<ul>
<li>apache httpd 2.4.x上使用mod_proxy_fcgi和php-fpm实现高性能PHP<ul>
<li>php-fpm</li>
<li>apache httpd 2.4<ul>
<li>TCP套接字（IP和端口）方法</li>
<li>unix域套接字（UDS）方法</li>
<li>通过代理程序处理</li>
<li>先睹为快<ul>
<li>一个简单的例子</li>
<li>一个更灵活的例子</li>
</ul>
</li>
<li>性能和陷阱</li>
<li>警告</li>
</ul>
</li>
</ul>
</li>
</ul>
<a id="more"></a>
<p>apache httpd 2.4.x上使用mod_proxy_fcgi和php-fpm实现高性能PHP</p>
<p>随着apache httpd 2.4的发布，我们已经获得了一些非常整洁的功能关于apache和php：运行PHP作为一个fastCGI进程服务器的能力，并且这个fastCGI服务器可以直接从apache中通过一个专用的模块代理来实现 （mod_proxy_fcgi.）</p>
<blockquote>
<p>从2010年初的版本5.3.3开始，PHP已经将php-fpm fastCGI进程管理器合并到其代码库中，现在（从5.4.1开始）相当稳定。<br>php-fpm ， <a href="http://php-fpm.org/" target="_blank" rel="external">http://php-fpm.org/</a></p>
</blockquote>
<p>这意味着我们现在可以运行安全，快速和可靠的PHP代码，只给apache httpd和php.net版本使用; 没有更多的混乱像suphp、suexec 或者 mod_php。</p>
<h2 id="php-fpm"><a href="#php-fpm" class="headerlink" title="php-fpm"></a>php-fpm</h2><p>准备：</p>
<ul>
<li><p>安装软件包</p>
</li>
<li><p>编辑配置文件</p>
</li>
<li><p>控制服务守护程序。</p>
</li>
</ul>
<p>从5.3.3版本开始，PHP现在在源代码中包括fastCGI进程管理器（php-fpm）。<br>您的发行版或操作系统将其包含在库存PHP包中，或将其作为附加包提供;<br>我们可以通过向./configure选项添加“–enable-fpm”从源代码构建它。</p>
<p>这为我们提供了一个新的二进制文件，称为php-fpm，一个名为php-fpm.conf的默认配置文件安装在/ etc中。</p>
<p>此文件中的默认值是可以启动的，但请注意，你在本地安装的时候可能会有修改，其位置也可能会变。</p>
<p>在这个配置文件中，您可以创建任意数量的fastcgi“池”，这些池由它们侦听的IP和端口定义，就像apache虚拟主机一样。</p>
<p>每个池中最重要的设置是TCP套接字（IP和端口）或unix域套接字（UDS）php-fpm将监听接收fastCGI请求; 这是使用listen选项配置的。</p>
<p>默认池[www]，配置为listen 127.0.0.1:9000：它将只响应本地环回网络接口（localhost）上的请求，在TCP端口9000上。</p>
<p>另外，有趣的是 per-pool 的user和group选项，他们允许在指定的uid和gid下运行特定的fpm池。再见 suphp！</p>
<p>让我们使用默认值作为运行并启动php-fpm守护进程; 如果您的发行版使用提供的init脚本，请运行</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/etc/init.d/php-fpm start</div></pre></td></tr></table></figure>
<p>如果没有，请手动启动<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">php-fpm -y /path/to/php-fpm.conf -c /path/to/custom/php.ini</div></pre></td></tr></table></figure></p>
<p>如果你不提供php-fpm自己的php.ini文件，将使用全局php.ini。记住这一点，当你想要包括更多或更少的扩展比如CLI或CGI二进制使用，或需要改变一些其他值。</p>
<p>你可以使用php [admin]（flag | value）以同样的方式包含每个池的php.ini值，方法与以前在apache中为mod_php定义的一样。</p>
<p>有关所有可能的配置选项，请<a href="http://www.php.net/manual/en/install.fpm.configuration.php" target="_blank" rel="external">参阅fpm的官方PHP文档</a>。</p>
<p>更改php-fpm.conf的loging选项，方便我们查看错误信息<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">error_log /var/log/php-fpm.log</div></pre></td></tr></table></figure></p>
<p>如果不设置php-fpm日志文件，将按照php.ini中定义的方式记录错误。</p>
<blockquote>
<p>note:我们可以强制 php-fpm 重新加载它的配置文件，通过想php-fpm发送 SIGUSR2 信号。SIGUSR1将循环日志文件（完美的logrotate脚本！）一些实验很漫长</p>
</blockquote>
<p>注意：如果php-fpm在启动的时候没有出现报错，那么它就已经在监听端口等待连接了。</p>
<h2 id="apache-httpd-2-4"><a href="#apache-httpd-2-4" class="headerlink" title="apache httpd 2.4"></a>apache httpd 2.4</h2><p>准备：</p>
<ul>
<li><p>编辑httpd.conf</p>
</li>
<li><p>理解vhost上下文</p>
</li>
<li><p>理解URL到文件系统命名空间映射</p>
</li>
<li><p>控制apache httpd守护进程</p>
</li>
</ul>
<p>这个版本的apache httpd引入了两个值得注意的特性：一个新的代理模块专门用于fastCGI（mod_proxy_fcgi），并将 event MPM作为默认的apache进程管理器。</p>
<p>与以前版本的worker MPM一样，当使用非线程安全的第三方PHP扩展时，此MPM的线程模型会导致问题。</p>
<p>自从apache 2.2发布以来，这已经成为mod_php用户的一个祸根，实际上迫使他们将fastcgi解决方案拼凑在一起，或者使用更慢和内存饥饿的prefork MPM。</p>
<p>要使用PHP fastCGI进程管理器工作，我们将使用一个新模块mod_proxy_fcgi，该模块专用于与（可能是外部）fastCGI服务器通信。</p>
<p>确保您在httpd.conf中包含proxy_fcgi模块，以便我们可以使用其功能; 因为这需要基本代理模块，请确保两者都加载（取消注释）：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">LoadModule proxy_module modules/mod_proxy.so</div><div class="line">LoadModule proxy_fcgi_module modules/mod_proxy_fcgi.so</div></pre></td></tr></table></figure>
<p>现在，有不同的方法实际转发请求的.php文件到这个模块，从转发所有的请求（使用ProxyPass），到只转发非常特定，或者通过重写文件或模式（使用带有[P]标志的mod_rewrite）的方法。</p>
<p>我们选择介于复杂性和灵活性之间的方法（使用ProxyPassMatch），因为它允许您为特定vhost的所有PHP内容设置一个规则，但只会代理.php文件（或包含.php的urls）。</p>
<h3 id="TCP套接字（IP和端口）方法"><a href="#TCP套接字（IP和端口）方法" class="headerlink" title="TCP套接字（IP和端口）方法"></a>TCP套接字（IP和端口）方法</h3><p>编辑所选主机的配置，并向其中添加以下行：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">ProxyPassMatch ^/(.*\.php(/.*)?)$ fcgi://127.0.0.1:9000/path/to/your/documentroot/$1</div><div class="line">DirectoryIndex /index.php index.php</div></pre></td></tr></table></figure></p>
<p>说明：<br>ProxyPassMatch</p>
<blockquote>
<p>只有与指定的正则表达式模式匹配的代理内容; 在这种情况下：</p>
</blockquote>
<p>^/(.*.php(/.*)?)$</p>
<blockquote>
<p>从文档根开始，匹配以.php结尾的所有内容（使用点转义），可选地后跟一个斜杠和您喜欢的任何继续路径（一些应用程序使用这个所谓的PathInfo将参数传递给php脚本）。</p>
<p>^和$符号用于锚定URL的绝对开始和结束，以确保请求中的任何字符都不会转义我们的模式匹配。</p>
<p>嵌套括号使我们能够将整个请求URI（减去前导斜杠）引用为$ 1，同时仍然保持尾随pathinfo可选。</p>
</blockquote>
<p>fcgi://127.0.0.1:9000</p>
<blockquote>
<p>通过mod_proxy_fcgi，使用fastCGI协议，转发到我们的php-fpm守护程序正在侦听的端口。<br>这确定哪个fastcgi池将服务由此规则代理的请求。</p>
</blockquote>
<p>/path/to/your/documentroot/</p>
<blockquote>
<p><strong>重要！</strong>  这必须与您的php文件的真实文件系统位置完全匹配，因为这是php-fpm守护程序将查找它们的位置。<br>php-fpm只是解释传递给它的php文件; 它不是一个Web服务器，也不了解您的Web服务器的命名空间，虚拟主机布局或别名。</p>
<p><strong>重要！</strong>  请再看一遍以上内容</p>
</blockquote>
<p>$1</p>
<blockquote>
<p>从原始请求扩展到整个请求URI，减去前导斜杠（因为我们已经添加了上面的。）</p>
</blockquote>
<p>DirectoryIndex /index.php index.php</p>
<blockquote>
<p>对根目录/的请求，需要用默认索引文件映射到fcgi上。</p>
<p>没有解决这个问题可能导致一个空白响应，通常被称为WSOD（死亡白屏），特别是如果仅代理包含php扩展名的请求URI，如本示例。</p>
<p>处理流程将首先将针对/的请求映射到/index.php或相对于当前请求uri的任何其他index.php文件，然后正确地代理到PHP-FPM后端。</p>
</blockquote>
<h3 id="unix域套接字（UDS）方法"><a href="#unix域套接字（UDS）方法" class="headerlink" title="unix域套接字（UDS）方法"></a>unix域套接字（UDS）方法</h3><p>编辑所选主机的配置，并向其中添加以下行：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ProxyPassMatch ^/(.*\.php(/.*)?)$ unix:/path/to/socket.sock|fcgi://127.0.0.1:9000/path/to/your/documentroot/</div></pre></td></tr></table></figure>
<p>unix:/path/to/socket.sock</p>
<blockquote>
<p>您的fpm套接字的路径</p>
<p><strong>请注意</strong>，使用此方法，捕获的请求URI（$ 1）不会在路径之后传递</p>
</blockquote>
<h3 id="Proxy-via-handler-通过代理程序处理"><a href="#Proxy-via-handler-通过代理程序处理" class="headerlink" title="Proxy via handler(通过代理程序处理)"></a>Proxy via handler(通过代理程序处理)</h3><p>使用这种方法，您可以在代理到php-fpm后端之前检查资源的存在。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">＃定义工作器将提高性能</div><div class="line">＃在这种情况下，重新使用worker（依赖于fcgi应用程序的支持）</div><div class="line">＃如果你有足够的空闲工作，这只会略微提高性能</div><div class="line">&lt;Proxy &quot;fcgi://localhost:9000/&quot; enablereuse=on max=10&gt;</div><div class="line">&lt;/Proxy&gt;</div><div class="line">&lt;FilesMatch &quot;\.php$&quot;&gt;</div><div class="line">    # 选择以下方法之一</div><div class="line">    # 1、使用标准的TCP套接字</div><div class="line">    # SetHandler &quot;proxy:fcgi://localhost:9000&quot;</div><div class="line">    # 2、如果您的版本的httpd是2.4.9或更新版本（或具有后端功能），您可以使用unix域套接字</div><div class="line">    # SetHandler &quot;proxy:unix:/path/to/app.sock|fcgi://localhost:9000&quot;</div><div class="line">&lt;/FilesMatch&gt;</div></pre></td></tr></table></figure></p>
<h3 id="For-the-impatient"><a href="#For-the-impatient" class="headerlink" title="For the impatient"></a>For the impatient</h3><h4 id="Very-simple-example"><a href="#Very-simple-example" class="headerlink" title="Very simple example"></a>Very simple example</h4><p>首先, 创建一个文件/var/www/info.php 内容如下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;?php phpinfo() ?&gt;</div></pre></td></tr></table></figure></p>
<p>假设/ var / www是现有vhost的DocumentRoot。</p>
<p>在此vhost内，添加以下行：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ProxyPassMatch ^/info$ fcgi://127.0.0.1:9000/var/www/info.php</div></pre></td></tr></table></figure></p>
<p>使用apachectl优雅重新加载apache，您现在可以使用<a href="http://example.com/info调用phpinfo页面" target="_blank" rel="external">http://example.com/info调用phpinfo页面</a></p>
<p>这是一个非常简单的示例，将一个唯一的URL映射到单个PHP文件。</p>
<h4 id="A-more-flexible-example"><a href="#A-more-flexible-example" class="headerlink" title="A more flexible example"></a>A more flexible example</h4><p>要使用其真实的php文件位置将vhost中的所有.php文件代理到fcgi服务器，您可以使用更灵活的匹配：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ProxyPassMatch ^/(.*\.php)$ fcgi://127.0.0.1:9000/var/www/$1</div></pre></td></tr></table></figure></p>
<p>同样，假设/ var / www是所讨论的vhost的DocumentRoot.</p>
<p>Reload apache with apachectl graceful and you can now call up the phpinfo page using <a href="http://example.com/yourscript.php" target="_blank" rel="external">http://example.com/yourscript.php</a><br>使用apachectl优雅重新加载apache，您现在可以使用<a href="http://example.com/yourscript.php调用phpinfo页面" target="_blank" rel="external">http://example.com/yourscript.php调用phpinfo页面</a></p>
<h3 id="性能和陷阱"><a href="#性能和陷阱" class="headerlink" title="性能和陷阱"></a>性能和陷阱</h3><p>mod_proxy_fcgi现在支持unix域套接字自2.4.9（ [Unix域套接字支持mod_proxy_fcgi](<a href="https://issues.apache.org/bugzilla/show_bug.cgi?id=54101））" target="_blank" rel="external">https://issues.apache.org/bugzilla/show_bug.cgi?id=54101））</a></p>
<p>这是很容易占满你的系统的可用套接字，通过ulimits等等。一些提示，以避免这一点：</p>
<p>使用太多的套接字将导致apache给出一个（（(99)Cannot assign requested address:）的错误。 这意味着您的操作系统不允许创建新的套接字。</p>
<p>在linux上，可以使用/ proc / sys / net / ipv4 / tcp_tw_reuse 建立尽可能多的套接字，但是在NAT之后将会出现很多有关使用这些套接字的警告。</p>
<p>确保修改ulimit并允许apache用户和php-fpm用户都有足够的打开文件和进程。 ulimit -n 和 ulimit -u（nofile，最大文件打开数＆nproc，最大进程数）</p>
<p>如果php-fpm没有足够大的nproc（最大进程数），它将退出（代码255，没有php 5.3的附加信息），没有附加消息。</p>
<p>如果php-fpm没有足够大的nofile（最大文件打开数），你可能无法获得每个子进程的日志记录，如上所示。 它会在一般的错误日志中给出。</p>
<p>如果apache和php-fpm作为同一用户运行（不必要或不推荐），且nproc太小，apache将无法启动，并显示以下消息（11）Resource temporarily unavailable：AH02162：setuid: unable to change to uid: 600</p>
<p><strong>警告：</strong> 当ProxyPass向另一个服务器（在这种情况下，php-fpm守护程序）的请求，身份验证限制和放置在目录块或.htaccess文件中的其他配置可能被绕过。</p>
<h3 id="Caveats（警告）"><a href="#Caveats（警告）" class="headerlink" title="Caveats（警告）"></a>Caveats（警告）</h3><p>有人可能会指出，贪婪的ProxyPassMatch伪指令可能允许由HTTP客户端上传的某些恶意内容。</p>
<p>这不是一个全面的安全文件，而是将指出一个可能的注入向量，可以从本文档中的指令生成。</p>
<p>例如，<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/uploads/malicious.jpg/lalalaalala.php</div></pre></td></tr></table></figure></p>
<p>将导致php-fpm处理该文件（/uploads/malicious.jpg），并且没有某些健全性检查，可能导致被攻击的服务器。</p>
<p>这当然不推荐。 使用php上传的内容应该安全地保存在DocumentRoot之外，并且应该仔细检查pathinfo。</p>
<p>此外，php-fpm应检查是否允许调用脚本。</p>
<p>如果这样的限制不能容易地实现，则可以在用RewriteCond或FallbackResource在代理之前执行检查，以确保URI不被HTTP客户端改变。</p>
<p><a href="http://wiki.apache.org/httpd/PHP-FPM" target="_blank" rel="external">【原文】</a></p>
<p>over~</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;内容&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;apache httpd 2.4.x上使用mod_proxy_fcgi和php-fpm实现高性能PHP&lt;ul&gt;
&lt;li&gt;php-fpm&lt;/li&gt;
&lt;li&gt;apache httpd 2.4&lt;ul&gt;
&lt;li&gt;TCP套接字（IP和端口）方法&lt;/li&gt;
&lt;li&gt;unix域套接字（UDS）方法&lt;/li&gt;
&lt;li&gt;通过代理程序处理&lt;/li&gt;
&lt;li&gt;先睹为快&lt;ul&gt;
&lt;li&gt;一个简单的例子&lt;/li&gt;
&lt;li&gt;一个更灵活的例子&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;性能和陷阱&lt;/li&gt;
&lt;li&gt;警告&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="PHP" scheme="https://weizhimiao.github.io/categories/PHP/"/>
    
    
      <category term="PHP-FPM" scheme="https://weizhimiao.github.io/tags/PHP-FPM/"/>
    
      <category term="mod_proxy_fcgi" scheme="https://weizhimiao.github.io/tags/mod-proxy-fcgi/"/>
    
  </entry>
  
  <entry>
    <title>PHP常见设计模式之策略模式</title>
    <link href="https://weizhimiao.github.io/2016/10/19/PHP%E5%B8%B8%E8%A7%81%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F/"/>
    <id>https://weizhimiao.github.io/2016/10/19/PHP常见设计模式之策略模式/</id>
    <published>2016-10-19T14:40:00.000Z</published>
    <updated>2016-10-20T03:15:50.000Z</updated>
    
    <content type="html"><![CDATA[<p>策略模式允许类的使用者为这个类根据需要注入不同的依赖。通常情况下，这些依赖表现为对象、闭包或者回调方式，他们完成类所必要的要求以执行预期行为。</p>
<a id="more"></a>
<h2 id="UML设计"><a href="#UML设计" class="headerlink" title="UML设计"></a>UML设计</h2><p><img src="http://n.sinaimg.cn/games/3ece443e/20161020/CeLueMoShi-YiLaiZhuRu.png" alt="策略模式"></p>
<h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><p>对于每一个依赖，我们可以指定一个setter方法（添加一个getter方法更好），它将接收可以满足依赖要求的参数。</p>
<p>示例：使用策略设计模式实现一个日志类<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Log</span></span>&#123;</div><div class="line"></div><div class="line">  <span class="keyword">protected</span> $engine = <span class="keyword">false</span>;</div><div class="line"></div><div class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">add</span><span class="params">($logArr)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span>(!<span class="keyword">$this</span>-&gt;engine)&#123;</div><div class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="keyword">Exception</span>( <span class="string">"unable to write log. no engine set"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    $logArr[<span class="string">'datetime'</span>] = time();</div><div class="line">    <span class="keyword">$this</span>-&gt;engine-&gt;add($logArr);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">setEngine</span><span class="params">(Log_Engine_Interface $engin)</span></span>&#123;</div><div class="line">    <span class="keyword">$this</span>-&gt;engine = $engin;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getEngine</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;engine;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>现在我们用Log类，传入我们希望使用的任何一种数据存储引擎。</p>
<p>我们先定义一个接口或者抽象类，通过接口或者类的类型提示，确保每个驱动程序都符合要求。这里我们用接口来进行约束，使用add()给日志添加一个事件。<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Log_Engine_Interface</span></span>&#123;</div><div class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">add</span><span class="params">(array $LogData)</span></span>;</div><div class="line">&#125;</div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure></p>
<p>之后我们来定义一个引擎。</p>
<p>基于文件的存储引擎<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Log_Engine_File</span> <span class="keyword">implements</span> <span class="title">Log_Engine_Interface</span></span>&#123;</div><div class="line"></div><div class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">add</span><span class="params">(array $data)</span></span>&#123;</div><div class="line">    $line = json_encode($data).PHP_EOL;</div><div class="line"></div><div class="line">    $location = <span class="string">"/var/log/app_file_log.log"</span>;</div><div class="line">    <span class="keyword">if</span>(!file_put_contents($location, $line, FILE_APPEND))&#123;</div><div class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="keyword">Exception</span>( <span class="string">"an error occurred writing to file. "</span>);</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>接下来我们就可在程序中调用Log类：</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line">  $engine = <span class="keyword">new</span> Log_Engine_File();</div><div class="line"></div><div class="line">  $log = <span class="keyword">new</span> Log();</div><div class="line">  $log-&gt;setEngine($engine);</div><div class="line"></div><div class="line">  $logData = <span class="keyword">array</span>(</div><div class="line">    <span class="string">"user"</span> =&gt; <span class="string">"zhangsan"</span>,</div><div class="line">    <span class="string">"action"</span> =&gt; <span class="string">"spend"</span>,</div><div class="line">    <span class="string">"msg"</span> =&gt; <span class="string">"....."</span></div><div class="line">  );</div><div class="line">  $log-&gt;add($logData);</div></pre></td></tr></table></figure>
<p>当然我们可以还可以和注册表模式结合起来，使之更加方便我们使用。</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line">  $engine = <span class="keyword">new</span> Log_Engine_File();</div><div class="line"></div><div class="line">  $log = <span class="keyword">new</span> Log();</div><div class="line">  $log-&gt;setEngine($engine);</div><div class="line"></div><div class="line">  <span class="comment">//加入到注册表，方便我们随时使用</span></div><div class="line">  Register::add($log);</div></pre></td></tr></table></figure>
<p>策略模式的伟大之处在于它不像工厂模式，日志类无需知道每一个不同的存储引擎的相关具体内容。这就意味着任何使用日志类的开发者都可以添加他们自己的存储引擎，只需要相应的存储引擎符合接口就行。例如我们可以继续给日志类增加MySQL存储引擎、Memcache存储引擎等等。</p>
<p>over~</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;策略模式允许类的使用者为这个类根据需要注入不同的依赖。通常情况下，这些依赖表现为对象、闭包或者回调方式，他们完成类所必要的要求以执行预期行为。&lt;/p&gt;
    
    </summary>
    
      <category term="PHP" scheme="https://weizhimiao.github.io/categories/PHP/"/>
    
    
      <category term="设计模式" scheme="https://weizhimiao.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="策略模式" scheme="https://weizhimiao.github.io/tags/%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>PHP常见设计模式之观察者模式</title>
    <link href="https://weizhimiao.github.io/2016/10/18/PHP%E5%B8%B8%E8%A7%81%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F/"/>
    <id>https://weizhimiao.github.io/2016/10/18/PHP常见设计模式之观察者模式/</id>
    <published>2016-10-18T14:40:00.000Z</published>
    <updated>2016-10-18T14:37:53.000Z</updated>
    
    <content type="html"><![CDATA[<p>观察者模式类似于javascript的事件。其核心在于允许我们的应用程序注册一个回调，当某个特定的事件发生时便会触发它。在javascript中，这些事件由单机（onclick）、页面加载（onload）、或者鼠标移动（onmousevoer）等动作组成。</p>
<p>观察者设计模式能够是我们更便利地创建查看目标对象状态的对象，并且提供与核心对象非耦合的指定功能性。</p>
<p>观察者设计模式使用场景（插件系统、缓存系统）</p>
<ul>
<li>对一个对象状态的更新，需要其他对象同步更新，而且其他对象的数量动态可变。<br>-</li>
<li>对象仅需要将自己的更新通知给其他对象而不需要知道其他对象的细节。</li>
</ul>
<a id="more"></a>
<h3 id="UML设计"><a href="#UML设计" class="headerlink" title="UML设计"></a>UML设计</h3><p><img src="http://n.sinaimg.cn/games/3ece443e/20161018/GuanChaZheMoShi.png" alt="观察者模式"></p>
<p>说明：我们通过一个名为Event的类实现，这个类共有两个方法：</p>
<ul>
<li>registerCallBack（）,这个方法允许我们使用规定的名称附加许多回调到一个事件中。</li>
<li>trigger（）,这个方法将会触发刚才命名的事件，并调用该事件已注册的任何回调。</li>
</ul>
<h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><p>event.php<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Event</span></span>&#123;</div><div class="line"></div><div class="line">  <span class="keyword">static</span> <span class="keyword">protected</span> $callbacks = <span class="keyword">array</span>();</div><div class="line"></div><div class="line">  <span class="keyword">static</span> <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">registerCallBack</span><span class="params">($eventName， $callback)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span>(!is_callable($callback))&#123;</div><div class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="keyword">Exception</span>(<span class="string">"Invalid callback"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    $eventName = strtolower($eventName);</div><div class="line">    <span class="keyword">self</span>::$callbacks[$eventName][] = $callback；</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="keyword">static</span> <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">trigger</span><span class="params">($eventName, $data)</span></span>&#123;</div><div class="line">    $eventName = strtolower($eventName);</div><div class="line">    <span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="keyword">self</span>::$callbacks[$eventName]))&#123;</div><div class="line">      <span class="keyword">foreach</span>($self::$callbacks[$eventName] <span class="keyword">as</span> $callback )&#123;</div><div class="line">          <span class="comment">//回调可以是一个函数（包括匿名函数（闭包））、也可以是一个定义过__invoke()的对象</span></div><div class="line">          $callback($data);</div><div class="line">      &#125;</div><div class="line">    &#125;  </div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>回调事件注册后将会被保存到Event类的静态受保护的Event::$callbacks属性中，成为一个以事件名作为Key的多为数组。如下所示，<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"><span class="keyword">array</span>(</div><div class="line">  <span class="string">"eventName"</span> =&gt; <span class="keyword">array</span>(</div><div class="line">    <span class="string">"callback 1"</span>,</div><div class="line">    <span class="string">"callback 2"</span></div><div class="line">    ...</div><div class="line">    ),</div><div class="line">    ...</div><div class="line">  );</div></pre></td></tr></table></figure></p>
<p>当触发一个事件时，我们仅遍历事件的Event::$callbacks子数组，然后依次调用每个回调。</p>
<h3 id="使用示例"><a href="#使用示例" class="headerlink" title="使用示例"></a>使用示例</h3><p>1、先定义一个MyDataRecord类表示数据层的一部分。这个类有个save（）方法，我们在save（）方法中添加一个save事件，每当我们调用它时，就会触发一个save事件，<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyDataRecord</span></span>&#123;</div><div class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">save</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="comment">//保存操作...</span></div><div class="line"></div><div class="line">    <span class="comment">//触发 save 事件</span></div><div class="line">    Event::trigger(<span class="string">"save"</span>,<span class="keyword">array</span>(<span class="string">"Hello"</span>, <span class="string">"world"</span>));</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>2、接着我们创建回调，用事件名save通过Event::registerCallBack()来注册它。<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line">Event::registerCallBack(<span class="string">"save"</span>, <span class="function"><span class="keyword">function</span><span class="params">($data)</span></span>&#123;</div><div class="line">  <span class="keyword">echo</span> <span class="string">"Clear Cache"</span>.PHP_EOL;</div><div class="line">  var_dump($data);</div><div class="line">  &#125;);</div></pre></td></tr></table></figure></p>
<p>3、现在每当调用MyDataRecord-&gt;save();方法时，都将使回调生效。<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"><span class="comment">//实例化一个daterecord类</span></div><div class="line">$data = <span class="keyword">new</span> MyDataRecord();</div><div class="line">$data-&gt;save();</div></pre></td></tr></table></figure></p>
<p>运行结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">Clear Cache</div><div class="line">array(2)&#123;</div><div class="line">  [0] =&gt;</div><div class="line">  string(5) &quot;Hello&quot;</div><div class="line">  [1] =&gt;</div><div class="line">  string(5) &quot;world&quot;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="更多"><a href="#更多" class="headerlink" title="更多"></a>更多</h3><p>1、同一个事件我们可以注册多个回调，这些回调将会通过FIFO（先进先出）来调用。</p>
<p>2、回调可以是一个函数（包括匿名函数，又称闭包），也可以是定义过 <code>__invoke()</code> 魔术方法的对象。<code>__invoke()</code>方法的作用是当我们试图将当前的这个对象作为函数使用时，这个方法就会自动调用。</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"><span class="comment">//Logger callback</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">LogCallback</span></span>&#123;</div><div class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__invoke</span><span class="params">($data)</span></span>&#123;</div><div class="line">    <span class="keyword">echo</span> <span class="string">"Log Data"</span>.PHP_EOL;</div><div class="line">    var_dump($data);</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//注册 log callback</span></div><div class="line">Event::registerCallBack(<span class="string">"save"</span>, <span class="keyword">new</span> LogCallback());</div><div class="line"></div><div class="line"><span class="comment">//注册 clear cache callback</span></div><div class="line">Event::registerCallBack(<span class="string">"save"</span>, <span class="function"><span class="keyword">function</span><span class="params">($data)</span></span>&#123;</div><div class="line">  <span class="keyword">echo</span> <span class="string">"Clear cache"</span>.PHP_EOL;</div><div class="line">  var_dump($data);</div><div class="line">  &#125;);</div><div class="line"></div><div class="line"><span class="comment">//实例化一个 data record</span></div><div class="line">$data = <span class="keyword">new</span> MyDataRecord();</div><div class="line">$data-&gt;save();</div></pre></td></tr></table></figure>
<p>运行结果如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">Log Data</div><div class="line">array(2)&#123;</div><div class="line">  [0] =&gt;</div><div class="line">  string(5) &quot;Hello&quot;</div><div class="line">  [1] =&gt;</div><div class="line">  string(5) &quot;world&quot;</div><div class="line">&#125;</div><div class="line">Clear Cache</div><div class="line">array(2)&#123;</div><div class="line">  [0] =&gt;</div><div class="line">  string(5) &quot;Hello&quot;</div><div class="line">  [1] =&gt;</div><div class="line">  string(5) &quot;world&quot;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>over~</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;观察者模式类似于javascript的事件。其核心在于允许我们的应用程序注册一个回调，当某个特定的事件发生时便会触发它。在javascript中，这些事件由单机（onclick）、页面加载（onload）、或者鼠标移动（onmousevoer）等动作组成。&lt;/p&gt;
&lt;p&gt;观察者设计模式能够是我们更便利地创建查看目标对象状态的对象，并且提供与核心对象非耦合的指定功能性。&lt;/p&gt;
&lt;p&gt;观察者设计模式使用场景（插件系统、缓存系统）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;对一个对象状态的更新，需要其他对象同步更新，而且其他对象的数量动态可变。&lt;br&gt;-&lt;/li&gt;
&lt;li&gt;对象仅需要将自己的更新通知给其他对象而不需要知道其他对象的细节。&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="PHP" scheme="https://weizhimiao.github.io/categories/PHP/"/>
    
    
      <category term="设计模式" scheme="https://weizhimiao.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="观察者模式" scheme="https://weizhimiao.github.io/tags/%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
</feed>
