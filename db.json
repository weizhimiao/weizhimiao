{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":1,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/bower.json","path":"vendors/font-awesome/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/HELP-US-OUT.txt","path":"vendors/font-awesome/HELP-US-OUT.txt","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fastclick/bower.json","path":"vendors/fastclick/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fastclick/README.md","path":"vendors/fastclick/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fastclick/LICENSE","path":"vendors/fastclick/LICENSE","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/velocity/bower.json","path":"vendors/velocity/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/velocity/velocity.min.js","path":"vendors/velocity/velocity.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/jquery_lazyload/CONTRIBUTING.md","path":"vendors/jquery_lazyload/CONTRIBUTING.md","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/velocity/velocity.ui.min.js","path":"vendors/velocity/velocity.ui.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/velocity/velocity.ui.js","path":"vendors/velocity/velocity.ui.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/jquery_lazyload/README.md","path":"vendors/jquery_lazyload/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/jquery_lazyload/jquery.scrollstop.js","path":"vendors/jquery_lazyload/jquery.scrollstop.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/jquery_lazyload/jquery.lazyload.js","path":"vendors/jquery_lazyload/jquery.lazyload.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/jquery_lazyload/bower.json","path":"vendors/jquery_lazyload/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/jquery/index.js","path":"vendors/jquery/index.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/blank.gif","path":"vendors/fancybox/source/blank.gif","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_loading@2x.gif","path":"vendors/fancybox/source/fancybox_loading@2x.gif","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_loading.gif","path":"vendors/fancybox/source/fancybox_loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_overlay.png","path":"vendors/fancybox/source/fancybox_overlay.png","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_sprite.png","path":"vendors/fancybox/source/fancybox_sprite.png","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_sprite@2x.png","path":"vendors/fancybox/source/fancybox_sprite@2x.png","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.css","path":"vendors/fancybox/source/jquery.fancybox.css","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.pack.js","path":"vendors/fancybox/source/jquery.fancybox.pack.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.css","path":"vendors/font-awesome/css/font-awesome.css","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.js","path":"vendors/fancybox/source/jquery.fancybox.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.css.map","path":"vendors/font-awesome/css/font-awesome.css.map","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.min.css","path":"vendors/font-awesome/css/font-awesome.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.woff2","path":"vendors/font-awesome/fonts/fontawesome-webfont.woff2","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fastclick/lib/fastclick.min.js","path":"vendors/fastclick/lib/fastclick.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fastclick/lib/fastclick.js","path":"vendors/fastclick/lib/fastclick.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/ua-parser-js/dist/ua-parser.min.js","path":"vendors/ua-parser-js/dist/ua-parser.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/ua-parser-js/dist/ua-parser.pack.js","path":"vendors/ua-parser-js/dist/ua-parser.pack.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.woff","path":"vendors/font-awesome/fonts/fontawesome-webfont.woff","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/FontAwesome.otf","path":"vendors/font-awesome/fonts/FontAwesome.otf","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/velocity/velocity.js","path":"vendors/velocity/velocity.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.eot","path":"vendors/font-awesome/fonts/fontawesome-webfont.eot","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/fancybox_buttons.png","path":"vendors/fancybox/source/helpers/fancybox_buttons.png","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"vendors/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"vendors/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-media.js","path":"vendors/fancybox/source/helpers/jquery.fancybox-media.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"vendors/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"vendors/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.ttf","path":"vendors/font-awesome/fonts/fontawesome-webfont.ttf","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.svg","path":"vendors/font-awesome/fonts/fontawesome-webfont.svg","modified":1,"renderable":1}],"Cache":[{"_id":"source/.DS_Store","hash":"16ddf9107b93905f1c653ea7d6a2febf3ebe17d7","modified":1475591406000},{"_id":"source/_discarded/pache性能监控.md","hash":"5be179af8a652d56afd7963a14bafd1b6a93f5c0","modified":1472006021000},{"_id":"source/_posts/.DS_Store","hash":"34ed549b56f9ce4cb9ff35d9bf18740bcc9e6861","modified":1472783344000},{"_id":"source/_posts/Apache 虚拟主机配置.md","hash":"93b2e27e6c0eb637362d26f419e4a6c77d1a44eb","modified":1473175040000},{"_id":"source/_posts/Apache多处理模块整理.md","hash":"d35eb32c111695243ebd27ab4962b232e7692f63","modified":1472008592000},{"_id":"source/_posts/Apache 中PHP支持模式.md","hash":"c4ac7753439cb7ff3e359ba20b54bac5307ad745","modified":1474800852000},{"_id":"source/_posts/Apache分层与模块化结构体系小结.md","hash":"b30715868c1b96f765a04e64c023c009207a8cc2","modified":1472783159000},{"_id":"source/_posts/Apache性能监控.md","hash":"89088129d4f8b435728e83508fae2c4b9e848bcb","modified":1472008588000},{"_id":"source/_posts/Apache安装汇总.md","hash":"eac9cc36e40ab2a7fc408f8458a52ea634f033ab","modified":1472008590000},{"_id":"source/_posts/GIT使用小结.md","hash":"b8aa13f0a081eee5465457d101e2c7ca40fe8021","modified":1474641208000},{"_id":"source/_posts/ElasticSearch整理.md","hash":"f799d22eb2c9927e3f86fa8c9516dba50f1b5fbd","modified":1475752377000},{"_id":"source/_posts/LNMP环境安装与配置.md","hash":"9ba60ae869f3759f47f55edcedf73b2a01883dba","modified":1474895786000},{"_id":"source/_posts/Linux服务和进程管理.md","hash":"0fdd46c1e07d69f4028becb46560e7495037de58","modified":1475119066000},{"_id":"source/_posts/MVCC-多版本并发控制整理.md","hash":"dd34baf3e44e713c0fdc0fe42a3b8a57cfb7cf3f","modified":1474089475000},{"_id":"source/_posts/Mac下包管理工具homebrew.md","hash":"028b8aa4d7dccb499322d65563e7ad93e3aa97fb","modified":1474384158000},{"_id":"source/_posts/Memcached分布式部署算法整理.md","hash":"472f5531a8eb2f5f664e101f7e4d4f975f6a602d","modified":1475316308000},{"_id":"source/_posts/MySQL如何查看表的相关信息.md","hash":"fd1e9ac4c63bbe82d75bba15fbbf013502e16928","modified":1474101769000},{"_id":"source/_posts/MySQL存储引擎概述.md","hash":"0ac3865578ed91baecb74b1458435b48d267572f","modified":1474124798000},{"_id":"source/_posts/MySQL安装编译.md","hash":"2b005ba5a8b63a736f06469f876432c116b30a85","modified":1474800374000},{"_id":"source/_posts/MySQL的并发控制整理.md","hash":"5b0b05b81c6a316c2017f755bbc88a2dc9a8de72","modified":1474049195000},{"_id":"source/_posts/MySQL逻辑架构实现小结.md","hash":"15295a4488770d0ee5876325079071bcf8a0bd42","modified":1474015330000},{"_id":"source/_posts/Nginx服务器https配置.md","hash":"bdb88890372130c02da5fdeb1e1961eb6317c5b2","modified":1475591903000},{"_id":"source/_posts/Nginx虚拟主机设置.md","hash":"5c91492f3db543a9a0f2bcc52294aae6915188b9","modified":1475592419000},{"_id":"source/_posts/Nginx运行状态监控.md","hash":"3ee4a0c80ed26a3dec7f36c88550b3f65f5de1d1","modified":1474969305000},{"_id":"source/_posts/Nginx配置整理.md","hash":"0f33e6c98044b5fc61fd51746d9e2b3b98e99bb8","modified":1475577406000},{"_id":"source/_posts/PHP-FPM运行状态监控.md","hash":"75efda447b1ba32ae3e98add7fd0e7ef111093b0","modified":1474968558000},{"_id":"source/_posts/PHP安装.md","hash":"15b2205abf0b87b4c7b13463db27bbcb4d327ce7","modified":1474800228000},{"_id":"source/_posts/PHP异常和错误处理.md","hash":"1fb21e71e41fb6639ba06a0a7702b8f77f1fc44e","modified":1475248310000},{"_id":"source/_posts/PHP扩展模块安装.md","hash":"192a13a773f0bd54eb40f9183032fae81348a801","modified":1474895648000},{"_id":"source/_posts/Schema数据类型优化.md","hash":"8a2e25d3d946a6b6272b4b3b18e1606ff06c9ec1","modified":1474382105000},{"_id":"source/_posts/Web性能优化随笔.md","hash":"c75357731c504e07fe6f59072b796ad4c4ccdb81","modified":1472008582000},{"_id":"source/_posts/hexo常用命令.md","hash":"94359defa126ddf193d53ca5dc388da1b11e191c","modified":1472008586000},{"_id":"source/_posts/htaccess 文件功能及配置整理.md","hash":"3fe7cbe257d539ee28e16ddfc4108843170edd1f","modified":1473075868000},{"_id":"source/_posts/keepalived工作原理和配置.md","hash":"51a49b405facfa71d7a3f6f18c665e7c2a5ca42d","modified":1475650040000},{"_id":"source/_posts/事务的ACID概念.md","hash":"ce2887b874f4f929dc0287df09929a97af4bb418","modified":1474048475000},{"_id":"source/_posts/nginx安装.md","hash":"9a9b177bd577855fd2f757697ade2926f0709a95","modified":1474800365000},{"_id":"source/_posts/memcache高速缓存的工作原理及应用小结.md","hash":"70cb20c771630718f02acbb6ec0c31aaaa719cfa","modified":1475202741000},{"_id":"themes/next/.editorconfig","hash":"792fd2bd8174ece1a75d5fd24ab16594886f3a7f","modified":1469870571000},{"_id":"themes/next/.hound.yml","hash":"b76daa84c9ca3ad292c78412603370a367cc2bc3","modified":1469870571000},{"_id":"themes/next/.bowerrc","hash":"80e096fdc1cf912ee85dd9f7e6e77fd40cf60f10","modified":1469870571000},{"_id":"themes/next/.javascript_ignore","hash":"d619ee13031908cd72666e4ff652d2ea3483b1c3","modified":1469870571000},{"_id":"themes/next/.jshintrc","hash":"9928f81bd822f6a8d67fdbc909b517178533bca9","modified":1469870571000},{"_id":"themes/next/README.md","hash":"500b5606eb6a09c979d16128f8b00f4bf9bc95ac","modified":1469870571000},{"_id":"themes/next/README.en.md","hash":"565ba52b3825b85a9f05b41183caca7f18b741d4","modified":1469870571000},{"_id":"themes/next/.DS_Store","hash":"d20ca57e4f0f27c34d6b8971b93bc5c4c07e058e","modified":1469876190000},{"_id":"themes/next/bower.json","hash":"f89c6700a11d81e067cc97273ca6bf96cb88c8f9","modified":1469870571000},{"_id":"themes/next/gulpfile.coffee","hash":"26e5b1b945704c8bc78b928feede895c4c111c95","modified":1469870571000},{"_id":"themes/next/_config.yml","hash":"4487667478da9393b101cfcf4b9d5a25d09fa7d5","modified":1474944511000},{"_id":"themes/next/package.json","hash":"63e9c0f1dd9e5d7f51b4ae383981ef939a2ed45d","modified":1469870571000},{"_id":"source/categories/index.md","hash":"faba8865e7edc1ee1c1b66ccea5cb9155f5b28d4","modified":1469880791000},{"_id":"source/tags/index.md","hash":"d26fe7051c2d903c1e42b0b55d78dffcbf3a0fe5","modified":1469878207000},{"_id":"source/tags/.DS_Store","hash":"4b1737e2d95536850ac239b97c1d4b1deae9a602","modified":1469946221000},{"_id":"themes/next/languages/de.yml","hash":"786afba25cfc98845a20d9901823ebeebcd1cbbf","modified":1469870571000},{"_id":"themes/next/languages/default.yml","hash":"9db835c0543ade5a89bc80ec5a898203227cf3d8","modified":1469870571000},{"_id":"themes/next/languages/fr-FR.yml","hash":"1a084623c39de74301f3e92f9388a3a815a542ca","modified":1469870571000},{"_id":"themes/next/languages/en.yml","hash":"f03799cbdb5a33064ead080bcac4baca1f6bc5f9","modified":1469870571000},{"_id":"themes/next/languages/id.yml","hash":"147c01e41b931085ad14250fa900c2249dcbbdd7","modified":1469870571000},{"_id":"themes/next/languages/ja.yml","hash":"a2c7b6301b5474aab798946fb700289df237c3cf","modified":1469870571000},{"_id":"themes/next/languages/pt-BR.yml","hash":"462aa865ca3d479bcf6b363cba61247b50f230ff","modified":1469870571000},{"_id":"themes/next/languages/zh-Hans.yml","hash":"f9e4042aff0bd62d8db79ba223ee457f805a421a","modified":1469881272000},{"_id":"themes/next/languages/pt.yml","hash":"ca239b39bf65c9462e59d51b12f0fe566d453197","modified":1469870571000},{"_id":"themes/next/languages/ru.yml","hash":"cc7b964a46587aea0e57b0a5269d8fd25570858e","modified":1469870571000},{"_id":"themes/next/languages/zh-tw.yml","hash":"6b1f345aaefc13e6723dc8a6741b59ac05c20dfd","modified":1469870571000},{"_id":"themes/next/languages/zh-hk.yml","hash":"519ab3d817ec3bc5bfc91159c494b6b3c170bea7","modified":1469870571000},{"_id":"themes/next/layout/_layout.swig","hash":"1c5211988a5be32bf8137cde3340a5dc07ff6bc2","modified":1469876510000},{"_id":"themes/next/layout/.DS_Store","hash":"ffc8ac79028a89be495294a63ce07ae866b25b70","modified":1469876190000},{"_id":"themes/next/layout/archive.swig","hash":"b5b59d70fc1563f482fa07afd435752774ad5981","modified":1469870571000},{"_id":"themes/next/layout/category.swig","hash":"6422d196ceaff4220d54b8af770e7e957f3364ad","modified":1469870571000},{"_id":"themes/next/layout/index.swig","hash":"427d0b95b854e311ae363088ab39a393bf8fdc8b","modified":1469870571000},{"_id":"themes/next/scripts/merge-configs.js","hash":"0c56be2e85c694247cfa327ea6d627b99ca265e8","modified":1469870571000},{"_id":"themes/next/layout/page.swig","hash":"8019d02232a6dd1a665b6a4d2daef8e5dd2f0049","modified":1469870571000},{"_id":"themes/next/layout/post.swig","hash":"e2e512142961ddfe77eba29eaa88f4a2ee43ae18","modified":1469870571000},{"_id":"themes/next/layout/tag.swig","hash":"07cf49c49c39a14dfbe9ce8e7d7eea3d4d0a4911","modified":1469870571000},{"_id":"themes/next/test/intern.js","hash":"11fa8a4f5c3b4119a179ae0a2584c8187f907a73","modified":1469870571000},{"_id":"themes/next/test/helpers.js","hash":"a1f5de25154c3724ffc24a91ddc576cdbd60864f","modified":1469870571000},{"_id":"themes/next/test/.jshintrc","hash":"19f93d13d1689fe033c82eb2d5f3ce30b6543cc0","modified":1469870571000},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1469870571000},{"_id":"themes/next/layout/_macro/reward.swig","hash":"37e5b7c42ec17b9b6b786c5512bcc481a21c974e","modified":1469870571000},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"1a77843ce5eac62151dc3d38f0a36c43e19e1a74","modified":1469870571000},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"43c3433155ccd9abcbe7dce2e6bfa1f3a66af18b","modified":1469870571000},{"_id":"themes/next/layout/_macro/post.swig","hash":"a751b9eb51d01fa58b707804c1c29505da49c070","modified":1469876374000},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"14e785adeb0e671ba0ff9a553e6f0d8def6c670c","modified":1469870571000},{"_id":"themes/next/layout/_partials/comments.swig","hash":"b73f9443bee2d3ea383aad52e49ffca8aa97dcc2","modified":1469870571000},{"_id":"themes/next/layout/_partials/duoshuo-hot-articles.swig","hash":"5d4638c46aef65bf32a01681495b62416ccc98db","modified":1469870571000},{"_id":"themes/next/layout/_partials/footer.swig","hash":"d9e8b6e943802791a462406c39d76367838d0962","modified":1469881994000},{"_id":"themes/next/layout/_partials/header.swig","hash":"eb028685cb3c329537bbced06c063d23e6a33817","modified":1469870571000},{"_id":"themes/next/layout/_partials/head.swig","hash":"6b0c495b8154ef8b2d2cb0a554e164ff22cdc962","modified":1469870571000},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"9e8e21d194ef44d271b1cca0bc1448c14d7edf4f","modified":1469870571000},{"_id":"themes/next/layout/_partials/search.swig","hash":"011b9d6c9f0a2f4654908ea20b9391f9b7981271","modified":1469870571000},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"766b2bdda29523ed6cd8d7aa197f996022f8fd94","modified":1469870571000},{"_id":"themes/next/layout/_scripts/lean-analytics.swig","hash":"e8452daeaa226ceaedd8194bd569bbacc0a3c7fb","modified":1469876140000},{"_id":"themes/next/layout/_scripts/baidu-push.swig","hash":"82d060fe055d6e423bbc9199f82dfe5c68e74779","modified":1469870571000},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"03aaebe9d50f6acb007ec38cc04acd1cfceb404d","modified":1469870571000},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"0b91cadecead8e0b5211cc42b085998d94af503a","modified":1469870571000},{"_id":"themes/next/layout/_scripts/.DS_Store","hash":"f2c28a00064c2ac6d05639262e0a240ff22b746a","modified":1469876197000},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"535fc542781021c4326dec24d8495cbb1387634a","modified":1469870571000},{"_id":"themes/next/scripts/tags/full-image.js","hash":"3acce36db0feb11a982c6c799aa6b6b47df2827c","modified":1469870571000},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"49252824cd53184dc9b97b2f2d87ff28e1b3ef27","modified":1469870571000},{"_id":"themes/next/source/css/main.styl","hash":"20702c48d6053c92c5bcdbc68e8d0ef1369848a0","modified":1469870571000},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1469870571000},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1469870571000},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1469870571000},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1469870571000},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1469870571000},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1469870571000},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1469870571000},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1469870571000},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1469870571000},{"_id":"themes/next/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1469870571000},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1469870571000},{"_id":"themes/next/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1469870571000},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1469870571000},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1469870571000},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1469870571000},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1469870571000},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1469870571000},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1469870571000},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1469870571000},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1469870571000},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"7ce76358411184482bb0934e70037949dd0da8ca","modified":1469870571000},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"ff5523d5dacaa77a55a24e50e6e6530c3b98bfad","modified":1469870571000},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"eefe2388ff3d424694045eda21346989b123977c","modified":1469870571000},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"959b7e04a96a5596056e4009b73b6489c117597e","modified":1469870571000},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"c07f7b2f264e5215b8ed42d67e8cef2477558364","modified":1469870571000},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"7ca5cb4daa58b3504e17f3e02975e794bc634658","modified":1469870571000},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"63315fcf210799f894208c9f512737096df84962","modified":1469870571000},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"89c5a5240ecb223acfe1d12377df5562a943fd5d","modified":1469870571000},{"_id":"themes/next/layout/_scripts/third-party/analytics.swig","hash":"0a89c04055bade7baa5962f1d5aefe438d83a244","modified":1469870571000},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1469870571000},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"069d1357c717572256e5cdee09574ebce529cbae","modified":1469870571000},{"_id":"themes/next/layout/_scripts/third-party/comments.swig","hash":"907b931d775d32405d02a25b3b0a3ac03bf804d0","modified":1469870571000},{"_id":"themes/next/layout/_scripts/third-party/lean-analytics.swig","hash":"92dc60821307fc9769bea9b2d60adaeb798342af","modified":1469870571000},{"_id":"themes/next/layout/_scripts/third-party/localsearch.swig","hash":"7f7148c8f52e4d3cfc070d964160362179fa8e91","modified":1469870571000},{"_id":"themes/next/layout/_scripts/third-party/tinysou.swig","hash":"cb3a5d36dbe1630bab84e03a52733a46df7c219b","modified":1469870571000},{"_id":"themes/next/layout/_scripts/third-party/mathjax.swig","hash":"5bafc33f57508d1d04a9930165240f6e9efa8d6d","modified":1469870571000},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"328d9a9696cc2ccf59c67d3c26000d569f46344c","modified":1469870571000},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"715d5b40dc52f319fe4bff0325beb874774d9bd9","modified":1469870571000},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"78a83c38f69a8747bb74e420e6c9eeef1ea76525","modified":1469870571000},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"c8d35a6b9e3bff6d8fdb66de853065af9d37562d","modified":1469870571000},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"3ead77befa064d6327dc7afd0a5af7be59a5f196","modified":1469870571000},{"_id":"themes/next/source/vendors/fancybox/.bower.json","hash":"cc40a9b11e52348e554c84e4a5c058056f6b7aeb","modified":1469870571000},{"_id":"themes/next/source/css/_variables/base.styl","hash":"17624186f7a1f28daddea258d044f8e03b2f4bea","modified":1469870571000},{"_id":"themes/next/source/vendors/fancybox/.gitattributes","hash":"2db21acfbd457452462f71cc4048a943ee61b8e0","modified":1469870571000},{"_id":"themes/next/source/vendors/font-awesome/.bower.json","hash":"7da985a99674e54f514d4fd9fcd3bcea6e7e41d5","modified":1469870571000},{"_id":"themes/next/source/vendors/font-awesome/.gitignore","hash":"69d152fa46b517141ec3b1114dd6134724494d83","modified":1469870571000},{"_id":"themes/next/source/vendors/font-awesome/bower.json","hash":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1469870571000},{"_id":"themes/next/source/vendors/font-awesome/HELP-US-OUT.txt","hash":"69a4c537d167b68a0ccf1c6febd138aeffca60d6","modified":1469870571000},{"_id":"themes/next/source/vendors/font-awesome/.npmignore","hash":"dcf470ab3a358103bb896a539cc03caeda10fa8b","modified":1469870571000},{"_id":"themes/next/source/vendors/fastclick/bower.json","hash":"13379463c7463b4b96d13556b46faa4cc38d81e6","modified":1469870571000},{"_id":"themes/next/source/vendors/fastclick/.bower.json","hash":"93ebd5b35e632f714dcf1753e1f6db77ec74449b","modified":1469870571000},{"_id":"themes/next/source/vendors/fastclick/README.md","hash":"1decd8e1adad2cd6db0ab50cf56de6035156f4ea","modified":1469870571000},{"_id":"themes/next/source/vendors/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1469870571000},{"_id":"themes/next/source/vendors/jquery/.bower.json","hash":"91745c2cc6c946c7275f952b2b0760b880cea69e","modified":1469870571000},{"_id":"themes/next/source/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1469870571000},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1469870571000},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"39bf93769d9080fa01a9a875183b43198f79bc19","modified":1469870571000},{"_id":"themes/next/source/js/src/post-details.js","hash":"2038f54e289b6da5def09689e69f623187147be5","modified":1469870571000},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1469870571000},{"_id":"themes/next/source/js/src/motion.js","hash":"269414e84df544a4ccb88519f6abae4943db3c67","modified":1469870571000},{"_id":"themes/next/source/js/src/utils.js","hash":"e5cb720894c4bc28ca8f10b33df127fb394018d9","modified":1469870571000},{"_id":"themes/next/source/vendors/velocity/.bower.json","hash":"05f960846f1c7a93dab1d3f9a1121e86812e8c88","modified":1469870571000},{"_id":"themes/next/source/vendors/velocity/bower.json","hash":"2ec99573e84c7117368beccb9e94b6bf35d2db03","modified":1469870571000},{"_id":"themes/next/source/vendors/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1469870571000},{"_id":"themes/next/source/vendors/jquery_lazyload/.bower.json","hash":"b7638afc93e9cd350d0783565ee9a7da6805ad8e","modified":1469870571000},{"_id":"themes/next/source/vendors/jquery_lazyload/CONTRIBUTING.md","hash":"4891864c24c28efecd81a6a8d3f261145190f901","modified":1469870571000},{"_id":"themes/next/source/vendors/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1469870571000},{"_id":"themes/next/source/vendors/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1469870571000},{"_id":"themes/next/source/vendors/jquery_lazyload/README.md","hash":"895d50fa29759af7835256522e9dd7dac597765c","modified":1469870571000},{"_id":"themes/next/source/vendors/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1469870571000},{"_id":"themes/next/source/vendors/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1469870571000},{"_id":"themes/next/source/vendors/jquery_lazyload/bower.json","hash":"65bc85d12197e71c40a55c0cd7f6823995a05222","modified":1469870571000},{"_id":"themes/next/source/vendors/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1469870571000},{"_id":"themes/next/layout/_scripts/third-party/analytics/busuanzi-counter.swig","hash":"4fcbf57c4918528ab51d3d042cff92cf5aefb599","modified":1469870571000},{"_id":"themes/next/layout/_scripts/third-party/comments/duoshuo.swig","hash":"696666141cdd204fd8818ac2ad18f05e320f8587","modified":1469870571000},{"_id":"themes/next/layout/_scripts/third-party/analytics/baidu-analytics.swig","hash":"7c43d66da93cde65b473a7d6db2a86f9a42647d6","modified":1469870571000},{"_id":"themes/next/layout/_scripts/third-party/comments/disqus.swig","hash":"bff3b18f56175c53f3bc6d733166c4d998e08732","modified":1469870571000},{"_id":"themes/next/layout/_scripts/third-party/analytics/cnzz-analytics.swig","hash":"f9c6ee91c2a615edd8ca26edcc8a66b71883c238","modified":1469870571000},{"_id":"themes/next/layout/_scripts/third-party/analytics/tencent-analytics.swig","hash":"3658414379e0e8a34c45c40feadc3edc8dc55f88","modified":1469870571000},{"_id":"themes/next/layout/_scripts/third-party/analytics/facebook-sdk.swig","hash":"394d008e5e94575280407ad8a1607a028026cbc3","modified":1469870571000},{"_id":"themes/next/layout/_scripts/third-party/analytics/google-analytics.swig","hash":"30a23fa7e816496fdec0e932aa42e2d13098a9c2","modified":1469870571000},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"b49efc66bd055a2d0be7deabfcb02ee72a9a28c8","modified":1469870571000},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"471f1627891aca5c0e1973e09fbcb01e1510d193","modified":1469870571000},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"0dfb4b3ba3180d7285e66f270e1d3fa0f132c3d2","modified":1469870571000},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"10994990d6e0b4d965a728a22cf7f6ee29cae9f6","modified":1469870571000},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"013619c472c7e4b08311c464fcbe9fcf5edde603","modified":1469870571000},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"dd8a3b22fc2f222ac6e6c05bd8a773fb039169c0","modified":1469870571000},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"711c8830886619d4f4a0598b0cde5499dce50c62","modified":1469870571000},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"ece571f38180febaf02ace8187ead8318a300ea7","modified":1469870571000},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"5304f99581da3a31de3ecec959b7adf9002fde83","modified":1469870571000},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"64f5d56c08d74a338813df1265580ca0cbf0190b","modified":1469870571000},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"54c90cf7bdbf5c596179d8dae6e671bad1292662","modified":1469870571000},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"2186be20e317505cd31886f1291429cc21f76703","modified":1469870571000},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"8829bc556ca38bfec4add4f15a2f028092ac6d46","modified":1469870571000},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"c2c6c4f6434b4f94aac2af5861cd769427f0ee10","modified":1469870571000},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"a0e2030a606c934fb2c5c7373aaae04a1caac4c5","modified":1469870571000},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1469870571000},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"c2d079788d6fc2e9a191ccdae94e50d55bf849dc","modified":1469870571000},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"38e5df90c8689a71c978fd83ba74af3d4e4e5386","modified":1469870571000},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"6ed60cc621bac096c0ed7534fa25b1a52dc571d4","modified":1469870571000},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"b0dcca862cd0cc6e732e33d975b476d744911742","modified":1469870571000},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1469870571000},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"5ae7906dc7c1d9468c7f4b4a6feddddc555797a1","modified":1469870571000},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9a5581a770af8964064fef7afd3e16963e45547f","modified":1469870571000},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"4303776991ef28f5742ca51c7dffe6f12f0acf34","modified":1469870571000},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"be22ad34f546a07f6d56b424338cdd898683eea4","modified":1469870571000},{"_id":"themes/next/source/css/_schemes/Pisces/_full-image.styl","hash":"938d39eedc6e3d33918c1145a5bf1e79991d3fcf","modified":1469870571000},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"8d7cecde4933900c7df2db9d0a98f5f82f88dc93","modified":1469870571000},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"d09280e5b79f3b573edb30f30c7a5f03ac640986","modified":1469870571000},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"1b10ba2d3ad0c063c418dc94a0b7e0db4b342c53","modified":1469870571000},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"2f878213cb24c5ddc18877f6d15ec5c5f57745ac","modified":1469870571000},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"d4b7bd610ca03dbb2f5b66631c0e84a79fb4660b","modified":1469870571000},{"_id":"themes/next/source/vendors/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1469870571000},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1469870571000},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1469870571000},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1469870571000},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1469870571000},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1469870571000},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1469870571000},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1469870571000},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.css","hash":"3b87c2560832748cd06f9bfd2fd6ea8edbdae8c7","modified":1469870571000},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1469870571000},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1469870571000},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.min.css","hash":"05ea25bc9b3ac48993e1fee322d3bc94b49a6e22","modified":1469870571000},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.woff2","hash":"574ea2698c03ae9477db2ea3baf460ee32f1a7ea","modified":1469870571000},{"_id":"themes/next/source/vendors/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1469870571000},{"_id":"themes/next/source/vendors/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1469870571000},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"7506e7490c69a200831393c38d25e91c156bd471","modified":1469870571000},{"_id":"themes/next/source/vendors/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1469870571000},{"_id":"themes/next/source/vendors/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1469870571000},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.woff","hash":"507970402e328b2baeb05bde73bf9ded4e2c3a2d","modified":1469870571000},{"_id":"themes/next/source/vendors/font-awesome/fonts/FontAwesome.otf","hash":"0112e96f327d413938d37c1693806f468ffdbace","modified":1469870571000},{"_id":"themes/next/source/vendors/velocity/velocity.js","hash":"e63dc7cea055ca60a95d286f32349d88b10c5a4d","modified":1469870571000},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.eot","hash":"b3c2f08e73320135b69c23a3908b87a12053a2f6","modified":1469870571000},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"8994ffcce84deac0471532f270f97c44fea54dc0","modified":1469870571000},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d27448f199fc2f9980b601bc22b87f08b5d64dd1","modified":1469870571000},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"ae1ca14e51de67b07dba8f61ec79ee0e2e344574","modified":1469870571000},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"c890ce7fe933abad7baf39764a01894924854e92","modified":1469870571000},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"7778920dd105fa4de3a7ab206eeba30b1a7bac45","modified":1469870571000},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"90f8f9706cd7fe829cf06e9959a65fd3f8b994fa","modified":1469870571000},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"6c00f6e0978f4d8f9a846a15579963728aaa6a17","modified":1469870571000},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"49c2b2c14a1e7fcc810c6be4b632975d0204c281","modified":1469870571000},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"4eff5b252d7b614e500fc7d52c97ce325e57d3ab","modified":1469870571000},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"4da051c7f3924fa2db1e73c55b2baf1c2c150255","modified":1469870571000},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"9bf4362a4d0ae151ada84b219d39fbe5bb8c790e","modified":1469870571000},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"3c46efd6601e268093ce6d7b1471d18501878f0d","modified":1469870571000},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"d543d1377c1f61b70e3adb6da0eb12797552e5f2","modified":1469870571000},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"b25132fe6a7ad67059a2c3afc60feabb479bdd75","modified":1469870571000},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"8fae54591877a73dff0b29b2be2e8935e3c63575","modified":1469870571000},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"2cdc094ecf907a02fce25ad4a607cd5c40da0f2b","modified":1469870571000},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"e792c8dc41561c96d128e9b421187f1c3dc978a0","modified":1469870571000},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"387ce23bba52b22a586b2dfb4ec618fe1ffd3926","modified":1469870571000},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"cbca4842a54950e2934b3b8f3cd940f122111aef","modified":1469870571000},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"a352ae5b1f8857393bf770d2e638bf15f0c9585d","modified":1469870571000},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"4eb18b12fa0ea6c35925d9a64f64e2a7dae8c7fd","modified":1469870571000},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"10251257aceecb117233c9554dcf8ecfef8e2104","modified":1469870571000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"2e7ec9aaa3293941106b1bdd09055246aa3c3dc6","modified":1469870571000},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"963105a531403d7aad6d9e5e23e3bfabb8ec065a","modified":1469870571000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"c44f6a553ec7ea5508f2054a13be33a62a15d3a9","modified":1469870571000},{"_id":"themes/next/source/css/_common/components/post/post-more-link.styl","hash":"15063d79b5befc21820baf05d6f20cc1c1787477","modified":1469870571000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"920343e41c124221a17f050bbb989494d44f7a24","modified":1469870571000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"45fa7193435a8eae9960267438750b4c9fa9587f","modified":1469870571000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"234facd038f144bd0fe09a31ed1357c5d74c517f","modified":1469870571000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"7690b9596ec3a49befbe529a5a2649abec0faf76","modified":1469870571000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"2d3abbc85b979a648e0e579e45f16a6eba49d1e7","modified":1469870571000},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"3623e7fa4324ec1307370f33d8f287a9e20a5578","modified":1469870571000},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"c2abe4d87148e23e15d49ee225bc650de60baf46","modified":1469870571000},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"618f73450cf541f88a4fddc3d22898aee49d105d","modified":1469870571000},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"93b08815c4d17e2b96fef8530ec1f1064dede6ef","modified":1469870571000},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"4851b981020c5cbc354a1af9b831a2dcb3cf9d39","modified":1469870571000},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"795d94561888d31cb7a6ff4a125596809ea69b7d","modified":1469870571000},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"8e66c2635d48e11de616bb29c4b1323698eebc0a","modified":1469870571000},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"b03f891883446f3a5548b7cc90d29c77e62f1053","modified":1469870571000},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"2340dd9b3202c61d73cc708b790fac5adddbfc7f","modified":1469870571000},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"327b5f63d55ec26f7663185c1a778440588d9803","modified":1469870571000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"9486ddd2cb255227db102d09a7df4cae0fabad72","modified":1469870571000},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"3afc459442c132c480d1d832f1a872f1070bb048","modified":1469870571000},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"8b8e8cbce98a9296c8fd77f512ae85d945f65d40","modified":1469870571000},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"5dc4859c66305f871e56cba78f64bfe3bf1b5f01","modified":1469870571000},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"8b8e8cbce98a9296c8fd77f512ae85d945f65d40","modified":1469870571000},{"_id":"themes/next/source/vendors/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1469870571000},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1469870571000},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1469870571000},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1469870571000},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1469870571000},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1469870571000},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.ttf","hash":"27cf1f2ec59aece6938c7bb2feb0e287ea778ff9","modified":1469870571000},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.svg","hash":"2b3c8ba7008cc014d8fb37abc6f9f49aeda83824","modified":1469870571000},{"_id":"public/atom.xml","hash":"cccad182db4137c5c9cc8a1eb320d6a0bc313849","modified":1475752408215},{"_id":"public/categories/index.html","hash":"76c3dd8b05b45e6edf4fd295a998fa0a6bd1af6d","modified":1475752409659},{"_id":"public/archives/page/4/index.html","hash":"bf9b6d49c4c1eb8fe13abac5044e65c0e75cfd57","modified":1475752409670},{"_id":"public/archives/2016/page/4/index.html","hash":"c0c9c9afe840fde80cd8f6e511cff9253487e466","modified":1475752409670},{"_id":"public/archives/2016/07/index.html","hash":"7aeed419ae0cea8a3bc3230bff468e34f607b8bc","modified":1475752409670},{"_id":"public/categories/软件工程/index.html","hash":"c1527e848c6220ff09892723eaf3203040be0f0a","modified":1475752409670},{"_id":"public/2016/10/04/Nginx服务器https配置/index.html","hash":"7983d4389f1d38c0ce8de50e915559ad0bef2141","modified":1475752409670},{"_id":"public/2016/10/05/keepalived工作原理和配置/index.html","hash":"5b159ddadf3595ea194440a756d7ffa63e7c7185","modified":1475752409670},{"_id":"public/2016/10/01/Memcached分布式部署算法整理/index.html","hash":"dbb6e7d5942b939d46641cc85500375e6513525b","modified":1475752409670},{"_id":"public/tags/index.html","hash":"1384b75b27204eaf65884a8ae1efc022ae363ff9","modified":1475752409671},{"_id":"public/2016/09/29/memcache高速缓存的工作原理及应用小结/index.html","hash":"361e08de4462c9275993768ef25bfe2dcb43aa65","modified":1475752409671},{"_id":"public/2016/09/28/Linux服务和进程管理/index.html","hash":"df338fd03dde3156c69dafaa364ab5d78be1908e","modified":1475752409671},{"_id":"public/2016/10/04/Nginx虚拟主机设置/index.html","hash":"5d64e936ce742a8e21f3cffc46a6457f35fdca26","modified":1475752409671},{"_id":"public/2016/09/27/PHP-FPM运行状态监控/index.html","hash":"2ac06e28c8017e7ab37c08fe9a1c628e9f1c3a00","modified":1475752409671},{"_id":"public/2016/10/03/Nginx配置整理/index.html","hash":"4eb2c70bd697c40c5ab34c89cee81a1aec24a9d5","modified":1475752409671},{"_id":"public/2016/09/25/LNMP环境安装与配置/index.html","hash":"546d725c1120d7b5b95a1f9b2ba22cdc48a5d53b","modified":1475752409671},{"_id":"public/2016/09/30/PHP异常和错误处理/index.html","hash":"d6383a2fb3da5415d088a2232165a59073994d73","modified":1475752409671},{"_id":"public/2016/09/26/PHP扩展模块安装/index.html","hash":"525027f6afadb83f68f60b6dd10c42b5bc06757c","modified":1475752409671},{"_id":"public/2016/09/25/MySQL安装编译/index.html","hash":"8315530429db371ef1b124dc18a12c9dcbecc70b","modified":1475752409671},{"_id":"public/2016/09/27/Nginx运行状态监控/index.html","hash":"2a64aa3e490b1d0f59691d7c0a628a85e98c5daf","modified":1475752409671},{"_id":"public/2016/09/20/Mac下包管理工具homebrew/index.html","hash":"7cb8deb188b1cdd34b0b015feca4f6164536100b","modified":1475752409671},{"_id":"public/2016/09/19/Schema数据类型优化/index.html","hash":"6040790256e9753dbd7af48c65b7eff047adf24c","modified":1475752409671},{"_id":"public/2016/09/25/PHP安装/index.html","hash":"fa58e55a9dc7cd3979197cae3418723c707b033e","modified":1475752409671},{"_id":"public/2016/09/25/nginx安装/index.html","hash":"5d5c182b2bc76316de2e30e7dbddad80553be477","modified":1475752409671},{"_id":"public/2016/09/17/MySQL如何查看表的相关信息/index.html","hash":"5f12ca67e5285b5013b84f262f8ee46dd25ff752","modified":1475752409671},{"_id":"public/2016/09/17/事务的ACID概念/index.html","hash":"70460de85fd0e22b3ef2f79a4b7ea1a19abff559","modified":1475752409671},{"_id":"public/2016/09/21/GIT使用小结/index.html","hash":"8638d1184dcaf194771fe55f4c17ae88671ef1c9","modified":1475752409671},{"_id":"public/2016/09/16/MySQL的并发控制整理/index.html","hash":"a4c981187f949e3b49c9cb656d5d89fffb690248","modified":1475752409671},{"_id":"public/2016/09/07/Apache 中PHP支持模式/index.html","hash":"9127f334d95b5bbee66e81c3c322d977eda88f15","modified":1475752409671},{"_id":"public/2016/09/17/MySQL存储引擎概述/index.html","hash":"edffe03cac4aa23023e9a675e42ceebd23c36fec","modified":1475752409671},{"_id":"public/2016/09/05/htaccess 文件功能及配置整理/index.html","hash":"ab00725fce0d76aa8069bde9337eecda241c2910","modified":1475752409671},{"_id":"public/2016/09/17/MVCC-多版本并发控制整理/index.html","hash":"8ffc40c02dc9d4a9fcc1a8c76a2c4138847b5ae9","modified":1475752409671},{"_id":"public/2016/09/05/Apache 虚拟主机配置/index.html","hash":"3459c0dc8428db3d4c6f2071ae1e9852a023fb08","modified":1475752409672},{"_id":"public/2016/08/26/Apache分层与模块化结构体系小结/index.html","hash":"522a2cb84cd0ab3b0ea527960f2f07323e3db16b","modified":1475752409672},{"_id":"public/2016/08/22/Apache多处理模块整理/index.html","hash":"5102731d9b66682e7aee2ca262cf6aedd4813fdd","modified":1475752409672},{"_id":"public/2016/09/16/MySQL逻辑架构实现小结/index.html","hash":"1c71d005151348fe949a3c87baf36ef1d21324af","modified":1475752409672},{"_id":"public/2016/08/23/Apache性能监控/index.html","hash":"1aeb09a9bf94eeb9096ec7918aff8236493e1233","modified":1475752409672},{"_id":"public/2016/07/31/Web性能优化随笔/index.html","hash":"25e260c9c6c5e88a7810249d497378d7a0906375","modified":1475752409672},{"_id":"public/archives/page/2/index.html","hash":"df4078efacc3fc79bd85ee6ec64790d335e955f8","modified":1475752409672},{"_id":"public/archives/index.html","hash":"25df03f1fd9edc37577b488cf88680ded793bc5b","modified":1475752409672},{"_id":"public/2016/08/09/Apache安装汇总/index.html","hash":"a0be5f58ec6daa3da777696fabf2171d168818b4","modified":1475752409672},{"_id":"public/archives/2016/page/2/index.html","hash":"fb8084ce80963a857505b4906e6e0d3e9c616c40","modified":1475752409672},{"_id":"public/archives/page/3/index.html","hash":"7d461b1fb906dcb1797e9c3b1275e8c088fa6946","modified":1475752409672},{"_id":"public/archives/2016/index.html","hash":"5253d29bacfa4eca81416c58b232c3a405eff23f","modified":1475752409672},{"_id":"public/2016/08/12/hexo常用命令/index.html","hash":"bc50f3c237b02194830594a6093d7f1d4c1432ec","modified":1475752409672},{"_id":"public/archives/2016/09/index.html","hash":"c80492eb9b2ac0f6bf300ab2281d47679477793a","modified":1475752409672},{"_id":"public/archives/2016/09/page/2/index.html","hash":"0b507fee588182789d34abe83c21bcdc5216fd00","modified":1475752409672},{"_id":"public/archives/2016/page/3/index.html","hash":"44f38928ed944b273b350eee26bf76a052a7659f","modified":1475752409672},{"_id":"public/archives/2016/10/index.html","hash":"003dc5a0bf9f4711bd5a806a1ef7b02e71d5a12a","modified":1475752409672},{"_id":"public/categories/Apache/index.html","hash":"cff5969152e4a8a729cf2150747b7612d86a164d","modified":1475752409672},{"_id":"public/categories/Linux/index.html","hash":"93196328a46510259cc913f473e5dafd1f25547f","modified":1475752409703},{"_id":"public/categories/PHP/index.html","hash":"d35aa52d9f5dd62c9965547165950128101e5ef6","modified":1475752409703},{"_id":"public/categories/Nginx/index.html","hash":"e1c3a5c407abcc2633af60de459e2706b2645d19","modified":1475752409704},{"_id":"public/categories/Web/index.html","hash":"6d3c828a45e6daa146ca3f80c0dce5edd0a11e08","modified":1475752409704},{"_id":"public/tags/Apache虚拟主机/index.html","hash":"d8065093c0db19a494baf80a12b5a11d6a7d0930","modified":1475752409704},{"_id":"public/tags/Apache-Apache性能优化/index.html","hash":"c08f217aa38635a4231b4647608b0a7f8ccdf9eb","modified":1475752409704},{"_id":"public/categories/Mac/index.html","hash":"fa559ae8084c98ccd521d4b8e9637bc5fecc8904","modified":1475752409704},{"_id":"public/archives/2016/09/page/3/index.html","hash":"43a9f33ab9bd2a432667ed77db46adec8dec38f2","modified":1475752409704},{"_id":"public/tags/Apache-PHP/index.html","hash":"b4e59cc5f0b31bca91d0183ad3e6d7131613b22d","modified":1475752409704},{"_id":"public/tags/CGI/index.html","hash":"4f667d9e9cc7032bc22cb8904c9d316db945a7c5","modified":1475752409704},{"_id":"public/tags/FastCGI/index.html","hash":"cc3b48e83d00438dc5509ce034c97313eef9a888","modified":1475752409704},{"_id":"public/tags/Web服务器/index.html","hash":"9702f8939ad8134c975dcac2328b1eb752d157b2","modified":1475752409704},{"_id":"public/tags/Apache-监控/index.html","hash":"9b66bcd14f6d1202370f38fbed64795b2bf01467","modified":1475752409704},{"_id":"public/tags/Apache/index.html","hash":"4886dc6509ee4ac82a5af7a5b0df501c7c7190d6","modified":1475752409704},{"_id":"public/tags/git/index.html","hash":"fa787f8601abc8f284544bee31c90107bb1e3225","modified":1475752409704},{"_id":"public/tags/版本控制/index.html","hash":"3a7cf7d7609dc743455b060bc91b2e958f8dc4a3","modified":1475752409704},{"_id":"public/tags/LNMP/index.html","hash":"0f76e98f0b3adc00aebe5903e77e7dac0e7c5ae1","modified":1475752409704},{"_id":"public/tags/进程管理/index.html","hash":"2d76c4d8812fe43bea940927bfc1b1766a654c09","modified":1475752409704},{"_id":"public/tags/服务管理/index.html","hash":"f90d2b1de8d72b01fbd9d384d142842f0dec17d4","modified":1475752409704},{"_id":"public/tags/MVCC/index.html","hash":"cc343cfd0b9b41f759bd17f3c9ab8584ac18c2e1","modified":1475752409704},{"_id":"public/tags/多版本并发控制/index.html","hash":"d8105a440f3a4988403a3e64e10082bb150fbdd1","modified":1475752409704},{"_id":"public/tags/Mac/index.html","hash":"b73db1e5908a81145a535fc7f145daa4e86c004f","modified":1475752409704},{"_id":"public/tags/Apache模块/index.html","hash":"e5a60e673f67eb0361b661453b9872ae99b652c4","modified":1475752409704},{"_id":"public/tags/homebrew/index.html","hash":"deb1ef3708f0f7b3a8817a8b9c7c77da0e29bc90","modified":1475752409704},{"_id":"public/tags/分布式部署算法/index.html","hash":"2ada17fc02ad841c06b8d31f5a053c71944f22ba","modified":1475752409704},{"_id":"public/tags/存储引擎/index.html","hash":"d3c90974e889896d44de6d4bfb301b0e4001a2b6","modified":1475752409704},{"_id":"public/tags/https/index.html","hash":"9156c230b317ce86f1cde2ea84f83e8dcbaa8cbb","modified":1475752409704},{"_id":"public/tags/MySQL逻辑架构/index.html","hash":"12e0ccb598aac1e7fe58c14ad6062312518e7c7f","modified":1475752409704},{"_id":"public/tags/并发控制/index.html","hash":"f2169a7f33f6b6f91578259a14d5ff6bdba9b1fb","modified":1475752409704},{"_id":"public/tags/监控/index.html","hash":"f8e64b82ac4e1ec217560c1b22898bb5dab2a413","modified":1475752409704},{"_id":"public/tags/虚拟主机/index.html","hash":"f40d34edf1297f016f7b61800e4eab7ff16a871b","modified":1475752409705},{"_id":"public/tags/PHP-FPM/index.html","hash":"e5700e880a95df24b10e72b68b2df6af5778b717","modified":1475752409705},{"_id":"public/tags/异常处理/index.html","hash":"1b25361eca72832791adafa461ad100085eb6f33","modified":1475752409705},{"_id":"public/tags/错误处理/index.html","hash":"4cf6ef2253800c020e1ac447270a8ef8effa9496","modified":1475752409705},{"_id":"public/tags/PHP扩展/index.html","hash":"0adff43429a79ce7eb99b90e4c22c4016903dd73","modified":1475752409705},{"_id":"public/tags/phpize/index.html","hash":"cadfb6e5e05d2b2b3cba0be02e2d3f04ca46ce6e","modified":1475752409705},{"_id":"public/tags/hexo/index.html","hash":"8ef58475097747809e2da48332837481b29852ad","modified":1475752409705},{"_id":"public/tags/性能优化/index.html","hash":"16d0e77a941333608b40db2e19385968dac6747d","modified":1475752409705},{"_id":"public/tags/Web/index.html","hash":"f643dd8dc2d20cc5c30c21fda552947a42b5591e","modified":1475752409705},{"_id":"public/tags/负载均衡/index.html","hash":"692ecf60dfb2c95af38fc1a6fa7dc5218fb661ff","modified":1475752409705},{"_id":"public/tags/Apache分层/index.html","hash":"f76a014a441c2b651415d8849d0ad7a96b326595","modified":1475752409705},{"_id":"public/tags/事务/index.html","hash":"84c9f68f8a85839fef02c3fab605d317f23b4648","modified":1475752409705},{"_id":"public/tags/htaccess/index.html","hash":"20422c3da038a694f8fdc343cfc5c9d0f804a582","modified":1475752409705},{"_id":"public/tags/ACID/index.html","hash":"62777c5bd3e2499ef35fc7fb62130993bae4bf1b","modified":1475752409705},{"_id":"public/tags/Nginx安装/index.html","hash":"1fffb6f8000ad0d4685d80367c7a92fcfeb2da71","modified":1475752409705},{"_id":"public/tags/memcached/index.html","hash":"2eb533d7abafe8d0655f34623abb5c5d828d8021","modified":1475752409705},{"_id":"public/tags/memcache/index.html","hash":"78ca0bf78ae38716c3fefe76afd53db7c335a97e","modified":1475752409705},{"_id":"public/tags/缓存/index.html","hash":"33044a0c0a8765d0020d445ed68889d550cd501a","modified":1475752409705},{"_id":"public/tags/数据类型/index.html","hash":"38cf70acee4fe8b03b9a29365736d4ad8fc996fc","modified":1475752409705},{"_id":"public/2016/10/05/ElasticSearch整理/index.html","hash":"20a04012e7783c066eb3457124a55b7bd3d9ae75","modified":1475752409705},{"_id":"public/categories/MySQL/index.html","hash":"07bd60bc4c0993eee683bd27e6a07f9fe044e6cd","modified":1475752409705},{"_id":"public/archives/2016/08/index.html","hash":"6ca5764d52bbf08fed1fbb573b500e7d558ebadd","modified":1475752409705},{"_id":"public/index.html","hash":"a2420b53c829f5d64b7e5536f9f0ca34ce4ecba4","modified":1475752409705},{"_id":"public/page/3/index.html","hash":"4e7d86956669cef3b7b6c4189218cf5a299382d2","modified":1475752409705},{"_id":"public/page/4/index.html","hash":"053789fb379c99098e8a21b298363134ff9eeee5","modified":1475752409705},{"_id":"public/page/2/index.html","hash":"4fd75553aac945c4acdf30f57d8e39a58bd7b512","modified":1475752409705},{"_id":"public/tags/ElasticSearch/index.html","hash":"0615e94a389585440b44ef97b3873f01be04b3f8","modified":1475752409709},{"_id":"public/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1475752409709},{"_id":"public/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1475752409709},{"_id":"public/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1475752409710},{"_id":"public/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1475752409710},{"_id":"public/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1475752409710},{"_id":"public/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1475752409710},{"_id":"public/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1475752409710},{"_id":"public/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1475752409710},{"_id":"public/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1475752409710},{"_id":"public/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1475752409711},{"_id":"public/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1475752409711},{"_id":"public/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1475752409711},{"_id":"public/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1475752409711},{"_id":"public/vendors/font-awesome/HELP-US-OUT.txt","hash":"69a4c537d167b68a0ccf1c6febd138aeffca60d6","modified":1475752409711},{"_id":"public/vendors/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1475752409711},{"_id":"public/vendors/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1475752409711},{"_id":"public/vendors/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1475752409711},{"_id":"public/vendors/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1475752409711},{"_id":"public/vendors/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1475752409711},{"_id":"public/vendors/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1475752409711},{"_id":"public/vendors/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1475752409711},{"_id":"public/vendors/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1475752409711},{"_id":"public/vendors/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1475752409711},{"_id":"public/vendors/font-awesome/fonts/fontawesome-webfont.woff2","hash":"574ea2698c03ae9477db2ea3baf460ee32f1a7ea","modified":1475752409711},{"_id":"public/vendors/font-awesome/fonts/FontAwesome.otf","hash":"0112e96f327d413938d37c1693806f468ffdbace","modified":1475752410339},{"_id":"public/vendors/font-awesome/fonts/fontawesome-webfont.eot","hash":"b3c2f08e73320135b69c23a3908b87a12053a2f6","modified":1475752410342},{"_id":"public/vendors/font-awesome/fonts/fontawesome-webfont.woff","hash":"507970402e328b2baeb05bde73bf9ded4e2c3a2d","modified":1475752410344},{"_id":"public/vendors/font-awesome/bower.json","hash":"64394a2a9aa00f8e321d8daa5e51a420f0e96dad","modified":1475752410350},{"_id":"public/vendors/fastclick/bower.json","hash":"4dcecf83afddba148464d5339c93f6d0aa9f42e9","modified":1475752410350},{"_id":"public/vendors/fastclick/README.html","hash":"da3c74d484c73cc7df565e8abbfa4d6a5a18d4da","modified":1475752410350},{"_id":"public/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1475752410350},{"_id":"public/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1475752410350},{"_id":"public/js/src/bootstrap.js","hash":"39bf93769d9080fa01a9a875183b43198f79bc19","modified":1475752410350},{"_id":"public/js/src/post-details.js","hash":"2038f54e289b6da5def09689e69f623187147be5","modified":1475752410350},{"_id":"public/js/src/motion.js","hash":"269414e84df544a4ccb88519f6abae4943db3c67","modified":1475752410350},{"_id":"public/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1475752410350},{"_id":"public/js/src/utils.js","hash":"e5cb720894c4bc28ca8f10b33df127fb394018d9","modified":1475752410350},{"_id":"public/vendors/velocity/bower.json","hash":"0ef14e7ccdfba5db6eb3f8fc6aa3b47282c36409","modified":1475752410350},{"_id":"public/vendors/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1475752410350},{"_id":"public/vendors/jquery_lazyload/README.html","hash":"bde24335f6bc09d8801c0dcd7274f71b466552bd","modified":1475752410350},{"_id":"public/vendors/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1475752410350},{"_id":"public/vendors/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1475752410350},{"_id":"public/vendors/jquery_lazyload/bower.json","hash":"ae3c3b61e6e7f9e1d7e3585ad854380ecc04cf53","modified":1475752410351},{"_id":"public/vendors/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1475752410351},{"_id":"public/vendors/jquery_lazyload/CONTRIBUTING.html","hash":"a6358170d346af13b1452ac157b60505bec7015c","modified":1475752410351},{"_id":"public/vendors/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1475752410351},{"_id":"public/vendors/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1475752410351},{"_id":"public/js/src/schemes/pisces.js","hash":"7506e7490c69a200831393c38d25e91c156bd471","modified":1475752410351},{"_id":"public/vendors/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1475752410351},{"_id":"public/vendors/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1475752410351},{"_id":"public/vendors/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1475752410351},{"_id":"public/vendors/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1475752410351},{"_id":"public/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1475752410351},{"_id":"public/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1475752410351},{"_id":"public/vendors/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1475752410351},{"_id":"public/vendors/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1475752410351},{"_id":"public/vendors/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1475752410351},{"_id":"public/css/main.css","hash":"d44707e3aa71619b7eb0cd5fb29321c8c1db8d78","modified":1475752410351},{"_id":"public/vendors/font-awesome/css/font-awesome.css","hash":"3b87c2560832748cd06f9bfd2fd6ea8edbdae8c7","modified":1475752410351},{"_id":"public/vendors/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1475752410351},{"_id":"public/vendors/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1475752410351},{"_id":"public/vendors/font-awesome/css/font-awesome.min.css","hash":"05ea25bc9b3ac48993e1fee322d3bc94b49a6e22","modified":1475752410351},{"_id":"public/vendors/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1475752410351},{"_id":"public/vendors/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1475752410351},{"_id":"public/vendors/font-awesome/fonts/fontawesome-webfont.ttf","hash":"27cf1f2ec59aece6938c7bb2feb0e287ea778ff9","modified":1475752410351},{"_id":"public/vendors/font-awesome/fonts/fontawesome-webfont.svg","hash":"2b3c8ba7008cc014d8fb37abc6f9f49aeda83824","modified":1475752410364}],"Category":[{"name":"Apache","_id":"city8vnmn0003g29fce6jdlxp"},{"name":"软件工程","_id":"city8vnn5000kg29f9om77ig6"},{"name":"Linux","_id":"city8vnnb000qg29fth0p4gj2"},{"name":"PHP","_id":"city8vnnf000wg29fh1ajmygp"},{"name":"MySQL","_id":"city8vnns001ag29fo145rovt"},{"name":"Mac","_id":"city8vnny001hg29fzmwzwbpe"},{"name":"Nginx","_id":"city8vnom002kg29feq3qvi7p"},{"name":"Web","_id":"city8vnot0035g29fa76ouwid"}],"Data":[],"Page":[{"title":"分类","date":"2016-07-30T12:11:50.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: 分类\ndate: 2016-07-30 20:11:50\ntype: \"categories\"\n---\n","updated":"2016-07-30T12:13:11.000Z","path":"categories/index.html","comments":1,"layout":"page","_id":"city8vnpk004zg29fud0wt8jo","content":"","excerpt":"","more":""},{"title":"标签","date":"2016-07-30T10:00:00.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"title: 标签\ndate: 2016-07-30 18:00:00\ntype: \"tags\"\n---\n","updated":"2016-07-30T11:30:07.000Z","path":"tags/index.html","comments":1,"layout":"page","_id":"city8vnpl0050g29fo4fxvsjs","content":"","excerpt":"","more":""}],"Post":[{"title":"Apache 虚拟主机配置","date":"2016-09-05T14:10:00.000Z","_content":"虚拟主机指的是在单一机器上运行多个网站。\n* 常见的共有三种不同的配置方式。\n  * 基于域名\n  * 基于端口（需要增加相对应的 `Listen` 指令）\n  * 基于IP\n* 动态虚拟主机配置。\n\n<!-- more -->\n\n## 常规配置方式\n\n### 在`httpd.conf` 文件中启用 `httpd-vhost.conf` 配置文件\n```ini\n# Virtual hosts\nInclude conf/extra/httpd-vhosts.conf\n```\n\n### 配置 `httpd-vhosts.conf`\n\n1. 基于域名配置\n```ini\n<VirtualHost *:80>\n    ServerName domain1.com\n    DocumentRoot  \"D:\\data\\domain1.com\"\n    <Directory />\n        Options +Indexes +FollowSymLinks +ExecCGI\n        AllowOverride All\n        Order allow,deny\n        Allow from all\n        Require all granted\n    </Directory>\n    DirectoryIndex index.php index.html\n</VirtualHost>\n```\n**注：( `Require all granted` )**\n> Apache 2.4 及以上版本访问控制与2.2有所变换，所以在2.4+的版本需要在目录下添加 `Require all granted` 否则会出现访问不到的情况。\n> [更多详情，点击查看](http://httpd.apache.org/docs/2.4/upgrading.html)\n\n2. 基于端口配置\n  - 基于端口的配置需要先在 `httpd.conf` 中添加相应端口的 `Listen` 指令。\n```ini\n#httpd.conf\nListen 81\n```\n  - `httpd-vhosts.conf`\n```ini\n<VirtualHost *:81>\n    #ServerName 10.235.65.14:81\n    DocumentRoot  \"D:\\data\\domain3.com\"\n    <Directory />\n        Options +Indexes +FollowSymLinks +ExecCGI\n        AllowOverride All\n        Order allow,deny\n        Allow from all\n        Require all granted\n    </Directory>\n    DirectoryIndex index.php index.html\n</VirtualHost>\n```\n\n3. 基于IP地址配置\n```ini\n<VirtualHost *:80>\n    ServerName 10.235.65.14\n    DocumentRoot  \"D:\\data\\domain2.com\"\n    <Directory />\n        Options +Indexes +FollowSymLinks +ExecCGI\n        AllowOverride All\n        Order allow,deny\n        Allow from all\n        Require all granted\n    </Directory>\n    DirectoryIndex index.php index.html\n</VirtualHost>\n```\n\n### 验证\n配置完成之后，需要重启 Apache 配置才会生效。在浏览器中输入相应的域名，IP或者端口进行查看，能正常输出我们分别设置的内容，则说明我们配置成功。\n\n\n## 动态虚拟主机配置\n上面谈到的虚拟主机配置方式，每次配置完成之后都必须重启 Apache 才能生效。并且当我们要配置多个虚拟主机时就需要增加多个 `<VirtualHost >···</VirtualHost>` ,显得繁琐。那么有没有一种更好，更有效的方式来进行配置呢？\n\n`mod_vhost_alias` 模块为我们提供了一种动态配置虚拟主机的方式。我们只需设置一个目录，将不同的站点资源按照一定的规则放到该目录下即可。并且不用修改配置文件，且不用重新启动Apache服务器。\n\n动态配置优缺点：\n* 优点：\n  * 配置文件更小，意味着Apache启动会更快，并且占用内存更少。正重要的是，更小的配置结构更易于维护，我们人为配置出错的机会更小。\n  * 添加新的虚拟主机，我们只需要根据相应的规则在指定的，目录下面创建文件即可。不需要重新配置和启动Apache。\n* 缺点：\n  * 无法针对每个虚拟主机设置不同的日志文件。如果我们有很多的虚拟主机这确实是一个非常糟糕的事情。我们可以选择将日志记录到一个管道或者FIFO，在另一端再将日志文件按照不同的虚拟主机进行分割。比如 [`aplit-logfile`](http://httpd.apache.org/docs/current/programs/split-logfile.html) 工具。\n\n### 配置方法\n* 准备\n  * 在 `httpd.conf` 中开启 `mod_vhost_alias.so` 模块,并添加一个新的子配置文件 `httpd-vhost-alias.conf` 方便我们配置。\n  ```ini\n  #开启 mod_vhost_alias.so 模块\n  LoadModule vhost_alias_module libexec/apache2/mod_vhost_alias.so\n  #去掉 LoadModule 前面的注释\n  ···\n  #添加子配置文件\n  #Include /private/etc/apache2/extra/httpd-vhost-alias.conf\n  ```\n* 配置\n  * 打开子配置文件 `httpd-vhost-alias.conf` ，添加以下配置。\n  ```ini\n  UseCanonicalName Off\n  VirtualDocumentRoot /data1/www/%0\n  <Directory \"/data1/www/\">\n    Options None\n    AllowOverride None\n    Order allow,deny\n    Allow from all\n  </Directory>\n  ```\n  保存，并重启 Apache 。\n  \n* 测试\n  * 分别绑定不同的域名到服务器，并在 `/data1/www/` 目录下按照不同域名新建目录，将个站点的资源分别放进相应的目录。\n  ```ini\n  127.0.0.1 domain1.com\n  127.0.0.1 domain2.com\n  127.0.0.1 domain3.com\n  ```\n  ```bash\n  /data1/www/domain1.com/index.html   #this is domain1.com test text\n  /data1/www/domain2.com/index.html   #this is domain2.com test text\n  ```\n  * 浏览器分别访问 `domain1.com` 和 `domain2.com ` ，查看是否是否能够正确显示出相应内容。\n  * 在 `/data1/www/` 目录下继续添加 `/data1/www/domain3.com/index.html` ,然后继续用浏览器访问 `domain3.com` ，查看是否能将 `/data1/www/domain3.com/index.html` 的内容输出。\n\n\n* [更多配置参数及方法，请查看](http://httpd.apache.org/docs/current/vhosts/mass.html)\n","source":"_posts/Apache 虚拟主机配置.md","raw":"---\ntitle: Apache 虚拟主机配置\ndate: 2016-09-05 22:10:00\ntags:\n- Apache虚拟主机\ncategories:\n- Apache\n---\n虚拟主机指的是在单一机器上运行多个网站。\n* 常见的共有三种不同的配置方式。\n  * 基于域名\n  * 基于端口（需要增加相对应的 `Listen` 指令）\n  * 基于IP\n* 动态虚拟主机配置。\n\n<!-- more -->\n\n## 常规配置方式\n\n### 在`httpd.conf` 文件中启用 `httpd-vhost.conf` 配置文件\n```ini\n# Virtual hosts\nInclude conf/extra/httpd-vhosts.conf\n```\n\n### 配置 `httpd-vhosts.conf`\n\n1. 基于域名配置\n```ini\n<VirtualHost *:80>\n    ServerName domain1.com\n    DocumentRoot  \"D:\\data\\domain1.com\"\n    <Directory />\n        Options +Indexes +FollowSymLinks +ExecCGI\n        AllowOverride All\n        Order allow,deny\n        Allow from all\n        Require all granted\n    </Directory>\n    DirectoryIndex index.php index.html\n</VirtualHost>\n```\n**注：( `Require all granted` )**\n> Apache 2.4 及以上版本访问控制与2.2有所变换，所以在2.4+的版本需要在目录下添加 `Require all granted` 否则会出现访问不到的情况。\n> [更多详情，点击查看](http://httpd.apache.org/docs/2.4/upgrading.html)\n\n2. 基于端口配置\n  - 基于端口的配置需要先在 `httpd.conf` 中添加相应端口的 `Listen` 指令。\n```ini\n#httpd.conf\nListen 81\n```\n  - `httpd-vhosts.conf`\n```ini\n<VirtualHost *:81>\n    #ServerName 10.235.65.14:81\n    DocumentRoot  \"D:\\data\\domain3.com\"\n    <Directory />\n        Options +Indexes +FollowSymLinks +ExecCGI\n        AllowOverride All\n        Order allow,deny\n        Allow from all\n        Require all granted\n    </Directory>\n    DirectoryIndex index.php index.html\n</VirtualHost>\n```\n\n3. 基于IP地址配置\n```ini\n<VirtualHost *:80>\n    ServerName 10.235.65.14\n    DocumentRoot  \"D:\\data\\domain2.com\"\n    <Directory />\n        Options +Indexes +FollowSymLinks +ExecCGI\n        AllowOverride All\n        Order allow,deny\n        Allow from all\n        Require all granted\n    </Directory>\n    DirectoryIndex index.php index.html\n</VirtualHost>\n```\n\n### 验证\n配置完成之后，需要重启 Apache 配置才会生效。在浏览器中输入相应的域名，IP或者端口进行查看，能正常输出我们分别设置的内容，则说明我们配置成功。\n\n\n## 动态虚拟主机配置\n上面谈到的虚拟主机配置方式，每次配置完成之后都必须重启 Apache 才能生效。并且当我们要配置多个虚拟主机时就需要增加多个 `<VirtualHost >···</VirtualHost>` ,显得繁琐。那么有没有一种更好，更有效的方式来进行配置呢？\n\n`mod_vhost_alias` 模块为我们提供了一种动态配置虚拟主机的方式。我们只需设置一个目录，将不同的站点资源按照一定的规则放到该目录下即可。并且不用修改配置文件，且不用重新启动Apache服务器。\n\n动态配置优缺点：\n* 优点：\n  * 配置文件更小，意味着Apache启动会更快，并且占用内存更少。正重要的是，更小的配置结构更易于维护，我们人为配置出错的机会更小。\n  * 添加新的虚拟主机，我们只需要根据相应的规则在指定的，目录下面创建文件即可。不需要重新配置和启动Apache。\n* 缺点：\n  * 无法针对每个虚拟主机设置不同的日志文件。如果我们有很多的虚拟主机这确实是一个非常糟糕的事情。我们可以选择将日志记录到一个管道或者FIFO，在另一端再将日志文件按照不同的虚拟主机进行分割。比如 [`aplit-logfile`](http://httpd.apache.org/docs/current/programs/split-logfile.html) 工具。\n\n### 配置方法\n* 准备\n  * 在 `httpd.conf` 中开启 `mod_vhost_alias.so` 模块,并添加一个新的子配置文件 `httpd-vhost-alias.conf` 方便我们配置。\n  ```ini\n  #开启 mod_vhost_alias.so 模块\n  LoadModule vhost_alias_module libexec/apache2/mod_vhost_alias.so\n  #去掉 LoadModule 前面的注释\n  ···\n  #添加子配置文件\n  #Include /private/etc/apache2/extra/httpd-vhost-alias.conf\n  ```\n* 配置\n  * 打开子配置文件 `httpd-vhost-alias.conf` ，添加以下配置。\n  ```ini\n  UseCanonicalName Off\n  VirtualDocumentRoot /data1/www/%0\n  <Directory \"/data1/www/\">\n    Options None\n    AllowOverride None\n    Order allow,deny\n    Allow from all\n  </Directory>\n  ```\n  保存，并重启 Apache 。\n  \n* 测试\n  * 分别绑定不同的域名到服务器，并在 `/data1/www/` 目录下按照不同域名新建目录，将个站点的资源分别放进相应的目录。\n  ```ini\n  127.0.0.1 domain1.com\n  127.0.0.1 domain2.com\n  127.0.0.1 domain3.com\n  ```\n  ```bash\n  /data1/www/domain1.com/index.html   #this is domain1.com test text\n  /data1/www/domain2.com/index.html   #this is domain2.com test text\n  ```\n  * 浏览器分别访问 `domain1.com` 和 `domain2.com ` ，查看是否是否能够正确显示出相应内容。\n  * 在 `/data1/www/` 目录下继续添加 `/data1/www/domain3.com/index.html` ,然后继续用浏览器访问 `domain3.com` ，查看是否能将 `/data1/www/domain3.com/index.html` 的内容输出。\n\n\n* [更多配置参数及方法，请查看](http://httpd.apache.org/docs/current/vhosts/mass.html)\n","slug":"Apache 虚拟主机配置","published":1,"updated":"2016-09-06T15:17:20.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"city8vnmd0000g29fso95pol1","content":"<p>虚拟主机指的是在单一机器上运行多个网站。</p>\n<ul>\n<li>常见的共有三种不同的配置方式。<ul>\n<li>基于域名</li>\n<li>基于端口（需要增加相对应的 <code>Listen</code> 指令）</li>\n<li>基于IP</li>\n</ul>\n</li>\n<li>动态虚拟主机配置。</li>\n</ul>\n<a id=\"more\"></a>\n<h2 id=\"常规配置方式\"><a href=\"#常规配置方式\" class=\"headerlink\" title=\"常规配置方式\"></a>常规配置方式</h2><h3 id=\"在httpd-conf-文件中启用-httpd-vhost-conf-配置文件\"><a href=\"#在httpd-conf-文件中启用-httpd-vhost-conf-配置文件\" class=\"headerlink\" title=\"在httpd.conf 文件中启用 httpd-vhost.conf 配置文件\"></a>在<code>httpd.conf</code> 文件中启用 <code>httpd-vhost.conf</code> 配置文件</h3><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"># Virtual hosts</div><div class=\"line\">Include conf/extra/httpd-vhosts.conf</div></pre></td></tr></table></figure>\n<h3 id=\"配置-httpd-vhosts-conf\"><a href=\"#配置-httpd-vhosts-conf\" class=\"headerlink\" title=\"配置 httpd-vhosts.conf\"></a>配置 <code>httpd-vhosts.conf</code></h3><ol>\n<li>基于域名配置<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;VirtualHost *:80&gt;</div><div class=\"line\">    ServerName domain1.com</div><div class=\"line\">    DocumentRoot  \"D:\\data\\domain1.com\"</div><div class=\"line\">    &lt;Directory /&gt;</div><div class=\"line\">        Options +Indexes +FollowSymLinks +ExecCGI</div><div class=\"line\">        AllowOverride All</div><div class=\"line\">        Order allow,deny</div><div class=\"line\">        Allow from all</div><div class=\"line\">        Require all granted</div><div class=\"line\">    &lt;/Directory&gt;</div><div class=\"line\">    DirectoryIndex index.php index.html</div><div class=\"line\">&lt;/VirtualHost&gt;</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<p><strong>注：( <code>Require all granted</code> )</strong></p>\n<blockquote>\n<p>Apache 2.4 及以上版本访问控制与2.2有所变换，所以在2.4+的版本需要在目录下添加 <code>Require all granted</code> 否则会出现访问不到的情况。<br><a href=\"http://httpd.apache.org/docs/2.4/upgrading.html\" target=\"_blank\" rel=\"external\">更多详情，点击查看</a></p>\n</blockquote>\n<ol>\n<li><p>基于端口配置</p>\n<ul>\n<li><p>基于端口的配置需要先在 <code>httpd.conf</code> 中添加相应端口的 <code>Listen</code> 指令。</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">#httpd.conf</div><div class=\"line\">Listen 81</div></pre></td></tr></table></figure>\n</li>\n<li><p><code>httpd-vhosts.conf</code></p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;VirtualHost *:81&gt;</div><div class=\"line\">    #ServerName 10.235.65.14:81</div><div class=\"line\">    DocumentRoot  \"D:\\data\\domain3.com\"</div><div class=\"line\">    &lt;Directory /&gt;</div><div class=\"line\">        Options +Indexes +FollowSymLinks +ExecCGI</div><div class=\"line\">        AllowOverride All</div><div class=\"line\">        Order allow,deny</div><div class=\"line\">        Allow from all</div><div class=\"line\">        Require all granted</div><div class=\"line\">    &lt;/Directory&gt;</div><div class=\"line\">    DirectoryIndex index.php index.html</div><div class=\"line\">&lt;/VirtualHost&gt;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p>基于IP地址配置</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;VirtualHost *:80&gt;</div><div class=\"line\">    ServerName 10.235.65.14</div><div class=\"line\">    DocumentRoot  \"D:\\data\\domain2.com\"</div><div class=\"line\">    &lt;Directory /&gt;</div><div class=\"line\">        Options +Indexes +FollowSymLinks +ExecCGI</div><div class=\"line\">        AllowOverride All</div><div class=\"line\">        Order allow,deny</div><div class=\"line\">        Allow from all</div><div class=\"line\">        Require all granted</div><div class=\"line\">    &lt;/Directory&gt;</div><div class=\"line\">    DirectoryIndex index.php index.html</div><div class=\"line\">&lt;/VirtualHost&gt;</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<h3 id=\"验证\"><a href=\"#验证\" class=\"headerlink\" title=\"验证\"></a>验证</h3><p>配置完成之后，需要重启 Apache 配置才会生效。在浏览器中输入相应的域名，IP或者端口进行查看，能正常输出我们分别设置的内容，则说明我们配置成功。</p>\n<h2 id=\"动态虚拟主机配置\"><a href=\"#动态虚拟主机配置\" class=\"headerlink\" title=\"动态虚拟主机配置\"></a>动态虚拟主机配置</h2><p>上面谈到的虚拟主机配置方式，每次配置完成之后都必须重启 Apache 才能生效。并且当我们要配置多个虚拟主机时就需要增加多个 <code>&lt;VirtualHost &gt;···&lt;/VirtualHost&gt;</code> ,显得繁琐。那么有没有一种更好，更有效的方式来进行配置呢？</p>\n<p><code>mod_vhost_alias</code> 模块为我们提供了一种动态配置虚拟主机的方式。我们只需设置一个目录，将不同的站点资源按照一定的规则放到该目录下即可。并且不用修改配置文件，且不用重新启动Apache服务器。</p>\n<p>动态配置优缺点：</p>\n<ul>\n<li>优点：<ul>\n<li>配置文件更小，意味着Apache启动会更快，并且占用内存更少。正重要的是，更小的配置结构更易于维护，我们人为配置出错的机会更小。</li>\n<li>添加新的虚拟主机，我们只需要根据相应的规则在指定的，目录下面创建文件即可。不需要重新配置和启动Apache。</li>\n</ul>\n</li>\n<li>缺点：<ul>\n<li>无法针对每个虚拟主机设置不同的日志文件。如果我们有很多的虚拟主机这确实是一个非常糟糕的事情。我们可以选择将日志记录到一个管道或者FIFO，在另一端再将日志文件按照不同的虚拟主机进行分割。比如 <a href=\"http://httpd.apache.org/docs/current/programs/split-logfile.html\" target=\"_blank\" rel=\"external\"><code>aplit-logfile</code></a> 工具。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"配置方法\"><a href=\"#配置方法\" class=\"headerlink\" title=\"配置方法\"></a>配置方法</h3><ul>\n<li><p>准备</p>\n<ul>\n<li>在 <code>httpd.conf</code> 中开启 <code>mod_vhost_alias.so</code> 模块,并添加一个新的子配置文件 <code>httpd-vhost-alias.conf</code> 方便我们配置。<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">#开启 mod_vhost_alias.so 模块</div><div class=\"line\">LoadModule vhost_alias_module libexec/apache2/mod_vhost_alias.so</div><div class=\"line\">#去掉 LoadModule 前面的注释</div><div class=\"line\">···</div><div class=\"line\">#添加子配置文件</div><div class=\"line\">#Include /private/etc/apache2/extra/httpd-vhost-alias.conf</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p>配置</p>\n<ul>\n<li>打开子配置文件 <code>httpd-vhost-alias.conf</code> ，添加以下配置。<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">UseCanonicalName Off</div><div class=\"line\">VirtualDocumentRoot /data1/www/%0</div><div class=\"line\">&lt;Directory \"/data1/www/\"&gt;</div><div class=\"line\">  Options None</div><div class=\"line\">  AllowOverride None</div><div class=\"line\">  Order allow,deny</div><div class=\"line\">  Allow from all</div><div class=\"line\">&lt;/Directory&gt;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>保存，并重启 Apache 。</p>\n</li>\n<li><p>测试</p>\n<ul>\n<li>分别绑定不同的域名到服务器，并在 <code>/data1/www/</code> 目录下按照不同域名新建目录，将个站点的资源分别放进相应的目录。<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">127.0.0.1 domain1.com</div><div class=\"line\">127.0.0.1 domain2.com</div><div class=\"line\">127.0.0.1 domain3.com</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">/data1/www/domain1.com/index.html   <span class=\"comment\">#this is domain1.com test text</span></div><div class=\"line\">/data1/www/domain2.com/index.html   <span class=\"comment\">#this is domain2.com test text</span></div></pre></td></tr></table></figure>\n<ul>\n<li>浏览器分别访问 <code>domain1.com</code> 和 <code>domain2.com</code> ，查看是否是否能够正确显示出相应内容。</li>\n<li>在 <code>/data1/www/</code> 目录下继续添加 <code>/data1/www/domain3.com/index.html</code> ,然后继续用浏览器访问 <code>domain3.com</code> ，查看是否能将 <code>/data1/www/domain3.com/index.html</code> 的内容输出。</li>\n</ul>\n</li>\n</ul>\n<ul>\n<li><a href=\"http://httpd.apache.org/docs/current/vhosts/mass.html\" target=\"_blank\" rel=\"external\">更多配置参数及方法，请查看</a></li>\n</ul>\n","excerpt":"<p>虚拟主机指的是在单一机器上运行多个网站。</p>\n<ul>\n<li>常见的共有三种不同的配置方式。<ul>\n<li>基于域名</li>\n<li>基于端口（需要增加相对应的 <code>Listen</code> 指令）</li>\n<li>基于IP</li>\n</ul>\n</li>\n<li>动态虚拟主机配置。</li>\n</ul>","more":"<h2 id=\"常规配置方式\"><a href=\"#常规配置方式\" class=\"headerlink\" title=\"常规配置方式\"></a>常规配置方式</h2><h3 id=\"在httpd-conf-文件中启用-httpd-vhost-conf-配置文件\"><a href=\"#在httpd-conf-文件中启用-httpd-vhost-conf-配置文件\" class=\"headerlink\" title=\"在httpd.conf 文件中启用 httpd-vhost.conf 配置文件\"></a>在<code>httpd.conf</code> 文件中启用 <code>httpd-vhost.conf</code> 配置文件</h3><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"># Virtual hosts</div><div class=\"line\">Include conf/extra/httpd-vhosts.conf</div></pre></td></tr></table></figure>\n<h3 id=\"配置-httpd-vhosts-conf\"><a href=\"#配置-httpd-vhosts-conf\" class=\"headerlink\" title=\"配置 httpd-vhosts.conf\"></a>配置 <code>httpd-vhosts.conf</code></h3><ol>\n<li>基于域名配置<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;VirtualHost *:80&gt;</div><div class=\"line\">    ServerName domain1.com</div><div class=\"line\">    DocumentRoot  \"D:\\data\\domain1.com\"</div><div class=\"line\">    &lt;Directory /&gt;</div><div class=\"line\">        Options +Indexes +FollowSymLinks +ExecCGI</div><div class=\"line\">        AllowOverride All</div><div class=\"line\">        Order allow,deny</div><div class=\"line\">        Allow from all</div><div class=\"line\">        Require all granted</div><div class=\"line\">    &lt;/Directory&gt;</div><div class=\"line\">    DirectoryIndex index.php index.html</div><div class=\"line\">&lt;/VirtualHost&gt;</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<p><strong>注：( <code>Require all granted</code> )</strong></p>\n<blockquote>\n<p>Apache 2.4 及以上版本访问控制与2.2有所变换，所以在2.4+的版本需要在目录下添加 <code>Require all granted</code> 否则会出现访问不到的情况。<br><a href=\"http://httpd.apache.org/docs/2.4/upgrading.html\">更多详情，点击查看</a></p>\n</blockquote>\n<ol>\n<li><p>基于端口配置</p>\n<ul>\n<li><p>基于端口的配置需要先在 <code>httpd.conf</code> 中添加相应端口的 <code>Listen</code> 指令。</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">#httpd.conf</div><div class=\"line\">Listen 81</div></pre></td></tr></table></figure>\n</li>\n<li><p><code>httpd-vhosts.conf</code></p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;VirtualHost *:81&gt;</div><div class=\"line\">    #ServerName 10.235.65.14:81</div><div class=\"line\">    DocumentRoot  \"D:\\data\\domain3.com\"</div><div class=\"line\">    &lt;Directory /&gt;</div><div class=\"line\">        Options +Indexes +FollowSymLinks +ExecCGI</div><div class=\"line\">        AllowOverride All</div><div class=\"line\">        Order allow,deny</div><div class=\"line\">        Allow from all</div><div class=\"line\">        Require all granted</div><div class=\"line\">    &lt;/Directory&gt;</div><div class=\"line\">    DirectoryIndex index.php index.html</div><div class=\"line\">&lt;/VirtualHost&gt;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p>基于IP地址配置</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;VirtualHost *:80&gt;</div><div class=\"line\">    ServerName 10.235.65.14</div><div class=\"line\">    DocumentRoot  \"D:\\data\\domain2.com\"</div><div class=\"line\">    &lt;Directory /&gt;</div><div class=\"line\">        Options +Indexes +FollowSymLinks +ExecCGI</div><div class=\"line\">        AllowOverride All</div><div class=\"line\">        Order allow,deny</div><div class=\"line\">        Allow from all</div><div class=\"line\">        Require all granted</div><div class=\"line\">    &lt;/Directory&gt;</div><div class=\"line\">    DirectoryIndex index.php index.html</div><div class=\"line\">&lt;/VirtualHost&gt;</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<h3 id=\"验证\"><a href=\"#验证\" class=\"headerlink\" title=\"验证\"></a>验证</h3><p>配置完成之后，需要重启 Apache 配置才会生效。在浏览器中输入相应的域名，IP或者端口进行查看，能正常输出我们分别设置的内容，则说明我们配置成功。</p>\n<h2 id=\"动态虚拟主机配置\"><a href=\"#动态虚拟主机配置\" class=\"headerlink\" title=\"动态虚拟主机配置\"></a>动态虚拟主机配置</h2><p>上面谈到的虚拟主机配置方式，每次配置完成之后都必须重启 Apache 才能生效。并且当我们要配置多个虚拟主机时就需要增加多个 <code>&lt;VirtualHost &gt;···&lt;/VirtualHost&gt;</code> ,显得繁琐。那么有没有一种更好，更有效的方式来进行配置呢？</p>\n<p><code>mod_vhost_alias</code> 模块为我们提供了一种动态配置虚拟主机的方式。我们只需设置一个目录，将不同的站点资源按照一定的规则放到该目录下即可。并且不用修改配置文件，且不用重新启动Apache服务器。</p>\n<p>动态配置优缺点：</p>\n<ul>\n<li>优点：<ul>\n<li>配置文件更小，意味着Apache启动会更快，并且占用内存更少。正重要的是，更小的配置结构更易于维护，我们人为配置出错的机会更小。</li>\n<li>添加新的虚拟主机，我们只需要根据相应的规则在指定的，目录下面创建文件即可。不需要重新配置和启动Apache。</li>\n</ul>\n</li>\n<li>缺点：<ul>\n<li>无法针对每个虚拟主机设置不同的日志文件。如果我们有很多的虚拟主机这确实是一个非常糟糕的事情。我们可以选择将日志记录到一个管道或者FIFO，在另一端再将日志文件按照不同的虚拟主机进行分割。比如 <a href=\"http://httpd.apache.org/docs/current/programs/split-logfile.html\"><code>aplit-logfile</code></a> 工具。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"配置方法\"><a href=\"#配置方法\" class=\"headerlink\" title=\"配置方法\"></a>配置方法</h3><ul>\n<li><p>准备</p>\n<ul>\n<li>在 <code>httpd.conf</code> 中开启 <code>mod_vhost_alias.so</code> 模块,并添加一个新的子配置文件 <code>httpd-vhost-alias.conf</code> 方便我们配置。<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">#开启 mod_vhost_alias.so 模块</div><div class=\"line\">LoadModule vhost_alias_module libexec/apache2/mod_vhost_alias.so</div><div class=\"line\">#去掉 LoadModule 前面的注释</div><div class=\"line\">···</div><div class=\"line\">#添加子配置文件</div><div class=\"line\">#Include /private/etc/apache2/extra/httpd-vhost-alias.conf</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p>配置</p>\n<ul>\n<li>打开子配置文件 <code>httpd-vhost-alias.conf</code> ，添加以下配置。<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">UseCanonicalName Off</div><div class=\"line\">VirtualDocumentRoot /data1/www/%0</div><div class=\"line\">&lt;Directory \"/data1/www/\"&gt;</div><div class=\"line\">  Options None</div><div class=\"line\">  AllowOverride None</div><div class=\"line\">  Order allow,deny</div><div class=\"line\">  Allow from all</div><div class=\"line\">&lt;/Directory&gt;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>保存，并重启 Apache 。</p>\n</li>\n<li><p>测试</p>\n<ul>\n<li>分别绑定不同的域名到服务器，并在 <code>/data1/www/</code> 目录下按照不同域名新建目录，将个站点的资源分别放进相应的目录。<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">127.0.0.1 domain1.com</div><div class=\"line\">127.0.0.1 domain2.com</div><div class=\"line\">127.0.0.1 domain3.com</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">/data1/www/domain1.com/index.html   <span class=\"comment\">#this is domain1.com test text</span></div><div class=\"line\">/data1/www/domain2.com/index.html   <span class=\"comment\">#this is domain2.com test text</span></div></pre></td></tr></table></figure>\n<ul>\n<li>浏览器分别访问 <code>domain1.com</code> 和 <code>domain2.com</code> ，查看是否是否能够正确显示出相应内容。</li>\n<li>在 <code>/data1/www/</code> 目录下继续添加 <code>/data1/www/domain3.com/index.html</code> ,然后继续用浏览器访问 <code>domain3.com</code> ，查看是否能将 <code>/data1/www/domain3.com/index.html</code> 的内容输出。</li>\n</ul>\n</li>\n</ul>\n<ul>\n<li><a href=\"http://httpd.apache.org/docs/current/vhosts/mass.html\">更多配置参数及方法，请查看</a></li>\n</ul>"},{"title":"Apache 并行处理模块小结","date":"2016-08-22T14:36:00.000Z","_content":"Apache 2.X  支持插入式并行处理模块，称为多路处理模块 MPM，（Multi-Processing Modules）它是一个用于选择和处理网络端口的绑定，接收请求并指派子进程处理来自客户端的请求的一个Apache模块。和其他Apache模块相比，它最大的区别是，在任何时间， 必须有一个，而且只有一个 MPM 加载到服务器中。\n> 原理就是增加服务器服务进程或线程数量，是服务器可同时处理更多用户请求。\n\n<!-- more -->\n\n## 如何为Apache选择并安装一个合适的MPM模块\n\n### 安装\nMPM 必须在编译前夕，配置时指定，然后编译到服务器程序中。\n\n即在执行 configure 时，使用参数 --with-mpm=NAME 来指定一个希望安装的MPM模块。NAME 是指定的 MPM 名称。\n\n例：\n```\n./configure --prefix=/usr/local/apache2 --with-mpm=worker\nmake & make install\n```\n或者也可以编译为支持指定的几种或者全部MPM，之后通过修改配置来更换具体使用哪种MPM。\n```\n--enable-mpms-shared='prefork worker'\n--enable-mpms-shared=all\n```\n\n例：\n```\n./configure --prefix=/usr/local/apache2 --enable-mpms-shared=all\n···\n```\n安装成功之后，会在modules文件夹下，自动编译出我们指定的MPM的so模块，在httpd.conf中修改Apache的多处理模式MPM可以切换不同MPM模块：\n```\n#LoadModule mpm_prefork_module modules/mod_mpm_prefork.so\nLoadModule mpm_worker_module modules/mod_mpm_worker.so\n#LoadModule mpm_event_module modules/mod_mpm_event.so\n```\n### 如何查看当前使用的是哪种MPM模块\n\n1. 使用 ./httpd -l 来确定选择的 MPM。 此命令会列出编译到服务器程序中的所有模块，包括 MPM。例：\n```\n$ httpd -l\nCompiled in modules:\n  core.c\n  mod_so.c\n  http_core.c\n  prefork.c\n```\n  如上显示，我们呢当前安装的是以prefork方式工作的MPM模块。\n\n2. 使用./httpd -V 来确定当前使用的MPM模块。\n```\n$ httpd -V\nServer version: Apache/2.4.18 (Unix)\nServer built:   Feb 20 2016 20:03:19\nServer's Module Magic Number: 20120211:52\nServer loaded:  APR 1.4.8, APR-UTIL 1.5.2\nCompiled using: APR 1.4.8, APR-UTIL 1.5.2\nArchitecture:   64-bit\nServer MPM:     prefork\n  threaded:     no\n    forked:     yes (variable process count)\nServer compiled with....\n -D APR_HAS_SENDFILE\n -D APR_HAS_MMAP\n -D APR_HAVE_IPV6 (IPv4-mapped addresses enabled)\n -D APR_USE_FLOCK_SERIALIZE\n -D APR_USE_PTHREAD_SERIALIZE\n -D SINGLE_LISTEN_UNSERIALIZED_ACCEPT\n -D APR_HAS_OTHER_CHILD\n -D AP_HAVE_RELIABLE_PIPED_LOGS\n -D DYNAMIC_MODULE_LIMIT=256\n -D HTTPD_ROOT=\"/usr\"\n -D SUEXEC_BIN=\"/usr/bin/suexec\"\n -D DEFAULT_PIDLOG=\"/private/var/run/httpd.pid\"\n -D DEFAULT_SCOREBOARD=\"logs/apache_runtime_status\"\n -D DEFAULT_ERRORLOG=\"logs/error_log\"\n -D AP_TYPES_CONFIG_FILE=\"/private/etc/apache2/mime.types\"\n -D SERVER_CONFIG_FILE=\"/private/etc/apache2/httpd.conf\"\n```\n\n\n## 常见的几种MPM模块以及它们之间的区别\n如果我们在编译的时候没有明确选择使用哪种MPM模块，那么Apache将会根据不同的系统选择不同的MPM模块进行编译安装。\n\n系统  | 默认MPM\n-----|-------\nBeOS |beos\nNetware|mpm_netware\nOS/2\t|mpmt_os2\nUnix\t|prefork\nWindows\t|mpm_winnt\n\n对于类UNIX系统，根据不同的场景需要我们可以选择使用不同的MPM模块。\n* prefork\n* worker\n* event\n\n### prefork MPM\n> 非线程型的、预派生的MPM\n\n**原理：** 启动之初，就预先fork一些子进程，然后等待请求进来。\n```\n# prefork MPM\n# StartServers: number of server processes to start\n# MinSpareServers: minimum number of server processes which are kept spare\n# MaxSpareServers: maximum number of server processes which are kept spare\n# MaxRequestWorkers: maximum number of server processes allowed to start\n# MaxConnectionsPerChild: maximum number of connections a server process serves\n#                         before terminating\n<IfModule mpm_prefork_module>\n    StartServers             1  #推荐 小=默认，中=20~50，大=50~100\n    MinSpareServers          1  #推荐 与 StartServers 保持一致\n    MaxSpareServers         10  #推荐 小=20，中=30~80，大=80~120\n    MaxRequestWorkers      250  #推荐 小=500，中=500~1500，大=1500~3000\n    MaxConnectionsPerChild   0  #推荐 小=10000，中或大10000~50000\n    #ServerLimit           250  #推荐 与 MaxRequestWorkers 保持一致，当MaxRequestWorkers 值超过256，则需要增加该值配置\n</IfModule>\n```\n启动时建立`StartServers`个子进程，然后按每秒创建指数级个进程数，直到达到`MinSpareServers`个进程（最多增到每秒32个）。如果空闲进程大于`MaxSpareServers`，则检查kill掉一些空闲进程。\n\n`MaxRequestWorkers`指定Apache最多可以同时同时处理的请求数，即进程数，当请求数多余这个值之后，多余的请求就会进入请求队列等待处理（默认不能大于256）。但可以通过设定ServerLimit来增大限制数，serverlimit最大为20000。apache2.3.1之前的版本该参数叫 MaxClients 。当我们的服务器资源很多，但访问却很慢时，我们就可以试一下增大该值，来提高服务器的请求处理能力。\n`MaxConnectionsPerChild`每个子进程可处理的请求数。处理完之后子进程就会自动销毁。`0`表示无限，永不销毁。\n\n* 优点：成熟稳定，兼容所有新老模块。同时，不需要担心线程安全的问题。\n* 缺点：相对于线程，进程相对占用更多的系统资源，消耗更多的内存。所以不擅长处理高并发请求。\n\n\n### worker MPM\n> 支持混合的多线程、多进程的MPM。相比于prefork，worker采用了多进程和多线程混合模式，所以在使用中它占据更少的内存，在高并发情况下表现更优秀。\n\n```\n# worker MPM\n# StartServers: initial number of server processes to start\n# MinSpareThreads: minimum number of worker threads which are kept spare\n# MaxSpareThreads: maximum number of worker threads which are kept spare\n# ThreadsPerChild: constant umber of worker threads in each server process\n# MaxRequestWorkers: maximum number of worker threads\n# MaxConnectionsPerChild: maximum number of connections a server process serves\n#                         before terminating\n<IfModule mpm_worker_module>\n    StartServers             3  #推荐 小=默认，中=3~5，大=5~10\n    MinSpareThreads         75  #推荐 小=默认，中=50~100，大=100~200\n    MaxSpareThreads        250  #推荐 小=默认，中=80~160，大=200~400\n    ThreadsPerChild         25  #推荐 小=默认，中=50~100，大=100~200\n    MaxRequestWorkers      400  #推荐 小=500，中=500~1500，大=1500~3000\n    MaxConnectionsPerChild   0  #推荐 小=10000，中或大=10000~50000\n    #ServerLimit           250  #推荐 当 MaxRequestWorkers/ThreadsPerChild 大于16时，则需要增加该值配置。并且该值必须大于等于MaxRequestWorkers/ThreadsPerChild 的值\n</IfModule>\n\n```\n`ThreadsPerChild` 每个进程包含线程数\n`MaxSpareThreads` 定义最大空闲线程数，超过则清理\n\n* 优点：占用更少系统资源，高并发情况下表现更优秀。\n* 缺点：必须考虑线程安全的问题。\n\n### event MPM\n> worker方式的升级版，也采用多进程和多线程混合模式，并且解决了在 `keep-alive` 情况下，长期被占用的线程的资源浪费问题。\n\n```\n# event MPM\n# StartServers: initial number of server processes to start\n# MinSpareThreads: minimum number of worker threads which are kept spare\n# MaxSpareThreads: maximum number of worker threads which are kept spare\n# ThreadsPerChild: constant number of worker threads in each server process\n# MaxRequestWorkers: maximum number of worker threads\n# MaxConnectionsPerChild: maximum number of connections a server process serves\n#                         before terminating\n<IfModule mpm_event_module>\n    StartServers             3\n    MinSpareThreads         75\n    MaxSpareThreads        250\n    ThreadsPerChild         25\n    MaxRequestWorkers      400\n    MaxConnectionsPerChild   0\n</IfModule>\n\n```\n\n\n* 优点：更好的高并发请求处理能力。\n* 缺点：兼容性问题可能不是很好（最新的官方自带的模块，已经全部支持event MPM了），需要Linux系统（Linux 2.6+）对EPoll的支持，才能启用\n\n\n**Tips：**\n* ***空闲子进程：*** 即没有正在处理请求的子进程。\n* ***请求等待队列：*** 任何超过 MaxClients 或 MaxRequestWorkers 限制的请求都将进入到等待队列，直到收到 ListenBacklog 指令限制的最大值为止（默认 ListenBacklog 511）\n* ***ServerLimit：*** 该值表示Apache允许创建的最大进程数。值得注意的是 Apache在编译的时候会有一个硬限制 ServerLimit 20000 ，你不能超过该值。该值如果设置过高，将会有过多的内存被分配，可能会导致Apache 无法启动或者不稳定的情况。\n\n## 简单测试对比\n\n对上面三种模式，我们做简单的测试进行对比。\n\n### 静态页面\n```\n./ab -k -c 200 -n 200000 192.168.1.234/index.html\n```\n\n结果：\n```\nprefork：9556QPS\nworker ：11038QPS\nevent ：10224QPS\n```\n### PHP页面\n```\n./ab -k -c 200 -n 200000 192.168.1.234/index.php  #echo \"hello world\";\n```\n结果：\n```\nprefork：6094QPS\nworker ：7411QPS\nevent ：7089QPS\n```\n","source":"_posts/Apache多处理模块整理.md","raw":"---\ntitle: Apache 并行处理模块小结\ndate: 2016-08-22 22:36:00\ntags:\n- Apache Apache性能优化\ncategories:\n- Apache\n---\nApache 2.X  支持插入式并行处理模块，称为多路处理模块 MPM，（Multi-Processing Modules）它是一个用于选择和处理网络端口的绑定，接收请求并指派子进程处理来自客户端的请求的一个Apache模块。和其他Apache模块相比，它最大的区别是，在任何时间， 必须有一个，而且只有一个 MPM 加载到服务器中。\n> 原理就是增加服务器服务进程或线程数量，是服务器可同时处理更多用户请求。\n\n<!-- more -->\n\n## 如何为Apache选择并安装一个合适的MPM模块\n\n### 安装\nMPM 必须在编译前夕，配置时指定，然后编译到服务器程序中。\n\n即在执行 configure 时，使用参数 --with-mpm=NAME 来指定一个希望安装的MPM模块。NAME 是指定的 MPM 名称。\n\n例：\n```\n./configure --prefix=/usr/local/apache2 --with-mpm=worker\nmake & make install\n```\n或者也可以编译为支持指定的几种或者全部MPM，之后通过修改配置来更换具体使用哪种MPM。\n```\n--enable-mpms-shared='prefork worker'\n--enable-mpms-shared=all\n```\n\n例：\n```\n./configure --prefix=/usr/local/apache2 --enable-mpms-shared=all\n···\n```\n安装成功之后，会在modules文件夹下，自动编译出我们指定的MPM的so模块，在httpd.conf中修改Apache的多处理模式MPM可以切换不同MPM模块：\n```\n#LoadModule mpm_prefork_module modules/mod_mpm_prefork.so\nLoadModule mpm_worker_module modules/mod_mpm_worker.so\n#LoadModule mpm_event_module modules/mod_mpm_event.so\n```\n### 如何查看当前使用的是哪种MPM模块\n\n1. 使用 ./httpd -l 来确定选择的 MPM。 此命令会列出编译到服务器程序中的所有模块，包括 MPM。例：\n```\n$ httpd -l\nCompiled in modules:\n  core.c\n  mod_so.c\n  http_core.c\n  prefork.c\n```\n  如上显示，我们呢当前安装的是以prefork方式工作的MPM模块。\n\n2. 使用./httpd -V 来确定当前使用的MPM模块。\n```\n$ httpd -V\nServer version: Apache/2.4.18 (Unix)\nServer built:   Feb 20 2016 20:03:19\nServer's Module Magic Number: 20120211:52\nServer loaded:  APR 1.4.8, APR-UTIL 1.5.2\nCompiled using: APR 1.4.8, APR-UTIL 1.5.2\nArchitecture:   64-bit\nServer MPM:     prefork\n  threaded:     no\n    forked:     yes (variable process count)\nServer compiled with....\n -D APR_HAS_SENDFILE\n -D APR_HAS_MMAP\n -D APR_HAVE_IPV6 (IPv4-mapped addresses enabled)\n -D APR_USE_FLOCK_SERIALIZE\n -D APR_USE_PTHREAD_SERIALIZE\n -D SINGLE_LISTEN_UNSERIALIZED_ACCEPT\n -D APR_HAS_OTHER_CHILD\n -D AP_HAVE_RELIABLE_PIPED_LOGS\n -D DYNAMIC_MODULE_LIMIT=256\n -D HTTPD_ROOT=\"/usr\"\n -D SUEXEC_BIN=\"/usr/bin/suexec\"\n -D DEFAULT_PIDLOG=\"/private/var/run/httpd.pid\"\n -D DEFAULT_SCOREBOARD=\"logs/apache_runtime_status\"\n -D DEFAULT_ERRORLOG=\"logs/error_log\"\n -D AP_TYPES_CONFIG_FILE=\"/private/etc/apache2/mime.types\"\n -D SERVER_CONFIG_FILE=\"/private/etc/apache2/httpd.conf\"\n```\n\n\n## 常见的几种MPM模块以及它们之间的区别\n如果我们在编译的时候没有明确选择使用哪种MPM模块，那么Apache将会根据不同的系统选择不同的MPM模块进行编译安装。\n\n系统  | 默认MPM\n-----|-------\nBeOS |beos\nNetware|mpm_netware\nOS/2\t|mpmt_os2\nUnix\t|prefork\nWindows\t|mpm_winnt\n\n对于类UNIX系统，根据不同的场景需要我们可以选择使用不同的MPM模块。\n* prefork\n* worker\n* event\n\n### prefork MPM\n> 非线程型的、预派生的MPM\n\n**原理：** 启动之初，就预先fork一些子进程，然后等待请求进来。\n```\n# prefork MPM\n# StartServers: number of server processes to start\n# MinSpareServers: minimum number of server processes which are kept spare\n# MaxSpareServers: maximum number of server processes which are kept spare\n# MaxRequestWorkers: maximum number of server processes allowed to start\n# MaxConnectionsPerChild: maximum number of connections a server process serves\n#                         before terminating\n<IfModule mpm_prefork_module>\n    StartServers             1  #推荐 小=默认，中=20~50，大=50~100\n    MinSpareServers          1  #推荐 与 StartServers 保持一致\n    MaxSpareServers         10  #推荐 小=20，中=30~80，大=80~120\n    MaxRequestWorkers      250  #推荐 小=500，中=500~1500，大=1500~3000\n    MaxConnectionsPerChild   0  #推荐 小=10000，中或大10000~50000\n    #ServerLimit           250  #推荐 与 MaxRequestWorkers 保持一致，当MaxRequestWorkers 值超过256，则需要增加该值配置\n</IfModule>\n```\n启动时建立`StartServers`个子进程，然后按每秒创建指数级个进程数，直到达到`MinSpareServers`个进程（最多增到每秒32个）。如果空闲进程大于`MaxSpareServers`，则检查kill掉一些空闲进程。\n\n`MaxRequestWorkers`指定Apache最多可以同时同时处理的请求数，即进程数，当请求数多余这个值之后，多余的请求就会进入请求队列等待处理（默认不能大于256）。但可以通过设定ServerLimit来增大限制数，serverlimit最大为20000。apache2.3.1之前的版本该参数叫 MaxClients 。当我们的服务器资源很多，但访问却很慢时，我们就可以试一下增大该值，来提高服务器的请求处理能力。\n`MaxConnectionsPerChild`每个子进程可处理的请求数。处理完之后子进程就会自动销毁。`0`表示无限，永不销毁。\n\n* 优点：成熟稳定，兼容所有新老模块。同时，不需要担心线程安全的问题。\n* 缺点：相对于线程，进程相对占用更多的系统资源，消耗更多的内存。所以不擅长处理高并发请求。\n\n\n### worker MPM\n> 支持混合的多线程、多进程的MPM。相比于prefork，worker采用了多进程和多线程混合模式，所以在使用中它占据更少的内存，在高并发情况下表现更优秀。\n\n```\n# worker MPM\n# StartServers: initial number of server processes to start\n# MinSpareThreads: minimum number of worker threads which are kept spare\n# MaxSpareThreads: maximum number of worker threads which are kept spare\n# ThreadsPerChild: constant umber of worker threads in each server process\n# MaxRequestWorkers: maximum number of worker threads\n# MaxConnectionsPerChild: maximum number of connections a server process serves\n#                         before terminating\n<IfModule mpm_worker_module>\n    StartServers             3  #推荐 小=默认，中=3~5，大=5~10\n    MinSpareThreads         75  #推荐 小=默认，中=50~100，大=100~200\n    MaxSpareThreads        250  #推荐 小=默认，中=80~160，大=200~400\n    ThreadsPerChild         25  #推荐 小=默认，中=50~100，大=100~200\n    MaxRequestWorkers      400  #推荐 小=500，中=500~1500，大=1500~3000\n    MaxConnectionsPerChild   0  #推荐 小=10000，中或大=10000~50000\n    #ServerLimit           250  #推荐 当 MaxRequestWorkers/ThreadsPerChild 大于16时，则需要增加该值配置。并且该值必须大于等于MaxRequestWorkers/ThreadsPerChild 的值\n</IfModule>\n\n```\n`ThreadsPerChild` 每个进程包含线程数\n`MaxSpareThreads` 定义最大空闲线程数，超过则清理\n\n* 优点：占用更少系统资源，高并发情况下表现更优秀。\n* 缺点：必须考虑线程安全的问题。\n\n### event MPM\n> worker方式的升级版，也采用多进程和多线程混合模式，并且解决了在 `keep-alive` 情况下，长期被占用的线程的资源浪费问题。\n\n```\n# event MPM\n# StartServers: initial number of server processes to start\n# MinSpareThreads: minimum number of worker threads which are kept spare\n# MaxSpareThreads: maximum number of worker threads which are kept spare\n# ThreadsPerChild: constant number of worker threads in each server process\n# MaxRequestWorkers: maximum number of worker threads\n# MaxConnectionsPerChild: maximum number of connections a server process serves\n#                         before terminating\n<IfModule mpm_event_module>\n    StartServers             3\n    MinSpareThreads         75\n    MaxSpareThreads        250\n    ThreadsPerChild         25\n    MaxRequestWorkers      400\n    MaxConnectionsPerChild   0\n</IfModule>\n\n```\n\n\n* 优点：更好的高并发请求处理能力。\n* 缺点：兼容性问题可能不是很好（最新的官方自带的模块，已经全部支持event MPM了），需要Linux系统（Linux 2.6+）对EPoll的支持，才能启用\n\n\n**Tips：**\n* ***空闲子进程：*** 即没有正在处理请求的子进程。\n* ***请求等待队列：*** 任何超过 MaxClients 或 MaxRequestWorkers 限制的请求都将进入到等待队列，直到收到 ListenBacklog 指令限制的最大值为止（默认 ListenBacklog 511）\n* ***ServerLimit：*** 该值表示Apache允许创建的最大进程数。值得注意的是 Apache在编译的时候会有一个硬限制 ServerLimit 20000 ，你不能超过该值。该值如果设置过高，将会有过多的内存被分配，可能会导致Apache 无法启动或者不稳定的情况。\n\n## 简单测试对比\n\n对上面三种模式，我们做简单的测试进行对比。\n\n### 静态页面\n```\n./ab -k -c 200 -n 200000 192.168.1.234/index.html\n```\n\n结果：\n```\nprefork：9556QPS\nworker ：11038QPS\nevent ：10224QPS\n```\n### PHP页面\n```\n./ab -k -c 200 -n 200000 192.168.1.234/index.php  #echo \"hello world\";\n```\n结果：\n```\nprefork：6094QPS\nworker ：7411QPS\nevent ：7089QPS\n```\n","slug":"Apache多处理模块整理","published":1,"updated":"2016-08-24T03:16:32.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"city8vnmi0001g29fh2gbrijp","content":"<p>Apache 2.X  支持插入式并行处理模块，称为多路处理模块 MPM，（Multi-Processing Modules）它是一个用于选择和处理网络端口的绑定，接收请求并指派子进程处理来自客户端的请求的一个Apache模块。和其他Apache模块相比，它最大的区别是，在任何时间， 必须有一个，而且只有一个 MPM 加载到服务器中。</p>\n<blockquote>\n<p>原理就是增加服务器服务进程或线程数量，是服务器可同时处理更多用户请求。</p>\n</blockquote>\n<a id=\"more\"></a>\n<h2 id=\"如何为Apache选择并安装一个合适的MPM模块\"><a href=\"#如何为Apache选择并安装一个合适的MPM模块\" class=\"headerlink\" title=\"如何为Apache选择并安装一个合适的MPM模块\"></a>如何为Apache选择并安装一个合适的MPM模块</h2><h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><p>MPM 必须在编译前夕，配置时指定，然后编译到服务器程序中。</p>\n<p>即在执行 configure 时，使用参数 –with-mpm=NAME 来指定一个希望安装的MPM模块。NAME 是指定的 MPM 名称。</p>\n<p>例：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">./configure --prefix=/usr/local/apache2 --with-mpm=worker</div><div class=\"line\">make &amp; make install</div></pre></td></tr></table></figure></p>\n<p>或者也可以编译为支持指定的几种或者全部MPM，之后通过修改配置来更换具体使用哪种MPM。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">--enable-mpms-shared=&apos;prefork worker&apos;</div><div class=\"line\">--enable-mpms-shared=all</div></pre></td></tr></table></figure></p>\n<p>例：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">./configure --prefix=/usr/local/apache2 --enable-mpms-shared=all</div><div class=\"line\">···</div></pre></td></tr></table></figure></p>\n<p>安装成功之后，会在modules文件夹下，自动编译出我们指定的MPM的so模块，在httpd.conf中修改Apache的多处理模式MPM可以切换不同MPM模块：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">#LoadModule mpm_prefork_module modules/mod_mpm_prefork.so</div><div class=\"line\">LoadModule mpm_worker_module modules/mod_mpm_worker.so</div><div class=\"line\">#LoadModule mpm_event_module modules/mod_mpm_event.so</div></pre></td></tr></table></figure></p>\n<h3 id=\"如何查看当前使用的是哪种MPM模块\"><a href=\"#如何查看当前使用的是哪种MPM模块\" class=\"headerlink\" title=\"如何查看当前使用的是哪种MPM模块\"></a>如何查看当前使用的是哪种MPM模块</h3><ol>\n<li><p>使用 ./httpd -l 来确定选择的 MPM。 此命令会列出编译到服务器程序中的所有模块，包括 MPM。例：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ httpd -l</div><div class=\"line\">Compiled in modules:</div><div class=\"line\">  core.c</div><div class=\"line\">  mod_so.c</div><div class=\"line\">  http_core.c</div><div class=\"line\">  prefork.c</div></pre></td></tr></table></figure>\n<p>如上显示，我们呢当前安装的是以prefork方式工作的MPM模块。</p>\n</li>\n<li><p>使用./httpd -V 来确定当前使用的MPM模块。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ httpd -V</div><div class=\"line\">Server version: Apache/2.4.18 (Unix)</div><div class=\"line\">Server built:   Feb 20 2016 20:03:19</div><div class=\"line\">Server&apos;s Module Magic Number: 20120211:52</div><div class=\"line\">Server loaded:  APR 1.4.8, APR-UTIL 1.5.2</div><div class=\"line\">Compiled using: APR 1.4.8, APR-UTIL 1.5.2</div><div class=\"line\">Architecture:   64-bit</div><div class=\"line\">Server MPM:     prefork</div><div class=\"line\">  threaded:     no</div><div class=\"line\">    forked:     yes (variable process count)</div><div class=\"line\">Server compiled with....</div><div class=\"line\"> -D APR_HAS_SENDFILE</div><div class=\"line\"> -D APR_HAS_MMAP</div><div class=\"line\"> -D APR_HAVE_IPV6 (IPv4-mapped addresses enabled)</div><div class=\"line\"> -D APR_USE_FLOCK_SERIALIZE</div><div class=\"line\"> -D APR_USE_PTHREAD_SERIALIZE</div><div class=\"line\"> -D SINGLE_LISTEN_UNSERIALIZED_ACCEPT</div><div class=\"line\"> -D APR_HAS_OTHER_CHILD</div><div class=\"line\"> -D AP_HAVE_RELIABLE_PIPED_LOGS</div><div class=\"line\"> -D DYNAMIC_MODULE_LIMIT=256</div><div class=\"line\"> -D HTTPD_ROOT=&quot;/usr&quot;</div><div class=\"line\"> -D SUEXEC_BIN=&quot;/usr/bin/suexec&quot;</div><div class=\"line\"> -D DEFAULT_PIDLOG=&quot;/private/var/run/httpd.pid&quot;</div><div class=\"line\"> -D DEFAULT_SCOREBOARD=&quot;logs/apache_runtime_status&quot;</div><div class=\"line\"> -D DEFAULT_ERRORLOG=&quot;logs/error_log&quot;</div><div class=\"line\"> -D AP_TYPES_CONFIG_FILE=&quot;/private/etc/apache2/mime.types&quot;</div><div class=\"line\"> -D SERVER_CONFIG_FILE=&quot;/private/etc/apache2/httpd.conf&quot;</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<h2 id=\"常见的几种MPM模块以及它们之间的区别\"><a href=\"#常见的几种MPM模块以及它们之间的区别\" class=\"headerlink\" title=\"常见的几种MPM模块以及它们之间的区别\"></a>常见的几种MPM模块以及它们之间的区别</h2><p>如果我们在编译的时候没有明确选择使用哪种MPM模块，那么Apache将会根据不同的系统选择不同的MPM模块进行编译安装。</p>\n<table>\n<thead>\n<tr>\n<th>系统</th>\n<th>默认MPM</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>BeOS</td>\n<td>beos</td>\n</tr>\n<tr>\n<td>Netware</td>\n<td>mpm_netware</td>\n</tr>\n<tr>\n<td>OS/2</td>\n<td>mpmt_os2</td>\n</tr>\n<tr>\n<td>Unix</td>\n<td>prefork</td>\n</tr>\n<tr>\n<td>Windows</td>\n<td>mpm_winnt</td>\n</tr>\n</tbody>\n</table>\n<p>对于类UNIX系统，根据不同的场景需要我们可以选择使用不同的MPM模块。</p>\n<ul>\n<li>prefork</li>\n<li>worker</li>\n<li>event</li>\n</ul>\n<h3 id=\"prefork-MPM\"><a href=\"#prefork-MPM\" class=\"headerlink\" title=\"prefork MPM\"></a>prefork MPM</h3><blockquote>\n<p>非线程型的、预派生的MPM</p>\n</blockquote>\n<p><strong>原理：</strong> 启动之初，就预先fork一些子进程，然后等待请求进来。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"># prefork MPM</div><div class=\"line\"># StartServers: number of server processes to start</div><div class=\"line\"># MinSpareServers: minimum number of server processes which are kept spare</div><div class=\"line\"># MaxSpareServers: maximum number of server processes which are kept spare</div><div class=\"line\"># MaxRequestWorkers: maximum number of server processes allowed to start</div><div class=\"line\"># MaxConnectionsPerChild: maximum number of connections a server process serves</div><div class=\"line\">#                         before terminating</div><div class=\"line\">&lt;IfModule mpm_prefork_module&gt;</div><div class=\"line\">    StartServers             1  #推荐 小=默认，中=20~50，大=50~100</div><div class=\"line\">    MinSpareServers          1  #推荐 与 StartServers 保持一致</div><div class=\"line\">    MaxSpareServers         10  #推荐 小=20，中=30~80，大=80~120</div><div class=\"line\">    MaxRequestWorkers      250  #推荐 小=500，中=500~1500，大=1500~3000</div><div class=\"line\">    MaxConnectionsPerChild   0  #推荐 小=10000，中或大10000~50000</div><div class=\"line\">    #ServerLimit           250  #推荐 与 MaxRequestWorkers 保持一致，当MaxRequestWorkers 值超过256，则需要增加该值配置</div><div class=\"line\">&lt;/IfModule&gt;</div></pre></td></tr></table></figure></p>\n<p>启动时建立<code>StartServers</code>个子进程，然后按每秒创建指数级个进程数，直到达到<code>MinSpareServers</code>个进程（最多增到每秒32个）。如果空闲进程大于<code>MaxSpareServers</code>，则检查kill掉一些空闲进程。</p>\n<p><code>MaxRequestWorkers</code>指定Apache最多可以同时同时处理的请求数，即进程数，当请求数多余这个值之后，多余的请求就会进入请求队列等待处理（默认不能大于256）。但可以通过设定ServerLimit来增大限制数，serverlimit最大为20000。apache2.3.1之前的版本该参数叫 MaxClients 。当我们的服务器资源很多，但访问却很慢时，我们就可以试一下增大该值，来提高服务器的请求处理能力。<br><code>MaxConnectionsPerChild</code>每个子进程可处理的请求数。处理完之后子进程就会自动销毁。<code>0</code>表示无限，永不销毁。</p>\n<ul>\n<li>优点：成熟稳定，兼容所有新老模块。同时，不需要担心线程安全的问题。</li>\n<li>缺点：相对于线程，进程相对占用更多的系统资源，消耗更多的内存。所以不擅长处理高并发请求。</li>\n</ul>\n<h3 id=\"worker-MPM\"><a href=\"#worker-MPM\" class=\"headerlink\" title=\"worker MPM\"></a>worker MPM</h3><blockquote>\n<p>支持混合的多线程、多进程的MPM。相比于prefork，worker采用了多进程和多线程混合模式，所以在使用中它占据更少的内存，在高并发情况下表现更优秀。</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"># worker MPM</div><div class=\"line\"># StartServers: initial number of server processes to start</div><div class=\"line\"># MinSpareThreads: minimum number of worker threads which are kept spare</div><div class=\"line\"># MaxSpareThreads: maximum number of worker threads which are kept spare</div><div class=\"line\"># ThreadsPerChild: constant umber of worker threads in each server process</div><div class=\"line\"># MaxRequestWorkers: maximum number of worker threads</div><div class=\"line\"># MaxConnectionsPerChild: maximum number of connections a server process serves</div><div class=\"line\">#                         before terminating</div><div class=\"line\">&lt;IfModule mpm_worker_module&gt;</div><div class=\"line\">    StartServers             3  #推荐 小=默认，中=3~5，大=5~10</div><div class=\"line\">    MinSpareThreads         75  #推荐 小=默认，中=50~100，大=100~200</div><div class=\"line\">    MaxSpareThreads        250  #推荐 小=默认，中=80~160，大=200~400</div><div class=\"line\">    ThreadsPerChild         25  #推荐 小=默认，中=50~100，大=100~200</div><div class=\"line\">    MaxRequestWorkers      400  #推荐 小=500，中=500~1500，大=1500~3000</div><div class=\"line\">    MaxConnectionsPerChild   0  #推荐 小=10000，中或大=10000~50000</div><div class=\"line\">    #ServerLimit           250  #推荐 当 MaxRequestWorkers/ThreadsPerChild 大于16时，则需要增加该值配置。并且该值必须大于等于MaxRequestWorkers/ThreadsPerChild 的值</div><div class=\"line\">&lt;/IfModule&gt;</div></pre></td></tr></table></figure>\n<p><code>ThreadsPerChild</code> 每个进程包含线程数<br><code>MaxSpareThreads</code> 定义最大空闲线程数，超过则清理</p>\n<ul>\n<li>优点：占用更少系统资源，高并发情况下表现更优秀。</li>\n<li>缺点：必须考虑线程安全的问题。</li>\n</ul>\n<h3 id=\"event-MPM\"><a href=\"#event-MPM\" class=\"headerlink\" title=\"event MPM\"></a>event MPM</h3><blockquote>\n<p>worker方式的升级版，也采用多进程和多线程混合模式，并且解决了在 <code>keep-alive</code> 情况下，长期被占用的线程的资源浪费问题。</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"># event MPM</div><div class=\"line\"># StartServers: initial number of server processes to start</div><div class=\"line\"># MinSpareThreads: minimum number of worker threads which are kept spare</div><div class=\"line\"># MaxSpareThreads: maximum number of worker threads which are kept spare</div><div class=\"line\"># ThreadsPerChild: constant number of worker threads in each server process</div><div class=\"line\"># MaxRequestWorkers: maximum number of worker threads</div><div class=\"line\"># MaxConnectionsPerChild: maximum number of connections a server process serves</div><div class=\"line\">#                         before terminating</div><div class=\"line\">&lt;IfModule mpm_event_module&gt;</div><div class=\"line\">    StartServers             3</div><div class=\"line\">    MinSpareThreads         75</div><div class=\"line\">    MaxSpareThreads        250</div><div class=\"line\">    ThreadsPerChild         25</div><div class=\"line\">    MaxRequestWorkers      400</div><div class=\"line\">    MaxConnectionsPerChild   0</div><div class=\"line\">&lt;/IfModule&gt;</div></pre></td></tr></table></figure>\n<ul>\n<li>优点：更好的高并发请求处理能力。</li>\n<li>缺点：兼容性问题可能不是很好（最新的官方自带的模块，已经全部支持event MPM了），需要Linux系统（Linux 2.6+）对EPoll的支持，才能启用</li>\n</ul>\n<p><strong>Tips：</strong></p>\n<ul>\n<li><strong><em>空闲子进程：</em></strong> 即没有正在处理请求的子进程。</li>\n<li><strong><em>请求等待队列：</em></strong> 任何超过 MaxClients 或 MaxRequestWorkers 限制的请求都将进入到等待队列，直到收到 ListenBacklog 指令限制的最大值为止（默认 ListenBacklog 511）</li>\n<li><strong><em>ServerLimit：</em></strong> 该值表示Apache允许创建的最大进程数。值得注意的是 Apache在编译的时候会有一个硬限制 ServerLimit 20000 ，你不能超过该值。该值如果设置过高，将会有过多的内存被分配，可能会导致Apache 无法启动或者不稳定的情况。</li>\n</ul>\n<h2 id=\"简单测试对比\"><a href=\"#简单测试对比\" class=\"headerlink\" title=\"简单测试对比\"></a>简单测试对比</h2><p>对上面三种模式，我们做简单的测试进行对比。</p>\n<h3 id=\"静态页面\"><a href=\"#静态页面\" class=\"headerlink\" title=\"静态页面\"></a>静态页面</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">./ab -k -c 200 -n 200000 192.168.1.234/index.html</div></pre></td></tr></table></figure>\n<p>结果：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">prefork：9556QPS</div><div class=\"line\">worker ：11038QPS</div><div class=\"line\">event ：10224QPS</div></pre></td></tr></table></figure></p>\n<h3 id=\"PHP页面\"><a href=\"#PHP页面\" class=\"headerlink\" title=\"PHP页面\"></a>PHP页面</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">./ab -k -c 200 -n 200000 192.168.1.234/index.php  #echo &quot;hello world&quot;;</div></pre></td></tr></table></figure>\n<p>结果：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">prefork：6094QPS</div><div class=\"line\">worker ：7411QPS</div><div class=\"line\">event ：7089QPS</div></pre></td></tr></table></figure></p>\n","excerpt":"<p>Apache 2.X  支持插入式并行处理模块，称为多路处理模块 MPM，（Multi-Processing Modules）它是一个用于选择和处理网络端口的绑定，接收请求并指派子进程处理来自客户端的请求的一个Apache模块。和其他Apache模块相比，它最大的区别是，在任何时间， 必须有一个，而且只有一个 MPM 加载到服务器中。</p>\n<blockquote>\n<p>原理就是增加服务器服务进程或线程数量，是服务器可同时处理更多用户请求。</p>\n</blockquote>","more":"<h2 id=\"如何为Apache选择并安装一个合适的MPM模块\"><a href=\"#如何为Apache选择并安装一个合适的MPM模块\" class=\"headerlink\" title=\"如何为Apache选择并安装一个合适的MPM模块\"></a>如何为Apache选择并安装一个合适的MPM模块</h2><h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><p>MPM 必须在编译前夕，配置时指定，然后编译到服务器程序中。</p>\n<p>即在执行 configure 时，使用参数 –with-mpm=NAME 来指定一个希望安装的MPM模块。NAME 是指定的 MPM 名称。</p>\n<p>例：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">./configure --prefix=/usr/local/apache2 --with-mpm=worker</div><div class=\"line\">make &amp; make install</div></pre></td></tr></table></figure></p>\n<p>或者也可以编译为支持指定的几种或者全部MPM，之后通过修改配置来更换具体使用哪种MPM。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">--enable-mpms-shared=&apos;prefork worker&apos;</div><div class=\"line\">--enable-mpms-shared=all</div></pre></td></tr></table></figure></p>\n<p>例：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">./configure --prefix=/usr/local/apache2 --enable-mpms-shared=all</div><div class=\"line\">···</div></pre></td></tr></table></figure></p>\n<p>安装成功之后，会在modules文件夹下，自动编译出我们指定的MPM的so模块，在httpd.conf中修改Apache的多处理模式MPM可以切换不同MPM模块：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">#LoadModule mpm_prefork_module modules/mod_mpm_prefork.so</div><div class=\"line\">LoadModule mpm_worker_module modules/mod_mpm_worker.so</div><div class=\"line\">#LoadModule mpm_event_module modules/mod_mpm_event.so</div></pre></td></tr></table></figure></p>\n<h3 id=\"如何查看当前使用的是哪种MPM模块\"><a href=\"#如何查看当前使用的是哪种MPM模块\" class=\"headerlink\" title=\"如何查看当前使用的是哪种MPM模块\"></a>如何查看当前使用的是哪种MPM模块</h3><ol>\n<li><p>使用 ./httpd -l 来确定选择的 MPM。 此命令会列出编译到服务器程序中的所有模块，包括 MPM。例：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ httpd -l</div><div class=\"line\">Compiled in modules:</div><div class=\"line\">  core.c</div><div class=\"line\">  mod_so.c</div><div class=\"line\">  http_core.c</div><div class=\"line\">  prefork.c</div></pre></td></tr></table></figure>\n<p>如上显示，我们呢当前安装的是以prefork方式工作的MPM模块。</p>\n</li>\n<li><p>使用./httpd -V 来确定当前使用的MPM模块。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ httpd -V</div><div class=\"line\">Server version: Apache/2.4.18 (Unix)</div><div class=\"line\">Server built:   Feb 20 2016 20:03:19</div><div class=\"line\">Server&apos;s Module Magic Number: 20120211:52</div><div class=\"line\">Server loaded:  APR 1.4.8, APR-UTIL 1.5.2</div><div class=\"line\">Compiled using: APR 1.4.8, APR-UTIL 1.5.2</div><div class=\"line\">Architecture:   64-bit</div><div class=\"line\">Server MPM:     prefork</div><div class=\"line\">  threaded:     no</div><div class=\"line\">    forked:     yes (variable process count)</div><div class=\"line\">Server compiled with....</div><div class=\"line\"> -D APR_HAS_SENDFILE</div><div class=\"line\"> -D APR_HAS_MMAP</div><div class=\"line\"> -D APR_HAVE_IPV6 (IPv4-mapped addresses enabled)</div><div class=\"line\"> -D APR_USE_FLOCK_SERIALIZE</div><div class=\"line\"> -D APR_USE_PTHREAD_SERIALIZE</div><div class=\"line\"> -D SINGLE_LISTEN_UNSERIALIZED_ACCEPT</div><div class=\"line\"> -D APR_HAS_OTHER_CHILD</div><div class=\"line\"> -D AP_HAVE_RELIABLE_PIPED_LOGS</div><div class=\"line\"> -D DYNAMIC_MODULE_LIMIT=256</div><div class=\"line\"> -D HTTPD_ROOT=&quot;/usr&quot;</div><div class=\"line\"> -D SUEXEC_BIN=&quot;/usr/bin/suexec&quot;</div><div class=\"line\"> -D DEFAULT_PIDLOG=&quot;/private/var/run/httpd.pid&quot;</div><div class=\"line\"> -D DEFAULT_SCOREBOARD=&quot;logs/apache_runtime_status&quot;</div><div class=\"line\"> -D DEFAULT_ERRORLOG=&quot;logs/error_log&quot;</div><div class=\"line\"> -D AP_TYPES_CONFIG_FILE=&quot;/private/etc/apache2/mime.types&quot;</div><div class=\"line\"> -D SERVER_CONFIG_FILE=&quot;/private/etc/apache2/httpd.conf&quot;</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<h2 id=\"常见的几种MPM模块以及它们之间的区别\"><a href=\"#常见的几种MPM模块以及它们之间的区别\" class=\"headerlink\" title=\"常见的几种MPM模块以及它们之间的区别\"></a>常见的几种MPM模块以及它们之间的区别</h2><p>如果我们在编译的时候没有明确选择使用哪种MPM模块，那么Apache将会根据不同的系统选择不同的MPM模块进行编译安装。</p>\n<table>\n<thead>\n<tr>\n<th>系统</th>\n<th>默认MPM</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>BeOS</td>\n<td>beos</td>\n</tr>\n<tr>\n<td>Netware</td>\n<td>mpm_netware</td>\n</tr>\n<tr>\n<td>OS/2</td>\n<td>mpmt_os2</td>\n</tr>\n<tr>\n<td>Unix</td>\n<td>prefork</td>\n</tr>\n<tr>\n<td>Windows</td>\n<td>mpm_winnt</td>\n</tr>\n</tbody>\n</table>\n<p>对于类UNIX系统，根据不同的场景需要我们可以选择使用不同的MPM模块。</p>\n<ul>\n<li>prefork</li>\n<li>worker</li>\n<li>event</li>\n</ul>\n<h3 id=\"prefork-MPM\"><a href=\"#prefork-MPM\" class=\"headerlink\" title=\"prefork MPM\"></a>prefork MPM</h3><blockquote>\n<p>非线程型的、预派生的MPM</p>\n</blockquote>\n<p><strong>原理：</strong> 启动之初，就预先fork一些子进程，然后等待请求进来。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"># prefork MPM</div><div class=\"line\"># StartServers: number of server processes to start</div><div class=\"line\"># MinSpareServers: minimum number of server processes which are kept spare</div><div class=\"line\"># MaxSpareServers: maximum number of server processes which are kept spare</div><div class=\"line\"># MaxRequestWorkers: maximum number of server processes allowed to start</div><div class=\"line\"># MaxConnectionsPerChild: maximum number of connections a server process serves</div><div class=\"line\">#                         before terminating</div><div class=\"line\">&lt;IfModule mpm_prefork_module&gt;</div><div class=\"line\">    StartServers             1  #推荐 小=默认，中=20~50，大=50~100</div><div class=\"line\">    MinSpareServers          1  #推荐 与 StartServers 保持一致</div><div class=\"line\">    MaxSpareServers         10  #推荐 小=20，中=30~80，大=80~120</div><div class=\"line\">    MaxRequestWorkers      250  #推荐 小=500，中=500~1500，大=1500~3000</div><div class=\"line\">    MaxConnectionsPerChild   0  #推荐 小=10000，中或大10000~50000</div><div class=\"line\">    #ServerLimit           250  #推荐 与 MaxRequestWorkers 保持一致，当MaxRequestWorkers 值超过256，则需要增加该值配置</div><div class=\"line\">&lt;/IfModule&gt;</div></pre></td></tr></table></figure></p>\n<p>启动时建立<code>StartServers</code>个子进程，然后按每秒创建指数级个进程数，直到达到<code>MinSpareServers</code>个进程（最多增到每秒32个）。如果空闲进程大于<code>MaxSpareServers</code>，则检查kill掉一些空闲进程。</p>\n<p><code>MaxRequestWorkers</code>指定Apache最多可以同时同时处理的请求数，即进程数，当请求数多余这个值之后，多余的请求就会进入请求队列等待处理（默认不能大于256）。但可以通过设定ServerLimit来增大限制数，serverlimit最大为20000。apache2.3.1之前的版本该参数叫 MaxClients 。当我们的服务器资源很多，但访问却很慢时，我们就可以试一下增大该值，来提高服务器的请求处理能力。<br><code>MaxConnectionsPerChild</code>每个子进程可处理的请求数。处理完之后子进程就会自动销毁。<code>0</code>表示无限，永不销毁。</p>\n<ul>\n<li>优点：成熟稳定，兼容所有新老模块。同时，不需要担心线程安全的问题。</li>\n<li>缺点：相对于线程，进程相对占用更多的系统资源，消耗更多的内存。所以不擅长处理高并发请求。</li>\n</ul>\n<h3 id=\"worker-MPM\"><a href=\"#worker-MPM\" class=\"headerlink\" title=\"worker MPM\"></a>worker MPM</h3><blockquote>\n<p>支持混合的多线程、多进程的MPM。相比于prefork，worker采用了多进程和多线程混合模式，所以在使用中它占据更少的内存，在高并发情况下表现更优秀。</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"># worker MPM</div><div class=\"line\"># StartServers: initial number of server processes to start</div><div class=\"line\"># MinSpareThreads: minimum number of worker threads which are kept spare</div><div class=\"line\"># MaxSpareThreads: maximum number of worker threads which are kept spare</div><div class=\"line\"># ThreadsPerChild: constant umber of worker threads in each server process</div><div class=\"line\"># MaxRequestWorkers: maximum number of worker threads</div><div class=\"line\"># MaxConnectionsPerChild: maximum number of connections a server process serves</div><div class=\"line\">#                         before terminating</div><div class=\"line\">&lt;IfModule mpm_worker_module&gt;</div><div class=\"line\">    StartServers             3  #推荐 小=默认，中=3~5，大=5~10</div><div class=\"line\">    MinSpareThreads         75  #推荐 小=默认，中=50~100，大=100~200</div><div class=\"line\">    MaxSpareThreads        250  #推荐 小=默认，中=80~160，大=200~400</div><div class=\"line\">    ThreadsPerChild         25  #推荐 小=默认，中=50~100，大=100~200</div><div class=\"line\">    MaxRequestWorkers      400  #推荐 小=500，中=500~1500，大=1500~3000</div><div class=\"line\">    MaxConnectionsPerChild   0  #推荐 小=10000，中或大=10000~50000</div><div class=\"line\">    #ServerLimit           250  #推荐 当 MaxRequestWorkers/ThreadsPerChild 大于16时，则需要增加该值配置。并且该值必须大于等于MaxRequestWorkers/ThreadsPerChild 的值</div><div class=\"line\">&lt;/IfModule&gt;</div></pre></td></tr></table></figure>\n<p><code>ThreadsPerChild</code> 每个进程包含线程数<br><code>MaxSpareThreads</code> 定义最大空闲线程数，超过则清理</p>\n<ul>\n<li>优点：占用更少系统资源，高并发情况下表现更优秀。</li>\n<li>缺点：必须考虑线程安全的问题。</li>\n</ul>\n<h3 id=\"event-MPM\"><a href=\"#event-MPM\" class=\"headerlink\" title=\"event MPM\"></a>event MPM</h3><blockquote>\n<p>worker方式的升级版，也采用多进程和多线程混合模式，并且解决了在 <code>keep-alive</code> 情况下，长期被占用的线程的资源浪费问题。</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"># event MPM</div><div class=\"line\"># StartServers: initial number of server processes to start</div><div class=\"line\"># MinSpareThreads: minimum number of worker threads which are kept spare</div><div class=\"line\"># MaxSpareThreads: maximum number of worker threads which are kept spare</div><div class=\"line\"># ThreadsPerChild: constant number of worker threads in each server process</div><div class=\"line\"># MaxRequestWorkers: maximum number of worker threads</div><div class=\"line\"># MaxConnectionsPerChild: maximum number of connections a server process serves</div><div class=\"line\">#                         before terminating</div><div class=\"line\">&lt;IfModule mpm_event_module&gt;</div><div class=\"line\">    StartServers             3</div><div class=\"line\">    MinSpareThreads         75</div><div class=\"line\">    MaxSpareThreads        250</div><div class=\"line\">    ThreadsPerChild         25</div><div class=\"line\">    MaxRequestWorkers      400</div><div class=\"line\">    MaxConnectionsPerChild   0</div><div class=\"line\">&lt;/IfModule&gt;</div></pre></td></tr></table></figure>\n<ul>\n<li>优点：更好的高并发请求处理能力。</li>\n<li>缺点：兼容性问题可能不是很好（最新的官方自带的模块，已经全部支持event MPM了），需要Linux系统（Linux 2.6+）对EPoll的支持，才能启用</li>\n</ul>\n<p><strong>Tips：</strong></p>\n<ul>\n<li><strong><em>空闲子进程：</em></strong> 即没有正在处理请求的子进程。</li>\n<li><strong><em>请求等待队列：</em></strong> 任何超过 MaxClients 或 MaxRequestWorkers 限制的请求都将进入到等待队列，直到收到 ListenBacklog 指令限制的最大值为止（默认 ListenBacklog 511）</li>\n<li><strong><em>ServerLimit：</em></strong> 该值表示Apache允许创建的最大进程数。值得注意的是 Apache在编译的时候会有一个硬限制 ServerLimit 20000 ，你不能超过该值。该值如果设置过高，将会有过多的内存被分配，可能会导致Apache 无法启动或者不稳定的情况。</li>\n</ul>\n<h2 id=\"简单测试对比\"><a href=\"#简单测试对比\" class=\"headerlink\" title=\"简单测试对比\"></a>简单测试对比</h2><p>对上面三种模式，我们做简单的测试进行对比。</p>\n<h3 id=\"静态页面\"><a href=\"#静态页面\" class=\"headerlink\" title=\"静态页面\"></a>静态页面</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">./ab -k -c 200 -n 200000 192.168.1.234/index.html</div></pre></td></tr></table></figure>\n<p>结果：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">prefork：9556QPS</div><div class=\"line\">worker ：11038QPS</div><div class=\"line\">event ：10224QPS</div></pre></td></tr></table></figure></p>\n<h3 id=\"PHP页面\"><a href=\"#PHP页面\" class=\"headerlink\" title=\"PHP页面\"></a>PHP页面</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">./ab -k -c 200 -n 200000 192.168.1.234/index.php  #echo &quot;hello world&quot;;</div></pre></td></tr></table></figure>\n<p>结果：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">prefork：6094QPS</div><div class=\"line\">worker ：7411QPS</div><div class=\"line\">event ：7089QPS</div></pre></td></tr></table></figure></p>"},{"title":"Apache中PHP支持模式小结","date":"2016-09-07T12:10:00.000Z","_content":"Apache通过不同的方式，能够实现对PHP支持。常见的几种支持方式有：\n- 模块支持（handler模式）\n- CGI模块\n- FastCGI模式，用Apache内置进程管理器\n- FastCGI模式，用php-fpm进程管理器\n\n<!-- more -->\n## Apache安装、PHP安装、mod_fastcgi模块安装\n### Apache 安装\n略过···\n### PHP 安装\n示例：安装PHP5.6\n\n1. 下载、解压\n```sh\n[root@iZ23a3ua2stZ ~]#wget http://cn2.php.net/distributions/php-5.6.25.tar.gz\n[root@iZ23a3ua2stZ ~]#tar -zxvf php-5.6.25.tar.gz\n```\n2. ./configure\n```sh\n[root@iZ23a3ua2stZ ~]#cd php-5.6.25\n[root@iZ23a3ua2stZ php-5.6.25]#./configure --with-apxs2=/usr/local/apache2/bin/apxs --with-mysql --enable-fpm --prefix=/usr/local/php5.6\n```\n  `--enable-fpm` 用来来激活对 FPM 的支持\n\n  `--with-apxs2` 该参数作用是把php的解释模块编译成so 文件，并自动添加到 Apache的modules中，并自动在 `httpd.conf` 中加入对应的加载指令`LoadModule php5_module modules/libphp5.so`\n> **报错1：** 在运行 `./configure` 时可能会报以下这样的错误。提示我们 运行不了 `apxs` 这个工具。\n\n  ```sh\nSorry, I cannot run apxs.  Possible reasons follow:\n1 Perl is not installed\n2 apxs was not found. Try to pass the path using --with-apxs2=/path/to/apxs\n3 Apache was not built using --enable-so (the apxs usage page is displayed)\nThe output of /usr/local/apache2/bin/apxs follows:\n./configure: /usr/local/apache2/bin/apxs: /replace/with/path/to/perl/interpreter: bad interpreter: No such file or directory\nconfigure: error: Aborting\n```\n> 之前我们在Apache模块化体系的小结中介绍过 `apxs` 实际是一个 perl 脚本。上面报错中 `/replace/with/path/to/perl/interpreter` 提示我们找不到这个文件，\n这行实际是 perl 脚本的声明，我们需要将它改成我们服务器perl脚本的地址。\n\n  ```sh\n[root@iZ23a3ua2stZ php-5.6.25]# which perl\n/usr/bin/perl\n[root@iZ23a3ua2stZ php-5.6.25]# vi /usr/local/apache2/bin/apxs\n#将第一行 `#!/replace/with/path/to/perl/interpreter` 改成 `#!/usr/bin/perl`\n```\n> **报错2：** configure: error: xml2-config not found. Please check your libxml2 installation.\n提示我们缺少 `libxml2`。安装 `libxml2`.\n```sh\n[root@iZ23a3ua2stZ php-5.6.25]#yum install libxml2\n[root@iZ23a3ua2stZ php-5.6.25]#yum install libxml2-devel -y\n```\n\n  `./configure` 成功会有如下显示。\n\n  ```sh\n+--------------------------------------------------------------------+\n| License:                                                           |\n| This software is subject to the PHP License, available in this     |\n| distribution in the file LICENSE.  By continuing this installation |\n| process, you are bound by the terms of this license agreement.     |\n| If you do not agree with the terms of this license, you must abort |\n| the installation process at this point.                            |\n+--------------------------------------------------------------------+\nThank you for using PHP.\nconfig.status: creating php5.spec\nconfig.status: creating main/build-defs.h\nconfig.status: creating scripts/phpize\nconfig.status: creating scripts/man1/phpize.1\nconfig.status: creating scripts/php-config\nconfig.status: creating scripts/man1/php-config.1\nconfig.status: creating sapi/cli/php.1\nconfig.status: creating sapi/fpm/php-fpm.conf\nconfig.status: creating sapi/fpm/init.d.php-fpm\nconfig.status: creating sapi/fpm/php-fpm.service\nconfig.status: creating sapi/fpm/php-fpm.8\nconfig.status: creating sapi/fpm/status.html\nconfig.status: creating sapi/cgi/php-cgi.1\nconfig.status: creating ext/phar/phar.1\nconfig.status: creating ext/phar/phar.phar.1\nconfig.status: creating main/php_config.h\n```\n\n3. 编译\n```sh\n[root@iZ23a3ua2stZ php-5.6.25]#make && make install\n```\n成功安装\n```\nBuild complete.\nDon't forget to run 'make test'.\nInstalling PHP SAPI module:       apache2handler\n/usr/local/apache2/build/instdso.sh SH_LIBTOOL='/usr/local/apache2/build/libtool' libphp5.la /usr/local/apache2/modules\n/usr/local/apache2/build/libtool --mode=install install libphp5.la /usr/local/apache2/modules/\nlibtool: install: install .libs/libphp5.so /usr/local/apache2/modules/libphp5.so\nlibtool: install: install .libs/libphp5.lai /usr/local/apache2/modules/libphp5.la\nlibtool: install: warning: remember to run `libtool --finish /root/php-5.6.25/libs'\nchmod 755 /usr/local/apache2/modules/libphp5.so\n[activating module `php5' in /usr/local/apache2/conf/httpd.conf]\nInstalling shared extensions:     /usr/local/php5.6/lib/php/extensions/no-debug-zts-20131226/\nInstalling PHP CLI binary:        /usr/local/php5.6/bin/\nInstalling PHP CLI man page:      /usr/local/php5.6/php/man/man1/\nInstalling PHP FPM binary:        /usr/local/php5.6/sbin/\nInstalling PHP FPM config:        /usr/local/php5.6/etc/\nInstalling PHP FPM man page:      /usr/local/php5.6/php/man/man8/\nInstalling PHP FPM status page:   /usr/local/php5.6/php/php/fpm/\nInstalling PHP CGI binary:        /usr/local/php5.6/bin/\nInstalling PHP CGI man page:      /usr/local/php5.6/php/man/man1/\nInstalling build environment:     /usr/local/php5.6/lib/php/build/\nInstalling header files:           /usr/local/php5.6/include/php/\nInstalling helper programs:       /usr/local/php5.6/bin/\n  program: phpize\n  program: php-config\nInstalling man pages:             /usr/local/php5.6/php/man/man1/\n  page: phpize.1\n  page: php-config.1\nInstalling PEAR environment:      /usr/local/php5.6/lib/php/\n[PEAR] Archive_Tar    - installed: 1.4.0\n[PEAR] Console_Getopt - installed: 1.4.1\n[PEAR] Structures_Graph- installed: 1.1.1\n[PEAR] XML_Util       - installed: 1.3.0\n[PEAR] PEAR           - installed: 1.10.1\nWrote PEAR system config file at: /usr/local/php5.6/etc/pear.conf\nYou may want to add: /usr/local/php5.6/lib/php to your php.ini include_path\n/root/php-5.6.25/build/shtool install -c ext/phar/phar.phar /usr/local/php5.6/bin\nln -s -f phar.phar /usr/local/php5.6/bin/phar\nInstalling PDO headers:           /usr/local/php5.6/include/php/ext/pdo/\n```\n\n4. 设置配置文件\n```\ncp php.ini-development /usr/local/php5.6/lib/php.ini\n```\n\n### mod_fastcgi 模块安装\n\n1. 下载、解压\n[mod_fastcgi-2.4.6.tar.gz](http://n.sinaimg.cn/games/3ece443e/20160907/mod_fastcgi-2.4.6.tar.gz)\n```\n[root@iZ23a3ua2stZ ~]#wget http://n.sinaimg.cn/games/3ece443e/20160907/mod_fastcgi-2.4.6.tar.gz\n[root@iZ23a3ua2stZ ~]#tar -zxvf mod_fastcgi-2.4.6.tar.gz\ncd mod_fastcgi-2.4.6\n```\n2. 编译、安装\n  - 查看安装说明\n```\n[root@iZ23a3ua2stZ ~]#cd mod_fastcgi-2.4.6\n[root@iZ23a3ua2stZ mod_fastcgi-2.4.6]#\n#查看 安装说明文件 (Apache 1.x请查看 INSTALL 文件)\n[root@iZ23a3ua2stZ mod_fastcgi-2.4.6]#vi INSTALL.AP2  \n···\n$ cd <mod_fastcgi_dir>\n$ cp Makefile.AP2 Makefile\n$ make\n$ make install\nIf your Apache2 installation isn't in /usr/local/apache2, then\nset the top_dir variable when running make (or edit the\nMakefile), e.g.\n  $ make top_dir=/opt/httpd/2.0.40\nAdd an entry to httpd.conf like this:\n  LoadModule fastcgi_module modules/mod_fastcgi.so\n···\n```\n虽然说明文件里描述的很清楚，但我们按照里面的步骤进行编译时，会产生报错。于是找了一大圈问题，发现在 `apache2.4` 下安装 `mod_fastcgi 2.4.6` 编译时汇报错，需要打个补丁。\n\n3. 打补丁\n[补丁下载地址](http://n.sinaimg.cn/games/3ece443e/20160907/byte-compile-against-apache24.diff)\n```sh\n[root@iZ23a3ua2stZ mod_fastcgi-2.4.6]#wget http://n.sinaimg.cn/games/3ece443e/20160907/byte-compile-against-apache24.diff\n[root@iZ23a3ua2stZ mod_fastcgi-2.4.6]#patch -p1 < byte-compile-against-apache24.diff\n```\n\n4. 继续编译、安装\n```\n[root@iZ23a3ua2stZ mod_fastcgi-2.4.6]#make\n[root@iZ23a3ua2stZ mod_fastcgi-2.4.6]#make install\n```\n然后查看`/usr/local/apache2/modules/` 下是否已经编译成功 `mod_fastcgi.so`，\n并在 `httpd.conf` 中添加 `LoadModule fastcgi_module modules/mod_fastcgi.so` 指令。\n\n\n## 各种模式配置\n### 模块模式（最简单）\n- 在 `httpd.conf` 中添加或者开启\n```ini\nLoadModule php5_module modules/libphp5.so\n```\n- 然后在 `httpd.conf` 中找到 `<IfModule mime_module>` 配置段，在其中添加\n```ini\nAddType application/x-httpd-php .php\nAddType application/x-httpd-php-source .phps\n```\n- 重启 Apache ,在站点目录下添加 `index.php`\n```php\n<?php\n    phpinfo();\n ?>\n```\n- 通过浏览器访问该文件，能够正确输出，则说明配置成功。\n> 这时 `phpinfo();` 输出的 `Server API` 应该为 `Apache 2.0 Handler`.\n\n### CGI模式\n- 在 `httpd.conf` 中添加或者开启\n```ini\nLoadModule cgid_module modules/mod_cgid.so\nLoadModule actions_module modules/mod_actions.so\n```\n> `mod_cgid` ,CGI 处理模块。在某些Unix操作系统上，在多线程服务器fork一个进程是一个代价非常大的操作，因为新进程将会复制父进程所有的线程。为了避免每次CGI调用都进行这样代价大的操作。mod_cgid 采用外部守护进程来负责分派子进程来运行CGI脚本。主服务器使用Unix套接字来与此守护进程进行通信。\n\n  > 如果在Apache编译过程中选择了多线程MPM，那么Apache将会默认安装mod_cgid模块，而不是mod_cgi。但在用户配置使用层面，mod_cgid 和 mod_cgi 基本相同，唯一例外的是，mod_cgid 通过指令 ScriptSock 给socket命名用于与CGI守护进程通信。\n\n  > `mod_actions` ,模块提供基于基于媒体类型或请求方法来执行CGI脚本的方法。该模块引入 `Action` 和 `Script` 两个指令。\n\n- 然后在 `httpd.conf` 中找到 `<IfModule mime_module>` 配置段，在其中添加\n```ini\nAddHandler php-cgi .php\nAction php-cgi \"/cgi-bin/php-cgi\"\n```\n- 然后在 `httpd.conf` 中找到 `<IfModule cgid_module>` 配置段，在其中添加\n```ini\n<IfModule cgid_module>\n    Scriptsock /var/run/cgid.sock\n</IfModule>\n```\n\n- 重启 Apache ,在站点目录下添加 `index.php`\n```php\n<?php\n    phpinfo();\n ?>\n```\n- 通过浏览器访问该文件，能够正确输出，则说明配置成功。\n> 这时 `phpinfo();` 输出的 `Server API` 应该为 `CGI/FastCGI`.\n\n### FastCGI模式，用Apache内置进程管理器\n- 在 `httpd.conf` 中添加或者开启\n```ini\nLoadModule fastcgi_module modules/mod_fastcgi.so\nLoadModule actions_module modules/mod_actions.so\n```\n- 然后在 `httpd.conf` 中添加 `<IfModule fastcgi_module>` 配置段\n```ini\n<IfModule fastcgi_module>\n   FastCgiServer /usr/local/apache2/cgi-bin/php-cgi -processes 20\n   AddType application/x-httpd-php .php\n   AddHandler php-fastcgi .php\n   Action php-fastcgi /cgi-bin/php-cgi\n</IfModule>\n```\n> `-processes 20` ,配置启动的进程数\n\n- 重启 Apache ,执行 `ps aux | grep php` 查看相应 php-cgi 进程是否启动\n```bash\n[root@iZ23a3ua2stZ apache2]# ps aux | grep php\ndaemon   21382  0.0  0.5  42104  5604 ?        S    11:30   0:00 /usr/local/apache2/cgi-bin/php-cgi\ndaemon   21435  0.0  0.4  42104  4724 ?        S    11:30   0:00 /usr/local/apache2/cgi-bin/php-cgi\ndaemon   21436  0.0  0.4  42104  4732 ?        S    11:30   0:00 /usr/local/apache2/cgi-bin/php-cgi\ndaemon   21437  0.0  0.4  42104  4724 ?        S    11:30   0:00 /usr/local/apache2/cgi-bin/php-cgi\ndaemon   21438  0.0  0.4  42104  4724 ?        S    11:30   0:00 /usr/local/apache2/cgi-bin/php-cgi\ndaemon   21439  0.0  0.4  42104  4728 ?        S    11:30   0:00 /usr/local/apache2/cgi-bin/php-cgi\ndaemon   21440  0.0  0.4  42104  4728 ?        S    11:30   0:00 /usr/local/apache2/cgi-bin/php-cgi\ndaemon   21441  0.0  0.4  42104  4728 ?        S    11:30   0:00 /usr/local/apache2/cgi-bin/php-cgi\ndaemon   21442  0.0  0.4  42104  4728 ?        S    11:30   0:00 /usr/local/apache2/cgi-bin/php-cgi\ndaemon   21443  0.0  0.4  42104  4728 ?        S    11:30   0:00 /usr/local/apache2/cgi-bin/php-cgi\ndaemon   21444  0.0  0.4  42104  4728 ?        S    11:30   0:00 /usr/local/apache2/cgi-bin/php-cgi\ndaemon   21445  0.0  0.4  42104  4724 ?        S    11:30   0:00 /usr/local/apache2/cgi-bin/php-cgi\ndaemon   21446  0.0  0.4  42104  4728 ?        S    11:30   0:00 /usr/local/apache2/cgi-bin/php-cgi\ndaemon   21447  0.0  0.4  42104  4724 ?        S    11:30   0:00 /usr/local/apache2/cgi-bin/php-cgi\ndaemon   21448  0.0  0.4  42104  4728 ?        S    11:30   0:00 /usr/local/apache2/cgi-bin/php-cgi\ndaemon   21449  0.0  0.4  42104  4728 ?        S    11:31   0:00 /usr/local/apache2/cgi-bin/php-cgi\ndaemon   21450  0.0  0.4  42104  4724 ?        S    11:31   0:00 /usr/local/apache2/cgi-bin/php-cgi\ndaemon   21451  0.0  0.4  42104  4724 ?        S    11:31   0:00 /usr/local/apache2/cgi-bin/php-cgi\ndaemon   21452  0.0  0.4  42104  4732 ?        S    11:31   0:00 /usr/local/apache2/cgi-bin/php-cgi\ndaemon   21453  0.0  0.4  42104  4728 ?        S    11:31   0:00 /usr/local/apache2/cgi-bin/php-cgi\nroot     21455  0.0  0.0 112668   984 pts/0    S+   11:31   0:00 grep --color=auto php\n```\n\n- 在站点目录下添加 `index.php`\n```php\n<?php\n    phpinfo();\n ?>\n```\n- 通过浏览器访问该文件，能够正确输出，则说明配置成功。\n> 这时 `phpinfo();` 输出的 `Server API` 应该为 `CGI/FastCGI`.\n\n### FastCGI模式，使用php-fpm进程管理器\n- 在 `httpd.conf` 中添加或者开启\n```ini\nLoadModule fastcgi_module modules/mod_fastcgi.so\nLoadModule actions_module modules/mod_actions.so\n```\n- 然后在 `httpd.conf` 中添加 `<IfModule fastcgi_module>` 配置段\n```ini\n<IfModule fastcgi_module>\n   FastCgiExternalServer /usr/local/apache2/cgi-bin/php-cgi -host 127.0.0.1:9000\n   AddType application/x-httpd-php .php\n   AddHandler php-fastcgi .php\n   Action php-fastcgi /cgi-bin/php-cgi\n</IfModule>\n```\n> `-host 127.0.0.1:9000` ,是php-fpm的开启端口，所以我们还需要把php-fpm打开。\n\n- 启动 `php-fpm`\n```bash\n[root@iZ23a3ua2stZ apache2]# /usr/local/php5.6/sbin/php-fpm\n```\n> /usr/local/php/sbin/php-fpm{start|stop|quit|restart|reload|logrotate}\n>\n> --start 启动php的fastcgi进程\n> --stop 强制终止php的fastcgi进程\n> --quit 平滑终止php的fastcgi进程\n> --restart 重启php的fastcgi进程\n> --reload 重新平滑加载php的php.ini\n> --logrotate 重新启用log文件\n\n- 重启 Apache ,执行 `ps aux | grep php` 查看相应 php-cgi 进程是否启动\n```bash\n[root@iZ23a3ua2stZ apache2]# ps aux | grep php\n[root@iZ23a3ua2stZ apache2]# ps aux | grep php\nroot     21680  0.0  0.3 147920  3660 ?        Ss   12:41   0:00 php-fpm: master process (/usr/local/php5.6/etc/php-fpm.conf)\nnobody   21681  0.0  0.3 147920  3312 ?        S    12:41   0:00 php-fpm: pool www\nnobody   21682  0.0  0.4 147920  4888 ?        S    12:41   0:00 php-fpm: pool www\nroot     21684  0.0  0.0 112664   980 pts/3    S+   12:42   0:00 grep --color=auto php\n```\n\n- 在站点目录下添加 `index.php`\n```php\n<?php\n    phpinfo();\n ?>\n```\n- 通过浏览器访问该文件，能够正确输出，则说明配置成功。\n> 这时 `phpinfo();` 输出的 `Server API` 应该为 `FPM/FastCGI`.\n\n## 各种模式比较\n> 有空再整理。。。\n","source":"_posts/Apache 中PHP支持模式.md","raw":"---\ntitle: Apache中PHP支持模式小结\ndate: 2016-09-07 20:10:00\ntags:\n- FastCGI\n- CGI\n- Apache&PHP\ncategories:\n- Apache\n---\nApache通过不同的方式，能够实现对PHP支持。常见的几种支持方式有：\n- 模块支持（handler模式）\n- CGI模块\n- FastCGI模式，用Apache内置进程管理器\n- FastCGI模式，用php-fpm进程管理器\n\n<!-- more -->\n## Apache安装、PHP安装、mod_fastcgi模块安装\n### Apache 安装\n略过···\n### PHP 安装\n示例：安装PHP5.6\n\n1. 下载、解压\n```sh\n[root@iZ23a3ua2stZ ~]#wget http://cn2.php.net/distributions/php-5.6.25.tar.gz\n[root@iZ23a3ua2stZ ~]#tar -zxvf php-5.6.25.tar.gz\n```\n2. ./configure\n```sh\n[root@iZ23a3ua2stZ ~]#cd php-5.6.25\n[root@iZ23a3ua2stZ php-5.6.25]#./configure --with-apxs2=/usr/local/apache2/bin/apxs --with-mysql --enable-fpm --prefix=/usr/local/php5.6\n```\n  `--enable-fpm` 用来来激活对 FPM 的支持\n\n  `--with-apxs2` 该参数作用是把php的解释模块编译成so 文件，并自动添加到 Apache的modules中，并自动在 `httpd.conf` 中加入对应的加载指令`LoadModule php5_module modules/libphp5.so`\n> **报错1：** 在运行 `./configure` 时可能会报以下这样的错误。提示我们 运行不了 `apxs` 这个工具。\n\n  ```sh\nSorry, I cannot run apxs.  Possible reasons follow:\n1 Perl is not installed\n2 apxs was not found. Try to pass the path using --with-apxs2=/path/to/apxs\n3 Apache was not built using --enable-so (the apxs usage page is displayed)\nThe output of /usr/local/apache2/bin/apxs follows:\n./configure: /usr/local/apache2/bin/apxs: /replace/with/path/to/perl/interpreter: bad interpreter: No such file or directory\nconfigure: error: Aborting\n```\n> 之前我们在Apache模块化体系的小结中介绍过 `apxs` 实际是一个 perl 脚本。上面报错中 `/replace/with/path/to/perl/interpreter` 提示我们找不到这个文件，\n这行实际是 perl 脚本的声明，我们需要将它改成我们服务器perl脚本的地址。\n\n  ```sh\n[root@iZ23a3ua2stZ php-5.6.25]# which perl\n/usr/bin/perl\n[root@iZ23a3ua2stZ php-5.6.25]# vi /usr/local/apache2/bin/apxs\n#将第一行 `#!/replace/with/path/to/perl/interpreter` 改成 `#!/usr/bin/perl`\n```\n> **报错2：** configure: error: xml2-config not found. Please check your libxml2 installation.\n提示我们缺少 `libxml2`。安装 `libxml2`.\n```sh\n[root@iZ23a3ua2stZ php-5.6.25]#yum install libxml2\n[root@iZ23a3ua2stZ php-5.6.25]#yum install libxml2-devel -y\n```\n\n  `./configure` 成功会有如下显示。\n\n  ```sh\n+--------------------------------------------------------------------+\n| License:                                                           |\n| This software is subject to the PHP License, available in this     |\n| distribution in the file LICENSE.  By continuing this installation |\n| process, you are bound by the terms of this license agreement.     |\n| If you do not agree with the terms of this license, you must abort |\n| the installation process at this point.                            |\n+--------------------------------------------------------------------+\nThank you for using PHP.\nconfig.status: creating php5.spec\nconfig.status: creating main/build-defs.h\nconfig.status: creating scripts/phpize\nconfig.status: creating scripts/man1/phpize.1\nconfig.status: creating scripts/php-config\nconfig.status: creating scripts/man1/php-config.1\nconfig.status: creating sapi/cli/php.1\nconfig.status: creating sapi/fpm/php-fpm.conf\nconfig.status: creating sapi/fpm/init.d.php-fpm\nconfig.status: creating sapi/fpm/php-fpm.service\nconfig.status: creating sapi/fpm/php-fpm.8\nconfig.status: creating sapi/fpm/status.html\nconfig.status: creating sapi/cgi/php-cgi.1\nconfig.status: creating ext/phar/phar.1\nconfig.status: creating ext/phar/phar.phar.1\nconfig.status: creating main/php_config.h\n```\n\n3. 编译\n```sh\n[root@iZ23a3ua2stZ php-5.6.25]#make && make install\n```\n成功安装\n```\nBuild complete.\nDon't forget to run 'make test'.\nInstalling PHP SAPI module:       apache2handler\n/usr/local/apache2/build/instdso.sh SH_LIBTOOL='/usr/local/apache2/build/libtool' libphp5.la /usr/local/apache2/modules\n/usr/local/apache2/build/libtool --mode=install install libphp5.la /usr/local/apache2/modules/\nlibtool: install: install .libs/libphp5.so /usr/local/apache2/modules/libphp5.so\nlibtool: install: install .libs/libphp5.lai /usr/local/apache2/modules/libphp5.la\nlibtool: install: warning: remember to run `libtool --finish /root/php-5.6.25/libs'\nchmod 755 /usr/local/apache2/modules/libphp5.so\n[activating module `php5' in /usr/local/apache2/conf/httpd.conf]\nInstalling shared extensions:     /usr/local/php5.6/lib/php/extensions/no-debug-zts-20131226/\nInstalling PHP CLI binary:        /usr/local/php5.6/bin/\nInstalling PHP CLI man page:      /usr/local/php5.6/php/man/man1/\nInstalling PHP FPM binary:        /usr/local/php5.6/sbin/\nInstalling PHP FPM config:        /usr/local/php5.6/etc/\nInstalling PHP FPM man page:      /usr/local/php5.6/php/man/man8/\nInstalling PHP FPM status page:   /usr/local/php5.6/php/php/fpm/\nInstalling PHP CGI binary:        /usr/local/php5.6/bin/\nInstalling PHP CGI man page:      /usr/local/php5.6/php/man/man1/\nInstalling build environment:     /usr/local/php5.6/lib/php/build/\nInstalling header files:           /usr/local/php5.6/include/php/\nInstalling helper programs:       /usr/local/php5.6/bin/\n  program: phpize\n  program: php-config\nInstalling man pages:             /usr/local/php5.6/php/man/man1/\n  page: phpize.1\n  page: php-config.1\nInstalling PEAR environment:      /usr/local/php5.6/lib/php/\n[PEAR] Archive_Tar    - installed: 1.4.0\n[PEAR] Console_Getopt - installed: 1.4.1\n[PEAR] Structures_Graph- installed: 1.1.1\n[PEAR] XML_Util       - installed: 1.3.0\n[PEAR] PEAR           - installed: 1.10.1\nWrote PEAR system config file at: /usr/local/php5.6/etc/pear.conf\nYou may want to add: /usr/local/php5.6/lib/php to your php.ini include_path\n/root/php-5.6.25/build/shtool install -c ext/phar/phar.phar /usr/local/php5.6/bin\nln -s -f phar.phar /usr/local/php5.6/bin/phar\nInstalling PDO headers:           /usr/local/php5.6/include/php/ext/pdo/\n```\n\n4. 设置配置文件\n```\ncp php.ini-development /usr/local/php5.6/lib/php.ini\n```\n\n### mod_fastcgi 模块安装\n\n1. 下载、解压\n[mod_fastcgi-2.4.6.tar.gz](http://n.sinaimg.cn/games/3ece443e/20160907/mod_fastcgi-2.4.6.tar.gz)\n```\n[root@iZ23a3ua2stZ ~]#wget http://n.sinaimg.cn/games/3ece443e/20160907/mod_fastcgi-2.4.6.tar.gz\n[root@iZ23a3ua2stZ ~]#tar -zxvf mod_fastcgi-2.4.6.tar.gz\ncd mod_fastcgi-2.4.6\n```\n2. 编译、安装\n  - 查看安装说明\n```\n[root@iZ23a3ua2stZ ~]#cd mod_fastcgi-2.4.6\n[root@iZ23a3ua2stZ mod_fastcgi-2.4.6]#\n#查看 安装说明文件 (Apache 1.x请查看 INSTALL 文件)\n[root@iZ23a3ua2stZ mod_fastcgi-2.4.6]#vi INSTALL.AP2  \n···\n$ cd <mod_fastcgi_dir>\n$ cp Makefile.AP2 Makefile\n$ make\n$ make install\nIf your Apache2 installation isn't in /usr/local/apache2, then\nset the top_dir variable when running make (or edit the\nMakefile), e.g.\n  $ make top_dir=/opt/httpd/2.0.40\nAdd an entry to httpd.conf like this:\n  LoadModule fastcgi_module modules/mod_fastcgi.so\n···\n```\n虽然说明文件里描述的很清楚，但我们按照里面的步骤进行编译时，会产生报错。于是找了一大圈问题，发现在 `apache2.4` 下安装 `mod_fastcgi 2.4.6` 编译时汇报错，需要打个补丁。\n\n3. 打补丁\n[补丁下载地址](http://n.sinaimg.cn/games/3ece443e/20160907/byte-compile-against-apache24.diff)\n```sh\n[root@iZ23a3ua2stZ mod_fastcgi-2.4.6]#wget http://n.sinaimg.cn/games/3ece443e/20160907/byte-compile-against-apache24.diff\n[root@iZ23a3ua2stZ mod_fastcgi-2.4.6]#patch -p1 < byte-compile-against-apache24.diff\n```\n\n4. 继续编译、安装\n```\n[root@iZ23a3ua2stZ mod_fastcgi-2.4.6]#make\n[root@iZ23a3ua2stZ mod_fastcgi-2.4.6]#make install\n```\n然后查看`/usr/local/apache2/modules/` 下是否已经编译成功 `mod_fastcgi.so`，\n并在 `httpd.conf` 中添加 `LoadModule fastcgi_module modules/mod_fastcgi.so` 指令。\n\n\n## 各种模式配置\n### 模块模式（最简单）\n- 在 `httpd.conf` 中添加或者开启\n```ini\nLoadModule php5_module modules/libphp5.so\n```\n- 然后在 `httpd.conf` 中找到 `<IfModule mime_module>` 配置段，在其中添加\n```ini\nAddType application/x-httpd-php .php\nAddType application/x-httpd-php-source .phps\n```\n- 重启 Apache ,在站点目录下添加 `index.php`\n```php\n<?php\n    phpinfo();\n ?>\n```\n- 通过浏览器访问该文件，能够正确输出，则说明配置成功。\n> 这时 `phpinfo();` 输出的 `Server API` 应该为 `Apache 2.0 Handler`.\n\n### CGI模式\n- 在 `httpd.conf` 中添加或者开启\n```ini\nLoadModule cgid_module modules/mod_cgid.so\nLoadModule actions_module modules/mod_actions.so\n```\n> `mod_cgid` ,CGI 处理模块。在某些Unix操作系统上，在多线程服务器fork一个进程是一个代价非常大的操作，因为新进程将会复制父进程所有的线程。为了避免每次CGI调用都进行这样代价大的操作。mod_cgid 采用外部守护进程来负责分派子进程来运行CGI脚本。主服务器使用Unix套接字来与此守护进程进行通信。\n\n  > 如果在Apache编译过程中选择了多线程MPM，那么Apache将会默认安装mod_cgid模块，而不是mod_cgi。但在用户配置使用层面，mod_cgid 和 mod_cgi 基本相同，唯一例外的是，mod_cgid 通过指令 ScriptSock 给socket命名用于与CGI守护进程通信。\n\n  > `mod_actions` ,模块提供基于基于媒体类型或请求方法来执行CGI脚本的方法。该模块引入 `Action` 和 `Script` 两个指令。\n\n- 然后在 `httpd.conf` 中找到 `<IfModule mime_module>` 配置段，在其中添加\n```ini\nAddHandler php-cgi .php\nAction php-cgi \"/cgi-bin/php-cgi\"\n```\n- 然后在 `httpd.conf` 中找到 `<IfModule cgid_module>` 配置段，在其中添加\n```ini\n<IfModule cgid_module>\n    Scriptsock /var/run/cgid.sock\n</IfModule>\n```\n\n- 重启 Apache ,在站点目录下添加 `index.php`\n```php\n<?php\n    phpinfo();\n ?>\n```\n- 通过浏览器访问该文件，能够正确输出，则说明配置成功。\n> 这时 `phpinfo();` 输出的 `Server API` 应该为 `CGI/FastCGI`.\n\n### FastCGI模式，用Apache内置进程管理器\n- 在 `httpd.conf` 中添加或者开启\n```ini\nLoadModule fastcgi_module modules/mod_fastcgi.so\nLoadModule actions_module modules/mod_actions.so\n```\n- 然后在 `httpd.conf` 中添加 `<IfModule fastcgi_module>` 配置段\n```ini\n<IfModule fastcgi_module>\n   FastCgiServer /usr/local/apache2/cgi-bin/php-cgi -processes 20\n   AddType application/x-httpd-php .php\n   AddHandler php-fastcgi .php\n   Action php-fastcgi /cgi-bin/php-cgi\n</IfModule>\n```\n> `-processes 20` ,配置启动的进程数\n\n- 重启 Apache ,执行 `ps aux | grep php` 查看相应 php-cgi 进程是否启动\n```bash\n[root@iZ23a3ua2stZ apache2]# ps aux | grep php\ndaemon   21382  0.0  0.5  42104  5604 ?        S    11:30   0:00 /usr/local/apache2/cgi-bin/php-cgi\ndaemon   21435  0.0  0.4  42104  4724 ?        S    11:30   0:00 /usr/local/apache2/cgi-bin/php-cgi\ndaemon   21436  0.0  0.4  42104  4732 ?        S    11:30   0:00 /usr/local/apache2/cgi-bin/php-cgi\ndaemon   21437  0.0  0.4  42104  4724 ?        S    11:30   0:00 /usr/local/apache2/cgi-bin/php-cgi\ndaemon   21438  0.0  0.4  42104  4724 ?        S    11:30   0:00 /usr/local/apache2/cgi-bin/php-cgi\ndaemon   21439  0.0  0.4  42104  4728 ?        S    11:30   0:00 /usr/local/apache2/cgi-bin/php-cgi\ndaemon   21440  0.0  0.4  42104  4728 ?        S    11:30   0:00 /usr/local/apache2/cgi-bin/php-cgi\ndaemon   21441  0.0  0.4  42104  4728 ?        S    11:30   0:00 /usr/local/apache2/cgi-bin/php-cgi\ndaemon   21442  0.0  0.4  42104  4728 ?        S    11:30   0:00 /usr/local/apache2/cgi-bin/php-cgi\ndaemon   21443  0.0  0.4  42104  4728 ?        S    11:30   0:00 /usr/local/apache2/cgi-bin/php-cgi\ndaemon   21444  0.0  0.4  42104  4728 ?        S    11:30   0:00 /usr/local/apache2/cgi-bin/php-cgi\ndaemon   21445  0.0  0.4  42104  4724 ?        S    11:30   0:00 /usr/local/apache2/cgi-bin/php-cgi\ndaemon   21446  0.0  0.4  42104  4728 ?        S    11:30   0:00 /usr/local/apache2/cgi-bin/php-cgi\ndaemon   21447  0.0  0.4  42104  4724 ?        S    11:30   0:00 /usr/local/apache2/cgi-bin/php-cgi\ndaemon   21448  0.0  0.4  42104  4728 ?        S    11:30   0:00 /usr/local/apache2/cgi-bin/php-cgi\ndaemon   21449  0.0  0.4  42104  4728 ?        S    11:31   0:00 /usr/local/apache2/cgi-bin/php-cgi\ndaemon   21450  0.0  0.4  42104  4724 ?        S    11:31   0:00 /usr/local/apache2/cgi-bin/php-cgi\ndaemon   21451  0.0  0.4  42104  4724 ?        S    11:31   0:00 /usr/local/apache2/cgi-bin/php-cgi\ndaemon   21452  0.0  0.4  42104  4732 ?        S    11:31   0:00 /usr/local/apache2/cgi-bin/php-cgi\ndaemon   21453  0.0  0.4  42104  4728 ?        S    11:31   0:00 /usr/local/apache2/cgi-bin/php-cgi\nroot     21455  0.0  0.0 112668   984 pts/0    S+   11:31   0:00 grep --color=auto php\n```\n\n- 在站点目录下添加 `index.php`\n```php\n<?php\n    phpinfo();\n ?>\n```\n- 通过浏览器访问该文件，能够正确输出，则说明配置成功。\n> 这时 `phpinfo();` 输出的 `Server API` 应该为 `CGI/FastCGI`.\n\n### FastCGI模式，使用php-fpm进程管理器\n- 在 `httpd.conf` 中添加或者开启\n```ini\nLoadModule fastcgi_module modules/mod_fastcgi.so\nLoadModule actions_module modules/mod_actions.so\n```\n- 然后在 `httpd.conf` 中添加 `<IfModule fastcgi_module>` 配置段\n```ini\n<IfModule fastcgi_module>\n   FastCgiExternalServer /usr/local/apache2/cgi-bin/php-cgi -host 127.0.0.1:9000\n   AddType application/x-httpd-php .php\n   AddHandler php-fastcgi .php\n   Action php-fastcgi /cgi-bin/php-cgi\n</IfModule>\n```\n> `-host 127.0.0.1:9000` ,是php-fpm的开启端口，所以我们还需要把php-fpm打开。\n\n- 启动 `php-fpm`\n```bash\n[root@iZ23a3ua2stZ apache2]# /usr/local/php5.6/sbin/php-fpm\n```\n> /usr/local/php/sbin/php-fpm{start|stop|quit|restart|reload|logrotate}\n>\n> --start 启动php的fastcgi进程\n> --stop 强制终止php的fastcgi进程\n> --quit 平滑终止php的fastcgi进程\n> --restart 重启php的fastcgi进程\n> --reload 重新平滑加载php的php.ini\n> --logrotate 重新启用log文件\n\n- 重启 Apache ,执行 `ps aux | grep php` 查看相应 php-cgi 进程是否启动\n```bash\n[root@iZ23a3ua2stZ apache2]# ps aux | grep php\n[root@iZ23a3ua2stZ apache2]# ps aux | grep php\nroot     21680  0.0  0.3 147920  3660 ?        Ss   12:41   0:00 php-fpm: master process (/usr/local/php5.6/etc/php-fpm.conf)\nnobody   21681  0.0  0.3 147920  3312 ?        S    12:41   0:00 php-fpm: pool www\nnobody   21682  0.0  0.4 147920  4888 ?        S    12:41   0:00 php-fpm: pool www\nroot     21684  0.0  0.0 112664   980 pts/3    S+   12:42   0:00 grep --color=auto php\n```\n\n- 在站点目录下添加 `index.php`\n```php\n<?php\n    phpinfo();\n ?>\n```\n- 通过浏览器访问该文件，能够正确输出，则说明配置成功。\n> 这时 `phpinfo();` 输出的 `Server API` 应该为 `FPM/FastCGI`.\n\n## 各种模式比较\n> 有空再整理。。。\n","slug":"Apache 中PHP支持模式","published":1,"updated":"2016-09-25T10:54:12.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"city8vnmo0004g29fp81aufgq","content":"<p>Apache通过不同的方式，能够实现对PHP支持。常见的几种支持方式有：</p>\n<ul>\n<li>模块支持（handler模式）</li>\n<li>CGI模块</li>\n<li>FastCGI模式，用Apache内置进程管理器</li>\n<li>FastCGI模式，用php-fpm进程管理器</li>\n</ul>\n<a id=\"more\"></a>\n<h2 id=\"Apache安装、PHP安装、mod-fastcgi模块安装\"><a href=\"#Apache安装、PHP安装、mod-fastcgi模块安装\" class=\"headerlink\" title=\"Apache安装、PHP安装、mod_fastcgi模块安装\"></a>Apache安装、PHP安装、mod_fastcgi模块安装</h2><h3 id=\"Apache-安装\"><a href=\"#Apache-安装\" class=\"headerlink\" title=\"Apache 安装\"></a>Apache 安装</h3><p>略过···</p>\n<h3 id=\"PHP-安装\"><a href=\"#PHP-安装\" class=\"headerlink\" title=\"PHP 安装\"></a>PHP 安装</h3><p>示例：安装PHP5.6</p>\n<ol>\n<li><p>下载、解压</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">[root@iZ23a3ua2stZ ~]<span class=\"comment\">#wget http://cn2.php.net/distributions/php-5.6.25.tar.gz</span></div><div class=\"line\">[root@iZ23a3ua2stZ ~]<span class=\"comment\">#tar -zxvf php-5.6.25.tar.gz</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>./configure</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">[root@iZ23a3ua2stZ ~]<span class=\"comment\">#cd php-5.6.25</span></div><div class=\"line\">[root@iZ23a3ua2stZ php-5.6.25]<span class=\"comment\">#./configure --with-apxs2=/usr/local/apache2/bin/apxs --with-mysql --enable-fpm --prefix=/usr/local/php5.6</span></div></pre></td></tr></table></figure>\n<p><code>--enable-fpm</code> 用来来激活对 FPM 的支持</p>\n<p><code>--with-apxs2</code> 该参数作用是把php的解释模块编译成so 文件，并自动添加到 Apache的modules中，并自动在 <code>httpd.conf</code> 中加入对应的加载指令<code>LoadModule php5_module modules/libphp5.so</code></p>\n<blockquote>\n<p><strong>报错1：</strong> 在运行 <code>./configure</code> 时可能会报以下这样的错误。提示我们 运行不了 <code>apxs</code> 这个工具。</p>\n</blockquote>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">Sorry, I cannot run apxs.  Possible reasons follow:</div><div class=\"line\">1 Perl is not installed</div><div class=\"line\">2 apxs was not found. Try to pass the path using --with-apxs2=/path/to/apxs</div><div class=\"line\">3 Apache was not built using --enable-so (the apxs usage page is displayed)</div><div class=\"line\">The output of /usr/<span class=\"built_in\">local</span>/apache2/bin/apxs follows:</div><div class=\"line\">./configure: /usr/<span class=\"built_in\">local</span>/apache2/bin/apxs: /replace/with/path/to/perl/interpreter: bad interpreter: No such file or directory</div><div class=\"line\">configure: error: Aborting</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<blockquote>\n<p>之前我们在Apache模块化体系的小结中介绍过 <code>apxs</code> 实际是一个 perl 脚本。上面报错中 <code>/replace/with/path/to/perl/interpreter</code> 提示我们找不到这个文件，<br>这行实际是 perl 脚本的声明，我们需要将它改成我们服务器perl脚本的地址。</p>\n</blockquote>\n  <figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">[root@iZ23a3ua2stZ php-5.6.25]<span class=\"comment\"># which perl</span></div><div class=\"line\">/usr/bin/perl</div><div class=\"line\">[root@iZ23a3ua2stZ php-5.6.25]<span class=\"comment\"># vi /usr/local/apache2/bin/apxs</span></div><div class=\"line\"><span class=\"comment\">#将第一行 `#!/replace/with/path/to/perl/interpreter` 改成 `#!/usr/bin/perl`</span></div></pre></td></tr></table></figure>\n<blockquote>\n<p><strong>报错2：</strong> configure: error: xml2-config not found. Please check your libxml2 installation.<br>提示我们缺少 <code>libxml2</code>。安装 <code>libxml2</code>.<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">[root@iZ23a3ua2stZ php-5.6.25]<span class=\"comment\">#yum install libxml2</span></div><div class=\"line\">[root@iZ23a3ua2stZ php-5.6.25]<span class=\"comment\">#yum install libxml2-devel -y</span></div></pre></td></tr></table></figure></p>\n</blockquote>\n<p>  <code>./configure</code> 成功会有如下显示。</p>\n  <figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\">+--------------------------------------------------------------------+</div><div class=\"line\">| License:                                                           |</div><div class=\"line\">| This software is subject to the PHP License, available <span class=\"keyword\">in</span> this     |</div><div class=\"line\">| distribution <span class=\"keyword\">in</span> the file LICENSE.  By continuing this installation |</div><div class=\"line\">| process, you are bound by the terms of this license agreement.     |</div><div class=\"line\">| If you <span class=\"keyword\">do</span> not agree with the terms of this license, you must abort |</div><div class=\"line\">| the installation process at this point.                            |</div><div class=\"line\">+--------------------------------------------------------------------+</div><div class=\"line\">Thank you <span class=\"keyword\">for</span> using PHP.</div><div class=\"line\">config.status: creating php5.spec</div><div class=\"line\">config.status: creating main/build-defs.h</div><div class=\"line\">config.status: creating scripts/phpize</div><div class=\"line\">config.status: creating scripts/man1/phpize.1</div><div class=\"line\">config.status: creating scripts/php-config</div><div class=\"line\">config.status: creating scripts/man1/php-config.1</div><div class=\"line\">config.status: creating sapi/cli/php.1</div><div class=\"line\">config.status: creating sapi/fpm/php-fpm.conf</div><div class=\"line\">config.status: creating sapi/fpm/init.d.php-fpm</div><div class=\"line\">config.status: creating sapi/fpm/php-fpm.service</div><div class=\"line\">config.status: creating sapi/fpm/php-fpm.8</div><div class=\"line\">config.status: creating sapi/fpm/status.html</div><div class=\"line\">config.status: creating sapi/cgi/php-cgi.1</div><div class=\"line\">config.status: creating ext/phar/phar.1</div><div class=\"line\">config.status: creating ext/phar/phar.phar.1</div><div class=\"line\">config.status: creating main/php_config.h</div></pre></td></tr></table></figure>\n<ol>\n<li>编译<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">[root@iZ23a3ua2stZ php-5.6.25]<span class=\"comment\">#make &amp;&amp; make install</span></div></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>成功安装<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div></pre></td><td class=\"code\"><pre><div class=\"line\">Build complete.</div><div class=\"line\">Don&apos;t forget to run &apos;make test&apos;.</div><div class=\"line\">Installing PHP SAPI module:       apache2handler</div><div class=\"line\">/usr/local/apache2/build/instdso.sh SH_LIBTOOL=&apos;/usr/local/apache2/build/libtool&apos; libphp5.la /usr/local/apache2/modules</div><div class=\"line\">/usr/local/apache2/build/libtool --mode=install install libphp5.la /usr/local/apache2/modules/</div><div class=\"line\">libtool: install: install .libs/libphp5.so /usr/local/apache2/modules/libphp5.so</div><div class=\"line\">libtool: install: install .libs/libphp5.lai /usr/local/apache2/modules/libphp5.la</div><div class=\"line\">libtool: install: warning: remember to run `libtool --finish /root/php-5.6.25/libs&apos;</div><div class=\"line\">chmod 755 /usr/local/apache2/modules/libphp5.so</div><div class=\"line\">[activating module `php5&apos; in /usr/local/apache2/conf/httpd.conf]</div><div class=\"line\">Installing shared extensions:     /usr/local/php5.6/lib/php/extensions/no-debug-zts-20131226/</div><div class=\"line\">Installing PHP CLI binary:        /usr/local/php5.6/bin/</div><div class=\"line\">Installing PHP CLI man page:      /usr/local/php5.6/php/man/man1/</div><div class=\"line\">Installing PHP FPM binary:        /usr/local/php5.6/sbin/</div><div class=\"line\">Installing PHP FPM config:        /usr/local/php5.6/etc/</div><div class=\"line\">Installing PHP FPM man page:      /usr/local/php5.6/php/man/man8/</div><div class=\"line\">Installing PHP FPM status page:   /usr/local/php5.6/php/php/fpm/</div><div class=\"line\">Installing PHP CGI binary:        /usr/local/php5.6/bin/</div><div class=\"line\">Installing PHP CGI man page:      /usr/local/php5.6/php/man/man1/</div><div class=\"line\">Installing build environment:     /usr/local/php5.6/lib/php/build/</div><div class=\"line\">Installing header files:           /usr/local/php5.6/include/php/</div><div class=\"line\">Installing helper programs:       /usr/local/php5.6/bin/</div><div class=\"line\">  program: phpize</div><div class=\"line\">  program: php-config</div><div class=\"line\">Installing man pages:             /usr/local/php5.6/php/man/man1/</div><div class=\"line\">  page: phpize.1</div><div class=\"line\">  page: php-config.1</div><div class=\"line\">Installing PEAR environment:      /usr/local/php5.6/lib/php/</div><div class=\"line\">[PEAR] Archive_Tar    - installed: 1.4.0</div><div class=\"line\">[PEAR] Console_Getopt - installed: 1.4.1</div><div class=\"line\">[PEAR] Structures_Graph- installed: 1.1.1</div><div class=\"line\">[PEAR] XML_Util       - installed: 1.3.0</div><div class=\"line\">[PEAR] PEAR           - installed: 1.10.1</div><div class=\"line\">Wrote PEAR system config file at: /usr/local/php5.6/etc/pear.conf</div><div class=\"line\">You may want to add: /usr/local/php5.6/lib/php to your php.ini include_path</div><div class=\"line\">/root/php-5.6.25/build/shtool install -c ext/phar/phar.phar /usr/local/php5.6/bin</div><div class=\"line\">ln -s -f phar.phar /usr/local/php5.6/bin/phar</div><div class=\"line\">Installing PDO headers:           /usr/local/php5.6/include/php/ext/pdo/</div></pre></td></tr></table></figure></p>\n<ol>\n<li>设置配置文件<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">cp php.ini-development /usr/local/php5.6/lib/php.ini</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<h3 id=\"mod-fastcgi-模块安装\"><a href=\"#mod-fastcgi-模块安装\" class=\"headerlink\" title=\"mod_fastcgi 模块安装\"></a>mod_fastcgi 模块安装</h3><ol>\n<li><p>下载、解压<br><a href=\"http://n.sinaimg.cn/games/3ece443e/20160907/mod_fastcgi-2.4.6.tar.gz\" target=\"_blank\" rel=\"external\">mod_fastcgi-2.4.6.tar.gz</a></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">[root@iZ23a3ua2stZ ~]#wget http://n.sinaimg.cn/games/3ece443e/20160907/mod_fastcgi-2.4.6.tar.gz</div><div class=\"line\">[root@iZ23a3ua2stZ ~]#tar -zxvf mod_fastcgi-2.4.6.tar.gz</div><div class=\"line\">cd mod_fastcgi-2.4.6</div></pre></td></tr></table></figure>\n</li>\n<li><p>编译、安装</p>\n<ul>\n<li>查看安装说明<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">[root@iZ23a3ua2stZ ~]#cd mod_fastcgi-2.4.6</div><div class=\"line\">[root@iZ23a3ua2stZ mod_fastcgi-2.4.6]#</div><div class=\"line\">#查看 安装说明文件 (Apache 1.x请查看 INSTALL 文件)</div><div class=\"line\">[root@iZ23a3ua2stZ mod_fastcgi-2.4.6]#vi INSTALL.AP2  </div><div class=\"line\">···</div><div class=\"line\">$ cd &lt;mod_fastcgi_dir&gt;</div><div class=\"line\">$ cp Makefile.AP2 Makefile</div><div class=\"line\">$ make</div><div class=\"line\">$ make install</div><div class=\"line\">If your Apache2 installation isn&apos;t in /usr/local/apache2, then</div><div class=\"line\">set the top_dir variable when running make (or edit the</div><div class=\"line\">Makefile), e.g.</div><div class=\"line\">  $ make top_dir=/opt/httpd/2.0.40</div><div class=\"line\">Add an entry to httpd.conf like this:</div><div class=\"line\">  LoadModule fastcgi_module modules/mod_fastcgi.so</div><div class=\"line\">···</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ol>\n<p>虽然说明文件里描述的很清楚，但我们按照里面的步骤进行编译时，会产生报错。于是找了一大圈问题，发现在 <code>apache2.4</code> 下安装 <code>mod_fastcgi 2.4.6</code> 编译时汇报错，需要打个补丁。</p>\n<ol>\n<li><p>打补丁<br><a href=\"http://n.sinaimg.cn/games/3ece443e/20160907/byte-compile-against-apache24.diff\" target=\"_blank\" rel=\"external\">补丁下载地址</a></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">[root@iZ23a3ua2stZ mod_fastcgi-2.4.6]<span class=\"comment\">#wget http://n.sinaimg.cn/games/3ece443e/20160907/byte-compile-against-apache24.diff</span></div><div class=\"line\">[root@iZ23a3ua2stZ mod_fastcgi-2.4.6]<span class=\"comment\">#patch -p1 &lt; byte-compile-against-apache24.diff</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>继续编译、安装</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">[root@iZ23a3ua2stZ mod_fastcgi-2.4.6]#make</div><div class=\"line\">[root@iZ23a3ua2stZ mod_fastcgi-2.4.6]#make install</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>然后查看<code>/usr/local/apache2/modules/</code> 下是否已经编译成功 <code>mod_fastcgi.so</code>，<br>并在 <code>httpd.conf</code> 中添加 <code>LoadModule fastcgi_module modules/mod_fastcgi.so</code> 指令。</p>\n<h2 id=\"各种模式配置\"><a href=\"#各种模式配置\" class=\"headerlink\" title=\"各种模式配置\"></a>各种模式配置</h2><h3 id=\"模块模式（最简单）\"><a href=\"#模块模式（最简单）\" class=\"headerlink\" title=\"模块模式（最简单）\"></a>模块模式（最简单）</h3><ul>\n<li><p>在 <code>httpd.conf</code> 中添加或者开启</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">LoadModule php5_module modules/libphp5.so</div></pre></td></tr></table></figure>\n</li>\n<li><p>然后在 <code>httpd.conf</code> 中找到 <code>&lt;IfModule mime_module&gt;</code> 配置段，在其中添加</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">AddType application/x-httpd-php .php</div><div class=\"line\">AddType application/x-httpd-php-source .phps</div></pre></td></tr></table></figure>\n</li>\n<li><p>重启 Apache ,在站点目录下添加 <code>index.php</code></p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;?php</span></div><div class=\"line\">    phpinfo();</div><div class=\"line\"> <span class=\"meta\">?&gt;</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>通过浏览器访问该文件，能够正确输出，则说明配置成功。</p>\n<blockquote>\n<p>这时 <code>phpinfo();</code> 输出的 <code>Server API</code> 应该为 <code>Apache 2.0 Handler</code>.</p>\n</blockquote>\n</li>\n</ul>\n<h3 id=\"CGI模式\"><a href=\"#CGI模式\" class=\"headerlink\" title=\"CGI模式\"></a>CGI模式</h3><ul>\n<li>在 <code>httpd.conf</code> 中添加或者开启<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">LoadModule cgid_module modules/mod_cgid.so</div><div class=\"line\">LoadModule actions_module modules/mod_actions.so</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<blockquote>\n<p><code>mod_cgid</code> ,CGI 处理模块。在某些Unix操作系统上，在多线程服务器fork一个进程是一个代价非常大的操作，因为新进程将会复制父进程所有的线程。为了避免每次CGI调用都进行这样代价大的操作。mod_cgid 采用外部守护进程来负责分派子进程来运行CGI脚本。主服务器使用Unix套接字来与此守护进程进行通信。</p>\n<p>如果在Apache编译过程中选择了多线程MPM，那么Apache将会默认安装mod_cgid模块，而不是mod_cgi。但在用户配置使用层面，mod_cgid 和 mod_cgi 基本相同，唯一例外的是，mod_cgid 通过指令 ScriptSock 给socket命名用于与CGI守护进程通信。</p>\n<p><code>mod_actions</code> ,模块提供基于基于媒体类型或请求方法来执行CGI脚本的方法。该模块引入 <code>Action</code> 和 <code>Script</code> 两个指令。</p>\n</blockquote>\n<ul>\n<li><p>然后在 <code>httpd.conf</code> 中找到 <code>&lt;IfModule mime_module&gt;</code> 配置段，在其中添加</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">AddHandler php-cgi .php</div><div class=\"line\">Action php-cgi \"/cgi-bin/php-cgi\"</div></pre></td></tr></table></figure>\n</li>\n<li><p>然后在 <code>httpd.conf</code> 中找到 <code>&lt;IfModule cgid_module&gt;</code> 配置段，在其中添加</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;IfModule cgid_module&gt;</div><div class=\"line\">    Scriptsock /var/run/cgid.sock</div><div class=\"line\">&lt;/IfModule&gt;</div></pre></td></tr></table></figure>\n</li>\n<li><p>重启 Apache ,在站点目录下添加 <code>index.php</code></p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;?php</span></div><div class=\"line\">    phpinfo();</div><div class=\"line\"> <span class=\"meta\">?&gt;</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>通过浏览器访问该文件，能够正确输出，则说明配置成功。</p>\n<blockquote>\n<p>这时 <code>phpinfo();</code> 输出的 <code>Server API</code> 应该为 <code>CGI/FastCGI</code>.</p>\n</blockquote>\n</li>\n</ul>\n<h3 id=\"FastCGI模式，用Apache内置进程管理器\"><a href=\"#FastCGI模式，用Apache内置进程管理器\" class=\"headerlink\" title=\"FastCGI模式，用Apache内置进程管理器\"></a>FastCGI模式，用Apache内置进程管理器</h3><ul>\n<li><p>在 <code>httpd.conf</code> 中添加或者开启</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">LoadModule fastcgi_module modules/mod_fastcgi.so</div><div class=\"line\">LoadModule actions_module modules/mod_actions.so</div></pre></td></tr></table></figure>\n</li>\n<li><p>然后在 <code>httpd.conf</code> 中添加 <code>&lt;IfModule fastcgi_module&gt;</code> 配置段</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;IfModule fastcgi_module&gt;</div><div class=\"line\">   FastCgiServer /usr/local/apache2/cgi-bin/php-cgi -processes 20</div><div class=\"line\">   AddType application/x-httpd-php .php</div><div class=\"line\">   AddHandler php-fastcgi .php</div><div class=\"line\">   Action php-fastcgi /cgi-bin/php-cgi</div><div class=\"line\">&lt;/IfModule&gt;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<blockquote>\n<p><code>-processes 20</code> ,配置启动的进程数</p>\n</blockquote>\n<ul>\n<li><p>重启 Apache ,执行 <code>ps aux | grep php</code> 查看相应 php-cgi 进程是否启动</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\">[root@iZ23a3ua2stZ apache2]<span class=\"comment\"># ps aux | grep php</span></div><div class=\"line\">daemon   21382  0.0  0.5  42104  5604 ?        S    11:30   0:00 /usr/<span class=\"built_in\">local</span>/apache2/cgi-bin/php-cgi</div><div class=\"line\">daemon   21435  0.0  0.4  42104  4724 ?        S    11:30   0:00 /usr/<span class=\"built_in\">local</span>/apache2/cgi-bin/php-cgi</div><div class=\"line\">daemon   21436  0.0  0.4  42104  4732 ?        S    11:30   0:00 /usr/<span class=\"built_in\">local</span>/apache2/cgi-bin/php-cgi</div><div class=\"line\">daemon   21437  0.0  0.4  42104  4724 ?        S    11:30   0:00 /usr/<span class=\"built_in\">local</span>/apache2/cgi-bin/php-cgi</div><div class=\"line\">daemon   21438  0.0  0.4  42104  4724 ?        S    11:30   0:00 /usr/<span class=\"built_in\">local</span>/apache2/cgi-bin/php-cgi</div><div class=\"line\">daemon   21439  0.0  0.4  42104  4728 ?        S    11:30   0:00 /usr/<span class=\"built_in\">local</span>/apache2/cgi-bin/php-cgi</div><div class=\"line\">daemon   21440  0.0  0.4  42104  4728 ?        S    11:30   0:00 /usr/<span class=\"built_in\">local</span>/apache2/cgi-bin/php-cgi</div><div class=\"line\">daemon   21441  0.0  0.4  42104  4728 ?        S    11:30   0:00 /usr/<span class=\"built_in\">local</span>/apache2/cgi-bin/php-cgi</div><div class=\"line\">daemon   21442  0.0  0.4  42104  4728 ?        S    11:30   0:00 /usr/<span class=\"built_in\">local</span>/apache2/cgi-bin/php-cgi</div><div class=\"line\">daemon   21443  0.0  0.4  42104  4728 ?        S    11:30   0:00 /usr/<span class=\"built_in\">local</span>/apache2/cgi-bin/php-cgi</div><div class=\"line\">daemon   21444  0.0  0.4  42104  4728 ?        S    11:30   0:00 /usr/<span class=\"built_in\">local</span>/apache2/cgi-bin/php-cgi</div><div class=\"line\">daemon   21445  0.0  0.4  42104  4724 ?        S    11:30   0:00 /usr/<span class=\"built_in\">local</span>/apache2/cgi-bin/php-cgi</div><div class=\"line\">daemon   21446  0.0  0.4  42104  4728 ?        S    11:30   0:00 /usr/<span class=\"built_in\">local</span>/apache2/cgi-bin/php-cgi</div><div class=\"line\">daemon   21447  0.0  0.4  42104  4724 ?        S    11:30   0:00 /usr/<span class=\"built_in\">local</span>/apache2/cgi-bin/php-cgi</div><div class=\"line\">daemon   21448  0.0  0.4  42104  4728 ?        S    11:30   0:00 /usr/<span class=\"built_in\">local</span>/apache2/cgi-bin/php-cgi</div><div class=\"line\">daemon   21449  0.0  0.4  42104  4728 ?        S    11:31   0:00 /usr/<span class=\"built_in\">local</span>/apache2/cgi-bin/php-cgi</div><div class=\"line\">daemon   21450  0.0  0.4  42104  4724 ?        S    11:31   0:00 /usr/<span class=\"built_in\">local</span>/apache2/cgi-bin/php-cgi</div><div class=\"line\">daemon   21451  0.0  0.4  42104  4724 ?        S    11:31   0:00 /usr/<span class=\"built_in\">local</span>/apache2/cgi-bin/php-cgi</div><div class=\"line\">daemon   21452  0.0  0.4  42104  4732 ?        S    11:31   0:00 /usr/<span class=\"built_in\">local</span>/apache2/cgi-bin/php-cgi</div><div class=\"line\">daemon   21453  0.0  0.4  42104  4728 ?        S    11:31   0:00 /usr/<span class=\"built_in\">local</span>/apache2/cgi-bin/php-cgi</div><div class=\"line\">root     21455  0.0  0.0 112668   984 pts/0    S+   11:31   0:00 grep --color=auto php</div></pre></td></tr></table></figure>\n</li>\n<li><p>在站点目录下添加 <code>index.php</code></p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;?php</span></div><div class=\"line\">    phpinfo();</div><div class=\"line\"> <span class=\"meta\">?&gt;</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>通过浏览器访问该文件，能够正确输出，则说明配置成功。</p>\n<blockquote>\n<p>这时 <code>phpinfo();</code> 输出的 <code>Server API</code> 应该为 <code>CGI/FastCGI</code>.</p>\n</blockquote>\n</li>\n</ul>\n<h3 id=\"FastCGI模式，使用php-fpm进程管理器\"><a href=\"#FastCGI模式，使用php-fpm进程管理器\" class=\"headerlink\" title=\"FastCGI模式，使用php-fpm进程管理器\"></a>FastCGI模式，使用php-fpm进程管理器</h3><ul>\n<li><p>在 <code>httpd.conf</code> 中添加或者开启</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">LoadModule fastcgi_module modules/mod_fastcgi.so</div><div class=\"line\">LoadModule actions_module modules/mod_actions.so</div></pre></td></tr></table></figure>\n</li>\n<li><p>然后在 <code>httpd.conf</code> 中添加 <code>&lt;IfModule fastcgi_module&gt;</code> 配置段</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;IfModule fastcgi_module&gt;</div><div class=\"line\">   FastCgiExternalServer /usr/local/apache2/cgi-bin/php-cgi -host 127.0.0.1:9000</div><div class=\"line\">   AddType application/x-httpd-php .php</div><div class=\"line\">   AddHandler php-fastcgi .php</div><div class=\"line\">   Action php-fastcgi /cgi-bin/php-cgi</div><div class=\"line\">&lt;/IfModule&gt;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<blockquote>\n<p><code>-host 127.0.0.1:9000</code> ,是php-fpm的开启端口，所以我们还需要把php-fpm打开。</p>\n</blockquote>\n<ul>\n<li>启动 <code>php-fpm</code><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">[root@iZ23a3ua2stZ apache2]<span class=\"comment\"># /usr/local/php5.6/sbin/php-fpm</span></div></pre></td></tr></table></figure>\n</li>\n</ul>\n<blockquote>\n<p>/usr/local/php/sbin/php-fpm{start|stop|quit|restart|reload|logrotate}</p>\n<p>–start 启动php的fastcgi进程<br>–stop 强制终止php的fastcgi进程<br>–quit 平滑终止php的fastcgi进程<br>–restart 重启php的fastcgi进程<br>–reload 重新平滑加载php的php.ini<br>–logrotate 重新启用log文件</p>\n</blockquote>\n<ul>\n<li><p>重启 Apache ,执行 <code>ps aux | grep php</code> 查看相应 php-cgi 进程是否启动</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">[root@iZ23a3ua2stZ apache2]<span class=\"comment\"># ps aux | grep php</span></div><div class=\"line\">[root@iZ23a3ua2stZ apache2]<span class=\"comment\"># ps aux | grep php</span></div><div class=\"line\">root     21680  0.0  0.3 147920  3660 ?        Ss   12:41   0:00 php-fpm: master process (/usr/<span class=\"built_in\">local</span>/php5.6/etc/php-fpm.conf)</div><div class=\"line\">nobody   21681  0.0  0.3 147920  3312 ?        S    12:41   0:00 php-fpm: pool www</div><div class=\"line\">nobody   21682  0.0  0.4 147920  4888 ?        S    12:41   0:00 php-fpm: pool www</div><div class=\"line\">root     21684  0.0  0.0 112664   980 pts/3    S+   12:42   0:00 grep --color=auto php</div></pre></td></tr></table></figure>\n</li>\n<li><p>在站点目录下添加 <code>index.php</code></p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;?php</span></div><div class=\"line\">    phpinfo();</div><div class=\"line\"> <span class=\"meta\">?&gt;</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>通过浏览器访问该文件，能够正确输出，则说明配置成功。</p>\n<blockquote>\n<p>这时 <code>phpinfo();</code> 输出的 <code>Server API</code> 应该为 <code>FPM/FastCGI</code>.</p>\n</blockquote>\n</li>\n</ul>\n<h2 id=\"各种模式比较\"><a href=\"#各种模式比较\" class=\"headerlink\" title=\"各种模式比较\"></a>各种模式比较</h2><blockquote>\n<p>有空再整理。。。</p>\n</blockquote>\n","excerpt":"<p>Apache通过不同的方式，能够实现对PHP支持。常见的几种支持方式有：</p>\n<ul>\n<li>模块支持（handler模式）</li>\n<li>CGI模块</li>\n<li>FastCGI模式，用Apache内置进程管理器</li>\n<li>FastCGI模式，用php-fpm进程管理器</li>\n</ul>","more":"<h2 id=\"Apache安装、PHP安装、mod-fastcgi模块安装\"><a href=\"#Apache安装、PHP安装、mod-fastcgi模块安装\" class=\"headerlink\" title=\"Apache安装、PHP安装、mod_fastcgi模块安装\"></a>Apache安装、PHP安装、mod_fastcgi模块安装</h2><h3 id=\"Apache-安装\"><a href=\"#Apache-安装\" class=\"headerlink\" title=\"Apache 安装\"></a>Apache 安装</h3><p>略过···</p>\n<h3 id=\"PHP-安装\"><a href=\"#PHP-安装\" class=\"headerlink\" title=\"PHP 安装\"></a>PHP 安装</h3><p>示例：安装PHP5.6</p>\n<ol>\n<li><p>下载、解压</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">[root@iZ23a3ua2stZ ~]<span class=\"comment\">#wget http://cn2.php.net/distributions/php-5.6.25.tar.gz</span></div><div class=\"line\">[root@iZ23a3ua2stZ ~]<span class=\"comment\">#tar -zxvf php-5.6.25.tar.gz</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>./configure</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">[root@iZ23a3ua2stZ ~]<span class=\"comment\">#cd php-5.6.25</span></div><div class=\"line\">[root@iZ23a3ua2stZ php-5.6.25]<span class=\"comment\">#./configure --with-apxs2=/usr/local/apache2/bin/apxs --with-mysql --enable-fpm --prefix=/usr/local/php5.6</span></div></pre></td></tr></table></figure>\n<p><code>--enable-fpm</code> 用来来激活对 FPM 的支持</p>\n<p><code>--with-apxs2</code> 该参数作用是把php的解释模块编译成so 文件，并自动添加到 Apache的modules中，并自动在 <code>httpd.conf</code> 中加入对应的加载指令<code>LoadModule php5_module modules/libphp5.so</code></p>\n<blockquote>\n<p><strong>报错1：</strong> 在运行 <code>./configure</code> 时可能会报以下这样的错误。提示我们 运行不了 <code>apxs</code> 这个工具。</p>\n</blockquote>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">Sorry, I cannot run apxs.  Possible reasons follow:</div><div class=\"line\">1 Perl is not installed</div><div class=\"line\">2 apxs was not found. Try to pass the path using --with-apxs2=/path/to/apxs</div><div class=\"line\">3 Apache was not built using --enable-so (the apxs usage page is displayed)</div><div class=\"line\">The output of /usr/<span class=\"built_in\">local</span>/apache2/bin/apxs follows:</div><div class=\"line\">./configure: /usr/<span class=\"built_in\">local</span>/apache2/bin/apxs: /replace/with/path/to/perl/interpreter: bad interpreter: No such file or directory</div><div class=\"line\">configure: error: Aborting</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<blockquote>\n<p>之前我们在Apache模块化体系的小结中介绍过 <code>apxs</code> 实际是一个 perl 脚本。上面报错中 <code>/replace/with/path/to/perl/interpreter</code> 提示我们找不到这个文件，<br>这行实际是 perl 脚本的声明，我们需要将它改成我们服务器perl脚本的地址。</p>\n</blockquote>\n  <figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">[root@iZ23a3ua2stZ php-5.6.25]<span class=\"comment\"># which perl</span></div><div class=\"line\">/usr/bin/perl</div><div class=\"line\">[root@iZ23a3ua2stZ php-5.6.25]<span class=\"comment\"># vi /usr/local/apache2/bin/apxs</span></div><div class=\"line\"><span class=\"comment\">#将第一行 `#!/replace/with/path/to/perl/interpreter` 改成 `#!/usr/bin/perl`</span></div></pre></td></tr></table></figure>\n<blockquote>\n<p><strong>报错2：</strong> configure: error: xml2-config not found. Please check your libxml2 installation.<br>提示我们缺少 <code>libxml2</code>。安装 <code>libxml2</code>.<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">[root@iZ23a3ua2stZ php-5.6.25]<span class=\"comment\">#yum install libxml2</span></div><div class=\"line\">[root@iZ23a3ua2stZ php-5.6.25]<span class=\"comment\">#yum install libxml2-devel -y</span></div></pre></td></tr></table></figure></p>\n</blockquote>\n<p>  <code>./configure</code> 成功会有如下显示。</p>\n  <figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\">+--------------------------------------------------------------------+</div><div class=\"line\">| License:                                                           |</div><div class=\"line\">| This software is subject to the PHP License, available <span class=\"keyword\">in</span> this     |</div><div class=\"line\">| distribution <span class=\"keyword\">in</span> the file LICENSE.  By continuing this installation |</div><div class=\"line\">| process, you are bound by the terms of this license agreement.     |</div><div class=\"line\">| If you <span class=\"keyword\">do</span> not agree with the terms of this license, you must abort |</div><div class=\"line\">| the installation process at this point.                            |</div><div class=\"line\">+--------------------------------------------------------------------+</div><div class=\"line\">Thank you <span class=\"keyword\">for</span> using PHP.</div><div class=\"line\">config.status: creating php5.spec</div><div class=\"line\">config.status: creating main/build-defs.h</div><div class=\"line\">config.status: creating scripts/phpize</div><div class=\"line\">config.status: creating scripts/man1/phpize.1</div><div class=\"line\">config.status: creating scripts/php-config</div><div class=\"line\">config.status: creating scripts/man1/php-config.1</div><div class=\"line\">config.status: creating sapi/cli/php.1</div><div class=\"line\">config.status: creating sapi/fpm/php-fpm.conf</div><div class=\"line\">config.status: creating sapi/fpm/init.d.php-fpm</div><div class=\"line\">config.status: creating sapi/fpm/php-fpm.service</div><div class=\"line\">config.status: creating sapi/fpm/php-fpm.8</div><div class=\"line\">config.status: creating sapi/fpm/status.html</div><div class=\"line\">config.status: creating sapi/cgi/php-cgi.1</div><div class=\"line\">config.status: creating ext/phar/phar.1</div><div class=\"line\">config.status: creating ext/phar/phar.phar.1</div><div class=\"line\">config.status: creating main/php_config.h</div></pre></td></tr></table></figure>\n<ol>\n<li>编译<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">[root@iZ23a3ua2stZ php-5.6.25]<span class=\"comment\">#make &amp;&amp; make install</span></div></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>成功安装<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div></pre></td><td class=\"code\"><pre><div class=\"line\">Build complete.</div><div class=\"line\">Don&apos;t forget to run &apos;make test&apos;.</div><div class=\"line\">Installing PHP SAPI module:       apache2handler</div><div class=\"line\">/usr/local/apache2/build/instdso.sh SH_LIBTOOL=&apos;/usr/local/apache2/build/libtool&apos; libphp5.la /usr/local/apache2/modules</div><div class=\"line\">/usr/local/apache2/build/libtool --mode=install install libphp5.la /usr/local/apache2/modules/</div><div class=\"line\">libtool: install: install .libs/libphp5.so /usr/local/apache2/modules/libphp5.so</div><div class=\"line\">libtool: install: install .libs/libphp5.lai /usr/local/apache2/modules/libphp5.la</div><div class=\"line\">libtool: install: warning: remember to run `libtool --finish /root/php-5.6.25/libs&apos;</div><div class=\"line\">chmod 755 /usr/local/apache2/modules/libphp5.so</div><div class=\"line\">[activating module `php5&apos; in /usr/local/apache2/conf/httpd.conf]</div><div class=\"line\">Installing shared extensions:     /usr/local/php5.6/lib/php/extensions/no-debug-zts-20131226/</div><div class=\"line\">Installing PHP CLI binary:        /usr/local/php5.6/bin/</div><div class=\"line\">Installing PHP CLI man page:      /usr/local/php5.6/php/man/man1/</div><div class=\"line\">Installing PHP FPM binary:        /usr/local/php5.6/sbin/</div><div class=\"line\">Installing PHP FPM config:        /usr/local/php5.6/etc/</div><div class=\"line\">Installing PHP FPM man page:      /usr/local/php5.6/php/man/man8/</div><div class=\"line\">Installing PHP FPM status page:   /usr/local/php5.6/php/php/fpm/</div><div class=\"line\">Installing PHP CGI binary:        /usr/local/php5.6/bin/</div><div class=\"line\">Installing PHP CGI man page:      /usr/local/php5.6/php/man/man1/</div><div class=\"line\">Installing build environment:     /usr/local/php5.6/lib/php/build/</div><div class=\"line\">Installing header files:           /usr/local/php5.6/include/php/</div><div class=\"line\">Installing helper programs:       /usr/local/php5.6/bin/</div><div class=\"line\">  program: phpize</div><div class=\"line\">  program: php-config</div><div class=\"line\">Installing man pages:             /usr/local/php5.6/php/man/man1/</div><div class=\"line\">  page: phpize.1</div><div class=\"line\">  page: php-config.1</div><div class=\"line\">Installing PEAR environment:      /usr/local/php5.6/lib/php/</div><div class=\"line\">[PEAR] Archive_Tar    - installed: 1.4.0</div><div class=\"line\">[PEAR] Console_Getopt - installed: 1.4.1</div><div class=\"line\">[PEAR] Structures_Graph- installed: 1.1.1</div><div class=\"line\">[PEAR] XML_Util       - installed: 1.3.0</div><div class=\"line\">[PEAR] PEAR           - installed: 1.10.1</div><div class=\"line\">Wrote PEAR system config file at: /usr/local/php5.6/etc/pear.conf</div><div class=\"line\">You may want to add: /usr/local/php5.6/lib/php to your php.ini include_path</div><div class=\"line\">/root/php-5.6.25/build/shtool install -c ext/phar/phar.phar /usr/local/php5.6/bin</div><div class=\"line\">ln -s -f phar.phar /usr/local/php5.6/bin/phar</div><div class=\"line\">Installing PDO headers:           /usr/local/php5.6/include/php/ext/pdo/</div></pre></td></tr></table></figure></p>\n<ol>\n<li>设置配置文件<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">cp php.ini-development /usr/local/php5.6/lib/php.ini</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<h3 id=\"mod-fastcgi-模块安装\"><a href=\"#mod-fastcgi-模块安装\" class=\"headerlink\" title=\"mod_fastcgi 模块安装\"></a>mod_fastcgi 模块安装</h3><ol>\n<li><p>下载、解压<br><a href=\"http://n.sinaimg.cn/games/3ece443e/20160907/mod_fastcgi-2.4.6.tar.gz\">mod_fastcgi-2.4.6.tar.gz</a></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">[root@iZ23a3ua2stZ ~]#wget http://n.sinaimg.cn/games/3ece443e/20160907/mod_fastcgi-2.4.6.tar.gz</div><div class=\"line\">[root@iZ23a3ua2stZ ~]#tar -zxvf mod_fastcgi-2.4.6.tar.gz</div><div class=\"line\">cd mod_fastcgi-2.4.6</div></pre></td></tr></table></figure>\n</li>\n<li><p>编译、安装</p>\n<ul>\n<li>查看安装说明<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">[root@iZ23a3ua2stZ ~]#cd mod_fastcgi-2.4.6</div><div class=\"line\">[root@iZ23a3ua2stZ mod_fastcgi-2.4.6]#</div><div class=\"line\">#查看 安装说明文件 (Apache 1.x请查看 INSTALL 文件)</div><div class=\"line\">[root@iZ23a3ua2stZ mod_fastcgi-2.4.6]#vi INSTALL.AP2  </div><div class=\"line\">···</div><div class=\"line\">$ cd &lt;mod_fastcgi_dir&gt;</div><div class=\"line\">$ cp Makefile.AP2 Makefile</div><div class=\"line\">$ make</div><div class=\"line\">$ make install</div><div class=\"line\">If your Apache2 installation isn&apos;t in /usr/local/apache2, then</div><div class=\"line\">set the top_dir variable when running make (or edit the</div><div class=\"line\">Makefile), e.g.</div><div class=\"line\">  $ make top_dir=/opt/httpd/2.0.40</div><div class=\"line\">Add an entry to httpd.conf like this:</div><div class=\"line\">  LoadModule fastcgi_module modules/mod_fastcgi.so</div><div class=\"line\">···</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ol>\n<p>虽然说明文件里描述的很清楚，但我们按照里面的步骤进行编译时，会产生报错。于是找了一大圈问题，发现在 <code>apache2.4</code> 下安装 <code>mod_fastcgi 2.4.6</code> 编译时汇报错，需要打个补丁。</p>\n<ol>\n<li><p>打补丁<br><a href=\"http://n.sinaimg.cn/games/3ece443e/20160907/byte-compile-against-apache24.diff\">补丁下载地址</a></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">[root@iZ23a3ua2stZ mod_fastcgi-2.4.6]<span class=\"comment\">#wget http://n.sinaimg.cn/games/3ece443e/20160907/byte-compile-against-apache24.diff</span></div><div class=\"line\">[root@iZ23a3ua2stZ mod_fastcgi-2.4.6]<span class=\"comment\">#patch -p1 &lt; byte-compile-against-apache24.diff</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>继续编译、安装</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">[root@iZ23a3ua2stZ mod_fastcgi-2.4.6]#make</div><div class=\"line\">[root@iZ23a3ua2stZ mod_fastcgi-2.4.6]#make install</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>然后查看<code>/usr/local/apache2/modules/</code> 下是否已经编译成功 <code>mod_fastcgi.so</code>，<br>并在 <code>httpd.conf</code> 中添加 <code>LoadModule fastcgi_module modules/mod_fastcgi.so</code> 指令。</p>\n<h2 id=\"各种模式配置\"><a href=\"#各种模式配置\" class=\"headerlink\" title=\"各种模式配置\"></a>各种模式配置</h2><h3 id=\"模块模式（最简单）\"><a href=\"#模块模式（最简单）\" class=\"headerlink\" title=\"模块模式（最简单）\"></a>模块模式（最简单）</h3><ul>\n<li><p>在 <code>httpd.conf</code> 中添加或者开启</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">LoadModule php5_module modules/libphp5.so</div></pre></td></tr></table></figure>\n</li>\n<li><p>然后在 <code>httpd.conf</code> 中找到 <code>&lt;IfModule mime_module&gt;</code> 配置段，在其中添加</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">AddType application/x-httpd-php .php</div><div class=\"line\">AddType application/x-httpd-php-source .phps</div></pre></td></tr></table></figure>\n</li>\n<li><p>重启 Apache ,在站点目录下添加 <code>index.php</code></p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;?php</span></div><div class=\"line\">    phpinfo();</div><div class=\"line\"> <span class=\"meta\">?&gt;</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>通过浏览器访问该文件，能够正确输出，则说明配置成功。</p>\n<blockquote>\n<p>这时 <code>phpinfo();</code> 输出的 <code>Server API</code> 应该为 <code>Apache 2.0 Handler</code>.</p>\n</blockquote>\n</li>\n</ul>\n<h3 id=\"CGI模式\"><a href=\"#CGI模式\" class=\"headerlink\" title=\"CGI模式\"></a>CGI模式</h3><ul>\n<li>在 <code>httpd.conf</code> 中添加或者开启<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">LoadModule cgid_module modules/mod_cgid.so</div><div class=\"line\">LoadModule actions_module modules/mod_actions.so</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<blockquote>\n<p><code>mod_cgid</code> ,CGI 处理模块。在某些Unix操作系统上，在多线程服务器fork一个进程是一个代价非常大的操作，因为新进程将会复制父进程所有的线程。为了避免每次CGI调用都进行这样代价大的操作。mod_cgid 采用外部守护进程来负责分派子进程来运行CGI脚本。主服务器使用Unix套接字来与此守护进程进行通信。</p>\n<p>如果在Apache编译过程中选择了多线程MPM，那么Apache将会默认安装mod_cgid模块，而不是mod_cgi。但在用户配置使用层面，mod_cgid 和 mod_cgi 基本相同，唯一例外的是，mod_cgid 通过指令 ScriptSock 给socket命名用于与CGI守护进程通信。</p>\n<p><code>mod_actions</code> ,模块提供基于基于媒体类型或请求方法来执行CGI脚本的方法。该模块引入 <code>Action</code> 和 <code>Script</code> 两个指令。</p>\n</blockquote>\n<ul>\n<li><p>然后在 <code>httpd.conf</code> 中找到 <code>&lt;IfModule mime_module&gt;</code> 配置段，在其中添加</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">AddHandler php-cgi .php</div><div class=\"line\">Action php-cgi \"/cgi-bin/php-cgi\"</div></pre></td></tr></table></figure>\n</li>\n<li><p>然后在 <code>httpd.conf</code> 中找到 <code>&lt;IfModule cgid_module&gt;</code> 配置段，在其中添加</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;IfModule cgid_module&gt;</div><div class=\"line\">    Scriptsock /var/run/cgid.sock</div><div class=\"line\">&lt;/IfModule&gt;</div></pre></td></tr></table></figure>\n</li>\n<li><p>重启 Apache ,在站点目录下添加 <code>index.php</code></p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;?php</span></div><div class=\"line\">    phpinfo();</div><div class=\"line\"> <span class=\"meta\">?&gt;</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>通过浏览器访问该文件，能够正确输出，则说明配置成功。</p>\n<blockquote>\n<p>这时 <code>phpinfo();</code> 输出的 <code>Server API</code> 应该为 <code>CGI/FastCGI</code>.</p>\n</blockquote>\n</li>\n</ul>\n<h3 id=\"FastCGI模式，用Apache内置进程管理器\"><a href=\"#FastCGI模式，用Apache内置进程管理器\" class=\"headerlink\" title=\"FastCGI模式，用Apache内置进程管理器\"></a>FastCGI模式，用Apache内置进程管理器</h3><ul>\n<li><p>在 <code>httpd.conf</code> 中添加或者开启</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">LoadModule fastcgi_module modules/mod_fastcgi.so</div><div class=\"line\">LoadModule actions_module modules/mod_actions.so</div></pre></td></tr></table></figure>\n</li>\n<li><p>然后在 <code>httpd.conf</code> 中添加 <code>&lt;IfModule fastcgi_module&gt;</code> 配置段</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;IfModule fastcgi_module&gt;</div><div class=\"line\">   FastCgiServer /usr/local/apache2/cgi-bin/php-cgi -processes 20</div><div class=\"line\">   AddType application/x-httpd-php .php</div><div class=\"line\">   AddHandler php-fastcgi .php</div><div class=\"line\">   Action php-fastcgi /cgi-bin/php-cgi</div><div class=\"line\">&lt;/IfModule&gt;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<blockquote>\n<p><code>-processes 20</code> ,配置启动的进程数</p>\n</blockquote>\n<ul>\n<li><p>重启 Apache ,执行 <code>ps aux | grep php</code> 查看相应 php-cgi 进程是否启动</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\">[root@iZ23a3ua2stZ apache2]<span class=\"comment\"># ps aux | grep php</span></div><div class=\"line\">daemon   21382  0.0  0.5  42104  5604 ?        S    11:30   0:00 /usr/<span class=\"built_in\">local</span>/apache2/cgi-bin/php-cgi</div><div class=\"line\">daemon   21435  0.0  0.4  42104  4724 ?        S    11:30   0:00 /usr/<span class=\"built_in\">local</span>/apache2/cgi-bin/php-cgi</div><div class=\"line\">daemon   21436  0.0  0.4  42104  4732 ?        S    11:30   0:00 /usr/<span class=\"built_in\">local</span>/apache2/cgi-bin/php-cgi</div><div class=\"line\">daemon   21437  0.0  0.4  42104  4724 ?        S    11:30   0:00 /usr/<span class=\"built_in\">local</span>/apache2/cgi-bin/php-cgi</div><div class=\"line\">daemon   21438  0.0  0.4  42104  4724 ?        S    11:30   0:00 /usr/<span class=\"built_in\">local</span>/apache2/cgi-bin/php-cgi</div><div class=\"line\">daemon   21439  0.0  0.4  42104  4728 ?        S    11:30   0:00 /usr/<span class=\"built_in\">local</span>/apache2/cgi-bin/php-cgi</div><div class=\"line\">daemon   21440  0.0  0.4  42104  4728 ?        S    11:30   0:00 /usr/<span class=\"built_in\">local</span>/apache2/cgi-bin/php-cgi</div><div class=\"line\">daemon   21441  0.0  0.4  42104  4728 ?        S    11:30   0:00 /usr/<span class=\"built_in\">local</span>/apache2/cgi-bin/php-cgi</div><div class=\"line\">daemon   21442  0.0  0.4  42104  4728 ?        S    11:30   0:00 /usr/<span class=\"built_in\">local</span>/apache2/cgi-bin/php-cgi</div><div class=\"line\">daemon   21443  0.0  0.4  42104  4728 ?        S    11:30   0:00 /usr/<span class=\"built_in\">local</span>/apache2/cgi-bin/php-cgi</div><div class=\"line\">daemon   21444  0.0  0.4  42104  4728 ?        S    11:30   0:00 /usr/<span class=\"built_in\">local</span>/apache2/cgi-bin/php-cgi</div><div class=\"line\">daemon   21445  0.0  0.4  42104  4724 ?        S    11:30   0:00 /usr/<span class=\"built_in\">local</span>/apache2/cgi-bin/php-cgi</div><div class=\"line\">daemon   21446  0.0  0.4  42104  4728 ?        S    11:30   0:00 /usr/<span class=\"built_in\">local</span>/apache2/cgi-bin/php-cgi</div><div class=\"line\">daemon   21447  0.0  0.4  42104  4724 ?        S    11:30   0:00 /usr/<span class=\"built_in\">local</span>/apache2/cgi-bin/php-cgi</div><div class=\"line\">daemon   21448  0.0  0.4  42104  4728 ?        S    11:30   0:00 /usr/<span class=\"built_in\">local</span>/apache2/cgi-bin/php-cgi</div><div class=\"line\">daemon   21449  0.0  0.4  42104  4728 ?        S    11:31   0:00 /usr/<span class=\"built_in\">local</span>/apache2/cgi-bin/php-cgi</div><div class=\"line\">daemon   21450  0.0  0.4  42104  4724 ?        S    11:31   0:00 /usr/<span class=\"built_in\">local</span>/apache2/cgi-bin/php-cgi</div><div class=\"line\">daemon   21451  0.0  0.4  42104  4724 ?        S    11:31   0:00 /usr/<span class=\"built_in\">local</span>/apache2/cgi-bin/php-cgi</div><div class=\"line\">daemon   21452  0.0  0.4  42104  4732 ?        S    11:31   0:00 /usr/<span class=\"built_in\">local</span>/apache2/cgi-bin/php-cgi</div><div class=\"line\">daemon   21453  0.0  0.4  42104  4728 ?        S    11:31   0:00 /usr/<span class=\"built_in\">local</span>/apache2/cgi-bin/php-cgi</div><div class=\"line\">root     21455  0.0  0.0 112668   984 pts/0    S+   11:31   0:00 grep --color=auto php</div></pre></td></tr></table></figure>\n</li>\n<li><p>在站点目录下添加 <code>index.php</code></p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;?php</span></div><div class=\"line\">    phpinfo();</div><div class=\"line\"> <span class=\"meta\">?&gt;</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>通过浏览器访问该文件，能够正确输出，则说明配置成功。</p>\n<blockquote>\n<p>这时 <code>phpinfo();</code> 输出的 <code>Server API</code> 应该为 <code>CGI/FastCGI</code>.</p>\n</blockquote>\n</li>\n</ul>\n<h3 id=\"FastCGI模式，使用php-fpm进程管理器\"><a href=\"#FastCGI模式，使用php-fpm进程管理器\" class=\"headerlink\" title=\"FastCGI模式，使用php-fpm进程管理器\"></a>FastCGI模式，使用php-fpm进程管理器</h3><ul>\n<li><p>在 <code>httpd.conf</code> 中添加或者开启</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">LoadModule fastcgi_module modules/mod_fastcgi.so</div><div class=\"line\">LoadModule actions_module modules/mod_actions.so</div></pre></td></tr></table></figure>\n</li>\n<li><p>然后在 <code>httpd.conf</code> 中添加 <code>&lt;IfModule fastcgi_module&gt;</code> 配置段</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;IfModule fastcgi_module&gt;</div><div class=\"line\">   FastCgiExternalServer /usr/local/apache2/cgi-bin/php-cgi -host 127.0.0.1:9000</div><div class=\"line\">   AddType application/x-httpd-php .php</div><div class=\"line\">   AddHandler php-fastcgi .php</div><div class=\"line\">   Action php-fastcgi /cgi-bin/php-cgi</div><div class=\"line\">&lt;/IfModule&gt;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<blockquote>\n<p><code>-host 127.0.0.1:9000</code> ,是php-fpm的开启端口，所以我们还需要把php-fpm打开。</p>\n</blockquote>\n<ul>\n<li>启动 <code>php-fpm</code><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">[root@iZ23a3ua2stZ apache2]<span class=\"comment\"># /usr/local/php5.6/sbin/php-fpm</span></div></pre></td></tr></table></figure>\n</li>\n</ul>\n<blockquote>\n<p>/usr/local/php/sbin/php-fpm{start|stop|quit|restart|reload|logrotate}</p>\n<p>–start 启动php的fastcgi进程<br>–stop 强制终止php的fastcgi进程<br>–quit 平滑终止php的fastcgi进程<br>–restart 重启php的fastcgi进程<br>–reload 重新平滑加载php的php.ini<br>–logrotate 重新启用log文件</p>\n</blockquote>\n<ul>\n<li><p>重启 Apache ,执行 <code>ps aux | grep php</code> 查看相应 php-cgi 进程是否启动</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">[root@iZ23a3ua2stZ apache2]<span class=\"comment\"># ps aux | grep php</span></div><div class=\"line\">[root@iZ23a3ua2stZ apache2]<span class=\"comment\"># ps aux | grep php</span></div><div class=\"line\">root     21680  0.0  0.3 147920  3660 ?        Ss   12:41   0:00 php-fpm: master process (/usr/<span class=\"built_in\">local</span>/php5.6/etc/php-fpm.conf)</div><div class=\"line\">nobody   21681  0.0  0.3 147920  3312 ?        S    12:41   0:00 php-fpm: pool www</div><div class=\"line\">nobody   21682  0.0  0.4 147920  4888 ?        S    12:41   0:00 php-fpm: pool www</div><div class=\"line\">root     21684  0.0  0.0 112664   980 pts/3    S+   12:42   0:00 grep --color=auto php</div></pre></td></tr></table></figure>\n</li>\n<li><p>在站点目录下添加 <code>index.php</code></p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;?php</span></div><div class=\"line\">    phpinfo();</div><div class=\"line\"> <span class=\"meta\">?&gt;</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>通过浏览器访问该文件，能够正确输出，则说明配置成功。</p>\n<blockquote>\n<p>这时 <code>phpinfo();</code> 输出的 <code>Server API</code> 应该为 <code>FPM/FastCGI</code>.</p>\n</blockquote>\n</li>\n</ul>\n<h2 id=\"各种模式比较\"><a href=\"#各种模式比较\" class=\"headerlink\" title=\"各种模式比较\"></a>各种模式比较</h2><blockquote>\n<p>有空再整理。。。</p>\n</blockquote>"},{"title":"Apache分层与模块化体系结构小结","date":"2016-08-26T02:10:00.000Z","_content":"\n## Apache的分层体系结构\n最新版本的Apache按照其功能一般会被划分为五层，\n1. 操作系统平台功能层\n> 各操作系统本身提供的底层功能，比如进程、线程管理,进程和线程之间通信、网络套接字通信、文件操作等\n\n2. 可移植运行库层（操作系统适配层）\n> 封装不同操作系统的底层细节，向上提供统一的接口。\n\n3. Apache核心功能层\n> 提供最基本的HTTP服务功能，对其他模块提供对应的API。\n\n4. Apache可选功能层\n> 这一层通常指 Apache模块，Apache核心功能层提供不了的功能交给不同的Apache模块来处理。\n\n5. Apache第三方功能层\n> Apache的一些模块中用到的一些第三方开发的类库等\n\n![Apache的分层体系结构](http://n.sinaimg.cn/games/3ece443e/20160826/apacheFenCengYuMoKuaiHuaTiXiJieGou.png)\n\n<!-- more -->\n\n**Apache源码目录结构简介**\n\n```\nbuild/    #\ndocs/     #包含一些相关文档\ninclude/  #包含一些必须的头文件\nmodules/  #包含Apache的各种模块\nos/       #各种操作系统的依赖文件\nserver/   #Apache核心功能（请求处理、协议处理、多处理模块mpm等）\nsrclib/   #Apache开发和运行需要的基础库（Apr_util,apr,pcre）\nsupport/  #一些辅助工具等\ntest/     #APR的测试函数\n```\n\n### 操作系统平台功能层\nApache实质上还是运行在操作系统上面的应用程序，因此必须使用操作系统本身提供的底层功能，比如进程和线程、进程和线程的通信，网络套接字通信和文件操作等。\n\n### 可移植运行库（操作系统适配层，APR）\nAPR(Apache portable runtime) 是操作系统的适配层，通过APR也实现了Apache的跨平台。因为不同的操作系统提供的底层API不同，也就是实现同一个操作所用的函数方法不同，这时在Apache和操作系统中间设计一个APR，这样APR根据不同的操作系统分别实现一个相同的功能，这样apache可以调用APR的提供的一个API接口。\n\n\n例如，如果Apache要创建一个进程，这时会调用 APR中的 apr_proc_create()函数，此时APR会自动识别操作系统的类型根据不同的类型调用操作系统通过的API，如是Unix系列则会调用unix中的fork()方法实现创建进程；如果是windows系统，则调用createProcess()创建进程。\n\n所以，Apache在处理与操作系统有关的事物时，不用考虑是基于哪一个操作系统，直接用APR的统一API接口就可，具体的由APR来实现跨操作系统。\n\n实际上任何应用程序都可以借助APR进行跨平台。\n\n### Apache核心功能层\n1. 核心功能层主要实现Apache的基本功能和核心功能，包括读取和响应HTTP请求，处理HTTP协议；核心功能层包括核心程序和核心模块\n\n**核心程序** 主要是实现Apache的基本功能：\n* 启动和终止apache\n* 处理配置文件(config.c)\n* 接受和处理HTTP连接\n* 读取HTTP请求并对该请求进行处理\n* 处理HTTP协议\n\n核心功能层另一个是 **核心模块**\n\n 2. Apache 最基本的核心功能由apache 核心完成，除此之外，核心无法提供的功能则全部由模块提供。为了允许这些模块能完成控制apache的处理，apache核心程序提供了对应的API；这些API是指每个模块中包含的一系列的函数(核心程序处理HTTP请求的时候用来将信息传递给模块)，以及一些列apr的函数。\n\n### Apache可选功能层\nApache有很多模块，包括mod_ssl mod_proxy mod_perl ；apache的文件都是C语言开发的，如果有perl脚本写的模块，必须把mod_perl 模块加载，否则不能运行\n\n### Apache第三方功能库\napahe的一些模块会使用到第三方的开发库，比如 mod_ssl 使用了 openssl；mod_perl 使用了perl 开发库，这些库并不属于apache，是第三方库。\n\n\n## Apache模块化体系结构\nApache体系结构的模块化特点，主要体现在第三层（核心功能层）与第四层（可选功能层）。Apache采用模块化体系结构，使它作为一个HTTP服务器的大部分功能都被分割为相互独立的模块，使我们能够通过增加或者删除模块就可以扩展和修改Apache的功能。\n\n### 核心模块&可选模块\nApache中大部分模块都是可选择的，这意味着这些模块的缺失至多影响Apache的功能完整性，而不影响起运行。但有两个模块是必须的，mod_core和mod_so。\n\n#### 核心模块\n\n* **mod_core:** 负责处理配置文件中的大部分配置指令，并根据这些指令运行Apache。\n* **mod_so:** 负责动态加载其余的模块。没有该模块，其余的模块就无法被加载使用。\n* **MPM模块** 即，多进程处理模块，虽然该模块是一个可选模块，但一般情况下，我们都会使用，所以我们将其也视为核心模块。\n> 前两个模块我们必须静态编译。mpm模块的话，当我们在编译Apache是已经确定使用某一MPM模块之后通过也可将其采用静态编译的方式进行编译。但是如果我们想要在Apache安装之后动态修改MPM模式的话，那么在Apache编译安装的时候，MPM模块就需要通过动态编译的方式进行编译安装。\n\n\n#### 非核心模块\n一些常见的可选模块：\n* mod_alias\n> Provides for mapping different parts of the host filesystem in the document tree and for URL redirection\n> 为不同的url地址映射到文件系统的指定位置，即『起别名』\n\n* mod_autoindex\n> 用于生成目录索引\n\n* mod_cache\n> RFC 2616标准的HTTP缓存的过滤器。是apache中基于URI键的内容动态缓冲(内存或磁盘)。\n> 从Apache2.2起，mod_cache和mod_file_cache将不再是试验模块，它们已经足够稳定，可以用于实际生产中了。这些缓冲体系提供了一个强有力的途径来加速原始web服务器(origin webserver)和代理服务器(proxy)的HTTP处理速度。\n\n* mod_cgi\n>  执行cgi脚本\n\n* mod_dir\n> 目录的索引可以来自两个来源：\n> * 由用户编写的文件，通常被称为 index.html。该DirectoryIndex指令设置该文件的名称。这是由控制 mod_dir。\n> * 否则，由服务器生成的列表。这是通过提供mod_autoindex。\n>\n> 这两种功能是分开的，这样如果你想你可以完全删除（或更换）自动索引生成。\n>\n> 当服务器收到一个URL请求的“斜线”重定向发出 http://servername/foo/dirname那里 dirname是一个目录。目录需要一个结尾斜杠，所以mod_dir发出一个重定向 http://servername/foo/dirname/。\n\n* mod_filter\n> 该模块实现输出内容过滤器的智能，上下文相关的配置。例如，Apache可以被配置为处理不同的内容类型通过不同的过滤器，即使当内容类型是不是预先已知的（例如，在一个代理）。\n\n* mod_include\n> 服务器端包含\n\n* mod_isapi\n> ISAPI Extensions within Apache for Windows\n> 本模块实现了互联网服务扩展应用程序编程接口(Internet Server extension API)。本模块使得Windows上的Apache能有限地实现互联网服务扩展(比如调用ISAPI的动态连接库)。\n\n* mod_mime\n> 关联请求的文件名的扩展名与文件的行为（处理器和过滤器）和内容（MIME类型，语言，字符集和编码)\n\n* mod_mime_magic\n> 通过读取部分文件内容自动猜测文件的MIME类型\n> 本模块采取Unix系统下file(1)命令相同的方法：检查文件开始的几个字节，来判定文件的MIME类型。它被作为当mod_mime无法解析时，用来处理的\"第二道防线\"。\n\n* mod_proxy\n> 用于提供代理服务，能够支持的包括正向代理、反向代理、透明代理、缓存、负载均衡，HTTP代理、FTP代理、SSL代理等若干强大的功能.\n\n* mod_rewrite\n> 提供了一个基于规则的重写动态URL重写引擎。\n\n* mod_session\n> 会话支持\n\n* mod_ssl\n> 提供使用安全套接字层（SSL）和传输层安全（TLS）协议强加密。（https协议必须）\n\n* mod_status\n> 提供有关服务器活动和性能信息\n\n* mod_vhost_alias\n> 虚拟主机配置支持\n\n### 静态模块&动态模块\n\n#### 概念&区别\n**什么是静态？**  其实就是编译的时候所有的模块自己编译进 httpd 这个文件中 ，启动的时候这些模块就已经加载进来了，也就是可以使用了。\n\n查看当前Apache通过静态编译的模块\n```\n[root@MyServer ~]# httpd -l\nCompiled in modules:\ncore.c\nmod_so.c\nhttp_core.c\nevent.c\n```\n\n**那么什么是动态？**  静态是直接编译进httpd中， 那么动态显然就不编译进去了，也就是你启动的时候根本不会加载这个模块， 而是给你一个module.so 文件，你一定要使用 loadmodule 这个语法来加载，这个模块才有效。\n\n***配置方法：***\n静态的模块通常在http.conf中用<ifmodule></ifmodule> 来配置，动态的要先loadmoule来加载，然后再<ifmodule></ifmodule>配置。\n官方说静态的比动态的在性能方面多5%左右。\n\n***比较：***\n相对来说，静态的效率高些，而动态方式配置方面灵活。想想如果编译进去的C这个module你想升级或者去掉，静态方式的就只能重新编译Apache了。\n\n下面这句在Apache源文件夹下运行，可以查看默认情况下Apache都给你装了那些module进去：\n```\n./configure –help | grep disable\n```\n\n####\n\n#### 模块管理\n\n##### 1. 模块的类型：\n* 基本(B)模块默认包含，必须明确禁用；\n* 扩展(E)/实验(X)模块默认不包含，必须明确启用。\n\n那么，针对以上这些类型的模块，在编译时有以下几种操作方式：\n\n**--disable-MODULE**\n禁用MODULE模块(仅用于基本模块)\n\n**--enable-MODULE=shared**\n将MODULE编译为DSO(可用于所有模块)\n\n**--enable-MODULE=static**\n将MODULE静态连接进核心(仅用于扩展和实验模块)\n\n**--enable-mods-shared=MODULE-LIST**\n将MODULE-LIST中的所有模块都编译成DSO(可用于所有模块)\n\n**--enable-modules=MODULE-LIST**\n将MODULE-LIST静态连接进核心(可用于所有模块)\n\n***针对--enable-modules和--enable-mods-shared有两个懒办法就是 most参数和all参数，分别表示“很多的”和“所有”。***\n**例如：**\n```\nmod_alias是个基本模块，不想安装的话就： --disable-alias\nmod_rewrite是个扩展模块，想动态加载它：--enable-rewrite=shared，想静态加载就是：--enable-rewrite=static\n想静态编译mod_alias和mod_rewrite：--enable-modules='alias rewrite'\n想动态编译mod_alias和mod_rewrite：--enable-mods-shared='alias rewrite'\n```\n\n##### 2. 动态模块管理\n**Tips:** 让Apache日后可以动态编译和加载模块：\n如果想让Apache日后可以支持动态编译(DSO)更多的module，需要在初次安装时把so这个模块编译到核心（即，静态编译）。\n> 如果编译中包含任何DSO模块，则mod_so会被自动包含进核心。如果希望核心以后能够装载DSO，但不实际编译任何DSO模块，则需明确指定：\n> * 针对apache1.x: --enable-module=so\n> * 针对apache2.x: --enable-so=static\n\n针对Apache2.2.x的一些例子：\n```\n最大化静态安装Apache:\n./configure --prefix=/usr/local/apache --enable-modules=all\n最大化动态安装Apache:\n./configure --prefix=/usr/local/apache --enable-mods-shared=all\n静态安装rewrite、动态安装deflate以及headers\n./configure --prefix=/usr/local/apache --enable-rewrite=static --enable-deflate=shared --enable-headers=shared\n不安装基本的alais，保留以后的扩展DSO能力：\n./configure --prefix=/usr/local/apache --enable-so=static --disable-alias\n```\n\n##### 利用APXS工具动态为Apache编译新的DSO（动态共享对象）\n一般如果我们需要开启或者关闭某一些模块，只需要在 `httpd.conf` 中注释相应的模块的加载指令或者去掉指令前面的注释。\n但如果我们需要的模块在 Apache编译安装的时候没有编译进去，我们可以用APXS工具来动态编译，并加入到Apache中。\n\nAPXS,是一个给Apache服务器编译和安装扩展模块的工具。即将一个或者多个源代码或者目标文件编译成一个动态共享对象（DSO），然后可以通过Apache的 LoadModule 指令加载运行。\n因此，要使用该工具，我们的Apache必须支持DSO特性，即已经安装有mod_so 模块，否则安装会报错。\n\napxs命令选项说明：\n```\napxs -g [ -S name=value ] -n modname\napxs -q [ -v ] [ -S name=value ] query ...\napxs -c [ -S name=value ] [ -o dsofile ] [ -I incdir ] [ -D name=value ] [ -L libdir ] [ -l libname ] [ -Wc,compiler-flags ] [ -Wl,linker-flags ] files ...\napxs -i [ -S name=value ] [ -n modname ] [ -a ] [ -A ] dso-file ...\napxs -e [ -S name=value ] [ -n modname ] [ -a ] [ -A ] dso-file ...\n\n```\n\n常用选项：\n- -n modname\n  > 明确的设置模块名称, -i(安装)和-g（模板生成）选项\n\n执行选项：\n- -q\n  > 设置编译httpd时的变量和环境\n\n配置选项：\n- -S name=value\n  > 此选项更改apxs的上述设置。\n\n模板生成选项：\n- -g\n  > 该选项将生成一个子目录（名称将取决 -n设置），并会生成两个文件，一个要编译模块的源文件，用来创建模块或作为一个快速启动的apxs机制。另一个，用于编译和安装此模块，如mod_name.cMakefile\n\nDSO 编译选项\n- -c\n > 表明将进行编译操作。它首先编译C源文件(.c)，到对应的目标文件（.o），然后通过连接这些目标文件以及其余的目标文件（.a和.a）构建一个动态的共享对象dsofile\n\n- -o dsofile\n  > 明确规定创建动态共享对象文件名。如果没有指定，并且不能从文件名猜测到，则会生成 mod_unknow.so\n\n- -D name=value\n > 直接传给编译命令自定义参数\n\n- -L libdir\n > 设置编译时将要用到的自定义类库路径\n\n- -l libname\n > 设置编译时用到的自定义类库名称\n\n- -Wc，compiler-flags\n > 设置或添加本地编译器特定的选项\n\n- -Wl，linker-flags\n > 设置或添加本地特定连接的选项。\n\n- -p\n > 该选项将会使apxs 连接和引用apr/apr-util类库，使用apr/apr-util将会对编译非常有用。\n\nDSO的安装和配置选项\n\n- -i\n  > 表明安装操作，安装一个或多个动态共享对象到服务器的模块目录\n\n- -a\n > 自动添加 LoadModule 指令到 httpd.conf 配置文件，或者开启该指令。\n\n- -A\n > 同 -a 选项，但创建的 LoadModule指令是被注释的状态，也就是说该模块已经准备就绪，但没开启。\n\n- -e\n > 类似于 -a 和 -A 用来编辑 httpd.conf 而不安装该模块。\n\n\n##### 示例\n示例：我们有一个可用的Apache 模块 mod_foo.c 想要编译进Apache的DSO。\n```\n$ apxs -c mod_foo.c\n/path/to/libtool --mode=compile gcc ... -c mod_foo.c\n/path/to/libtool --mode=link gcc ... -o mod_foo.la mod_foo.slo\n$ _\n```\n\n然后，在Apache的配置文件中加入 loadModule 指令加载此共享对象。为了简化该步骤 apxs 提供了自动更新配置文件的的功能选项(-a,-A)。\n\n```\n$ apxs -i -a mod_foo.la\n/path/to/instdso.sh mod_foo.la /path/to/apache/modules\n/path/to/libtool --mode=install cp mod_foo.la /path/to/apache/modules ... chmod 755 /path/to/apache/modules/mod_foo.so\n[activating module `foo' in /path/to/apache/conf/httpd.conf]\n$ _\n```\n这时，我们在httpd.conf 中就能看到这条指令。\n```\nLoadModule foo_module modules/mod_foo.so\n```\n如果没有使用 -a 选项自动添加，则需要手动添加进去。\n\n如果想默认不开启该模块，可以使用 -A 选项。即\n```\n$ apxs -i -A mod_foo.c\n```\n\n**apxs快速测试**\n\n我们可以通过创建一个Apache的测试模块，通过对应的Makefile\n```\n$ apxs -g -n foo\nCreating [DIR] foo\nCreating [FILE] foo/Makefile\nCreating [FILE] foo/modules.mk\nCreating [FILE] foo/mod_foo.c\nCreating [FILE] foo/.deps\n$ _\n```\n然后可以立即编译该测试模块到DSO，并加载到Apache。\n\n```\n$ cd foo\n$ make all reload\napxs -c mod_foo.c\n/path/to/libtool --mode=compile gcc ... -c mod_foo.c\n/path/to/libtool --mode=link gcc ... -o mod_foo.la mod_foo.slo\napxs -i -a -n \"foo\" mod_foo.la\n/path/to/instdso.sh mod_foo.la /path/to/apache/modules\n/path/to/libtool --mode=install cp mod_foo.la /path/to/apache/modules ... chmod 755 /path/to/apache/modules/mod_foo.so\n[activating module `foo' in /path/to/apache/conf/httpd.conf]\napachectl restart\n/path/to/apache/sbin/apachectl restart: httpd not running, trying to start\n[Tue Mar 31 11:27:55 1998] [debug] mod_so.c(303): loaded module foo_module\n/path/to/apache/sbin/apachectl restart: httpd started\n$ _\n```\n\nover~\n","source":"_posts/Apache分层与模块化结构体系小结.md","raw":"---\ntitle: Apache分层与模块化体系结构小结\ndate: 2016-08-26 10:10:00\ntags:\n- Apache分层\n- Apache模块\ncategories:\n- Apache\n---\n\n## Apache的分层体系结构\n最新版本的Apache按照其功能一般会被划分为五层，\n1. 操作系统平台功能层\n> 各操作系统本身提供的底层功能，比如进程、线程管理,进程和线程之间通信、网络套接字通信、文件操作等\n\n2. 可移植运行库层（操作系统适配层）\n> 封装不同操作系统的底层细节，向上提供统一的接口。\n\n3. Apache核心功能层\n> 提供最基本的HTTP服务功能，对其他模块提供对应的API。\n\n4. Apache可选功能层\n> 这一层通常指 Apache模块，Apache核心功能层提供不了的功能交给不同的Apache模块来处理。\n\n5. Apache第三方功能层\n> Apache的一些模块中用到的一些第三方开发的类库等\n\n![Apache的分层体系结构](http://n.sinaimg.cn/games/3ece443e/20160826/apacheFenCengYuMoKuaiHuaTiXiJieGou.png)\n\n<!-- more -->\n\n**Apache源码目录结构简介**\n\n```\nbuild/    #\ndocs/     #包含一些相关文档\ninclude/  #包含一些必须的头文件\nmodules/  #包含Apache的各种模块\nos/       #各种操作系统的依赖文件\nserver/   #Apache核心功能（请求处理、协议处理、多处理模块mpm等）\nsrclib/   #Apache开发和运行需要的基础库（Apr_util,apr,pcre）\nsupport/  #一些辅助工具等\ntest/     #APR的测试函数\n```\n\n### 操作系统平台功能层\nApache实质上还是运行在操作系统上面的应用程序，因此必须使用操作系统本身提供的底层功能，比如进程和线程、进程和线程的通信，网络套接字通信和文件操作等。\n\n### 可移植运行库（操作系统适配层，APR）\nAPR(Apache portable runtime) 是操作系统的适配层，通过APR也实现了Apache的跨平台。因为不同的操作系统提供的底层API不同，也就是实现同一个操作所用的函数方法不同，这时在Apache和操作系统中间设计一个APR，这样APR根据不同的操作系统分别实现一个相同的功能，这样apache可以调用APR的提供的一个API接口。\n\n\n例如，如果Apache要创建一个进程，这时会调用 APR中的 apr_proc_create()函数，此时APR会自动识别操作系统的类型根据不同的类型调用操作系统通过的API，如是Unix系列则会调用unix中的fork()方法实现创建进程；如果是windows系统，则调用createProcess()创建进程。\n\n所以，Apache在处理与操作系统有关的事物时，不用考虑是基于哪一个操作系统，直接用APR的统一API接口就可，具体的由APR来实现跨操作系统。\n\n实际上任何应用程序都可以借助APR进行跨平台。\n\n### Apache核心功能层\n1. 核心功能层主要实现Apache的基本功能和核心功能，包括读取和响应HTTP请求，处理HTTP协议；核心功能层包括核心程序和核心模块\n\n**核心程序** 主要是实现Apache的基本功能：\n* 启动和终止apache\n* 处理配置文件(config.c)\n* 接受和处理HTTP连接\n* 读取HTTP请求并对该请求进行处理\n* 处理HTTP协议\n\n核心功能层另一个是 **核心模块**\n\n 2. Apache 最基本的核心功能由apache 核心完成，除此之外，核心无法提供的功能则全部由模块提供。为了允许这些模块能完成控制apache的处理，apache核心程序提供了对应的API；这些API是指每个模块中包含的一系列的函数(核心程序处理HTTP请求的时候用来将信息传递给模块)，以及一些列apr的函数。\n\n### Apache可选功能层\nApache有很多模块，包括mod_ssl mod_proxy mod_perl ；apache的文件都是C语言开发的，如果有perl脚本写的模块，必须把mod_perl 模块加载，否则不能运行\n\n### Apache第三方功能库\napahe的一些模块会使用到第三方的开发库，比如 mod_ssl 使用了 openssl；mod_perl 使用了perl 开发库，这些库并不属于apache，是第三方库。\n\n\n## Apache模块化体系结构\nApache体系结构的模块化特点，主要体现在第三层（核心功能层）与第四层（可选功能层）。Apache采用模块化体系结构，使它作为一个HTTP服务器的大部分功能都被分割为相互独立的模块，使我们能够通过增加或者删除模块就可以扩展和修改Apache的功能。\n\n### 核心模块&可选模块\nApache中大部分模块都是可选择的，这意味着这些模块的缺失至多影响Apache的功能完整性，而不影响起运行。但有两个模块是必须的，mod_core和mod_so。\n\n#### 核心模块\n\n* **mod_core:** 负责处理配置文件中的大部分配置指令，并根据这些指令运行Apache。\n* **mod_so:** 负责动态加载其余的模块。没有该模块，其余的模块就无法被加载使用。\n* **MPM模块** 即，多进程处理模块，虽然该模块是一个可选模块，但一般情况下，我们都会使用，所以我们将其也视为核心模块。\n> 前两个模块我们必须静态编译。mpm模块的话，当我们在编译Apache是已经确定使用某一MPM模块之后通过也可将其采用静态编译的方式进行编译。但是如果我们想要在Apache安装之后动态修改MPM模式的话，那么在Apache编译安装的时候，MPM模块就需要通过动态编译的方式进行编译安装。\n\n\n#### 非核心模块\n一些常见的可选模块：\n* mod_alias\n> Provides for mapping different parts of the host filesystem in the document tree and for URL redirection\n> 为不同的url地址映射到文件系统的指定位置，即『起别名』\n\n* mod_autoindex\n> 用于生成目录索引\n\n* mod_cache\n> RFC 2616标准的HTTP缓存的过滤器。是apache中基于URI键的内容动态缓冲(内存或磁盘)。\n> 从Apache2.2起，mod_cache和mod_file_cache将不再是试验模块，它们已经足够稳定，可以用于实际生产中了。这些缓冲体系提供了一个强有力的途径来加速原始web服务器(origin webserver)和代理服务器(proxy)的HTTP处理速度。\n\n* mod_cgi\n>  执行cgi脚本\n\n* mod_dir\n> 目录的索引可以来自两个来源：\n> * 由用户编写的文件，通常被称为 index.html。该DirectoryIndex指令设置该文件的名称。这是由控制 mod_dir。\n> * 否则，由服务器生成的列表。这是通过提供mod_autoindex。\n>\n> 这两种功能是分开的，这样如果你想你可以完全删除（或更换）自动索引生成。\n>\n> 当服务器收到一个URL请求的“斜线”重定向发出 http://servername/foo/dirname那里 dirname是一个目录。目录需要一个结尾斜杠，所以mod_dir发出一个重定向 http://servername/foo/dirname/。\n\n* mod_filter\n> 该模块实现输出内容过滤器的智能，上下文相关的配置。例如，Apache可以被配置为处理不同的内容类型通过不同的过滤器，即使当内容类型是不是预先已知的（例如，在一个代理）。\n\n* mod_include\n> 服务器端包含\n\n* mod_isapi\n> ISAPI Extensions within Apache for Windows\n> 本模块实现了互联网服务扩展应用程序编程接口(Internet Server extension API)。本模块使得Windows上的Apache能有限地实现互联网服务扩展(比如调用ISAPI的动态连接库)。\n\n* mod_mime\n> 关联请求的文件名的扩展名与文件的行为（处理器和过滤器）和内容（MIME类型，语言，字符集和编码)\n\n* mod_mime_magic\n> 通过读取部分文件内容自动猜测文件的MIME类型\n> 本模块采取Unix系统下file(1)命令相同的方法：检查文件开始的几个字节，来判定文件的MIME类型。它被作为当mod_mime无法解析时，用来处理的\"第二道防线\"。\n\n* mod_proxy\n> 用于提供代理服务，能够支持的包括正向代理、反向代理、透明代理、缓存、负载均衡，HTTP代理、FTP代理、SSL代理等若干强大的功能.\n\n* mod_rewrite\n> 提供了一个基于规则的重写动态URL重写引擎。\n\n* mod_session\n> 会话支持\n\n* mod_ssl\n> 提供使用安全套接字层（SSL）和传输层安全（TLS）协议强加密。（https协议必须）\n\n* mod_status\n> 提供有关服务器活动和性能信息\n\n* mod_vhost_alias\n> 虚拟主机配置支持\n\n### 静态模块&动态模块\n\n#### 概念&区别\n**什么是静态？**  其实就是编译的时候所有的模块自己编译进 httpd 这个文件中 ，启动的时候这些模块就已经加载进来了，也就是可以使用了。\n\n查看当前Apache通过静态编译的模块\n```\n[root@MyServer ~]# httpd -l\nCompiled in modules:\ncore.c\nmod_so.c\nhttp_core.c\nevent.c\n```\n\n**那么什么是动态？**  静态是直接编译进httpd中， 那么动态显然就不编译进去了，也就是你启动的时候根本不会加载这个模块， 而是给你一个module.so 文件，你一定要使用 loadmodule 这个语法来加载，这个模块才有效。\n\n***配置方法：***\n静态的模块通常在http.conf中用<ifmodule></ifmodule> 来配置，动态的要先loadmoule来加载，然后再<ifmodule></ifmodule>配置。\n官方说静态的比动态的在性能方面多5%左右。\n\n***比较：***\n相对来说，静态的效率高些，而动态方式配置方面灵活。想想如果编译进去的C这个module你想升级或者去掉，静态方式的就只能重新编译Apache了。\n\n下面这句在Apache源文件夹下运行，可以查看默认情况下Apache都给你装了那些module进去：\n```\n./configure –help | grep disable\n```\n\n####\n\n#### 模块管理\n\n##### 1. 模块的类型：\n* 基本(B)模块默认包含，必须明确禁用；\n* 扩展(E)/实验(X)模块默认不包含，必须明确启用。\n\n那么，针对以上这些类型的模块，在编译时有以下几种操作方式：\n\n**--disable-MODULE**\n禁用MODULE模块(仅用于基本模块)\n\n**--enable-MODULE=shared**\n将MODULE编译为DSO(可用于所有模块)\n\n**--enable-MODULE=static**\n将MODULE静态连接进核心(仅用于扩展和实验模块)\n\n**--enable-mods-shared=MODULE-LIST**\n将MODULE-LIST中的所有模块都编译成DSO(可用于所有模块)\n\n**--enable-modules=MODULE-LIST**\n将MODULE-LIST静态连接进核心(可用于所有模块)\n\n***针对--enable-modules和--enable-mods-shared有两个懒办法就是 most参数和all参数，分别表示“很多的”和“所有”。***\n**例如：**\n```\nmod_alias是个基本模块，不想安装的话就： --disable-alias\nmod_rewrite是个扩展模块，想动态加载它：--enable-rewrite=shared，想静态加载就是：--enable-rewrite=static\n想静态编译mod_alias和mod_rewrite：--enable-modules='alias rewrite'\n想动态编译mod_alias和mod_rewrite：--enable-mods-shared='alias rewrite'\n```\n\n##### 2. 动态模块管理\n**Tips:** 让Apache日后可以动态编译和加载模块：\n如果想让Apache日后可以支持动态编译(DSO)更多的module，需要在初次安装时把so这个模块编译到核心（即，静态编译）。\n> 如果编译中包含任何DSO模块，则mod_so会被自动包含进核心。如果希望核心以后能够装载DSO，但不实际编译任何DSO模块，则需明确指定：\n> * 针对apache1.x: --enable-module=so\n> * 针对apache2.x: --enable-so=static\n\n针对Apache2.2.x的一些例子：\n```\n最大化静态安装Apache:\n./configure --prefix=/usr/local/apache --enable-modules=all\n最大化动态安装Apache:\n./configure --prefix=/usr/local/apache --enable-mods-shared=all\n静态安装rewrite、动态安装deflate以及headers\n./configure --prefix=/usr/local/apache --enable-rewrite=static --enable-deflate=shared --enable-headers=shared\n不安装基本的alais，保留以后的扩展DSO能力：\n./configure --prefix=/usr/local/apache --enable-so=static --disable-alias\n```\n\n##### 利用APXS工具动态为Apache编译新的DSO（动态共享对象）\n一般如果我们需要开启或者关闭某一些模块，只需要在 `httpd.conf` 中注释相应的模块的加载指令或者去掉指令前面的注释。\n但如果我们需要的模块在 Apache编译安装的时候没有编译进去，我们可以用APXS工具来动态编译，并加入到Apache中。\n\nAPXS,是一个给Apache服务器编译和安装扩展模块的工具。即将一个或者多个源代码或者目标文件编译成一个动态共享对象（DSO），然后可以通过Apache的 LoadModule 指令加载运行。\n因此，要使用该工具，我们的Apache必须支持DSO特性，即已经安装有mod_so 模块，否则安装会报错。\n\napxs命令选项说明：\n```\napxs -g [ -S name=value ] -n modname\napxs -q [ -v ] [ -S name=value ] query ...\napxs -c [ -S name=value ] [ -o dsofile ] [ -I incdir ] [ -D name=value ] [ -L libdir ] [ -l libname ] [ -Wc,compiler-flags ] [ -Wl,linker-flags ] files ...\napxs -i [ -S name=value ] [ -n modname ] [ -a ] [ -A ] dso-file ...\napxs -e [ -S name=value ] [ -n modname ] [ -a ] [ -A ] dso-file ...\n\n```\n\n常用选项：\n- -n modname\n  > 明确的设置模块名称, -i(安装)和-g（模板生成）选项\n\n执行选项：\n- -q\n  > 设置编译httpd时的变量和环境\n\n配置选项：\n- -S name=value\n  > 此选项更改apxs的上述设置。\n\n模板生成选项：\n- -g\n  > 该选项将生成一个子目录（名称将取决 -n设置），并会生成两个文件，一个要编译模块的源文件，用来创建模块或作为一个快速启动的apxs机制。另一个，用于编译和安装此模块，如mod_name.cMakefile\n\nDSO 编译选项\n- -c\n > 表明将进行编译操作。它首先编译C源文件(.c)，到对应的目标文件（.o），然后通过连接这些目标文件以及其余的目标文件（.a和.a）构建一个动态的共享对象dsofile\n\n- -o dsofile\n  > 明确规定创建动态共享对象文件名。如果没有指定，并且不能从文件名猜测到，则会生成 mod_unknow.so\n\n- -D name=value\n > 直接传给编译命令自定义参数\n\n- -L libdir\n > 设置编译时将要用到的自定义类库路径\n\n- -l libname\n > 设置编译时用到的自定义类库名称\n\n- -Wc，compiler-flags\n > 设置或添加本地编译器特定的选项\n\n- -Wl，linker-flags\n > 设置或添加本地特定连接的选项。\n\n- -p\n > 该选项将会使apxs 连接和引用apr/apr-util类库，使用apr/apr-util将会对编译非常有用。\n\nDSO的安装和配置选项\n\n- -i\n  > 表明安装操作，安装一个或多个动态共享对象到服务器的模块目录\n\n- -a\n > 自动添加 LoadModule 指令到 httpd.conf 配置文件，或者开启该指令。\n\n- -A\n > 同 -a 选项，但创建的 LoadModule指令是被注释的状态，也就是说该模块已经准备就绪，但没开启。\n\n- -e\n > 类似于 -a 和 -A 用来编辑 httpd.conf 而不安装该模块。\n\n\n##### 示例\n示例：我们有一个可用的Apache 模块 mod_foo.c 想要编译进Apache的DSO。\n```\n$ apxs -c mod_foo.c\n/path/to/libtool --mode=compile gcc ... -c mod_foo.c\n/path/to/libtool --mode=link gcc ... -o mod_foo.la mod_foo.slo\n$ _\n```\n\n然后，在Apache的配置文件中加入 loadModule 指令加载此共享对象。为了简化该步骤 apxs 提供了自动更新配置文件的的功能选项(-a,-A)。\n\n```\n$ apxs -i -a mod_foo.la\n/path/to/instdso.sh mod_foo.la /path/to/apache/modules\n/path/to/libtool --mode=install cp mod_foo.la /path/to/apache/modules ... chmod 755 /path/to/apache/modules/mod_foo.so\n[activating module `foo' in /path/to/apache/conf/httpd.conf]\n$ _\n```\n这时，我们在httpd.conf 中就能看到这条指令。\n```\nLoadModule foo_module modules/mod_foo.so\n```\n如果没有使用 -a 选项自动添加，则需要手动添加进去。\n\n如果想默认不开启该模块，可以使用 -A 选项。即\n```\n$ apxs -i -A mod_foo.c\n```\n\n**apxs快速测试**\n\n我们可以通过创建一个Apache的测试模块，通过对应的Makefile\n```\n$ apxs -g -n foo\nCreating [DIR] foo\nCreating [FILE] foo/Makefile\nCreating [FILE] foo/modules.mk\nCreating [FILE] foo/mod_foo.c\nCreating [FILE] foo/.deps\n$ _\n```\n然后可以立即编译该测试模块到DSO，并加载到Apache。\n\n```\n$ cd foo\n$ make all reload\napxs -c mod_foo.c\n/path/to/libtool --mode=compile gcc ... -c mod_foo.c\n/path/to/libtool --mode=link gcc ... -o mod_foo.la mod_foo.slo\napxs -i -a -n \"foo\" mod_foo.la\n/path/to/instdso.sh mod_foo.la /path/to/apache/modules\n/path/to/libtool --mode=install cp mod_foo.la /path/to/apache/modules ... chmod 755 /path/to/apache/modules/mod_foo.so\n[activating module `foo' in /path/to/apache/conf/httpd.conf]\napachectl restart\n/path/to/apache/sbin/apachectl restart: httpd not running, trying to start\n[Tue Mar 31 11:27:55 1998] [debug] mod_so.c(303): loaded module foo_module\n/path/to/apache/sbin/apachectl restart: httpd started\n$ _\n```\n\nover~\n","slug":"Apache分层与模块化结构体系小结","published":1,"updated":"2016-09-02T02:25:59.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"city8vnmp0005g29fmlbuyz1n","content":"<h2 id=\"Apache的分层体系结构\"><a href=\"#Apache的分层体系结构\" class=\"headerlink\" title=\"Apache的分层体系结构\"></a>Apache的分层体系结构</h2><p>最新版本的Apache按照其功能一般会被划分为五层，</p>\n<ol>\n<li><p>操作系统平台功能层</p>\n<blockquote>\n<p>各操作系统本身提供的底层功能，比如进程、线程管理,进程和线程之间通信、网络套接字通信、文件操作等</p>\n</blockquote>\n</li>\n<li><p>可移植运行库层（操作系统适配层）</p>\n<blockquote>\n<p>封装不同操作系统的底层细节，向上提供统一的接口。</p>\n</blockquote>\n</li>\n<li><p>Apache核心功能层</p>\n<blockquote>\n<p>提供最基本的HTTP服务功能，对其他模块提供对应的API。</p>\n</blockquote>\n</li>\n<li><p>Apache可选功能层</p>\n<blockquote>\n<p>这一层通常指 Apache模块，Apache核心功能层提供不了的功能交给不同的Apache模块来处理。</p>\n</blockquote>\n</li>\n<li><p>Apache第三方功能层</p>\n<blockquote>\n<p>Apache的一些模块中用到的一些第三方开发的类库等</p>\n</blockquote>\n</li>\n</ol>\n<p><img src=\"http://n.sinaimg.cn/games/3ece443e/20160826/apacheFenCengYuMoKuaiHuaTiXiJieGou.png\" alt=\"Apache的分层体系结构\"></p>\n<a id=\"more\"></a>\n<p><strong>Apache源码目录结构简介</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">build/    #</div><div class=\"line\">docs/     #包含一些相关文档</div><div class=\"line\">include/  #包含一些必须的头文件</div><div class=\"line\">modules/  #包含Apache的各种模块</div><div class=\"line\">os/       #各种操作系统的依赖文件</div><div class=\"line\">server/   #Apache核心功能（请求处理、协议处理、多处理模块mpm等）</div><div class=\"line\">srclib/   #Apache开发和运行需要的基础库（Apr_util,apr,pcre）</div><div class=\"line\">support/  #一些辅助工具等</div><div class=\"line\">test/     #APR的测试函数</div></pre></td></tr></table></figure>\n<h3 id=\"操作系统平台功能层\"><a href=\"#操作系统平台功能层\" class=\"headerlink\" title=\"操作系统平台功能层\"></a>操作系统平台功能层</h3><p>Apache实质上还是运行在操作系统上面的应用程序，因此必须使用操作系统本身提供的底层功能，比如进程和线程、进程和线程的通信，网络套接字通信和文件操作等。</p>\n<h3 id=\"可移植运行库（操作系统适配层，APR）\"><a href=\"#可移植运行库（操作系统适配层，APR）\" class=\"headerlink\" title=\"可移植运行库（操作系统适配层，APR）\"></a>可移植运行库（操作系统适配层，APR）</h3><p>APR(Apache portable runtime) 是操作系统的适配层，通过APR也实现了Apache的跨平台。因为不同的操作系统提供的底层API不同，也就是实现同一个操作所用的函数方法不同，这时在Apache和操作系统中间设计一个APR，这样APR根据不同的操作系统分别实现一个相同的功能，这样apache可以调用APR的提供的一个API接口。</p>\n<p>例如，如果Apache要创建一个进程，这时会调用 APR中的 apr_proc_create()函数，此时APR会自动识别操作系统的类型根据不同的类型调用操作系统通过的API，如是Unix系列则会调用unix中的fork()方法实现创建进程；如果是windows系统，则调用createProcess()创建进程。</p>\n<p>所以，Apache在处理与操作系统有关的事物时，不用考虑是基于哪一个操作系统，直接用APR的统一API接口就可，具体的由APR来实现跨操作系统。</p>\n<p>实际上任何应用程序都可以借助APR进行跨平台。</p>\n<h3 id=\"Apache核心功能层\"><a href=\"#Apache核心功能层\" class=\"headerlink\" title=\"Apache核心功能层\"></a>Apache核心功能层</h3><ol>\n<li>核心功能层主要实现Apache的基本功能和核心功能，包括读取和响应HTTP请求，处理HTTP协议；核心功能层包括核心程序和核心模块</li>\n</ol>\n<p><strong>核心程序</strong> 主要是实现Apache的基本功能：</p>\n<ul>\n<li>启动和终止apache</li>\n<li>处理配置文件(config.c)</li>\n<li>接受和处理HTTP连接</li>\n<li>读取HTTP请求并对该请求进行处理</li>\n<li>处理HTTP协议</li>\n</ul>\n<p>核心功能层另一个是 <strong>核心模块</strong></p>\n<ol>\n<li>Apache 最基本的核心功能由apache 核心完成，除此之外，核心无法提供的功能则全部由模块提供。为了允许这些模块能完成控制apache的处理，apache核心程序提供了对应的API；这些API是指每个模块中包含的一系列的函数(核心程序处理HTTP请求的时候用来将信息传递给模块)，以及一些列apr的函数。</li>\n</ol>\n<h3 id=\"Apache可选功能层\"><a href=\"#Apache可选功能层\" class=\"headerlink\" title=\"Apache可选功能层\"></a>Apache可选功能层</h3><p>Apache有很多模块，包括mod_ssl mod_proxy mod_perl ；apache的文件都是C语言开发的，如果有perl脚本写的模块，必须把mod_perl 模块加载，否则不能运行</p>\n<h3 id=\"Apache第三方功能库\"><a href=\"#Apache第三方功能库\" class=\"headerlink\" title=\"Apache第三方功能库\"></a>Apache第三方功能库</h3><p>apahe的一些模块会使用到第三方的开发库，比如 mod_ssl 使用了 openssl；mod_perl 使用了perl 开发库，这些库并不属于apache，是第三方库。</p>\n<h2 id=\"Apache模块化体系结构\"><a href=\"#Apache模块化体系结构\" class=\"headerlink\" title=\"Apache模块化体系结构\"></a>Apache模块化体系结构</h2><p>Apache体系结构的模块化特点，主要体现在第三层（核心功能层）与第四层（可选功能层）。Apache采用模块化体系结构，使它作为一个HTTP服务器的大部分功能都被分割为相互独立的模块，使我们能够通过增加或者删除模块就可以扩展和修改Apache的功能。</p>\n<h3 id=\"核心模块-amp-可选模块\"><a href=\"#核心模块-amp-可选模块\" class=\"headerlink\" title=\"核心模块&amp;可选模块\"></a>核心模块&amp;可选模块</h3><p>Apache中大部分模块都是可选择的，这意味着这些模块的缺失至多影响Apache的功能完整性，而不影响起运行。但有两个模块是必须的，mod_core和mod_so。</p>\n<h4 id=\"核心模块\"><a href=\"#核心模块\" class=\"headerlink\" title=\"核心模块\"></a>核心模块</h4><ul>\n<li><strong>mod_core:</strong> 负责处理配置文件中的大部分配置指令，并根据这些指令运行Apache。</li>\n<li><strong>mod_so:</strong> 负责动态加载其余的模块。没有该模块，其余的模块就无法被加载使用。</li>\n<li><strong>MPM模块</strong> 即，多进程处理模块，虽然该模块是一个可选模块，但一般情况下，我们都会使用，所以我们将其也视为核心模块。<blockquote>\n<p>前两个模块我们必须静态编译。mpm模块的话，当我们在编译Apache是已经确定使用某一MPM模块之后通过也可将其采用静态编译的方式进行编译。但是如果我们想要在Apache安装之后动态修改MPM模式的话，那么在Apache编译安装的时候，MPM模块就需要通过动态编译的方式进行编译安装。</p>\n</blockquote>\n</li>\n</ul>\n<h4 id=\"非核心模块\"><a href=\"#非核心模块\" class=\"headerlink\" title=\"非核心模块\"></a>非核心模块</h4><p>一些常见的可选模块：</p>\n<ul>\n<li><p>mod_alias</p>\n<blockquote>\n<p>Provides for mapping different parts of the host filesystem in the document tree and for URL redirection<br>为不同的url地址映射到文件系统的指定位置，即『起别名』</p>\n</blockquote>\n</li>\n<li><p>mod_autoindex</p>\n<blockquote>\n<p>用于生成目录索引</p>\n</blockquote>\n</li>\n<li><p>mod_cache</p>\n<blockquote>\n<p>RFC 2616标准的HTTP缓存的过滤器。是apache中基于URI键的内容动态缓冲(内存或磁盘)。<br>从Apache2.2起，mod_cache和mod_file_cache将不再是试验模块，它们已经足够稳定，可以用于实际生产中了。这些缓冲体系提供了一个强有力的途径来加速原始web服务器(origin webserver)和代理服务器(proxy)的HTTP处理速度。</p>\n</blockquote>\n</li>\n<li><p>mod_cgi</p>\n<blockquote>\n<p> 执行cgi脚本</p>\n</blockquote>\n</li>\n<li><p>mod_dir</p>\n<blockquote>\n<p>目录的索引可以来自两个来源：</p>\n<ul>\n<li>由用户编写的文件，通常被称为 index.html。该DirectoryIndex指令设置该文件的名称。这是由控制 mod_dir。</li>\n<li>否则，由服务器生成的列表。这是通过提供mod_autoindex。</li>\n</ul>\n<p>这两种功能是分开的，这样如果你想你可以完全删除（或更换）自动索引生成。</p>\n<p>当服务器收到一个URL请求的“斜线”重定向发出 <a href=\"http://servername/foo/dirname那里\" target=\"_blank\" rel=\"external\">http://servername/foo/dirname那里</a> dirname是一个目录。目录需要一个结尾斜杠，所以mod_dir发出一个重定向 <a href=\"http://servername/foo/dirname/。\" target=\"_blank\" rel=\"external\">http://servername/foo/dirname/。</a></p>\n</blockquote>\n</li>\n<li><p>mod_filter</p>\n<blockquote>\n<p>该模块实现输出内容过滤器的智能，上下文相关的配置。例如，Apache可以被配置为处理不同的内容类型通过不同的过滤器，即使当内容类型是不是预先已知的（例如，在一个代理）。</p>\n</blockquote>\n</li>\n<li><p>mod_include</p>\n<blockquote>\n<p>服务器端包含</p>\n</blockquote>\n</li>\n<li><p>mod_isapi</p>\n<blockquote>\n<p>ISAPI Extensions within Apache for Windows<br>本模块实现了互联网服务扩展应用程序编程接口(Internet Server extension API)。本模块使得Windows上的Apache能有限地实现互联网服务扩展(比如调用ISAPI的动态连接库)。</p>\n</blockquote>\n</li>\n<li><p>mod_mime</p>\n<blockquote>\n<p>关联请求的文件名的扩展名与文件的行为（处理器和过滤器）和内容（MIME类型，语言，字符集和编码)</p>\n</blockquote>\n</li>\n<li><p>mod_mime_magic</p>\n<blockquote>\n<p>通过读取部分文件内容自动猜测文件的MIME类型<br>本模块采取Unix系统下file(1)命令相同的方法：检查文件开始的几个字节，来判定文件的MIME类型。它被作为当mod_mime无法解析时，用来处理的”第二道防线”。</p>\n</blockquote>\n</li>\n<li><p>mod_proxy</p>\n<blockquote>\n<p>用于提供代理服务，能够支持的包括正向代理、反向代理、透明代理、缓存、负载均衡，HTTP代理、FTP代理、SSL代理等若干强大的功能.</p>\n</blockquote>\n</li>\n<li><p>mod_rewrite</p>\n<blockquote>\n<p>提供了一个基于规则的重写动态URL重写引擎。</p>\n</blockquote>\n</li>\n<li><p>mod_session</p>\n<blockquote>\n<p>会话支持</p>\n</blockquote>\n</li>\n<li><p>mod_ssl</p>\n<blockquote>\n<p>提供使用安全套接字层（SSL）和传输层安全（TLS）协议强加密。（https协议必须）</p>\n</blockquote>\n</li>\n<li><p>mod_status</p>\n<blockquote>\n<p>提供有关服务器活动和性能信息</p>\n</blockquote>\n</li>\n<li><p>mod_vhost_alias</p>\n<blockquote>\n<p>虚拟主机配置支持</p>\n</blockquote>\n</li>\n</ul>\n<h3 id=\"静态模块-amp-动态模块\"><a href=\"#静态模块-amp-动态模块\" class=\"headerlink\" title=\"静态模块&amp;动态模块\"></a>静态模块&amp;动态模块</h3><h4 id=\"概念-amp-区别\"><a href=\"#概念-amp-区别\" class=\"headerlink\" title=\"概念&amp;区别\"></a>概念&amp;区别</h4><p><strong>什么是静态？</strong>  其实就是编译的时候所有的模块自己编译进 httpd 这个文件中 ，启动的时候这些模块就已经加载进来了，也就是可以使用了。</p>\n<p>查看当前Apache通过静态编译的模块<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">[root@MyServer ~]# httpd -l</div><div class=\"line\">Compiled in modules:</div><div class=\"line\">core.c</div><div class=\"line\">mod_so.c</div><div class=\"line\">http_core.c</div><div class=\"line\">event.c</div></pre></td></tr></table></figure></p>\n<p><strong>那么什么是动态？</strong>  静态是直接编译进httpd中， 那么动态显然就不编译进去了，也就是你启动的时候根本不会加载这个模块， 而是给你一个module.so 文件，你一定要使用 loadmodule 这个语法来加载，这个模块才有效。</p>\n<p><strong><em>配置方法：</em></strong><br>静态的模块通常在http.conf中用<ifmodule></ifmodule> 来配置，动态的要先loadmoule来加载，然后再<ifmodule></ifmodule>配置。<br>官方说静态的比动态的在性能方面多5%左右。</p>\n<p><strong><em>比较：</em></strong><br>相对来说，静态的效率高些，而动态方式配置方面灵活。想想如果编译进去的C这个module你想升级或者去掉，静态方式的就只能重新编译Apache了。</p>\n<p>下面这句在Apache源文件夹下运行，可以查看默认情况下Apache都给你装了那些module进去：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">./configure –help | grep disable</div></pre></td></tr></table></figure></p>\n<p>####</p>\n<h4 id=\"模块管理\"><a href=\"#模块管理\" class=\"headerlink\" title=\"模块管理\"></a>模块管理</h4><h5 id=\"1-模块的类型：\"><a href=\"#1-模块的类型：\" class=\"headerlink\" title=\"1. 模块的类型：\"></a>1. 模块的类型：</h5><ul>\n<li>基本(B)模块默认包含，必须明确禁用；</li>\n<li>扩展(E)/实验(X)模块默认不包含，必须明确启用。</li>\n</ul>\n<p>那么，针对以上这些类型的模块，在编译时有以下几种操作方式：</p>\n<p><strong>–disable-MODULE</strong><br>禁用MODULE模块(仅用于基本模块)</p>\n<p><strong>–enable-MODULE=shared</strong><br>将MODULE编译为DSO(可用于所有模块)</p>\n<p><strong>–enable-MODULE=static</strong><br>将MODULE静态连接进核心(仅用于扩展和实验模块)</p>\n<p><strong>–enable-mods-shared=MODULE-LIST</strong><br>将MODULE-LIST中的所有模块都编译成DSO(可用于所有模块)</p>\n<p><strong>–enable-modules=MODULE-LIST</strong><br>将MODULE-LIST静态连接进核心(可用于所有模块)</p>\n<p><strong><em>针对–enable-modules和–enable-mods-shared有两个懒办法就是 most参数和all参数，分别表示“很多的”和“所有”。</em></strong><br><strong>例如：</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">mod_alias是个基本模块，不想安装的话就： --disable-alias</div><div class=\"line\">mod_rewrite是个扩展模块，想动态加载它：--enable-rewrite=shared，想静态加载就是：--enable-rewrite=static</div><div class=\"line\">想静态编译mod_alias和mod_rewrite：--enable-modules=&apos;alias rewrite&apos;</div><div class=\"line\">想动态编译mod_alias和mod_rewrite：--enable-mods-shared=&apos;alias rewrite&apos;</div></pre></td></tr></table></figure></p>\n<h5 id=\"2-动态模块管理\"><a href=\"#2-动态模块管理\" class=\"headerlink\" title=\"2. 动态模块管理\"></a>2. 动态模块管理</h5><p><strong>Tips:</strong> 让Apache日后可以动态编译和加载模块：<br>如果想让Apache日后可以支持动态编译(DSO)更多的module，需要在初次安装时把so这个模块编译到核心（即，静态编译）。</p>\n<blockquote>\n<p>如果编译中包含任何DSO模块，则mod_so会被自动包含进核心。如果希望核心以后能够装载DSO，但不实际编译任何DSO模块，则需明确指定：</p>\n<ul>\n<li>针对apache1.x: –enable-module=so</li>\n<li>针对apache2.x: –enable-so=static</li>\n</ul>\n</blockquote>\n<p>针对Apache2.2.x的一些例子：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">最大化静态安装Apache:</div><div class=\"line\">./configure --prefix=/usr/local/apache --enable-modules=all</div><div class=\"line\">最大化动态安装Apache:</div><div class=\"line\">./configure --prefix=/usr/local/apache --enable-mods-shared=all</div><div class=\"line\">静态安装rewrite、动态安装deflate以及headers</div><div class=\"line\">./configure --prefix=/usr/local/apache --enable-rewrite=static --enable-deflate=shared --enable-headers=shared</div><div class=\"line\">不安装基本的alais，保留以后的扩展DSO能力：</div><div class=\"line\">./configure --prefix=/usr/local/apache --enable-so=static --disable-alias</div></pre></td></tr></table></figure></p>\n<h5 id=\"利用APXS工具动态为Apache编译新的DSO（动态共享对象）\"><a href=\"#利用APXS工具动态为Apache编译新的DSO（动态共享对象）\" class=\"headerlink\" title=\"利用APXS工具动态为Apache编译新的DSO（动态共享对象）\"></a>利用APXS工具动态为Apache编译新的DSO（动态共享对象）</h5><p>一般如果我们需要开启或者关闭某一些模块，只需要在 <code>httpd.conf</code> 中注释相应的模块的加载指令或者去掉指令前面的注释。<br>但如果我们需要的模块在 Apache编译安装的时候没有编译进去，我们可以用APXS工具来动态编译，并加入到Apache中。</p>\n<p>APXS,是一个给Apache服务器编译和安装扩展模块的工具。即将一个或者多个源代码或者目标文件编译成一个动态共享对象（DSO），然后可以通过Apache的 LoadModule 指令加载运行。<br>因此，要使用该工具，我们的Apache必须支持DSO特性，即已经安装有mod_so 模块，否则安装会报错。</p>\n<p>apxs命令选项说明：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">apxs -g [ -S name=value ] -n modname</div><div class=\"line\">apxs -q [ -v ] [ -S name=value ] query ...</div><div class=\"line\">apxs -c [ -S name=value ] [ -o dsofile ] [ -I incdir ] [ -D name=value ] [ -L libdir ] [ -l libname ] [ -Wc,compiler-flags ] [ -Wl,linker-flags ] files ...</div><div class=\"line\">apxs -i [ -S name=value ] [ -n modname ] [ -a ] [ -A ] dso-file ...</div><div class=\"line\">apxs -e [ -S name=value ] [ -n modname ] [ -a ] [ -A ] dso-file ...</div></pre></td></tr></table></figure></p>\n<p>常用选项：</p>\n<ul>\n<li>-n modname<blockquote>\n<p>明确的设置模块名称, -i(安装)和-g（模板生成）选项</p>\n</blockquote>\n</li>\n</ul>\n<p>执行选项：</p>\n<ul>\n<li>-q<blockquote>\n<p>设置编译httpd时的变量和环境</p>\n</blockquote>\n</li>\n</ul>\n<p>配置选项：</p>\n<ul>\n<li>-S name=value<blockquote>\n<p>此选项更改apxs的上述设置。</p>\n</blockquote>\n</li>\n</ul>\n<p>模板生成选项：</p>\n<ul>\n<li>-g<blockquote>\n<p>该选项将生成一个子目录（名称将取决 -n设置），并会生成两个文件，一个要编译模块的源文件，用来创建模块或作为一个快速启动的apxs机制。另一个，用于编译和安装此模块，如mod_name.cMakefile</p>\n</blockquote>\n</li>\n</ul>\n<p>DSO 编译选项</p>\n<ul>\n<li><p>-c</p>\n<blockquote>\n<p>表明将进行编译操作。它首先编译C源文件(.c)，到对应的目标文件（.o），然后通过连接这些目标文件以及其余的目标文件（.a和.a）构建一个动态的共享对象dsofile</p>\n</blockquote>\n</li>\n<li><p>-o dsofile</p>\n<blockquote>\n<p>明确规定创建动态共享对象文件名。如果没有指定，并且不能从文件名猜测到，则会生成 mod_unknow.so</p>\n</blockquote>\n</li>\n<li><p>-D name=value</p>\n<blockquote>\n<p>直接传给编译命令自定义参数</p>\n</blockquote>\n</li>\n<li><p>-L libdir</p>\n<blockquote>\n<p>设置编译时将要用到的自定义类库路径</p>\n</blockquote>\n</li>\n<li><p>-l libname</p>\n<blockquote>\n<p>设置编译时用到的自定义类库名称</p>\n</blockquote>\n</li>\n<li><p>-Wc，compiler-flags</p>\n<blockquote>\n<p>设置或添加本地编译器特定的选项</p>\n</blockquote>\n</li>\n<li><p>-Wl，linker-flags</p>\n<blockquote>\n<p>设置或添加本地特定连接的选项。</p>\n</blockquote>\n</li>\n<li><p>-p</p>\n<blockquote>\n<p>该选项将会使apxs 连接和引用apr/apr-util类库，使用apr/apr-util将会对编译非常有用。</p>\n</blockquote>\n</li>\n</ul>\n<p>DSO的安装和配置选项</p>\n<ul>\n<li><p>-i</p>\n<blockquote>\n<p>表明安装操作，安装一个或多个动态共享对象到服务器的模块目录</p>\n</blockquote>\n</li>\n<li><p>-a</p>\n<blockquote>\n<p>自动添加 LoadModule 指令到 httpd.conf 配置文件，或者开启该指令。</p>\n</blockquote>\n</li>\n<li><p>-A</p>\n<blockquote>\n<p>同 -a 选项，但创建的 LoadModule指令是被注释的状态，也就是说该模块已经准备就绪，但没开启。</p>\n</blockquote>\n</li>\n<li><p>-e</p>\n<blockquote>\n<p>类似于 -a 和 -A 用来编辑 httpd.conf 而不安装该模块。</p>\n</blockquote>\n</li>\n</ul>\n<h5 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h5><p>示例：我们有一个可用的Apache 模块 mod_foo.c 想要编译进Apache的DSO。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ apxs -c mod_foo.c</div><div class=\"line\">/path/to/libtool --mode=compile gcc ... -c mod_foo.c</div><div class=\"line\">/path/to/libtool --mode=link gcc ... -o mod_foo.la mod_foo.slo</div><div class=\"line\">$ _</div></pre></td></tr></table></figure></p>\n<p>然后，在Apache的配置文件中加入 loadModule 指令加载此共享对象。为了简化该步骤 apxs 提供了自动更新配置文件的的功能选项(-a,-A)。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ apxs -i -a mod_foo.la</div><div class=\"line\">/path/to/instdso.sh mod_foo.la /path/to/apache/modules</div><div class=\"line\">/path/to/libtool --mode=install cp mod_foo.la /path/to/apache/modules ... chmod 755 /path/to/apache/modules/mod_foo.so</div><div class=\"line\">[activating module `foo&apos; in /path/to/apache/conf/httpd.conf]</div><div class=\"line\">$ _</div></pre></td></tr></table></figure>\n<p>这时，我们在httpd.conf 中就能看到这条指令。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">LoadModule foo_module modules/mod_foo.so</div></pre></td></tr></table></figure></p>\n<p>如果没有使用 -a 选项自动添加，则需要手动添加进去。</p>\n<p>如果想默认不开启该模块，可以使用 -A 选项。即<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ apxs -i -A mod_foo.c</div></pre></td></tr></table></figure></p>\n<p><strong>apxs快速测试</strong></p>\n<p>我们可以通过创建一个Apache的测试模块，通过对应的Makefile<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ apxs -g -n foo</div><div class=\"line\">Creating [DIR] foo</div><div class=\"line\">Creating [FILE] foo/Makefile</div><div class=\"line\">Creating [FILE] foo/modules.mk</div><div class=\"line\">Creating [FILE] foo/mod_foo.c</div><div class=\"line\">Creating [FILE] foo/.deps</div><div class=\"line\">$ _</div></pre></td></tr></table></figure></p>\n<p>然后可以立即编译该测试模块到DSO，并加载到Apache。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ cd foo</div><div class=\"line\">$ make all reload</div><div class=\"line\">apxs -c mod_foo.c</div><div class=\"line\">/path/to/libtool --mode=compile gcc ... -c mod_foo.c</div><div class=\"line\">/path/to/libtool --mode=link gcc ... -o mod_foo.la mod_foo.slo</div><div class=\"line\">apxs -i -a -n &quot;foo&quot; mod_foo.la</div><div class=\"line\">/path/to/instdso.sh mod_foo.la /path/to/apache/modules</div><div class=\"line\">/path/to/libtool --mode=install cp mod_foo.la /path/to/apache/modules ... chmod 755 /path/to/apache/modules/mod_foo.so</div><div class=\"line\">[activating module `foo&apos; in /path/to/apache/conf/httpd.conf]</div><div class=\"line\">apachectl restart</div><div class=\"line\">/path/to/apache/sbin/apachectl restart: httpd not running, trying to start</div><div class=\"line\">[Tue Mar 31 11:27:55 1998] [debug] mod_so.c(303): loaded module foo_module</div><div class=\"line\">/path/to/apache/sbin/apachectl restart: httpd started</div><div class=\"line\">$ _</div></pre></td></tr></table></figure>\n<p>over~</p>\n","excerpt":"<h2 id=\"Apache的分层体系结构\"><a href=\"#Apache的分层体系结构\" class=\"headerlink\" title=\"Apache的分层体系结构\"></a>Apache的分层体系结构</h2><p>最新版本的Apache按照其功能一般会被划分为五层，</p>\n<ol>\n<li><p>操作系统平台功能层</p>\n<blockquote>\n<p>各操作系统本身提供的底层功能，比如进程、线程管理,进程和线程之间通信、网络套接字通信、文件操作等</p>\n</blockquote>\n</li>\n<li><p>可移植运行库层（操作系统适配层）</p>\n<blockquote>\n<p>封装不同操作系统的底层细节，向上提供统一的接口。</p>\n</blockquote>\n</li>\n<li><p>Apache核心功能层</p>\n<blockquote>\n<p>提供最基本的HTTP服务功能，对其他模块提供对应的API。</p>\n</blockquote>\n</li>\n<li><p>Apache可选功能层</p>\n<blockquote>\n<p>这一层通常指 Apache模块，Apache核心功能层提供不了的功能交给不同的Apache模块来处理。</p>\n</blockquote>\n</li>\n<li><p>Apache第三方功能层</p>\n<blockquote>\n<p>Apache的一些模块中用到的一些第三方开发的类库等</p>\n</blockquote>\n</li>\n</ol>\n<p><img src=\"http://n.sinaimg.cn/games/3ece443e/20160826/apacheFenCengYuMoKuaiHuaTiXiJieGou.png\" alt=\"Apache的分层体系结构\"></p>","more":"<p><strong>Apache源码目录结构简介</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">build/    #</div><div class=\"line\">docs/     #包含一些相关文档</div><div class=\"line\">include/  #包含一些必须的头文件</div><div class=\"line\">modules/  #包含Apache的各种模块</div><div class=\"line\">os/       #各种操作系统的依赖文件</div><div class=\"line\">server/   #Apache核心功能（请求处理、协议处理、多处理模块mpm等）</div><div class=\"line\">srclib/   #Apache开发和运行需要的基础库（Apr_util,apr,pcre）</div><div class=\"line\">support/  #一些辅助工具等</div><div class=\"line\">test/     #APR的测试函数</div></pre></td></tr></table></figure>\n<h3 id=\"操作系统平台功能层\"><a href=\"#操作系统平台功能层\" class=\"headerlink\" title=\"操作系统平台功能层\"></a>操作系统平台功能层</h3><p>Apache实质上还是运行在操作系统上面的应用程序，因此必须使用操作系统本身提供的底层功能，比如进程和线程、进程和线程的通信，网络套接字通信和文件操作等。</p>\n<h3 id=\"可移植运行库（操作系统适配层，APR）\"><a href=\"#可移植运行库（操作系统适配层，APR）\" class=\"headerlink\" title=\"可移植运行库（操作系统适配层，APR）\"></a>可移植运行库（操作系统适配层，APR）</h3><p>APR(Apache portable runtime) 是操作系统的适配层，通过APR也实现了Apache的跨平台。因为不同的操作系统提供的底层API不同，也就是实现同一个操作所用的函数方法不同，这时在Apache和操作系统中间设计一个APR，这样APR根据不同的操作系统分别实现一个相同的功能，这样apache可以调用APR的提供的一个API接口。</p>\n<p>例如，如果Apache要创建一个进程，这时会调用 APR中的 apr_proc_create()函数，此时APR会自动识别操作系统的类型根据不同的类型调用操作系统通过的API，如是Unix系列则会调用unix中的fork()方法实现创建进程；如果是windows系统，则调用createProcess()创建进程。</p>\n<p>所以，Apache在处理与操作系统有关的事物时，不用考虑是基于哪一个操作系统，直接用APR的统一API接口就可，具体的由APR来实现跨操作系统。</p>\n<p>实际上任何应用程序都可以借助APR进行跨平台。</p>\n<h3 id=\"Apache核心功能层\"><a href=\"#Apache核心功能层\" class=\"headerlink\" title=\"Apache核心功能层\"></a>Apache核心功能层</h3><ol>\n<li>核心功能层主要实现Apache的基本功能和核心功能，包括读取和响应HTTP请求，处理HTTP协议；核心功能层包括核心程序和核心模块</li>\n</ol>\n<p><strong>核心程序</strong> 主要是实现Apache的基本功能：</p>\n<ul>\n<li>启动和终止apache</li>\n<li>处理配置文件(config.c)</li>\n<li>接受和处理HTTP连接</li>\n<li>读取HTTP请求并对该请求进行处理</li>\n<li>处理HTTP协议</li>\n</ul>\n<p>核心功能层另一个是 <strong>核心模块</strong></p>\n<ol>\n<li>Apache 最基本的核心功能由apache 核心完成，除此之外，核心无法提供的功能则全部由模块提供。为了允许这些模块能完成控制apache的处理，apache核心程序提供了对应的API；这些API是指每个模块中包含的一系列的函数(核心程序处理HTTP请求的时候用来将信息传递给模块)，以及一些列apr的函数。</li>\n</ol>\n<h3 id=\"Apache可选功能层\"><a href=\"#Apache可选功能层\" class=\"headerlink\" title=\"Apache可选功能层\"></a>Apache可选功能层</h3><p>Apache有很多模块，包括mod_ssl mod_proxy mod_perl ；apache的文件都是C语言开发的，如果有perl脚本写的模块，必须把mod_perl 模块加载，否则不能运行</p>\n<h3 id=\"Apache第三方功能库\"><a href=\"#Apache第三方功能库\" class=\"headerlink\" title=\"Apache第三方功能库\"></a>Apache第三方功能库</h3><p>apahe的一些模块会使用到第三方的开发库，比如 mod_ssl 使用了 openssl；mod_perl 使用了perl 开发库，这些库并不属于apache，是第三方库。</p>\n<h2 id=\"Apache模块化体系结构\"><a href=\"#Apache模块化体系结构\" class=\"headerlink\" title=\"Apache模块化体系结构\"></a>Apache模块化体系结构</h2><p>Apache体系结构的模块化特点，主要体现在第三层（核心功能层）与第四层（可选功能层）。Apache采用模块化体系结构，使它作为一个HTTP服务器的大部分功能都被分割为相互独立的模块，使我们能够通过增加或者删除模块就可以扩展和修改Apache的功能。</p>\n<h3 id=\"核心模块-amp-可选模块\"><a href=\"#核心模块-amp-可选模块\" class=\"headerlink\" title=\"核心模块&amp;可选模块\"></a>核心模块&amp;可选模块</h3><p>Apache中大部分模块都是可选择的，这意味着这些模块的缺失至多影响Apache的功能完整性，而不影响起运行。但有两个模块是必须的，mod_core和mod_so。</p>\n<h4 id=\"核心模块\"><a href=\"#核心模块\" class=\"headerlink\" title=\"核心模块\"></a>核心模块</h4><ul>\n<li><strong>mod_core:</strong> 负责处理配置文件中的大部分配置指令，并根据这些指令运行Apache。</li>\n<li><strong>mod_so:</strong> 负责动态加载其余的模块。没有该模块，其余的模块就无法被加载使用。</li>\n<li><strong>MPM模块</strong> 即，多进程处理模块，虽然该模块是一个可选模块，但一般情况下，我们都会使用，所以我们将其也视为核心模块。<blockquote>\n<p>前两个模块我们必须静态编译。mpm模块的话，当我们在编译Apache是已经确定使用某一MPM模块之后通过也可将其采用静态编译的方式进行编译。但是如果我们想要在Apache安装之后动态修改MPM模式的话，那么在Apache编译安装的时候，MPM模块就需要通过动态编译的方式进行编译安装。</p>\n</blockquote>\n</li>\n</ul>\n<h4 id=\"非核心模块\"><a href=\"#非核心模块\" class=\"headerlink\" title=\"非核心模块\"></a>非核心模块</h4><p>一些常见的可选模块：</p>\n<ul>\n<li><p>mod_alias</p>\n<blockquote>\n<p>Provides for mapping different parts of the host filesystem in the document tree and for URL redirection<br>为不同的url地址映射到文件系统的指定位置，即『起别名』</p>\n</blockquote>\n</li>\n<li><p>mod_autoindex</p>\n<blockquote>\n<p>用于生成目录索引</p>\n</blockquote>\n</li>\n<li><p>mod_cache</p>\n<blockquote>\n<p>RFC 2616标准的HTTP缓存的过滤器。是apache中基于URI键的内容动态缓冲(内存或磁盘)。<br>从Apache2.2起，mod_cache和mod_file_cache将不再是试验模块，它们已经足够稳定，可以用于实际生产中了。这些缓冲体系提供了一个强有力的途径来加速原始web服务器(origin webserver)和代理服务器(proxy)的HTTP处理速度。</p>\n</blockquote>\n</li>\n<li><p>mod_cgi</p>\n<blockquote>\n<p> 执行cgi脚本</p>\n</blockquote>\n</li>\n<li><p>mod_dir</p>\n<blockquote>\n<p>目录的索引可以来自两个来源：</p>\n<ul>\n<li>由用户编写的文件，通常被称为 index.html。该DirectoryIndex指令设置该文件的名称。这是由控制 mod_dir。</li>\n<li>否则，由服务器生成的列表。这是通过提供mod_autoindex。</li>\n</ul>\n<p>这两种功能是分开的，这样如果你想你可以完全删除（或更换）自动索引生成。</p>\n<p>当服务器收到一个URL请求的“斜线”重定向发出 <a href=\"http://servername/foo/dirname那里\">http://servername/foo/dirname那里</a> dirname是一个目录。目录需要一个结尾斜杠，所以mod_dir发出一个重定向 <a href=\"http://servername/foo/dirname/。\">http://servername/foo/dirname/。</a></p>\n</blockquote>\n</li>\n<li><p>mod_filter</p>\n<blockquote>\n<p>该模块实现输出内容过滤器的智能，上下文相关的配置。例如，Apache可以被配置为处理不同的内容类型通过不同的过滤器，即使当内容类型是不是预先已知的（例如，在一个代理）。</p>\n</blockquote>\n</li>\n<li><p>mod_include</p>\n<blockquote>\n<p>服务器端包含</p>\n</blockquote>\n</li>\n<li><p>mod_isapi</p>\n<blockquote>\n<p>ISAPI Extensions within Apache for Windows<br>本模块实现了互联网服务扩展应用程序编程接口(Internet Server extension API)。本模块使得Windows上的Apache能有限地实现互联网服务扩展(比如调用ISAPI的动态连接库)。</p>\n</blockquote>\n</li>\n<li><p>mod_mime</p>\n<blockquote>\n<p>关联请求的文件名的扩展名与文件的行为（处理器和过滤器）和内容（MIME类型，语言，字符集和编码)</p>\n</blockquote>\n</li>\n<li><p>mod_mime_magic</p>\n<blockquote>\n<p>通过读取部分文件内容自动猜测文件的MIME类型<br>本模块采取Unix系统下file(1)命令相同的方法：检查文件开始的几个字节，来判定文件的MIME类型。它被作为当mod_mime无法解析时，用来处理的”第二道防线”。</p>\n</blockquote>\n</li>\n<li><p>mod_proxy</p>\n<blockquote>\n<p>用于提供代理服务，能够支持的包括正向代理、反向代理、透明代理、缓存、负载均衡，HTTP代理、FTP代理、SSL代理等若干强大的功能.</p>\n</blockquote>\n</li>\n<li><p>mod_rewrite</p>\n<blockquote>\n<p>提供了一个基于规则的重写动态URL重写引擎。</p>\n</blockquote>\n</li>\n<li><p>mod_session</p>\n<blockquote>\n<p>会话支持</p>\n</blockquote>\n</li>\n<li><p>mod_ssl</p>\n<blockquote>\n<p>提供使用安全套接字层（SSL）和传输层安全（TLS）协议强加密。（https协议必须）</p>\n</blockquote>\n</li>\n<li><p>mod_status</p>\n<blockquote>\n<p>提供有关服务器活动和性能信息</p>\n</blockquote>\n</li>\n<li><p>mod_vhost_alias</p>\n<blockquote>\n<p>虚拟主机配置支持</p>\n</blockquote>\n</li>\n</ul>\n<h3 id=\"静态模块-amp-动态模块\"><a href=\"#静态模块-amp-动态模块\" class=\"headerlink\" title=\"静态模块&amp;动态模块\"></a>静态模块&amp;动态模块</h3><h4 id=\"概念-amp-区别\"><a href=\"#概念-amp-区别\" class=\"headerlink\" title=\"概念&amp;区别\"></a>概念&amp;区别</h4><p><strong>什么是静态？</strong>  其实就是编译的时候所有的模块自己编译进 httpd 这个文件中 ，启动的时候这些模块就已经加载进来了，也就是可以使用了。</p>\n<p>查看当前Apache通过静态编译的模块<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">[root@MyServer ~]# httpd -l</div><div class=\"line\">Compiled in modules:</div><div class=\"line\">core.c</div><div class=\"line\">mod_so.c</div><div class=\"line\">http_core.c</div><div class=\"line\">event.c</div></pre></td></tr></table></figure></p>\n<p><strong>那么什么是动态？</strong>  静态是直接编译进httpd中， 那么动态显然就不编译进去了，也就是你启动的时候根本不会加载这个模块， 而是给你一个module.so 文件，你一定要使用 loadmodule 这个语法来加载，这个模块才有效。</p>\n<p><strong><em>配置方法：</em></strong><br>静态的模块通常在http.conf中用<ifmodule></ifmodule> 来配置，动态的要先loadmoule来加载，然后再<ifmodule></ifmodule>配置。<br>官方说静态的比动态的在性能方面多5%左右。</p>\n<p><strong><em>比较：</em></strong><br>相对来说，静态的效率高些，而动态方式配置方面灵活。想想如果编译进去的C这个module你想升级或者去掉，静态方式的就只能重新编译Apache了。</p>\n<p>下面这句在Apache源文件夹下运行，可以查看默认情况下Apache都给你装了那些module进去：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">./configure –help | grep disable</div></pre></td></tr></table></figure></p>\n<p>####</p>\n<h4 id=\"模块管理\"><a href=\"#模块管理\" class=\"headerlink\" title=\"模块管理\"></a>模块管理</h4><h5 id=\"1-模块的类型：\"><a href=\"#1-模块的类型：\" class=\"headerlink\" title=\"1. 模块的类型：\"></a>1. 模块的类型：</h5><ul>\n<li>基本(B)模块默认包含，必须明确禁用；</li>\n<li>扩展(E)/实验(X)模块默认不包含，必须明确启用。</li>\n</ul>\n<p>那么，针对以上这些类型的模块，在编译时有以下几种操作方式：</p>\n<p><strong>–disable-MODULE</strong><br>禁用MODULE模块(仅用于基本模块)</p>\n<p><strong>–enable-MODULE=shared</strong><br>将MODULE编译为DSO(可用于所有模块)</p>\n<p><strong>–enable-MODULE=static</strong><br>将MODULE静态连接进核心(仅用于扩展和实验模块)</p>\n<p><strong>–enable-mods-shared=MODULE-LIST</strong><br>将MODULE-LIST中的所有模块都编译成DSO(可用于所有模块)</p>\n<p><strong>–enable-modules=MODULE-LIST</strong><br>将MODULE-LIST静态连接进核心(可用于所有模块)</p>\n<p><strong><em>针对–enable-modules和–enable-mods-shared有两个懒办法就是 most参数和all参数，分别表示“很多的”和“所有”。</em></strong><br><strong>例如：</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">mod_alias是个基本模块，不想安装的话就： --disable-alias</div><div class=\"line\">mod_rewrite是个扩展模块，想动态加载它：--enable-rewrite=shared，想静态加载就是：--enable-rewrite=static</div><div class=\"line\">想静态编译mod_alias和mod_rewrite：--enable-modules=&apos;alias rewrite&apos;</div><div class=\"line\">想动态编译mod_alias和mod_rewrite：--enable-mods-shared=&apos;alias rewrite&apos;</div></pre></td></tr></table></figure></p>\n<h5 id=\"2-动态模块管理\"><a href=\"#2-动态模块管理\" class=\"headerlink\" title=\"2. 动态模块管理\"></a>2. 动态模块管理</h5><p><strong>Tips:</strong> 让Apache日后可以动态编译和加载模块：<br>如果想让Apache日后可以支持动态编译(DSO)更多的module，需要在初次安装时把so这个模块编译到核心（即，静态编译）。</p>\n<blockquote>\n<p>如果编译中包含任何DSO模块，则mod_so会被自动包含进核心。如果希望核心以后能够装载DSO，但不实际编译任何DSO模块，则需明确指定：</p>\n<ul>\n<li>针对apache1.x: –enable-module=so</li>\n<li>针对apache2.x: –enable-so=static</li>\n</ul>\n</blockquote>\n<p>针对Apache2.2.x的一些例子：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">最大化静态安装Apache:</div><div class=\"line\">./configure --prefix=/usr/local/apache --enable-modules=all</div><div class=\"line\">最大化动态安装Apache:</div><div class=\"line\">./configure --prefix=/usr/local/apache --enable-mods-shared=all</div><div class=\"line\">静态安装rewrite、动态安装deflate以及headers</div><div class=\"line\">./configure --prefix=/usr/local/apache --enable-rewrite=static --enable-deflate=shared --enable-headers=shared</div><div class=\"line\">不安装基本的alais，保留以后的扩展DSO能力：</div><div class=\"line\">./configure --prefix=/usr/local/apache --enable-so=static --disable-alias</div></pre></td></tr></table></figure></p>\n<h5 id=\"利用APXS工具动态为Apache编译新的DSO（动态共享对象）\"><a href=\"#利用APXS工具动态为Apache编译新的DSO（动态共享对象）\" class=\"headerlink\" title=\"利用APXS工具动态为Apache编译新的DSO（动态共享对象）\"></a>利用APXS工具动态为Apache编译新的DSO（动态共享对象）</h5><p>一般如果我们需要开启或者关闭某一些模块，只需要在 <code>httpd.conf</code> 中注释相应的模块的加载指令或者去掉指令前面的注释。<br>但如果我们需要的模块在 Apache编译安装的时候没有编译进去，我们可以用APXS工具来动态编译，并加入到Apache中。</p>\n<p>APXS,是一个给Apache服务器编译和安装扩展模块的工具。即将一个或者多个源代码或者目标文件编译成一个动态共享对象（DSO），然后可以通过Apache的 LoadModule 指令加载运行。<br>因此，要使用该工具，我们的Apache必须支持DSO特性，即已经安装有mod_so 模块，否则安装会报错。</p>\n<p>apxs命令选项说明：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">apxs -g [ -S name=value ] -n modname</div><div class=\"line\">apxs -q [ -v ] [ -S name=value ] query ...</div><div class=\"line\">apxs -c [ -S name=value ] [ -o dsofile ] [ -I incdir ] [ -D name=value ] [ -L libdir ] [ -l libname ] [ -Wc,compiler-flags ] [ -Wl,linker-flags ] files ...</div><div class=\"line\">apxs -i [ -S name=value ] [ -n modname ] [ -a ] [ -A ] dso-file ...</div><div class=\"line\">apxs -e [ -S name=value ] [ -n modname ] [ -a ] [ -A ] dso-file ...</div></pre></td></tr></table></figure></p>\n<p>常用选项：</p>\n<ul>\n<li>-n modname<blockquote>\n<p>明确的设置模块名称, -i(安装)和-g（模板生成）选项</p>\n</blockquote>\n</li>\n</ul>\n<p>执行选项：</p>\n<ul>\n<li>-q<blockquote>\n<p>设置编译httpd时的变量和环境</p>\n</blockquote>\n</li>\n</ul>\n<p>配置选项：</p>\n<ul>\n<li>-S name=value<blockquote>\n<p>此选项更改apxs的上述设置。</p>\n</blockquote>\n</li>\n</ul>\n<p>模板生成选项：</p>\n<ul>\n<li>-g<blockquote>\n<p>该选项将生成一个子目录（名称将取决 -n设置），并会生成两个文件，一个要编译模块的源文件，用来创建模块或作为一个快速启动的apxs机制。另一个，用于编译和安装此模块，如mod_name.cMakefile</p>\n</blockquote>\n</li>\n</ul>\n<p>DSO 编译选项</p>\n<ul>\n<li><p>-c</p>\n<blockquote>\n<p>表明将进行编译操作。它首先编译C源文件(.c)，到对应的目标文件（.o），然后通过连接这些目标文件以及其余的目标文件（.a和.a）构建一个动态的共享对象dsofile</p>\n</blockquote>\n</li>\n<li><p>-o dsofile</p>\n<blockquote>\n<p>明确规定创建动态共享对象文件名。如果没有指定，并且不能从文件名猜测到，则会生成 mod_unknow.so</p>\n</blockquote>\n</li>\n<li><p>-D name=value</p>\n<blockquote>\n<p>直接传给编译命令自定义参数</p>\n</blockquote>\n</li>\n<li><p>-L libdir</p>\n<blockquote>\n<p>设置编译时将要用到的自定义类库路径</p>\n</blockquote>\n</li>\n<li><p>-l libname</p>\n<blockquote>\n<p>设置编译时用到的自定义类库名称</p>\n</blockquote>\n</li>\n<li><p>-Wc，compiler-flags</p>\n<blockquote>\n<p>设置或添加本地编译器特定的选项</p>\n</blockquote>\n</li>\n<li><p>-Wl，linker-flags</p>\n<blockquote>\n<p>设置或添加本地特定连接的选项。</p>\n</blockquote>\n</li>\n<li><p>-p</p>\n<blockquote>\n<p>该选项将会使apxs 连接和引用apr/apr-util类库，使用apr/apr-util将会对编译非常有用。</p>\n</blockquote>\n</li>\n</ul>\n<p>DSO的安装和配置选项</p>\n<ul>\n<li><p>-i</p>\n<blockquote>\n<p>表明安装操作，安装一个或多个动态共享对象到服务器的模块目录</p>\n</blockquote>\n</li>\n<li><p>-a</p>\n<blockquote>\n<p>自动添加 LoadModule 指令到 httpd.conf 配置文件，或者开启该指令。</p>\n</blockquote>\n</li>\n<li><p>-A</p>\n<blockquote>\n<p>同 -a 选项，但创建的 LoadModule指令是被注释的状态，也就是说该模块已经准备就绪，但没开启。</p>\n</blockquote>\n</li>\n<li><p>-e</p>\n<blockquote>\n<p>类似于 -a 和 -A 用来编辑 httpd.conf 而不安装该模块。</p>\n</blockquote>\n</li>\n</ul>\n<h5 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h5><p>示例：我们有一个可用的Apache 模块 mod_foo.c 想要编译进Apache的DSO。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ apxs -c mod_foo.c</div><div class=\"line\">/path/to/libtool --mode=compile gcc ... -c mod_foo.c</div><div class=\"line\">/path/to/libtool --mode=link gcc ... -o mod_foo.la mod_foo.slo</div><div class=\"line\">$ _</div></pre></td></tr></table></figure></p>\n<p>然后，在Apache的配置文件中加入 loadModule 指令加载此共享对象。为了简化该步骤 apxs 提供了自动更新配置文件的的功能选项(-a,-A)。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ apxs -i -a mod_foo.la</div><div class=\"line\">/path/to/instdso.sh mod_foo.la /path/to/apache/modules</div><div class=\"line\">/path/to/libtool --mode=install cp mod_foo.la /path/to/apache/modules ... chmod 755 /path/to/apache/modules/mod_foo.so</div><div class=\"line\">[activating module `foo&apos; in /path/to/apache/conf/httpd.conf]</div><div class=\"line\">$ _</div></pre></td></tr></table></figure>\n<p>这时，我们在httpd.conf 中就能看到这条指令。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">LoadModule foo_module modules/mod_foo.so</div></pre></td></tr></table></figure></p>\n<p>如果没有使用 -a 选项自动添加，则需要手动添加进去。</p>\n<p>如果想默认不开启该模块，可以使用 -A 选项。即<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ apxs -i -A mod_foo.c</div></pre></td></tr></table></figure></p>\n<p><strong>apxs快速测试</strong></p>\n<p>我们可以通过创建一个Apache的测试模块，通过对应的Makefile<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ apxs -g -n foo</div><div class=\"line\">Creating [DIR] foo</div><div class=\"line\">Creating [FILE] foo/Makefile</div><div class=\"line\">Creating [FILE] foo/modules.mk</div><div class=\"line\">Creating [FILE] foo/mod_foo.c</div><div class=\"line\">Creating [FILE] foo/.deps</div><div class=\"line\">$ _</div></pre></td></tr></table></figure></p>\n<p>然后可以立即编译该测试模块到DSO，并加载到Apache。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ cd foo</div><div class=\"line\">$ make all reload</div><div class=\"line\">apxs -c mod_foo.c</div><div class=\"line\">/path/to/libtool --mode=compile gcc ... -c mod_foo.c</div><div class=\"line\">/path/to/libtool --mode=link gcc ... -o mod_foo.la mod_foo.slo</div><div class=\"line\">apxs -i -a -n &quot;foo&quot; mod_foo.la</div><div class=\"line\">/path/to/instdso.sh mod_foo.la /path/to/apache/modules</div><div class=\"line\">/path/to/libtool --mode=install cp mod_foo.la /path/to/apache/modules ... chmod 755 /path/to/apache/modules/mod_foo.so</div><div class=\"line\">[activating module `foo&apos; in /path/to/apache/conf/httpd.conf]</div><div class=\"line\">apachectl restart</div><div class=\"line\">/path/to/apache/sbin/apachectl restart: httpd not running, trying to start</div><div class=\"line\">[Tue Mar 31 11:27:55 1998] [debug] mod_so.c(303): loaded module foo_module</div><div class=\"line\">/path/to/apache/sbin/apachectl restart: httpd started</div><div class=\"line\">$ _</div></pre></td></tr></table></figure>\n<p>over~</p>"},{"title":"Apache性能监控","author":"zhimiao","date":"2016-08-23T08:10:00.000Z","update":"2016-08-24T02:00:00.000Z","_content":"谈到服务器性能监控，目前市面上有很多成熟的关于性能监控的产品可供我们使用。比如 [Cloud Insight](http://www.oneapm.com/ci/feature.html)\n。但通过 Apache本身提供的监控模块或者通过一些简单的bash命令也能实现简单的监控。\n\n<!-- more -->\n\n## Linux下通过Server-status来监控Apache\n\n1. 加载 mod_status.so 模块\n> mod_status, Apache状态管理模块\n\n    ```\n#在httpd.conf中加入下面这句或将其前面注释去掉\nLoadModule status_module modules/server_status.so\n```\n\n2. 修改配置文件\n  * 方式一：直接在 httpd.conf 底部添加以下配置\n```\n<location /c-server-status>\n    setHandle Server-status\n    Order Deny,Allow\n    Deny from nothing\n    Allow from all\n</location>\nExtendedStatus on\n```\n  * 方式二：添加到子配置文件中\n  在 httpd.conf 中找到 `Include conf/extra/httpd-info.conf`,去掉`#`,\n  在 httpd-info.conf 文件中加入 方式一 中的内容。\n\n  **Tips：**\n  * `<location /c-server-status>`: 这个名字可以任意取，最好不要让别人猜到。\n  * `ExtendedStatus on`: 启用扩展状态。该设置仅能用于全局设置，不能在特定的虚拟主机中打开或者关闭。并且，启用该扩展会使服务器运行效率降低。\n\n3. 重启Apache\n```\n/usr/local/apache2/bin/httpd -k start|restart|stop\n```\n\n4. 访问页面\n\n  http://your-domain/c-server-status\n\n  http://your-domain/c-server-status?refresh=5\n\n  [官网示例](http://www.apache.org/server-status)\n\n5. 监控参数\n\n\n参数名称|\t参数描述\n-------|---------\nTotal Accesses|\t服务器自启动来接收到的请求连接数\nTotal kBytes|\t传输的总数据量，单位是KB\nCPULoad\t|NCPU负荷\nUptime\t|运行时间，单位秒\nReqPerSec\t|每秒请求数\nBytesPerSec\t|每秒传输数据量，单位B/s\nBytesPerReq\t|平均每个请求的数据传输量（事实上就是BytesPerSec/BytesPerSec）\nBusyWorkers\t|在跑的进程数\nIdleWorkers\t|空闲的进程数\n\n## Linux下通过命令来实现监控\n\n1. ps 查看httpd进程数\n```\n$ps -ef | grep httpd | wc -l\n```\n当连接数多了，他就会生出更多进程来处理请求。当然这结果包含 grep httpd 的进程输出，所以一般来说实际进程数比输出结果少1\n2. 用netstat来查看当前连接数\n```\n$netstat -ant | grep \":80\" | wc -l\n```\n连接数目并不等于httpd线程数目，当然连接数目越多，httpd进程数就有可能数会增多。上面的返回结果数目，有可能包括多种连接状态，比如 LISTEN、ESTABLISHED、TIME_WAIT等等，可以加入状态关键字进一步过滤，得到想要的结果。\n3. 实时检测httpd连接数\n```\n#watch -n 1 -d \"pgrep httpd|wc -l\"\n```\n4. 计算httpd进程占用内在的平均数\n```\n#ps aux|grep -v grep|awk '/httpd/{sum+=$6}; END{print sum/n}'\n```\n5. 查看Apache的并发请求数及期TCP连接状态\n```\n#netstat -n | awk '/^tcp/{++S[$NF]}END{for(a in S) print a, S[a]}'\n返回结果示例：\nLAST_ACK 5\nSYN_RECV 30       #表示正在等待处理的请求数；\nESTABLISHED 1597  #表示正常数据传输状态；\nFIN_WAIT1 51\nFIN_WAIT2 504\nTIME_WAIT 1057    #表示处理完毕,等待超时结束的请求数\n```\n\n常见的连接状态\n\n状态|描述\n---|----\nCLOSED|无连接是活动的或正在进行\nLISTEN|服务器在等待进入呼叫\nSYN_RECV|一个连接请求已经到达,等待确认\nSYN_SENT|应用已经开始,打开一个连接\nESTABLISHED|正常数据传输状态\nFIN_WAIT1|应用说它已经完成\nFIN_WAIT2|另一边已同意释放\nITMED_WAIT|等待所有分组死掉\nCLOSING|两边同时尝试关闭\nTIME_WAIT|另一边已初始化一个释放\nLAST_ACK|等待所有分组死掉\n","source":"_posts/Apache性能监控.md","raw":"title: Apache性能监控\ntags:\n  - Apache 监控\ncategories:\n  - Apache\nauthor: zhimiao\ndate: 2016-08-23 16:10:00\nupdate: 2016-08-24 10:00:00\n---\n谈到服务器性能监控，目前市面上有很多成熟的关于性能监控的产品可供我们使用。比如 [Cloud Insight](http://www.oneapm.com/ci/feature.html)\n。但通过 Apache本身提供的监控模块或者通过一些简单的bash命令也能实现简单的监控。\n\n<!-- more -->\n\n## Linux下通过Server-status来监控Apache\n\n1. 加载 mod_status.so 模块\n> mod_status, Apache状态管理模块\n\n    ```\n#在httpd.conf中加入下面这句或将其前面注释去掉\nLoadModule status_module modules/server_status.so\n```\n\n2. 修改配置文件\n  * 方式一：直接在 httpd.conf 底部添加以下配置\n```\n<location /c-server-status>\n    setHandle Server-status\n    Order Deny,Allow\n    Deny from nothing\n    Allow from all\n</location>\nExtendedStatus on\n```\n  * 方式二：添加到子配置文件中\n  在 httpd.conf 中找到 `Include conf/extra/httpd-info.conf`,去掉`#`,\n  在 httpd-info.conf 文件中加入 方式一 中的内容。\n\n  **Tips：**\n  * `<location /c-server-status>`: 这个名字可以任意取，最好不要让别人猜到。\n  * `ExtendedStatus on`: 启用扩展状态。该设置仅能用于全局设置，不能在特定的虚拟主机中打开或者关闭。并且，启用该扩展会使服务器运行效率降低。\n\n3. 重启Apache\n```\n/usr/local/apache2/bin/httpd -k start|restart|stop\n```\n\n4. 访问页面\n\n  http://your-domain/c-server-status\n\n  http://your-domain/c-server-status?refresh=5\n\n  [官网示例](http://www.apache.org/server-status)\n\n5. 监控参数\n\n\n参数名称|\t参数描述\n-------|---------\nTotal Accesses|\t服务器自启动来接收到的请求连接数\nTotal kBytes|\t传输的总数据量，单位是KB\nCPULoad\t|NCPU负荷\nUptime\t|运行时间，单位秒\nReqPerSec\t|每秒请求数\nBytesPerSec\t|每秒传输数据量，单位B/s\nBytesPerReq\t|平均每个请求的数据传输量（事实上就是BytesPerSec/BytesPerSec）\nBusyWorkers\t|在跑的进程数\nIdleWorkers\t|空闲的进程数\n\n## Linux下通过命令来实现监控\n\n1. ps 查看httpd进程数\n```\n$ps -ef | grep httpd | wc -l\n```\n当连接数多了，他就会生出更多进程来处理请求。当然这结果包含 grep httpd 的进程输出，所以一般来说实际进程数比输出结果少1\n2. 用netstat来查看当前连接数\n```\n$netstat -ant | grep \":80\" | wc -l\n```\n连接数目并不等于httpd线程数目，当然连接数目越多，httpd进程数就有可能数会增多。上面的返回结果数目，有可能包括多种连接状态，比如 LISTEN、ESTABLISHED、TIME_WAIT等等，可以加入状态关键字进一步过滤，得到想要的结果。\n3. 实时检测httpd连接数\n```\n#watch -n 1 -d \"pgrep httpd|wc -l\"\n```\n4. 计算httpd进程占用内在的平均数\n```\n#ps aux|grep -v grep|awk '/httpd/{sum+=$6}; END{print sum/n}'\n```\n5. 查看Apache的并发请求数及期TCP连接状态\n```\n#netstat -n | awk '/^tcp/{++S[$NF]}END{for(a in S) print a, S[a]}'\n返回结果示例：\nLAST_ACK 5\nSYN_RECV 30       #表示正在等待处理的请求数；\nESTABLISHED 1597  #表示正常数据传输状态；\nFIN_WAIT1 51\nFIN_WAIT2 504\nTIME_WAIT 1057    #表示处理完毕,等待超时结束的请求数\n```\n\n常见的连接状态\n\n状态|描述\n---|----\nCLOSED|无连接是活动的或正在进行\nLISTEN|服务器在等待进入呼叫\nSYN_RECV|一个连接请求已经到达,等待确认\nSYN_SENT|应用已经开始,打开一个连接\nESTABLISHED|正常数据传输状态\nFIN_WAIT1|应用说它已经完成\nFIN_WAIT2|另一边已同意释放\nITMED_WAIT|等待所有分组死掉\nCLOSING|两边同时尝试关闭\nTIME_WAIT|另一边已初始化一个释放\nLAST_ACK|等待所有分组死掉\n","slug":"Apache性能监控","published":1,"updated":"2016-08-24T03:16:28.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"city8vnms0007g29fw5py169x","content":"<p>谈到服务器性能监控，目前市面上有很多成熟的关于性能监控的产品可供我们使用。比如 <a href=\"http://www.oneapm.com/ci/feature.html\" target=\"_blank\" rel=\"external\">Cloud Insight</a><br>。但通过 Apache本身提供的监控模块或者通过一些简单的bash命令也能实现简单的监控。</p>\n<a id=\"more\"></a>\n<h2 id=\"Linux下通过Server-status来监控Apache\"><a href=\"#Linux下通过Server-status来监控Apache\" class=\"headerlink\" title=\"Linux下通过Server-status来监控Apache\"></a>Linux下通过Server-status来监控Apache</h2><ol>\n<li><p>加载 mod_status.so 模块</p>\n<blockquote>\n<p>mod_status, Apache状态管理模块</p>\n</blockquote>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">#在httpd.conf中加入下面这句或将其前面注释去掉</div><div class=\"line\">LoadModule status_module modules/server_status.so</div></pre></td></tr></table></figure>\n</li>\n<li><p>修改配置文件</p>\n<ul>\n<li><p>方式一：直接在 httpd.conf 底部添加以下配置</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;location /c-server-status&gt;</div><div class=\"line\">    setHandle Server-status</div><div class=\"line\">    Order Deny,Allow</div><div class=\"line\">    Deny from nothing</div><div class=\"line\">    Allow from all</div><div class=\"line\">&lt;/location&gt;</div><div class=\"line\">ExtendedStatus on</div></pre></td></tr></table></figure>\n</li>\n<li><p>方式二：添加到子配置文件中<br>在 httpd.conf 中找到 <code>Include conf/extra/httpd-info.conf</code>,去掉<code>#</code>,<br>在 httpd-info.conf 文件中加入 方式一 中的内容。</p>\n</li>\n</ul>\n<p><strong>Tips：</strong></p>\n<ul>\n<li><code>&lt;location /c-server-status&gt;</code>: 这个名字可以任意取，最好不要让别人猜到。</li>\n<li><code>ExtendedStatus on</code>: 启用扩展状态。该设置仅能用于全局设置，不能在特定的虚拟主机中打开或者关闭。并且，启用该扩展会使服务器运行效率降低。</li>\n</ul>\n</li>\n<li><p>重启Apache</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">/usr/local/apache2/bin/httpd -k start|restart|stop</div></pre></td></tr></table></figure>\n</li>\n<li><p>访问页面</p>\n<p><a href=\"http://your-domain/c-server-status\" target=\"_blank\" rel=\"external\">http://your-domain/c-server-status</a></p>\n<p><a href=\"http://your-domain/c-server-status?refresh=5\" target=\"_blank\" rel=\"external\">http://your-domain/c-server-status?refresh=5</a></p>\n<p><a href=\"http://www.apache.org/server-status\" target=\"_blank\" rel=\"external\">官网示例</a></p>\n</li>\n<li><p>监控参数</p>\n</li>\n</ol>\n<table>\n<thead>\n<tr>\n<th>参数名称</th>\n<th>参数描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Total Accesses</td>\n<td>服务器自启动来接收到的请求连接数</td>\n</tr>\n<tr>\n<td>Total kBytes</td>\n<td>传输的总数据量，单位是KB</td>\n</tr>\n<tr>\n<td>CPULoad</td>\n<td>NCPU负荷</td>\n</tr>\n<tr>\n<td>Uptime</td>\n<td>运行时间，单位秒</td>\n</tr>\n<tr>\n<td>ReqPerSec</td>\n<td>每秒请求数</td>\n</tr>\n<tr>\n<td>BytesPerSec</td>\n<td>每秒传输数据量，单位B/s</td>\n</tr>\n<tr>\n<td>BytesPerReq</td>\n<td>平均每个请求的数据传输量（事实上就是BytesPerSec/BytesPerSec）</td>\n</tr>\n<tr>\n<td>BusyWorkers</td>\n<td>在跑的进程数</td>\n</tr>\n<tr>\n<td>IdleWorkers</td>\n<td>空闲的进程数</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"Linux下通过命令来实现监控\"><a href=\"#Linux下通过命令来实现监控\" class=\"headerlink\" title=\"Linux下通过命令来实现监控\"></a>Linux下通过命令来实现监控</h2><ol>\n<li>ps 查看httpd进程数<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ps -ef | grep httpd | wc -l</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>当连接数多了，他就会生出更多进程来处理请求。当然这结果包含 grep httpd 的进程输出，所以一般来说实际进程数比输出结果少1</p>\n<ol>\n<li>用netstat来查看当前连接数<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$netstat -ant | grep &quot;:80&quot; | wc -l</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>连接数目并不等于httpd线程数目，当然连接数目越多，httpd进程数就有可能数会增多。上面的返回结果数目，有可能包括多种连接状态，比如 LISTEN、ESTABLISHED、TIME_WAIT等等，可以加入状态关键字进一步过滤，得到想要的结果。</p>\n<ol>\n<li><p>实时检测httpd连接数</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">#watch -n 1 -d &quot;pgrep httpd|wc -l&quot;</div></pre></td></tr></table></figure>\n</li>\n<li><p>计算httpd进程占用内在的平均数</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">#ps aux|grep -v grep|awk &apos;/httpd/&#123;sum+=$6&#125;; END&#123;print sum/n&#125;&apos;</div></pre></td></tr></table></figure>\n</li>\n<li><p>查看Apache的并发请求数及期TCP连接状态</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">#netstat -n | awk &apos;/^tcp/&#123;++S[$NF]&#125;END&#123;for(a in S) print a, S[a]&#125;&apos;</div><div class=\"line\">返回结果示例：</div><div class=\"line\">LAST_ACK 5</div><div class=\"line\">SYN_RECV 30       #表示正在等待处理的请求数；</div><div class=\"line\">ESTABLISHED 1597  #表示正常数据传输状态；</div><div class=\"line\">FIN_WAIT1 51</div><div class=\"line\">FIN_WAIT2 504</div><div class=\"line\">TIME_WAIT 1057    #表示处理完毕,等待超时结束的请求数</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>常见的连接状态</p>\n<table>\n<thead>\n<tr>\n<th>状态</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>CLOSED</td>\n<td>无连接是活动的或正在进行</td>\n</tr>\n<tr>\n<td>LISTEN</td>\n<td>服务器在等待进入呼叫</td>\n</tr>\n<tr>\n<td>SYN_RECV</td>\n<td>一个连接请求已经到达,等待确认</td>\n</tr>\n<tr>\n<td>SYN_SENT</td>\n<td>应用已经开始,打开一个连接</td>\n</tr>\n<tr>\n<td>ESTABLISHED</td>\n<td>正常数据传输状态</td>\n</tr>\n<tr>\n<td>FIN_WAIT1</td>\n<td>应用说它已经完成</td>\n</tr>\n<tr>\n<td>FIN_WAIT2</td>\n<td>另一边已同意释放</td>\n</tr>\n<tr>\n<td>ITMED_WAIT</td>\n<td>等待所有分组死掉</td>\n</tr>\n<tr>\n<td>CLOSING</td>\n<td>两边同时尝试关闭</td>\n</tr>\n<tr>\n<td>TIME_WAIT</td>\n<td>另一边已初始化一个释放</td>\n</tr>\n<tr>\n<td>LAST_ACK</td>\n<td>等待所有分组死掉</td>\n</tr>\n</tbody>\n</table>\n","excerpt":"<p>谈到服务器性能监控，目前市面上有很多成熟的关于性能监控的产品可供我们使用。比如 <a href=\"http://www.oneapm.com/ci/feature.html\">Cloud Insight</a><br>。但通过 Apache本身提供的监控模块或者通过一些简单的bash命令也能实现简单的监控。</p>","more":"<h2 id=\"Linux下通过Server-status来监控Apache\"><a href=\"#Linux下通过Server-status来监控Apache\" class=\"headerlink\" title=\"Linux下通过Server-status来监控Apache\"></a>Linux下通过Server-status来监控Apache</h2><ol>\n<li><p>加载 mod_status.so 模块</p>\n<blockquote>\n<p>mod_status, Apache状态管理模块</p>\n</blockquote>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">#在httpd.conf中加入下面这句或将其前面注释去掉</div><div class=\"line\">LoadModule status_module modules/server_status.so</div></pre></td></tr></table></figure>\n</li>\n<li><p>修改配置文件</p>\n<ul>\n<li><p>方式一：直接在 httpd.conf 底部添加以下配置</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;location /c-server-status&gt;</div><div class=\"line\">    setHandle Server-status</div><div class=\"line\">    Order Deny,Allow</div><div class=\"line\">    Deny from nothing</div><div class=\"line\">    Allow from all</div><div class=\"line\">&lt;/location&gt;</div><div class=\"line\">ExtendedStatus on</div></pre></td></tr></table></figure>\n</li>\n<li><p>方式二：添加到子配置文件中<br>在 httpd.conf 中找到 <code>Include conf/extra/httpd-info.conf</code>,去掉<code>#</code>,<br>在 httpd-info.conf 文件中加入 方式一 中的内容。</p>\n</li>\n</ul>\n<p><strong>Tips：</strong></p>\n<ul>\n<li><code>&lt;location /c-server-status&gt;</code>: 这个名字可以任意取，最好不要让别人猜到。</li>\n<li><code>ExtendedStatus on</code>: 启用扩展状态。该设置仅能用于全局设置，不能在特定的虚拟主机中打开或者关闭。并且，启用该扩展会使服务器运行效率降低。</li>\n</ul>\n</li>\n<li><p>重启Apache</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">/usr/local/apache2/bin/httpd -k start|restart|stop</div></pre></td></tr></table></figure>\n</li>\n<li><p>访问页面</p>\n<p><a href=\"http://your-domain/c-server-status\">http://your-domain/c-server-status</a></p>\n<p><a href=\"http://your-domain/c-server-status?refresh=5\">http://your-domain/c-server-status?refresh=5</a></p>\n<p><a href=\"http://www.apache.org/server-status\">官网示例</a></p>\n</li>\n<li><p>监控参数</p>\n</li>\n</ol>\n<table>\n<thead>\n<tr>\n<th>参数名称</th>\n<th>参数描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Total Accesses</td>\n<td>服务器自启动来接收到的请求连接数</td>\n</tr>\n<tr>\n<td>Total kBytes</td>\n<td>传输的总数据量，单位是KB</td>\n</tr>\n<tr>\n<td>CPULoad</td>\n<td>NCPU负荷</td>\n</tr>\n<tr>\n<td>Uptime</td>\n<td>运行时间，单位秒</td>\n</tr>\n<tr>\n<td>ReqPerSec</td>\n<td>每秒请求数</td>\n</tr>\n<tr>\n<td>BytesPerSec</td>\n<td>每秒传输数据量，单位B/s</td>\n</tr>\n<tr>\n<td>BytesPerReq</td>\n<td>平均每个请求的数据传输量（事实上就是BytesPerSec/BytesPerSec）</td>\n</tr>\n<tr>\n<td>BusyWorkers</td>\n<td>在跑的进程数</td>\n</tr>\n<tr>\n<td>IdleWorkers</td>\n<td>空闲的进程数</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"Linux下通过命令来实现监控\"><a href=\"#Linux下通过命令来实现监控\" class=\"headerlink\" title=\"Linux下通过命令来实现监控\"></a>Linux下通过命令来实现监控</h2><ol>\n<li>ps 查看httpd进程数<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ps -ef | grep httpd | wc -l</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>当连接数多了，他就会生出更多进程来处理请求。当然这结果包含 grep httpd 的进程输出，所以一般来说实际进程数比输出结果少1</p>\n<ol>\n<li>用netstat来查看当前连接数<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$netstat -ant | grep &quot;:80&quot; | wc -l</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>连接数目并不等于httpd线程数目，当然连接数目越多，httpd进程数就有可能数会增多。上面的返回结果数目，有可能包括多种连接状态，比如 LISTEN、ESTABLISHED、TIME_WAIT等等，可以加入状态关键字进一步过滤，得到想要的结果。</p>\n<ol>\n<li><p>实时检测httpd连接数</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">#watch -n 1 -d &quot;pgrep httpd|wc -l&quot;</div></pre></td></tr></table></figure>\n</li>\n<li><p>计算httpd进程占用内在的平均数</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">#ps aux|grep -v grep|awk &apos;/httpd/&#123;sum+=$6&#125;; END&#123;print sum/n&#125;&apos;</div></pre></td></tr></table></figure>\n</li>\n<li><p>查看Apache的并发请求数及期TCP连接状态</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">#netstat -n | awk &apos;/^tcp/&#123;++S[$NF]&#125;END&#123;for(a in S) print a, S[a]&#125;&apos;</div><div class=\"line\">返回结果示例：</div><div class=\"line\">LAST_ACK 5</div><div class=\"line\">SYN_RECV 30       #表示正在等待处理的请求数；</div><div class=\"line\">ESTABLISHED 1597  #表示正常数据传输状态；</div><div class=\"line\">FIN_WAIT1 51</div><div class=\"line\">FIN_WAIT2 504</div><div class=\"line\">TIME_WAIT 1057    #表示处理完毕,等待超时结束的请求数</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>常见的连接状态</p>\n<table>\n<thead>\n<tr>\n<th>状态</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>CLOSED</td>\n<td>无连接是活动的或正在进行</td>\n</tr>\n<tr>\n<td>LISTEN</td>\n<td>服务器在等待进入呼叫</td>\n</tr>\n<tr>\n<td>SYN_RECV</td>\n<td>一个连接请求已经到达,等待确认</td>\n</tr>\n<tr>\n<td>SYN_SENT</td>\n<td>应用已经开始,打开一个连接</td>\n</tr>\n<tr>\n<td>ESTABLISHED</td>\n<td>正常数据传输状态</td>\n</tr>\n<tr>\n<td>FIN_WAIT1</td>\n<td>应用说它已经完成</td>\n</tr>\n<tr>\n<td>FIN_WAIT2</td>\n<td>另一边已同意释放</td>\n</tr>\n<tr>\n<td>ITMED_WAIT</td>\n<td>等待所有分组死掉</td>\n</tr>\n<tr>\n<td>CLOSING</td>\n<td>两边同时尝试关闭</td>\n</tr>\n<tr>\n<td>TIME_WAIT</td>\n<td>另一边已初始化一个释放</td>\n</tr>\n<tr>\n<td>LAST_ACK</td>\n<td>等待所有分组死掉</td>\n</tr>\n</tbody>\n</table>"},{"title":"Apache的安装","date":"2016-08-09T06:00:00.000Z","author":"zhimiao","_content":"\nApache是世界使用排名第一的Web服务器软件。它可以运行在几乎所有广泛使用的计算机平台上，由于其跨平台和安全性被广泛使用，是最流行的Web服务器端软件之一。\nApache的安装无外乎两种方式：\n* 二进制包安装\n* 源码包安装\n\n\n<!-- more -->\n\n接下来我将会演示和记录通过源码包来安装apache到服务器。\n环境：阿里云 Centos 7.2 64\n\n## 安装前准备工作\n通过源码包安装，我们需要将源码编译成计算机运行的二进制，因此我们需要编译工具。\n### gcc安装\nGNU编译器套件（GNU Compiler Collection）包括C、C++、Objective-C、Fortran、Java、Ada和Go语言的前端，也包括了这些语言的库（如libstdc++、libgcj等等）。GCC的初衷是为GNU操作系统专门编写的一款编译器。\n```\n[root@iZ28v78hcmrZ ~]# gcc\ngcc: 致命错误：没有输入文件\n编译中断。\n[root@iZ28v78hcmrZ ~]# yum install gcc\n···\n作为依赖被升级:\n  cpp.x86_64 0:4.8.5-4.el7            gcc-c++.x86_64 0:4.8.5-4.el7            gcc-gfortran.x86_64 0:4.8.5-4.el7    libgcc.x86_64 0:4.8.5-4.el7\n  libgfortran.x86_64 0:4.8.5-4.el7    libgomp.x86_64 0:4.8.5-4.el7            libquadmath.x86_64 0:4.8.5-4.el7     libquadmath-devel.x86_64 0:4.8.5-4.el7\n  libstdc++.x86_64 0:4.8.5-4.el7      libstdc++-devel.x86_64 0:4.8.5-4.el7\n\n完毕！\n[root@iZ28v78hcmrZ ~]#\n```\n### APR、APR-UTIL 安装\n\nAPR （全称：Apache Portable Runtime）可移植运行时库、APR-UTIL（全称：Apache Portable Runtime Utility Library）可移植运行时工具库。它们的作用是使得对平台细节的处理进行下移。对于应用程序而言，它们根本就不需要考虑具体的平台，不管是Unix、Linux还是Window，应用程序执行的接口基本都是统一一致的。\nAPR的目标则是希望安全合并所有的能够合并的代码而不需要牺牲性能，为大多数平台提供所有的APR特性支持，包括Win32、OS/2、BeOS、Darwin、Linux等等。\n\n\n\n关于apr和apr-util，apache可以使用系统已经安装的版本，也可以不实用系统提供的版本。具体方法是分别下载apr和apr-util，解压到apache源码包中的srclib/apr和srclib/apr-util路径中（路径中不包含版本号等信息），在编译源码包之前的./configure 过程中使用 --with-included-apr 选项\n\n### PRCE (Perl-Compatible Regular Expressions Library,Perl兼容的正则表达式库)\nPCRE(Perl Compatible Regular Expressions)是一个用C语言编写的正则表达式函数库。\nPCRE被广泛使用在许多开源软件之中，最著名的莫过于Apache HTTP服务器和PHP脚本语言、R脚本语言，此外，正如从其名字所能看到的，PCRE也是perl语言的缺省正则库。\n\n[PCRE 下载网址][pcre_download]\n[pcre_download]:https://sourceforge.net/projects/pcre/files/\n\n```\n#解压\n[root@iZ94m2e99jtZ ~]# tar -zxvf pcre-8.38.tar.gz\n[root@iZ94m2e99jtZ ~]# cd pcre-8.38\n[root@iZ94m2e99jtZ pcre-8.38]# ./configure\n···\npcre-8.38 configuration summary:\n\n    Install prefix .................. : /usr/local\n    C preprocessor .................. : gcc -E\n    C compiler ...................... : gcc\n    C++ preprocessor ................ : g++ -E\n    C++ compiler .................... : g++\n    Linker .......................... : /usr/bin/ld -m elf_x86_64\n    C preprocessor flags ............ :\n    C compiler flags ................ : -g -O2 -fvisibility=hidden\n    C++ compiler flags .............. : -O2 -fvisibility=hidden -fvisibility-inlines-hidden\n    Linker flags .................... :\n    Extra libraries ................. :\n\n    Build 8 bit pcre library ........ : yes\n    Build 16 bit pcre library ....... : no\n    Build 32 bit pcre library ....... : no\n    Build C++ library ............... : yes\n    Enable JIT compiling support .... : no\n    Enable UTF-8/16/32 support ...... : no\n    Unicode properties .............. : no\n    Newline char/sequence ........... : lf\n    \\R matches only ANYCRLF ......... : no\n    EBCDIC coding ................... : no\n    EBCDIC code for NL .............. : n/a\n    Rebuild char tables ............. : no\n    Use stack recursion ............. : yes\n    POSIX mem threshold ............. : 10\n    Internal link size .............. : 2\n    Nested parentheses limit ........ : 250\n    Match limit ..................... : 10000000\n    Match limit recursion ........... : MATCH_LIMIT\n    Build shared libs ............... : yes\n    Build static libs ............... : yes\n    Use JIT in pcregrep ............. : no\n    Buffer size for pcregrep ........ : 20480\n    Link pcregrep with libz ......... : no\n    Link pcregrep with libbz2 ....... : no\n    Link pcretest with libedit ...... : no\n    Link pcretest with libreadline .. : no\n    Valgrind support ................ : no\n    Code coverage ................... : no\n\n[root@iZ94m2e99jtZ pcre-8.38]# make & make install\n\n```\n\n**Tips**\n在编译pcre时可能会出现这样的：configure: error: You need a C++ compiler for C++ support.提示我们缺少一个C++ 的编译器，需要我们再安装一个C++的编译器。\n```\n[root@iZ94m2e99jtZ pcre-8.38]# yum install gcc-c++\n\n```\n\n\n\n\n### 下载\n\n[apr、apr-uitl官网][apr_website]\n[apr_website]:http://apr.apache.org/\n\n[apr 下载地址][apr_1.5.2_download]\n[apr_1.5.2_download]:http://mirrors.hust.edu.cn/apache//apr/apr-1.5.2.tar.gz\n[apr-uitl 下载地址][apr-uitl_1.5.4_download]\n[apr-uitl_1.5.4_download]:http://mirrors.hust.edu.cn/apache//apr/apr-util-1.5.4.tar.gz\n\n\n[apache 源码包][apache_download]\n[apache_download]:http://mirrors.tuna.tsinghua.edu.cn/apache//httpd/httpd-2.4.23.tar.gz\n\n下载、解压、将apr和apr-util分别复制到httpd-2.4.23/srclib/apr和httpd-2.4.23/srclib/apr-util中\n\n```\n[root@iZ94m2e99jtZ ~]# wget http://mirrors.hust.edu.cn/apache//apr/apr-1.5.2.tar.gz\n[root@iZ94m2e99jtZ ~]# wget  http://mirrors.hust.edu.cn/apache//apr/apr-util-1.5.4.tar.gz\n[root@iZ94m2e99jtZ ~]# wget http://mirrors.tuna.tsinghua.edu.cn/apache//httpd/httpd-2.4.23.tar.gz\n\n[root@iZ94m2e99jtZ ~]# tar -zxvf apr-1.5.2.tar.gz\n[root@iZ94m2e99jtZ ~]# tar -zxvf apr-util-1.5.4.tar.gz\n[root@iZ94m2e99jtZ ~]# tar -zxvf httpd-2.4.23.tar.gz\n\n[root@iZ94m2e99jtZ ~]# ll\n总用量 10088\ndrwxr-xr-x 27 1000  1000    4096 4月  25 2015 apr-1.5.2\n-rw-r--r--  1 root root  1031613 4月  29 2015 apr-1.5.2.tar.gz\ndrwxr-xr-x 19 1000  1000    4096 9月  17 2014 apr-util-1.5.4\n-rw-r--r--  1 root root   874044 9月  20 2014 apr-util-1.5.4.tar.gz\ndrwxr-xr-x 11  501 games    4096 7月   1 01:15 httpd-2.4.23\n-rw-r--r--  1 root root  8406575 7月   5 03:50 httpd-2.4.23.tar.gz\n[root@iZ94m2e99jtZ ~]#\n\n[root@iZ94m2e99jtZ ~]# cp -r  apr-1.5.2 httpd-2.4.23/srclib/apr\n[root@iZ94m2e99jtZ ~]# cp -r  apr-util-1.5.4 httpd-2.4.23/srclib/apr-util\n\n```\n\n## 安装\n\n### Configuring the source tree\n如果使用所有默认选项，只需键入的./configure即可，但一般我们根据自己的需求来修改一些配置。\n\n其中最重要的选项应该是apache的安装位置的配置项 --prefix ；\n此外，我们可以指定哪些功能被启用和禁用模块要包含在Apache中。apache配备了一个广泛的默认包含的模块。它们将被编译为可以装载或在运行时卸载共享对象（的DSO）。您也可以选择通过选项--enable-模块=静态编译静态模块。\n\n额外的模块使用--enable模块选项，其中模块与除去mod_个串并转换为破折号任何下划线模块的名称启用。\n同样，我们可以禁用与--disable模块选件模块。使用这些选项的时候，因为配置无法警告你，如果你指定的模块不存在要小心;它会简单地忽略选项。 此外，有时需要提供的配置脚本与你的编译器，库和头文件的位置额外信息。这是通过两种环境变量或命令行选项来配置完成。有关详细信息，请参考配置页面。或使用--help选项调用配置。\n\n[Apache 官方配置说明][apache_configure_doc]\n[apache_configure_doc]:http://httpd.apache.org/docs/2.4/programs/configure.html#installationdirectories\n\n\n```\n概要\n\n你应该叫configure从分布的根目录中的脚本。\n\n./configure [OPTION]... [VAR=VALUE]...\n\n要指定环境变量（例如CC， CFLAGS......），它们指定为 。请参见下面 的一些有用的变量的说明。VAR=VALUE\n\n最佳\n选项\n\n配置选项\n安装目录\n系统类型\n可选功能\n支持程序的选项\n配置选项\n下列选项影响的行为 configure本身。\n\n-C\n--config-cache\n这是一个别名 --cache-file=config.cache\n--cache-file=FILE\n测试结果将在文件中缓存文件。此选项默认为禁用 ​​。\n-h\n--help [short|recursive]\n输出的帮助和退出。随着说法short只是具体 ​​到这个包的选项将显示出来。参数 recursive显示所有包含包的简短帮助。\n-n\n--no-create\n该configure脚本运行正常，但不创建输出文件。这是有用的生成makefile文件编译前检查测试结果。\n-q\n--quiet\n不打印checking ...在配置过程的消息。\n--srcdir=DIR\n定义目录DIR是源文件目录。默认为所在目录configure的位置，或父目录。\n--silent\n与...一样 --quiet\n-V\n- 版\n显示版权信息并退出。\n安装目录\n这些选项定义安装目录。安装树取决于所选的布局。\n\n--prefix=PREFIX\n在安装结构无关的文件PREFIX。默认安装目录设置为 /usr/local/apache2。\n--exec-prefix=EPREFIX\n在安装体系相关的文件EPREFIX。默认安装目录设置为 PREFIX目录。\n默认情况下，make install将安装所有文件 /usr/local/apache2/bin，/usr/local/apache2/lib 等等。您可以指定以外的安装前缀 /usr/local/apache2使用--prefix，例如--prefix=$HOME。\n\n定义一个目录布局\n--enable-layout=LAYOUT\n配置源代码和编译脚本的假设基础上的布局安装树布局。这使您可以分别指定为Apache HTTP服务器安装在每个类型的文件的位置。该config.layout 文件包含几个示例配置，你还可以创建下面的例子中你自己的自定义配置。该文件中的不同布局分为<Layout FOO>...</Layout>部分，并通过名称简称为中FOO，默认布局Apache。\n安装目录微调\n为了更好地控制安装目录中，使用下面的选项。请注意，目录默认被设置 autoconf，并通过相应布局设置被覆盖。\n\n--bindir=DIR\n在用户安装可执行文件DIR。用户可执行文件都支持这样的程序htpasswd， dbmmanage等等。这对于网站管理员有用。默认情况下DIR设置为 EPREFIX/bin。\n--datadir=DIR\n在安装只读体系结构无关的数据DIR。默认datadir设置为 PREFIX/share。此选项是提供 autoconf与当前未使用。\n--includedir=DIR\n在安装C头文件DIR。默认 includedir设置为 EPREFIX/include。\n--infodir=DIR\n在安装info文档DIR。默认infodir设置为 PREFIX/info。此选项当前未使用。\n--libdir=DIR\n在安装目标代码库DIR。默认 libdir设置为 EPREFIX/lib。\n--libexecdir=DIR\n在安装程序的可执行文件（例如，共享模块） DIR。默认libexecdir设置为 EPREFIX/modules。\n--localstatedir=DIR\n在安装修改的单机数据DIR。默认localstatedir设置为 PREFIX/var。此选项是提供 autoconf与当前未使用。\n--mandir=DIR\n在安装该男子文档DIR。默认 mandir设置为 EPREFIX/man。\n--oldincludedir=DIR\n在非GCC安装C头文件DIR。默认oldincludedir设置为 /usr/include。此选项是提供 autoconf与当前未使用。\n--sbindir=DIR\n在系统中安装管理员可执行DIR。这些都是服务器程序，如httpd， apachectl，suexec等，这些都需要运行在Apache HTTP服务器。默认 sbindir设置为 EPREFIX/sbin。\n--sharedstatedir=DIR\n在安装修改的架构无关的数据DIR。默认sharedstatedir设置为 PREFIX/com。此选项是提供 autoconf与当前未使用。\n--sysconfdir=DIR\n安装只读的单机数据，如服务器配置文件httpd.conf，mime.types等在 DIR。默认sysconfdir设置为 PREFIX/conf。\n系统类型\n这些选项用于交叉编译Apache HTTP服务器到另一个系统上运行。在正常的情况下，建立和运行在同一系统上的服务器时，不使用这些选项。\n\n--build=BUILD\n定义系统类型上的工具正在建立该系统。它默认为脚本的结果 config.guess。\n--host=HOST\n定义系统类型的服务器将运行，系统的 HOST默认为BUILD。\n--target=TARGET\n配置构建编译器系统类型 目标。它默认为HOST。此选项被提供autoconf，而不是必要的Apache HTTP服务器。\n可选功能\n这些选项用于微调您的HTTP服务器将具备的功能。\n\n一般语法\n一般来说，你可以使用下面的语法来启用或禁用功能：\n\n--disable-FEATURE\n不包括特征。这是相同的 。--enable-FEATURE=no\n--enable-FEATURE[=ARG]\n包括特征。为默认值ARG 为yes。\n--enable-MODULE=shared\n相应的模块将被建设成为DSO模块。默认情况下启用的模块是动态链接的。\n--enable-MODULE=static\n相应的模块将被静态链接。\n注意\n\nconfigure不会抱怨 ，即使富不存在，所以你需要仔细类型。 --enable-foo\n选择模块编译\n大多数模块由默认编译并已被明确或通过使用关键字禁用few （见--enable-modules，--enable-mods-shared 并且--enable-mods-static下面进一步解释）或--enable-modules=none作为一组被删除。\n\n其它模块默认不编译并已被明确或通过使用关键字启用all或 reallyall可用。\n\n要了解哪些模块是默认编译，运行 ./configure -h或./configure --help 下看Optional Features。假设你有兴趣mod_example1和 mod_example2，你看这个：\n\n可选功能：\n  ...\n  --disable-例1示例模块1\n  --enable-例题例如模块2\n  ...\n然后mod_example1是默认启用的，你就可以使用--disable-example1不编译。 mod_example2默认情况下禁用，你就可以使用--enable-example2 编译它。\n\n多道处理模块\n多道处理模块，或的MPM，实现了服务器的基本行为。单个MPM必须为了使服务器的功能被激活。出现在可用MPM列表 模块索引页。\n\n的MPM可以建成为数字存储示波器的动态加载或静态与服务器相连，并使用下列选项被启用：\n\n--with-mpm=MPM\n选择适合您的服务器的默认MPM。如果MPM的构建为DSO模块（见--enable-mpms-shared），该指令选择将默认的配置文件中加载的MPM。否则，这个指令选择唯一可用的MPM，这将静态链接到服务器。\n\n如果省略此选项，默认的MPM为您的操作系统将被使用。\n\n--enable-mpms-shared=MPM-LIST\n使动态共享模块的MPM的列表。这些模块之一必须动态使用加载 LoadModule指令。\n\nMPM-LIST是加了引号的MPM名称的空格分隔的列表。例如：\n\n--enable-mpms-shared='prefork worker'\n此外，您还可以使用特殊关键字all，这将选择支持在当前平台上动态加载所有的MPM和他们建立的DSO模块。例如：\n\n--enable-mpms-shared=all\n第三方模块\n要添加其他第三方模块使用下列选项：\n\n--with-module=module-type:module-file[, module-type:module-file]\n添加一个或多个第三方的模块，以静态链接模块列表。该模块的源文件module-file 将在搜索 你的Apache HTTP服务器的源代码树的子目录。如果没有找到有它正在考虑模块文件是一个绝对文件路径，并尝试将源文件复制到 模块式子目录。如果子目录不存在，它将被创建并与标准的填充 。modules/module-typeconfigureMakefile.in\n\n此选项很有用添加由一个源文件小的外部组件。对于更复杂的模块，你应该阅读供应商的文档。\n\n注意\n\n如果你想建立一个DSO模块，而不是一个静态链接使用apxs。\n累积和其他选项\n--enable-maintainer-mode\n打开调试和编译时警告，并加载所有编译的模块。\n--enable-mods-shared=MODULE-LIST\n定义启用并建立动态共享模块模块的列表。这意味着，这些模块必须通过使用动态加载 LoadModule指令。\n\nMODULE-LIST是加了引号的modulenames空格分隔列表。该模块名称没有给出前面mod_。例如：\n\n--enable-mods-shared='headers rewrite dav'\n此外，您还可以使用特殊的关键字reallyall， all，most和few。例如，\n\n--enable-mods-shared=most\n将编译大多数模块，并将其建设成为DSO模块，\n\n--enable-mods-shared=few\n将只编译一个非常基本的模块组。\n\n默认设置为most。\n\n在LoadModule对所选择的模块的指令将在主配置文件中自动生成。默认情况下，所有的指令都只是由一个配置要求或明确选择的模块被注释掉--enable-foo的说法。您可以更改设置启用或关闭加载的模块LoadModule的指令 httpd.conf。此外， LoadModule所有构建的模块的指令可通过配置选项被激活 --enable-load-all-modules。\n\n--enable-mods-static=MODULE-LIST\n此选项的行为类似--enable-mods-shared，但在给定的模块静态链接。这意味着，这些模块将始终存在，同时运行httpd。他们不必被加载LoadModule。\n--enable-modules=MODULE-LIST\n此选项的行为等来--enable-mods-shared，并且还将动态地链接的给定模块。特殊关键字none禁用所有模块的版本。\n--enable-v4-mapped\n允许IPv6的套接字来处理IPv4连接。\n--with-port=PORT\n这定义上的端口httpd会听。生成配置文件时，该端口号用于 httpd.conf。默认值是80。\n--with-program-name\n定义一个替代的可执行文件名 ​​称。默认值是 httpd。\n可选包\n这些选项用于定义可选包。\n\n一般语法\n一般来说，你可以使用下面的语法定义一个可选包：\n\n--with-PACKAGE[=ARG]\n使用包PACKAGE。为默认值 ARG为yes。\n--without-PACKAGE\n不要使用包PACKAGE。这是相同的 。此选项所提供 ，但对于Apache HTTP服务器不是非常有用。--with-PACKAGE=noautoconf\n特定软件包\n--with-apr=DIR|FILE\n在Apache可移植运行时（APR）是httpd的源代码分发的一部分，将自动与HTTP服务器共同建立。如果您想使用已安装的年利率，而不是你要告诉configure路径的 apr-config脚本。你可以设置绝对路径和名称或目录切换到安装四月apr-config必须在该目录或子目录中存在 bin。\n--with-apr-util=DIR|FILE\nApache可移植运行实用程序（APU）是httpd的源代码分发的一部分，将自动与HTTP服务器共同建立。如果您想使用已安装的APU，而不是你要告诉configure路径的 apu-config脚本。你可以设置绝对路径和名称或目录切换到安装APU，apu-config必须在该目录或子目录中存在 bin。\n--with-ssl=DIR\n如果mod_ssl已启用configure 已安装的OpenSSL的搜索。您可以将目录路径设置为SSL / TLS工具包来代替。\n--with-z=DIR\nconfigure已安装的自动搜索 zlib，如果你的源配置需要一个库（例如，当mod_deflate使能）。您可以设置压缩库的目录路径来代替。\nApache HTTP服务器的一些特性，如 mod_authn_dbm和mod_rewrite的DBM RewriteMap使用简单的键/值对数据库信息的快速查询。SDBM被包括在APU，所以这个数据库是始终可用。如果您想使用其他数据库类型，可以使用下面的选项，以使它们：\n\n--with-gdbm[=path]\n如果没有路径指定，configure将搜索在平时的搜索路径GNU DBM安装的包含文件和库。一个明确的 路径会导致configure在寻找 path/lib，并 path/include为相关的文件。最后，路径可以指定用冒号隔开具体包括和库路径。\n--with-ndbm[=path]\n像--with-gdbm，但搜索新DBM安装。\n--with-berkeley-db[=path]\n像--with-gdbm，但搜索一个Berkeley DB的安装。\n注意\n\n由APU提供，并通过其配置脚本传递的DBM选项。他们利用确定已安装的APU时是无用的--with-apr-util。\n您可以使用自己的HTTP服务器一起使用一个以上的DBM实现。该拨款DBM类型将每次运行时配置中配置。\n支持程序的选项\n--enable-static-support\n构建支持二进制文件的静态链接的版本。这意味着，一个独立的可执行文件将集成所有必要的库来构建。否则，支持二进制文件默认情况下，动态链接。\n--enable-suexec\n使用此选项可启用suexec，它允许您设置UID和GID的催生过程。除非你了解你的服务器上运行的SUID二进制的所有安全隐患，请勿使用此选项。更多选项来配置suexec介绍如下。\n这可以通过使用下列选项来创建一个单一的支持程序的静态链接二进制文件：\n\n--enable-static-ab\n建立一个静态链接的版本ab。\n--enable-static-checkgid\n建立一个静态链接的版本checkgid。\n--enable-static-htdbm\n建立一个静态链接的版本htdbm。\n--enable-static-htdigest\n建立一个静态链接的版本htdigest。\n--enable-static-htpasswd\n建立一个静态链接的版本htpasswd。\n--enable-static-logresolve\n建立一个静态链接的版本logresolve。\n--enable-static-rotatelogs\n建立一个静态链接的版本rotatelogs。\nsuexec 配置选项\n下列选项用于微调的行为suexec。参见配置和安装suEXEC的 进一步的信息。\n\n--with-suexec-bin\n这定义的路径suexec二进制文件。默认值是--sbindir（见安装目录微调）。\n--with-suexec-caller\n这定义允许呼叫的用户suexec。它应该是相同下，用户 httpd正常运行。\n--with-suexec-docroot\n这个定义下的目录树suexec允许访问的可执行文件。默认值是 --datadir/htdocs。\n--with-suexec-gidmin\n这个定义的最低GID成为目标用户 suexec。默认值是100。\n--with-suexec-logfile\n这个定义的文件名suexec​​日志文件。默认情况下，日志文件被命名为suexec_log，位于 --logfiledir。\n--with-suexec-safepath\n定义环境变量的值PATH由启动的进 ​​程进行设置suexec。默认值是/usr/local/bin:/usr/bin:/bin。\n--with-suexec-userdir\n此定义包含所有可执行文件的用户目录下的子目录suexec的访问是允许的。当你想使用此设置时必须 suexec使用特定用户目录在一起（如所提供的mod_userdir）。默认值是 public_html。\n--with-suexec-uidmin\n它定义为最低的UID允许为目标用户 suexec。默认值是100。\n--with-suexec-umask\n设置umask由启动的进 ​​程 suexec。它默认为您的系统设置。\n最佳\n环境变量\n\n有一些有用的环境变量覆盖所作出的选择 configure，或帮助它找到库和程序与非标准名称或位置。\n\nCC\n定义要用于编译的C编译器的命令。\nCFLAGS\n要使用编译设置C编译器的标志。\nCPP\n定义C预处理命令使用。\nCPPFLAGS\n将C / C ++预处理器的标志，例如 ，如果你在一个非标准目录头了includedir。-Iincludedir\nLDFLAGS\n设置连接器选项，例如，如果你在一个非标准目录库LIBDIR。-Llibdir\n\n\n```\n\n***示例：***\n这里是一个典型的例子编译Apache，安装树/ SW /包装/与特定的编译器和标志，加上两个额外的模块阿帕奇mod_ldap模块和mod_lua\n\n```\n$ CC=\"pgcc\" CFLAGS=\"-O2\" \\\n./configure --prefix=/sw/pkg/apache \\\n--enable-ldap=shared \\\n--enable-lua=shared\n\n```\n\n我们本次采用基本的默认设置 来进行安装\n```\n[root@iZ94m2e99jtZ ~]# cd httpd-2.4.23\n[root@iZ94m2e99jtZ httpd-2.4.23]# ./configure  --with-included-apr\n\n```\n\n### Build\n\n```\n[root@iZ94m2e99jtZ httpd-2.4.23]# make\n```\n### Install\n```\n[root@iZ94m2e99jtZ httpd-2.4.23]# make install\n···\nInstalling configuration files\nmkdir /usr/local/apache2/conf\nmkdir /usr/local/apache2/conf/extra\nmkdir /usr/local/apache2/conf/original\nmkdir /usr/local/apache2/conf/original/extra\nInstalling HTML documents\nmkdir /usr/local/apache2/htdocs\nInstalling error documents\nmkdir /usr/local/apache2/error\nInstalling icons\nmkdir /usr/local/apache2/icons\nmkdir /usr/local/apache2/logs\nInstalling CGIs\nmkdir /usr/local/apache2/cgi-bin\nInstalling header files\nInstalling build system files\nInstalling man pages and online manual\nmkdir /usr/local/apache2/man\nmkdir /usr/local/apache2/man/man1\nmkdir /usr/local/apache2/man/man8\nmkdir /usr/local/apache2/manual\n```\n\n### Customize（定制）\n\n接下来，我们可以通过在 /usr/local/apache2/conf 目录，编辑配置文件来自定义我们的Apache HTTP服务器。\n\n[配置指令快速参考索引][apache_conf_directive_index]\n[apache_conf_directive_index]:http://httpd.apache.org/docs/2.4/zh-cn/mod/directives.html\n\n### Testinh(测试)\n启动Apache服务器\n```\n[root@iZ94m2e99jtZ httpd-2.4.23]# /usr/local/apache2/bin/apachectl -k start\n\n[root@iZ94m2e99jtZ httpd-2.4.23]# ps aux | grep httpd\nroot     15386  0.0  0.2  70556  2188 ?        Ss   11:53   0:00 /usr/local/apache2/bin/httpd -k start\ndaemon   15387  0.0  0.4 359520  4260 ?        Sl   11:53   0:00 /usr/local/apache2/bin/httpd -k start\ndaemon   15388  0.0  0.4 359520  4260 ?        Sl   11:53   0:00 /usr/local/apache2/bin/httpd -k start\ndaemon   15389  0.0  0.4 359520  4256 ?        Sl   11:53   0:00 /usr/local/apache2/bin/httpd -k start\nroot     15472  0.0  0.0 112664   972 pts/0    S+   11:53   0:00 grep --color=auto httpd\n```\n浏览器访问：http://IP地址\n\n当出现『It works!』字样说明我们已经安装成功\n\n***注意*** 如果通过浏览器访问不到，可能是请求服务器防火墙给拦截了，所以我们需要在防火墙里将我们用到的80端口给放行。\n我以我当前Centos7 的系统为例，Centos7现在默认的防火墙是firewalld，Centos6以及6以前的版本则使用的是iptables，所以具体设置方法还请自己去搜索。\n```\n[root@iZ94m2e99jtZ ~]# firewall-cmd  --permanent --zone=public --add-port=80/tcp  #将80端口开放\nsuccess\n[root@iZ94m2e99jtZ ~]# firewall-cmd  --reload #重新加载防火墙配置\nsuccess\n```\n## 日常管理\n一般常见的管理方式有两种\n* 直接通过httpd命令来管理\n* 通过apachectl来管理\n***Tips*** apachetl其实一个是对httpd命令进行了封装sh脚本\n\n### 常用命令\n\n```\n#通过apachectl来管理\n[root@iZ94m2e99jtZ ~]# /usr/local/apache2/bin/apachectl -k start  #启动\n[root@iZ94m2e99jtZ ~]# /usr/local/apache2/bin/apachectl -k restart  #重启\n[root@iZ94m2e99jtZ ~]# /usr/local/apache2/bin/apachectl -k stop  #停止\n\n#直接通过httpd命令来管理\n[root@iZ94m2e99jtZ ~]# /usr/local/apache2/bin/httpd -k start|restart|graceful|graceful-stop|stop\n\n```\n\n### 具体参数\n```\nUsage: /usr/local/apache2/bin/httpd [-D name] [-d directory] [-f file]\n                                    [-C \"directive\"] [-c \"directive\"]\n                                    [-k start|restart|graceful|graceful-stop|stop]\n                                    [-v] [-V] [-h] [-l] [-L] [-t] [-T] [-S] [-X]\nOptions:\n  -D name            : define a name for use in <IfDefine name> directives\n  -d directory       : specify an alternate initial ServerRoot\n  -f file            : specify an alternate ServerConfigFile\n  -C \"directive\"     : process directive before reading config files\n  -c \"directive\"     : process directive after reading config files\n  -e level           : show startup errors of level (see LogLevel)\n  -E file            : log startup errors to file\n  -v                 : show version number\n  -V                 : show compile settings\n  -h                 : list available command line options (this page)\n  -l                 : list compiled in modules\n  -L                 : list available configuration directives\n  -t -D DUMP_VHOSTS  : show parsed vhost settings\n  -t -D DUMP_RUN_CFG : show parsed run settings\n  -S                 : a synonym for -t -D DUMP_VHOSTS -D DUMP_RUN_CFG\n  -t -D DUMP_MODULES : show all loaded modules\n  -M                 : a synonym for -t -D DUMP_MODULES\n  -t -D DUMP_INCLUDES: show all included configuration files\n  -t                 : run syntax check for config files\n  -T                 : start without DocumentRoot(s) check\n  -X                 : debug mode (only one worker, do not detach)\n\n```\n","source":"_posts/Apache安装汇总.md","raw":"---\ntitle: Apache的安装\ndate: 2016-08-09 14:00:00\nauthor: zhimiao\ntags:\n- Web服务器\n- Apache\ncategories:\n- Apache\n---\n\nApache是世界使用排名第一的Web服务器软件。它可以运行在几乎所有广泛使用的计算机平台上，由于其跨平台和安全性被广泛使用，是最流行的Web服务器端软件之一。\nApache的安装无外乎两种方式：\n* 二进制包安装\n* 源码包安装\n\n\n<!-- more -->\n\n接下来我将会演示和记录通过源码包来安装apache到服务器。\n环境：阿里云 Centos 7.2 64\n\n## 安装前准备工作\n通过源码包安装，我们需要将源码编译成计算机运行的二进制，因此我们需要编译工具。\n### gcc安装\nGNU编译器套件（GNU Compiler Collection）包括C、C++、Objective-C、Fortran、Java、Ada和Go语言的前端，也包括了这些语言的库（如libstdc++、libgcj等等）。GCC的初衷是为GNU操作系统专门编写的一款编译器。\n```\n[root@iZ28v78hcmrZ ~]# gcc\ngcc: 致命错误：没有输入文件\n编译中断。\n[root@iZ28v78hcmrZ ~]# yum install gcc\n···\n作为依赖被升级:\n  cpp.x86_64 0:4.8.5-4.el7            gcc-c++.x86_64 0:4.8.5-4.el7            gcc-gfortran.x86_64 0:4.8.5-4.el7    libgcc.x86_64 0:4.8.5-4.el7\n  libgfortran.x86_64 0:4.8.5-4.el7    libgomp.x86_64 0:4.8.5-4.el7            libquadmath.x86_64 0:4.8.5-4.el7     libquadmath-devel.x86_64 0:4.8.5-4.el7\n  libstdc++.x86_64 0:4.8.5-4.el7      libstdc++-devel.x86_64 0:4.8.5-4.el7\n\n完毕！\n[root@iZ28v78hcmrZ ~]#\n```\n### APR、APR-UTIL 安装\n\nAPR （全称：Apache Portable Runtime）可移植运行时库、APR-UTIL（全称：Apache Portable Runtime Utility Library）可移植运行时工具库。它们的作用是使得对平台细节的处理进行下移。对于应用程序而言，它们根本就不需要考虑具体的平台，不管是Unix、Linux还是Window，应用程序执行的接口基本都是统一一致的。\nAPR的目标则是希望安全合并所有的能够合并的代码而不需要牺牲性能，为大多数平台提供所有的APR特性支持，包括Win32、OS/2、BeOS、Darwin、Linux等等。\n\n\n\n关于apr和apr-util，apache可以使用系统已经安装的版本，也可以不实用系统提供的版本。具体方法是分别下载apr和apr-util，解压到apache源码包中的srclib/apr和srclib/apr-util路径中（路径中不包含版本号等信息），在编译源码包之前的./configure 过程中使用 --with-included-apr 选项\n\n### PRCE (Perl-Compatible Regular Expressions Library,Perl兼容的正则表达式库)\nPCRE(Perl Compatible Regular Expressions)是一个用C语言编写的正则表达式函数库。\nPCRE被广泛使用在许多开源软件之中，最著名的莫过于Apache HTTP服务器和PHP脚本语言、R脚本语言，此外，正如从其名字所能看到的，PCRE也是perl语言的缺省正则库。\n\n[PCRE 下载网址][pcre_download]\n[pcre_download]:https://sourceforge.net/projects/pcre/files/\n\n```\n#解压\n[root@iZ94m2e99jtZ ~]# tar -zxvf pcre-8.38.tar.gz\n[root@iZ94m2e99jtZ ~]# cd pcre-8.38\n[root@iZ94m2e99jtZ pcre-8.38]# ./configure\n···\npcre-8.38 configuration summary:\n\n    Install prefix .................. : /usr/local\n    C preprocessor .................. : gcc -E\n    C compiler ...................... : gcc\n    C++ preprocessor ................ : g++ -E\n    C++ compiler .................... : g++\n    Linker .......................... : /usr/bin/ld -m elf_x86_64\n    C preprocessor flags ............ :\n    C compiler flags ................ : -g -O2 -fvisibility=hidden\n    C++ compiler flags .............. : -O2 -fvisibility=hidden -fvisibility-inlines-hidden\n    Linker flags .................... :\n    Extra libraries ................. :\n\n    Build 8 bit pcre library ........ : yes\n    Build 16 bit pcre library ....... : no\n    Build 32 bit pcre library ....... : no\n    Build C++ library ............... : yes\n    Enable JIT compiling support .... : no\n    Enable UTF-8/16/32 support ...... : no\n    Unicode properties .............. : no\n    Newline char/sequence ........... : lf\n    \\R matches only ANYCRLF ......... : no\n    EBCDIC coding ................... : no\n    EBCDIC code for NL .............. : n/a\n    Rebuild char tables ............. : no\n    Use stack recursion ............. : yes\n    POSIX mem threshold ............. : 10\n    Internal link size .............. : 2\n    Nested parentheses limit ........ : 250\n    Match limit ..................... : 10000000\n    Match limit recursion ........... : MATCH_LIMIT\n    Build shared libs ............... : yes\n    Build static libs ............... : yes\n    Use JIT in pcregrep ............. : no\n    Buffer size for pcregrep ........ : 20480\n    Link pcregrep with libz ......... : no\n    Link pcregrep with libbz2 ....... : no\n    Link pcretest with libedit ...... : no\n    Link pcretest with libreadline .. : no\n    Valgrind support ................ : no\n    Code coverage ................... : no\n\n[root@iZ94m2e99jtZ pcre-8.38]# make & make install\n\n```\n\n**Tips**\n在编译pcre时可能会出现这样的：configure: error: You need a C++ compiler for C++ support.提示我们缺少一个C++ 的编译器，需要我们再安装一个C++的编译器。\n```\n[root@iZ94m2e99jtZ pcre-8.38]# yum install gcc-c++\n\n```\n\n\n\n\n### 下载\n\n[apr、apr-uitl官网][apr_website]\n[apr_website]:http://apr.apache.org/\n\n[apr 下载地址][apr_1.5.2_download]\n[apr_1.5.2_download]:http://mirrors.hust.edu.cn/apache//apr/apr-1.5.2.tar.gz\n[apr-uitl 下载地址][apr-uitl_1.5.4_download]\n[apr-uitl_1.5.4_download]:http://mirrors.hust.edu.cn/apache//apr/apr-util-1.5.4.tar.gz\n\n\n[apache 源码包][apache_download]\n[apache_download]:http://mirrors.tuna.tsinghua.edu.cn/apache//httpd/httpd-2.4.23.tar.gz\n\n下载、解压、将apr和apr-util分别复制到httpd-2.4.23/srclib/apr和httpd-2.4.23/srclib/apr-util中\n\n```\n[root@iZ94m2e99jtZ ~]# wget http://mirrors.hust.edu.cn/apache//apr/apr-1.5.2.tar.gz\n[root@iZ94m2e99jtZ ~]# wget  http://mirrors.hust.edu.cn/apache//apr/apr-util-1.5.4.tar.gz\n[root@iZ94m2e99jtZ ~]# wget http://mirrors.tuna.tsinghua.edu.cn/apache//httpd/httpd-2.4.23.tar.gz\n\n[root@iZ94m2e99jtZ ~]# tar -zxvf apr-1.5.2.tar.gz\n[root@iZ94m2e99jtZ ~]# tar -zxvf apr-util-1.5.4.tar.gz\n[root@iZ94m2e99jtZ ~]# tar -zxvf httpd-2.4.23.tar.gz\n\n[root@iZ94m2e99jtZ ~]# ll\n总用量 10088\ndrwxr-xr-x 27 1000  1000    4096 4月  25 2015 apr-1.5.2\n-rw-r--r--  1 root root  1031613 4月  29 2015 apr-1.5.2.tar.gz\ndrwxr-xr-x 19 1000  1000    4096 9月  17 2014 apr-util-1.5.4\n-rw-r--r--  1 root root   874044 9月  20 2014 apr-util-1.5.4.tar.gz\ndrwxr-xr-x 11  501 games    4096 7月   1 01:15 httpd-2.4.23\n-rw-r--r--  1 root root  8406575 7月   5 03:50 httpd-2.4.23.tar.gz\n[root@iZ94m2e99jtZ ~]#\n\n[root@iZ94m2e99jtZ ~]# cp -r  apr-1.5.2 httpd-2.4.23/srclib/apr\n[root@iZ94m2e99jtZ ~]# cp -r  apr-util-1.5.4 httpd-2.4.23/srclib/apr-util\n\n```\n\n## 安装\n\n### Configuring the source tree\n如果使用所有默认选项，只需键入的./configure即可，但一般我们根据自己的需求来修改一些配置。\n\n其中最重要的选项应该是apache的安装位置的配置项 --prefix ；\n此外，我们可以指定哪些功能被启用和禁用模块要包含在Apache中。apache配备了一个广泛的默认包含的模块。它们将被编译为可以装载或在运行时卸载共享对象（的DSO）。您也可以选择通过选项--enable-模块=静态编译静态模块。\n\n额外的模块使用--enable模块选项，其中模块与除去mod_个串并转换为破折号任何下划线模块的名称启用。\n同样，我们可以禁用与--disable模块选件模块。使用这些选项的时候，因为配置无法警告你，如果你指定的模块不存在要小心;它会简单地忽略选项。 此外，有时需要提供的配置脚本与你的编译器，库和头文件的位置额外信息。这是通过两种环境变量或命令行选项来配置完成。有关详细信息，请参考配置页面。或使用--help选项调用配置。\n\n[Apache 官方配置说明][apache_configure_doc]\n[apache_configure_doc]:http://httpd.apache.org/docs/2.4/programs/configure.html#installationdirectories\n\n\n```\n概要\n\n你应该叫configure从分布的根目录中的脚本。\n\n./configure [OPTION]... [VAR=VALUE]...\n\n要指定环境变量（例如CC， CFLAGS......），它们指定为 。请参见下面 的一些有用的变量的说明。VAR=VALUE\n\n最佳\n选项\n\n配置选项\n安装目录\n系统类型\n可选功能\n支持程序的选项\n配置选项\n下列选项影响的行为 configure本身。\n\n-C\n--config-cache\n这是一个别名 --cache-file=config.cache\n--cache-file=FILE\n测试结果将在文件中缓存文件。此选项默认为禁用 ​​。\n-h\n--help [short|recursive]\n输出的帮助和退出。随着说法short只是具体 ​​到这个包的选项将显示出来。参数 recursive显示所有包含包的简短帮助。\n-n\n--no-create\n该configure脚本运行正常，但不创建输出文件。这是有用的生成makefile文件编译前检查测试结果。\n-q\n--quiet\n不打印checking ...在配置过程的消息。\n--srcdir=DIR\n定义目录DIR是源文件目录。默认为所在目录configure的位置，或父目录。\n--silent\n与...一样 --quiet\n-V\n- 版\n显示版权信息并退出。\n安装目录\n这些选项定义安装目录。安装树取决于所选的布局。\n\n--prefix=PREFIX\n在安装结构无关的文件PREFIX。默认安装目录设置为 /usr/local/apache2。\n--exec-prefix=EPREFIX\n在安装体系相关的文件EPREFIX。默认安装目录设置为 PREFIX目录。\n默认情况下，make install将安装所有文件 /usr/local/apache2/bin，/usr/local/apache2/lib 等等。您可以指定以外的安装前缀 /usr/local/apache2使用--prefix，例如--prefix=$HOME。\n\n定义一个目录布局\n--enable-layout=LAYOUT\n配置源代码和编译脚本的假设基础上的布局安装树布局。这使您可以分别指定为Apache HTTP服务器安装在每个类型的文件的位置。该config.layout 文件包含几个示例配置，你还可以创建下面的例子中你自己的自定义配置。该文件中的不同布局分为<Layout FOO>...</Layout>部分，并通过名称简称为中FOO，默认布局Apache。\n安装目录微调\n为了更好地控制安装目录中，使用下面的选项。请注意，目录默认被设置 autoconf，并通过相应布局设置被覆盖。\n\n--bindir=DIR\n在用户安装可执行文件DIR。用户可执行文件都支持这样的程序htpasswd， dbmmanage等等。这对于网站管理员有用。默认情况下DIR设置为 EPREFIX/bin。\n--datadir=DIR\n在安装只读体系结构无关的数据DIR。默认datadir设置为 PREFIX/share。此选项是提供 autoconf与当前未使用。\n--includedir=DIR\n在安装C头文件DIR。默认 includedir设置为 EPREFIX/include。\n--infodir=DIR\n在安装info文档DIR。默认infodir设置为 PREFIX/info。此选项当前未使用。\n--libdir=DIR\n在安装目标代码库DIR。默认 libdir设置为 EPREFIX/lib。\n--libexecdir=DIR\n在安装程序的可执行文件（例如，共享模块） DIR。默认libexecdir设置为 EPREFIX/modules。\n--localstatedir=DIR\n在安装修改的单机数据DIR。默认localstatedir设置为 PREFIX/var。此选项是提供 autoconf与当前未使用。\n--mandir=DIR\n在安装该男子文档DIR。默认 mandir设置为 EPREFIX/man。\n--oldincludedir=DIR\n在非GCC安装C头文件DIR。默认oldincludedir设置为 /usr/include。此选项是提供 autoconf与当前未使用。\n--sbindir=DIR\n在系统中安装管理员可执行DIR。这些都是服务器程序，如httpd， apachectl，suexec等，这些都需要运行在Apache HTTP服务器。默认 sbindir设置为 EPREFIX/sbin。\n--sharedstatedir=DIR\n在安装修改的架构无关的数据DIR。默认sharedstatedir设置为 PREFIX/com。此选项是提供 autoconf与当前未使用。\n--sysconfdir=DIR\n安装只读的单机数据，如服务器配置文件httpd.conf，mime.types等在 DIR。默认sysconfdir设置为 PREFIX/conf。\n系统类型\n这些选项用于交叉编译Apache HTTP服务器到另一个系统上运行。在正常的情况下，建立和运行在同一系统上的服务器时，不使用这些选项。\n\n--build=BUILD\n定义系统类型上的工具正在建立该系统。它默认为脚本的结果 config.guess。\n--host=HOST\n定义系统类型的服务器将运行，系统的 HOST默认为BUILD。\n--target=TARGET\n配置构建编译器系统类型 目标。它默认为HOST。此选项被提供autoconf，而不是必要的Apache HTTP服务器。\n可选功能\n这些选项用于微调您的HTTP服务器将具备的功能。\n\n一般语法\n一般来说，你可以使用下面的语法来启用或禁用功能：\n\n--disable-FEATURE\n不包括特征。这是相同的 。--enable-FEATURE=no\n--enable-FEATURE[=ARG]\n包括特征。为默认值ARG 为yes。\n--enable-MODULE=shared\n相应的模块将被建设成为DSO模块。默认情况下启用的模块是动态链接的。\n--enable-MODULE=static\n相应的模块将被静态链接。\n注意\n\nconfigure不会抱怨 ，即使富不存在，所以你需要仔细类型。 --enable-foo\n选择模块编译\n大多数模块由默认编译并已被明确或通过使用关键字禁用few （见--enable-modules，--enable-mods-shared 并且--enable-mods-static下面进一步解释）或--enable-modules=none作为一组被删除。\n\n其它模块默认不编译并已被明确或通过使用关键字启用all或 reallyall可用。\n\n要了解哪些模块是默认编译，运行 ./configure -h或./configure --help 下看Optional Features。假设你有兴趣mod_example1和 mod_example2，你看这个：\n\n可选功能：\n  ...\n  --disable-例1示例模块1\n  --enable-例题例如模块2\n  ...\n然后mod_example1是默认启用的，你就可以使用--disable-example1不编译。 mod_example2默认情况下禁用，你就可以使用--enable-example2 编译它。\n\n多道处理模块\n多道处理模块，或的MPM，实现了服务器的基本行为。单个MPM必须为了使服务器的功能被激活。出现在可用MPM列表 模块索引页。\n\n的MPM可以建成为数字存储示波器的动态加载或静态与服务器相连，并使用下列选项被启用：\n\n--with-mpm=MPM\n选择适合您的服务器的默认MPM。如果MPM的构建为DSO模块（见--enable-mpms-shared），该指令选择将默认的配置文件中加载的MPM。否则，这个指令选择唯一可用的MPM，这将静态链接到服务器。\n\n如果省略此选项，默认的MPM为您的操作系统将被使用。\n\n--enable-mpms-shared=MPM-LIST\n使动态共享模块的MPM的列表。这些模块之一必须动态使用加载 LoadModule指令。\n\nMPM-LIST是加了引号的MPM名称的空格分隔的列表。例如：\n\n--enable-mpms-shared='prefork worker'\n此外，您还可以使用特殊关键字all，这将选择支持在当前平台上动态加载所有的MPM和他们建立的DSO模块。例如：\n\n--enable-mpms-shared=all\n第三方模块\n要添加其他第三方模块使用下列选项：\n\n--with-module=module-type:module-file[, module-type:module-file]\n添加一个或多个第三方的模块，以静态链接模块列表。该模块的源文件module-file 将在搜索 你的Apache HTTP服务器的源代码树的子目录。如果没有找到有它正在考虑模块文件是一个绝对文件路径，并尝试将源文件复制到 模块式子目录。如果子目录不存在，它将被创建并与标准的填充 。modules/module-typeconfigureMakefile.in\n\n此选项很有用添加由一个源文件小的外部组件。对于更复杂的模块，你应该阅读供应商的文档。\n\n注意\n\n如果你想建立一个DSO模块，而不是一个静态链接使用apxs。\n累积和其他选项\n--enable-maintainer-mode\n打开调试和编译时警告，并加载所有编译的模块。\n--enable-mods-shared=MODULE-LIST\n定义启用并建立动态共享模块模块的列表。这意味着，这些模块必须通过使用动态加载 LoadModule指令。\n\nMODULE-LIST是加了引号的modulenames空格分隔列表。该模块名称没有给出前面mod_。例如：\n\n--enable-mods-shared='headers rewrite dav'\n此外，您还可以使用特殊的关键字reallyall， all，most和few。例如，\n\n--enable-mods-shared=most\n将编译大多数模块，并将其建设成为DSO模块，\n\n--enable-mods-shared=few\n将只编译一个非常基本的模块组。\n\n默认设置为most。\n\n在LoadModule对所选择的模块的指令将在主配置文件中自动生成。默认情况下，所有的指令都只是由一个配置要求或明确选择的模块被注释掉--enable-foo的说法。您可以更改设置启用或关闭加载的模块LoadModule的指令 httpd.conf。此外， LoadModule所有构建的模块的指令可通过配置选项被激活 --enable-load-all-modules。\n\n--enable-mods-static=MODULE-LIST\n此选项的行为类似--enable-mods-shared，但在给定的模块静态链接。这意味着，这些模块将始终存在，同时运行httpd。他们不必被加载LoadModule。\n--enable-modules=MODULE-LIST\n此选项的行为等来--enable-mods-shared，并且还将动态地链接的给定模块。特殊关键字none禁用所有模块的版本。\n--enable-v4-mapped\n允许IPv6的套接字来处理IPv4连接。\n--with-port=PORT\n这定义上的端口httpd会听。生成配置文件时，该端口号用于 httpd.conf。默认值是80。\n--with-program-name\n定义一个替代的可执行文件名 ​​称。默认值是 httpd。\n可选包\n这些选项用于定义可选包。\n\n一般语法\n一般来说，你可以使用下面的语法定义一个可选包：\n\n--with-PACKAGE[=ARG]\n使用包PACKAGE。为默认值 ARG为yes。\n--without-PACKAGE\n不要使用包PACKAGE。这是相同的 。此选项所提供 ，但对于Apache HTTP服务器不是非常有用。--with-PACKAGE=noautoconf\n特定软件包\n--with-apr=DIR|FILE\n在Apache可移植运行时（APR）是httpd的源代码分发的一部分，将自动与HTTP服务器共同建立。如果您想使用已安装的年利率，而不是你要告诉configure路径的 apr-config脚本。你可以设置绝对路径和名称或目录切换到安装四月apr-config必须在该目录或子目录中存在 bin。\n--with-apr-util=DIR|FILE\nApache可移植运行实用程序（APU）是httpd的源代码分发的一部分，将自动与HTTP服务器共同建立。如果您想使用已安装的APU，而不是你要告诉configure路径的 apu-config脚本。你可以设置绝对路径和名称或目录切换到安装APU，apu-config必须在该目录或子目录中存在 bin。\n--with-ssl=DIR\n如果mod_ssl已启用configure 已安装的OpenSSL的搜索。您可以将目录路径设置为SSL / TLS工具包来代替。\n--with-z=DIR\nconfigure已安装的自动搜索 zlib，如果你的源配置需要一个库（例如，当mod_deflate使能）。您可以设置压缩库的目录路径来代替。\nApache HTTP服务器的一些特性，如 mod_authn_dbm和mod_rewrite的DBM RewriteMap使用简单的键/值对数据库信息的快速查询。SDBM被包括在APU，所以这个数据库是始终可用。如果您想使用其他数据库类型，可以使用下面的选项，以使它们：\n\n--with-gdbm[=path]\n如果没有路径指定，configure将搜索在平时的搜索路径GNU DBM安装的包含文件和库。一个明确的 路径会导致configure在寻找 path/lib，并 path/include为相关的文件。最后，路径可以指定用冒号隔开具体包括和库路径。\n--with-ndbm[=path]\n像--with-gdbm，但搜索新DBM安装。\n--with-berkeley-db[=path]\n像--with-gdbm，但搜索一个Berkeley DB的安装。\n注意\n\n由APU提供，并通过其配置脚本传递的DBM选项。他们利用确定已安装的APU时是无用的--with-apr-util。\n您可以使用自己的HTTP服务器一起使用一个以上的DBM实现。该拨款DBM类型将每次运行时配置中配置。\n支持程序的选项\n--enable-static-support\n构建支持二进制文件的静态链接的版本。这意味着，一个独立的可执行文件将集成所有必要的库来构建。否则，支持二进制文件默认情况下，动态链接。\n--enable-suexec\n使用此选项可启用suexec，它允许您设置UID和GID的催生过程。除非你了解你的服务器上运行的SUID二进制的所有安全隐患，请勿使用此选项。更多选项来配置suexec介绍如下。\n这可以通过使用下列选项来创建一个单一的支持程序的静态链接二进制文件：\n\n--enable-static-ab\n建立一个静态链接的版本ab。\n--enable-static-checkgid\n建立一个静态链接的版本checkgid。\n--enable-static-htdbm\n建立一个静态链接的版本htdbm。\n--enable-static-htdigest\n建立一个静态链接的版本htdigest。\n--enable-static-htpasswd\n建立一个静态链接的版本htpasswd。\n--enable-static-logresolve\n建立一个静态链接的版本logresolve。\n--enable-static-rotatelogs\n建立一个静态链接的版本rotatelogs。\nsuexec 配置选项\n下列选项用于微调的行为suexec。参见配置和安装suEXEC的 进一步的信息。\n\n--with-suexec-bin\n这定义的路径suexec二进制文件。默认值是--sbindir（见安装目录微调）。\n--with-suexec-caller\n这定义允许呼叫的用户suexec。它应该是相同下，用户 httpd正常运行。\n--with-suexec-docroot\n这个定义下的目录树suexec允许访问的可执行文件。默认值是 --datadir/htdocs。\n--with-suexec-gidmin\n这个定义的最低GID成为目标用户 suexec。默认值是100。\n--with-suexec-logfile\n这个定义的文件名suexec​​日志文件。默认情况下，日志文件被命名为suexec_log，位于 --logfiledir。\n--with-suexec-safepath\n定义环境变量的值PATH由启动的进 ​​程进行设置suexec。默认值是/usr/local/bin:/usr/bin:/bin。\n--with-suexec-userdir\n此定义包含所有可执行文件的用户目录下的子目录suexec的访问是允许的。当你想使用此设置时必须 suexec使用特定用户目录在一起（如所提供的mod_userdir）。默认值是 public_html。\n--with-suexec-uidmin\n它定义为最低的UID允许为目标用户 suexec。默认值是100。\n--with-suexec-umask\n设置umask由启动的进 ​​程 suexec。它默认为您的系统设置。\n最佳\n环境变量\n\n有一些有用的环境变量覆盖所作出的选择 configure，或帮助它找到库和程序与非标准名称或位置。\n\nCC\n定义要用于编译的C编译器的命令。\nCFLAGS\n要使用编译设置C编译器的标志。\nCPP\n定义C预处理命令使用。\nCPPFLAGS\n将C / C ++预处理器的标志，例如 ，如果你在一个非标准目录头了includedir。-Iincludedir\nLDFLAGS\n设置连接器选项，例如，如果你在一个非标准目录库LIBDIR。-Llibdir\n\n\n```\n\n***示例：***\n这里是一个典型的例子编译Apache，安装树/ SW /包装/与特定的编译器和标志，加上两个额外的模块阿帕奇mod_ldap模块和mod_lua\n\n```\n$ CC=\"pgcc\" CFLAGS=\"-O2\" \\\n./configure --prefix=/sw/pkg/apache \\\n--enable-ldap=shared \\\n--enable-lua=shared\n\n```\n\n我们本次采用基本的默认设置 来进行安装\n```\n[root@iZ94m2e99jtZ ~]# cd httpd-2.4.23\n[root@iZ94m2e99jtZ httpd-2.4.23]# ./configure  --with-included-apr\n\n```\n\n### Build\n\n```\n[root@iZ94m2e99jtZ httpd-2.4.23]# make\n```\n### Install\n```\n[root@iZ94m2e99jtZ httpd-2.4.23]# make install\n···\nInstalling configuration files\nmkdir /usr/local/apache2/conf\nmkdir /usr/local/apache2/conf/extra\nmkdir /usr/local/apache2/conf/original\nmkdir /usr/local/apache2/conf/original/extra\nInstalling HTML documents\nmkdir /usr/local/apache2/htdocs\nInstalling error documents\nmkdir /usr/local/apache2/error\nInstalling icons\nmkdir /usr/local/apache2/icons\nmkdir /usr/local/apache2/logs\nInstalling CGIs\nmkdir /usr/local/apache2/cgi-bin\nInstalling header files\nInstalling build system files\nInstalling man pages and online manual\nmkdir /usr/local/apache2/man\nmkdir /usr/local/apache2/man/man1\nmkdir /usr/local/apache2/man/man8\nmkdir /usr/local/apache2/manual\n```\n\n### Customize（定制）\n\n接下来，我们可以通过在 /usr/local/apache2/conf 目录，编辑配置文件来自定义我们的Apache HTTP服务器。\n\n[配置指令快速参考索引][apache_conf_directive_index]\n[apache_conf_directive_index]:http://httpd.apache.org/docs/2.4/zh-cn/mod/directives.html\n\n### Testinh(测试)\n启动Apache服务器\n```\n[root@iZ94m2e99jtZ httpd-2.4.23]# /usr/local/apache2/bin/apachectl -k start\n\n[root@iZ94m2e99jtZ httpd-2.4.23]# ps aux | grep httpd\nroot     15386  0.0  0.2  70556  2188 ?        Ss   11:53   0:00 /usr/local/apache2/bin/httpd -k start\ndaemon   15387  0.0  0.4 359520  4260 ?        Sl   11:53   0:00 /usr/local/apache2/bin/httpd -k start\ndaemon   15388  0.0  0.4 359520  4260 ?        Sl   11:53   0:00 /usr/local/apache2/bin/httpd -k start\ndaemon   15389  0.0  0.4 359520  4256 ?        Sl   11:53   0:00 /usr/local/apache2/bin/httpd -k start\nroot     15472  0.0  0.0 112664   972 pts/0    S+   11:53   0:00 grep --color=auto httpd\n```\n浏览器访问：http://IP地址\n\n当出现『It works!』字样说明我们已经安装成功\n\n***注意*** 如果通过浏览器访问不到，可能是请求服务器防火墙给拦截了，所以我们需要在防火墙里将我们用到的80端口给放行。\n我以我当前Centos7 的系统为例，Centos7现在默认的防火墙是firewalld，Centos6以及6以前的版本则使用的是iptables，所以具体设置方法还请自己去搜索。\n```\n[root@iZ94m2e99jtZ ~]# firewall-cmd  --permanent --zone=public --add-port=80/tcp  #将80端口开放\nsuccess\n[root@iZ94m2e99jtZ ~]# firewall-cmd  --reload #重新加载防火墙配置\nsuccess\n```\n## 日常管理\n一般常见的管理方式有两种\n* 直接通过httpd命令来管理\n* 通过apachectl来管理\n***Tips*** apachetl其实一个是对httpd命令进行了封装sh脚本\n\n### 常用命令\n\n```\n#通过apachectl来管理\n[root@iZ94m2e99jtZ ~]# /usr/local/apache2/bin/apachectl -k start  #启动\n[root@iZ94m2e99jtZ ~]# /usr/local/apache2/bin/apachectl -k restart  #重启\n[root@iZ94m2e99jtZ ~]# /usr/local/apache2/bin/apachectl -k stop  #停止\n\n#直接通过httpd命令来管理\n[root@iZ94m2e99jtZ ~]# /usr/local/apache2/bin/httpd -k start|restart|graceful|graceful-stop|stop\n\n```\n\n### 具体参数\n```\nUsage: /usr/local/apache2/bin/httpd [-D name] [-d directory] [-f file]\n                                    [-C \"directive\"] [-c \"directive\"]\n                                    [-k start|restart|graceful|graceful-stop|stop]\n                                    [-v] [-V] [-h] [-l] [-L] [-t] [-T] [-S] [-X]\nOptions:\n  -D name            : define a name for use in <IfDefine name> directives\n  -d directory       : specify an alternate initial ServerRoot\n  -f file            : specify an alternate ServerConfigFile\n  -C \"directive\"     : process directive before reading config files\n  -c \"directive\"     : process directive after reading config files\n  -e level           : show startup errors of level (see LogLevel)\n  -E file            : log startup errors to file\n  -v                 : show version number\n  -V                 : show compile settings\n  -h                 : list available command line options (this page)\n  -l                 : list compiled in modules\n  -L                 : list available configuration directives\n  -t -D DUMP_VHOSTS  : show parsed vhost settings\n  -t -D DUMP_RUN_CFG : show parsed run settings\n  -S                 : a synonym for -t -D DUMP_VHOSTS -D DUMP_RUN_CFG\n  -t -D DUMP_MODULES : show all loaded modules\n  -M                 : a synonym for -t -D DUMP_MODULES\n  -t -D DUMP_INCLUDES: show all included configuration files\n  -t                 : run syntax check for config files\n  -T                 : start without DocumentRoot(s) check\n  -X                 : debug mode (only one worker, do not detach)\n\n```\n","slug":"Apache安装汇总","published":1,"updated":"2016-08-24T03:16:30.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"city8vnmw000ag29f4sba3c04","content":"<p>Apache是世界使用排名第一的Web服务器软件。它可以运行在几乎所有广泛使用的计算机平台上，由于其跨平台和安全性被广泛使用，是最流行的Web服务器端软件之一。<br>Apache的安装无外乎两种方式：</p>\n<ul>\n<li>二进制包安装</li>\n<li>源码包安装</li>\n</ul>\n<a id=\"more\"></a>\n<p>接下来我将会演示和记录通过源码包来安装apache到服务器。<br>环境：阿里云 Centos 7.2 64</p>\n<h2 id=\"安装前准备工作\"><a href=\"#安装前准备工作\" class=\"headerlink\" title=\"安装前准备工作\"></a>安装前准备工作</h2><p>通过源码包安装，我们需要将源码编译成计算机运行的二进制，因此我们需要编译工具。</p>\n<h3 id=\"gcc安装\"><a href=\"#gcc安装\" class=\"headerlink\" title=\"gcc安装\"></a>gcc安装</h3><p>GNU编译器套件（GNU Compiler Collection）包括C、C++、Objective-C、Fortran、Java、Ada和Go语言的前端，也包括了这些语言的库（如libstdc++、libgcj等等）。GCC的初衷是为GNU操作系统专门编写的一款编译器。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">[root@iZ28v78hcmrZ ~]# gcc</div><div class=\"line\">gcc: 致命错误：没有输入文件</div><div class=\"line\">编译中断。</div><div class=\"line\">[root@iZ28v78hcmrZ ~]# yum install gcc</div><div class=\"line\">···</div><div class=\"line\">作为依赖被升级:</div><div class=\"line\">  cpp.x86_64 0:4.8.5-4.el7            gcc-c++.x86_64 0:4.8.5-4.el7            gcc-gfortran.x86_64 0:4.8.5-4.el7    libgcc.x86_64 0:4.8.5-4.el7</div><div class=\"line\">  libgfortran.x86_64 0:4.8.5-4.el7    libgomp.x86_64 0:4.8.5-4.el7            libquadmath.x86_64 0:4.8.5-4.el7     libquadmath-devel.x86_64 0:4.8.5-4.el7</div><div class=\"line\">  libstdc++.x86_64 0:4.8.5-4.el7      libstdc++-devel.x86_64 0:4.8.5-4.el7</div><div class=\"line\"></div><div class=\"line\">完毕！</div><div class=\"line\">[root@iZ28v78hcmrZ ~]#</div></pre></td></tr></table></figure></p>\n<h3 id=\"APR、APR-UTIL-安装\"><a href=\"#APR、APR-UTIL-安装\" class=\"headerlink\" title=\"APR、APR-UTIL 安装\"></a>APR、APR-UTIL 安装</h3><p>APR （全称：Apache Portable Runtime）可移植运行时库、APR-UTIL（全称：Apache Portable Runtime Utility Library）可移植运行时工具库。它们的作用是使得对平台细节的处理进行下移。对于应用程序而言，它们根本就不需要考虑具体的平台，不管是Unix、Linux还是Window，应用程序执行的接口基本都是统一一致的。<br>APR的目标则是希望安全合并所有的能够合并的代码而不需要牺牲性能，为大多数平台提供所有的APR特性支持，包括Win32、OS/2、BeOS、Darwin、Linux等等。</p>\n<p>关于apr和apr-util，apache可以使用系统已经安装的版本，也可以不实用系统提供的版本。具体方法是分别下载apr和apr-util，解压到apache源码包中的srclib/apr和srclib/apr-util路径中（路径中不包含版本号等信息），在编译源码包之前的./configure 过程中使用 –with-included-apr 选项</p>\n<h3 id=\"PRCE-Perl-Compatible-Regular-Expressions-Library-Perl兼容的正则表达式库\"><a href=\"#PRCE-Perl-Compatible-Regular-Expressions-Library-Perl兼容的正则表达式库\" class=\"headerlink\" title=\"PRCE (Perl-Compatible Regular Expressions Library,Perl兼容的正则表达式库)\"></a>PRCE (Perl-Compatible Regular Expressions Library,Perl兼容的正则表达式库)</h3><p>PCRE(Perl Compatible Regular Expressions)是一个用C语言编写的正则表达式函数库。<br>PCRE被广泛使用在许多开源软件之中，最著名的莫过于Apache HTTP服务器和PHP脚本语言、R脚本语言，此外，正如从其名字所能看到的，PCRE也是perl语言的缺省正则库。</p>\n<p><a href=\"https://sourceforge.net/projects/pcre/files/\" target=\"_blank\" rel=\"external\">PCRE 下载网址</a></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div></pre></td><td class=\"code\"><pre><div class=\"line\">#解压</div><div class=\"line\">[root@iZ94m2e99jtZ ~]# tar -zxvf pcre-8.38.tar.gz</div><div class=\"line\">[root@iZ94m2e99jtZ ~]# cd pcre-8.38</div><div class=\"line\">[root@iZ94m2e99jtZ pcre-8.38]# ./configure</div><div class=\"line\">···</div><div class=\"line\">pcre-8.38 configuration summary:</div><div class=\"line\"></div><div class=\"line\">    Install prefix .................. : /usr/local</div><div class=\"line\">    C preprocessor .................. : gcc -E</div><div class=\"line\">    C compiler ...................... : gcc</div><div class=\"line\">    C++ preprocessor ................ : g++ -E</div><div class=\"line\">    C++ compiler .................... : g++</div><div class=\"line\">    Linker .......................... : /usr/bin/ld -m elf_x86_64</div><div class=\"line\">    C preprocessor flags ............ :</div><div class=\"line\">    C compiler flags ................ : -g -O2 -fvisibility=hidden</div><div class=\"line\">    C++ compiler flags .............. : -O2 -fvisibility=hidden -fvisibility-inlines-hidden</div><div class=\"line\">    Linker flags .................... :</div><div class=\"line\">    Extra libraries ................. :</div><div class=\"line\"></div><div class=\"line\">    Build 8 bit pcre library ........ : yes</div><div class=\"line\">    Build 16 bit pcre library ....... : no</div><div class=\"line\">    Build 32 bit pcre library ....... : no</div><div class=\"line\">    Build C++ library ............... : yes</div><div class=\"line\">    Enable JIT compiling support .... : no</div><div class=\"line\">    Enable UTF-8/16/32 support ...... : no</div><div class=\"line\">    Unicode properties .............. : no</div><div class=\"line\">    Newline char/sequence ........... : lf</div><div class=\"line\">    \\R matches only ANYCRLF ......... : no</div><div class=\"line\">    EBCDIC coding ................... : no</div><div class=\"line\">    EBCDIC code for NL .............. : n/a</div><div class=\"line\">    Rebuild char tables ............. : no</div><div class=\"line\">    Use stack recursion ............. : yes</div><div class=\"line\">    POSIX mem threshold ............. : 10</div><div class=\"line\">    Internal link size .............. : 2</div><div class=\"line\">    Nested parentheses limit ........ : 250</div><div class=\"line\">    Match limit ..................... : 10000000</div><div class=\"line\">    Match limit recursion ........... : MATCH_LIMIT</div><div class=\"line\">    Build shared libs ............... : yes</div><div class=\"line\">    Build static libs ............... : yes</div><div class=\"line\">    Use JIT in pcregrep ............. : no</div><div class=\"line\">    Buffer size for pcregrep ........ : 20480</div><div class=\"line\">    Link pcregrep with libz ......... : no</div><div class=\"line\">    Link pcregrep with libbz2 ....... : no</div><div class=\"line\">    Link pcretest with libedit ...... : no</div><div class=\"line\">    Link pcretest with libreadline .. : no</div><div class=\"line\">    Valgrind support ................ : no</div><div class=\"line\">    Code coverage ................... : no</div><div class=\"line\"></div><div class=\"line\">[root@iZ94m2e99jtZ pcre-8.38]# make &amp; make install</div></pre></td></tr></table></figure>\n<p><strong>Tips</strong><br>在编译pcre时可能会出现这样的：configure: error: You need a C++ compiler for C++ support.提示我们缺少一个C++ 的编译器，需要我们再安装一个C++的编译器。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">[root@iZ94m2e99jtZ pcre-8.38]# yum install gcc-c++</div></pre></td></tr></table></figure></p>\n<h3 id=\"下载\"><a href=\"#下载\" class=\"headerlink\" title=\"下载\"></a>下载</h3><p><a href=\"http://apr.apache.org/\" target=\"_blank\" rel=\"external\">apr、apr-uitl官网</a></p>\n<p><a href=\"http://mirrors.hust.edu.cn/apache//apr/apr-1.5.2.tar.gz\" target=\"_blank\" rel=\"external\">apr 下载地址</a></p>\n<p><a href=\"http://mirrors.hust.edu.cn/apache//apr/apr-util-1.5.4.tar.gz\" target=\"_blank\" rel=\"external\">apr-uitl 下载地址</a></p>\n<p><a href=\"http://mirrors.tuna.tsinghua.edu.cn/apache//httpd/httpd-2.4.23.tar.gz\" target=\"_blank\" rel=\"external\">apache 源码包</a></p>\n<p>下载、解压、将apr和apr-util分别复制到httpd-2.4.23/srclib/apr和httpd-2.4.23/srclib/apr-util中</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\">[root@iZ94m2e99jtZ ~]# wget http://mirrors.hust.edu.cn/apache//apr/apr-1.5.2.tar.gz</div><div class=\"line\">[root@iZ94m2e99jtZ ~]# wget  http://mirrors.hust.edu.cn/apache//apr/apr-util-1.5.4.tar.gz</div><div class=\"line\">[root@iZ94m2e99jtZ ~]# wget http://mirrors.tuna.tsinghua.edu.cn/apache//httpd/httpd-2.4.23.tar.gz</div><div class=\"line\"></div><div class=\"line\">[root@iZ94m2e99jtZ ~]# tar -zxvf apr-1.5.2.tar.gz</div><div class=\"line\">[root@iZ94m2e99jtZ ~]# tar -zxvf apr-util-1.5.4.tar.gz</div><div class=\"line\">[root@iZ94m2e99jtZ ~]# tar -zxvf httpd-2.4.23.tar.gz</div><div class=\"line\"></div><div class=\"line\">[root@iZ94m2e99jtZ ~]# ll</div><div class=\"line\">总用量 10088</div><div class=\"line\">drwxr-xr-x 27 1000  1000    4096 4月  25 2015 apr-1.5.2</div><div class=\"line\">-rw-r--r--  1 root root  1031613 4月  29 2015 apr-1.5.2.tar.gz</div><div class=\"line\">drwxr-xr-x 19 1000  1000    4096 9月  17 2014 apr-util-1.5.4</div><div class=\"line\">-rw-r--r--  1 root root   874044 9月  20 2014 apr-util-1.5.4.tar.gz</div><div class=\"line\">drwxr-xr-x 11  501 games    4096 7月   1 01:15 httpd-2.4.23</div><div class=\"line\">-rw-r--r--  1 root root  8406575 7月   5 03:50 httpd-2.4.23.tar.gz</div><div class=\"line\">[root@iZ94m2e99jtZ ~]#</div><div class=\"line\"></div><div class=\"line\">[root@iZ94m2e99jtZ ~]# cp -r  apr-1.5.2 httpd-2.4.23/srclib/apr</div><div class=\"line\">[root@iZ94m2e99jtZ ~]# cp -r  apr-util-1.5.4 httpd-2.4.23/srclib/apr-util</div></pre></td></tr></table></figure>\n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><h3 id=\"Configuring-the-source-tree\"><a href=\"#Configuring-the-source-tree\" class=\"headerlink\" title=\"Configuring the source tree\"></a>Configuring the source tree</h3><p>如果使用所有默认选项，只需键入的./configure即可，但一般我们根据自己的需求来修改一些配置。</p>\n<p>其中最重要的选项应该是apache的安装位置的配置项 –prefix ；<br>此外，我们可以指定哪些功能被启用和禁用模块要包含在Apache中。apache配备了一个广泛的默认包含的模块。它们将被编译为可以装载或在运行时卸载共享对象（的DSO）。您也可以选择通过选项–enable-模块=静态编译静态模块。</p>\n<p>额外的模块使用–enable模块选项，其中模块与除去mod_个串并转换为破折号任何下划线模块的名称启用。<br>同样，我们可以禁用与–disable模块选件模块。使用这些选项的时候，因为配置无法警告你，如果你指定的模块不存在要小心;它会简单地忽略选项。 此外，有时需要提供的配置脚本与你的编译器，库和头文件的位置额外信息。这是通过两种环境变量或命令行选项来配置完成。有关详细信息，请参考配置页面。或使用–help选项调用配置。</p>\n<p><a href=\"http://httpd.apache.org/docs/2.4/programs/configure.html#installationdirectories\" target=\"_blank\" rel=\"external\">Apache 官方配置说明</a></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div><div class=\"line\">143</div><div class=\"line\">144</div><div class=\"line\">145</div><div class=\"line\">146</div><div class=\"line\">147</div><div class=\"line\">148</div><div class=\"line\">149</div><div class=\"line\">150</div><div class=\"line\">151</div><div class=\"line\">152</div><div class=\"line\">153</div><div class=\"line\">154</div><div class=\"line\">155</div><div class=\"line\">156</div><div class=\"line\">157</div><div class=\"line\">158</div><div class=\"line\">159</div><div class=\"line\">160</div><div class=\"line\">161</div><div class=\"line\">162</div><div class=\"line\">163</div><div class=\"line\">164</div><div class=\"line\">165</div><div class=\"line\">166</div><div class=\"line\">167</div><div class=\"line\">168</div><div class=\"line\">169</div><div class=\"line\">170</div><div class=\"line\">171</div><div class=\"line\">172</div><div class=\"line\">173</div><div class=\"line\">174</div><div class=\"line\">175</div><div class=\"line\">176</div><div class=\"line\">177</div><div class=\"line\">178</div><div class=\"line\">179</div><div class=\"line\">180</div><div class=\"line\">181</div><div class=\"line\">182</div><div class=\"line\">183</div><div class=\"line\">184</div><div class=\"line\">185</div><div class=\"line\">186</div><div class=\"line\">187</div><div class=\"line\">188</div><div class=\"line\">189</div><div class=\"line\">190</div><div class=\"line\">191</div><div class=\"line\">192</div><div class=\"line\">193</div><div class=\"line\">194</div><div class=\"line\">195</div><div class=\"line\">196</div><div class=\"line\">197</div><div class=\"line\">198</div><div class=\"line\">199</div><div class=\"line\">200</div><div class=\"line\">201</div><div class=\"line\">202</div><div class=\"line\">203</div><div class=\"line\">204</div><div class=\"line\">205</div><div class=\"line\">206</div><div class=\"line\">207</div><div class=\"line\">208</div><div class=\"line\">209</div><div class=\"line\">210</div><div class=\"line\">211</div><div class=\"line\">212</div><div class=\"line\">213</div><div class=\"line\">214</div><div class=\"line\">215</div><div class=\"line\">216</div><div class=\"line\">217</div><div class=\"line\">218</div><div class=\"line\">219</div><div class=\"line\">220</div><div class=\"line\">221</div><div class=\"line\">222</div><div class=\"line\">223</div><div class=\"line\">224</div><div class=\"line\">225</div><div class=\"line\">226</div><div class=\"line\">227</div><div class=\"line\">228</div><div class=\"line\">229</div><div class=\"line\">230</div><div class=\"line\">231</div><div class=\"line\">232</div><div class=\"line\">233</div><div class=\"line\">234</div><div class=\"line\">235</div><div class=\"line\">236</div><div class=\"line\">237</div><div class=\"line\">238</div><div class=\"line\">239</div><div class=\"line\">240</div><div class=\"line\">241</div><div class=\"line\">242</div><div class=\"line\">243</div><div class=\"line\">244</div><div class=\"line\">245</div><div class=\"line\">246</div><div class=\"line\">247</div><div class=\"line\">248</div><div class=\"line\">249</div><div class=\"line\">250</div><div class=\"line\">251</div><div class=\"line\">252</div><div class=\"line\">253</div><div class=\"line\">254</div><div class=\"line\">255</div><div class=\"line\">256</div><div class=\"line\">257</div><div class=\"line\">258</div><div class=\"line\">259</div><div class=\"line\">260</div><div class=\"line\">261</div><div class=\"line\">262</div><div class=\"line\">263</div><div class=\"line\">264</div><div class=\"line\">265</div><div class=\"line\">266</div><div class=\"line\">267</div><div class=\"line\">268</div></pre></td><td class=\"code\"><pre><div class=\"line\">概要</div><div class=\"line\"></div><div class=\"line\">你应该叫configure从分布的根目录中的脚本。</div><div class=\"line\"></div><div class=\"line\">./configure [OPTION]... [VAR=VALUE]...</div><div class=\"line\"></div><div class=\"line\">要指定环境变量（例如CC， CFLAGS......），它们指定为 。请参见下面 的一些有用的变量的说明。VAR=VALUE</div><div class=\"line\"></div><div class=\"line\">最佳</div><div class=\"line\">选项</div><div class=\"line\"></div><div class=\"line\">配置选项</div><div class=\"line\">安装目录</div><div class=\"line\">系统类型</div><div class=\"line\">可选功能</div><div class=\"line\">支持程序的选项</div><div class=\"line\">配置选项</div><div class=\"line\">下列选项影响的行为 configure本身。</div><div class=\"line\"></div><div class=\"line\">-C</div><div class=\"line\">--config-cache</div><div class=\"line\">这是一个别名 --cache-file=config.cache</div><div class=\"line\">--cache-file=FILE</div><div class=\"line\">测试结果将在文件中缓存文件。此选项默认为禁用 ​​。</div><div class=\"line\">-h</div><div class=\"line\">--help [short|recursive]</div><div class=\"line\">输出的帮助和退出。随着说法short只是具体 ​​到这个包的选项将显示出来。参数 recursive显示所有包含包的简短帮助。</div><div class=\"line\">-n</div><div class=\"line\">--no-create</div><div class=\"line\">该configure脚本运行正常，但不创建输出文件。这是有用的生成makefile文件编译前检查测试结果。</div><div class=\"line\">-q</div><div class=\"line\">--quiet</div><div class=\"line\">不打印checking ...在配置过程的消息。</div><div class=\"line\">--srcdir=DIR</div><div class=\"line\">定义目录DIR是源文件目录。默认为所在目录configure的位置，或父目录。</div><div class=\"line\">--silent</div><div class=\"line\">与...一样 --quiet</div><div class=\"line\">-V</div><div class=\"line\">- 版</div><div class=\"line\">显示版权信息并退出。</div><div class=\"line\">安装目录</div><div class=\"line\">这些选项定义安装目录。安装树取决于所选的布局。</div><div class=\"line\"></div><div class=\"line\">--prefix=PREFIX</div><div class=\"line\">在安装结构无关的文件PREFIX。默认安装目录设置为 /usr/local/apache2。</div><div class=\"line\">--exec-prefix=EPREFIX</div><div class=\"line\">在安装体系相关的文件EPREFIX。默认安装目录设置为 PREFIX目录。</div><div class=\"line\">默认情况下，make install将安装所有文件 /usr/local/apache2/bin，/usr/local/apache2/lib 等等。您可以指定以外的安装前缀 /usr/local/apache2使用--prefix，例如--prefix=$HOME。</div><div class=\"line\"></div><div class=\"line\">定义一个目录布局</div><div class=\"line\">--enable-layout=LAYOUT</div><div class=\"line\">配置源代码和编译脚本的假设基础上的布局安装树布局。这使您可以分别指定为Apache HTTP服务器安装在每个类型的文件的位置。该config.layout 文件包含几个示例配置，你还可以创建下面的例子中你自己的自定义配置。该文件中的不同布局分为&lt;Layout FOO&gt;...&lt;/Layout&gt;部分，并通过名称简称为中FOO，默认布局Apache。</div><div class=\"line\">安装目录微调</div><div class=\"line\">为了更好地控制安装目录中，使用下面的选项。请注意，目录默认被设置 autoconf，并通过相应布局设置被覆盖。</div><div class=\"line\"></div><div class=\"line\">--bindir=DIR</div><div class=\"line\">在用户安装可执行文件DIR。用户可执行文件都支持这样的程序htpasswd， dbmmanage等等。这对于网站管理员有用。默认情况下DIR设置为 EPREFIX/bin。</div><div class=\"line\">--datadir=DIR</div><div class=\"line\">在安装只读体系结构无关的数据DIR。默认datadir设置为 PREFIX/share。此选项是提供 autoconf与当前未使用。</div><div class=\"line\">--includedir=DIR</div><div class=\"line\">在安装C头文件DIR。默认 includedir设置为 EPREFIX/include。</div><div class=\"line\">--infodir=DIR</div><div class=\"line\">在安装info文档DIR。默认infodir设置为 PREFIX/info。此选项当前未使用。</div><div class=\"line\">--libdir=DIR</div><div class=\"line\">在安装目标代码库DIR。默认 libdir设置为 EPREFIX/lib。</div><div class=\"line\">--libexecdir=DIR</div><div class=\"line\">在安装程序的可执行文件（例如，共享模块） DIR。默认libexecdir设置为 EPREFIX/modules。</div><div class=\"line\">--localstatedir=DIR</div><div class=\"line\">在安装修改的单机数据DIR。默认localstatedir设置为 PREFIX/var。此选项是提供 autoconf与当前未使用。</div><div class=\"line\">--mandir=DIR</div><div class=\"line\">在安装该男子文档DIR。默认 mandir设置为 EPREFIX/man。</div><div class=\"line\">--oldincludedir=DIR</div><div class=\"line\">在非GCC安装C头文件DIR。默认oldincludedir设置为 /usr/include。此选项是提供 autoconf与当前未使用。</div><div class=\"line\">--sbindir=DIR</div><div class=\"line\">在系统中安装管理员可执行DIR。这些都是服务器程序，如httpd， apachectl，suexec等，这些都需要运行在Apache HTTP服务器。默认 sbindir设置为 EPREFIX/sbin。</div><div class=\"line\">--sharedstatedir=DIR</div><div class=\"line\">在安装修改的架构无关的数据DIR。默认sharedstatedir设置为 PREFIX/com。此选项是提供 autoconf与当前未使用。</div><div class=\"line\">--sysconfdir=DIR</div><div class=\"line\">安装只读的单机数据，如服务器配置文件httpd.conf，mime.types等在 DIR。默认sysconfdir设置为 PREFIX/conf。</div><div class=\"line\">系统类型</div><div class=\"line\">这些选项用于交叉编译Apache HTTP服务器到另一个系统上运行。在正常的情况下，建立和运行在同一系统上的服务器时，不使用这些选项。</div><div class=\"line\"></div><div class=\"line\">--build=BUILD</div><div class=\"line\">定义系统类型上的工具正在建立该系统。它默认为脚本的结果 config.guess。</div><div class=\"line\">--host=HOST</div><div class=\"line\">定义系统类型的服务器将运行，系统的 HOST默认为BUILD。</div><div class=\"line\">--target=TARGET</div><div class=\"line\">配置构建编译器系统类型 目标。它默认为HOST。此选项被提供autoconf，而不是必要的Apache HTTP服务器。</div><div class=\"line\">可选功能</div><div class=\"line\">这些选项用于微调您的HTTP服务器将具备的功能。</div><div class=\"line\"></div><div class=\"line\">一般语法</div><div class=\"line\">一般来说，你可以使用下面的语法来启用或禁用功能：</div><div class=\"line\"></div><div class=\"line\">--disable-FEATURE</div><div class=\"line\">不包括特征。这是相同的 。--enable-FEATURE=no</div><div class=\"line\">--enable-FEATURE[=ARG]</div><div class=\"line\">包括特征。为默认值ARG 为yes。</div><div class=\"line\">--enable-MODULE=shared</div><div class=\"line\">相应的模块将被建设成为DSO模块。默认情况下启用的模块是动态链接的。</div><div class=\"line\">--enable-MODULE=static</div><div class=\"line\">相应的模块将被静态链接。</div><div class=\"line\">注意</div><div class=\"line\"></div><div class=\"line\">configure不会抱怨 ，即使富不存在，所以你需要仔细类型。 --enable-foo</div><div class=\"line\">选择模块编译</div><div class=\"line\">大多数模块由默认编译并已被明确或通过使用关键字禁用few （见--enable-modules，--enable-mods-shared 并且--enable-mods-static下面进一步解释）或--enable-modules=none作为一组被删除。</div><div class=\"line\"></div><div class=\"line\">其它模块默认不编译并已被明确或通过使用关键字启用all或 reallyall可用。</div><div class=\"line\"></div><div class=\"line\">要了解哪些模块是默认编译，运行 ./configure -h或./configure --help 下看Optional Features。假设你有兴趣mod_example1和 mod_example2，你看这个：</div><div class=\"line\"></div><div class=\"line\">可选功能：</div><div class=\"line\">  ...</div><div class=\"line\">  --disable-例1示例模块1</div><div class=\"line\">  --enable-例题例如模块2</div><div class=\"line\">  ...</div><div class=\"line\">然后mod_example1是默认启用的，你就可以使用--disable-example1不编译。 mod_example2默认情况下禁用，你就可以使用--enable-example2 编译它。</div><div class=\"line\"></div><div class=\"line\">多道处理模块</div><div class=\"line\">多道处理模块，或的MPM，实现了服务器的基本行为。单个MPM必须为了使服务器的功能被激活。出现在可用MPM列表 模块索引页。</div><div class=\"line\"></div><div class=\"line\">的MPM可以建成为数字存储示波器的动态加载或静态与服务器相连，并使用下列选项被启用：</div><div class=\"line\"></div><div class=\"line\">--with-mpm=MPM</div><div class=\"line\">选择适合您的服务器的默认MPM。如果MPM的构建为DSO模块（见--enable-mpms-shared），该指令选择将默认的配置文件中加载的MPM。否则，这个指令选择唯一可用的MPM，这将静态链接到服务器。</div><div class=\"line\"></div><div class=\"line\">如果省略此选项，默认的MPM为您的操作系统将被使用。</div><div class=\"line\"></div><div class=\"line\">--enable-mpms-shared=MPM-LIST</div><div class=\"line\">使动态共享模块的MPM的列表。这些模块之一必须动态使用加载 LoadModule指令。</div><div class=\"line\"></div><div class=\"line\">MPM-LIST是加了引号的MPM名称的空格分隔的列表。例如：</div><div class=\"line\"></div><div class=\"line\">--enable-mpms-shared=&apos;prefork worker&apos;</div><div class=\"line\">此外，您还可以使用特殊关键字all，这将选择支持在当前平台上动态加载所有的MPM和他们建立的DSO模块。例如：</div><div class=\"line\"></div><div class=\"line\">--enable-mpms-shared=all</div><div class=\"line\">第三方模块</div><div class=\"line\">要添加其他第三方模块使用下列选项：</div><div class=\"line\"></div><div class=\"line\">--with-module=module-type:module-file[, module-type:module-file]</div><div class=\"line\">添加一个或多个第三方的模块，以静态链接模块列表。该模块的源文件module-file 将在搜索 你的Apache HTTP服务器的源代码树的子目录。如果没有找到有它正在考虑模块文件是一个绝对文件路径，并尝试将源文件复制到 模块式子目录。如果子目录不存在，它将被创建并与标准的填充 。modules/module-typeconfigureMakefile.in</div><div class=\"line\"></div><div class=\"line\">此选项很有用添加由一个源文件小的外部组件。对于更复杂的模块，你应该阅读供应商的文档。</div><div class=\"line\"></div><div class=\"line\">注意</div><div class=\"line\"></div><div class=\"line\">如果你想建立一个DSO模块，而不是一个静态链接使用apxs。</div><div class=\"line\">累积和其他选项</div><div class=\"line\">--enable-maintainer-mode</div><div class=\"line\">打开调试和编译时警告，并加载所有编译的模块。</div><div class=\"line\">--enable-mods-shared=MODULE-LIST</div><div class=\"line\">定义启用并建立动态共享模块模块的列表。这意味着，这些模块必须通过使用动态加载 LoadModule指令。</div><div class=\"line\"></div><div class=\"line\">MODULE-LIST是加了引号的modulenames空格分隔列表。该模块名称没有给出前面mod_。例如：</div><div class=\"line\"></div><div class=\"line\">--enable-mods-shared=&apos;headers rewrite dav&apos;</div><div class=\"line\">此外，您还可以使用特殊的关键字reallyall， all，most和few。例如，</div><div class=\"line\"></div><div class=\"line\">--enable-mods-shared=most</div><div class=\"line\">将编译大多数模块，并将其建设成为DSO模块，</div><div class=\"line\"></div><div class=\"line\">--enable-mods-shared=few</div><div class=\"line\">将只编译一个非常基本的模块组。</div><div class=\"line\"></div><div class=\"line\">默认设置为most。</div><div class=\"line\"></div><div class=\"line\">在LoadModule对所选择的模块的指令将在主配置文件中自动生成。默认情况下，所有的指令都只是由一个配置要求或明确选择的模块被注释掉--enable-foo的说法。您可以更改设置启用或关闭加载的模块LoadModule的指令 httpd.conf。此外， LoadModule所有构建的模块的指令可通过配置选项被激活 --enable-load-all-modules。</div><div class=\"line\"></div><div class=\"line\">--enable-mods-static=MODULE-LIST</div><div class=\"line\">此选项的行为类似--enable-mods-shared，但在给定的模块静态链接。这意味着，这些模块将始终存在，同时运行httpd。他们不必被加载LoadModule。</div><div class=\"line\">--enable-modules=MODULE-LIST</div><div class=\"line\">此选项的行为等来--enable-mods-shared，并且还将动态地链接的给定模块。特殊关键字none禁用所有模块的版本。</div><div class=\"line\">--enable-v4-mapped</div><div class=\"line\">允许IPv6的套接字来处理IPv4连接。</div><div class=\"line\">--with-port=PORT</div><div class=\"line\">这定义上的端口httpd会听。生成配置文件时，该端口号用于 httpd.conf。默认值是80。</div><div class=\"line\">--with-program-name</div><div class=\"line\">定义一个替代的可执行文件名 ​​称。默认值是 httpd。</div><div class=\"line\">可选包</div><div class=\"line\">这些选项用于定义可选包。</div><div class=\"line\"></div><div class=\"line\">一般语法</div><div class=\"line\">一般来说，你可以使用下面的语法定义一个可选包：</div><div class=\"line\"></div><div class=\"line\">--with-PACKAGE[=ARG]</div><div class=\"line\">使用包PACKAGE。为默认值 ARG为yes。</div><div class=\"line\">--without-PACKAGE</div><div class=\"line\">不要使用包PACKAGE。这是相同的 。此选项所提供 ，但对于Apache HTTP服务器不是非常有用。--with-PACKAGE=noautoconf</div><div class=\"line\">特定软件包</div><div class=\"line\">--with-apr=DIR|FILE</div><div class=\"line\">在Apache可移植运行时（APR）是httpd的源代码分发的一部分，将自动与HTTP服务器共同建立。如果您想使用已安装的年利率，而不是你要告诉configure路径的 apr-config脚本。你可以设置绝对路径和名称或目录切换到安装四月apr-config必须在该目录或子目录中存在 bin。</div><div class=\"line\">--with-apr-util=DIR|FILE</div><div class=\"line\">Apache可移植运行实用程序（APU）是httpd的源代码分发的一部分，将自动与HTTP服务器共同建立。如果您想使用已安装的APU，而不是你要告诉configure路径的 apu-config脚本。你可以设置绝对路径和名称或目录切换到安装APU，apu-config必须在该目录或子目录中存在 bin。</div><div class=\"line\">--with-ssl=DIR</div><div class=\"line\">如果mod_ssl已启用configure 已安装的OpenSSL的搜索。您可以将目录路径设置为SSL / TLS工具包来代替。</div><div class=\"line\">--with-z=DIR</div><div class=\"line\">configure已安装的自动搜索 zlib，如果你的源配置需要一个库（例如，当mod_deflate使能）。您可以设置压缩库的目录路径来代替。</div><div class=\"line\">Apache HTTP服务器的一些特性，如 mod_authn_dbm和mod_rewrite的DBM RewriteMap使用简单的键/值对数据库信息的快速查询。SDBM被包括在APU，所以这个数据库是始终可用。如果您想使用其他数据库类型，可以使用下面的选项，以使它们：</div><div class=\"line\"></div><div class=\"line\">--with-gdbm[=path]</div><div class=\"line\">如果没有路径指定，configure将搜索在平时的搜索路径GNU DBM安装的包含文件和库。一个明确的 路径会导致configure在寻找 path/lib，并 path/include为相关的文件。最后，路径可以指定用冒号隔开具体包括和库路径。</div><div class=\"line\">--with-ndbm[=path]</div><div class=\"line\">像--with-gdbm，但搜索新DBM安装。</div><div class=\"line\">--with-berkeley-db[=path]</div><div class=\"line\">像--with-gdbm，但搜索一个Berkeley DB的安装。</div><div class=\"line\">注意</div><div class=\"line\"></div><div class=\"line\">由APU提供，并通过其配置脚本传递的DBM选项。他们利用确定已安装的APU时是无用的--with-apr-util。</div><div class=\"line\">您可以使用自己的HTTP服务器一起使用一个以上的DBM实现。该拨款DBM类型将每次运行时配置中配置。</div><div class=\"line\">支持程序的选项</div><div class=\"line\">--enable-static-support</div><div class=\"line\">构建支持二进制文件的静态链接的版本。这意味着，一个独立的可执行文件将集成所有必要的库来构建。否则，支持二进制文件默认情况下，动态链接。</div><div class=\"line\">--enable-suexec</div><div class=\"line\">使用此选项可启用suexec，它允许您设置UID和GID的催生过程。除非你了解你的服务器上运行的SUID二进制的所有安全隐患，请勿使用此选项。更多选项来配置suexec介绍如下。</div><div class=\"line\">这可以通过使用下列选项来创建一个单一的支持程序的静态链接二进制文件：</div><div class=\"line\"></div><div class=\"line\">--enable-static-ab</div><div class=\"line\">建立一个静态链接的版本ab。</div><div class=\"line\">--enable-static-checkgid</div><div class=\"line\">建立一个静态链接的版本checkgid。</div><div class=\"line\">--enable-static-htdbm</div><div class=\"line\">建立一个静态链接的版本htdbm。</div><div class=\"line\">--enable-static-htdigest</div><div class=\"line\">建立一个静态链接的版本htdigest。</div><div class=\"line\">--enable-static-htpasswd</div><div class=\"line\">建立一个静态链接的版本htpasswd。</div><div class=\"line\">--enable-static-logresolve</div><div class=\"line\">建立一个静态链接的版本logresolve。</div><div class=\"line\">--enable-static-rotatelogs</div><div class=\"line\">建立一个静态链接的版本rotatelogs。</div><div class=\"line\">suexec 配置选项</div><div class=\"line\">下列选项用于微调的行为suexec。参见配置和安装suEXEC的 进一步的信息。</div><div class=\"line\"></div><div class=\"line\">--with-suexec-bin</div><div class=\"line\">这定义的路径suexec二进制文件。默认值是--sbindir（见安装目录微调）。</div><div class=\"line\">--with-suexec-caller</div><div class=\"line\">这定义允许呼叫的用户suexec。它应该是相同下，用户 httpd正常运行。</div><div class=\"line\">--with-suexec-docroot</div><div class=\"line\">这个定义下的目录树suexec允许访问的可执行文件。默认值是 --datadir/htdocs。</div><div class=\"line\">--with-suexec-gidmin</div><div class=\"line\">这个定义的最低GID成为目标用户 suexec。默认值是100。</div><div class=\"line\">--with-suexec-logfile</div><div class=\"line\">这个定义的文件名suexec​​日志文件。默认情况下，日志文件被命名为suexec_log，位于 --logfiledir。</div><div class=\"line\">--with-suexec-safepath</div><div class=\"line\">定义环境变量的值PATH由启动的进 ​​程进行设置suexec。默认值是/usr/local/bin:/usr/bin:/bin。</div><div class=\"line\">--with-suexec-userdir</div><div class=\"line\">此定义包含所有可执行文件的用户目录下的子目录suexec的访问是允许的。当你想使用此设置时必须 suexec使用特定用户目录在一起（如所提供的mod_userdir）。默认值是 public_html。</div><div class=\"line\">--with-suexec-uidmin</div><div class=\"line\">它定义为最低的UID允许为目标用户 suexec。默认值是100。</div><div class=\"line\">--with-suexec-umask</div><div class=\"line\">设置umask由启动的进 ​​程 suexec。它默认为您的系统设置。</div><div class=\"line\">最佳</div><div class=\"line\">环境变量</div><div class=\"line\"></div><div class=\"line\">有一些有用的环境变量覆盖所作出的选择 configure，或帮助它找到库和程序与非标准名称或位置。</div><div class=\"line\"></div><div class=\"line\">CC</div><div class=\"line\">定义要用于编译的C编译器的命令。</div><div class=\"line\">CFLAGS</div><div class=\"line\">要使用编译设置C编译器的标志。</div><div class=\"line\">CPP</div><div class=\"line\">定义C预处理命令使用。</div><div class=\"line\">CPPFLAGS</div><div class=\"line\">将C / C ++预处理器的标志，例如 ，如果你在一个非标准目录头了includedir。-Iincludedir</div><div class=\"line\">LDFLAGS</div><div class=\"line\">设置连接器选项，例如，如果你在一个非标准目录库LIBDIR。-Llibdir</div></pre></td></tr></table></figure>\n<p><strong><em>示例：</em></strong><br>这里是一个典型的例子编译Apache，安装树/ SW /包装/与特定的编译器和标志，加上两个额外的模块阿帕奇mod_ldap模块和mod_lua</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ CC=&quot;pgcc&quot; CFLAGS=&quot;-O2&quot; \\</div><div class=\"line\">./configure --prefix=/sw/pkg/apache \\</div><div class=\"line\">--enable-ldap=shared \\</div><div class=\"line\">--enable-lua=shared</div></pre></td></tr></table></figure>\n<p>我们本次采用基本的默认设置 来进行安装<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">[root@iZ94m2e99jtZ ~]# cd httpd-2.4.23</div><div class=\"line\">[root@iZ94m2e99jtZ httpd-2.4.23]# ./configure  --with-included-apr</div></pre></td></tr></table></figure></p>\n<h3 id=\"Build\"><a href=\"#Build\" class=\"headerlink\" title=\"Build\"></a>Build</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">[root@iZ94m2e99jtZ httpd-2.4.23]# make</div></pre></td></tr></table></figure>\n<h3 id=\"Install\"><a href=\"#Install\" class=\"headerlink\" title=\"Install\"></a>Install</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\">[root@iZ94m2e99jtZ httpd-2.4.23]# make install</div><div class=\"line\">···</div><div class=\"line\">Installing configuration files</div><div class=\"line\">mkdir /usr/local/apache2/conf</div><div class=\"line\">mkdir /usr/local/apache2/conf/extra</div><div class=\"line\">mkdir /usr/local/apache2/conf/original</div><div class=\"line\">mkdir /usr/local/apache2/conf/original/extra</div><div class=\"line\">Installing HTML documents</div><div class=\"line\">mkdir /usr/local/apache2/htdocs</div><div class=\"line\">Installing error documents</div><div class=\"line\">mkdir /usr/local/apache2/error</div><div class=\"line\">Installing icons</div><div class=\"line\">mkdir /usr/local/apache2/icons</div><div class=\"line\">mkdir /usr/local/apache2/logs</div><div class=\"line\">Installing CGIs</div><div class=\"line\">mkdir /usr/local/apache2/cgi-bin</div><div class=\"line\">Installing header files</div><div class=\"line\">Installing build system files</div><div class=\"line\">Installing man pages and online manual</div><div class=\"line\">mkdir /usr/local/apache2/man</div><div class=\"line\">mkdir /usr/local/apache2/man/man1</div><div class=\"line\">mkdir /usr/local/apache2/man/man8</div><div class=\"line\">mkdir /usr/local/apache2/manual</div></pre></td></tr></table></figure>\n<h3 id=\"Customize（定制）\"><a href=\"#Customize（定制）\" class=\"headerlink\" title=\"Customize（定制）\"></a>Customize（定制）</h3><p>接下来，我们可以通过在 /usr/local/apache2/conf 目录，编辑配置文件来自定义我们的Apache HTTP服务器。</p>\n<p><a href=\"http://httpd.apache.org/docs/2.4/zh-cn/mod/directives.html\" target=\"_blank\" rel=\"external\">配置指令快速参考索引</a></p>\n<h3 id=\"Testinh-测试\"><a href=\"#Testinh-测试\" class=\"headerlink\" title=\"Testinh(测试)\"></a>Testinh(测试)</h3><p>启动Apache服务器<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">[root@iZ94m2e99jtZ httpd-2.4.23]# /usr/local/apache2/bin/apachectl -k start</div><div class=\"line\"></div><div class=\"line\">[root@iZ94m2e99jtZ httpd-2.4.23]# ps aux | grep httpd</div><div class=\"line\">root     15386  0.0  0.2  70556  2188 ?        Ss   11:53   0:00 /usr/local/apache2/bin/httpd -k start</div><div class=\"line\">daemon   15387  0.0  0.4 359520  4260 ?        Sl   11:53   0:00 /usr/local/apache2/bin/httpd -k start</div><div class=\"line\">daemon   15388  0.0  0.4 359520  4260 ?        Sl   11:53   0:00 /usr/local/apache2/bin/httpd -k start</div><div class=\"line\">daemon   15389  0.0  0.4 359520  4256 ?        Sl   11:53   0:00 /usr/local/apache2/bin/httpd -k start</div><div class=\"line\">root     15472  0.0  0.0 112664   972 pts/0    S+   11:53   0:00 grep --color=auto httpd</div></pre></td></tr></table></figure></p>\n<p>浏览器访问：<a href=\"http://IP地址\" target=\"_blank\" rel=\"external\">http://IP地址</a></p>\n<p>当出现『It works!』字样说明我们已经安装成功</p>\n<p><strong><em>注意</em></strong> 如果通过浏览器访问不到，可能是请求服务器防火墙给拦截了，所以我们需要在防火墙里将我们用到的80端口给放行。<br>我以我当前Centos7 的系统为例，Centos7现在默认的防火墙是firewalld，Centos6以及6以前的版本则使用的是iptables，所以具体设置方法还请自己去搜索。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">[root@iZ94m2e99jtZ ~]# firewall-cmd  --permanent --zone=public --add-port=80/tcp  #将80端口开放</div><div class=\"line\">success</div><div class=\"line\">[root@iZ94m2e99jtZ ~]# firewall-cmd  --reload #重新加载防火墙配置</div><div class=\"line\">success</div></pre></td></tr></table></figure></p>\n<h2 id=\"日常管理\"><a href=\"#日常管理\" class=\"headerlink\" title=\"日常管理\"></a>日常管理</h2><p>一般常见的管理方式有两种</p>\n<ul>\n<li>直接通过httpd命令来管理</li>\n<li>通过apachectl来管理<br><strong><em>Tips</em></strong> apachetl其实一个是对httpd命令进行了封装sh脚本</li>\n</ul>\n<h3 id=\"常用命令\"><a href=\"#常用命令\" class=\"headerlink\" title=\"常用命令\"></a>常用命令</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">#通过apachectl来管理</div><div class=\"line\">[root@iZ94m2e99jtZ ~]# /usr/local/apache2/bin/apachectl -k start  #启动</div><div class=\"line\">[root@iZ94m2e99jtZ ~]# /usr/local/apache2/bin/apachectl -k restart  #重启</div><div class=\"line\">[root@iZ94m2e99jtZ ~]# /usr/local/apache2/bin/apachectl -k stop  #停止</div><div class=\"line\"></div><div class=\"line\">#直接通过httpd命令来管理</div><div class=\"line\">[root@iZ94m2e99jtZ ~]# /usr/local/apache2/bin/httpd -k start|restart|graceful|graceful-stop|stop</div></pre></td></tr></table></figure>\n<h3 id=\"具体参数\"><a href=\"#具体参数\" class=\"headerlink\" title=\"具体参数\"></a>具体参数</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\">Usage: /usr/local/apache2/bin/httpd [-D name] [-d directory] [-f file]</div><div class=\"line\">                                    [-C &quot;directive&quot;] [-c &quot;directive&quot;]</div><div class=\"line\">                                    [-k start|restart|graceful|graceful-stop|stop]</div><div class=\"line\">                                    [-v] [-V] [-h] [-l] [-L] [-t] [-T] [-S] [-X]</div><div class=\"line\">Options:</div><div class=\"line\">  -D name            : define a name for use in &lt;IfDefine name&gt; directives</div><div class=\"line\">  -d directory       : specify an alternate initial ServerRoot</div><div class=\"line\">  -f file            : specify an alternate ServerConfigFile</div><div class=\"line\">  -C &quot;directive&quot;     : process directive before reading config files</div><div class=\"line\">  -c &quot;directive&quot;     : process directive after reading config files</div><div class=\"line\">  -e level           : show startup errors of level (see LogLevel)</div><div class=\"line\">  -E file            : log startup errors to file</div><div class=\"line\">  -v                 : show version number</div><div class=\"line\">  -V                 : show compile settings</div><div class=\"line\">  -h                 : list available command line options (this page)</div><div class=\"line\">  -l                 : list compiled in modules</div><div class=\"line\">  -L                 : list available configuration directives</div><div class=\"line\">  -t -D DUMP_VHOSTS  : show parsed vhost settings</div><div class=\"line\">  -t -D DUMP_RUN_CFG : show parsed run settings</div><div class=\"line\">  -S                 : a synonym for -t -D DUMP_VHOSTS -D DUMP_RUN_CFG</div><div class=\"line\">  -t -D DUMP_MODULES : show all loaded modules</div><div class=\"line\">  -M                 : a synonym for -t -D DUMP_MODULES</div><div class=\"line\">  -t -D DUMP_INCLUDES: show all included configuration files</div><div class=\"line\">  -t                 : run syntax check for config files</div><div class=\"line\">  -T                 : start without DocumentRoot(s) check</div><div class=\"line\">  -X                 : debug mode (only one worker, do not detach)</div></pre></td></tr></table></figure>\n","excerpt":"<p>Apache是世界使用排名第一的Web服务器软件。它可以运行在几乎所有广泛使用的计算机平台上，由于其跨平台和安全性被广泛使用，是最流行的Web服务器端软件之一。<br>Apache的安装无外乎两种方式：</p>\n<ul>\n<li>二进制包安装</li>\n<li>源码包安装</li>\n</ul>","more":"<p>接下来我将会演示和记录通过源码包来安装apache到服务器。<br>环境：阿里云 Centos 7.2 64</p>\n<h2 id=\"安装前准备工作\"><a href=\"#安装前准备工作\" class=\"headerlink\" title=\"安装前准备工作\"></a>安装前准备工作</h2><p>通过源码包安装，我们需要将源码编译成计算机运行的二进制，因此我们需要编译工具。</p>\n<h3 id=\"gcc安装\"><a href=\"#gcc安装\" class=\"headerlink\" title=\"gcc安装\"></a>gcc安装</h3><p>GNU编译器套件（GNU Compiler Collection）包括C、C++、Objective-C、Fortran、Java、Ada和Go语言的前端，也包括了这些语言的库（如libstdc++、libgcj等等）。GCC的初衷是为GNU操作系统专门编写的一款编译器。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">[root@iZ28v78hcmrZ ~]# gcc</div><div class=\"line\">gcc: 致命错误：没有输入文件</div><div class=\"line\">编译中断。</div><div class=\"line\">[root@iZ28v78hcmrZ ~]# yum install gcc</div><div class=\"line\">···</div><div class=\"line\">作为依赖被升级:</div><div class=\"line\">  cpp.x86_64 0:4.8.5-4.el7            gcc-c++.x86_64 0:4.8.5-4.el7            gcc-gfortran.x86_64 0:4.8.5-4.el7    libgcc.x86_64 0:4.8.5-4.el7</div><div class=\"line\">  libgfortran.x86_64 0:4.8.5-4.el7    libgomp.x86_64 0:4.8.5-4.el7            libquadmath.x86_64 0:4.8.5-4.el7     libquadmath-devel.x86_64 0:4.8.5-4.el7</div><div class=\"line\">  libstdc++.x86_64 0:4.8.5-4.el7      libstdc++-devel.x86_64 0:4.8.5-4.el7</div><div class=\"line\"></div><div class=\"line\">完毕！</div><div class=\"line\">[root@iZ28v78hcmrZ ~]#</div></pre></td></tr></table></figure></p>\n<h3 id=\"APR、APR-UTIL-安装\"><a href=\"#APR、APR-UTIL-安装\" class=\"headerlink\" title=\"APR、APR-UTIL 安装\"></a>APR、APR-UTIL 安装</h3><p>APR （全称：Apache Portable Runtime）可移植运行时库、APR-UTIL（全称：Apache Portable Runtime Utility Library）可移植运行时工具库。它们的作用是使得对平台细节的处理进行下移。对于应用程序而言，它们根本就不需要考虑具体的平台，不管是Unix、Linux还是Window，应用程序执行的接口基本都是统一一致的。<br>APR的目标则是希望安全合并所有的能够合并的代码而不需要牺牲性能，为大多数平台提供所有的APR特性支持，包括Win32、OS/2、BeOS、Darwin、Linux等等。</p>\n<p>关于apr和apr-util，apache可以使用系统已经安装的版本，也可以不实用系统提供的版本。具体方法是分别下载apr和apr-util，解压到apache源码包中的srclib/apr和srclib/apr-util路径中（路径中不包含版本号等信息），在编译源码包之前的./configure 过程中使用 –with-included-apr 选项</p>\n<h3 id=\"PRCE-Perl-Compatible-Regular-Expressions-Library-Perl兼容的正则表达式库\"><a href=\"#PRCE-Perl-Compatible-Regular-Expressions-Library-Perl兼容的正则表达式库\" class=\"headerlink\" title=\"PRCE (Perl-Compatible Regular Expressions Library,Perl兼容的正则表达式库)\"></a>PRCE (Perl-Compatible Regular Expressions Library,Perl兼容的正则表达式库)</h3><p>PCRE(Perl Compatible Regular Expressions)是一个用C语言编写的正则表达式函数库。<br>PCRE被广泛使用在许多开源软件之中，最著名的莫过于Apache HTTP服务器和PHP脚本语言、R脚本语言，此外，正如从其名字所能看到的，PCRE也是perl语言的缺省正则库。</p>\n<p><a href=\"https://sourceforge.net/projects/pcre/files/\">PCRE 下载网址</a></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div></pre></td><td class=\"code\"><pre><div class=\"line\">#解压</div><div class=\"line\">[root@iZ94m2e99jtZ ~]# tar -zxvf pcre-8.38.tar.gz</div><div class=\"line\">[root@iZ94m2e99jtZ ~]# cd pcre-8.38</div><div class=\"line\">[root@iZ94m2e99jtZ pcre-8.38]# ./configure</div><div class=\"line\">···</div><div class=\"line\">pcre-8.38 configuration summary:</div><div class=\"line\"></div><div class=\"line\">    Install prefix .................. : /usr/local</div><div class=\"line\">    C preprocessor .................. : gcc -E</div><div class=\"line\">    C compiler ...................... : gcc</div><div class=\"line\">    C++ preprocessor ................ : g++ -E</div><div class=\"line\">    C++ compiler .................... : g++</div><div class=\"line\">    Linker .......................... : /usr/bin/ld -m elf_x86_64</div><div class=\"line\">    C preprocessor flags ............ :</div><div class=\"line\">    C compiler flags ................ : -g -O2 -fvisibility=hidden</div><div class=\"line\">    C++ compiler flags .............. : -O2 -fvisibility=hidden -fvisibility-inlines-hidden</div><div class=\"line\">    Linker flags .................... :</div><div class=\"line\">    Extra libraries ................. :</div><div class=\"line\"></div><div class=\"line\">    Build 8 bit pcre library ........ : yes</div><div class=\"line\">    Build 16 bit pcre library ....... : no</div><div class=\"line\">    Build 32 bit pcre library ....... : no</div><div class=\"line\">    Build C++ library ............... : yes</div><div class=\"line\">    Enable JIT compiling support .... : no</div><div class=\"line\">    Enable UTF-8/16/32 support ...... : no</div><div class=\"line\">    Unicode properties .............. : no</div><div class=\"line\">    Newline char/sequence ........... : lf</div><div class=\"line\">    \\R matches only ANYCRLF ......... : no</div><div class=\"line\">    EBCDIC coding ................... : no</div><div class=\"line\">    EBCDIC code for NL .............. : n/a</div><div class=\"line\">    Rebuild char tables ............. : no</div><div class=\"line\">    Use stack recursion ............. : yes</div><div class=\"line\">    POSIX mem threshold ............. : 10</div><div class=\"line\">    Internal link size .............. : 2</div><div class=\"line\">    Nested parentheses limit ........ : 250</div><div class=\"line\">    Match limit ..................... : 10000000</div><div class=\"line\">    Match limit recursion ........... : MATCH_LIMIT</div><div class=\"line\">    Build shared libs ............... : yes</div><div class=\"line\">    Build static libs ............... : yes</div><div class=\"line\">    Use JIT in pcregrep ............. : no</div><div class=\"line\">    Buffer size for pcregrep ........ : 20480</div><div class=\"line\">    Link pcregrep with libz ......... : no</div><div class=\"line\">    Link pcregrep with libbz2 ....... : no</div><div class=\"line\">    Link pcretest with libedit ...... : no</div><div class=\"line\">    Link pcretest with libreadline .. : no</div><div class=\"line\">    Valgrind support ................ : no</div><div class=\"line\">    Code coverage ................... : no</div><div class=\"line\"></div><div class=\"line\">[root@iZ94m2e99jtZ pcre-8.38]# make &amp; make install</div></pre></td></tr></table></figure>\n<p><strong>Tips</strong><br>在编译pcre时可能会出现这样的：configure: error: You need a C++ compiler for C++ support.提示我们缺少一个C++ 的编译器，需要我们再安装一个C++的编译器。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">[root@iZ94m2e99jtZ pcre-8.38]# yum install gcc-c++</div></pre></td></tr></table></figure></p>\n<h3 id=\"下载\"><a href=\"#下载\" class=\"headerlink\" title=\"下载\"></a>下载</h3><p><a href=\"http://apr.apache.org/\">apr、apr-uitl官网</a></p>\n<p><a href=\"http://mirrors.hust.edu.cn/apache//apr/apr-1.5.2.tar.gz\">apr 下载地址</a></p>\n<p><a href=\"http://mirrors.hust.edu.cn/apache//apr/apr-util-1.5.4.tar.gz\">apr-uitl 下载地址</a></p>\n<p><a href=\"http://mirrors.tuna.tsinghua.edu.cn/apache//httpd/httpd-2.4.23.tar.gz\">apache 源码包</a></p>\n<p>下载、解压、将apr和apr-util分别复制到httpd-2.4.23/srclib/apr和httpd-2.4.23/srclib/apr-util中</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\">[root@iZ94m2e99jtZ ~]# wget http://mirrors.hust.edu.cn/apache//apr/apr-1.5.2.tar.gz</div><div class=\"line\">[root@iZ94m2e99jtZ ~]# wget  http://mirrors.hust.edu.cn/apache//apr/apr-util-1.5.4.tar.gz</div><div class=\"line\">[root@iZ94m2e99jtZ ~]# wget http://mirrors.tuna.tsinghua.edu.cn/apache//httpd/httpd-2.4.23.tar.gz</div><div class=\"line\"></div><div class=\"line\">[root@iZ94m2e99jtZ ~]# tar -zxvf apr-1.5.2.tar.gz</div><div class=\"line\">[root@iZ94m2e99jtZ ~]# tar -zxvf apr-util-1.5.4.tar.gz</div><div class=\"line\">[root@iZ94m2e99jtZ ~]# tar -zxvf httpd-2.4.23.tar.gz</div><div class=\"line\"></div><div class=\"line\">[root@iZ94m2e99jtZ ~]# ll</div><div class=\"line\">总用量 10088</div><div class=\"line\">drwxr-xr-x 27 1000  1000    4096 4月  25 2015 apr-1.5.2</div><div class=\"line\">-rw-r--r--  1 root root  1031613 4月  29 2015 apr-1.5.2.tar.gz</div><div class=\"line\">drwxr-xr-x 19 1000  1000    4096 9月  17 2014 apr-util-1.5.4</div><div class=\"line\">-rw-r--r--  1 root root   874044 9月  20 2014 apr-util-1.5.4.tar.gz</div><div class=\"line\">drwxr-xr-x 11  501 games    4096 7月   1 01:15 httpd-2.4.23</div><div class=\"line\">-rw-r--r--  1 root root  8406575 7月   5 03:50 httpd-2.4.23.tar.gz</div><div class=\"line\">[root@iZ94m2e99jtZ ~]#</div><div class=\"line\"></div><div class=\"line\">[root@iZ94m2e99jtZ ~]# cp -r  apr-1.5.2 httpd-2.4.23/srclib/apr</div><div class=\"line\">[root@iZ94m2e99jtZ ~]# cp -r  apr-util-1.5.4 httpd-2.4.23/srclib/apr-util</div></pre></td></tr></table></figure>\n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><h3 id=\"Configuring-the-source-tree\"><a href=\"#Configuring-the-source-tree\" class=\"headerlink\" title=\"Configuring the source tree\"></a>Configuring the source tree</h3><p>如果使用所有默认选项，只需键入的./configure即可，但一般我们根据自己的需求来修改一些配置。</p>\n<p>其中最重要的选项应该是apache的安装位置的配置项 –prefix ；<br>此外，我们可以指定哪些功能被启用和禁用模块要包含在Apache中。apache配备了一个广泛的默认包含的模块。它们将被编译为可以装载或在运行时卸载共享对象（的DSO）。您也可以选择通过选项–enable-模块=静态编译静态模块。</p>\n<p>额外的模块使用–enable模块选项，其中模块与除去mod_个串并转换为破折号任何下划线模块的名称启用。<br>同样，我们可以禁用与–disable模块选件模块。使用这些选项的时候，因为配置无法警告你，如果你指定的模块不存在要小心;它会简单地忽略选项。 此外，有时需要提供的配置脚本与你的编译器，库和头文件的位置额外信息。这是通过两种环境变量或命令行选项来配置完成。有关详细信息，请参考配置页面。或使用–help选项调用配置。</p>\n<p><a href=\"http://httpd.apache.org/docs/2.4/programs/configure.html#installationdirectories\">Apache 官方配置说明</a></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div><div class=\"line\">143</div><div class=\"line\">144</div><div class=\"line\">145</div><div class=\"line\">146</div><div class=\"line\">147</div><div class=\"line\">148</div><div class=\"line\">149</div><div class=\"line\">150</div><div class=\"line\">151</div><div class=\"line\">152</div><div class=\"line\">153</div><div class=\"line\">154</div><div class=\"line\">155</div><div class=\"line\">156</div><div class=\"line\">157</div><div class=\"line\">158</div><div class=\"line\">159</div><div class=\"line\">160</div><div class=\"line\">161</div><div class=\"line\">162</div><div class=\"line\">163</div><div class=\"line\">164</div><div class=\"line\">165</div><div class=\"line\">166</div><div class=\"line\">167</div><div class=\"line\">168</div><div class=\"line\">169</div><div class=\"line\">170</div><div class=\"line\">171</div><div class=\"line\">172</div><div class=\"line\">173</div><div class=\"line\">174</div><div class=\"line\">175</div><div class=\"line\">176</div><div class=\"line\">177</div><div class=\"line\">178</div><div class=\"line\">179</div><div class=\"line\">180</div><div class=\"line\">181</div><div class=\"line\">182</div><div class=\"line\">183</div><div class=\"line\">184</div><div class=\"line\">185</div><div class=\"line\">186</div><div class=\"line\">187</div><div class=\"line\">188</div><div class=\"line\">189</div><div class=\"line\">190</div><div class=\"line\">191</div><div class=\"line\">192</div><div class=\"line\">193</div><div class=\"line\">194</div><div class=\"line\">195</div><div class=\"line\">196</div><div class=\"line\">197</div><div class=\"line\">198</div><div class=\"line\">199</div><div class=\"line\">200</div><div class=\"line\">201</div><div class=\"line\">202</div><div class=\"line\">203</div><div class=\"line\">204</div><div class=\"line\">205</div><div class=\"line\">206</div><div class=\"line\">207</div><div class=\"line\">208</div><div class=\"line\">209</div><div class=\"line\">210</div><div class=\"line\">211</div><div class=\"line\">212</div><div class=\"line\">213</div><div class=\"line\">214</div><div class=\"line\">215</div><div class=\"line\">216</div><div class=\"line\">217</div><div class=\"line\">218</div><div class=\"line\">219</div><div class=\"line\">220</div><div class=\"line\">221</div><div class=\"line\">222</div><div class=\"line\">223</div><div class=\"line\">224</div><div class=\"line\">225</div><div class=\"line\">226</div><div class=\"line\">227</div><div class=\"line\">228</div><div class=\"line\">229</div><div class=\"line\">230</div><div class=\"line\">231</div><div class=\"line\">232</div><div class=\"line\">233</div><div class=\"line\">234</div><div class=\"line\">235</div><div class=\"line\">236</div><div class=\"line\">237</div><div class=\"line\">238</div><div class=\"line\">239</div><div class=\"line\">240</div><div class=\"line\">241</div><div class=\"line\">242</div><div class=\"line\">243</div><div class=\"line\">244</div><div class=\"line\">245</div><div class=\"line\">246</div><div class=\"line\">247</div><div class=\"line\">248</div><div class=\"line\">249</div><div class=\"line\">250</div><div class=\"line\">251</div><div class=\"line\">252</div><div class=\"line\">253</div><div class=\"line\">254</div><div class=\"line\">255</div><div class=\"line\">256</div><div class=\"line\">257</div><div class=\"line\">258</div><div class=\"line\">259</div><div class=\"line\">260</div><div class=\"line\">261</div><div class=\"line\">262</div><div class=\"line\">263</div><div class=\"line\">264</div><div class=\"line\">265</div><div class=\"line\">266</div><div class=\"line\">267</div><div class=\"line\">268</div></pre></td><td class=\"code\"><pre><div class=\"line\">概要</div><div class=\"line\"></div><div class=\"line\">你应该叫configure从分布的根目录中的脚本。</div><div class=\"line\"></div><div class=\"line\">./configure [OPTION]... [VAR=VALUE]...</div><div class=\"line\"></div><div class=\"line\">要指定环境变量（例如CC， CFLAGS......），它们指定为 。请参见下面 的一些有用的变量的说明。VAR=VALUE</div><div class=\"line\"></div><div class=\"line\">最佳</div><div class=\"line\">选项</div><div class=\"line\"></div><div class=\"line\">配置选项</div><div class=\"line\">安装目录</div><div class=\"line\">系统类型</div><div class=\"line\">可选功能</div><div class=\"line\">支持程序的选项</div><div class=\"line\">配置选项</div><div class=\"line\">下列选项影响的行为 configure本身。</div><div class=\"line\"></div><div class=\"line\">-C</div><div class=\"line\">--config-cache</div><div class=\"line\">这是一个别名 --cache-file=config.cache</div><div class=\"line\">--cache-file=FILE</div><div class=\"line\">测试结果将在文件中缓存文件。此选项默认为禁用 ​​。</div><div class=\"line\">-h</div><div class=\"line\">--help [short|recursive]</div><div class=\"line\">输出的帮助和退出。随着说法short只是具体 ​​到这个包的选项将显示出来。参数 recursive显示所有包含包的简短帮助。</div><div class=\"line\">-n</div><div class=\"line\">--no-create</div><div class=\"line\">该configure脚本运行正常，但不创建输出文件。这是有用的生成makefile文件编译前检查测试结果。</div><div class=\"line\">-q</div><div class=\"line\">--quiet</div><div class=\"line\">不打印checking ...在配置过程的消息。</div><div class=\"line\">--srcdir=DIR</div><div class=\"line\">定义目录DIR是源文件目录。默认为所在目录configure的位置，或父目录。</div><div class=\"line\">--silent</div><div class=\"line\">与...一样 --quiet</div><div class=\"line\">-V</div><div class=\"line\">- 版</div><div class=\"line\">显示版权信息并退出。</div><div class=\"line\">安装目录</div><div class=\"line\">这些选项定义安装目录。安装树取决于所选的布局。</div><div class=\"line\"></div><div class=\"line\">--prefix=PREFIX</div><div class=\"line\">在安装结构无关的文件PREFIX。默认安装目录设置为 /usr/local/apache2。</div><div class=\"line\">--exec-prefix=EPREFIX</div><div class=\"line\">在安装体系相关的文件EPREFIX。默认安装目录设置为 PREFIX目录。</div><div class=\"line\">默认情况下，make install将安装所有文件 /usr/local/apache2/bin，/usr/local/apache2/lib 等等。您可以指定以外的安装前缀 /usr/local/apache2使用--prefix，例如--prefix=$HOME。</div><div class=\"line\"></div><div class=\"line\">定义一个目录布局</div><div class=\"line\">--enable-layout=LAYOUT</div><div class=\"line\">配置源代码和编译脚本的假设基础上的布局安装树布局。这使您可以分别指定为Apache HTTP服务器安装在每个类型的文件的位置。该config.layout 文件包含几个示例配置，你还可以创建下面的例子中你自己的自定义配置。该文件中的不同布局分为&lt;Layout FOO&gt;...&lt;/Layout&gt;部分，并通过名称简称为中FOO，默认布局Apache。</div><div class=\"line\">安装目录微调</div><div class=\"line\">为了更好地控制安装目录中，使用下面的选项。请注意，目录默认被设置 autoconf，并通过相应布局设置被覆盖。</div><div class=\"line\"></div><div class=\"line\">--bindir=DIR</div><div class=\"line\">在用户安装可执行文件DIR。用户可执行文件都支持这样的程序htpasswd， dbmmanage等等。这对于网站管理员有用。默认情况下DIR设置为 EPREFIX/bin。</div><div class=\"line\">--datadir=DIR</div><div class=\"line\">在安装只读体系结构无关的数据DIR。默认datadir设置为 PREFIX/share。此选项是提供 autoconf与当前未使用。</div><div class=\"line\">--includedir=DIR</div><div class=\"line\">在安装C头文件DIR。默认 includedir设置为 EPREFIX/include。</div><div class=\"line\">--infodir=DIR</div><div class=\"line\">在安装info文档DIR。默认infodir设置为 PREFIX/info。此选项当前未使用。</div><div class=\"line\">--libdir=DIR</div><div class=\"line\">在安装目标代码库DIR。默认 libdir设置为 EPREFIX/lib。</div><div class=\"line\">--libexecdir=DIR</div><div class=\"line\">在安装程序的可执行文件（例如，共享模块） DIR。默认libexecdir设置为 EPREFIX/modules。</div><div class=\"line\">--localstatedir=DIR</div><div class=\"line\">在安装修改的单机数据DIR。默认localstatedir设置为 PREFIX/var。此选项是提供 autoconf与当前未使用。</div><div class=\"line\">--mandir=DIR</div><div class=\"line\">在安装该男子文档DIR。默认 mandir设置为 EPREFIX/man。</div><div class=\"line\">--oldincludedir=DIR</div><div class=\"line\">在非GCC安装C头文件DIR。默认oldincludedir设置为 /usr/include。此选项是提供 autoconf与当前未使用。</div><div class=\"line\">--sbindir=DIR</div><div class=\"line\">在系统中安装管理员可执行DIR。这些都是服务器程序，如httpd， apachectl，suexec等，这些都需要运行在Apache HTTP服务器。默认 sbindir设置为 EPREFIX/sbin。</div><div class=\"line\">--sharedstatedir=DIR</div><div class=\"line\">在安装修改的架构无关的数据DIR。默认sharedstatedir设置为 PREFIX/com。此选项是提供 autoconf与当前未使用。</div><div class=\"line\">--sysconfdir=DIR</div><div class=\"line\">安装只读的单机数据，如服务器配置文件httpd.conf，mime.types等在 DIR。默认sysconfdir设置为 PREFIX/conf。</div><div class=\"line\">系统类型</div><div class=\"line\">这些选项用于交叉编译Apache HTTP服务器到另一个系统上运行。在正常的情况下，建立和运行在同一系统上的服务器时，不使用这些选项。</div><div class=\"line\"></div><div class=\"line\">--build=BUILD</div><div class=\"line\">定义系统类型上的工具正在建立该系统。它默认为脚本的结果 config.guess。</div><div class=\"line\">--host=HOST</div><div class=\"line\">定义系统类型的服务器将运行，系统的 HOST默认为BUILD。</div><div class=\"line\">--target=TARGET</div><div class=\"line\">配置构建编译器系统类型 目标。它默认为HOST。此选项被提供autoconf，而不是必要的Apache HTTP服务器。</div><div class=\"line\">可选功能</div><div class=\"line\">这些选项用于微调您的HTTP服务器将具备的功能。</div><div class=\"line\"></div><div class=\"line\">一般语法</div><div class=\"line\">一般来说，你可以使用下面的语法来启用或禁用功能：</div><div class=\"line\"></div><div class=\"line\">--disable-FEATURE</div><div class=\"line\">不包括特征。这是相同的 。--enable-FEATURE=no</div><div class=\"line\">--enable-FEATURE[=ARG]</div><div class=\"line\">包括特征。为默认值ARG 为yes。</div><div class=\"line\">--enable-MODULE=shared</div><div class=\"line\">相应的模块将被建设成为DSO模块。默认情况下启用的模块是动态链接的。</div><div class=\"line\">--enable-MODULE=static</div><div class=\"line\">相应的模块将被静态链接。</div><div class=\"line\">注意</div><div class=\"line\"></div><div class=\"line\">configure不会抱怨 ，即使富不存在，所以你需要仔细类型。 --enable-foo</div><div class=\"line\">选择模块编译</div><div class=\"line\">大多数模块由默认编译并已被明确或通过使用关键字禁用few （见--enable-modules，--enable-mods-shared 并且--enable-mods-static下面进一步解释）或--enable-modules=none作为一组被删除。</div><div class=\"line\"></div><div class=\"line\">其它模块默认不编译并已被明确或通过使用关键字启用all或 reallyall可用。</div><div class=\"line\"></div><div class=\"line\">要了解哪些模块是默认编译，运行 ./configure -h或./configure --help 下看Optional Features。假设你有兴趣mod_example1和 mod_example2，你看这个：</div><div class=\"line\"></div><div class=\"line\">可选功能：</div><div class=\"line\">  ...</div><div class=\"line\">  --disable-例1示例模块1</div><div class=\"line\">  --enable-例题例如模块2</div><div class=\"line\">  ...</div><div class=\"line\">然后mod_example1是默认启用的，你就可以使用--disable-example1不编译。 mod_example2默认情况下禁用，你就可以使用--enable-example2 编译它。</div><div class=\"line\"></div><div class=\"line\">多道处理模块</div><div class=\"line\">多道处理模块，或的MPM，实现了服务器的基本行为。单个MPM必须为了使服务器的功能被激活。出现在可用MPM列表 模块索引页。</div><div class=\"line\"></div><div class=\"line\">的MPM可以建成为数字存储示波器的动态加载或静态与服务器相连，并使用下列选项被启用：</div><div class=\"line\"></div><div class=\"line\">--with-mpm=MPM</div><div class=\"line\">选择适合您的服务器的默认MPM。如果MPM的构建为DSO模块（见--enable-mpms-shared），该指令选择将默认的配置文件中加载的MPM。否则，这个指令选择唯一可用的MPM，这将静态链接到服务器。</div><div class=\"line\"></div><div class=\"line\">如果省略此选项，默认的MPM为您的操作系统将被使用。</div><div class=\"line\"></div><div class=\"line\">--enable-mpms-shared=MPM-LIST</div><div class=\"line\">使动态共享模块的MPM的列表。这些模块之一必须动态使用加载 LoadModule指令。</div><div class=\"line\"></div><div class=\"line\">MPM-LIST是加了引号的MPM名称的空格分隔的列表。例如：</div><div class=\"line\"></div><div class=\"line\">--enable-mpms-shared=&apos;prefork worker&apos;</div><div class=\"line\">此外，您还可以使用特殊关键字all，这将选择支持在当前平台上动态加载所有的MPM和他们建立的DSO模块。例如：</div><div class=\"line\"></div><div class=\"line\">--enable-mpms-shared=all</div><div class=\"line\">第三方模块</div><div class=\"line\">要添加其他第三方模块使用下列选项：</div><div class=\"line\"></div><div class=\"line\">--with-module=module-type:module-file[, module-type:module-file]</div><div class=\"line\">添加一个或多个第三方的模块，以静态链接模块列表。该模块的源文件module-file 将在搜索 你的Apache HTTP服务器的源代码树的子目录。如果没有找到有它正在考虑模块文件是一个绝对文件路径，并尝试将源文件复制到 模块式子目录。如果子目录不存在，它将被创建并与标准的填充 。modules/module-typeconfigureMakefile.in</div><div class=\"line\"></div><div class=\"line\">此选项很有用添加由一个源文件小的外部组件。对于更复杂的模块，你应该阅读供应商的文档。</div><div class=\"line\"></div><div class=\"line\">注意</div><div class=\"line\"></div><div class=\"line\">如果你想建立一个DSO模块，而不是一个静态链接使用apxs。</div><div class=\"line\">累积和其他选项</div><div class=\"line\">--enable-maintainer-mode</div><div class=\"line\">打开调试和编译时警告，并加载所有编译的模块。</div><div class=\"line\">--enable-mods-shared=MODULE-LIST</div><div class=\"line\">定义启用并建立动态共享模块模块的列表。这意味着，这些模块必须通过使用动态加载 LoadModule指令。</div><div class=\"line\"></div><div class=\"line\">MODULE-LIST是加了引号的modulenames空格分隔列表。该模块名称没有给出前面mod_。例如：</div><div class=\"line\"></div><div class=\"line\">--enable-mods-shared=&apos;headers rewrite dav&apos;</div><div class=\"line\">此外，您还可以使用特殊的关键字reallyall， all，most和few。例如，</div><div class=\"line\"></div><div class=\"line\">--enable-mods-shared=most</div><div class=\"line\">将编译大多数模块，并将其建设成为DSO模块，</div><div class=\"line\"></div><div class=\"line\">--enable-mods-shared=few</div><div class=\"line\">将只编译一个非常基本的模块组。</div><div class=\"line\"></div><div class=\"line\">默认设置为most。</div><div class=\"line\"></div><div class=\"line\">在LoadModule对所选择的模块的指令将在主配置文件中自动生成。默认情况下，所有的指令都只是由一个配置要求或明确选择的模块被注释掉--enable-foo的说法。您可以更改设置启用或关闭加载的模块LoadModule的指令 httpd.conf。此外， LoadModule所有构建的模块的指令可通过配置选项被激活 --enable-load-all-modules。</div><div class=\"line\"></div><div class=\"line\">--enable-mods-static=MODULE-LIST</div><div class=\"line\">此选项的行为类似--enable-mods-shared，但在给定的模块静态链接。这意味着，这些模块将始终存在，同时运行httpd。他们不必被加载LoadModule。</div><div class=\"line\">--enable-modules=MODULE-LIST</div><div class=\"line\">此选项的行为等来--enable-mods-shared，并且还将动态地链接的给定模块。特殊关键字none禁用所有模块的版本。</div><div class=\"line\">--enable-v4-mapped</div><div class=\"line\">允许IPv6的套接字来处理IPv4连接。</div><div class=\"line\">--with-port=PORT</div><div class=\"line\">这定义上的端口httpd会听。生成配置文件时，该端口号用于 httpd.conf。默认值是80。</div><div class=\"line\">--with-program-name</div><div class=\"line\">定义一个替代的可执行文件名 ​​称。默认值是 httpd。</div><div class=\"line\">可选包</div><div class=\"line\">这些选项用于定义可选包。</div><div class=\"line\"></div><div class=\"line\">一般语法</div><div class=\"line\">一般来说，你可以使用下面的语法定义一个可选包：</div><div class=\"line\"></div><div class=\"line\">--with-PACKAGE[=ARG]</div><div class=\"line\">使用包PACKAGE。为默认值 ARG为yes。</div><div class=\"line\">--without-PACKAGE</div><div class=\"line\">不要使用包PACKAGE。这是相同的 。此选项所提供 ，但对于Apache HTTP服务器不是非常有用。--with-PACKAGE=noautoconf</div><div class=\"line\">特定软件包</div><div class=\"line\">--with-apr=DIR|FILE</div><div class=\"line\">在Apache可移植运行时（APR）是httpd的源代码分发的一部分，将自动与HTTP服务器共同建立。如果您想使用已安装的年利率，而不是你要告诉configure路径的 apr-config脚本。你可以设置绝对路径和名称或目录切换到安装四月apr-config必须在该目录或子目录中存在 bin。</div><div class=\"line\">--with-apr-util=DIR|FILE</div><div class=\"line\">Apache可移植运行实用程序（APU）是httpd的源代码分发的一部分，将自动与HTTP服务器共同建立。如果您想使用已安装的APU，而不是你要告诉configure路径的 apu-config脚本。你可以设置绝对路径和名称或目录切换到安装APU，apu-config必须在该目录或子目录中存在 bin。</div><div class=\"line\">--with-ssl=DIR</div><div class=\"line\">如果mod_ssl已启用configure 已安装的OpenSSL的搜索。您可以将目录路径设置为SSL / TLS工具包来代替。</div><div class=\"line\">--with-z=DIR</div><div class=\"line\">configure已安装的自动搜索 zlib，如果你的源配置需要一个库（例如，当mod_deflate使能）。您可以设置压缩库的目录路径来代替。</div><div class=\"line\">Apache HTTP服务器的一些特性，如 mod_authn_dbm和mod_rewrite的DBM RewriteMap使用简单的键/值对数据库信息的快速查询。SDBM被包括在APU，所以这个数据库是始终可用。如果您想使用其他数据库类型，可以使用下面的选项，以使它们：</div><div class=\"line\"></div><div class=\"line\">--with-gdbm[=path]</div><div class=\"line\">如果没有路径指定，configure将搜索在平时的搜索路径GNU DBM安装的包含文件和库。一个明确的 路径会导致configure在寻找 path/lib，并 path/include为相关的文件。最后，路径可以指定用冒号隔开具体包括和库路径。</div><div class=\"line\">--with-ndbm[=path]</div><div class=\"line\">像--with-gdbm，但搜索新DBM安装。</div><div class=\"line\">--with-berkeley-db[=path]</div><div class=\"line\">像--with-gdbm，但搜索一个Berkeley DB的安装。</div><div class=\"line\">注意</div><div class=\"line\"></div><div class=\"line\">由APU提供，并通过其配置脚本传递的DBM选项。他们利用确定已安装的APU时是无用的--with-apr-util。</div><div class=\"line\">您可以使用自己的HTTP服务器一起使用一个以上的DBM实现。该拨款DBM类型将每次运行时配置中配置。</div><div class=\"line\">支持程序的选项</div><div class=\"line\">--enable-static-support</div><div class=\"line\">构建支持二进制文件的静态链接的版本。这意味着，一个独立的可执行文件将集成所有必要的库来构建。否则，支持二进制文件默认情况下，动态链接。</div><div class=\"line\">--enable-suexec</div><div class=\"line\">使用此选项可启用suexec，它允许您设置UID和GID的催生过程。除非你了解你的服务器上运行的SUID二进制的所有安全隐患，请勿使用此选项。更多选项来配置suexec介绍如下。</div><div class=\"line\">这可以通过使用下列选项来创建一个单一的支持程序的静态链接二进制文件：</div><div class=\"line\"></div><div class=\"line\">--enable-static-ab</div><div class=\"line\">建立一个静态链接的版本ab。</div><div class=\"line\">--enable-static-checkgid</div><div class=\"line\">建立一个静态链接的版本checkgid。</div><div class=\"line\">--enable-static-htdbm</div><div class=\"line\">建立一个静态链接的版本htdbm。</div><div class=\"line\">--enable-static-htdigest</div><div class=\"line\">建立一个静态链接的版本htdigest。</div><div class=\"line\">--enable-static-htpasswd</div><div class=\"line\">建立一个静态链接的版本htpasswd。</div><div class=\"line\">--enable-static-logresolve</div><div class=\"line\">建立一个静态链接的版本logresolve。</div><div class=\"line\">--enable-static-rotatelogs</div><div class=\"line\">建立一个静态链接的版本rotatelogs。</div><div class=\"line\">suexec 配置选项</div><div class=\"line\">下列选项用于微调的行为suexec。参见配置和安装suEXEC的 进一步的信息。</div><div class=\"line\"></div><div class=\"line\">--with-suexec-bin</div><div class=\"line\">这定义的路径suexec二进制文件。默认值是--sbindir（见安装目录微调）。</div><div class=\"line\">--with-suexec-caller</div><div class=\"line\">这定义允许呼叫的用户suexec。它应该是相同下，用户 httpd正常运行。</div><div class=\"line\">--with-suexec-docroot</div><div class=\"line\">这个定义下的目录树suexec允许访问的可执行文件。默认值是 --datadir/htdocs。</div><div class=\"line\">--with-suexec-gidmin</div><div class=\"line\">这个定义的最低GID成为目标用户 suexec。默认值是100。</div><div class=\"line\">--with-suexec-logfile</div><div class=\"line\">这个定义的文件名suexec​​日志文件。默认情况下，日志文件被命名为suexec_log，位于 --logfiledir。</div><div class=\"line\">--with-suexec-safepath</div><div class=\"line\">定义环境变量的值PATH由启动的进 ​​程进行设置suexec。默认值是/usr/local/bin:/usr/bin:/bin。</div><div class=\"line\">--with-suexec-userdir</div><div class=\"line\">此定义包含所有可执行文件的用户目录下的子目录suexec的访问是允许的。当你想使用此设置时必须 suexec使用特定用户目录在一起（如所提供的mod_userdir）。默认值是 public_html。</div><div class=\"line\">--with-suexec-uidmin</div><div class=\"line\">它定义为最低的UID允许为目标用户 suexec。默认值是100。</div><div class=\"line\">--with-suexec-umask</div><div class=\"line\">设置umask由启动的进 ​​程 suexec。它默认为您的系统设置。</div><div class=\"line\">最佳</div><div class=\"line\">环境变量</div><div class=\"line\"></div><div class=\"line\">有一些有用的环境变量覆盖所作出的选择 configure，或帮助它找到库和程序与非标准名称或位置。</div><div class=\"line\"></div><div class=\"line\">CC</div><div class=\"line\">定义要用于编译的C编译器的命令。</div><div class=\"line\">CFLAGS</div><div class=\"line\">要使用编译设置C编译器的标志。</div><div class=\"line\">CPP</div><div class=\"line\">定义C预处理命令使用。</div><div class=\"line\">CPPFLAGS</div><div class=\"line\">将C / C ++预处理器的标志，例如 ，如果你在一个非标准目录头了includedir。-Iincludedir</div><div class=\"line\">LDFLAGS</div><div class=\"line\">设置连接器选项，例如，如果你在一个非标准目录库LIBDIR。-Llibdir</div></pre></td></tr></table></figure>\n<p><strong><em>示例：</em></strong><br>这里是一个典型的例子编译Apache，安装树/ SW /包装/与特定的编译器和标志，加上两个额外的模块阿帕奇mod_ldap模块和mod_lua</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ CC=&quot;pgcc&quot; CFLAGS=&quot;-O2&quot; \\</div><div class=\"line\">./configure --prefix=/sw/pkg/apache \\</div><div class=\"line\">--enable-ldap=shared \\</div><div class=\"line\">--enable-lua=shared</div></pre></td></tr></table></figure>\n<p>我们本次采用基本的默认设置 来进行安装<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">[root@iZ94m2e99jtZ ~]# cd httpd-2.4.23</div><div class=\"line\">[root@iZ94m2e99jtZ httpd-2.4.23]# ./configure  --with-included-apr</div></pre></td></tr></table></figure></p>\n<h3 id=\"Build\"><a href=\"#Build\" class=\"headerlink\" title=\"Build\"></a>Build</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">[root@iZ94m2e99jtZ httpd-2.4.23]# make</div></pre></td></tr></table></figure>\n<h3 id=\"Install\"><a href=\"#Install\" class=\"headerlink\" title=\"Install\"></a>Install</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\">[root@iZ94m2e99jtZ httpd-2.4.23]# make install</div><div class=\"line\">···</div><div class=\"line\">Installing configuration files</div><div class=\"line\">mkdir /usr/local/apache2/conf</div><div class=\"line\">mkdir /usr/local/apache2/conf/extra</div><div class=\"line\">mkdir /usr/local/apache2/conf/original</div><div class=\"line\">mkdir /usr/local/apache2/conf/original/extra</div><div class=\"line\">Installing HTML documents</div><div class=\"line\">mkdir /usr/local/apache2/htdocs</div><div class=\"line\">Installing error documents</div><div class=\"line\">mkdir /usr/local/apache2/error</div><div class=\"line\">Installing icons</div><div class=\"line\">mkdir /usr/local/apache2/icons</div><div class=\"line\">mkdir /usr/local/apache2/logs</div><div class=\"line\">Installing CGIs</div><div class=\"line\">mkdir /usr/local/apache2/cgi-bin</div><div class=\"line\">Installing header files</div><div class=\"line\">Installing build system files</div><div class=\"line\">Installing man pages and online manual</div><div class=\"line\">mkdir /usr/local/apache2/man</div><div class=\"line\">mkdir /usr/local/apache2/man/man1</div><div class=\"line\">mkdir /usr/local/apache2/man/man8</div><div class=\"line\">mkdir /usr/local/apache2/manual</div></pre></td></tr></table></figure>\n<h3 id=\"Customize（定制）\"><a href=\"#Customize（定制）\" class=\"headerlink\" title=\"Customize（定制）\"></a>Customize（定制）</h3><p>接下来，我们可以通过在 /usr/local/apache2/conf 目录，编辑配置文件来自定义我们的Apache HTTP服务器。</p>\n<p><a href=\"http://httpd.apache.org/docs/2.4/zh-cn/mod/directives.html\">配置指令快速参考索引</a></p>\n<h3 id=\"Testinh-测试\"><a href=\"#Testinh-测试\" class=\"headerlink\" title=\"Testinh(测试)\"></a>Testinh(测试)</h3><p>启动Apache服务器<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">[root@iZ94m2e99jtZ httpd-2.4.23]# /usr/local/apache2/bin/apachectl -k start</div><div class=\"line\"></div><div class=\"line\">[root@iZ94m2e99jtZ httpd-2.4.23]# ps aux | grep httpd</div><div class=\"line\">root     15386  0.0  0.2  70556  2188 ?        Ss   11:53   0:00 /usr/local/apache2/bin/httpd -k start</div><div class=\"line\">daemon   15387  0.0  0.4 359520  4260 ?        Sl   11:53   0:00 /usr/local/apache2/bin/httpd -k start</div><div class=\"line\">daemon   15388  0.0  0.4 359520  4260 ?        Sl   11:53   0:00 /usr/local/apache2/bin/httpd -k start</div><div class=\"line\">daemon   15389  0.0  0.4 359520  4256 ?        Sl   11:53   0:00 /usr/local/apache2/bin/httpd -k start</div><div class=\"line\">root     15472  0.0  0.0 112664   972 pts/0    S+   11:53   0:00 grep --color=auto httpd</div></pre></td></tr></table></figure></p>\n<p>浏览器访问：<a href=\"http://IP地址\">http://IP地址</a></p>\n<p>当出现『It works!』字样说明我们已经安装成功</p>\n<p><strong><em>注意</em></strong> 如果通过浏览器访问不到，可能是请求服务器防火墙给拦截了，所以我们需要在防火墙里将我们用到的80端口给放行。<br>我以我当前Centos7 的系统为例，Centos7现在默认的防火墙是firewalld，Centos6以及6以前的版本则使用的是iptables，所以具体设置方法还请自己去搜索。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">[root@iZ94m2e99jtZ ~]# firewall-cmd  --permanent --zone=public --add-port=80/tcp  #将80端口开放</div><div class=\"line\">success</div><div class=\"line\">[root@iZ94m2e99jtZ ~]# firewall-cmd  --reload #重新加载防火墙配置</div><div class=\"line\">success</div></pre></td></tr></table></figure></p>\n<h2 id=\"日常管理\"><a href=\"#日常管理\" class=\"headerlink\" title=\"日常管理\"></a>日常管理</h2><p>一般常见的管理方式有两种</p>\n<ul>\n<li>直接通过httpd命令来管理</li>\n<li>通过apachectl来管理<br><strong><em>Tips</em></strong> apachetl其实一个是对httpd命令进行了封装sh脚本</li>\n</ul>\n<h3 id=\"常用命令\"><a href=\"#常用命令\" class=\"headerlink\" title=\"常用命令\"></a>常用命令</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">#通过apachectl来管理</div><div class=\"line\">[root@iZ94m2e99jtZ ~]# /usr/local/apache2/bin/apachectl -k start  #启动</div><div class=\"line\">[root@iZ94m2e99jtZ ~]# /usr/local/apache2/bin/apachectl -k restart  #重启</div><div class=\"line\">[root@iZ94m2e99jtZ ~]# /usr/local/apache2/bin/apachectl -k stop  #停止</div><div class=\"line\"></div><div class=\"line\">#直接通过httpd命令来管理</div><div class=\"line\">[root@iZ94m2e99jtZ ~]# /usr/local/apache2/bin/httpd -k start|restart|graceful|graceful-stop|stop</div></pre></td></tr></table></figure>\n<h3 id=\"具体参数\"><a href=\"#具体参数\" class=\"headerlink\" title=\"具体参数\"></a>具体参数</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\">Usage: /usr/local/apache2/bin/httpd [-D name] [-d directory] [-f file]</div><div class=\"line\">                                    [-C &quot;directive&quot;] [-c &quot;directive&quot;]</div><div class=\"line\">                                    [-k start|restart|graceful|graceful-stop|stop]</div><div class=\"line\">                                    [-v] [-V] [-h] [-l] [-L] [-t] [-T] [-S] [-X]</div><div class=\"line\">Options:</div><div class=\"line\">  -D name            : define a name for use in &lt;IfDefine name&gt; directives</div><div class=\"line\">  -d directory       : specify an alternate initial ServerRoot</div><div class=\"line\">  -f file            : specify an alternate ServerConfigFile</div><div class=\"line\">  -C &quot;directive&quot;     : process directive before reading config files</div><div class=\"line\">  -c &quot;directive&quot;     : process directive after reading config files</div><div class=\"line\">  -e level           : show startup errors of level (see LogLevel)</div><div class=\"line\">  -E file            : log startup errors to file</div><div class=\"line\">  -v                 : show version number</div><div class=\"line\">  -V                 : show compile settings</div><div class=\"line\">  -h                 : list available command line options (this page)</div><div class=\"line\">  -l                 : list compiled in modules</div><div class=\"line\">  -L                 : list available configuration directives</div><div class=\"line\">  -t -D DUMP_VHOSTS  : show parsed vhost settings</div><div class=\"line\">  -t -D DUMP_RUN_CFG : show parsed run settings</div><div class=\"line\">  -S                 : a synonym for -t -D DUMP_VHOSTS -D DUMP_RUN_CFG</div><div class=\"line\">  -t -D DUMP_MODULES : show all loaded modules</div><div class=\"line\">  -M                 : a synonym for -t -D DUMP_MODULES</div><div class=\"line\">  -t -D DUMP_INCLUDES: show all included configuration files</div><div class=\"line\">  -t                 : run syntax check for config files</div><div class=\"line\">  -T                 : start without DocumentRoot(s) check</div><div class=\"line\">  -X                 : debug mode (only one worker, do not detach)</div></pre></td></tr></table></figure>"},{"title":"GIT使用小结","date":"2016-09-21T15:30:00.000Z","ctime":"2016-09-21T15:30:00.000Z","utime":"2016-09-23T15:30:00.000Z","modif_times":2,"_content":"\n## 概念\n在使用之前先明确两个概念。\n- 工作区（working directory）\n> 我们创建的文件夹\n\n- 版本库（Repository）\n> 一个工作区中隐藏的目录（.git）这个目录不算工作区\n版本库\n>   - stage，暂存区\n>   - master，分支\n>\n> 日常我们进行git add操作，是将文件修改添加到了暂存区，而进行git commit操作，则是将暂存区中的修改提交至当前分支。\n\n<!-- more -->\n\n## 常用操作\n1. 创建项目文件夹\n```bash\nmkdir demo\n```\n2. 进入项目目录\n```\ncd demo\ngit init（将该目录变成git可以管理的仓库（repository））\n```\n初始化后，该目录下会产生一个.git 的隐藏文件夹。\n\n3. 添加文件到仓库\n```\ngit add 文件\n```\n添加一个文件到仓库。\n其实，该操作作用是将文件添加至Stage暂存区。\n\n  常用操作\n```bash\ngit add .   #将所有文件添加至 stage\ngit add -u  #将所有文件添加至 stage ，同时将工作区中删除的文件也从仓库中删除。\n```\n4. git commit  提交到版本库\n```\ngit commit -m \"write readme file\"\n```\n-m 为对本次版本提交的说明\n\n5. git status 查看当前版本库状态\n```bash\n$ mkdir git_test\n$ cd git_test\n$ git init\n# Initialized empty Git repository in /Users/zhimiao/WWW/hexo/git_test/.git/\n$ ll -a\n# total 0\n# drwxr-xr-x   3 zhimiao  staff   102B  9 23 10:25 .\n# drwxr-xr-x   6 zhimiao  staff   204B  9 23 10:25 ..\n# drwxr-xr-x  10 zhimiao  staff   340B  9 23 10:25 .git\n$ git status\n# On branch master\n# Initial commit\n# nothing to commit (create/copy files and use \"git add\" to track)\n```\n  - git将所有的文件分为3类：已追踪的，被忽略的，和未追踪的。\n    - 已追踪的（tracked）\n > 已追踪的文件是指已经在版本库中的文件，或者是已暂存到索引中的文件。即，一个文件通过执行git add，就会被添加到暂存区，该文件就变成一个已追踪的文件。\n    - 被忽略的（ignored）\n  > 被忽略的文件是指在版本库中被明确声明为不可见或者被忽略。一般通过在工作区新建 `.gitignore` 文件来来声明。\n  > ```\n> $ cat .gitignore\n.DS_Store\nThumbs.db\ndb.json\n*.log\nnode_modules/\npublic/\n.deploy*/\n> ```\n    - 未追踪的（untracked）\n  > 未追踪的文件是指那些不在前两类中的文件。git把工作目录下的所有文件当成一个集合，减去已经追踪的文件和忽略的文件，剩下的部分就作为未追踪的文件。\n\n  ```\n$ echo \"git test\" > readme.md\n$ git status\n# On branch master\n# Initial commit\n# Untracked files:\n#   (use \"git add <file>...\" to include in what will be committed)\n# \treadme.md\n# nothing added to commit but untracked files present (use \"git add\" to track)\n$ git add readme.md\n$ git status\n# On branch master\n# Initial commit\n# Changes to be committed:\n#   (use \"git rm --cached <file>...\" to unstage)\n# \tnew file:   readme.md\n$ git commit -m \"add readme file\"\n# [master (root-commit) 81c90a0] add readme file\n#  1 file changed, 1 insertion(+)\n#  create mode 100644 readme.md\n$ git status\n#  On branch master\n#  nothing to commit, working directory clean\n```\n\n6. git diff 显示当前尚未缓存的改动记录\n```\n$ echo \"Second Line \" >> readme.md\n$ git diff\n# diff --git a/readme.md b/readme.md\n# index f6edd6e..a1e649c 100644\n# --- a/readme.md\n# +++ b/readme.md\n# @@ -1 +1,2 @@\n#  git test\n# +add new Line\n```\n在开头，原始文件被『--』符号标记起来，新文件被用『+++』标记。@@ 之间表示两个不同文件版本的上下文行，以减号（-）开始的行表示从原始文件删除该行以得到新文件。相反，以加号（+）开始的行表示从原始文件中添加该行以产生新文件，而以空格开始的行则表示两个版本都有的行。\n\n7. git log 记录每次commit的信息\n```\n$ git add readme.md\n$ git commit -m \"update\"\n$ echo \"third Lines;\" >> readme.md\n$ git add readme.md\n$ git commit -m \"update third\"\n$ git log\n# commit 2ba4ebfe3ccef91f0d34646f5a0e50e339ee6f7a\n# Author: weizhimiao <532615323@qq.com>\n# Date:   Fri Sep 23 11:21:24 2016 +0800\n#\n#     update third\n#\n# commit ed0fe412477c8ac828e450cbc319c06ac8db0445\n# Author: weizhimiao <532615323@qq.com>\n# Date:   Fri Sep 23 11:19:34 2016 +0800\n#\n#     update\n#\n# commit 81c90a01f972ef803bd16272e7983aa1b3e9fa9c\n# Author: weizhimiao <532615323@qq.com>\n# Date:   Fri Sep 23 10:42:58 2016 +0800\n#\n#     add readme file\n```\n8. git reset 修改命令\n```\ngit reset HEAD    废除本次修改，回到上次提交的状态\ngit reset -hard [commit id]\n```\n```\n$ git reset --hard HEAD^\n# HEAD is now at 7563423 update\n$ git log   \n# commit ed0fe412477c8ac828e450cbc319c06ac8db0445\n# Author: weizhimiao <532615323@qq.com>\n# Date:   Fri Sep 23 11:19:34 2016 +0800\n#\n#     update\n#\n# commit 81c90a01f972ef803bd16272e7983aa1b3e9fa9c\n# Author: weizhimiao <532615323@qq.com>\n# Date:   Fri Sep 23 10:42:58 2016 +0800\n#\n#     add readme file\n#\n$ cat readme.md\n# git test\n# Second Lines;\n```\n然后我们就回到了上一次提交的版本。\n\n9. git rm 删除所有版本库记录（慎用）\n\n\n## 从远程库克隆\ngit clone 克隆一个本地库\n```\n$ git clone git@github.com:weizhimiao/git_test.git\n# Cloning into 'git_test'...\n# remote: Counting objects: 3, done.\n# remote: Total 3 (delta 0), reused 3 (delta 0), pack-reused 0\n# Receiving objects: 100% (3/3), done.\n# Checking connectivity... done.\n$ ll\n# drwxr-xr-x  4 zhimiao  staff   136B  9 23 21:53 git_test\n$ cd git_test\n$ ll\n# -rw-r--r--  1 zhimiao  staff    12B  9 23 21:53 README.md\n$ git status\n# On branch master\n# Your branch is up-to-date with 'origin/master'.\n# nothing to commit, working directory clean\n```\n## 关联远程库\n> 本地仓库名：git_test\n> 远程仓库名：git_test\n> 在本地git_test仓库下执行\n\n```\n$ git remote add origin git@github.com:weizhimiao/git_test.git\n```\n> weizhimiao 是github账户名\n> origin 为远程仓库的名字，git的默认叫法\n\n将本地所有的内容推送到远程库上\n```\ngit push -u origin master 把本地master分支推送到远程库\n-u 为把本地master 分支和远程master分支关联起来，之后就可以通过以下命令进行推送了\ngit push origin master\n```\n\n## 分享与更新项目\n1. git push origin dev  提交到远程dev分支\n\n\n2. git pull origin dev  拉取远程dev分支到本地并和本地dev分支合并\n\n3. git remote add origin git@github.com:weizhimiao/git_test.git  将本地仓库推送至名为test的仓库里\n\n## 分支管理\n创建：\n```\n$ git branch dev\n$ git branch\n#   dev\n# * master\n$ git checkout dev\n# Switched to branch 'dev'\n#\n$ git branch\n# * dev\n#   master\n```\n> git branch dev 创建dev分支\n> git checkout dev  切换当前分支\n\n等价于\n```\n$ git checkout -b dev 创建并切换到dev分支\n```\n```\n# git branch 查看当前分支\n# git branch -a 查看本地和远程所有分支\n# git branch -r 常看远程分支\n# git branch -d 删除本地分支\n# git checkout master 用于dev分支完成工作后，切换回master 分支\n#\n# git merge 分支合并\n# 如当前分支是master，本地另一个分支是dev，用下面命令将dev合并到master分支\n# git merge dev\n```\n## 版本回退\n```\n# git log 查看历史纪录\n#\n# 回退到上一个版本\n# git reset -hard HEAD^\n# 或\n# git reset --hard [commit id]回退至指定版本号的版本\n#\n#\n#\n# git中\n# HEAD表示当前版本\n# HEAD^表示上一个版本\n# HEAD^^ 上上一个版本\n# HEAD~100 上100个版本\n#\n# git reflog 查看命令历史\n# 一般通过这个命令查看之前版本号\n# 例如：（前7个字符就是版本号的缩写）\n$ git reflog\nbb862b6 HEAD@{0}: merge dev: Fast-forward\n3223509 HEAD@{1}: checkout: moving from dev to master\nbb862b6 HEAD@{2}: commit: dev branch commint\n3223509 HEAD@{3}: checkout: moving from master to dev\n3223509 HEAD@{4}: checkout: moving from master to master\n3223509 HEAD@{5}: checkout: moving from dev to master\n3223509 HEAD@{6}: checkout: moving from master to dev\n3223509 HEAD@{7}: commit: add readme.md\n54906f2 HEAD@{8}: pull origin master: Merge made by the 'recursive' strategy.\n7563423 HEAD@{9}: reset: moving to HEAD^\n7865e6f HEAD@{10}: commit: update third\n7563423 HEAD@{11}: commit: update\n81c90a0 HEAD@{12}: reset: moving to HEAD^\ned0fe41 HEAD@{13}: reset: moving to HEAD^\n2ba4ebf HEAD@{14}: commit: update third\ned0fe41 HEAD@{15}: commit: update\n81c90a0 HEAD@{16}: commit (initial): add readme file\n```\n## 管理修改\n> git diff HEAD -- README.md\n\n查看工作区和版本库里最新版本的区别\n```\n$ git diff HEAD -- README.md\n# diff --git a/README.md b/README.md\n# index 9235721..62c0eaa 100644\n# --- a/README.md\n# +++ b/README.md\n# @@ -1 +1 @@\n# -First Line!\n# +branch dev line\n```\n\n## 撤销修改\n1. 修改了工作区，想直接丢弃\n```\n$ git checkout -- filename\n```\n2. 修改了工作区内容，同事添加到了暂存区\n```\n$ git reset HEAD filename\n$ git checkout -- filename\n```\n\n## 删除文件\n```\n$ git rm filename\n$ git commit 提交到版本库\n```\n","source":"_posts/GIT使用小结.md","raw":"---\ntitle: GIT使用小结\ndate: 2016-09-21 23:30:00\nctime: 2016-09-21 23:30:00\nutime: 2016-09-23 23:30:00\nmodif_times: 2\ntags:\n- git\n- 版本控制\ncategories:\n- 软件工程\n---\n\n## 概念\n在使用之前先明确两个概念。\n- 工作区（working directory）\n> 我们创建的文件夹\n\n- 版本库（Repository）\n> 一个工作区中隐藏的目录（.git）这个目录不算工作区\n版本库\n>   - stage，暂存区\n>   - master，分支\n>\n> 日常我们进行git add操作，是将文件修改添加到了暂存区，而进行git commit操作，则是将暂存区中的修改提交至当前分支。\n\n<!-- more -->\n\n## 常用操作\n1. 创建项目文件夹\n```bash\nmkdir demo\n```\n2. 进入项目目录\n```\ncd demo\ngit init（将该目录变成git可以管理的仓库（repository））\n```\n初始化后，该目录下会产生一个.git 的隐藏文件夹。\n\n3. 添加文件到仓库\n```\ngit add 文件\n```\n添加一个文件到仓库。\n其实，该操作作用是将文件添加至Stage暂存区。\n\n  常用操作\n```bash\ngit add .   #将所有文件添加至 stage\ngit add -u  #将所有文件添加至 stage ，同时将工作区中删除的文件也从仓库中删除。\n```\n4. git commit  提交到版本库\n```\ngit commit -m \"write readme file\"\n```\n-m 为对本次版本提交的说明\n\n5. git status 查看当前版本库状态\n```bash\n$ mkdir git_test\n$ cd git_test\n$ git init\n# Initialized empty Git repository in /Users/zhimiao/WWW/hexo/git_test/.git/\n$ ll -a\n# total 0\n# drwxr-xr-x   3 zhimiao  staff   102B  9 23 10:25 .\n# drwxr-xr-x   6 zhimiao  staff   204B  9 23 10:25 ..\n# drwxr-xr-x  10 zhimiao  staff   340B  9 23 10:25 .git\n$ git status\n# On branch master\n# Initial commit\n# nothing to commit (create/copy files and use \"git add\" to track)\n```\n  - git将所有的文件分为3类：已追踪的，被忽略的，和未追踪的。\n    - 已追踪的（tracked）\n > 已追踪的文件是指已经在版本库中的文件，或者是已暂存到索引中的文件。即，一个文件通过执行git add，就会被添加到暂存区，该文件就变成一个已追踪的文件。\n    - 被忽略的（ignored）\n  > 被忽略的文件是指在版本库中被明确声明为不可见或者被忽略。一般通过在工作区新建 `.gitignore` 文件来来声明。\n  > ```\n> $ cat .gitignore\n.DS_Store\nThumbs.db\ndb.json\n*.log\nnode_modules/\npublic/\n.deploy*/\n> ```\n    - 未追踪的（untracked）\n  > 未追踪的文件是指那些不在前两类中的文件。git把工作目录下的所有文件当成一个集合，减去已经追踪的文件和忽略的文件，剩下的部分就作为未追踪的文件。\n\n  ```\n$ echo \"git test\" > readme.md\n$ git status\n# On branch master\n# Initial commit\n# Untracked files:\n#   (use \"git add <file>...\" to include in what will be committed)\n# \treadme.md\n# nothing added to commit but untracked files present (use \"git add\" to track)\n$ git add readme.md\n$ git status\n# On branch master\n# Initial commit\n# Changes to be committed:\n#   (use \"git rm --cached <file>...\" to unstage)\n# \tnew file:   readme.md\n$ git commit -m \"add readme file\"\n# [master (root-commit) 81c90a0] add readme file\n#  1 file changed, 1 insertion(+)\n#  create mode 100644 readme.md\n$ git status\n#  On branch master\n#  nothing to commit, working directory clean\n```\n\n6. git diff 显示当前尚未缓存的改动记录\n```\n$ echo \"Second Line \" >> readme.md\n$ git diff\n# diff --git a/readme.md b/readme.md\n# index f6edd6e..a1e649c 100644\n# --- a/readme.md\n# +++ b/readme.md\n# @@ -1 +1,2 @@\n#  git test\n# +add new Line\n```\n在开头，原始文件被『--』符号标记起来，新文件被用『+++』标记。@@ 之间表示两个不同文件版本的上下文行，以减号（-）开始的行表示从原始文件删除该行以得到新文件。相反，以加号（+）开始的行表示从原始文件中添加该行以产生新文件，而以空格开始的行则表示两个版本都有的行。\n\n7. git log 记录每次commit的信息\n```\n$ git add readme.md\n$ git commit -m \"update\"\n$ echo \"third Lines;\" >> readme.md\n$ git add readme.md\n$ git commit -m \"update third\"\n$ git log\n# commit 2ba4ebfe3ccef91f0d34646f5a0e50e339ee6f7a\n# Author: weizhimiao <532615323@qq.com>\n# Date:   Fri Sep 23 11:21:24 2016 +0800\n#\n#     update third\n#\n# commit ed0fe412477c8ac828e450cbc319c06ac8db0445\n# Author: weizhimiao <532615323@qq.com>\n# Date:   Fri Sep 23 11:19:34 2016 +0800\n#\n#     update\n#\n# commit 81c90a01f972ef803bd16272e7983aa1b3e9fa9c\n# Author: weizhimiao <532615323@qq.com>\n# Date:   Fri Sep 23 10:42:58 2016 +0800\n#\n#     add readme file\n```\n8. git reset 修改命令\n```\ngit reset HEAD    废除本次修改，回到上次提交的状态\ngit reset -hard [commit id]\n```\n```\n$ git reset --hard HEAD^\n# HEAD is now at 7563423 update\n$ git log   \n# commit ed0fe412477c8ac828e450cbc319c06ac8db0445\n# Author: weizhimiao <532615323@qq.com>\n# Date:   Fri Sep 23 11:19:34 2016 +0800\n#\n#     update\n#\n# commit 81c90a01f972ef803bd16272e7983aa1b3e9fa9c\n# Author: weizhimiao <532615323@qq.com>\n# Date:   Fri Sep 23 10:42:58 2016 +0800\n#\n#     add readme file\n#\n$ cat readme.md\n# git test\n# Second Lines;\n```\n然后我们就回到了上一次提交的版本。\n\n9. git rm 删除所有版本库记录（慎用）\n\n\n## 从远程库克隆\ngit clone 克隆一个本地库\n```\n$ git clone git@github.com:weizhimiao/git_test.git\n# Cloning into 'git_test'...\n# remote: Counting objects: 3, done.\n# remote: Total 3 (delta 0), reused 3 (delta 0), pack-reused 0\n# Receiving objects: 100% (3/3), done.\n# Checking connectivity... done.\n$ ll\n# drwxr-xr-x  4 zhimiao  staff   136B  9 23 21:53 git_test\n$ cd git_test\n$ ll\n# -rw-r--r--  1 zhimiao  staff    12B  9 23 21:53 README.md\n$ git status\n# On branch master\n# Your branch is up-to-date with 'origin/master'.\n# nothing to commit, working directory clean\n```\n## 关联远程库\n> 本地仓库名：git_test\n> 远程仓库名：git_test\n> 在本地git_test仓库下执行\n\n```\n$ git remote add origin git@github.com:weizhimiao/git_test.git\n```\n> weizhimiao 是github账户名\n> origin 为远程仓库的名字，git的默认叫法\n\n将本地所有的内容推送到远程库上\n```\ngit push -u origin master 把本地master分支推送到远程库\n-u 为把本地master 分支和远程master分支关联起来，之后就可以通过以下命令进行推送了\ngit push origin master\n```\n\n## 分享与更新项目\n1. git push origin dev  提交到远程dev分支\n\n\n2. git pull origin dev  拉取远程dev分支到本地并和本地dev分支合并\n\n3. git remote add origin git@github.com:weizhimiao/git_test.git  将本地仓库推送至名为test的仓库里\n\n## 分支管理\n创建：\n```\n$ git branch dev\n$ git branch\n#   dev\n# * master\n$ git checkout dev\n# Switched to branch 'dev'\n#\n$ git branch\n# * dev\n#   master\n```\n> git branch dev 创建dev分支\n> git checkout dev  切换当前分支\n\n等价于\n```\n$ git checkout -b dev 创建并切换到dev分支\n```\n```\n# git branch 查看当前分支\n# git branch -a 查看本地和远程所有分支\n# git branch -r 常看远程分支\n# git branch -d 删除本地分支\n# git checkout master 用于dev分支完成工作后，切换回master 分支\n#\n# git merge 分支合并\n# 如当前分支是master，本地另一个分支是dev，用下面命令将dev合并到master分支\n# git merge dev\n```\n## 版本回退\n```\n# git log 查看历史纪录\n#\n# 回退到上一个版本\n# git reset -hard HEAD^\n# 或\n# git reset --hard [commit id]回退至指定版本号的版本\n#\n#\n#\n# git中\n# HEAD表示当前版本\n# HEAD^表示上一个版本\n# HEAD^^ 上上一个版本\n# HEAD~100 上100个版本\n#\n# git reflog 查看命令历史\n# 一般通过这个命令查看之前版本号\n# 例如：（前7个字符就是版本号的缩写）\n$ git reflog\nbb862b6 HEAD@{0}: merge dev: Fast-forward\n3223509 HEAD@{1}: checkout: moving from dev to master\nbb862b6 HEAD@{2}: commit: dev branch commint\n3223509 HEAD@{3}: checkout: moving from master to dev\n3223509 HEAD@{4}: checkout: moving from master to master\n3223509 HEAD@{5}: checkout: moving from dev to master\n3223509 HEAD@{6}: checkout: moving from master to dev\n3223509 HEAD@{7}: commit: add readme.md\n54906f2 HEAD@{8}: pull origin master: Merge made by the 'recursive' strategy.\n7563423 HEAD@{9}: reset: moving to HEAD^\n7865e6f HEAD@{10}: commit: update third\n7563423 HEAD@{11}: commit: update\n81c90a0 HEAD@{12}: reset: moving to HEAD^\ned0fe41 HEAD@{13}: reset: moving to HEAD^\n2ba4ebf HEAD@{14}: commit: update third\ned0fe41 HEAD@{15}: commit: update\n81c90a0 HEAD@{16}: commit (initial): add readme file\n```\n## 管理修改\n> git diff HEAD -- README.md\n\n查看工作区和版本库里最新版本的区别\n```\n$ git diff HEAD -- README.md\n# diff --git a/README.md b/README.md\n# index 9235721..62c0eaa 100644\n# --- a/README.md\n# +++ b/README.md\n# @@ -1 +1 @@\n# -First Line!\n# +branch dev line\n```\n\n## 撤销修改\n1. 修改了工作区，想直接丢弃\n```\n$ git checkout -- filename\n```\n2. 修改了工作区内容，同事添加到了暂存区\n```\n$ git reset HEAD filename\n$ git checkout -- filename\n```\n\n## 删除文件\n```\n$ git rm filename\n$ git commit 提交到版本库\n```\n","slug":"GIT使用小结","published":1,"updated":"2016-09-23T14:33:28.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"city8vnmz000cg29f8lcywudu","content":"<h2 id=\"概念\"><a href=\"#概念\" class=\"headerlink\" title=\"概念\"></a>概念</h2><p>在使用之前先明确两个概念。</p>\n<ul>\n<li><p>工作区（working directory）</p>\n<blockquote>\n<p>我们创建的文件夹</p>\n</blockquote>\n</li>\n<li><p>版本库（Repository）</p>\n<blockquote>\n<p>一个工作区中隐藏的目录（.git）这个目录不算工作区<br>版本库</p>\n<ul>\n<li>stage，暂存区</li>\n<li>master，分支</li>\n</ul>\n<p>日常我们进行git add操作，是将文件修改添加到了暂存区，而进行git commit操作，则是将暂存区中的修改提交至当前分支。</p>\n</blockquote>\n</li>\n</ul>\n<a id=\"more\"></a>\n<h2 id=\"常用操作\"><a href=\"#常用操作\" class=\"headerlink\" title=\"常用操作\"></a>常用操作</h2><ol>\n<li><p>创建项目文件夹</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">mkdir demo</div></pre></td></tr></table></figure>\n</li>\n<li><p>进入项目目录</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">cd demo</div><div class=\"line\">git init（将该目录变成git可以管理的仓库（repository））</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>初始化后，该目录下会产生一个.git 的隐藏文件夹。</p>\n<ol>\n<li>添加文件到仓库<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git add 文件</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>添加一个文件到仓库。<br>其实，该操作作用是将文件添加至Stage暂存区。</p>\n<p>  常用操作<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">git add .   <span class=\"comment\">#将所有文件添加至 stage</span></div><div class=\"line\">git add -u  <span class=\"comment\">#将所有文件添加至 stage ，同时将工作区中删除的文件也从仓库中删除。</span></div></pre></td></tr></table></figure></p>\n<ol>\n<li>git commit  提交到版本库<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git commit -m &quot;write readme file&quot;</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>-m 为对本次版本提交的说明</p>\n<ol>\n<li><p>git status 查看当前版本库状态</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ mkdir git_<span class=\"built_in\">test</span></div><div class=\"line\">$ <span class=\"built_in\">cd</span> git_<span class=\"built_in\">test</span></div><div class=\"line\">$ git init</div><div class=\"line\"><span class=\"comment\"># Initialized empty Git repository in /Users/zhimiao/WWW/hexo/git_test/.git/</span></div><div class=\"line\">$ ll <span class=\"_\">-a</span></div><div class=\"line\"><span class=\"comment\"># total 0</span></div><div class=\"line\"><span class=\"comment\"># drwxr-xr-x   3 zhimiao  staff   102B  9 23 10:25 .</span></div><div class=\"line\"><span class=\"comment\"># drwxr-xr-x   6 zhimiao  staff   204B  9 23 10:25 ..</span></div><div class=\"line\"><span class=\"comment\"># drwxr-xr-x  10 zhimiao  staff   340B  9 23 10:25 .git</span></div><div class=\"line\">$ git status</div><div class=\"line\"><span class=\"comment\"># On branch master</span></div><div class=\"line\"><span class=\"comment\"># Initial commit</span></div><div class=\"line\"><span class=\"comment\"># nothing to commit (create/copy files and use \"git add\" to track)</span></div></pre></td></tr></table></figure>\n<ul>\n<li><p>git将所有的文件分为3类：已追踪的，被忽略的，和未追踪的。</p>\n<ul>\n<li>已追踪的（tracked）<blockquote>\n<p>已追踪的文件是指已经在版本库中的文件，或者是已暂存到索引中的文件。即，一个文件通过执行git add，就会被添加到暂存区，该文件就变成一个已追踪的文件。</p>\n</blockquote>\n</li>\n<li><p>被忽略的（ignored）</p>\n<blockquote>\n<p>被忽略的文件是指在版本库中被明确声明为不可见或者被忽略。一般通过在工作区新建 <code>.gitignore</code> 文件来来声明。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; $ cat .gitignore</div><div class=\"line\">.DS_Store</div><div class=\"line\">Thumbs.db</div><div class=\"line\">db.json</div><div class=\"line\">*.log</div><div class=\"line\">node_modules/</div><div class=\"line\">public/</div><div class=\"line\">.deploy*/</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</blockquote>\n</li>\n<li><p>未追踪的（untracked）</p>\n<blockquote>\n<p>未追踪的文件是指那些不在前两类中的文件。git把工作目录下的所有文件当成一个集合，减去已经追踪的文件和忽略的文件，剩下的部分就作为未追踪的文件。</p>\n</blockquote>\n</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ echo &quot;git test&quot; &gt; readme.md</div><div class=\"line\">$ git status</div><div class=\"line\"># On branch master</div><div class=\"line\"># Initial commit</div><div class=\"line\"># Untracked files:</div><div class=\"line\">#   (use &quot;git add &lt;file&gt;...&quot; to include in what will be committed)</div><div class=\"line\"># \treadme.md</div><div class=\"line\"># nothing added to commit but untracked files present (use &quot;git add&quot; to track)</div><div class=\"line\">$ git add readme.md</div><div class=\"line\">$ git status</div><div class=\"line\"># On branch master</div><div class=\"line\"># Initial commit</div><div class=\"line\"># Changes to be committed:</div><div class=\"line\">#   (use &quot;git rm --cached &lt;file&gt;...&quot; to unstage)</div><div class=\"line\"># \tnew file:   readme.md</div><div class=\"line\">$ git commit -m &quot;add readme file&quot;</div><div class=\"line\"># [master (root-commit) 81c90a0] add readme file</div><div class=\"line\">#  1 file changed, 1 insertion(+)</div><div class=\"line\">#  create mode 100644 readme.md</div><div class=\"line\">$ git status</div><div class=\"line\">#  On branch master</div><div class=\"line\">#  nothing to commit, working directory clean</div></pre></td></tr></table></figure>\n</li>\n<li><p>git diff 显示当前尚未缓存的改动记录</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ echo &quot;Second Line &quot; &gt;&gt; readme.md</div><div class=\"line\">$ git diff</div><div class=\"line\"># diff --git a/readme.md b/readme.md</div><div class=\"line\"># index f6edd6e..a1e649c 100644</div><div class=\"line\"># --- a/readme.md</div><div class=\"line\"># +++ b/readme.md</div><div class=\"line\"># @@ -1 +1,2 @@</div><div class=\"line\">#  git test</div><div class=\"line\"># +add new Line</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>在开头，原始文件被『–』符号标记起来，新文件被用『+++』标记。@@ 之间表示两个不同文件版本的上下文行，以减号（-）开始的行表示从原始文件删除该行以得到新文件。相反，以加号（+）开始的行表示从原始文件中添加该行以产生新文件，而以空格开始的行则表示两个版本都有的行。</p>\n<ol>\n<li><p>git log 记录每次commit的信息</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git add readme.md</div><div class=\"line\">$ git commit -m &quot;update&quot;</div><div class=\"line\">$ echo &quot;third Lines;&quot; &gt;&gt; readme.md</div><div class=\"line\">$ git add readme.md</div><div class=\"line\">$ git commit -m &quot;update third&quot;</div><div class=\"line\">$ git log</div><div class=\"line\"># commit 2ba4ebfe3ccef91f0d34646f5a0e50e339ee6f7a</div><div class=\"line\"># Author: weizhimiao &lt;532615323@qq.com&gt;</div><div class=\"line\"># Date:   Fri Sep 23 11:21:24 2016 +0800</div><div class=\"line\">#</div><div class=\"line\">#     update third</div><div class=\"line\">#</div><div class=\"line\"># commit ed0fe412477c8ac828e450cbc319c06ac8db0445</div><div class=\"line\"># Author: weizhimiao &lt;532615323@qq.com&gt;</div><div class=\"line\"># Date:   Fri Sep 23 11:19:34 2016 +0800</div><div class=\"line\">#</div><div class=\"line\">#     update</div><div class=\"line\">#</div><div class=\"line\"># commit 81c90a01f972ef803bd16272e7983aa1b3e9fa9c</div><div class=\"line\"># Author: weizhimiao &lt;532615323@qq.com&gt;</div><div class=\"line\"># Date:   Fri Sep 23 10:42:58 2016 +0800</div><div class=\"line\">#</div><div class=\"line\">#     add readme file</div></pre></td></tr></table></figure>\n</li>\n<li><p>git reset 修改命令</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">git reset HEAD    废除本次修改，回到上次提交的状态</div><div class=\"line\">git reset -hard [commit id]</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git reset --hard HEAD^</div><div class=\"line\"># HEAD is now at 7563423 update</div><div class=\"line\">$ git log   </div><div class=\"line\"># commit ed0fe412477c8ac828e450cbc319c06ac8db0445</div><div class=\"line\"># Author: weizhimiao &lt;532615323@qq.com&gt;</div><div class=\"line\"># Date:   Fri Sep 23 11:19:34 2016 +0800</div><div class=\"line\">#</div><div class=\"line\">#     update</div><div class=\"line\">#</div><div class=\"line\"># commit 81c90a01f972ef803bd16272e7983aa1b3e9fa9c</div><div class=\"line\"># Author: weizhimiao &lt;532615323@qq.com&gt;</div><div class=\"line\"># Date:   Fri Sep 23 10:42:58 2016 +0800</div><div class=\"line\">#</div><div class=\"line\">#     add readme file</div><div class=\"line\">#</div><div class=\"line\">$ cat readme.md</div><div class=\"line\"># git test</div><div class=\"line\"># Second Lines;</div></pre></td></tr></table></figure>\n<p>然后我们就回到了上一次提交的版本。</p>\n<ol>\n<li>git rm 删除所有版本库记录（慎用）</li>\n</ol>\n<h2 id=\"从远程库克隆\"><a href=\"#从远程库克隆\" class=\"headerlink\" title=\"从远程库克隆\"></a>从远程库克隆</h2><p>git clone 克隆一个本地库<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git clone git@github.com:weizhimiao/git_test.git</div><div class=\"line\"># Cloning into &apos;git_test&apos;...</div><div class=\"line\"># remote: Counting objects: 3, done.</div><div class=\"line\"># remote: Total 3 (delta 0), reused 3 (delta 0), pack-reused 0</div><div class=\"line\"># Receiving objects: 100% (3/3), done.</div><div class=\"line\"># Checking connectivity... done.</div><div class=\"line\">$ ll</div><div class=\"line\"># drwxr-xr-x  4 zhimiao  staff   136B  9 23 21:53 git_test</div><div class=\"line\">$ cd git_test</div><div class=\"line\">$ ll</div><div class=\"line\"># -rw-r--r--  1 zhimiao  staff    12B  9 23 21:53 README.md</div><div class=\"line\">$ git status</div><div class=\"line\"># On branch master</div><div class=\"line\"># Your branch is up-to-date with &apos;origin/master&apos;.</div><div class=\"line\"># nothing to commit, working directory clean</div></pre></td></tr></table></figure></p>\n<h2 id=\"关联远程库\"><a href=\"#关联远程库\" class=\"headerlink\" title=\"关联远程库\"></a>关联远程库</h2><blockquote>\n<p>本地仓库名：git_test<br>远程仓库名：git_test<br>在本地git_test仓库下执行</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git remote add origin git@github.com:weizhimiao/git_test.git</div></pre></td></tr></table></figure>\n<blockquote>\n<p>weizhimiao 是github账户名<br>origin 为远程仓库的名字，git的默认叫法</p>\n</blockquote>\n<p>将本地所有的内容推送到远程库上<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">git push -u origin master 把本地master分支推送到远程库</div><div class=\"line\">-u 为把本地master 分支和远程master分支关联起来，之后就可以通过以下命令进行推送了</div><div class=\"line\">git push origin master</div></pre></td></tr></table></figure></p>\n<h2 id=\"分享与更新项目\"><a href=\"#分享与更新项目\" class=\"headerlink\" title=\"分享与更新项目\"></a>分享与更新项目</h2><ol>\n<li>git push origin dev  提交到远程dev分支</li>\n</ol>\n<ol>\n<li><p>git pull origin dev  拉取远程dev分支到本地并和本地dev分支合并</p>\n</li>\n<li><p>git remote add origin git@github.com:weizhimiao/git_test.git  将本地仓库推送至名为test的仓库里</p>\n</li>\n</ol>\n<h2 id=\"分支管理\"><a href=\"#分支管理\" class=\"headerlink\" title=\"分支管理\"></a>分支管理</h2><p>创建：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git branch dev</div><div class=\"line\">$ git branch</div><div class=\"line\">#   dev</div><div class=\"line\"># * master</div><div class=\"line\">$ git checkout dev</div><div class=\"line\"># Switched to branch &apos;dev&apos;</div><div class=\"line\">#</div><div class=\"line\">$ git branch</div><div class=\"line\"># * dev</div><div class=\"line\">#   master</div></pre></td></tr></table></figure></p>\n<blockquote>\n<p>git branch dev 创建dev分支<br>git checkout dev  切换当前分支</p>\n</blockquote>\n<p>等价于<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git checkout -b dev 创建并切换到dev分支</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"># git branch 查看当前分支</div><div class=\"line\"># git branch -a 查看本地和远程所有分支</div><div class=\"line\"># git branch -r 常看远程分支</div><div class=\"line\"># git branch -d 删除本地分支</div><div class=\"line\"># git checkout master 用于dev分支完成工作后，切换回master 分支</div><div class=\"line\">#</div><div class=\"line\"># git merge 分支合并</div><div class=\"line\"># 如当前分支是master，本地另一个分支是dev，用下面命令将dev合并到master分支</div><div class=\"line\"># git merge dev</div></pre></td></tr></table></figure>\n<h2 id=\"版本回退\"><a href=\"#版本回退\" class=\"headerlink\" title=\"版本回退\"></a>版本回退</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div></pre></td><td class=\"code\"><pre><div class=\"line\"># git log 查看历史纪录</div><div class=\"line\">#</div><div class=\"line\"># 回退到上一个版本</div><div class=\"line\"># git reset -hard HEAD^</div><div class=\"line\"># 或</div><div class=\"line\"># git reset --hard [commit id]回退至指定版本号的版本</div><div class=\"line\">#</div><div class=\"line\">#</div><div class=\"line\">#</div><div class=\"line\"># git中</div><div class=\"line\"># HEAD表示当前版本</div><div class=\"line\"># HEAD^表示上一个版本</div><div class=\"line\"># HEAD^^ 上上一个版本</div><div class=\"line\"># HEAD~100 上100个版本</div><div class=\"line\">#</div><div class=\"line\"># git reflog 查看命令历史</div><div class=\"line\"># 一般通过这个命令查看之前版本号</div><div class=\"line\"># 例如：（前7个字符就是版本号的缩写）</div><div class=\"line\">$ git reflog</div><div class=\"line\">bb862b6 HEAD@&#123;0&#125;: merge dev: Fast-forward</div><div class=\"line\">3223509 HEAD@&#123;1&#125;: checkout: moving from dev to master</div><div class=\"line\">bb862b6 HEAD@&#123;2&#125;: commit: dev branch commint</div><div class=\"line\">3223509 HEAD@&#123;3&#125;: checkout: moving from master to dev</div><div class=\"line\">3223509 HEAD@&#123;4&#125;: checkout: moving from master to master</div><div class=\"line\">3223509 HEAD@&#123;5&#125;: checkout: moving from dev to master</div><div class=\"line\">3223509 HEAD@&#123;6&#125;: checkout: moving from master to dev</div><div class=\"line\">3223509 HEAD@&#123;7&#125;: commit: add readme.md</div><div class=\"line\">54906f2 HEAD@&#123;8&#125;: pull origin master: Merge made by the &apos;recursive&apos; strategy.</div><div class=\"line\">7563423 HEAD@&#123;9&#125;: reset: moving to HEAD^</div><div class=\"line\">7865e6f HEAD@&#123;10&#125;: commit: update third</div><div class=\"line\">7563423 HEAD@&#123;11&#125;: commit: update</div><div class=\"line\">81c90a0 HEAD@&#123;12&#125;: reset: moving to HEAD^</div><div class=\"line\">ed0fe41 HEAD@&#123;13&#125;: reset: moving to HEAD^</div><div class=\"line\">2ba4ebf HEAD@&#123;14&#125;: commit: update third</div><div class=\"line\">ed0fe41 HEAD@&#123;15&#125;: commit: update</div><div class=\"line\">81c90a0 HEAD@&#123;16&#125;: commit (initial): add readme file</div></pre></td></tr></table></figure>\n<h2 id=\"管理修改\"><a href=\"#管理修改\" class=\"headerlink\" title=\"管理修改\"></a>管理修改</h2><blockquote>\n<p>git diff HEAD – README.md</p>\n</blockquote>\n<p>查看工作区和版本库里最新版本的区别<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git diff HEAD -- README.md</div><div class=\"line\"># diff --git a/README.md b/README.md</div><div class=\"line\"># index 9235721..62c0eaa 100644</div><div class=\"line\"># --- a/README.md</div><div class=\"line\"># +++ b/README.md</div><div class=\"line\"># @@ -1 +1 @@</div><div class=\"line\"># -First Line!</div><div class=\"line\"># +branch dev line</div></pre></td></tr></table></figure></p>\n<h2 id=\"撤销修改\"><a href=\"#撤销修改\" class=\"headerlink\" title=\"撤销修改\"></a>撤销修改</h2><ol>\n<li><p>修改了工作区，想直接丢弃</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git checkout -- filename</div></pre></td></tr></table></figure>\n</li>\n<li><p>修改了工作区内容，同事添加到了暂存区</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git reset HEAD filename</div><div class=\"line\">$ git checkout -- filename</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<h2 id=\"删除文件\"><a href=\"#删除文件\" class=\"headerlink\" title=\"删除文件\"></a>删除文件</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git rm filename</div><div class=\"line\">$ git commit 提交到版本库</div></pre></td></tr></table></figure>\n","excerpt":"<h2 id=\"概念\"><a href=\"#概念\" class=\"headerlink\" title=\"概念\"></a>概念</h2><p>在使用之前先明确两个概念。</p>\n<ul>\n<li><p>工作区（working directory）</p>\n<blockquote>\n<p>我们创建的文件夹</p>\n</blockquote>\n</li>\n<li><p>版本库（Repository）</p>\n<blockquote>\n<p>一个工作区中隐藏的目录（.git）这个目录不算工作区<br>版本库</p>\n<ul>\n<li>stage，暂存区</li>\n<li>master，分支</li>\n</ul>\n<p>日常我们进行git add操作，是将文件修改添加到了暂存区，而进行git commit操作，则是将暂存区中的修改提交至当前分支。</p>\n</blockquote>\n</li>\n</ul>","more":"<h2 id=\"常用操作\"><a href=\"#常用操作\" class=\"headerlink\" title=\"常用操作\"></a>常用操作</h2><ol>\n<li><p>创建项目文件夹</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">mkdir demo</div></pre></td></tr></table></figure>\n</li>\n<li><p>进入项目目录</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">cd demo</div><div class=\"line\">git init（将该目录变成git可以管理的仓库（repository））</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>初始化后，该目录下会产生一个.git 的隐藏文件夹。</p>\n<ol>\n<li>添加文件到仓库<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git add 文件</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>添加一个文件到仓库。<br>其实，该操作作用是将文件添加至Stage暂存区。</p>\n<p>  常用操作<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">git add .   <span class=\"comment\">#将所有文件添加至 stage</span></div><div class=\"line\">git add -u  <span class=\"comment\">#将所有文件添加至 stage ，同时将工作区中删除的文件也从仓库中删除。</span></div></pre></td></tr></table></figure></p>\n<ol>\n<li>git commit  提交到版本库<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git commit -m &quot;write readme file&quot;</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>-m 为对本次版本提交的说明</p>\n<ol>\n<li><p>git status 查看当前版本库状态</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ mkdir git_<span class=\"built_in\">test</span></div><div class=\"line\">$ <span class=\"built_in\">cd</span> git_<span class=\"built_in\">test</span></div><div class=\"line\">$ git init</div><div class=\"line\"><span class=\"comment\"># Initialized empty Git repository in /Users/zhimiao/WWW/hexo/git_test/.git/</span></div><div class=\"line\">$ ll <span class=\"_\">-a</span></div><div class=\"line\"><span class=\"comment\"># total 0</span></div><div class=\"line\"><span class=\"comment\"># drwxr-xr-x   3 zhimiao  staff   102B  9 23 10:25 .</span></div><div class=\"line\"><span class=\"comment\"># drwxr-xr-x   6 zhimiao  staff   204B  9 23 10:25 ..</span></div><div class=\"line\"><span class=\"comment\"># drwxr-xr-x  10 zhimiao  staff   340B  9 23 10:25 .git</span></div><div class=\"line\">$ git status</div><div class=\"line\"><span class=\"comment\"># On branch master</span></div><div class=\"line\"><span class=\"comment\"># Initial commit</span></div><div class=\"line\"><span class=\"comment\"># nothing to commit (create/copy files and use \"git add\" to track)</span></div></pre></td></tr></table></figure>\n<ul>\n<li><p>git将所有的文件分为3类：已追踪的，被忽略的，和未追踪的。</p>\n<ul>\n<li>已追踪的（tracked）<blockquote>\n<p>已追踪的文件是指已经在版本库中的文件，或者是已暂存到索引中的文件。即，一个文件通过执行git add，就会被添加到暂存区，该文件就变成一个已追踪的文件。</p>\n</blockquote>\n</li>\n<li><p>被忽略的（ignored）</p>\n<blockquote>\n<p>被忽略的文件是指在版本库中被明确声明为不可见或者被忽略。一般通过在工作区新建 <code>.gitignore</code> 文件来来声明。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; $ cat .gitignore</div><div class=\"line\">.DS_Store</div><div class=\"line\">Thumbs.db</div><div class=\"line\">db.json</div><div class=\"line\">*.log</div><div class=\"line\">node_modules/</div><div class=\"line\">public/</div><div class=\"line\">.deploy*/</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</blockquote>\n</li>\n<li><p>未追踪的（untracked）</p>\n<blockquote>\n<p>未追踪的文件是指那些不在前两类中的文件。git把工作目录下的所有文件当成一个集合，减去已经追踪的文件和忽略的文件，剩下的部分就作为未追踪的文件。</p>\n</blockquote>\n</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ echo &quot;git test&quot; &gt; readme.md</div><div class=\"line\">$ git status</div><div class=\"line\"># On branch master</div><div class=\"line\"># Initial commit</div><div class=\"line\"># Untracked files:</div><div class=\"line\">#   (use &quot;git add &lt;file&gt;...&quot; to include in what will be committed)</div><div class=\"line\"># \treadme.md</div><div class=\"line\"># nothing added to commit but untracked files present (use &quot;git add&quot; to track)</div><div class=\"line\">$ git add readme.md</div><div class=\"line\">$ git status</div><div class=\"line\"># On branch master</div><div class=\"line\"># Initial commit</div><div class=\"line\"># Changes to be committed:</div><div class=\"line\">#   (use &quot;git rm --cached &lt;file&gt;...&quot; to unstage)</div><div class=\"line\"># \tnew file:   readme.md</div><div class=\"line\">$ git commit -m &quot;add readme file&quot;</div><div class=\"line\"># [master (root-commit) 81c90a0] add readme file</div><div class=\"line\">#  1 file changed, 1 insertion(+)</div><div class=\"line\">#  create mode 100644 readme.md</div><div class=\"line\">$ git status</div><div class=\"line\">#  On branch master</div><div class=\"line\">#  nothing to commit, working directory clean</div></pre></td></tr></table></figure>\n</li>\n<li><p>git diff 显示当前尚未缓存的改动记录</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ echo &quot;Second Line &quot; &gt;&gt; readme.md</div><div class=\"line\">$ git diff</div><div class=\"line\"># diff --git a/readme.md b/readme.md</div><div class=\"line\"># index f6edd6e..a1e649c 100644</div><div class=\"line\"># --- a/readme.md</div><div class=\"line\"># +++ b/readme.md</div><div class=\"line\"># @@ -1 +1,2 @@</div><div class=\"line\">#  git test</div><div class=\"line\"># +add new Line</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>在开头，原始文件被『–』符号标记起来，新文件被用『+++』标记。@@ 之间表示两个不同文件版本的上下文行，以减号（-）开始的行表示从原始文件删除该行以得到新文件。相反，以加号（+）开始的行表示从原始文件中添加该行以产生新文件，而以空格开始的行则表示两个版本都有的行。</p>\n<ol>\n<li><p>git log 记录每次commit的信息</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git add readme.md</div><div class=\"line\">$ git commit -m &quot;update&quot;</div><div class=\"line\">$ echo &quot;third Lines;&quot; &gt;&gt; readme.md</div><div class=\"line\">$ git add readme.md</div><div class=\"line\">$ git commit -m &quot;update third&quot;</div><div class=\"line\">$ git log</div><div class=\"line\"># commit 2ba4ebfe3ccef91f0d34646f5a0e50e339ee6f7a</div><div class=\"line\"># Author: weizhimiao &lt;532615323@qq.com&gt;</div><div class=\"line\"># Date:   Fri Sep 23 11:21:24 2016 +0800</div><div class=\"line\">#</div><div class=\"line\">#     update third</div><div class=\"line\">#</div><div class=\"line\"># commit ed0fe412477c8ac828e450cbc319c06ac8db0445</div><div class=\"line\"># Author: weizhimiao &lt;532615323@qq.com&gt;</div><div class=\"line\"># Date:   Fri Sep 23 11:19:34 2016 +0800</div><div class=\"line\">#</div><div class=\"line\">#     update</div><div class=\"line\">#</div><div class=\"line\"># commit 81c90a01f972ef803bd16272e7983aa1b3e9fa9c</div><div class=\"line\"># Author: weizhimiao &lt;532615323@qq.com&gt;</div><div class=\"line\"># Date:   Fri Sep 23 10:42:58 2016 +0800</div><div class=\"line\">#</div><div class=\"line\">#     add readme file</div></pre></td></tr></table></figure>\n</li>\n<li><p>git reset 修改命令</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">git reset HEAD    废除本次修改，回到上次提交的状态</div><div class=\"line\">git reset -hard [commit id]</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git reset --hard HEAD^</div><div class=\"line\"># HEAD is now at 7563423 update</div><div class=\"line\">$ git log   </div><div class=\"line\"># commit ed0fe412477c8ac828e450cbc319c06ac8db0445</div><div class=\"line\"># Author: weizhimiao &lt;532615323@qq.com&gt;</div><div class=\"line\"># Date:   Fri Sep 23 11:19:34 2016 +0800</div><div class=\"line\">#</div><div class=\"line\">#     update</div><div class=\"line\">#</div><div class=\"line\"># commit 81c90a01f972ef803bd16272e7983aa1b3e9fa9c</div><div class=\"line\"># Author: weizhimiao &lt;532615323@qq.com&gt;</div><div class=\"line\"># Date:   Fri Sep 23 10:42:58 2016 +0800</div><div class=\"line\">#</div><div class=\"line\">#     add readme file</div><div class=\"line\">#</div><div class=\"line\">$ cat readme.md</div><div class=\"line\"># git test</div><div class=\"line\"># Second Lines;</div></pre></td></tr></table></figure>\n<p>然后我们就回到了上一次提交的版本。</p>\n<ol>\n<li>git rm 删除所有版本库记录（慎用）</li>\n</ol>\n<h2 id=\"从远程库克隆\"><a href=\"#从远程库克隆\" class=\"headerlink\" title=\"从远程库克隆\"></a>从远程库克隆</h2><p>git clone 克隆一个本地库<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git clone git@github.com:weizhimiao/git_test.git</div><div class=\"line\"># Cloning into &apos;git_test&apos;...</div><div class=\"line\"># remote: Counting objects: 3, done.</div><div class=\"line\"># remote: Total 3 (delta 0), reused 3 (delta 0), pack-reused 0</div><div class=\"line\"># Receiving objects: 100% (3/3), done.</div><div class=\"line\"># Checking connectivity... done.</div><div class=\"line\">$ ll</div><div class=\"line\"># drwxr-xr-x  4 zhimiao  staff   136B  9 23 21:53 git_test</div><div class=\"line\">$ cd git_test</div><div class=\"line\">$ ll</div><div class=\"line\"># -rw-r--r--  1 zhimiao  staff    12B  9 23 21:53 README.md</div><div class=\"line\">$ git status</div><div class=\"line\"># On branch master</div><div class=\"line\"># Your branch is up-to-date with &apos;origin/master&apos;.</div><div class=\"line\"># nothing to commit, working directory clean</div></pre></td></tr></table></figure></p>\n<h2 id=\"关联远程库\"><a href=\"#关联远程库\" class=\"headerlink\" title=\"关联远程库\"></a>关联远程库</h2><blockquote>\n<p>本地仓库名：git_test<br>远程仓库名：git_test<br>在本地git_test仓库下执行</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git remote add origin git@github.com:weizhimiao/git_test.git</div></pre></td></tr></table></figure>\n<blockquote>\n<p>weizhimiao 是github账户名<br>origin 为远程仓库的名字，git的默认叫法</p>\n</blockquote>\n<p>将本地所有的内容推送到远程库上<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">git push -u origin master 把本地master分支推送到远程库</div><div class=\"line\">-u 为把本地master 分支和远程master分支关联起来，之后就可以通过以下命令进行推送了</div><div class=\"line\">git push origin master</div></pre></td></tr></table></figure></p>\n<h2 id=\"分享与更新项目\"><a href=\"#分享与更新项目\" class=\"headerlink\" title=\"分享与更新项目\"></a>分享与更新项目</h2><ol>\n<li>git push origin dev  提交到远程dev分支</li>\n</ol>\n<ol>\n<li><p>git pull origin dev  拉取远程dev分支到本地并和本地dev分支合并</p>\n</li>\n<li><p>git remote add origin git@github.com:weizhimiao/git_test.git  将本地仓库推送至名为test的仓库里</p>\n</li>\n</ol>\n<h2 id=\"分支管理\"><a href=\"#分支管理\" class=\"headerlink\" title=\"分支管理\"></a>分支管理</h2><p>创建：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git branch dev</div><div class=\"line\">$ git branch</div><div class=\"line\">#   dev</div><div class=\"line\"># * master</div><div class=\"line\">$ git checkout dev</div><div class=\"line\"># Switched to branch &apos;dev&apos;</div><div class=\"line\">#</div><div class=\"line\">$ git branch</div><div class=\"line\"># * dev</div><div class=\"line\">#   master</div></pre></td></tr></table></figure></p>\n<blockquote>\n<p>git branch dev 创建dev分支<br>git checkout dev  切换当前分支</p>\n</blockquote>\n<p>等价于<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git checkout -b dev 创建并切换到dev分支</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"># git branch 查看当前分支</div><div class=\"line\"># git branch -a 查看本地和远程所有分支</div><div class=\"line\"># git branch -r 常看远程分支</div><div class=\"line\"># git branch -d 删除本地分支</div><div class=\"line\"># git checkout master 用于dev分支完成工作后，切换回master 分支</div><div class=\"line\">#</div><div class=\"line\"># git merge 分支合并</div><div class=\"line\"># 如当前分支是master，本地另一个分支是dev，用下面命令将dev合并到master分支</div><div class=\"line\"># git merge dev</div></pre></td></tr></table></figure>\n<h2 id=\"版本回退\"><a href=\"#版本回退\" class=\"headerlink\" title=\"版本回退\"></a>版本回退</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div></pre></td><td class=\"code\"><pre><div class=\"line\"># git log 查看历史纪录</div><div class=\"line\">#</div><div class=\"line\"># 回退到上一个版本</div><div class=\"line\"># git reset -hard HEAD^</div><div class=\"line\"># 或</div><div class=\"line\"># git reset --hard [commit id]回退至指定版本号的版本</div><div class=\"line\">#</div><div class=\"line\">#</div><div class=\"line\">#</div><div class=\"line\"># git中</div><div class=\"line\"># HEAD表示当前版本</div><div class=\"line\"># HEAD^表示上一个版本</div><div class=\"line\"># HEAD^^ 上上一个版本</div><div class=\"line\"># HEAD~100 上100个版本</div><div class=\"line\">#</div><div class=\"line\"># git reflog 查看命令历史</div><div class=\"line\"># 一般通过这个命令查看之前版本号</div><div class=\"line\"># 例如：（前7个字符就是版本号的缩写）</div><div class=\"line\">$ git reflog</div><div class=\"line\">bb862b6 HEAD@&#123;0&#125;: merge dev: Fast-forward</div><div class=\"line\">3223509 HEAD@&#123;1&#125;: checkout: moving from dev to master</div><div class=\"line\">bb862b6 HEAD@&#123;2&#125;: commit: dev branch commint</div><div class=\"line\">3223509 HEAD@&#123;3&#125;: checkout: moving from master to dev</div><div class=\"line\">3223509 HEAD@&#123;4&#125;: checkout: moving from master to master</div><div class=\"line\">3223509 HEAD@&#123;5&#125;: checkout: moving from dev to master</div><div class=\"line\">3223509 HEAD@&#123;6&#125;: checkout: moving from master to dev</div><div class=\"line\">3223509 HEAD@&#123;7&#125;: commit: add readme.md</div><div class=\"line\">54906f2 HEAD@&#123;8&#125;: pull origin master: Merge made by the &apos;recursive&apos; strategy.</div><div class=\"line\">7563423 HEAD@&#123;9&#125;: reset: moving to HEAD^</div><div class=\"line\">7865e6f HEAD@&#123;10&#125;: commit: update third</div><div class=\"line\">7563423 HEAD@&#123;11&#125;: commit: update</div><div class=\"line\">81c90a0 HEAD@&#123;12&#125;: reset: moving to HEAD^</div><div class=\"line\">ed0fe41 HEAD@&#123;13&#125;: reset: moving to HEAD^</div><div class=\"line\">2ba4ebf HEAD@&#123;14&#125;: commit: update third</div><div class=\"line\">ed0fe41 HEAD@&#123;15&#125;: commit: update</div><div class=\"line\">81c90a0 HEAD@&#123;16&#125;: commit (initial): add readme file</div></pre></td></tr></table></figure>\n<h2 id=\"管理修改\"><a href=\"#管理修改\" class=\"headerlink\" title=\"管理修改\"></a>管理修改</h2><blockquote>\n<p>git diff HEAD – README.md</p>\n</blockquote>\n<p>查看工作区和版本库里最新版本的区别<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git diff HEAD -- README.md</div><div class=\"line\"># diff --git a/README.md b/README.md</div><div class=\"line\"># index 9235721..62c0eaa 100644</div><div class=\"line\"># --- a/README.md</div><div class=\"line\"># +++ b/README.md</div><div class=\"line\"># @@ -1 +1 @@</div><div class=\"line\"># -First Line!</div><div class=\"line\"># +branch dev line</div></pre></td></tr></table></figure></p>\n<h2 id=\"撤销修改\"><a href=\"#撤销修改\" class=\"headerlink\" title=\"撤销修改\"></a>撤销修改</h2><ol>\n<li><p>修改了工作区，想直接丢弃</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git checkout -- filename</div></pre></td></tr></table></figure>\n</li>\n<li><p>修改了工作区内容，同事添加到了暂存区</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git reset HEAD filename</div><div class=\"line\">$ git checkout -- filename</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<h2 id=\"删除文件\"><a href=\"#删除文件\" class=\"headerlink\" title=\"删除文件\"></a>删除文件</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git rm filename</div><div class=\"line\">$ git commit 提交到版本库</div></pre></td></tr></table></figure>"},{"title":"ElasticSearch整理","date":"2016-10-05T13:00:00.000Z","_content":"\nElasticSearch是由Shay Banon发起的一个开源搜索服务器项目。由于其分布式特性和实时搜索能力，成为当前搜索和数据分析解决方案领域的重要成员。\n\n\n![ElasticSearch](http://n.sinaimg.cn/games/3ece443e/20161006/ElasticSearch.png)\n\n<!-- more -->\n## 基本概念\n索引\n> 索引（index）是ElasticSearch存放数据的一种逻辑结构。类比关系型数据库中的数据表。\n\n文档\n> 文档（document）是ElasticSearch中存储的主要实体。每个ElasticSearch文档类比关系型数据库中数据表的没一行数据。\n文档由字段（行数据的列）组成，一个文档由多个字段组成，并且ElasticSearch允许一个字段重复出现多次，该类型字段被称为多只字段。每个字段对应一种类型（字符串型、数值型、日期型等），并且ElasticSearch可以自动确定字段类型。不同于关系型数据库，ElasticSearch的文档结构可以是不固定的。即不同的文档可以有不同的字段集合。\n\n文档类型\n> ElasticSearch中，一个索引可以存储许多不同用途的对象。按照不同的用途我们可以将文档划分成不同的类型加以区分。\n\n节点和集群\n> ElasticSearch既可以作为一个独立搜索服务器工作，也支持多台一起协作进行运行，构成一个集群（cluster），其中的每个服务器被称为节点（node）。ElasticSearch可以通过索引分片,将海量的数据进行分割并分布到不同的节点，来实现更强的可用性和更高的性能。\n\n分片\n> 对于存储大规模的文档，ElasticSearch会将数据进行切分，每部分切成一个单独的Apache Lucene索引，称为分片（shared）。每个分片可以存储在集群的不同的节点上，当一个查询需要用到多个分片时，ElasticSearch会将请求发送至多个分片，之后结果进行合并。\n\n副本\n> 分片副本是对原始分片的一个拷贝，每个主分片可以有零个或者多个副分片。当主分片丢失时，副分片就会被提升为主分片。启用分片副本功能，可以提高查询的吞吐或实现系统的高可用性。\n\n## 安装\n### 环境准备\n\nJDK6+\n\nJDK的安装方式比较简单，只需将下载回来的程序包解压到相应的目录即可。\n```\nwget http://download.oracle.com/otn-pub/java/jdk/8u101-b13/jdk-8u101-linux-x64.tar.gz\nmkdir /usr/local/java\ntar -zxf jdk-8u101-linux-x64.tar.gz -C /usr/local/java/\n```\n设置JDK的环境变量，如下：\n```\n# tail -3 ~/.bash_profile\nexport JAVA_HOME=/usr/local/java/jdk1.8.0_101\nexport PATH=$PATH:$JAVA_HOME/bin\nexportCLASSPATH=.:$JAVA_HOME/lib/tools.jar:$JAVA_HOME/lib/dt.jar:$CLASSPATH\n```\n重新加载环境变量\n```\n# source .bash_profile\n```\n在Shell提示符中执行java –version命令，显示如下结果，说明安装成功：\n```\n# java -version\njava version \"1.8.0_45\"\nJava(TM) SE Runtime Environment (build 1.8.0_45-b14)\nJava HotSpot(TM) 64-Bit Server VM (build 25.45-b02,mixed mode)\n```\n\n### 安装Elasticsearch\n\n下载Elasticsearch后，解压到对应的目录就完成Elasticsearch的安装。\n```\n# wget https://download.elasticsearch.org/elasticsearch/elasticsearch/elasticsearch-1.7.0.zip\n# unzip elasticsearch-1.7.0.zip\n# mv elasticsearch-1.7.0 /usr/local/elasticsearch\n```\n\n\n\n\n### 目录结构\n```\nelasticsearch/\n├── bin\n│   ...#运行elasticsearch和进行插件管理所需的脚本\n├── config\n│   ...#elasticsearch配置文件所在目录\n├── data\n│   ...#存储elasticsearch用到的数据\n├── lib\n│   ...#elasticsearch运行中用到的库\n├── LICENSE.txt\n├── logs\n│   ...#存储elasticsearch运行中产生的事件信息和错误信息\n├── nohup\n├── NOTICE.txt\n└── README.textile\n\n10 directories, 60 files\n```\n\n\n### 配置\n所有的配置文件都位于config目录下。该目录下包含两个文件。\n```\n├── config\n│   ├── elasticsearch.yml\n│   └── logging.yml\n```\n\nelasticsearch.yml\n> 负责设置服务器的默认配置。\n> 比较重要的两个值cluster.name 和 node.name.\n> - cluster.name,保存的是集群名称。通过集群名称可以区分不同的集群。配置具有相同名称的节点将尝试组成一个集群。\n> - node.name，节点名称。我们也可以不指定该名称，elasticsearch会自动为节点选择一个唯一名称。但每次启动时这个唯一名称会发生改变。\n\n其他配置\n```\n##################### Elasticsearch Configuration Example #####################\n\n＃此文件包含各种配置设置的概述，\n＃针对操作人员。应用程序开发人员应该\n＃在咨询<http://elasticsearch.org/guide>指南。\n#\n＃安装过程被覆盖在\n＃<http://elasticsearch.org/guide/en/elasticsearch/reference/current/setup.html>。\n#\n＃Elasticsearch附带了大多数设置合理的默认值，\n＃所以你可以尝试使用它而不用修改。\n#\n＃大多数时候，这些默认值是蛮好的运行生产\n＃集群。如果你正在微调群集，或者想知道的某些配置选项＃效果，请_DO ask_上\n＃邮件列表或IRC频道[http://elasticsearch.org/community。\n#\n＃配置中的任何元素都可以用环境变量替换\n＃通过将它们放置在$ {...}符号。 例如：\n#\n#node.rack: ${RACK_ENV_VAR}\n\n＃有关支持的格式和配置文件信息语法，请参阅\n＃<http://elasticsearch.org/guide/en/elasticsearch/reference/current/setup-configuration.html>\n\n################################### Cluster 集群###################################\n\n＃集群名称标识群集的自动发现。如果你在同一个网络上的正在运行多个群集，请确保您使用的是唯一的名称。\n＃\n＃cluster.name：elasticsearch\n\n#################################### Node 节点#####################################\n\n\n＃节点名称是在启动时动态生成的，但你也可以手动配置它们。你可以给这个节点起一个特定的名称：\n＃\n#node.name: \"Franz Kafka\"\n\n＃每个节点可以被配置为允许或拒绝称为集群主节点，\n＃和允许或拒绝来存储数据。\n＃\n＃允许此节点可以作为主节点（默认启用）：\n＃\n#node.master: true\n#\n# 允许此节点可以用来存储数据（默认启用）：\n#\n#node.data: true\n\n\n＃你可以利用这些设置，以设计高级集群拓扑。\n＃\n＃1，你想这个节点永远不会成为一个主节点，只保存数据。这将是群集的“主力”。\n＃\n＃\n#node.master: false\n#node.data: true\n#\n＃2，你要这个节点只能作为主：不存储任何数据和有免费的资源。这将是群集的“协调员”。\n＃\n＃\n#node.master: true\n#node.data: false\n#\n＃3，你希望这个节点是不是主数据节点，但可以充当“搜索负载平衡器”（取从节点的数据，聚集结果等）\n＃\n#node.master: false\n#node.data: false\n\n\n＃使用群集健康状况API[http://localhost:9200/_cluster/health]，\n＃节点信息API[http://localhost:9200/_nodes]或GUI工具\n＃如<http://www.elasticsearch.org/overview/marvel/>\n＃<http://github.com/karmi/elasticsearch-paramedic>\n＃<http://github.com/lukas-vlcek/bigdesk>和\n＃<http://mobz.github.com/elasticsearch-head>检查群集状态。\n\n\n\n＃一个节点可以有与之关联的通用属性，可用于定制分片分配过滤，或分配意识。\n＃\n＃属性是一个简单的键值对，类似node.key：值，下面是一个例子：\n＃\n#node.rack: rack314\n\n＃默认情况下，多个节点被允许从相同的安装位置\n# 如果要禁用的话，设置如下：\n#node.max_local_storage_nodes: 1\n\n\n#################################### Index 索引####################################\n\n#\n＃您可以设置一些选项（如分片/副本选项，映射或分析器的定义，事务日志设置...）对全局参数，在这个文件中。\n#\n# Note, that it makes more sense to configure index settings specifically for\n# a certain index, either when creating it or by using the index templates API.\n#\n＃请注意，它更有意义专门配置索引设置\n＃某个具体的索引，创造它或使用该索引模板API。\n# See <http://elasticsearch.org/guide/en/elasticsearch/reference/current/index-modules.html> and\n# <http://elasticsearch.org/guide/en/elasticsearch/reference/current/indices-create-index.html>\n# for more information.\n\n\n# 设置一个索引的分片（副本）数量（默认 5）\n#\n#index.number_of_shards: 5\n\n＃设置索引（默认值为1）的副本（额外副本）数量：\n＃\n#index.number_of_replicas: 1\n\n# Note, that for development on a local machine, with small indices, it usually\n# makes sense to \"disable\" the distributed features:\n#\n＃注意，对于在本地机器，它通常比较小的值。禁用分布式特点是很有必要的\n＃\n#index.number_of_shards: 1\n#index.number_of_replicas: 0\n\n\n＃这些设置直接影响索引和搜索操作的性能\n＃在集群中。假设你有足够多的机器来保存分片及\n＃副本，经验法则是：\n#\n# 1. 更多的分片能提高索引效率，一个大的索引允许存储在不同的服务器上\n# 2. 更多的副本能够提高搜索效率，并且能够增强系统的可用性\n#\n#  \"number_of_shards\" 对于一个索引不能动态修改设置一次.\n#\n# T \"number_of_replicas\" 可以增加或者减少在任何时候，通过索引更新或者api操作\n#\n# Elasticsearch takes care about load balancing, relocating, gathering the\n# results from nodes, etc. Experiment with different settings to fine-tune\n# your setup.\n\n＃Elasticsearch需要关心负载均衡，搬迁，从节点收集结果，等。\n# 你可以通过不断的微调进行设置\n\n＃使用索引状态API（<http://localhost:9200/A/_status>）检查\n＃索引状态。\n\n\n#################################### Paths ####################################\n\n# 路径包含目录配置（此文件并logging.yml）：\n#path.conf: /path/to/conf\n\n# 索引数据存储路径配置\n#path.data: /path/to/data\n#\n＃可以任选地包括一个以上的位置，方便扩展和使用。 例如：\n#\n#path.data: /path/to/data1,/path/to/data2\n\n# 临时文件路径：\n#\n#path.work: /path/to/work\n\n# 日志文件路径:\n#\n#path.logs: /path/to/logs\n\n# 插件安装目录\n#\n#path.plugins: /path/to/plugins\n\n\n#################################### Plugin ###################################\n\n# 如果这里列出的插件没有安装用于当前节点，该节点将无法启动。\n#\n#plugin.mandatory: mapper-attachments,lang-groovy\n\n\n################################### Memory ####################################\n\n＃Elasticsearch表现不佳时，JVM启动交换：你应该确保它永远不会_交换。\n#\n# 将此属性设置为true锁定内存：\n#\n#bootstrap.mlockall: true\n\n\n# 确保ES_MIN_MEM和ES_MAX_MEM环境变量设置\n＃为相同的值，并且该机器有足够的内存来分配\n＃为Elasticsearch，留出足够的内存为操作系统本身。\n＃\n#\n# You should also make sure that the Elasticsearch process is allowed to lock\n# the memory, eg. by using `ulimit -l unlimited`.\n# 你还应该确保该Elasticsearch允许进程锁定内存\n＃例如。通过使用`ulimit -l unlimited`。\n\n############################## Network And HTTP ###############################\n\n\n＃Elasticsearch，默认情况下，本身绑定到0.0.0.0地址，并监听\n＃端口[9200-9300] HTTP流量和端口[9300-9400]节点到节点\n＃沟通。（范围意味着，如果端口忙，它会自动将\n＃尝试下口）。\n\n# 设置绑定专用地址（IPv4或IPv6）：\n#network.bind_host: 192.168.0.1\n\n＃设置其他节点将使用与该节点通信的地址。否则\n＃，它会自动的产生。它必须指向一个实际的IP地址。\n#\n#network.publish_host: 192.168.0.1\n\n# 同时设置“bind_host'和'publish_host”：\n#\n#network.host: 192.168.0.1\n\n# 设置一个自定义的节点间通讯端口，（默认为 9300）\n#transport.tcp.port: 9300\n\n# 启用节点间通讯压缩\n#\n#transport.tcp.compress: true\n\n# 设置自定义端口侦听HTTP流量：\n#\n#http.port: 9200\n\n# 设置自定义允许的内容长度：\n#\n#http.max_content_length: 100mb\n\n# 完全禁用HTTP：\n#\n#http.enabled: false\n\n\n################################### Gateway ###################################\n\n\n＃网关允许持收集集群之间的群集状态\n＃集群中每个状态改变（例如添加一个索引），都将会存储\n＃在网关，并且当集群首次启动时，\n＃它会从网关读出其状态。\n\n\n＃有几种类型的网关实现的。欲了解更多信息，请参阅\n# <http://elasticsearch.org/guide/en/elasticsearch/reference/current/modules-gateway.html>.\n\n＃默认网关类型为“本地”网关（推荐）：\n#\n#gateway.type: local\n\n# 设置当集群崩溃时，如何重新启动并恢复进程（使用共享网关时，尽可能多的使用本地数据）\n\n# 允许恢复后，在一个集群中有N个节点：\n#\n#gateway.recover_after_nodes: 1\n\n＃设置超时时间，在启动恢复过程中，前面设置的N个节点全部重启（接受时间值）：\n#\n\n#gateway.recover_after_time: 5m\n\n＃设置在一个句群众预计的节点数\n#一旦这些N个节点全部启用（满足recover_after_nodes），立即开始恢复过程（无需等待恢复时间后到期）：\n#\n#gateway.expected_nodes: 2\n\n\n############################# Recovery Throttling 恢复节流 #############################\n\n\n＃这些设置可以控制碎片分配的过程，在节点恢复期间、副本定位、重新平衡，或添加和删除节点时\n\n\n#\n# 设置一个节点上同时恢复数量\n# 1. 初步恢复期间\n#\n#cluster.routing.allocation.node_initial_primaries_recoveries: 4\n#\n# 2. 在添加/删除节点，再平衡期间\n#\n#cluster.routing.allocation.node_concurrent_recoveries: 2\n\n# 设置一个恢复时的吞吐量值（如100MB，默认20MB）\n#\n#indices.recovery.max_bytes_per_sec: 20mb\n\n\n# 设置一个并发流数量限制，在同级别的分片恢复时\n#\n#indices.recovery.concurrent_streams: 5\n\n\n################################## Discovery 发现##################################\n\n\n＃发现基础设施，确保节点可以在群集内找到和主节点的选举。是默认是通过多播方式来进行发现。\n\n# 设置一个节点确保能在集群内发现N个其他合格的节点能成为主节点。\n\n#discovery.zen.minimum_master_nodes: 1\n\n\n# 设置一个过期时间，在通过ping发现其他节点时\n# 在一个较差的网络环境中设置一个较长的值，可以最大限度的减少报错\n\n#discovery.zen.ping.timeout: 3s\n\n# 更多的信息，请看\n# <http://elasticsearch.org/guide/en/elasticsearch/reference/current/modules-discovery-zen.html>\n\n\n＃单播发现允许明确地控制哪些节点将被用于发现群集。它可以在多播不存在，或限制集群通信时使用。\n#\n# 1. 多播发现（默认启用）\n#\n#discovery.zen.ping.multicast.enabled: false\n#\n# 2. 配置一个初始清单在集群的主节点上，为了发现一个刚启用的节点\n#\n#discovery.zen.ping.unicast.hosts: [\"host1\", \"host2:port\"]\n\n# 为了发现 ，EC2允许使用AWS EC2 API\n# 你必须安装云AWS插件启用EC2发现。\n#\n# 更多信息请查看\n# <http://elasticsearch.org/guide/en/elasticsearch/reference/current/modules-discovery-ec2.html>\n#\n# See <http://elasticsearch.org/tutorials/elasticsearch-on-ec2/>\n# 一步一步的教程\n\n# 为了发现 ，GCE发现允许使用谷歌Compute Engine的API\n#\n# 你必须安装云GCE GCE插件启用的发现。\n#\n# For more information, see <https://github.com/elasticsearch/elasticsearch-cloud-gce>.\n\n# Azure的发现允许以执行发现使用Azure的API。\n#\n# 你必须安装云cloud-azure插件启用的发现。\n# For more information, see <https://github.com/elasticsearch/elasticsearch-cloud-azure>.\n\n################################## Slow Log ##################################\n\n# 分片级查询并会的对应等级的日志\n\n#index.search.slowlog.threshold.query.warn: 10s\n#index.search.slowlog.threshold.query.info: 5s\n#index.search.slowlog.threshold.query.debug: 2s\n#index.search.slowlog.threshold.query.trace: 500ms\n\n#index.search.slowlog.threshold.fetch.warn: 1s\n#index.search.slowlog.threshold.fetch.info: 800ms\n#index.search.slowlog.threshold.fetch.debug: 500ms\n#index.search.slowlog.threshold.fetch.trace: 200ms\n\n#index.indexing.slowlog.threshold.index.warn: 10s\n#index.indexing.slowlog.threshold.index.info: 5s\n#index.indexing.slowlog.threshold.index.debug: 2s\n#index.indexing.slowlog.threshold.index.trace: 500ms\n\n################################## GC Logging ################################\n\n#monitor.jvm.gc.young.warn: 1000ms\n#monitor.jvm.gc.young.info: 700ms\n#monitor.jvm.gc.young.debug: 400ms\n\n#monitor.jvm.gc.old.warn: 10s\n#monitor.jvm.gc.old.info: 5s\n#monitor.jvm.gc.old.debug: 2s\n\n################################## Security ################################\n\n# Uncomment if you want to enable JSONP as a valid return transport on the\n# http server. With this enabled, it may pose a security risk, so disabling\n# it unless you need it is recommended (it is disabled by default).\n\n＃不推荐，如果要启用JSONP作为HTTP服务器上的返回。\n#启用此功能，它可能会带来安全风险，因此禁用它，除非你需要的建议（它被默认禁用）。\n\n#http.jsonp.enable: true\n\n```\n\n\n\nlogging.yml\n> 定义多少信息写入系统日志、定义日志文件，并定期创建新文件\n\n\n\n### 管理\n启动Elasticsearch\n```\n# /usr/local/elasticsearch/bin/elasticsearch  -d\n```\n> -d 表示将进程放入后台运行\n\n或者通过\u0004nohup命令\n```\n# nohup /usr/local/elasticsearch/bin/elasticsearch > nohup\n```\n\n将elasticsearch设置成开机自启动\n```\n# echo \"nohup /usr/local/elasticsearch/bin/elasticsearch > nohup\" > /etc/rc.local\n```\n\n确认elasticsearch的9200端口已监听，说明elasticsearch已成功运行\n\n```\n# netstat -anp |grep :9200\ntcp        0      0 :::9200                     :::*                        LISTEN      3362/java\n```\n如何关闭elasticsearch\n- 方法一：如果节点与控制台相连并且当前elasticsearch是使用-f选项运行，则只需要按下Ctrl+C组合键即可\n- 方法二：通过发送TERM信号来终止服务器进程 kill -9 进程ID\n- 方法三：使用REST API\n\n关闭整个集群\n```\n# curl -XPOST http://localhost:9200/_cluster/nodes/_shutdown\n```\n关闭单个节点\n```\n# curl -XPOST  http://127.0.0.1:9200/_cluster/nodes/2ens0yuEQ12G6ct1UDpihQ/_shutdown\n```\n2ens0yuEQ12G6ct1UDpihQ ，为要关闭的节点标志符\n\n查看节点标志符，可以从elasticsearch日志中或者通过REST API中获得\n```\n# curl http://localhost:9200/_nodes/?pretty\n{\n  \"cluster_name\" : \"elasticsearch\",\n  \"nodes\" : {\n    \"13QfvIdATEurGAhVAlO6tQ\" : {\n      \"name\" : \"Edwin Jarvis\",\n      ...\n    }\n  }\n}\n```\n13QfvIdATEurGAhVAlO6tQ,即为节点标志符\n\n\n### 测试\n```\n# curl http://localhost:9200\n{\n  \"status\" : 200,\n  \"name\" : \"Destroyer of Demons\",\n  \"cluster_name\" : \"elasticsearch\",\n  \"version\" : {\n    \"number\" : \"1.7.0\",\n    \"build_hash\" : \"929b9739cae115e73c346cb5f9a6f24ba735a743\",\n    \"build_timestamp\" : \"2015-07-16T14:31:07Z\",\n    \"build_snapshot\" : false,\n    \"lucene_version\" : \"4.10.4\"\n  },\n  \"tagline\" : \"You Know, for Search\"\n}\n```\n查看elasticsearch服务器当前运行状况\n```\n# curl http://localhost:9200/_cluster/health?pretty\n{\n  \"cluster_name\" : \"elasticsearch\",\n  \"status\" : \"green\",\n  \"timed_out\" : false,\n  \"number_of_nodes\" : 1,\n  \"number_of_data_nodes\" : 1,\n  \"active_primary_shards\" : 0,\n  \"active_shards\" : 0,\n  \"relocating_shards\" : 0,\n  \"initializing_shards\" : 0,\n  \"unassigned_shards\" : 0,\n  \"delayed_unassigned_shards\" : 0,\n  \"number_of_pending_tasks\" : 0,\n  \"number_of_in_flight_fetch\" : 0\n}\n```\n\n## 使用（基于REST API数据操作）\n\n### REST\nREST 定义了一组体系架构原则，您可以根据这些原则设计以系统资源为中心的 Web 服务，包括使用不同语言编写的客户端如何通过 HTTP 处理和传输资源状态。 在类似于REST架构中，每个请求都会被定向到地址路径部分所指的具体对象上。\n### 创建文档\n\n示例：创建一个文档用来存储一篇blog，内容如下：\n```\n{\n  \"title\":\"my first article title\",\n  \"content\":\"this is article content\",\n  \"date\":\"2016-10-05\"\n}\n```\n操作：\n```\n# curl -XPUT  http://localhost:9200/blog/article/1 -d '{\"title\":\"my first article title\",\"content\":\"this is article content\",\"date\":\"2016-10-05\"}'\n```\n返回结果如下：\n```\n{\"_index\":\"blog\",\"_type\":\"article\",\"_id\":\"1\",\"_version\":1,\"created\":true}\n```\n返回了操作结果信息，并显示新文档的存储位置。并且包含文档的唯一标识符以及当前版本信息。\n\n### 检索文档\n按照REST风格，我们想要查看刚才创建的文档。\n```\n# curl -XGET  http://localhost:9200/blog/article/1\n```\n结果\n```\ncurl -XGET  http://localhost:9200/blog/article/1?pretty\n{\n  \"_index\" : \"blog\",\n  \"_type\" : \"article\",\n  \"_id\" : \"1\",\n  \"_version\" : 1,\n  \"found\" : true,\n  \"_source\":{\"title\":\"my first article title\",\"content\":\"this is article content\",\"date\":\"2016-10-05\"}\n}\n```\n### 更新文档\nElasticsearch中更新索引中的文档是非常复杂的工作。必须先提取文档、从_source字段获得数据、移除旧文档、应用变更，作为新文档创建索引。\n\n示例，更改之前创建的blog，并增加author字段\n```\n# curl -XPOST  http://localhost:9200/blog/article/1 -d '{\"title\":\"my first article title\",\"content\":\"this is article content\",\"date\":\"2016-10-05\",\"author\":\"zhimiao\"}'\n```\n结果：\n```\n# {\"_index\":\"blog\",\"_type\":\"article\",\"_id\":\"1\",\"_version\":3,\"created\":false}\n```\n\n查看是否更新成功\n```\n# curl -XGET  http://localhost:9200/blog/article/1?pretty\n{\n  \"_index\" : \"blog\",\n  \"_type\" : \"article\",\n  \"_id\" : \"1\",\n  \"_version\" : 4,\n  \"found\" : true,\n  \"_source\":{\"title\":\"my first article title\",\"content\":\"this is article content\",\"date\":\"2016-10-05\",\"author\":\"zhimiao\"}\n}\n```\n\n### 删除文档\n\n```\n# curl -XDELETE  http://localhost:9200/blog/article/1?pretty\n{\n  \"found\" : true,\n  \"_index\" : \"blog\",\n  \"_type\" : \"article\",\n  \"_id\" : \"1\",\n  \"_version\" : 7\n}\n```\n查看是否已删除\n```\n# curl -XGET  http://localhost:9200/blog/article/1?pretty\n{\n  \"_index\" : \"blog\",\n  \"_type\" : \"article\",\n  \"_id\" : \"1\",\n  \"found\" : false\n}\n```\n","source":"_posts/ElasticSearch整理.md","raw":"---\ntitle: ElasticSearch整理\ndate: 2016-10-05 21:00:00\ntags:\n- ElasticSearch\ncategories:\n- Linux\n---\n\nElasticSearch是由Shay Banon发起的一个开源搜索服务器项目。由于其分布式特性和实时搜索能力，成为当前搜索和数据分析解决方案领域的重要成员。\n\n\n![ElasticSearch](http://n.sinaimg.cn/games/3ece443e/20161006/ElasticSearch.png)\n\n<!-- more -->\n## 基本概念\n索引\n> 索引（index）是ElasticSearch存放数据的一种逻辑结构。类比关系型数据库中的数据表。\n\n文档\n> 文档（document）是ElasticSearch中存储的主要实体。每个ElasticSearch文档类比关系型数据库中数据表的没一行数据。\n文档由字段（行数据的列）组成，一个文档由多个字段组成，并且ElasticSearch允许一个字段重复出现多次，该类型字段被称为多只字段。每个字段对应一种类型（字符串型、数值型、日期型等），并且ElasticSearch可以自动确定字段类型。不同于关系型数据库，ElasticSearch的文档结构可以是不固定的。即不同的文档可以有不同的字段集合。\n\n文档类型\n> ElasticSearch中，一个索引可以存储许多不同用途的对象。按照不同的用途我们可以将文档划分成不同的类型加以区分。\n\n节点和集群\n> ElasticSearch既可以作为一个独立搜索服务器工作，也支持多台一起协作进行运行，构成一个集群（cluster），其中的每个服务器被称为节点（node）。ElasticSearch可以通过索引分片,将海量的数据进行分割并分布到不同的节点，来实现更强的可用性和更高的性能。\n\n分片\n> 对于存储大规模的文档，ElasticSearch会将数据进行切分，每部分切成一个单独的Apache Lucene索引，称为分片（shared）。每个分片可以存储在集群的不同的节点上，当一个查询需要用到多个分片时，ElasticSearch会将请求发送至多个分片，之后结果进行合并。\n\n副本\n> 分片副本是对原始分片的一个拷贝，每个主分片可以有零个或者多个副分片。当主分片丢失时，副分片就会被提升为主分片。启用分片副本功能，可以提高查询的吞吐或实现系统的高可用性。\n\n## 安装\n### 环境准备\n\nJDK6+\n\nJDK的安装方式比较简单，只需将下载回来的程序包解压到相应的目录即可。\n```\nwget http://download.oracle.com/otn-pub/java/jdk/8u101-b13/jdk-8u101-linux-x64.tar.gz\nmkdir /usr/local/java\ntar -zxf jdk-8u101-linux-x64.tar.gz -C /usr/local/java/\n```\n设置JDK的环境变量，如下：\n```\n# tail -3 ~/.bash_profile\nexport JAVA_HOME=/usr/local/java/jdk1.8.0_101\nexport PATH=$PATH:$JAVA_HOME/bin\nexportCLASSPATH=.:$JAVA_HOME/lib/tools.jar:$JAVA_HOME/lib/dt.jar:$CLASSPATH\n```\n重新加载环境变量\n```\n# source .bash_profile\n```\n在Shell提示符中执行java –version命令，显示如下结果，说明安装成功：\n```\n# java -version\njava version \"1.8.0_45\"\nJava(TM) SE Runtime Environment (build 1.8.0_45-b14)\nJava HotSpot(TM) 64-Bit Server VM (build 25.45-b02,mixed mode)\n```\n\n### 安装Elasticsearch\n\n下载Elasticsearch后，解压到对应的目录就完成Elasticsearch的安装。\n```\n# wget https://download.elasticsearch.org/elasticsearch/elasticsearch/elasticsearch-1.7.0.zip\n# unzip elasticsearch-1.7.0.zip\n# mv elasticsearch-1.7.0 /usr/local/elasticsearch\n```\n\n\n\n\n### 目录结构\n```\nelasticsearch/\n├── bin\n│   ...#运行elasticsearch和进行插件管理所需的脚本\n├── config\n│   ...#elasticsearch配置文件所在目录\n├── data\n│   ...#存储elasticsearch用到的数据\n├── lib\n│   ...#elasticsearch运行中用到的库\n├── LICENSE.txt\n├── logs\n│   ...#存储elasticsearch运行中产生的事件信息和错误信息\n├── nohup\n├── NOTICE.txt\n└── README.textile\n\n10 directories, 60 files\n```\n\n\n### 配置\n所有的配置文件都位于config目录下。该目录下包含两个文件。\n```\n├── config\n│   ├── elasticsearch.yml\n│   └── logging.yml\n```\n\nelasticsearch.yml\n> 负责设置服务器的默认配置。\n> 比较重要的两个值cluster.name 和 node.name.\n> - cluster.name,保存的是集群名称。通过集群名称可以区分不同的集群。配置具有相同名称的节点将尝试组成一个集群。\n> - node.name，节点名称。我们也可以不指定该名称，elasticsearch会自动为节点选择一个唯一名称。但每次启动时这个唯一名称会发生改变。\n\n其他配置\n```\n##################### Elasticsearch Configuration Example #####################\n\n＃此文件包含各种配置设置的概述，\n＃针对操作人员。应用程序开发人员应该\n＃在咨询<http://elasticsearch.org/guide>指南。\n#\n＃安装过程被覆盖在\n＃<http://elasticsearch.org/guide/en/elasticsearch/reference/current/setup.html>。\n#\n＃Elasticsearch附带了大多数设置合理的默认值，\n＃所以你可以尝试使用它而不用修改。\n#\n＃大多数时候，这些默认值是蛮好的运行生产\n＃集群。如果你正在微调群集，或者想知道的某些配置选项＃效果，请_DO ask_上\n＃邮件列表或IRC频道[http://elasticsearch.org/community。\n#\n＃配置中的任何元素都可以用环境变量替换\n＃通过将它们放置在$ {...}符号。 例如：\n#\n#node.rack: ${RACK_ENV_VAR}\n\n＃有关支持的格式和配置文件信息语法，请参阅\n＃<http://elasticsearch.org/guide/en/elasticsearch/reference/current/setup-configuration.html>\n\n################################### Cluster 集群###################################\n\n＃集群名称标识群集的自动发现。如果你在同一个网络上的正在运行多个群集，请确保您使用的是唯一的名称。\n＃\n＃cluster.name：elasticsearch\n\n#################################### Node 节点#####################################\n\n\n＃节点名称是在启动时动态生成的，但你也可以手动配置它们。你可以给这个节点起一个特定的名称：\n＃\n#node.name: \"Franz Kafka\"\n\n＃每个节点可以被配置为允许或拒绝称为集群主节点，\n＃和允许或拒绝来存储数据。\n＃\n＃允许此节点可以作为主节点（默认启用）：\n＃\n#node.master: true\n#\n# 允许此节点可以用来存储数据（默认启用）：\n#\n#node.data: true\n\n\n＃你可以利用这些设置，以设计高级集群拓扑。\n＃\n＃1，你想这个节点永远不会成为一个主节点，只保存数据。这将是群集的“主力”。\n＃\n＃\n#node.master: false\n#node.data: true\n#\n＃2，你要这个节点只能作为主：不存储任何数据和有免费的资源。这将是群集的“协调员”。\n＃\n＃\n#node.master: true\n#node.data: false\n#\n＃3，你希望这个节点是不是主数据节点，但可以充当“搜索负载平衡器”（取从节点的数据，聚集结果等）\n＃\n#node.master: false\n#node.data: false\n\n\n＃使用群集健康状况API[http://localhost:9200/_cluster/health]，\n＃节点信息API[http://localhost:9200/_nodes]或GUI工具\n＃如<http://www.elasticsearch.org/overview/marvel/>\n＃<http://github.com/karmi/elasticsearch-paramedic>\n＃<http://github.com/lukas-vlcek/bigdesk>和\n＃<http://mobz.github.com/elasticsearch-head>检查群集状态。\n\n\n\n＃一个节点可以有与之关联的通用属性，可用于定制分片分配过滤，或分配意识。\n＃\n＃属性是一个简单的键值对，类似node.key：值，下面是一个例子：\n＃\n#node.rack: rack314\n\n＃默认情况下，多个节点被允许从相同的安装位置\n# 如果要禁用的话，设置如下：\n#node.max_local_storage_nodes: 1\n\n\n#################################### Index 索引####################################\n\n#\n＃您可以设置一些选项（如分片/副本选项，映射或分析器的定义，事务日志设置...）对全局参数，在这个文件中。\n#\n# Note, that it makes more sense to configure index settings specifically for\n# a certain index, either when creating it or by using the index templates API.\n#\n＃请注意，它更有意义专门配置索引设置\n＃某个具体的索引，创造它或使用该索引模板API。\n# See <http://elasticsearch.org/guide/en/elasticsearch/reference/current/index-modules.html> and\n# <http://elasticsearch.org/guide/en/elasticsearch/reference/current/indices-create-index.html>\n# for more information.\n\n\n# 设置一个索引的分片（副本）数量（默认 5）\n#\n#index.number_of_shards: 5\n\n＃设置索引（默认值为1）的副本（额外副本）数量：\n＃\n#index.number_of_replicas: 1\n\n# Note, that for development on a local machine, with small indices, it usually\n# makes sense to \"disable\" the distributed features:\n#\n＃注意，对于在本地机器，它通常比较小的值。禁用分布式特点是很有必要的\n＃\n#index.number_of_shards: 1\n#index.number_of_replicas: 0\n\n\n＃这些设置直接影响索引和搜索操作的性能\n＃在集群中。假设你有足够多的机器来保存分片及\n＃副本，经验法则是：\n#\n# 1. 更多的分片能提高索引效率，一个大的索引允许存储在不同的服务器上\n# 2. 更多的副本能够提高搜索效率，并且能够增强系统的可用性\n#\n#  \"number_of_shards\" 对于一个索引不能动态修改设置一次.\n#\n# T \"number_of_replicas\" 可以增加或者减少在任何时候，通过索引更新或者api操作\n#\n# Elasticsearch takes care about load balancing, relocating, gathering the\n# results from nodes, etc. Experiment with different settings to fine-tune\n# your setup.\n\n＃Elasticsearch需要关心负载均衡，搬迁，从节点收集结果，等。\n# 你可以通过不断的微调进行设置\n\n＃使用索引状态API（<http://localhost:9200/A/_status>）检查\n＃索引状态。\n\n\n#################################### Paths ####################################\n\n# 路径包含目录配置（此文件并logging.yml）：\n#path.conf: /path/to/conf\n\n# 索引数据存储路径配置\n#path.data: /path/to/data\n#\n＃可以任选地包括一个以上的位置，方便扩展和使用。 例如：\n#\n#path.data: /path/to/data1,/path/to/data2\n\n# 临时文件路径：\n#\n#path.work: /path/to/work\n\n# 日志文件路径:\n#\n#path.logs: /path/to/logs\n\n# 插件安装目录\n#\n#path.plugins: /path/to/plugins\n\n\n#################################### Plugin ###################################\n\n# 如果这里列出的插件没有安装用于当前节点，该节点将无法启动。\n#\n#plugin.mandatory: mapper-attachments,lang-groovy\n\n\n################################### Memory ####################################\n\n＃Elasticsearch表现不佳时，JVM启动交换：你应该确保它永远不会_交换。\n#\n# 将此属性设置为true锁定内存：\n#\n#bootstrap.mlockall: true\n\n\n# 确保ES_MIN_MEM和ES_MAX_MEM环境变量设置\n＃为相同的值，并且该机器有足够的内存来分配\n＃为Elasticsearch，留出足够的内存为操作系统本身。\n＃\n#\n# You should also make sure that the Elasticsearch process is allowed to lock\n# the memory, eg. by using `ulimit -l unlimited`.\n# 你还应该确保该Elasticsearch允许进程锁定内存\n＃例如。通过使用`ulimit -l unlimited`。\n\n############################## Network And HTTP ###############################\n\n\n＃Elasticsearch，默认情况下，本身绑定到0.0.0.0地址，并监听\n＃端口[9200-9300] HTTP流量和端口[9300-9400]节点到节点\n＃沟通。（范围意味着，如果端口忙，它会自动将\n＃尝试下口）。\n\n# 设置绑定专用地址（IPv4或IPv6）：\n#network.bind_host: 192.168.0.1\n\n＃设置其他节点将使用与该节点通信的地址。否则\n＃，它会自动的产生。它必须指向一个实际的IP地址。\n#\n#network.publish_host: 192.168.0.1\n\n# 同时设置“bind_host'和'publish_host”：\n#\n#network.host: 192.168.0.1\n\n# 设置一个自定义的节点间通讯端口，（默认为 9300）\n#transport.tcp.port: 9300\n\n# 启用节点间通讯压缩\n#\n#transport.tcp.compress: true\n\n# 设置自定义端口侦听HTTP流量：\n#\n#http.port: 9200\n\n# 设置自定义允许的内容长度：\n#\n#http.max_content_length: 100mb\n\n# 完全禁用HTTP：\n#\n#http.enabled: false\n\n\n################################### Gateway ###################################\n\n\n＃网关允许持收集集群之间的群集状态\n＃集群中每个状态改变（例如添加一个索引），都将会存储\n＃在网关，并且当集群首次启动时，\n＃它会从网关读出其状态。\n\n\n＃有几种类型的网关实现的。欲了解更多信息，请参阅\n# <http://elasticsearch.org/guide/en/elasticsearch/reference/current/modules-gateway.html>.\n\n＃默认网关类型为“本地”网关（推荐）：\n#\n#gateway.type: local\n\n# 设置当集群崩溃时，如何重新启动并恢复进程（使用共享网关时，尽可能多的使用本地数据）\n\n# 允许恢复后，在一个集群中有N个节点：\n#\n#gateway.recover_after_nodes: 1\n\n＃设置超时时间，在启动恢复过程中，前面设置的N个节点全部重启（接受时间值）：\n#\n\n#gateway.recover_after_time: 5m\n\n＃设置在一个句群众预计的节点数\n#一旦这些N个节点全部启用（满足recover_after_nodes），立即开始恢复过程（无需等待恢复时间后到期）：\n#\n#gateway.expected_nodes: 2\n\n\n############################# Recovery Throttling 恢复节流 #############################\n\n\n＃这些设置可以控制碎片分配的过程，在节点恢复期间、副本定位、重新平衡，或添加和删除节点时\n\n\n#\n# 设置一个节点上同时恢复数量\n# 1. 初步恢复期间\n#\n#cluster.routing.allocation.node_initial_primaries_recoveries: 4\n#\n# 2. 在添加/删除节点，再平衡期间\n#\n#cluster.routing.allocation.node_concurrent_recoveries: 2\n\n# 设置一个恢复时的吞吐量值（如100MB，默认20MB）\n#\n#indices.recovery.max_bytes_per_sec: 20mb\n\n\n# 设置一个并发流数量限制，在同级别的分片恢复时\n#\n#indices.recovery.concurrent_streams: 5\n\n\n################################## Discovery 发现##################################\n\n\n＃发现基础设施，确保节点可以在群集内找到和主节点的选举。是默认是通过多播方式来进行发现。\n\n# 设置一个节点确保能在集群内发现N个其他合格的节点能成为主节点。\n\n#discovery.zen.minimum_master_nodes: 1\n\n\n# 设置一个过期时间，在通过ping发现其他节点时\n# 在一个较差的网络环境中设置一个较长的值，可以最大限度的减少报错\n\n#discovery.zen.ping.timeout: 3s\n\n# 更多的信息，请看\n# <http://elasticsearch.org/guide/en/elasticsearch/reference/current/modules-discovery-zen.html>\n\n\n＃单播发现允许明确地控制哪些节点将被用于发现群集。它可以在多播不存在，或限制集群通信时使用。\n#\n# 1. 多播发现（默认启用）\n#\n#discovery.zen.ping.multicast.enabled: false\n#\n# 2. 配置一个初始清单在集群的主节点上，为了发现一个刚启用的节点\n#\n#discovery.zen.ping.unicast.hosts: [\"host1\", \"host2:port\"]\n\n# 为了发现 ，EC2允许使用AWS EC2 API\n# 你必须安装云AWS插件启用EC2发现。\n#\n# 更多信息请查看\n# <http://elasticsearch.org/guide/en/elasticsearch/reference/current/modules-discovery-ec2.html>\n#\n# See <http://elasticsearch.org/tutorials/elasticsearch-on-ec2/>\n# 一步一步的教程\n\n# 为了发现 ，GCE发现允许使用谷歌Compute Engine的API\n#\n# 你必须安装云GCE GCE插件启用的发现。\n#\n# For more information, see <https://github.com/elasticsearch/elasticsearch-cloud-gce>.\n\n# Azure的发现允许以执行发现使用Azure的API。\n#\n# 你必须安装云cloud-azure插件启用的发现。\n# For more information, see <https://github.com/elasticsearch/elasticsearch-cloud-azure>.\n\n################################## Slow Log ##################################\n\n# 分片级查询并会的对应等级的日志\n\n#index.search.slowlog.threshold.query.warn: 10s\n#index.search.slowlog.threshold.query.info: 5s\n#index.search.slowlog.threshold.query.debug: 2s\n#index.search.slowlog.threshold.query.trace: 500ms\n\n#index.search.slowlog.threshold.fetch.warn: 1s\n#index.search.slowlog.threshold.fetch.info: 800ms\n#index.search.slowlog.threshold.fetch.debug: 500ms\n#index.search.slowlog.threshold.fetch.trace: 200ms\n\n#index.indexing.slowlog.threshold.index.warn: 10s\n#index.indexing.slowlog.threshold.index.info: 5s\n#index.indexing.slowlog.threshold.index.debug: 2s\n#index.indexing.slowlog.threshold.index.trace: 500ms\n\n################################## GC Logging ################################\n\n#monitor.jvm.gc.young.warn: 1000ms\n#monitor.jvm.gc.young.info: 700ms\n#monitor.jvm.gc.young.debug: 400ms\n\n#monitor.jvm.gc.old.warn: 10s\n#monitor.jvm.gc.old.info: 5s\n#monitor.jvm.gc.old.debug: 2s\n\n################################## Security ################################\n\n# Uncomment if you want to enable JSONP as a valid return transport on the\n# http server. With this enabled, it may pose a security risk, so disabling\n# it unless you need it is recommended (it is disabled by default).\n\n＃不推荐，如果要启用JSONP作为HTTP服务器上的返回。\n#启用此功能，它可能会带来安全风险，因此禁用它，除非你需要的建议（它被默认禁用）。\n\n#http.jsonp.enable: true\n\n```\n\n\n\nlogging.yml\n> 定义多少信息写入系统日志、定义日志文件，并定期创建新文件\n\n\n\n### 管理\n启动Elasticsearch\n```\n# /usr/local/elasticsearch/bin/elasticsearch  -d\n```\n> -d 表示将进程放入后台运行\n\n或者通过\u0004nohup命令\n```\n# nohup /usr/local/elasticsearch/bin/elasticsearch > nohup\n```\n\n将elasticsearch设置成开机自启动\n```\n# echo \"nohup /usr/local/elasticsearch/bin/elasticsearch > nohup\" > /etc/rc.local\n```\n\n确认elasticsearch的9200端口已监听，说明elasticsearch已成功运行\n\n```\n# netstat -anp |grep :9200\ntcp        0      0 :::9200                     :::*                        LISTEN      3362/java\n```\n如何关闭elasticsearch\n- 方法一：如果节点与控制台相连并且当前elasticsearch是使用-f选项运行，则只需要按下Ctrl+C组合键即可\n- 方法二：通过发送TERM信号来终止服务器进程 kill -9 进程ID\n- 方法三：使用REST API\n\n关闭整个集群\n```\n# curl -XPOST http://localhost:9200/_cluster/nodes/_shutdown\n```\n关闭单个节点\n```\n# curl -XPOST  http://127.0.0.1:9200/_cluster/nodes/2ens0yuEQ12G6ct1UDpihQ/_shutdown\n```\n2ens0yuEQ12G6ct1UDpihQ ，为要关闭的节点标志符\n\n查看节点标志符，可以从elasticsearch日志中或者通过REST API中获得\n```\n# curl http://localhost:9200/_nodes/?pretty\n{\n  \"cluster_name\" : \"elasticsearch\",\n  \"nodes\" : {\n    \"13QfvIdATEurGAhVAlO6tQ\" : {\n      \"name\" : \"Edwin Jarvis\",\n      ...\n    }\n  }\n}\n```\n13QfvIdATEurGAhVAlO6tQ,即为节点标志符\n\n\n### 测试\n```\n# curl http://localhost:9200\n{\n  \"status\" : 200,\n  \"name\" : \"Destroyer of Demons\",\n  \"cluster_name\" : \"elasticsearch\",\n  \"version\" : {\n    \"number\" : \"1.7.0\",\n    \"build_hash\" : \"929b9739cae115e73c346cb5f9a6f24ba735a743\",\n    \"build_timestamp\" : \"2015-07-16T14:31:07Z\",\n    \"build_snapshot\" : false,\n    \"lucene_version\" : \"4.10.4\"\n  },\n  \"tagline\" : \"You Know, for Search\"\n}\n```\n查看elasticsearch服务器当前运行状况\n```\n# curl http://localhost:9200/_cluster/health?pretty\n{\n  \"cluster_name\" : \"elasticsearch\",\n  \"status\" : \"green\",\n  \"timed_out\" : false,\n  \"number_of_nodes\" : 1,\n  \"number_of_data_nodes\" : 1,\n  \"active_primary_shards\" : 0,\n  \"active_shards\" : 0,\n  \"relocating_shards\" : 0,\n  \"initializing_shards\" : 0,\n  \"unassigned_shards\" : 0,\n  \"delayed_unassigned_shards\" : 0,\n  \"number_of_pending_tasks\" : 0,\n  \"number_of_in_flight_fetch\" : 0\n}\n```\n\n## 使用（基于REST API数据操作）\n\n### REST\nREST 定义了一组体系架构原则，您可以根据这些原则设计以系统资源为中心的 Web 服务，包括使用不同语言编写的客户端如何通过 HTTP 处理和传输资源状态。 在类似于REST架构中，每个请求都会被定向到地址路径部分所指的具体对象上。\n### 创建文档\n\n示例：创建一个文档用来存储一篇blog，内容如下：\n```\n{\n  \"title\":\"my first article title\",\n  \"content\":\"this is article content\",\n  \"date\":\"2016-10-05\"\n}\n```\n操作：\n```\n# curl -XPUT  http://localhost:9200/blog/article/1 -d '{\"title\":\"my first article title\",\"content\":\"this is article content\",\"date\":\"2016-10-05\"}'\n```\n返回结果如下：\n```\n{\"_index\":\"blog\",\"_type\":\"article\",\"_id\":\"1\",\"_version\":1,\"created\":true}\n```\n返回了操作结果信息，并显示新文档的存储位置。并且包含文档的唯一标识符以及当前版本信息。\n\n### 检索文档\n按照REST风格，我们想要查看刚才创建的文档。\n```\n# curl -XGET  http://localhost:9200/blog/article/1\n```\n结果\n```\ncurl -XGET  http://localhost:9200/blog/article/1?pretty\n{\n  \"_index\" : \"blog\",\n  \"_type\" : \"article\",\n  \"_id\" : \"1\",\n  \"_version\" : 1,\n  \"found\" : true,\n  \"_source\":{\"title\":\"my first article title\",\"content\":\"this is article content\",\"date\":\"2016-10-05\"}\n}\n```\n### 更新文档\nElasticsearch中更新索引中的文档是非常复杂的工作。必须先提取文档、从_source字段获得数据、移除旧文档、应用变更，作为新文档创建索引。\n\n示例，更改之前创建的blog，并增加author字段\n```\n# curl -XPOST  http://localhost:9200/blog/article/1 -d '{\"title\":\"my first article title\",\"content\":\"this is article content\",\"date\":\"2016-10-05\",\"author\":\"zhimiao\"}'\n```\n结果：\n```\n# {\"_index\":\"blog\",\"_type\":\"article\",\"_id\":\"1\",\"_version\":3,\"created\":false}\n```\n\n查看是否更新成功\n```\n# curl -XGET  http://localhost:9200/blog/article/1?pretty\n{\n  \"_index\" : \"blog\",\n  \"_type\" : \"article\",\n  \"_id\" : \"1\",\n  \"_version\" : 4,\n  \"found\" : true,\n  \"_source\":{\"title\":\"my first article title\",\"content\":\"this is article content\",\"date\":\"2016-10-05\",\"author\":\"zhimiao\"}\n}\n```\n\n### 删除文档\n\n```\n# curl -XDELETE  http://localhost:9200/blog/article/1?pretty\n{\n  \"found\" : true,\n  \"_index\" : \"blog\",\n  \"_type\" : \"article\",\n  \"_id\" : \"1\",\n  \"_version\" : 7\n}\n```\n查看是否已删除\n```\n# curl -XGET  http://localhost:9200/blog/article/1?pretty\n{\n  \"_index\" : \"blog\",\n  \"_type\" : \"article\",\n  \"_id\" : \"1\",\n  \"found\" : false\n}\n```\n","slug":"ElasticSearch整理","published":1,"updated":"2016-10-06T11:12:57.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"city8vnn2000hg29fqmnuqkby","content":"<p>ElasticSearch是由Shay Banon发起的一个开源搜索服务器项目。由于其分布式特性和实时搜索能力，成为当前搜索和数据分析解决方案领域的重要成员。</p>\n<p><img src=\"http://n.sinaimg.cn/games/3ece443e/20161006/ElasticSearch.png\" alt=\"ElasticSearch\"></p>\n<a id=\"more\"></a>\n<h2 id=\"基本概念\"><a href=\"#基本概念\" class=\"headerlink\" title=\"基本概念\"></a>基本概念</h2><p>索引</p>\n<blockquote>\n<p>索引（index）是ElasticSearch存放数据的一种逻辑结构。类比关系型数据库中的数据表。</p>\n</blockquote>\n<p>文档</p>\n<blockquote>\n<p>文档（document）是ElasticSearch中存储的主要实体。每个ElasticSearch文档类比关系型数据库中数据表的没一行数据。<br>文档由字段（行数据的列）组成，一个文档由多个字段组成，并且ElasticSearch允许一个字段重复出现多次，该类型字段被称为多只字段。每个字段对应一种类型（字符串型、数值型、日期型等），并且ElasticSearch可以自动确定字段类型。不同于关系型数据库，ElasticSearch的文档结构可以是不固定的。即不同的文档可以有不同的字段集合。</p>\n</blockquote>\n<p>文档类型</p>\n<blockquote>\n<p>ElasticSearch中，一个索引可以存储许多不同用途的对象。按照不同的用途我们可以将文档划分成不同的类型加以区分。</p>\n</blockquote>\n<p>节点和集群</p>\n<blockquote>\n<p>ElasticSearch既可以作为一个独立搜索服务器工作，也支持多台一起协作进行运行，构成一个集群（cluster），其中的每个服务器被称为节点（node）。ElasticSearch可以通过索引分片,将海量的数据进行分割并分布到不同的节点，来实现更强的可用性和更高的性能。</p>\n</blockquote>\n<p>分片</p>\n<blockquote>\n<p>对于存储大规模的文档，ElasticSearch会将数据进行切分，每部分切成一个单独的Apache Lucene索引，称为分片（shared）。每个分片可以存储在集群的不同的节点上，当一个查询需要用到多个分片时，ElasticSearch会将请求发送至多个分片，之后结果进行合并。</p>\n</blockquote>\n<p>副本</p>\n<blockquote>\n<p>分片副本是对原始分片的一个拷贝，每个主分片可以有零个或者多个副分片。当主分片丢失时，副分片就会被提升为主分片。启用分片副本功能，可以提高查询的吞吐或实现系统的高可用性。</p>\n</blockquote>\n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><h3 id=\"环境准备\"><a href=\"#环境准备\" class=\"headerlink\" title=\"环境准备\"></a>环境准备</h3><p>JDK6+</p>\n<p>JDK的安装方式比较简单，只需将下载回来的程序包解压到相应的目录即可。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">wget http://download.oracle.com/otn-pub/java/jdk/8u101-b13/jdk-8u101-linux-x64.tar.gz</div><div class=\"line\">mkdir /usr/local/java</div><div class=\"line\">tar -zxf jdk-8u101-linux-x64.tar.gz -C /usr/local/java/</div></pre></td></tr></table></figure></p>\n<p>设置JDK的环境变量，如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"># tail -3 ~/.bash_profile</div><div class=\"line\">export JAVA_HOME=/usr/local/java/jdk1.8.0_101</div><div class=\"line\">export PATH=$PATH:$JAVA_HOME/bin</div><div class=\"line\">exportCLASSPATH=.:$JAVA_HOME/lib/tools.jar:$JAVA_HOME/lib/dt.jar:$CLASSPATH</div></pre></td></tr></table></figure></p>\n<p>重新加载环境变量<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"># source .bash_profile</div></pre></td></tr></table></figure></p>\n<p>在Shell提示符中执行java –version命令，显示如下结果，说明安装成功：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"># java -version</div><div class=\"line\">java version &quot;1.8.0_45&quot;</div><div class=\"line\">Java(TM) SE Runtime Environment (build 1.8.0_45-b14)</div><div class=\"line\">Java HotSpot(TM) 64-Bit Server VM (build 25.45-b02,mixed mode)</div></pre></td></tr></table></figure></p>\n<h3 id=\"安装Elasticsearch\"><a href=\"#安装Elasticsearch\" class=\"headerlink\" title=\"安装Elasticsearch\"></a>安装Elasticsearch</h3><p>下载Elasticsearch后，解压到对应的目录就完成Elasticsearch的安装。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"># wget https://download.elasticsearch.org/elasticsearch/elasticsearch/elasticsearch-1.7.0.zip</div><div class=\"line\"># unzip elasticsearch-1.7.0.zip</div><div class=\"line\"># mv elasticsearch-1.7.0 /usr/local/elasticsearch</div></pre></td></tr></table></figure></p>\n<h3 id=\"目录结构\"><a href=\"#目录结构\" class=\"headerlink\" title=\"目录结构\"></a>目录结构</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">elasticsearch/</div><div class=\"line\">├── bin</div><div class=\"line\">│   ...#运行elasticsearch和进行插件管理所需的脚本</div><div class=\"line\">├── config</div><div class=\"line\">│   ...#elasticsearch配置文件所在目录</div><div class=\"line\">├── data</div><div class=\"line\">│   ...#存储elasticsearch用到的数据</div><div class=\"line\">├── lib</div><div class=\"line\">│   ...#elasticsearch运行中用到的库</div><div class=\"line\">├── LICENSE.txt</div><div class=\"line\">├── logs</div><div class=\"line\">│   ...#存储elasticsearch运行中产生的事件信息和错误信息</div><div class=\"line\">├── nohup</div><div class=\"line\">├── NOTICE.txt</div><div class=\"line\">└── README.textile</div><div class=\"line\"></div><div class=\"line\">10 directories, 60 files</div></pre></td></tr></table></figure>\n<h3 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h3><p>所有的配置文件都位于config目录下。该目录下包含两个文件。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">├── config</div><div class=\"line\">│   ├── elasticsearch.yml</div><div class=\"line\">│   └── logging.yml</div></pre></td></tr></table></figure></p>\n<p>elasticsearch.yml</p>\n<blockquote>\n<p>负责设置服务器的默认配置。<br>比较重要的两个值cluster.name 和 node.name.</p>\n<ul>\n<li>cluster.name,保存的是集群名称。通过集群名称可以区分不同的集群。配置具有相同名称的节点将尝试组成一个集群。</li>\n<li>node.name，节点名称。我们也可以不指定该名称，elasticsearch会自动为节点选择一个唯一名称。但每次启动时这个唯一名称会发生改变。</li>\n</ul>\n</blockquote>\n<p>其他配置<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div><div class=\"line\">143</div><div class=\"line\">144</div><div class=\"line\">145</div><div class=\"line\">146</div><div class=\"line\">147</div><div class=\"line\">148</div><div class=\"line\">149</div><div class=\"line\">150</div><div class=\"line\">151</div><div class=\"line\">152</div><div class=\"line\">153</div><div class=\"line\">154</div><div class=\"line\">155</div><div class=\"line\">156</div><div class=\"line\">157</div><div class=\"line\">158</div><div class=\"line\">159</div><div class=\"line\">160</div><div class=\"line\">161</div><div class=\"line\">162</div><div class=\"line\">163</div><div class=\"line\">164</div><div class=\"line\">165</div><div class=\"line\">166</div><div class=\"line\">167</div><div class=\"line\">168</div><div class=\"line\">169</div><div class=\"line\">170</div><div class=\"line\">171</div><div class=\"line\">172</div><div class=\"line\">173</div><div class=\"line\">174</div><div class=\"line\">175</div><div class=\"line\">176</div><div class=\"line\">177</div><div class=\"line\">178</div><div class=\"line\">179</div><div class=\"line\">180</div><div class=\"line\">181</div><div class=\"line\">182</div><div class=\"line\">183</div><div class=\"line\">184</div><div class=\"line\">185</div><div class=\"line\">186</div><div class=\"line\">187</div><div class=\"line\">188</div><div class=\"line\">189</div><div class=\"line\">190</div><div class=\"line\">191</div><div class=\"line\">192</div><div class=\"line\">193</div><div class=\"line\">194</div><div class=\"line\">195</div><div class=\"line\">196</div><div class=\"line\">197</div><div class=\"line\">198</div><div class=\"line\">199</div><div class=\"line\">200</div><div class=\"line\">201</div><div class=\"line\">202</div><div class=\"line\">203</div><div class=\"line\">204</div><div class=\"line\">205</div><div class=\"line\">206</div><div class=\"line\">207</div><div class=\"line\">208</div><div class=\"line\">209</div><div class=\"line\">210</div><div class=\"line\">211</div><div class=\"line\">212</div><div class=\"line\">213</div><div class=\"line\">214</div><div class=\"line\">215</div><div class=\"line\">216</div><div class=\"line\">217</div><div class=\"line\">218</div><div class=\"line\">219</div><div class=\"line\">220</div><div class=\"line\">221</div><div class=\"line\">222</div><div class=\"line\">223</div><div class=\"line\">224</div><div class=\"line\">225</div><div class=\"line\">226</div><div class=\"line\">227</div><div class=\"line\">228</div><div class=\"line\">229</div><div class=\"line\">230</div><div class=\"line\">231</div><div class=\"line\">232</div><div class=\"line\">233</div><div class=\"line\">234</div><div class=\"line\">235</div><div class=\"line\">236</div><div class=\"line\">237</div><div class=\"line\">238</div><div class=\"line\">239</div><div class=\"line\">240</div><div class=\"line\">241</div><div class=\"line\">242</div><div class=\"line\">243</div><div class=\"line\">244</div><div class=\"line\">245</div><div class=\"line\">246</div><div class=\"line\">247</div><div class=\"line\">248</div><div class=\"line\">249</div><div class=\"line\">250</div><div class=\"line\">251</div><div class=\"line\">252</div><div class=\"line\">253</div><div class=\"line\">254</div><div class=\"line\">255</div><div class=\"line\">256</div><div class=\"line\">257</div><div class=\"line\">258</div><div class=\"line\">259</div><div class=\"line\">260</div><div class=\"line\">261</div><div class=\"line\">262</div><div class=\"line\">263</div><div class=\"line\">264</div><div class=\"line\">265</div><div class=\"line\">266</div><div class=\"line\">267</div><div class=\"line\">268</div><div class=\"line\">269</div><div class=\"line\">270</div><div class=\"line\">271</div><div class=\"line\">272</div><div class=\"line\">273</div><div class=\"line\">274</div><div class=\"line\">275</div><div class=\"line\">276</div><div class=\"line\">277</div><div class=\"line\">278</div><div class=\"line\">279</div><div class=\"line\">280</div><div class=\"line\">281</div><div class=\"line\">282</div><div class=\"line\">283</div><div class=\"line\">284</div><div class=\"line\">285</div><div class=\"line\">286</div><div class=\"line\">287</div><div class=\"line\">288</div><div class=\"line\">289</div><div class=\"line\">290</div><div class=\"line\">291</div><div class=\"line\">292</div><div class=\"line\">293</div><div class=\"line\">294</div><div class=\"line\">295</div><div class=\"line\">296</div><div class=\"line\">297</div><div class=\"line\">298</div><div class=\"line\">299</div><div class=\"line\">300</div><div class=\"line\">301</div><div class=\"line\">302</div><div class=\"line\">303</div><div class=\"line\">304</div><div class=\"line\">305</div><div class=\"line\">306</div><div class=\"line\">307</div><div class=\"line\">308</div><div class=\"line\">309</div><div class=\"line\">310</div><div class=\"line\">311</div><div class=\"line\">312</div><div class=\"line\">313</div><div class=\"line\">314</div><div class=\"line\">315</div><div class=\"line\">316</div><div class=\"line\">317</div><div class=\"line\">318</div><div class=\"line\">319</div><div class=\"line\">320</div><div class=\"line\">321</div><div class=\"line\">322</div><div class=\"line\">323</div><div class=\"line\">324</div><div class=\"line\">325</div><div class=\"line\">326</div><div class=\"line\">327</div><div class=\"line\">328</div><div class=\"line\">329</div><div class=\"line\">330</div><div class=\"line\">331</div><div class=\"line\">332</div><div class=\"line\">333</div><div class=\"line\">334</div><div class=\"line\">335</div><div class=\"line\">336</div><div class=\"line\">337</div><div class=\"line\">338</div><div class=\"line\">339</div><div class=\"line\">340</div><div class=\"line\">341</div><div class=\"line\">342</div><div class=\"line\">343</div><div class=\"line\">344</div><div class=\"line\">345</div><div class=\"line\">346</div><div class=\"line\">347</div><div class=\"line\">348</div><div class=\"line\">349</div><div class=\"line\">350</div><div class=\"line\">351</div><div class=\"line\">352</div><div class=\"line\">353</div><div class=\"line\">354</div><div class=\"line\">355</div><div class=\"line\">356</div><div class=\"line\">357</div><div class=\"line\">358</div><div class=\"line\">359</div><div class=\"line\">360</div><div class=\"line\">361</div><div class=\"line\">362</div><div class=\"line\">363</div><div class=\"line\">364</div><div class=\"line\">365</div><div class=\"line\">366</div><div class=\"line\">367</div><div class=\"line\">368</div><div class=\"line\">369</div><div class=\"line\">370</div><div class=\"line\">371</div><div class=\"line\">372</div><div class=\"line\">373</div><div class=\"line\">374</div><div class=\"line\">375</div><div class=\"line\">376</div><div class=\"line\">377</div><div class=\"line\">378</div><div class=\"line\">379</div><div class=\"line\">380</div><div class=\"line\">381</div></pre></td><td class=\"code\"><pre><div class=\"line\">##################### Elasticsearch Configuration Example #####################</div><div class=\"line\"></div><div class=\"line\">＃此文件包含各种配置设置的概述，</div><div class=\"line\">＃针对操作人员。应用程序开发人员应该</div><div class=\"line\">＃在咨询&lt;http://elasticsearch.org/guide&gt;指南。</div><div class=\"line\">#</div><div class=\"line\">＃安装过程被覆盖在</div><div class=\"line\">＃&lt;http://elasticsearch.org/guide/en/elasticsearch/reference/current/setup.html&gt;。</div><div class=\"line\">#</div><div class=\"line\">＃Elasticsearch附带了大多数设置合理的默认值，</div><div class=\"line\">＃所以你可以尝试使用它而不用修改。</div><div class=\"line\">#</div><div class=\"line\">＃大多数时候，这些默认值是蛮好的运行生产</div><div class=\"line\">＃集群。如果你正在微调群集，或者想知道的某些配置选项＃效果，请_DO ask_上</div><div class=\"line\">＃邮件列表或IRC频道[http://elasticsearch.org/community。</div><div class=\"line\">#</div><div class=\"line\">＃配置中的任何元素都可以用环境变量替换</div><div class=\"line\">＃通过将它们放置在$ &#123;...&#125;符号。 例如：</div><div class=\"line\">#</div><div class=\"line\">#node.rack: $&#123;RACK_ENV_VAR&#125;</div><div class=\"line\"></div><div class=\"line\">＃有关支持的格式和配置文件信息语法，请参阅</div><div class=\"line\">＃&lt;http://elasticsearch.org/guide/en/elasticsearch/reference/current/setup-configuration.html&gt;</div><div class=\"line\"></div><div class=\"line\">################################### Cluster 集群###################################</div><div class=\"line\"></div><div class=\"line\">＃集群名称标识群集的自动发现。如果你在同一个网络上的正在运行多个群集，请确保您使用的是唯一的名称。</div><div class=\"line\">＃</div><div class=\"line\">＃cluster.name：elasticsearch</div><div class=\"line\"></div><div class=\"line\">#################################### Node 节点#####################################</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">＃节点名称是在启动时动态生成的，但你也可以手动配置它们。你可以给这个节点起一个特定的名称：</div><div class=\"line\">＃</div><div class=\"line\">#node.name: &quot;Franz Kafka&quot;</div><div class=\"line\"></div><div class=\"line\">＃每个节点可以被配置为允许或拒绝称为集群主节点，</div><div class=\"line\">＃和允许或拒绝来存储数据。</div><div class=\"line\">＃</div><div class=\"line\">＃允许此节点可以作为主节点（默认启用）：</div><div class=\"line\">＃</div><div class=\"line\">#node.master: true</div><div class=\"line\">#</div><div class=\"line\"># 允许此节点可以用来存储数据（默认启用）：</div><div class=\"line\">#</div><div class=\"line\">#node.data: true</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">＃你可以利用这些设置，以设计高级集群拓扑。</div><div class=\"line\">＃</div><div class=\"line\">＃1，你想这个节点永远不会成为一个主节点，只保存数据。这将是群集的“主力”。</div><div class=\"line\">＃</div><div class=\"line\">＃</div><div class=\"line\">#node.master: false</div><div class=\"line\">#node.data: true</div><div class=\"line\">#</div><div class=\"line\">＃2，你要这个节点只能作为主：不存储任何数据和有免费的资源。这将是群集的“协调员”。</div><div class=\"line\">＃</div><div class=\"line\">＃</div><div class=\"line\">#node.master: true</div><div class=\"line\">#node.data: false</div><div class=\"line\">#</div><div class=\"line\">＃3，你希望这个节点是不是主数据节点，但可以充当“搜索负载平衡器”（取从节点的数据，聚集结果等）</div><div class=\"line\">＃</div><div class=\"line\">#node.master: false</div><div class=\"line\">#node.data: false</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">＃使用群集健康状况API[http://localhost:9200/_cluster/health]，</div><div class=\"line\">＃节点信息API[http://localhost:9200/_nodes]或GUI工具</div><div class=\"line\">＃如&lt;http://www.elasticsearch.org/overview/marvel/&gt;</div><div class=\"line\">＃&lt;http://github.com/karmi/elasticsearch-paramedic&gt;</div><div class=\"line\">＃&lt;http://github.com/lukas-vlcek/bigdesk&gt;和</div><div class=\"line\">＃&lt;http://mobz.github.com/elasticsearch-head&gt;检查群集状态。</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">＃一个节点可以有与之关联的通用属性，可用于定制分片分配过滤，或分配意识。</div><div class=\"line\">＃</div><div class=\"line\">＃属性是一个简单的键值对，类似node.key：值，下面是一个例子：</div><div class=\"line\">＃</div><div class=\"line\">#node.rack: rack314</div><div class=\"line\"></div><div class=\"line\">＃默认情况下，多个节点被允许从相同的安装位置</div><div class=\"line\"># 如果要禁用的话，设置如下：</div><div class=\"line\">#node.max_local_storage_nodes: 1</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">#################################### Index 索引####################################</div><div class=\"line\"></div><div class=\"line\">#</div><div class=\"line\">＃您可以设置一些选项（如分片/副本选项，映射或分析器的定义，事务日志设置...）对全局参数，在这个文件中。</div><div class=\"line\">#</div><div class=\"line\"># Note, that it makes more sense to configure index settings specifically for</div><div class=\"line\"># a certain index, either when creating it or by using the index templates API.</div><div class=\"line\">#</div><div class=\"line\">＃请注意，它更有意义专门配置索引设置</div><div class=\"line\">＃某个具体的索引，创造它或使用该索引模板API。</div><div class=\"line\"># See &lt;http://elasticsearch.org/guide/en/elasticsearch/reference/current/index-modules.html&gt; and</div><div class=\"line\"># &lt;http://elasticsearch.org/guide/en/elasticsearch/reference/current/indices-create-index.html&gt;</div><div class=\"line\"># for more information.</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"># 设置一个索引的分片（副本）数量（默认 5）</div><div class=\"line\">#</div><div class=\"line\">#index.number_of_shards: 5</div><div class=\"line\"></div><div class=\"line\">＃设置索引（默认值为1）的副本（额外副本）数量：</div><div class=\"line\">＃</div><div class=\"line\">#index.number_of_replicas: 1</div><div class=\"line\"></div><div class=\"line\"># Note, that for development on a local machine, with small indices, it usually</div><div class=\"line\"># makes sense to &quot;disable&quot; the distributed features:</div><div class=\"line\">#</div><div class=\"line\">＃注意，对于在本地机器，它通常比较小的值。禁用分布式特点是很有必要的</div><div class=\"line\">＃</div><div class=\"line\">#index.number_of_shards: 1</div><div class=\"line\">#index.number_of_replicas: 0</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">＃这些设置直接影响索引和搜索操作的性能</div><div class=\"line\">＃在集群中。假设你有足够多的机器来保存分片及</div><div class=\"line\">＃副本，经验法则是：</div><div class=\"line\">#</div><div class=\"line\"># 1. 更多的分片能提高索引效率，一个大的索引允许存储在不同的服务器上</div><div class=\"line\"># 2. 更多的副本能够提高搜索效率，并且能够增强系统的可用性</div><div class=\"line\">#</div><div class=\"line\">#  &quot;number_of_shards&quot; 对于一个索引不能动态修改设置一次.</div><div class=\"line\">#</div><div class=\"line\"># T &quot;number_of_replicas&quot; 可以增加或者减少在任何时候，通过索引更新或者api操作</div><div class=\"line\">#</div><div class=\"line\"># Elasticsearch takes care about load balancing, relocating, gathering the</div><div class=\"line\"># results from nodes, etc. Experiment with different settings to fine-tune</div><div class=\"line\"># your setup.</div><div class=\"line\"></div><div class=\"line\">＃Elasticsearch需要关心负载均衡，搬迁，从节点收集结果，等。</div><div class=\"line\"># 你可以通过不断的微调进行设置</div><div class=\"line\"></div><div class=\"line\">＃使用索引状态API（&lt;http://localhost:9200/A/_status&gt;）检查</div><div class=\"line\">＃索引状态。</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">#################################### Paths ####################################</div><div class=\"line\"></div><div class=\"line\"># 路径包含目录配置（此文件并logging.yml）：</div><div class=\"line\">#path.conf: /path/to/conf</div><div class=\"line\"></div><div class=\"line\"># 索引数据存储路径配置</div><div class=\"line\">#path.data: /path/to/data</div><div class=\"line\">#</div><div class=\"line\">＃可以任选地包括一个以上的位置，方便扩展和使用。 例如：</div><div class=\"line\">#</div><div class=\"line\">#path.data: /path/to/data1,/path/to/data2</div><div class=\"line\"></div><div class=\"line\"># 临时文件路径：</div><div class=\"line\">#</div><div class=\"line\">#path.work: /path/to/work</div><div class=\"line\"></div><div class=\"line\"># 日志文件路径:</div><div class=\"line\">#</div><div class=\"line\">#path.logs: /path/to/logs</div><div class=\"line\"></div><div class=\"line\"># 插件安装目录</div><div class=\"line\">#</div><div class=\"line\">#path.plugins: /path/to/plugins</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">#################################### Plugin ###################################</div><div class=\"line\"></div><div class=\"line\"># 如果这里列出的插件没有安装用于当前节点，该节点将无法启动。</div><div class=\"line\">#</div><div class=\"line\">#plugin.mandatory: mapper-attachments,lang-groovy</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">################################### Memory ####################################</div><div class=\"line\"></div><div class=\"line\">＃Elasticsearch表现不佳时，JVM启动交换：你应该确保它永远不会_交换。</div><div class=\"line\">#</div><div class=\"line\"># 将此属性设置为true锁定内存：</div><div class=\"line\">#</div><div class=\"line\">#bootstrap.mlockall: true</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"># 确保ES_MIN_MEM和ES_MAX_MEM环境变量设置</div><div class=\"line\">＃为相同的值，并且该机器有足够的内存来分配</div><div class=\"line\">＃为Elasticsearch，留出足够的内存为操作系统本身。</div><div class=\"line\">＃</div><div class=\"line\">#</div><div class=\"line\"># You should also make sure that the Elasticsearch process is allowed to lock</div><div class=\"line\"># the memory, eg. by using `ulimit -l unlimited`.</div><div class=\"line\"># 你还应该确保该Elasticsearch允许进程锁定内存</div><div class=\"line\">＃例如。通过使用`ulimit -l unlimited`。</div><div class=\"line\"></div><div class=\"line\">############################## Network And HTTP ###############################</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">＃Elasticsearch，默认情况下，本身绑定到0.0.0.0地址，并监听</div><div class=\"line\">＃端口[9200-9300] HTTP流量和端口[9300-9400]节点到节点</div><div class=\"line\">＃沟通。（范围意味着，如果端口忙，它会自动将</div><div class=\"line\">＃尝试下口）。</div><div class=\"line\"></div><div class=\"line\"># 设置绑定专用地址（IPv4或IPv6）：</div><div class=\"line\">#network.bind_host: 192.168.0.1</div><div class=\"line\"></div><div class=\"line\">＃设置其他节点将使用与该节点通信的地址。否则</div><div class=\"line\">＃，它会自动的产生。它必须指向一个实际的IP地址。</div><div class=\"line\">#</div><div class=\"line\">#network.publish_host: 192.168.0.1</div><div class=\"line\"></div><div class=\"line\"># 同时设置“bind_host&apos;和&apos;publish_host”：</div><div class=\"line\">#</div><div class=\"line\">#network.host: 192.168.0.1</div><div class=\"line\"></div><div class=\"line\"># 设置一个自定义的节点间通讯端口，（默认为 9300）</div><div class=\"line\">#transport.tcp.port: 9300</div><div class=\"line\"></div><div class=\"line\"># 启用节点间通讯压缩</div><div class=\"line\">#</div><div class=\"line\">#transport.tcp.compress: true</div><div class=\"line\"></div><div class=\"line\"># 设置自定义端口侦听HTTP流量：</div><div class=\"line\">#</div><div class=\"line\">#http.port: 9200</div><div class=\"line\"></div><div class=\"line\"># 设置自定义允许的内容长度：</div><div class=\"line\">#</div><div class=\"line\">#http.max_content_length: 100mb</div><div class=\"line\"></div><div class=\"line\"># 完全禁用HTTP：</div><div class=\"line\">#</div><div class=\"line\">#http.enabled: false</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">################################### Gateway ###################################</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">＃网关允许持收集集群之间的群集状态</div><div class=\"line\">＃集群中每个状态改变（例如添加一个索引），都将会存储</div><div class=\"line\">＃在网关，并且当集群首次启动时，</div><div class=\"line\">＃它会从网关读出其状态。</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">＃有几种类型的网关实现的。欲了解更多信息，请参阅</div><div class=\"line\"># &lt;http://elasticsearch.org/guide/en/elasticsearch/reference/current/modules-gateway.html&gt;.</div><div class=\"line\"></div><div class=\"line\">＃默认网关类型为“本地”网关（推荐）：</div><div class=\"line\">#</div><div class=\"line\">#gateway.type: local</div><div class=\"line\"></div><div class=\"line\"># 设置当集群崩溃时，如何重新启动并恢复进程（使用共享网关时，尽可能多的使用本地数据）</div><div class=\"line\"></div><div class=\"line\"># 允许恢复后，在一个集群中有N个节点：</div><div class=\"line\">#</div><div class=\"line\">#gateway.recover_after_nodes: 1</div><div class=\"line\"></div><div class=\"line\">＃设置超时时间，在启动恢复过程中，前面设置的N个节点全部重启（接受时间值）：</div><div class=\"line\">#</div><div class=\"line\"></div><div class=\"line\">#gateway.recover_after_time: 5m</div><div class=\"line\"></div><div class=\"line\">＃设置在一个句群众预计的节点数</div><div class=\"line\">#一旦这些N个节点全部启用（满足recover_after_nodes），立即开始恢复过程（无需等待恢复时间后到期）：</div><div class=\"line\">#</div><div class=\"line\">#gateway.expected_nodes: 2</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">############################# Recovery Throttling 恢复节流 #############################</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">＃这些设置可以控制碎片分配的过程，在节点恢复期间、副本定位、重新平衡，或添加和删除节点时</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">#</div><div class=\"line\"># 设置一个节点上同时恢复数量</div><div class=\"line\"># 1. 初步恢复期间</div><div class=\"line\">#</div><div class=\"line\">#cluster.routing.allocation.node_initial_primaries_recoveries: 4</div><div class=\"line\">#</div><div class=\"line\"># 2. 在添加/删除节点，再平衡期间</div><div class=\"line\">#</div><div class=\"line\">#cluster.routing.allocation.node_concurrent_recoveries: 2</div><div class=\"line\"></div><div class=\"line\"># 设置一个恢复时的吞吐量值（如100MB，默认20MB）</div><div class=\"line\">#</div><div class=\"line\">#indices.recovery.max_bytes_per_sec: 20mb</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"># 设置一个并发流数量限制，在同级别的分片恢复时</div><div class=\"line\">#</div><div class=\"line\">#indices.recovery.concurrent_streams: 5</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">################################## Discovery 发现##################################</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">＃发现基础设施，确保节点可以在群集内找到和主节点的选举。是默认是通过多播方式来进行发现。</div><div class=\"line\"></div><div class=\"line\"># 设置一个节点确保能在集群内发现N个其他合格的节点能成为主节点。</div><div class=\"line\"></div><div class=\"line\">#discovery.zen.minimum_master_nodes: 1</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"># 设置一个过期时间，在通过ping发现其他节点时</div><div class=\"line\"># 在一个较差的网络环境中设置一个较长的值，可以最大限度的减少报错</div><div class=\"line\"></div><div class=\"line\">#discovery.zen.ping.timeout: 3s</div><div class=\"line\"></div><div class=\"line\"># 更多的信息，请看</div><div class=\"line\"># &lt;http://elasticsearch.org/guide/en/elasticsearch/reference/current/modules-discovery-zen.html&gt;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">＃单播发现允许明确地控制哪些节点将被用于发现群集。它可以在多播不存在，或限制集群通信时使用。</div><div class=\"line\">#</div><div class=\"line\"># 1. 多播发现（默认启用）</div><div class=\"line\">#</div><div class=\"line\">#discovery.zen.ping.multicast.enabled: false</div><div class=\"line\">#</div><div class=\"line\"># 2. 配置一个初始清单在集群的主节点上，为了发现一个刚启用的节点</div><div class=\"line\">#</div><div class=\"line\">#discovery.zen.ping.unicast.hosts: [&quot;host1&quot;, &quot;host2:port&quot;]</div><div class=\"line\"></div><div class=\"line\"># 为了发现 ，EC2允许使用AWS EC2 API</div><div class=\"line\"># 你必须安装云AWS插件启用EC2发现。</div><div class=\"line\">#</div><div class=\"line\"># 更多信息请查看</div><div class=\"line\"># &lt;http://elasticsearch.org/guide/en/elasticsearch/reference/current/modules-discovery-ec2.html&gt;</div><div class=\"line\">#</div><div class=\"line\"># See &lt;http://elasticsearch.org/tutorials/elasticsearch-on-ec2/&gt;</div><div class=\"line\"># 一步一步的教程</div><div class=\"line\"></div><div class=\"line\"># 为了发现 ，GCE发现允许使用谷歌Compute Engine的API</div><div class=\"line\">#</div><div class=\"line\"># 你必须安装云GCE GCE插件启用的发现。</div><div class=\"line\">#</div><div class=\"line\"># For more information, see &lt;https://github.com/elasticsearch/elasticsearch-cloud-gce&gt;.</div><div class=\"line\"></div><div class=\"line\"># Azure的发现允许以执行发现使用Azure的API。</div><div class=\"line\">#</div><div class=\"line\"># 你必须安装云cloud-azure插件启用的发现。</div><div class=\"line\"># For more information, see &lt;https://github.com/elasticsearch/elasticsearch-cloud-azure&gt;.</div><div class=\"line\"></div><div class=\"line\">################################## Slow Log ##################################</div><div class=\"line\"></div><div class=\"line\"># 分片级查询并会的对应等级的日志</div><div class=\"line\"></div><div class=\"line\">#index.search.slowlog.threshold.query.warn: 10s</div><div class=\"line\">#index.search.slowlog.threshold.query.info: 5s</div><div class=\"line\">#index.search.slowlog.threshold.query.debug: 2s</div><div class=\"line\">#index.search.slowlog.threshold.query.trace: 500ms</div><div class=\"line\"></div><div class=\"line\">#index.search.slowlog.threshold.fetch.warn: 1s</div><div class=\"line\">#index.search.slowlog.threshold.fetch.info: 800ms</div><div class=\"line\">#index.search.slowlog.threshold.fetch.debug: 500ms</div><div class=\"line\">#index.search.slowlog.threshold.fetch.trace: 200ms</div><div class=\"line\"></div><div class=\"line\">#index.indexing.slowlog.threshold.index.warn: 10s</div><div class=\"line\">#index.indexing.slowlog.threshold.index.info: 5s</div><div class=\"line\">#index.indexing.slowlog.threshold.index.debug: 2s</div><div class=\"line\">#index.indexing.slowlog.threshold.index.trace: 500ms</div><div class=\"line\"></div><div class=\"line\">################################## GC Logging ################################</div><div class=\"line\"></div><div class=\"line\">#monitor.jvm.gc.young.warn: 1000ms</div><div class=\"line\">#monitor.jvm.gc.young.info: 700ms</div><div class=\"line\">#monitor.jvm.gc.young.debug: 400ms</div><div class=\"line\"></div><div class=\"line\">#monitor.jvm.gc.old.warn: 10s</div><div class=\"line\">#monitor.jvm.gc.old.info: 5s</div><div class=\"line\">#monitor.jvm.gc.old.debug: 2s</div><div class=\"line\"></div><div class=\"line\">################################## Security ################################</div><div class=\"line\"></div><div class=\"line\"># Uncomment if you want to enable JSONP as a valid return transport on the</div><div class=\"line\"># http server. With this enabled, it may pose a security risk, so disabling</div><div class=\"line\"># it unless you need it is recommended (it is disabled by default).</div><div class=\"line\"></div><div class=\"line\">＃不推荐，如果要启用JSONP作为HTTP服务器上的返回。</div><div class=\"line\">#启用此功能，它可能会带来安全风险，因此禁用它，除非你需要的建议（它被默认禁用）。</div><div class=\"line\"></div><div class=\"line\">#http.jsonp.enable: true</div></pre></td></tr></table></figure></p>\n<p>logging.yml</p>\n<blockquote>\n<p>定义多少信息写入系统日志、定义日志文件，并定期创建新文件</p>\n</blockquote>\n<h3 id=\"管理\"><a href=\"#管理\" class=\"headerlink\" title=\"管理\"></a>管理</h3><p>启动Elasticsearch<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"># /usr/local/elasticsearch/bin/elasticsearch  -d</div></pre></td></tr></table></figure></p>\n<blockquote>\n<p>-d 表示将进程放入后台运行</p>\n</blockquote>\n<p>或者通过\u0004nohup命令<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"># nohup /usr/local/elasticsearch/bin/elasticsearch &gt; nohup</div></pre></td></tr></table></figure></p>\n<p>将elasticsearch设置成开机自启动<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"># echo &quot;nohup /usr/local/elasticsearch/bin/elasticsearch &gt; nohup&quot; &gt; /etc/rc.local</div></pre></td></tr></table></figure></p>\n<p>确认elasticsearch的9200端口已监听，说明elasticsearch已成功运行</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"># netstat -anp |grep :9200</div><div class=\"line\">tcp        0      0 :::9200                     :::*                        LISTEN      3362/java</div></pre></td></tr></table></figure>\n<p>如何关闭elasticsearch</p>\n<ul>\n<li>方法一：如果节点与控制台相连并且当前elasticsearch是使用-f选项运行，则只需要按下Ctrl+C组合键即可</li>\n<li>方法二：通过发送TERM信号来终止服务器进程 kill -9 进程ID</li>\n<li>方法三：使用REST API</li>\n</ul>\n<p>关闭整个集群<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"># curl -XPOST http://localhost:9200/_cluster/nodes/_shutdown</div></pre></td></tr></table></figure></p>\n<p>关闭单个节点<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"># curl -XPOST  http://127.0.0.1:9200/_cluster/nodes/2ens0yuEQ12G6ct1UDpihQ/_shutdown</div></pre></td></tr></table></figure></p>\n<p>2ens0yuEQ12G6ct1UDpihQ ，为要关闭的节点标志符</p>\n<p>查看节点标志符，可以从elasticsearch日志中或者通过REST API中获得<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"># curl http://localhost:9200/_nodes/?pretty</div><div class=\"line\">&#123;</div><div class=\"line\">  &quot;cluster_name&quot; : &quot;elasticsearch&quot;,</div><div class=\"line\">  &quot;nodes&quot; : &#123;</div><div class=\"line\">    &quot;13QfvIdATEurGAhVAlO6tQ&quot; : &#123;</div><div class=\"line\">      &quot;name&quot; : &quot;Edwin Jarvis&quot;,</div><div class=\"line\">      ...</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>13QfvIdATEurGAhVAlO6tQ,即为节点标志符</p>\n<h3 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"># curl http://localhost:9200</div><div class=\"line\">&#123;</div><div class=\"line\">  &quot;status&quot; : 200,</div><div class=\"line\">  &quot;name&quot; : &quot;Destroyer of Demons&quot;,</div><div class=\"line\">  &quot;cluster_name&quot; : &quot;elasticsearch&quot;,</div><div class=\"line\">  &quot;version&quot; : &#123;</div><div class=\"line\">    &quot;number&quot; : &quot;1.7.0&quot;,</div><div class=\"line\">    &quot;build_hash&quot; : &quot;929b9739cae115e73c346cb5f9a6f24ba735a743&quot;,</div><div class=\"line\">    &quot;build_timestamp&quot; : &quot;2015-07-16T14:31:07Z&quot;,</div><div class=\"line\">    &quot;build_snapshot&quot; : false,</div><div class=\"line\">    &quot;lucene_version&quot; : &quot;4.10.4&quot;</div><div class=\"line\">  &#125;,</div><div class=\"line\">  &quot;tagline&quot; : &quot;You Know, for Search&quot;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>查看elasticsearch服务器当前运行状况<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"># curl http://localhost:9200/_cluster/health?pretty</div><div class=\"line\">&#123;</div><div class=\"line\">  &quot;cluster_name&quot; : &quot;elasticsearch&quot;,</div><div class=\"line\">  &quot;status&quot; : &quot;green&quot;,</div><div class=\"line\">  &quot;timed_out&quot; : false,</div><div class=\"line\">  &quot;number_of_nodes&quot; : 1,</div><div class=\"line\">  &quot;number_of_data_nodes&quot; : 1,</div><div class=\"line\">  &quot;active_primary_shards&quot; : 0,</div><div class=\"line\">  &quot;active_shards&quot; : 0,</div><div class=\"line\">  &quot;relocating_shards&quot; : 0,</div><div class=\"line\">  &quot;initializing_shards&quot; : 0,</div><div class=\"line\">  &quot;unassigned_shards&quot; : 0,</div><div class=\"line\">  &quot;delayed_unassigned_shards&quot; : 0,</div><div class=\"line\">  &quot;number_of_pending_tasks&quot; : 0,</div><div class=\"line\">  &quot;number_of_in_flight_fetch&quot; : 0</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h2 id=\"使用（基于REST-API数据操作）\"><a href=\"#使用（基于REST-API数据操作）\" class=\"headerlink\" title=\"使用（基于REST API数据操作）\"></a>使用（基于REST API数据操作）</h2><h3 id=\"REST\"><a href=\"#REST\" class=\"headerlink\" title=\"REST\"></a>REST</h3><p>REST 定义了一组体系架构原则，您可以根据这些原则设计以系统资源为中心的 Web 服务，包括使用不同语言编写的客户端如何通过 HTTP 处理和传输资源状态。 在类似于REST架构中，每个请求都会被定向到地址路径部分所指的具体对象上。</p>\n<h3 id=\"创建文档\"><a href=\"#创建文档\" class=\"headerlink\" title=\"创建文档\"></a>创建文档</h3><p>示例：创建一个文档用来存储一篇blog，内容如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">  &quot;title&quot;:&quot;my first article title&quot;,</div><div class=\"line\">  &quot;content&quot;:&quot;this is article content&quot;,</div><div class=\"line\">  &quot;date&quot;:&quot;2016-10-05&quot;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>操作：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"># curl -XPUT  http://localhost:9200/blog/article/1 -d &apos;&#123;&quot;title&quot;:&quot;my first article title&quot;,&quot;content&quot;:&quot;this is article content&quot;,&quot;date&quot;:&quot;2016-10-05&quot;&#125;&apos;</div></pre></td></tr></table></figure></p>\n<p>返回结果如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;&quot;_index&quot;:&quot;blog&quot;,&quot;_type&quot;:&quot;article&quot;,&quot;_id&quot;:&quot;1&quot;,&quot;_version&quot;:1,&quot;created&quot;:true&#125;</div></pre></td></tr></table></figure></p>\n<p>返回了操作结果信息，并显示新文档的存储位置。并且包含文档的唯一标识符以及当前版本信息。</p>\n<h3 id=\"检索文档\"><a href=\"#检索文档\" class=\"headerlink\" title=\"检索文档\"></a>检索文档</h3><p>按照REST风格，我们想要查看刚才创建的文档。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"># curl -XGET  http://localhost:9200/blog/article/1</div></pre></td></tr></table></figure></p>\n<p>结果<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">curl -XGET  http://localhost:9200/blog/article/1?pretty</div><div class=\"line\">&#123;</div><div class=\"line\">  &quot;_index&quot; : &quot;blog&quot;,</div><div class=\"line\">  &quot;_type&quot; : &quot;article&quot;,</div><div class=\"line\">  &quot;_id&quot; : &quot;1&quot;,</div><div class=\"line\">  &quot;_version&quot; : 1,</div><div class=\"line\">  &quot;found&quot; : true,</div><div class=\"line\">  &quot;_source&quot;:&#123;&quot;title&quot;:&quot;my first article title&quot;,&quot;content&quot;:&quot;this is article content&quot;,&quot;date&quot;:&quot;2016-10-05&quot;&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h3 id=\"更新文档\"><a href=\"#更新文档\" class=\"headerlink\" title=\"更新文档\"></a>更新文档</h3><p>Elasticsearch中更新索引中的文档是非常复杂的工作。必须先提取文档、从_source字段获得数据、移除旧文档、应用变更，作为新文档创建索引。</p>\n<p>示例，更改之前创建的blog，并增加author字段<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"># curl -XPOST  http://localhost:9200/blog/article/1 -d &apos;&#123;&quot;title&quot;:&quot;my first article title&quot;,&quot;content&quot;:&quot;this is article content&quot;,&quot;date&quot;:&quot;2016-10-05&quot;,&quot;author&quot;:&quot;zhimiao&quot;&#125;&apos;</div></pre></td></tr></table></figure></p>\n<p>结果：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"># &#123;&quot;_index&quot;:&quot;blog&quot;,&quot;_type&quot;:&quot;article&quot;,&quot;_id&quot;:&quot;1&quot;,&quot;_version&quot;:3,&quot;created&quot;:false&#125;</div></pre></td></tr></table></figure></p>\n<p>查看是否更新成功<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"># curl -XGET  http://localhost:9200/blog/article/1?pretty</div><div class=\"line\">&#123;</div><div class=\"line\">  &quot;_index&quot; : &quot;blog&quot;,</div><div class=\"line\">  &quot;_type&quot; : &quot;article&quot;,</div><div class=\"line\">  &quot;_id&quot; : &quot;1&quot;,</div><div class=\"line\">  &quot;_version&quot; : 4,</div><div class=\"line\">  &quot;found&quot; : true,</div><div class=\"line\">  &quot;_source&quot;:&#123;&quot;title&quot;:&quot;my first article title&quot;,&quot;content&quot;:&quot;this is article content&quot;,&quot;date&quot;:&quot;2016-10-05&quot;,&quot;author&quot;:&quot;zhimiao&quot;&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h3 id=\"删除文档\"><a href=\"#删除文档\" class=\"headerlink\" title=\"删除文档\"></a>删除文档</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"># curl -XDELETE  http://localhost:9200/blog/article/1?pretty</div><div class=\"line\">&#123;</div><div class=\"line\">  &quot;found&quot; : true,</div><div class=\"line\">  &quot;_index&quot; : &quot;blog&quot;,</div><div class=\"line\">  &quot;_type&quot; : &quot;article&quot;,</div><div class=\"line\">  &quot;_id&quot; : &quot;1&quot;,</div><div class=\"line\">  &quot;_version&quot; : 7</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>查看是否已删除<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"># curl -XGET  http://localhost:9200/blog/article/1?pretty</div><div class=\"line\">&#123;</div><div class=\"line\">  &quot;_index&quot; : &quot;blog&quot;,</div><div class=\"line\">  &quot;_type&quot; : &quot;article&quot;,</div><div class=\"line\">  &quot;_id&quot; : &quot;1&quot;,</div><div class=\"line\">  &quot;found&quot; : false</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n","excerpt":"<p>ElasticSearch是由Shay Banon发起的一个开源搜索服务器项目。由于其分布式特性和实时搜索能力，成为当前搜索和数据分析解决方案领域的重要成员。</p>\n<p><img src=\"http://n.sinaimg.cn/games/3ece443e/20161006/ElasticSearch.png\" alt=\"ElasticSearch\"></p>","more":"<h2 id=\"基本概念\"><a href=\"#基本概念\" class=\"headerlink\" title=\"基本概念\"></a>基本概念</h2><p>索引</p>\n<blockquote>\n<p>索引（index）是ElasticSearch存放数据的一种逻辑结构。类比关系型数据库中的数据表。</p>\n</blockquote>\n<p>文档</p>\n<blockquote>\n<p>文档（document）是ElasticSearch中存储的主要实体。每个ElasticSearch文档类比关系型数据库中数据表的没一行数据。<br>文档由字段（行数据的列）组成，一个文档由多个字段组成，并且ElasticSearch允许一个字段重复出现多次，该类型字段被称为多只字段。每个字段对应一种类型（字符串型、数值型、日期型等），并且ElasticSearch可以自动确定字段类型。不同于关系型数据库，ElasticSearch的文档结构可以是不固定的。即不同的文档可以有不同的字段集合。</p>\n</blockquote>\n<p>文档类型</p>\n<blockquote>\n<p>ElasticSearch中，一个索引可以存储许多不同用途的对象。按照不同的用途我们可以将文档划分成不同的类型加以区分。</p>\n</blockquote>\n<p>节点和集群</p>\n<blockquote>\n<p>ElasticSearch既可以作为一个独立搜索服务器工作，也支持多台一起协作进行运行，构成一个集群（cluster），其中的每个服务器被称为节点（node）。ElasticSearch可以通过索引分片,将海量的数据进行分割并分布到不同的节点，来实现更强的可用性和更高的性能。</p>\n</blockquote>\n<p>分片</p>\n<blockquote>\n<p>对于存储大规模的文档，ElasticSearch会将数据进行切分，每部分切成一个单独的Apache Lucene索引，称为分片（shared）。每个分片可以存储在集群的不同的节点上，当一个查询需要用到多个分片时，ElasticSearch会将请求发送至多个分片，之后结果进行合并。</p>\n</blockquote>\n<p>副本</p>\n<blockquote>\n<p>分片副本是对原始分片的一个拷贝，每个主分片可以有零个或者多个副分片。当主分片丢失时，副分片就会被提升为主分片。启用分片副本功能，可以提高查询的吞吐或实现系统的高可用性。</p>\n</blockquote>\n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><h3 id=\"环境准备\"><a href=\"#环境准备\" class=\"headerlink\" title=\"环境准备\"></a>环境准备</h3><p>JDK6+</p>\n<p>JDK的安装方式比较简单，只需将下载回来的程序包解压到相应的目录即可。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">wget http://download.oracle.com/otn-pub/java/jdk/8u101-b13/jdk-8u101-linux-x64.tar.gz</div><div class=\"line\">mkdir /usr/local/java</div><div class=\"line\">tar -zxf jdk-8u101-linux-x64.tar.gz -C /usr/local/java/</div></pre></td></tr></table></figure></p>\n<p>设置JDK的环境变量，如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"># tail -3 ~/.bash_profile</div><div class=\"line\">export JAVA_HOME=/usr/local/java/jdk1.8.0_101</div><div class=\"line\">export PATH=$PATH:$JAVA_HOME/bin</div><div class=\"line\">exportCLASSPATH=.:$JAVA_HOME/lib/tools.jar:$JAVA_HOME/lib/dt.jar:$CLASSPATH</div></pre></td></tr></table></figure></p>\n<p>重新加载环境变量<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"># source .bash_profile</div></pre></td></tr></table></figure></p>\n<p>在Shell提示符中执行java –version命令，显示如下结果，说明安装成功：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"># java -version</div><div class=\"line\">java version &quot;1.8.0_45&quot;</div><div class=\"line\">Java(TM) SE Runtime Environment (build 1.8.0_45-b14)</div><div class=\"line\">Java HotSpot(TM) 64-Bit Server VM (build 25.45-b02,mixed mode)</div></pre></td></tr></table></figure></p>\n<h3 id=\"安装Elasticsearch\"><a href=\"#安装Elasticsearch\" class=\"headerlink\" title=\"安装Elasticsearch\"></a>安装Elasticsearch</h3><p>下载Elasticsearch后，解压到对应的目录就完成Elasticsearch的安装。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"># wget https://download.elasticsearch.org/elasticsearch/elasticsearch/elasticsearch-1.7.0.zip</div><div class=\"line\"># unzip elasticsearch-1.7.0.zip</div><div class=\"line\"># mv elasticsearch-1.7.0 /usr/local/elasticsearch</div></pre></td></tr></table></figure></p>\n<h3 id=\"目录结构\"><a href=\"#目录结构\" class=\"headerlink\" title=\"目录结构\"></a>目录结构</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">elasticsearch/</div><div class=\"line\">├── bin</div><div class=\"line\">│   ...#运行elasticsearch和进行插件管理所需的脚本</div><div class=\"line\">├── config</div><div class=\"line\">│   ...#elasticsearch配置文件所在目录</div><div class=\"line\">├── data</div><div class=\"line\">│   ...#存储elasticsearch用到的数据</div><div class=\"line\">├── lib</div><div class=\"line\">│   ...#elasticsearch运行中用到的库</div><div class=\"line\">├── LICENSE.txt</div><div class=\"line\">├── logs</div><div class=\"line\">│   ...#存储elasticsearch运行中产生的事件信息和错误信息</div><div class=\"line\">├── nohup</div><div class=\"line\">├── NOTICE.txt</div><div class=\"line\">└── README.textile</div><div class=\"line\"></div><div class=\"line\">10 directories, 60 files</div></pre></td></tr></table></figure>\n<h3 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h3><p>所有的配置文件都位于config目录下。该目录下包含两个文件。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">├── config</div><div class=\"line\">│   ├── elasticsearch.yml</div><div class=\"line\">│   └── logging.yml</div></pre></td></tr></table></figure></p>\n<p>elasticsearch.yml</p>\n<blockquote>\n<p>负责设置服务器的默认配置。<br>比较重要的两个值cluster.name 和 node.name.</p>\n<ul>\n<li>cluster.name,保存的是集群名称。通过集群名称可以区分不同的集群。配置具有相同名称的节点将尝试组成一个集群。</li>\n<li>node.name，节点名称。我们也可以不指定该名称，elasticsearch会自动为节点选择一个唯一名称。但每次启动时这个唯一名称会发生改变。</li>\n</ul>\n</blockquote>\n<p>其他配置<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div><div class=\"line\">143</div><div class=\"line\">144</div><div class=\"line\">145</div><div class=\"line\">146</div><div class=\"line\">147</div><div class=\"line\">148</div><div class=\"line\">149</div><div class=\"line\">150</div><div class=\"line\">151</div><div class=\"line\">152</div><div class=\"line\">153</div><div class=\"line\">154</div><div class=\"line\">155</div><div class=\"line\">156</div><div class=\"line\">157</div><div class=\"line\">158</div><div class=\"line\">159</div><div class=\"line\">160</div><div class=\"line\">161</div><div class=\"line\">162</div><div class=\"line\">163</div><div class=\"line\">164</div><div class=\"line\">165</div><div class=\"line\">166</div><div class=\"line\">167</div><div class=\"line\">168</div><div class=\"line\">169</div><div class=\"line\">170</div><div class=\"line\">171</div><div class=\"line\">172</div><div class=\"line\">173</div><div class=\"line\">174</div><div class=\"line\">175</div><div class=\"line\">176</div><div class=\"line\">177</div><div class=\"line\">178</div><div class=\"line\">179</div><div class=\"line\">180</div><div class=\"line\">181</div><div class=\"line\">182</div><div class=\"line\">183</div><div class=\"line\">184</div><div class=\"line\">185</div><div class=\"line\">186</div><div class=\"line\">187</div><div class=\"line\">188</div><div class=\"line\">189</div><div class=\"line\">190</div><div class=\"line\">191</div><div class=\"line\">192</div><div class=\"line\">193</div><div class=\"line\">194</div><div class=\"line\">195</div><div class=\"line\">196</div><div class=\"line\">197</div><div class=\"line\">198</div><div class=\"line\">199</div><div class=\"line\">200</div><div class=\"line\">201</div><div class=\"line\">202</div><div class=\"line\">203</div><div class=\"line\">204</div><div class=\"line\">205</div><div class=\"line\">206</div><div class=\"line\">207</div><div class=\"line\">208</div><div class=\"line\">209</div><div class=\"line\">210</div><div class=\"line\">211</div><div class=\"line\">212</div><div class=\"line\">213</div><div class=\"line\">214</div><div class=\"line\">215</div><div class=\"line\">216</div><div class=\"line\">217</div><div class=\"line\">218</div><div class=\"line\">219</div><div class=\"line\">220</div><div class=\"line\">221</div><div class=\"line\">222</div><div class=\"line\">223</div><div class=\"line\">224</div><div class=\"line\">225</div><div class=\"line\">226</div><div class=\"line\">227</div><div class=\"line\">228</div><div class=\"line\">229</div><div class=\"line\">230</div><div class=\"line\">231</div><div class=\"line\">232</div><div class=\"line\">233</div><div class=\"line\">234</div><div class=\"line\">235</div><div class=\"line\">236</div><div class=\"line\">237</div><div class=\"line\">238</div><div class=\"line\">239</div><div class=\"line\">240</div><div class=\"line\">241</div><div class=\"line\">242</div><div class=\"line\">243</div><div class=\"line\">244</div><div class=\"line\">245</div><div class=\"line\">246</div><div class=\"line\">247</div><div class=\"line\">248</div><div class=\"line\">249</div><div class=\"line\">250</div><div class=\"line\">251</div><div class=\"line\">252</div><div class=\"line\">253</div><div class=\"line\">254</div><div class=\"line\">255</div><div class=\"line\">256</div><div class=\"line\">257</div><div class=\"line\">258</div><div class=\"line\">259</div><div class=\"line\">260</div><div class=\"line\">261</div><div class=\"line\">262</div><div class=\"line\">263</div><div class=\"line\">264</div><div class=\"line\">265</div><div class=\"line\">266</div><div class=\"line\">267</div><div class=\"line\">268</div><div class=\"line\">269</div><div class=\"line\">270</div><div class=\"line\">271</div><div class=\"line\">272</div><div class=\"line\">273</div><div class=\"line\">274</div><div class=\"line\">275</div><div class=\"line\">276</div><div class=\"line\">277</div><div class=\"line\">278</div><div class=\"line\">279</div><div class=\"line\">280</div><div class=\"line\">281</div><div class=\"line\">282</div><div class=\"line\">283</div><div class=\"line\">284</div><div class=\"line\">285</div><div class=\"line\">286</div><div class=\"line\">287</div><div class=\"line\">288</div><div class=\"line\">289</div><div class=\"line\">290</div><div class=\"line\">291</div><div class=\"line\">292</div><div class=\"line\">293</div><div class=\"line\">294</div><div class=\"line\">295</div><div class=\"line\">296</div><div class=\"line\">297</div><div class=\"line\">298</div><div class=\"line\">299</div><div class=\"line\">300</div><div class=\"line\">301</div><div class=\"line\">302</div><div class=\"line\">303</div><div class=\"line\">304</div><div class=\"line\">305</div><div class=\"line\">306</div><div class=\"line\">307</div><div class=\"line\">308</div><div class=\"line\">309</div><div class=\"line\">310</div><div class=\"line\">311</div><div class=\"line\">312</div><div class=\"line\">313</div><div class=\"line\">314</div><div class=\"line\">315</div><div class=\"line\">316</div><div class=\"line\">317</div><div class=\"line\">318</div><div class=\"line\">319</div><div class=\"line\">320</div><div class=\"line\">321</div><div class=\"line\">322</div><div class=\"line\">323</div><div class=\"line\">324</div><div class=\"line\">325</div><div class=\"line\">326</div><div class=\"line\">327</div><div class=\"line\">328</div><div class=\"line\">329</div><div class=\"line\">330</div><div class=\"line\">331</div><div class=\"line\">332</div><div class=\"line\">333</div><div class=\"line\">334</div><div class=\"line\">335</div><div class=\"line\">336</div><div class=\"line\">337</div><div class=\"line\">338</div><div class=\"line\">339</div><div class=\"line\">340</div><div class=\"line\">341</div><div class=\"line\">342</div><div class=\"line\">343</div><div class=\"line\">344</div><div class=\"line\">345</div><div class=\"line\">346</div><div class=\"line\">347</div><div class=\"line\">348</div><div class=\"line\">349</div><div class=\"line\">350</div><div class=\"line\">351</div><div class=\"line\">352</div><div class=\"line\">353</div><div class=\"line\">354</div><div class=\"line\">355</div><div class=\"line\">356</div><div class=\"line\">357</div><div class=\"line\">358</div><div class=\"line\">359</div><div class=\"line\">360</div><div class=\"line\">361</div><div class=\"line\">362</div><div class=\"line\">363</div><div class=\"line\">364</div><div class=\"line\">365</div><div class=\"line\">366</div><div class=\"line\">367</div><div class=\"line\">368</div><div class=\"line\">369</div><div class=\"line\">370</div><div class=\"line\">371</div><div class=\"line\">372</div><div class=\"line\">373</div><div class=\"line\">374</div><div class=\"line\">375</div><div class=\"line\">376</div><div class=\"line\">377</div><div class=\"line\">378</div><div class=\"line\">379</div><div class=\"line\">380</div><div class=\"line\">381</div></pre></td><td class=\"code\"><pre><div class=\"line\">##################### Elasticsearch Configuration Example #####################</div><div class=\"line\"></div><div class=\"line\">＃此文件包含各种配置设置的概述，</div><div class=\"line\">＃针对操作人员。应用程序开发人员应该</div><div class=\"line\">＃在咨询&lt;http://elasticsearch.org/guide&gt;指南。</div><div class=\"line\">#</div><div class=\"line\">＃安装过程被覆盖在</div><div class=\"line\">＃&lt;http://elasticsearch.org/guide/en/elasticsearch/reference/current/setup.html&gt;。</div><div class=\"line\">#</div><div class=\"line\">＃Elasticsearch附带了大多数设置合理的默认值，</div><div class=\"line\">＃所以你可以尝试使用它而不用修改。</div><div class=\"line\">#</div><div class=\"line\">＃大多数时候，这些默认值是蛮好的运行生产</div><div class=\"line\">＃集群。如果你正在微调群集，或者想知道的某些配置选项＃效果，请_DO ask_上</div><div class=\"line\">＃邮件列表或IRC频道[http://elasticsearch.org/community。</div><div class=\"line\">#</div><div class=\"line\">＃配置中的任何元素都可以用环境变量替换</div><div class=\"line\">＃通过将它们放置在$ &#123;...&#125;符号。 例如：</div><div class=\"line\">#</div><div class=\"line\">#node.rack: $&#123;RACK_ENV_VAR&#125;</div><div class=\"line\"></div><div class=\"line\">＃有关支持的格式和配置文件信息语法，请参阅</div><div class=\"line\">＃&lt;http://elasticsearch.org/guide/en/elasticsearch/reference/current/setup-configuration.html&gt;</div><div class=\"line\"></div><div class=\"line\">################################### Cluster 集群###################################</div><div class=\"line\"></div><div class=\"line\">＃集群名称标识群集的自动发现。如果你在同一个网络上的正在运行多个群集，请确保您使用的是唯一的名称。</div><div class=\"line\">＃</div><div class=\"line\">＃cluster.name：elasticsearch</div><div class=\"line\"></div><div class=\"line\">#################################### Node 节点#####################################</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">＃节点名称是在启动时动态生成的，但你也可以手动配置它们。你可以给这个节点起一个特定的名称：</div><div class=\"line\">＃</div><div class=\"line\">#node.name: &quot;Franz Kafka&quot;</div><div class=\"line\"></div><div class=\"line\">＃每个节点可以被配置为允许或拒绝称为集群主节点，</div><div class=\"line\">＃和允许或拒绝来存储数据。</div><div class=\"line\">＃</div><div class=\"line\">＃允许此节点可以作为主节点（默认启用）：</div><div class=\"line\">＃</div><div class=\"line\">#node.master: true</div><div class=\"line\">#</div><div class=\"line\"># 允许此节点可以用来存储数据（默认启用）：</div><div class=\"line\">#</div><div class=\"line\">#node.data: true</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">＃你可以利用这些设置，以设计高级集群拓扑。</div><div class=\"line\">＃</div><div class=\"line\">＃1，你想这个节点永远不会成为一个主节点，只保存数据。这将是群集的“主力”。</div><div class=\"line\">＃</div><div class=\"line\">＃</div><div class=\"line\">#node.master: false</div><div class=\"line\">#node.data: true</div><div class=\"line\">#</div><div class=\"line\">＃2，你要这个节点只能作为主：不存储任何数据和有免费的资源。这将是群集的“协调员”。</div><div class=\"line\">＃</div><div class=\"line\">＃</div><div class=\"line\">#node.master: true</div><div class=\"line\">#node.data: false</div><div class=\"line\">#</div><div class=\"line\">＃3，你希望这个节点是不是主数据节点，但可以充当“搜索负载平衡器”（取从节点的数据，聚集结果等）</div><div class=\"line\">＃</div><div class=\"line\">#node.master: false</div><div class=\"line\">#node.data: false</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">＃使用群集健康状况API[http://localhost:9200/_cluster/health]，</div><div class=\"line\">＃节点信息API[http://localhost:9200/_nodes]或GUI工具</div><div class=\"line\">＃如&lt;http://www.elasticsearch.org/overview/marvel/&gt;</div><div class=\"line\">＃&lt;http://github.com/karmi/elasticsearch-paramedic&gt;</div><div class=\"line\">＃&lt;http://github.com/lukas-vlcek/bigdesk&gt;和</div><div class=\"line\">＃&lt;http://mobz.github.com/elasticsearch-head&gt;检查群集状态。</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">＃一个节点可以有与之关联的通用属性，可用于定制分片分配过滤，或分配意识。</div><div class=\"line\">＃</div><div class=\"line\">＃属性是一个简单的键值对，类似node.key：值，下面是一个例子：</div><div class=\"line\">＃</div><div class=\"line\">#node.rack: rack314</div><div class=\"line\"></div><div class=\"line\">＃默认情况下，多个节点被允许从相同的安装位置</div><div class=\"line\"># 如果要禁用的话，设置如下：</div><div class=\"line\">#node.max_local_storage_nodes: 1</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">#################################### Index 索引####################################</div><div class=\"line\"></div><div class=\"line\">#</div><div class=\"line\">＃您可以设置一些选项（如分片/副本选项，映射或分析器的定义，事务日志设置...）对全局参数，在这个文件中。</div><div class=\"line\">#</div><div class=\"line\"># Note, that it makes more sense to configure index settings specifically for</div><div class=\"line\"># a certain index, either when creating it or by using the index templates API.</div><div class=\"line\">#</div><div class=\"line\">＃请注意，它更有意义专门配置索引设置</div><div class=\"line\">＃某个具体的索引，创造它或使用该索引模板API。</div><div class=\"line\"># See &lt;http://elasticsearch.org/guide/en/elasticsearch/reference/current/index-modules.html&gt; and</div><div class=\"line\"># &lt;http://elasticsearch.org/guide/en/elasticsearch/reference/current/indices-create-index.html&gt;</div><div class=\"line\"># for more information.</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"># 设置一个索引的分片（副本）数量（默认 5）</div><div class=\"line\">#</div><div class=\"line\">#index.number_of_shards: 5</div><div class=\"line\"></div><div class=\"line\">＃设置索引（默认值为1）的副本（额外副本）数量：</div><div class=\"line\">＃</div><div class=\"line\">#index.number_of_replicas: 1</div><div class=\"line\"></div><div class=\"line\"># Note, that for development on a local machine, with small indices, it usually</div><div class=\"line\"># makes sense to &quot;disable&quot; the distributed features:</div><div class=\"line\">#</div><div class=\"line\">＃注意，对于在本地机器，它通常比较小的值。禁用分布式特点是很有必要的</div><div class=\"line\">＃</div><div class=\"line\">#index.number_of_shards: 1</div><div class=\"line\">#index.number_of_replicas: 0</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">＃这些设置直接影响索引和搜索操作的性能</div><div class=\"line\">＃在集群中。假设你有足够多的机器来保存分片及</div><div class=\"line\">＃副本，经验法则是：</div><div class=\"line\">#</div><div class=\"line\"># 1. 更多的分片能提高索引效率，一个大的索引允许存储在不同的服务器上</div><div class=\"line\"># 2. 更多的副本能够提高搜索效率，并且能够增强系统的可用性</div><div class=\"line\">#</div><div class=\"line\">#  &quot;number_of_shards&quot; 对于一个索引不能动态修改设置一次.</div><div class=\"line\">#</div><div class=\"line\"># T &quot;number_of_replicas&quot; 可以增加或者减少在任何时候，通过索引更新或者api操作</div><div class=\"line\">#</div><div class=\"line\"># Elasticsearch takes care about load balancing, relocating, gathering the</div><div class=\"line\"># results from nodes, etc. Experiment with different settings to fine-tune</div><div class=\"line\"># your setup.</div><div class=\"line\"></div><div class=\"line\">＃Elasticsearch需要关心负载均衡，搬迁，从节点收集结果，等。</div><div class=\"line\"># 你可以通过不断的微调进行设置</div><div class=\"line\"></div><div class=\"line\">＃使用索引状态API（&lt;http://localhost:9200/A/_status&gt;）检查</div><div class=\"line\">＃索引状态。</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">#################################### Paths ####################################</div><div class=\"line\"></div><div class=\"line\"># 路径包含目录配置（此文件并logging.yml）：</div><div class=\"line\">#path.conf: /path/to/conf</div><div class=\"line\"></div><div class=\"line\"># 索引数据存储路径配置</div><div class=\"line\">#path.data: /path/to/data</div><div class=\"line\">#</div><div class=\"line\">＃可以任选地包括一个以上的位置，方便扩展和使用。 例如：</div><div class=\"line\">#</div><div class=\"line\">#path.data: /path/to/data1,/path/to/data2</div><div class=\"line\"></div><div class=\"line\"># 临时文件路径：</div><div class=\"line\">#</div><div class=\"line\">#path.work: /path/to/work</div><div class=\"line\"></div><div class=\"line\"># 日志文件路径:</div><div class=\"line\">#</div><div class=\"line\">#path.logs: /path/to/logs</div><div class=\"line\"></div><div class=\"line\"># 插件安装目录</div><div class=\"line\">#</div><div class=\"line\">#path.plugins: /path/to/plugins</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">#################################### Plugin ###################################</div><div class=\"line\"></div><div class=\"line\"># 如果这里列出的插件没有安装用于当前节点，该节点将无法启动。</div><div class=\"line\">#</div><div class=\"line\">#plugin.mandatory: mapper-attachments,lang-groovy</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">################################### Memory ####################################</div><div class=\"line\"></div><div class=\"line\">＃Elasticsearch表现不佳时，JVM启动交换：你应该确保它永远不会_交换。</div><div class=\"line\">#</div><div class=\"line\"># 将此属性设置为true锁定内存：</div><div class=\"line\">#</div><div class=\"line\">#bootstrap.mlockall: true</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"># 确保ES_MIN_MEM和ES_MAX_MEM环境变量设置</div><div class=\"line\">＃为相同的值，并且该机器有足够的内存来分配</div><div class=\"line\">＃为Elasticsearch，留出足够的内存为操作系统本身。</div><div class=\"line\">＃</div><div class=\"line\">#</div><div class=\"line\"># You should also make sure that the Elasticsearch process is allowed to lock</div><div class=\"line\"># the memory, eg. by using `ulimit -l unlimited`.</div><div class=\"line\"># 你还应该确保该Elasticsearch允许进程锁定内存</div><div class=\"line\">＃例如。通过使用`ulimit -l unlimited`。</div><div class=\"line\"></div><div class=\"line\">############################## Network And HTTP ###############################</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">＃Elasticsearch，默认情况下，本身绑定到0.0.0.0地址，并监听</div><div class=\"line\">＃端口[9200-9300] HTTP流量和端口[9300-9400]节点到节点</div><div class=\"line\">＃沟通。（范围意味着，如果端口忙，它会自动将</div><div class=\"line\">＃尝试下口）。</div><div class=\"line\"></div><div class=\"line\"># 设置绑定专用地址（IPv4或IPv6）：</div><div class=\"line\">#network.bind_host: 192.168.0.1</div><div class=\"line\"></div><div class=\"line\">＃设置其他节点将使用与该节点通信的地址。否则</div><div class=\"line\">＃，它会自动的产生。它必须指向一个实际的IP地址。</div><div class=\"line\">#</div><div class=\"line\">#network.publish_host: 192.168.0.1</div><div class=\"line\"></div><div class=\"line\"># 同时设置“bind_host&apos;和&apos;publish_host”：</div><div class=\"line\">#</div><div class=\"line\">#network.host: 192.168.0.1</div><div class=\"line\"></div><div class=\"line\"># 设置一个自定义的节点间通讯端口，（默认为 9300）</div><div class=\"line\">#transport.tcp.port: 9300</div><div class=\"line\"></div><div class=\"line\"># 启用节点间通讯压缩</div><div class=\"line\">#</div><div class=\"line\">#transport.tcp.compress: true</div><div class=\"line\"></div><div class=\"line\"># 设置自定义端口侦听HTTP流量：</div><div class=\"line\">#</div><div class=\"line\">#http.port: 9200</div><div class=\"line\"></div><div class=\"line\"># 设置自定义允许的内容长度：</div><div class=\"line\">#</div><div class=\"line\">#http.max_content_length: 100mb</div><div class=\"line\"></div><div class=\"line\"># 完全禁用HTTP：</div><div class=\"line\">#</div><div class=\"line\">#http.enabled: false</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">################################### Gateway ###################################</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">＃网关允许持收集集群之间的群集状态</div><div class=\"line\">＃集群中每个状态改变（例如添加一个索引），都将会存储</div><div class=\"line\">＃在网关，并且当集群首次启动时，</div><div class=\"line\">＃它会从网关读出其状态。</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">＃有几种类型的网关实现的。欲了解更多信息，请参阅</div><div class=\"line\"># &lt;http://elasticsearch.org/guide/en/elasticsearch/reference/current/modules-gateway.html&gt;.</div><div class=\"line\"></div><div class=\"line\">＃默认网关类型为“本地”网关（推荐）：</div><div class=\"line\">#</div><div class=\"line\">#gateway.type: local</div><div class=\"line\"></div><div class=\"line\"># 设置当集群崩溃时，如何重新启动并恢复进程（使用共享网关时，尽可能多的使用本地数据）</div><div class=\"line\"></div><div class=\"line\"># 允许恢复后，在一个集群中有N个节点：</div><div class=\"line\">#</div><div class=\"line\">#gateway.recover_after_nodes: 1</div><div class=\"line\"></div><div class=\"line\">＃设置超时时间，在启动恢复过程中，前面设置的N个节点全部重启（接受时间值）：</div><div class=\"line\">#</div><div class=\"line\"></div><div class=\"line\">#gateway.recover_after_time: 5m</div><div class=\"line\"></div><div class=\"line\">＃设置在一个句群众预计的节点数</div><div class=\"line\">#一旦这些N个节点全部启用（满足recover_after_nodes），立即开始恢复过程（无需等待恢复时间后到期）：</div><div class=\"line\">#</div><div class=\"line\">#gateway.expected_nodes: 2</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">############################# Recovery Throttling 恢复节流 #############################</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">＃这些设置可以控制碎片分配的过程，在节点恢复期间、副本定位、重新平衡，或添加和删除节点时</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">#</div><div class=\"line\"># 设置一个节点上同时恢复数量</div><div class=\"line\"># 1. 初步恢复期间</div><div class=\"line\">#</div><div class=\"line\">#cluster.routing.allocation.node_initial_primaries_recoveries: 4</div><div class=\"line\">#</div><div class=\"line\"># 2. 在添加/删除节点，再平衡期间</div><div class=\"line\">#</div><div class=\"line\">#cluster.routing.allocation.node_concurrent_recoveries: 2</div><div class=\"line\"></div><div class=\"line\"># 设置一个恢复时的吞吐量值（如100MB，默认20MB）</div><div class=\"line\">#</div><div class=\"line\">#indices.recovery.max_bytes_per_sec: 20mb</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"># 设置一个并发流数量限制，在同级别的分片恢复时</div><div class=\"line\">#</div><div class=\"line\">#indices.recovery.concurrent_streams: 5</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">################################## Discovery 发现##################################</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">＃发现基础设施，确保节点可以在群集内找到和主节点的选举。是默认是通过多播方式来进行发现。</div><div class=\"line\"></div><div class=\"line\"># 设置一个节点确保能在集群内发现N个其他合格的节点能成为主节点。</div><div class=\"line\"></div><div class=\"line\">#discovery.zen.minimum_master_nodes: 1</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"># 设置一个过期时间，在通过ping发现其他节点时</div><div class=\"line\"># 在一个较差的网络环境中设置一个较长的值，可以最大限度的减少报错</div><div class=\"line\"></div><div class=\"line\">#discovery.zen.ping.timeout: 3s</div><div class=\"line\"></div><div class=\"line\"># 更多的信息，请看</div><div class=\"line\"># &lt;http://elasticsearch.org/guide/en/elasticsearch/reference/current/modules-discovery-zen.html&gt;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">＃单播发现允许明确地控制哪些节点将被用于发现群集。它可以在多播不存在，或限制集群通信时使用。</div><div class=\"line\">#</div><div class=\"line\"># 1. 多播发现（默认启用）</div><div class=\"line\">#</div><div class=\"line\">#discovery.zen.ping.multicast.enabled: false</div><div class=\"line\">#</div><div class=\"line\"># 2. 配置一个初始清单在集群的主节点上，为了发现一个刚启用的节点</div><div class=\"line\">#</div><div class=\"line\">#discovery.zen.ping.unicast.hosts: [&quot;host1&quot;, &quot;host2:port&quot;]</div><div class=\"line\"></div><div class=\"line\"># 为了发现 ，EC2允许使用AWS EC2 API</div><div class=\"line\"># 你必须安装云AWS插件启用EC2发现。</div><div class=\"line\">#</div><div class=\"line\"># 更多信息请查看</div><div class=\"line\"># &lt;http://elasticsearch.org/guide/en/elasticsearch/reference/current/modules-discovery-ec2.html&gt;</div><div class=\"line\">#</div><div class=\"line\"># See &lt;http://elasticsearch.org/tutorials/elasticsearch-on-ec2/&gt;</div><div class=\"line\"># 一步一步的教程</div><div class=\"line\"></div><div class=\"line\"># 为了发现 ，GCE发现允许使用谷歌Compute Engine的API</div><div class=\"line\">#</div><div class=\"line\"># 你必须安装云GCE GCE插件启用的发现。</div><div class=\"line\">#</div><div class=\"line\"># For more information, see &lt;https://github.com/elasticsearch/elasticsearch-cloud-gce&gt;.</div><div class=\"line\"></div><div class=\"line\"># Azure的发现允许以执行发现使用Azure的API。</div><div class=\"line\">#</div><div class=\"line\"># 你必须安装云cloud-azure插件启用的发现。</div><div class=\"line\"># For more information, see &lt;https://github.com/elasticsearch/elasticsearch-cloud-azure&gt;.</div><div class=\"line\"></div><div class=\"line\">################################## Slow Log ##################################</div><div class=\"line\"></div><div class=\"line\"># 分片级查询并会的对应等级的日志</div><div class=\"line\"></div><div class=\"line\">#index.search.slowlog.threshold.query.warn: 10s</div><div class=\"line\">#index.search.slowlog.threshold.query.info: 5s</div><div class=\"line\">#index.search.slowlog.threshold.query.debug: 2s</div><div class=\"line\">#index.search.slowlog.threshold.query.trace: 500ms</div><div class=\"line\"></div><div class=\"line\">#index.search.slowlog.threshold.fetch.warn: 1s</div><div class=\"line\">#index.search.slowlog.threshold.fetch.info: 800ms</div><div class=\"line\">#index.search.slowlog.threshold.fetch.debug: 500ms</div><div class=\"line\">#index.search.slowlog.threshold.fetch.trace: 200ms</div><div class=\"line\"></div><div class=\"line\">#index.indexing.slowlog.threshold.index.warn: 10s</div><div class=\"line\">#index.indexing.slowlog.threshold.index.info: 5s</div><div class=\"line\">#index.indexing.slowlog.threshold.index.debug: 2s</div><div class=\"line\">#index.indexing.slowlog.threshold.index.trace: 500ms</div><div class=\"line\"></div><div class=\"line\">################################## GC Logging ################################</div><div class=\"line\"></div><div class=\"line\">#monitor.jvm.gc.young.warn: 1000ms</div><div class=\"line\">#monitor.jvm.gc.young.info: 700ms</div><div class=\"line\">#monitor.jvm.gc.young.debug: 400ms</div><div class=\"line\"></div><div class=\"line\">#monitor.jvm.gc.old.warn: 10s</div><div class=\"line\">#monitor.jvm.gc.old.info: 5s</div><div class=\"line\">#monitor.jvm.gc.old.debug: 2s</div><div class=\"line\"></div><div class=\"line\">################################## Security ################################</div><div class=\"line\"></div><div class=\"line\"># Uncomment if you want to enable JSONP as a valid return transport on the</div><div class=\"line\"># http server. With this enabled, it may pose a security risk, so disabling</div><div class=\"line\"># it unless you need it is recommended (it is disabled by default).</div><div class=\"line\"></div><div class=\"line\">＃不推荐，如果要启用JSONP作为HTTP服务器上的返回。</div><div class=\"line\">#启用此功能，它可能会带来安全风险，因此禁用它，除非你需要的建议（它被默认禁用）。</div><div class=\"line\"></div><div class=\"line\">#http.jsonp.enable: true</div></pre></td></tr></table></figure></p>\n<p>logging.yml</p>\n<blockquote>\n<p>定义多少信息写入系统日志、定义日志文件，并定期创建新文件</p>\n</blockquote>\n<h3 id=\"管理\"><a href=\"#管理\" class=\"headerlink\" title=\"管理\"></a>管理</h3><p>启动Elasticsearch<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"># /usr/local/elasticsearch/bin/elasticsearch  -d</div></pre></td></tr></table></figure></p>\n<blockquote>\n<p>-d 表示将进程放入后台运行</p>\n</blockquote>\n<p>或者通过\u0004nohup命令<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"># nohup /usr/local/elasticsearch/bin/elasticsearch &gt; nohup</div></pre></td></tr></table></figure></p>\n<p>将elasticsearch设置成开机自启动<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"># echo &quot;nohup /usr/local/elasticsearch/bin/elasticsearch &gt; nohup&quot; &gt; /etc/rc.local</div></pre></td></tr></table></figure></p>\n<p>确认elasticsearch的9200端口已监听，说明elasticsearch已成功运行</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"># netstat -anp |grep :9200</div><div class=\"line\">tcp        0      0 :::9200                     :::*                        LISTEN      3362/java</div></pre></td></tr></table></figure>\n<p>如何关闭elasticsearch</p>\n<ul>\n<li>方法一：如果节点与控制台相连并且当前elasticsearch是使用-f选项运行，则只需要按下Ctrl+C组合键即可</li>\n<li>方法二：通过发送TERM信号来终止服务器进程 kill -9 进程ID</li>\n<li>方法三：使用REST API</li>\n</ul>\n<p>关闭整个集群<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"># curl -XPOST http://localhost:9200/_cluster/nodes/_shutdown</div></pre></td></tr></table></figure></p>\n<p>关闭单个节点<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"># curl -XPOST  http://127.0.0.1:9200/_cluster/nodes/2ens0yuEQ12G6ct1UDpihQ/_shutdown</div></pre></td></tr></table></figure></p>\n<p>2ens0yuEQ12G6ct1UDpihQ ，为要关闭的节点标志符</p>\n<p>查看节点标志符，可以从elasticsearch日志中或者通过REST API中获得<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"># curl http://localhost:9200/_nodes/?pretty</div><div class=\"line\">&#123;</div><div class=\"line\">  &quot;cluster_name&quot; : &quot;elasticsearch&quot;,</div><div class=\"line\">  &quot;nodes&quot; : &#123;</div><div class=\"line\">    &quot;13QfvIdATEurGAhVAlO6tQ&quot; : &#123;</div><div class=\"line\">      &quot;name&quot; : &quot;Edwin Jarvis&quot;,</div><div class=\"line\">      ...</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>13QfvIdATEurGAhVAlO6tQ,即为节点标志符</p>\n<h3 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"># curl http://localhost:9200</div><div class=\"line\">&#123;</div><div class=\"line\">  &quot;status&quot; : 200,</div><div class=\"line\">  &quot;name&quot; : &quot;Destroyer of Demons&quot;,</div><div class=\"line\">  &quot;cluster_name&quot; : &quot;elasticsearch&quot;,</div><div class=\"line\">  &quot;version&quot; : &#123;</div><div class=\"line\">    &quot;number&quot; : &quot;1.7.0&quot;,</div><div class=\"line\">    &quot;build_hash&quot; : &quot;929b9739cae115e73c346cb5f9a6f24ba735a743&quot;,</div><div class=\"line\">    &quot;build_timestamp&quot; : &quot;2015-07-16T14:31:07Z&quot;,</div><div class=\"line\">    &quot;build_snapshot&quot; : false,</div><div class=\"line\">    &quot;lucene_version&quot; : &quot;4.10.4&quot;</div><div class=\"line\">  &#125;,</div><div class=\"line\">  &quot;tagline&quot; : &quot;You Know, for Search&quot;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>查看elasticsearch服务器当前运行状况<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"># curl http://localhost:9200/_cluster/health?pretty</div><div class=\"line\">&#123;</div><div class=\"line\">  &quot;cluster_name&quot; : &quot;elasticsearch&quot;,</div><div class=\"line\">  &quot;status&quot; : &quot;green&quot;,</div><div class=\"line\">  &quot;timed_out&quot; : false,</div><div class=\"line\">  &quot;number_of_nodes&quot; : 1,</div><div class=\"line\">  &quot;number_of_data_nodes&quot; : 1,</div><div class=\"line\">  &quot;active_primary_shards&quot; : 0,</div><div class=\"line\">  &quot;active_shards&quot; : 0,</div><div class=\"line\">  &quot;relocating_shards&quot; : 0,</div><div class=\"line\">  &quot;initializing_shards&quot; : 0,</div><div class=\"line\">  &quot;unassigned_shards&quot; : 0,</div><div class=\"line\">  &quot;delayed_unassigned_shards&quot; : 0,</div><div class=\"line\">  &quot;number_of_pending_tasks&quot; : 0,</div><div class=\"line\">  &quot;number_of_in_flight_fetch&quot; : 0</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h2 id=\"使用（基于REST-API数据操作）\"><a href=\"#使用（基于REST-API数据操作）\" class=\"headerlink\" title=\"使用（基于REST API数据操作）\"></a>使用（基于REST API数据操作）</h2><h3 id=\"REST\"><a href=\"#REST\" class=\"headerlink\" title=\"REST\"></a>REST</h3><p>REST 定义了一组体系架构原则，您可以根据这些原则设计以系统资源为中心的 Web 服务，包括使用不同语言编写的客户端如何通过 HTTP 处理和传输资源状态。 在类似于REST架构中，每个请求都会被定向到地址路径部分所指的具体对象上。</p>\n<h3 id=\"创建文档\"><a href=\"#创建文档\" class=\"headerlink\" title=\"创建文档\"></a>创建文档</h3><p>示例：创建一个文档用来存储一篇blog，内容如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">  &quot;title&quot;:&quot;my first article title&quot;,</div><div class=\"line\">  &quot;content&quot;:&quot;this is article content&quot;,</div><div class=\"line\">  &quot;date&quot;:&quot;2016-10-05&quot;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>操作：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"># curl -XPUT  http://localhost:9200/blog/article/1 -d &apos;&#123;&quot;title&quot;:&quot;my first article title&quot;,&quot;content&quot;:&quot;this is article content&quot;,&quot;date&quot;:&quot;2016-10-05&quot;&#125;&apos;</div></pre></td></tr></table></figure></p>\n<p>返回结果如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;&quot;_index&quot;:&quot;blog&quot;,&quot;_type&quot;:&quot;article&quot;,&quot;_id&quot;:&quot;1&quot;,&quot;_version&quot;:1,&quot;created&quot;:true&#125;</div></pre></td></tr></table></figure></p>\n<p>返回了操作结果信息，并显示新文档的存储位置。并且包含文档的唯一标识符以及当前版本信息。</p>\n<h3 id=\"检索文档\"><a href=\"#检索文档\" class=\"headerlink\" title=\"检索文档\"></a>检索文档</h3><p>按照REST风格，我们想要查看刚才创建的文档。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"># curl -XGET  http://localhost:9200/blog/article/1</div></pre></td></tr></table></figure></p>\n<p>结果<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">curl -XGET  http://localhost:9200/blog/article/1?pretty</div><div class=\"line\">&#123;</div><div class=\"line\">  &quot;_index&quot; : &quot;blog&quot;,</div><div class=\"line\">  &quot;_type&quot; : &quot;article&quot;,</div><div class=\"line\">  &quot;_id&quot; : &quot;1&quot;,</div><div class=\"line\">  &quot;_version&quot; : 1,</div><div class=\"line\">  &quot;found&quot; : true,</div><div class=\"line\">  &quot;_source&quot;:&#123;&quot;title&quot;:&quot;my first article title&quot;,&quot;content&quot;:&quot;this is article content&quot;,&quot;date&quot;:&quot;2016-10-05&quot;&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h3 id=\"更新文档\"><a href=\"#更新文档\" class=\"headerlink\" title=\"更新文档\"></a>更新文档</h3><p>Elasticsearch中更新索引中的文档是非常复杂的工作。必须先提取文档、从_source字段获得数据、移除旧文档、应用变更，作为新文档创建索引。</p>\n<p>示例，更改之前创建的blog，并增加author字段<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"># curl -XPOST  http://localhost:9200/blog/article/1 -d &apos;&#123;&quot;title&quot;:&quot;my first article title&quot;,&quot;content&quot;:&quot;this is article content&quot;,&quot;date&quot;:&quot;2016-10-05&quot;,&quot;author&quot;:&quot;zhimiao&quot;&#125;&apos;</div></pre></td></tr></table></figure></p>\n<p>结果：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"># &#123;&quot;_index&quot;:&quot;blog&quot;,&quot;_type&quot;:&quot;article&quot;,&quot;_id&quot;:&quot;1&quot;,&quot;_version&quot;:3,&quot;created&quot;:false&#125;</div></pre></td></tr></table></figure></p>\n<p>查看是否更新成功<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"># curl -XGET  http://localhost:9200/blog/article/1?pretty</div><div class=\"line\">&#123;</div><div class=\"line\">  &quot;_index&quot; : &quot;blog&quot;,</div><div class=\"line\">  &quot;_type&quot; : &quot;article&quot;,</div><div class=\"line\">  &quot;_id&quot; : &quot;1&quot;,</div><div class=\"line\">  &quot;_version&quot; : 4,</div><div class=\"line\">  &quot;found&quot; : true,</div><div class=\"line\">  &quot;_source&quot;:&#123;&quot;title&quot;:&quot;my first article title&quot;,&quot;content&quot;:&quot;this is article content&quot;,&quot;date&quot;:&quot;2016-10-05&quot;,&quot;author&quot;:&quot;zhimiao&quot;&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h3 id=\"删除文档\"><a href=\"#删除文档\" class=\"headerlink\" title=\"删除文档\"></a>删除文档</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"># curl -XDELETE  http://localhost:9200/blog/article/1?pretty</div><div class=\"line\">&#123;</div><div class=\"line\">  &quot;found&quot; : true,</div><div class=\"line\">  &quot;_index&quot; : &quot;blog&quot;,</div><div class=\"line\">  &quot;_type&quot; : &quot;article&quot;,</div><div class=\"line\">  &quot;_id&quot; : &quot;1&quot;,</div><div class=\"line\">  &quot;_version&quot; : 7</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>查看是否已删除<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"># curl -XGET  http://localhost:9200/blog/article/1?pretty</div><div class=\"line\">&#123;</div><div class=\"line\">  &quot;_index&quot; : &quot;blog&quot;,</div><div class=\"line\">  &quot;_type&quot; : &quot;article&quot;,</div><div class=\"line\">  &quot;_id&quot; : &quot;1&quot;,</div><div class=\"line\">  &quot;found&quot; : false</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>"},{"title":"LNMP环境安装与配置","date":"2016-09-25T15:30:00.000Z","ctime":"2016-09-25T15:30:00.000Z","utime":"2016-09-25T15:30:00.000Z","modif_times":0,"_content":"\n![LNMP](http://n.sinaimg.cn/games/3ece443e/20160925/lnmp_log.png)\n<!-- more -->\n\n## 环境准备\n\nOS：CentOS 7.2 64\n\nMySQL：[mysql-5.7.15](http://dev.mysql.com/downloads/mysql/)\n\nNginx：[nginx-1.11.4](http://n.sinaimg.cn/games/3ece443e/20160925/nginx-1.11.4.tar.gz)\n\nPHP：[php-5.6.25](http://n.sinaimg.cn/games/3ece443e/20160925/php-5.6.25.tar.gz)\n\n## 安装\n参考MySQL、Nginx、PHP的编译安装，分别安装 MySQL、Nginx、PHP到Linux。\n\n## 整合\n\n### 启动 php-fpm\n\n新建用户和用户组，\n```\n# groupadd www-data\n# useradd -g www-data www-data\n```\n需要修改 php-fpm.conf 配置文件，确保 php-fpm 模块使用 www-data 用户和 www-data 用户组的身份运行。\n\n```\nvi /usr/local/php56/etc/php-fpm.conf\n#找到以下内容并修改：\n; Unix user/group of processes\n; Note: The user is mandatory. If the group is not set, the default user's group\n;       will be used.\nuser = www-data\ngroup = www-data\n```\n修改 pid 配置，以方便我们后面根据pid管理php-fpm\n```\n[global]\n; Pid file\n; Note: the default prefix is /usr/local/php56/var\n; Default Value: none\npid = run/php-fpm.pid\n```\nPHP-FPM运行时，将会在/usr/local/php56/var/run/下生成 php-fpm.pid 文件。\n\n然后启动 php-fpm 服务：\n```\n/usr/local/php56/sbin/php-fpm\n```\n查看是否启动成功\n```\nps aux | grep php\nroot     18858  0.0  0.1 148164  3208 ?        Ss   12:38   0:00 php-fpm: master process (/usr/local/php56/etc/php-fpm.conf)\nwww-data 18859  0.0  0.1 148164  2856 ?        S    12:38   0:00 php-fpm: pool www\nwww-data 18860  0.0  0.1 148164  2856 ?        S    12:38   0:00 php-fpm: pool www\nroot     18862  0.0  0.0 112664   972 pts/1    S+   12:38   0:00 grep --color=auto php\n```\n**注** 需要着重提醒的是，如果文件不存在，则阻止 Nginx 将请求发送到后端的 PHP-FPM 模块， 以避免遭受恶意脚本注入的攻击。\n将 php.ini 文件中的配置项 cgi.fix_pathinfo 设置为 0 。\n\n```\nvi /usr/local/php56/lib/php.ini\n\ncgi.fix_pathinfo=0\n```\n\n\n### PHP-FPM 重要配置\nphp-fpm.conf重要参数详解\n\n- pid = run/php-fpm.pid\n> pid设置，默认在安装目录中的var/run/php-fpm.pid，建议开启\n\n- error_log = log/php-fpm.log\n> 错误日志，默认在安装目录中的var/log/php-fpm.log\n\n- log_level = notice\n> 错误级别. 可用级别为: alert（必须立即处理）, error（错误情况）, warning（警告情况）, notice（一般重要信息）, debug（调试信息）. 默认: notice.\n\n- emergency_restart_threshold = 60\n- emergency_restart_interval = 60s\n> 表示在emergency_restart_interval所设值内出现SIGSEGV或者SIGBUS错误的php-cgi进程数如果超过 emergency_restart_threshold个，php-fpm就会优雅重启。这两个选项一般保持默认值。\n\n- process_control_timeout = 0\n> 设置子进程接受主进程复用信号的超时时间. 可用单位: s(秒), m(分), h(小时), 或者 d(天) 默认单位: s(秒). 默认值: 0.\n\n- daemonize = yes\n> 后台执行fpm,默认值为yes，如果为了调试可以改为no。在FPM中，可以使用不同的设置来运行多个进程池。 这些设置可以针对每个进程池单独设置。\n\n- listen = 127.0.0.1:9000\n> fpm监听端口，即nginx中php处理的地址，一般默认值即可。可用格式为: 'ip:port', 'port', '/path/to/unix/socket'. 每个进程池都需要设置.\n\n- listen.backlog = -1\n> backlog数，-1表示无限制，由操作系统决定，此行注释掉就行。\n\n- listen.allowed_clients = 127.0.0.1\n> 允许访问FastCGI进程的IP，设置any为不限制IP，如果要设置其他主机的nginx也能访问这台FPM进程，listen处要设置成本地可被访问的IP。默认值是any。每个地址是用逗号分隔. 如果没有设置或者为空，则允许任何服务器请求连接\n\n- listen.owner = www\n- listen.group = www\n- listen.mode = 0666\n> unix socket设置选项，如果使用tcp方式访问，这里注释即可。\n\n- user = www\n- group = www\n> 启动进程的帐户和组\n\n- pm = dynamic #对于专用服务器，pm可以设置为static。\n> 如何控制子进程，选项有static和dynamic。如果选择static，则由pm.max_children指定固定的子进程数。如果选择dynamic，则由下开参数决定：\n\n- pm.max_children #\n> 子进程最大数\n\n- pm.start_servers #\n> 启动时的进程数\n\n- pm.min_spare_servers #\n> 保证空闲进程数最小值，如果空闲进程小于此值，则创建新的子进程\n\n- pm.max_spare_servers #\n> 保证空闲进程数最大值，如果空闲进程大于此值，此进行清理\n\n- pm.max_requests = 1000\n> 设置每个子进程重生之前服务的请求数. 对于可能存在内存泄漏的第三方模块来说是非常有用的. 如果设置为 '0' 则一直接受请求. 等同于 PHP_FCGI_MAX_REQUESTS 环境变量. 默认值: 0.\n\n- pm.status_path = /status\n> FPM状态页面的网址. 如果没有设置, 则无法访问状态页面. 默认值: none. munin监控会使用到\n\n- ping.path = /ping\n> FPM监控页面的ping网址. 如果没有设置, 则无法访问ping页面. 该页面用于外部检测FPM是否存活并且可以响应请求. 请注意必须以斜线开头 (/)。\n\n- ping.response = pong\n> 用于定义ping请求的返回相应. 返回为 HTTP 200 的 text/plain 格式文本. 默认值: pong.\n\n- request_terminate_timeout = 0\n> 设置单个请求的超时中止时间. 该选项可能会对php.ini设置中的'max_execution_time'因为某些特殊原因没有中止运行的脚本有用. 设置为 '0' 表示 'Off'.当经常出现502错误时可以尝试更改此选项。\n\n- request_slowlog_timeout = 10s\n> 当一个请求该设置的超时时间后，就会将对应的PHP调用堆栈信息完整写入到慢日志中. 设置为 '0' 表示 'Off'\n\n- slowlog = log/$pool.log.slow\n> 慢请求的记录日志,配合request_slowlog_timeout使用\n\n- rlimit_files = 1024\n> 设置文件打开描述符的rlimit限制. 默认值: 系统定义值默认可打开句柄是1024，可使用 ulimit -n查看，ulimit -n 2048修改。\n\n- rlimit_core = 0\n> 设置核心rlimit最大限制值. 可用值: 'unlimited' 、0或者正整数. 默认值: 系统定义值.\n\n- chroot =\n> 启动时的Chroot目录. 所定义的目录需要是绝对路径. 如果没有设置, 则chroot不被使用.\n\n- chdir =\n> 设置启动目录，启动时会自动Chdir到该目录. 所定义的目录需要是绝对路径. 默认值: 当前目录，或者/目录（chroot时）\n\n- catch_workers_output = yes\n> 重定向运行过程中的stdout和stderr到主要的错误日志文件中. 如果没有设置, stdout 和 stderr 将会根据FastCGI的规则被重定向到 /dev/null . 默认值: 空.\n\n\n**Tips** 配置完成之后可以通过 php-fpm -t 来检测配置是否基本正确。\n```\n# /usr/local/php56/sbin/php-fpm -t\n[25-Sep-2016 12:58:14] NOTICE: configuration file /usr/local/php56/etc/php-fpm.conf test is successful\n```\n\n### php-fpm管理\n\n测试php-fpm配置\n```\n/usr/local/php/sbin/php-fpm -t\n/usr/local/php/sbin/php-fpm -c /usr/local/php/etc/php.ini -y /usr/local/php/etc/php-fpm.conf -t\n```\n启动php-fpm\n```\n/usr/local/php/sbin/php-fpm\n/usr/local/php/sbin/php-fpm -c /usr/local/php/etc/php.ini -y /usr/local/php/etc/php-fpm.conf\n```\n关闭php-fpm\n```\nkill -INT `cat /usr/local/php/var/run/php-fpm.pid`\n```\n重启php-fpm\n```\nkill -USR2 `cat /usr/local/php/var/run/php-fpm.pid`\n```\n\n## 配置 Nginx 使其支持 PHP 应用：\n```\nvim /usr/local/nginx/conf/nginx.conf\n```\n修改默认的 location 块，使其支持 .php 文件：\n```\nlocation / {\n    root   html;\n    index  index.php index.html index.htm;\n}\n```\n下一步配置来保证对于 .php 文件的请求将被传送到后端的 PHP-FPM 模块， 取消默认的 PHP 配置块的注释，并修改为下面的内容：\n```\nlocation ~* \\.php$ {\n    fastcgi_index   index.php;\n    fastcgi_pass    127.0.0.1:9000;\n    include         fastcgi_params;\n    fastcgi_param   SCRIPT_FILENAME    $document_root$fastcgi_script_name;\n    fastcgi_param   SCRIPT_NAME        $fastcgi_script_name;\n}\n```\n重启 Nginx。\n```\n# /usr/local/nginx/sbin/nginx -t\nnginx: the configuration file /usr/local/nginx/conf/nginx.conf syntax is ok\nnginx: configuration file /usr/local/nginx/conf/nginx.conf test is successful\n/usr/local/nginx/sbin/nginx -s reload\n```\n创建测试文件。\n```\necho \"<?php  phpinfo();?>\" > /usr/local/nginx/html/index.php\n```\n\n打开浏览器，访问 http://ip，将会显示 phpinfo() 。\n\n## 测试\n\n创建测试文件\n```\nvi mysql_conn_test.php\n```\n输入\n```php\n<?php\n$conn = mysql_connect(\"localhost\", \"root\", \"123456\") or die(\"connect failed\" . mysql_error());  \n$sql = sprintf(\"SHOW DATABASES;\");  \n$result = mysql_query($sql, $conn);  \nwhile ($row=mysql_fetch_array($result, MYSQL_ASSOC)){\n  print_r($row);\n}\n?>\n```\n结果如下，则说明，连接测试成功。\n```\nArray ( [Database] => information_schema ) Array ( [Database] => mysql ) Array ( [Database] => performance_schema ) Array ( [Database] => sys )\n```\n至此，LNMP环境算是基本配置成功。\n\nover~\n","source":"_posts/LNMP环境安装与配置.md","raw":"---\ntitle: LNMP环境安装与配置\ndate: 2016-09-25 23:30:00\nctime: 2016-09-25 23:30:00\nutime: 2016-09-25 23:30:00\nmodif_times: 0\ntags:\n- LNMP\ncategories:\n- PHP\n---\n\n![LNMP](http://n.sinaimg.cn/games/3ece443e/20160925/lnmp_log.png)\n<!-- more -->\n\n## 环境准备\n\nOS：CentOS 7.2 64\n\nMySQL：[mysql-5.7.15](http://dev.mysql.com/downloads/mysql/)\n\nNginx：[nginx-1.11.4](http://n.sinaimg.cn/games/3ece443e/20160925/nginx-1.11.4.tar.gz)\n\nPHP：[php-5.6.25](http://n.sinaimg.cn/games/3ece443e/20160925/php-5.6.25.tar.gz)\n\n## 安装\n参考MySQL、Nginx、PHP的编译安装，分别安装 MySQL、Nginx、PHP到Linux。\n\n## 整合\n\n### 启动 php-fpm\n\n新建用户和用户组，\n```\n# groupadd www-data\n# useradd -g www-data www-data\n```\n需要修改 php-fpm.conf 配置文件，确保 php-fpm 模块使用 www-data 用户和 www-data 用户组的身份运行。\n\n```\nvi /usr/local/php56/etc/php-fpm.conf\n#找到以下内容并修改：\n; Unix user/group of processes\n; Note: The user is mandatory. If the group is not set, the default user's group\n;       will be used.\nuser = www-data\ngroup = www-data\n```\n修改 pid 配置，以方便我们后面根据pid管理php-fpm\n```\n[global]\n; Pid file\n; Note: the default prefix is /usr/local/php56/var\n; Default Value: none\npid = run/php-fpm.pid\n```\nPHP-FPM运行时，将会在/usr/local/php56/var/run/下生成 php-fpm.pid 文件。\n\n然后启动 php-fpm 服务：\n```\n/usr/local/php56/sbin/php-fpm\n```\n查看是否启动成功\n```\nps aux | grep php\nroot     18858  0.0  0.1 148164  3208 ?        Ss   12:38   0:00 php-fpm: master process (/usr/local/php56/etc/php-fpm.conf)\nwww-data 18859  0.0  0.1 148164  2856 ?        S    12:38   0:00 php-fpm: pool www\nwww-data 18860  0.0  0.1 148164  2856 ?        S    12:38   0:00 php-fpm: pool www\nroot     18862  0.0  0.0 112664   972 pts/1    S+   12:38   0:00 grep --color=auto php\n```\n**注** 需要着重提醒的是，如果文件不存在，则阻止 Nginx 将请求发送到后端的 PHP-FPM 模块， 以避免遭受恶意脚本注入的攻击。\n将 php.ini 文件中的配置项 cgi.fix_pathinfo 设置为 0 。\n\n```\nvi /usr/local/php56/lib/php.ini\n\ncgi.fix_pathinfo=0\n```\n\n\n### PHP-FPM 重要配置\nphp-fpm.conf重要参数详解\n\n- pid = run/php-fpm.pid\n> pid设置，默认在安装目录中的var/run/php-fpm.pid，建议开启\n\n- error_log = log/php-fpm.log\n> 错误日志，默认在安装目录中的var/log/php-fpm.log\n\n- log_level = notice\n> 错误级别. 可用级别为: alert（必须立即处理）, error（错误情况）, warning（警告情况）, notice（一般重要信息）, debug（调试信息）. 默认: notice.\n\n- emergency_restart_threshold = 60\n- emergency_restart_interval = 60s\n> 表示在emergency_restart_interval所设值内出现SIGSEGV或者SIGBUS错误的php-cgi进程数如果超过 emergency_restart_threshold个，php-fpm就会优雅重启。这两个选项一般保持默认值。\n\n- process_control_timeout = 0\n> 设置子进程接受主进程复用信号的超时时间. 可用单位: s(秒), m(分), h(小时), 或者 d(天) 默认单位: s(秒). 默认值: 0.\n\n- daemonize = yes\n> 后台执行fpm,默认值为yes，如果为了调试可以改为no。在FPM中，可以使用不同的设置来运行多个进程池。 这些设置可以针对每个进程池单独设置。\n\n- listen = 127.0.0.1:9000\n> fpm监听端口，即nginx中php处理的地址，一般默认值即可。可用格式为: 'ip:port', 'port', '/path/to/unix/socket'. 每个进程池都需要设置.\n\n- listen.backlog = -1\n> backlog数，-1表示无限制，由操作系统决定，此行注释掉就行。\n\n- listen.allowed_clients = 127.0.0.1\n> 允许访问FastCGI进程的IP，设置any为不限制IP，如果要设置其他主机的nginx也能访问这台FPM进程，listen处要设置成本地可被访问的IP。默认值是any。每个地址是用逗号分隔. 如果没有设置或者为空，则允许任何服务器请求连接\n\n- listen.owner = www\n- listen.group = www\n- listen.mode = 0666\n> unix socket设置选项，如果使用tcp方式访问，这里注释即可。\n\n- user = www\n- group = www\n> 启动进程的帐户和组\n\n- pm = dynamic #对于专用服务器，pm可以设置为static。\n> 如何控制子进程，选项有static和dynamic。如果选择static，则由pm.max_children指定固定的子进程数。如果选择dynamic，则由下开参数决定：\n\n- pm.max_children #\n> 子进程最大数\n\n- pm.start_servers #\n> 启动时的进程数\n\n- pm.min_spare_servers #\n> 保证空闲进程数最小值，如果空闲进程小于此值，则创建新的子进程\n\n- pm.max_spare_servers #\n> 保证空闲进程数最大值，如果空闲进程大于此值，此进行清理\n\n- pm.max_requests = 1000\n> 设置每个子进程重生之前服务的请求数. 对于可能存在内存泄漏的第三方模块来说是非常有用的. 如果设置为 '0' 则一直接受请求. 等同于 PHP_FCGI_MAX_REQUESTS 环境变量. 默认值: 0.\n\n- pm.status_path = /status\n> FPM状态页面的网址. 如果没有设置, 则无法访问状态页面. 默认值: none. munin监控会使用到\n\n- ping.path = /ping\n> FPM监控页面的ping网址. 如果没有设置, 则无法访问ping页面. 该页面用于外部检测FPM是否存活并且可以响应请求. 请注意必须以斜线开头 (/)。\n\n- ping.response = pong\n> 用于定义ping请求的返回相应. 返回为 HTTP 200 的 text/plain 格式文本. 默认值: pong.\n\n- request_terminate_timeout = 0\n> 设置单个请求的超时中止时间. 该选项可能会对php.ini设置中的'max_execution_time'因为某些特殊原因没有中止运行的脚本有用. 设置为 '0' 表示 'Off'.当经常出现502错误时可以尝试更改此选项。\n\n- request_slowlog_timeout = 10s\n> 当一个请求该设置的超时时间后，就会将对应的PHP调用堆栈信息完整写入到慢日志中. 设置为 '0' 表示 'Off'\n\n- slowlog = log/$pool.log.slow\n> 慢请求的记录日志,配合request_slowlog_timeout使用\n\n- rlimit_files = 1024\n> 设置文件打开描述符的rlimit限制. 默认值: 系统定义值默认可打开句柄是1024，可使用 ulimit -n查看，ulimit -n 2048修改。\n\n- rlimit_core = 0\n> 设置核心rlimit最大限制值. 可用值: 'unlimited' 、0或者正整数. 默认值: 系统定义值.\n\n- chroot =\n> 启动时的Chroot目录. 所定义的目录需要是绝对路径. 如果没有设置, 则chroot不被使用.\n\n- chdir =\n> 设置启动目录，启动时会自动Chdir到该目录. 所定义的目录需要是绝对路径. 默认值: 当前目录，或者/目录（chroot时）\n\n- catch_workers_output = yes\n> 重定向运行过程中的stdout和stderr到主要的错误日志文件中. 如果没有设置, stdout 和 stderr 将会根据FastCGI的规则被重定向到 /dev/null . 默认值: 空.\n\n\n**Tips** 配置完成之后可以通过 php-fpm -t 来检测配置是否基本正确。\n```\n# /usr/local/php56/sbin/php-fpm -t\n[25-Sep-2016 12:58:14] NOTICE: configuration file /usr/local/php56/etc/php-fpm.conf test is successful\n```\n\n### php-fpm管理\n\n测试php-fpm配置\n```\n/usr/local/php/sbin/php-fpm -t\n/usr/local/php/sbin/php-fpm -c /usr/local/php/etc/php.ini -y /usr/local/php/etc/php-fpm.conf -t\n```\n启动php-fpm\n```\n/usr/local/php/sbin/php-fpm\n/usr/local/php/sbin/php-fpm -c /usr/local/php/etc/php.ini -y /usr/local/php/etc/php-fpm.conf\n```\n关闭php-fpm\n```\nkill -INT `cat /usr/local/php/var/run/php-fpm.pid`\n```\n重启php-fpm\n```\nkill -USR2 `cat /usr/local/php/var/run/php-fpm.pid`\n```\n\n## 配置 Nginx 使其支持 PHP 应用：\n```\nvim /usr/local/nginx/conf/nginx.conf\n```\n修改默认的 location 块，使其支持 .php 文件：\n```\nlocation / {\n    root   html;\n    index  index.php index.html index.htm;\n}\n```\n下一步配置来保证对于 .php 文件的请求将被传送到后端的 PHP-FPM 模块， 取消默认的 PHP 配置块的注释，并修改为下面的内容：\n```\nlocation ~* \\.php$ {\n    fastcgi_index   index.php;\n    fastcgi_pass    127.0.0.1:9000;\n    include         fastcgi_params;\n    fastcgi_param   SCRIPT_FILENAME    $document_root$fastcgi_script_name;\n    fastcgi_param   SCRIPT_NAME        $fastcgi_script_name;\n}\n```\n重启 Nginx。\n```\n# /usr/local/nginx/sbin/nginx -t\nnginx: the configuration file /usr/local/nginx/conf/nginx.conf syntax is ok\nnginx: configuration file /usr/local/nginx/conf/nginx.conf test is successful\n/usr/local/nginx/sbin/nginx -s reload\n```\n创建测试文件。\n```\necho \"<?php  phpinfo();?>\" > /usr/local/nginx/html/index.php\n```\n\n打开浏览器，访问 http://ip，将会显示 phpinfo() 。\n\n## 测试\n\n创建测试文件\n```\nvi mysql_conn_test.php\n```\n输入\n```php\n<?php\n$conn = mysql_connect(\"localhost\", \"root\", \"123456\") or die(\"connect failed\" . mysql_error());  \n$sql = sprintf(\"SHOW DATABASES;\");  \n$result = mysql_query($sql, $conn);  \nwhile ($row=mysql_fetch_array($result, MYSQL_ASSOC)){\n  print_r($row);\n}\n?>\n```\n结果如下，则说明，连接测试成功。\n```\nArray ( [Database] => information_schema ) Array ( [Database] => mysql ) Array ( [Database] => performance_schema ) Array ( [Database] => sys )\n```\n至此，LNMP环境算是基本配置成功。\n\nover~\n","slug":"LNMP环境安装与配置","published":1,"updated":"2016-09-26T13:16:26.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"city8vnn4000jg29fkcezm5ot","content":"<p><img src=\"http://n.sinaimg.cn/games/3ece443e/20160925/lnmp_log.png\" alt=\"LNMP\"><br><a id=\"more\"></a></p>\n<h2 id=\"环境准备\"><a href=\"#环境准备\" class=\"headerlink\" title=\"环境准备\"></a>环境准备</h2><p>OS：CentOS 7.2 64</p>\n<p>MySQL：<a href=\"http://dev.mysql.com/downloads/mysql/\" target=\"_blank\" rel=\"external\">mysql-5.7.15</a></p>\n<p>Nginx：<a href=\"http://n.sinaimg.cn/games/3ece443e/20160925/nginx-1.11.4.tar.gz\" target=\"_blank\" rel=\"external\">nginx-1.11.4</a></p>\n<p>PHP：<a href=\"http://n.sinaimg.cn/games/3ece443e/20160925/php-5.6.25.tar.gz\" target=\"_blank\" rel=\"external\">php-5.6.25</a></p>\n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><p>参考MySQL、Nginx、PHP的编译安装，分别安装 MySQL、Nginx、PHP到Linux。</p>\n<h2 id=\"整合\"><a href=\"#整合\" class=\"headerlink\" title=\"整合\"></a>整合</h2><h3 id=\"启动-php-fpm\"><a href=\"#启动-php-fpm\" class=\"headerlink\" title=\"启动 php-fpm\"></a>启动 php-fpm</h3><p>新建用户和用户组，<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"># groupadd www-data</div><div class=\"line\"># useradd -g www-data www-data</div></pre></td></tr></table></figure></p>\n<p>需要修改 php-fpm.conf 配置文件，确保 php-fpm 模块使用 www-data 用户和 www-data 用户组的身份运行。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">vi /usr/local/php56/etc/php-fpm.conf</div><div class=\"line\">#找到以下内容并修改：</div><div class=\"line\">; Unix user/group of processes</div><div class=\"line\">; Note: The user is mandatory. If the group is not set, the default user&apos;s group</div><div class=\"line\">;       will be used.</div><div class=\"line\">user = www-data</div><div class=\"line\">group = www-data</div></pre></td></tr></table></figure>\n<p>修改 pid 配置，以方便我们后面根据pid管理php-fpm<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">[global]</div><div class=\"line\">; Pid file</div><div class=\"line\">; Note: the default prefix is /usr/local/php56/var</div><div class=\"line\">; Default Value: none</div><div class=\"line\">pid = run/php-fpm.pid</div></pre></td></tr></table></figure></p>\n<p>PHP-FPM运行时，将会在/usr/local/php56/var/run/下生成 php-fpm.pid 文件。</p>\n<p>然后启动 php-fpm 服务：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">/usr/local/php56/sbin/php-fpm</div></pre></td></tr></table></figure></p>\n<p>查看是否启动成功<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">ps aux | grep php</div><div class=\"line\">root     18858  0.0  0.1 148164  3208 ?        Ss   12:38   0:00 php-fpm: master process (/usr/local/php56/etc/php-fpm.conf)</div><div class=\"line\">www-data 18859  0.0  0.1 148164  2856 ?        S    12:38   0:00 php-fpm: pool www</div><div class=\"line\">www-data 18860  0.0  0.1 148164  2856 ?        S    12:38   0:00 php-fpm: pool www</div><div class=\"line\">root     18862  0.0  0.0 112664   972 pts/1    S+   12:38   0:00 grep --color=auto php</div></pre></td></tr></table></figure></p>\n<p><strong>注</strong> 需要着重提醒的是，如果文件不存在，则阻止 Nginx 将请求发送到后端的 PHP-FPM 模块， 以避免遭受恶意脚本注入的攻击。<br>将 php.ini 文件中的配置项 cgi.fix_pathinfo 设置为 0 。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">vi /usr/local/php56/lib/php.ini</div><div class=\"line\"></div><div class=\"line\">cgi.fix_pathinfo=0</div></pre></td></tr></table></figure>\n<h3 id=\"PHP-FPM-重要配置\"><a href=\"#PHP-FPM-重要配置\" class=\"headerlink\" title=\"PHP-FPM 重要配置\"></a>PHP-FPM 重要配置</h3><p>php-fpm.conf重要参数详解</p>\n<ul>\n<li><p>pid = run/php-fpm.pid</p>\n<blockquote>\n<p>pid设置，默认在安装目录中的var/run/php-fpm.pid，建议开启</p>\n</blockquote>\n</li>\n<li><p>error_log = log/php-fpm.log</p>\n<blockquote>\n<p>错误日志，默认在安装目录中的var/log/php-fpm.log</p>\n</blockquote>\n</li>\n<li><p>log_level = notice</p>\n<blockquote>\n<p>错误级别. 可用级别为: alert（必须立即处理）, error（错误情况）, warning（警告情况）, notice（一般重要信息）, debug（调试信息）. 默认: notice.</p>\n</blockquote>\n</li>\n<li><p>emergency_restart_threshold = 60</p>\n</li>\n<li><p>emergency_restart_interval = 60s</p>\n<blockquote>\n<p>表示在emergency_restart_interval所设值内出现SIGSEGV或者SIGBUS错误的php-cgi进程数如果超过 emergency_restart_threshold个，php-fpm就会优雅重启。这两个选项一般保持默认值。</p>\n</blockquote>\n</li>\n<li><p>process_control_timeout = 0</p>\n<blockquote>\n<p>设置子进程接受主进程复用信号的超时时间. 可用单位: s(秒), m(分), h(小时), 或者 d(天) 默认单位: s(秒). 默认值: 0.</p>\n</blockquote>\n</li>\n<li><p>daemonize = yes</p>\n<blockquote>\n<p>后台执行fpm,默认值为yes，如果为了调试可以改为no。在FPM中，可以使用不同的设置来运行多个进程池。 这些设置可以针对每个进程池单独设置。</p>\n</blockquote>\n</li>\n<li><p>listen = 127.0.0.1:9000</p>\n<blockquote>\n<p>fpm监听端口，即nginx中php处理的地址，一般默认值即可。可用格式为: ‘ip:port’, ‘port’, ‘/path/to/unix/socket’. 每个进程池都需要设置.</p>\n</blockquote>\n</li>\n<li><p>listen.backlog = -1</p>\n<blockquote>\n<p>backlog数，-1表示无限制，由操作系统决定，此行注释掉就行。</p>\n</blockquote>\n</li>\n<li><p>listen.allowed_clients = 127.0.0.1</p>\n<blockquote>\n<p>允许访问FastCGI进程的IP，设置any为不限制IP，如果要设置其他主机的nginx也能访问这台FPM进程，listen处要设置成本地可被访问的IP。默认值是any。每个地址是用逗号分隔. 如果没有设置或者为空，则允许任何服务器请求连接</p>\n</blockquote>\n</li>\n<li><p>listen.owner = www</p>\n</li>\n<li>listen.group = www</li>\n<li><p>listen.mode = 0666</p>\n<blockquote>\n<p>unix socket设置选项，如果使用tcp方式访问，这里注释即可。</p>\n</blockquote>\n</li>\n<li><p>user = www</p>\n</li>\n<li><p>group = www</p>\n<blockquote>\n<p>启动进程的帐户和组</p>\n</blockquote>\n</li>\n<li><p>pm = dynamic #对于专用服务器，pm可以设置为static。</p>\n<blockquote>\n<p>如何控制子进程，选项有static和dynamic。如果选择static，则由pm.max_children指定固定的子进程数。如果选择dynamic，则由下开参数决定：</p>\n</blockquote>\n</li>\n<li><p>pm.max_children #</p>\n<blockquote>\n<p>子进程最大数</p>\n</blockquote>\n</li>\n<li><p>pm.start_servers #</p>\n<blockquote>\n<p>启动时的进程数</p>\n</blockquote>\n</li>\n<li><p>pm.min_spare_servers #</p>\n<blockquote>\n<p>保证空闲进程数最小值，如果空闲进程小于此值，则创建新的子进程</p>\n</blockquote>\n</li>\n<li><p>pm.max_spare_servers #</p>\n<blockquote>\n<p>保证空闲进程数最大值，如果空闲进程大于此值，此进行清理</p>\n</blockquote>\n</li>\n<li><p>pm.max_requests = 1000</p>\n<blockquote>\n<p>设置每个子进程重生之前服务的请求数. 对于可能存在内存泄漏的第三方模块来说是非常有用的. 如果设置为 ‘0’ 则一直接受请求. 等同于 PHP_FCGI_MAX_REQUESTS 环境变量. 默认值: 0.</p>\n</blockquote>\n</li>\n<li><p>pm.status_path = /status</p>\n<blockquote>\n<p>FPM状态页面的网址. 如果没有设置, 则无法访问状态页面. 默认值: none. munin监控会使用到</p>\n</blockquote>\n</li>\n<li><p>ping.path = /ping</p>\n<blockquote>\n<p>FPM监控页面的ping网址. 如果没有设置, 则无法访问ping页面. 该页面用于外部检测FPM是否存活并且可以响应请求. 请注意必须以斜线开头 (/)。</p>\n</blockquote>\n</li>\n<li><p>ping.response = pong</p>\n<blockquote>\n<p>用于定义ping请求的返回相应. 返回为 HTTP 200 的 text/plain 格式文本. 默认值: pong.</p>\n</blockquote>\n</li>\n<li><p>request_terminate_timeout = 0</p>\n<blockquote>\n<p>设置单个请求的超时中止时间. 该选项可能会对php.ini设置中的’max_execution_time’因为某些特殊原因没有中止运行的脚本有用. 设置为 ‘0’ 表示 ‘Off’.当经常出现502错误时可以尝试更改此选项。</p>\n</blockquote>\n</li>\n<li><p>request_slowlog_timeout = 10s</p>\n<blockquote>\n<p>当一个请求该设置的超时时间后，就会将对应的PHP调用堆栈信息完整写入到慢日志中. 设置为 ‘0’ 表示 ‘Off’</p>\n</blockquote>\n</li>\n<li><p>slowlog = log/$pool.log.slow</p>\n<blockquote>\n<p>慢请求的记录日志,配合request_slowlog_timeout使用</p>\n</blockquote>\n</li>\n<li><p>rlimit_files = 1024</p>\n<blockquote>\n<p>设置文件打开描述符的rlimit限制. 默认值: 系统定义值默认可打开句柄是1024，可使用 ulimit -n查看，ulimit -n 2048修改。</p>\n</blockquote>\n</li>\n<li><p>rlimit_core = 0</p>\n<blockquote>\n<p>设置核心rlimit最大限制值. 可用值: ‘unlimited’ 、0或者正整数. 默认值: 系统定义值.</p>\n</blockquote>\n</li>\n<li><p>chroot =</p>\n<blockquote>\n<p>启动时的Chroot目录. 所定义的目录需要是绝对路径. 如果没有设置, 则chroot不被使用.</p>\n</blockquote>\n</li>\n<li><p>chdir =</p>\n<blockquote>\n<p>设置启动目录，启动时会自动Chdir到该目录. 所定义的目录需要是绝对路径. 默认值: 当前目录，或者/目录（chroot时）</p>\n</blockquote>\n</li>\n<li><p>catch_workers_output = yes</p>\n<blockquote>\n<p>重定向运行过程中的stdout和stderr到主要的错误日志文件中. 如果没有设置, stdout 和 stderr 将会根据FastCGI的规则被重定向到 /dev/null . 默认值: 空.</p>\n</blockquote>\n</li>\n</ul>\n<p><strong>Tips</strong> 配置完成之后可以通过 php-fpm -t 来检测配置是否基本正确。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"># /usr/local/php56/sbin/php-fpm -t</div><div class=\"line\">[25-Sep-2016 12:58:14] NOTICE: configuration file /usr/local/php56/etc/php-fpm.conf test is successful</div></pre></td></tr></table></figure></p>\n<h3 id=\"php-fpm管理\"><a href=\"#php-fpm管理\" class=\"headerlink\" title=\"php-fpm管理\"></a>php-fpm管理</h3><p>测试php-fpm配置<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">/usr/local/php/sbin/php-fpm -t</div><div class=\"line\">/usr/local/php/sbin/php-fpm -c /usr/local/php/etc/php.ini -y /usr/local/php/etc/php-fpm.conf -t</div></pre></td></tr></table></figure></p>\n<p>启动php-fpm<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">/usr/local/php/sbin/php-fpm</div><div class=\"line\">/usr/local/php/sbin/php-fpm -c /usr/local/php/etc/php.ini -y /usr/local/php/etc/php-fpm.conf</div></pre></td></tr></table></figure></p>\n<p>关闭php-fpm<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">kill -INT `cat /usr/local/php/var/run/php-fpm.pid`</div></pre></td></tr></table></figure></p>\n<p>重启php-fpm<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">kill -USR2 `cat /usr/local/php/var/run/php-fpm.pid`</div></pre></td></tr></table></figure></p>\n<h2 id=\"配置-Nginx-使其支持-PHP-应用：\"><a href=\"#配置-Nginx-使其支持-PHP-应用：\" class=\"headerlink\" title=\"配置 Nginx 使其支持 PHP 应用：\"></a>配置 Nginx 使其支持 PHP 应用：</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">vim /usr/local/nginx/conf/nginx.conf</div></pre></td></tr></table></figure>\n<p>修改默认的 location 块，使其支持 .php 文件：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">location / &#123;</div><div class=\"line\">    root   html;</div><div class=\"line\">    index  index.php index.html index.htm;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>下一步配置来保证对于 .php 文件的请求将被传送到后端的 PHP-FPM 模块， 取消默认的 PHP 配置块的注释，并修改为下面的内容：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">location ~* \\.php$ &#123;</div><div class=\"line\">    fastcgi_index   index.php;</div><div class=\"line\">    fastcgi_pass    127.0.0.1:9000;</div><div class=\"line\">    include         fastcgi_params;</div><div class=\"line\">    fastcgi_param   SCRIPT_FILENAME    $document_root$fastcgi_script_name;</div><div class=\"line\">    fastcgi_param   SCRIPT_NAME        $fastcgi_script_name;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>重启 Nginx。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"># /usr/local/nginx/sbin/nginx -t</div><div class=\"line\">nginx: the configuration file /usr/local/nginx/conf/nginx.conf syntax is ok</div><div class=\"line\">nginx: configuration file /usr/local/nginx/conf/nginx.conf test is successful</div><div class=\"line\">/usr/local/nginx/sbin/nginx -s reload</div></pre></td></tr></table></figure></p>\n<p>创建测试文件。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">echo &quot;&lt;?php  phpinfo();?&gt;&quot; &gt; /usr/local/nginx/html/index.php</div></pre></td></tr></table></figure></p>\n<p>打开浏览器，访问 <a href=\"http://ip，将会显示\" target=\"_blank\" rel=\"external\">http://ip，将会显示</a> phpinfo() 。</p>\n<h2 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h2><p>创建测试文件<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">vi mysql_conn_test.php</div></pre></td></tr></table></figure></p>\n<p>输入<br><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;?php</span></div><div class=\"line\">$conn = mysql_connect(<span class=\"string\">\"localhost\"</span>, <span class=\"string\">\"root\"</span>, <span class=\"string\">\"123456\"</span>) <span class=\"keyword\">or</span> <span class=\"keyword\">die</span>(<span class=\"string\">\"connect failed\"</span> . mysql_error());  </div><div class=\"line\">$sql = sprintf(<span class=\"string\">\"SHOW DATABASES;\"</span>);  </div><div class=\"line\">$result = mysql_query($sql, $conn);  </div><div class=\"line\"><span class=\"keyword\">while</span> ($row=mysql_fetch_array($result, MYSQL_ASSOC))&#123;</div><div class=\"line\">  print_r($row);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"meta\">?&gt;</span></div></pre></td></tr></table></figure></p>\n<p>结果如下，则说明，连接测试成功。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">Array ( [Database] =&gt; information_schema ) Array ( [Database] =&gt; mysql ) Array ( [Database] =&gt; performance_schema ) Array ( [Database] =&gt; sys )</div></pre></td></tr></table></figure></p>\n<p>至此，LNMP环境算是基本配置成功。</p>\n<p>over~</p>\n","excerpt":"<p><img src=\"http://n.sinaimg.cn/games/3ece443e/20160925/lnmp_log.png\" alt=\"LNMP\"><br>","more":"</p>\n<h2 id=\"环境准备\"><a href=\"#环境准备\" class=\"headerlink\" title=\"环境准备\"></a>环境准备</h2><p>OS：CentOS 7.2 64</p>\n<p>MySQL：<a href=\"http://dev.mysql.com/downloads/mysql/\">mysql-5.7.15</a></p>\n<p>Nginx：<a href=\"http://n.sinaimg.cn/games/3ece443e/20160925/nginx-1.11.4.tar.gz\">nginx-1.11.4</a></p>\n<p>PHP：<a href=\"http://n.sinaimg.cn/games/3ece443e/20160925/php-5.6.25.tar.gz\">php-5.6.25</a></p>\n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><p>参考MySQL、Nginx、PHP的编译安装，分别安装 MySQL、Nginx、PHP到Linux。</p>\n<h2 id=\"整合\"><a href=\"#整合\" class=\"headerlink\" title=\"整合\"></a>整合</h2><h3 id=\"启动-php-fpm\"><a href=\"#启动-php-fpm\" class=\"headerlink\" title=\"启动 php-fpm\"></a>启动 php-fpm</h3><p>新建用户和用户组，<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"># groupadd www-data</div><div class=\"line\"># useradd -g www-data www-data</div></pre></td></tr></table></figure></p>\n<p>需要修改 php-fpm.conf 配置文件，确保 php-fpm 模块使用 www-data 用户和 www-data 用户组的身份运行。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">vi /usr/local/php56/etc/php-fpm.conf</div><div class=\"line\">#找到以下内容并修改：</div><div class=\"line\">; Unix user/group of processes</div><div class=\"line\">; Note: The user is mandatory. If the group is not set, the default user&apos;s group</div><div class=\"line\">;       will be used.</div><div class=\"line\">user = www-data</div><div class=\"line\">group = www-data</div></pre></td></tr></table></figure>\n<p>修改 pid 配置，以方便我们后面根据pid管理php-fpm<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">[global]</div><div class=\"line\">; Pid file</div><div class=\"line\">; Note: the default prefix is /usr/local/php56/var</div><div class=\"line\">; Default Value: none</div><div class=\"line\">pid = run/php-fpm.pid</div></pre></td></tr></table></figure></p>\n<p>PHP-FPM运行时，将会在/usr/local/php56/var/run/下生成 php-fpm.pid 文件。</p>\n<p>然后启动 php-fpm 服务：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">/usr/local/php56/sbin/php-fpm</div></pre></td></tr></table></figure></p>\n<p>查看是否启动成功<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">ps aux | grep php</div><div class=\"line\">root     18858  0.0  0.1 148164  3208 ?        Ss   12:38   0:00 php-fpm: master process (/usr/local/php56/etc/php-fpm.conf)</div><div class=\"line\">www-data 18859  0.0  0.1 148164  2856 ?        S    12:38   0:00 php-fpm: pool www</div><div class=\"line\">www-data 18860  0.0  0.1 148164  2856 ?        S    12:38   0:00 php-fpm: pool www</div><div class=\"line\">root     18862  0.0  0.0 112664   972 pts/1    S+   12:38   0:00 grep --color=auto php</div></pre></td></tr></table></figure></p>\n<p><strong>注</strong> 需要着重提醒的是，如果文件不存在，则阻止 Nginx 将请求发送到后端的 PHP-FPM 模块， 以避免遭受恶意脚本注入的攻击。<br>将 php.ini 文件中的配置项 cgi.fix_pathinfo 设置为 0 。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">vi /usr/local/php56/lib/php.ini</div><div class=\"line\"></div><div class=\"line\">cgi.fix_pathinfo=0</div></pre></td></tr></table></figure>\n<h3 id=\"PHP-FPM-重要配置\"><a href=\"#PHP-FPM-重要配置\" class=\"headerlink\" title=\"PHP-FPM 重要配置\"></a>PHP-FPM 重要配置</h3><p>php-fpm.conf重要参数详解</p>\n<ul>\n<li><p>pid = run/php-fpm.pid</p>\n<blockquote>\n<p>pid设置，默认在安装目录中的var/run/php-fpm.pid，建议开启</p>\n</blockquote>\n</li>\n<li><p>error_log = log/php-fpm.log</p>\n<blockquote>\n<p>错误日志，默认在安装目录中的var/log/php-fpm.log</p>\n</blockquote>\n</li>\n<li><p>log_level = notice</p>\n<blockquote>\n<p>错误级别. 可用级别为: alert（必须立即处理）, error（错误情况）, warning（警告情况）, notice（一般重要信息）, debug（调试信息）. 默认: notice.</p>\n</blockquote>\n</li>\n<li><p>emergency_restart_threshold = 60</p>\n</li>\n<li><p>emergency_restart_interval = 60s</p>\n<blockquote>\n<p>表示在emergency_restart_interval所设值内出现SIGSEGV或者SIGBUS错误的php-cgi进程数如果超过 emergency_restart_threshold个，php-fpm就会优雅重启。这两个选项一般保持默认值。</p>\n</blockquote>\n</li>\n<li><p>process_control_timeout = 0</p>\n<blockquote>\n<p>设置子进程接受主进程复用信号的超时时间. 可用单位: s(秒), m(分), h(小时), 或者 d(天) 默认单位: s(秒). 默认值: 0.</p>\n</blockquote>\n</li>\n<li><p>daemonize = yes</p>\n<blockquote>\n<p>后台执行fpm,默认值为yes，如果为了调试可以改为no。在FPM中，可以使用不同的设置来运行多个进程池。 这些设置可以针对每个进程池单独设置。</p>\n</blockquote>\n</li>\n<li><p>listen = 127.0.0.1:9000</p>\n<blockquote>\n<p>fpm监听端口，即nginx中php处理的地址，一般默认值即可。可用格式为: ‘ip:port’, ‘port’, ‘/path/to/unix/socket’. 每个进程池都需要设置.</p>\n</blockquote>\n</li>\n<li><p>listen.backlog = -1</p>\n<blockquote>\n<p>backlog数，-1表示无限制，由操作系统决定，此行注释掉就行。</p>\n</blockquote>\n</li>\n<li><p>listen.allowed_clients = 127.0.0.1</p>\n<blockquote>\n<p>允许访问FastCGI进程的IP，设置any为不限制IP，如果要设置其他主机的nginx也能访问这台FPM进程，listen处要设置成本地可被访问的IP。默认值是any。每个地址是用逗号分隔. 如果没有设置或者为空，则允许任何服务器请求连接</p>\n</blockquote>\n</li>\n<li><p>listen.owner = www</p>\n</li>\n<li>listen.group = www</li>\n<li><p>listen.mode = 0666</p>\n<blockquote>\n<p>unix socket设置选项，如果使用tcp方式访问，这里注释即可。</p>\n</blockquote>\n</li>\n<li><p>user = www</p>\n</li>\n<li><p>group = www</p>\n<blockquote>\n<p>启动进程的帐户和组</p>\n</blockquote>\n</li>\n<li><p>pm = dynamic #对于专用服务器，pm可以设置为static。</p>\n<blockquote>\n<p>如何控制子进程，选项有static和dynamic。如果选择static，则由pm.max_children指定固定的子进程数。如果选择dynamic，则由下开参数决定：</p>\n</blockquote>\n</li>\n<li><p>pm.max_children #</p>\n<blockquote>\n<p>子进程最大数</p>\n</blockquote>\n</li>\n<li><p>pm.start_servers #</p>\n<blockquote>\n<p>启动时的进程数</p>\n</blockquote>\n</li>\n<li><p>pm.min_spare_servers #</p>\n<blockquote>\n<p>保证空闲进程数最小值，如果空闲进程小于此值，则创建新的子进程</p>\n</blockquote>\n</li>\n<li><p>pm.max_spare_servers #</p>\n<blockquote>\n<p>保证空闲进程数最大值，如果空闲进程大于此值，此进行清理</p>\n</blockquote>\n</li>\n<li><p>pm.max_requests = 1000</p>\n<blockquote>\n<p>设置每个子进程重生之前服务的请求数. 对于可能存在内存泄漏的第三方模块来说是非常有用的. 如果设置为 ‘0’ 则一直接受请求. 等同于 PHP_FCGI_MAX_REQUESTS 环境变量. 默认值: 0.</p>\n</blockquote>\n</li>\n<li><p>pm.status_path = /status</p>\n<blockquote>\n<p>FPM状态页面的网址. 如果没有设置, 则无法访问状态页面. 默认值: none. munin监控会使用到</p>\n</blockquote>\n</li>\n<li><p>ping.path = /ping</p>\n<blockquote>\n<p>FPM监控页面的ping网址. 如果没有设置, 则无法访问ping页面. 该页面用于外部检测FPM是否存活并且可以响应请求. 请注意必须以斜线开头 (/)。</p>\n</blockquote>\n</li>\n<li><p>ping.response = pong</p>\n<blockquote>\n<p>用于定义ping请求的返回相应. 返回为 HTTP 200 的 text/plain 格式文本. 默认值: pong.</p>\n</blockquote>\n</li>\n<li><p>request_terminate_timeout = 0</p>\n<blockquote>\n<p>设置单个请求的超时中止时间. 该选项可能会对php.ini设置中的’max_execution_time’因为某些特殊原因没有中止运行的脚本有用. 设置为 ‘0’ 表示 ‘Off’.当经常出现502错误时可以尝试更改此选项。</p>\n</blockquote>\n</li>\n<li><p>request_slowlog_timeout = 10s</p>\n<blockquote>\n<p>当一个请求该设置的超时时间后，就会将对应的PHP调用堆栈信息完整写入到慢日志中. 设置为 ‘0’ 表示 ‘Off’</p>\n</blockquote>\n</li>\n<li><p>slowlog = log/$pool.log.slow</p>\n<blockquote>\n<p>慢请求的记录日志,配合request_slowlog_timeout使用</p>\n</blockquote>\n</li>\n<li><p>rlimit_files = 1024</p>\n<blockquote>\n<p>设置文件打开描述符的rlimit限制. 默认值: 系统定义值默认可打开句柄是1024，可使用 ulimit -n查看，ulimit -n 2048修改。</p>\n</blockquote>\n</li>\n<li><p>rlimit_core = 0</p>\n<blockquote>\n<p>设置核心rlimit最大限制值. 可用值: ‘unlimited’ 、0或者正整数. 默认值: 系统定义值.</p>\n</blockquote>\n</li>\n<li><p>chroot =</p>\n<blockquote>\n<p>启动时的Chroot目录. 所定义的目录需要是绝对路径. 如果没有设置, 则chroot不被使用.</p>\n</blockquote>\n</li>\n<li><p>chdir =</p>\n<blockquote>\n<p>设置启动目录，启动时会自动Chdir到该目录. 所定义的目录需要是绝对路径. 默认值: 当前目录，或者/目录（chroot时）</p>\n</blockquote>\n</li>\n<li><p>catch_workers_output = yes</p>\n<blockquote>\n<p>重定向运行过程中的stdout和stderr到主要的错误日志文件中. 如果没有设置, stdout 和 stderr 将会根据FastCGI的规则被重定向到 /dev/null . 默认值: 空.</p>\n</blockquote>\n</li>\n</ul>\n<p><strong>Tips</strong> 配置完成之后可以通过 php-fpm -t 来检测配置是否基本正确。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"># /usr/local/php56/sbin/php-fpm -t</div><div class=\"line\">[25-Sep-2016 12:58:14] NOTICE: configuration file /usr/local/php56/etc/php-fpm.conf test is successful</div></pre></td></tr></table></figure></p>\n<h3 id=\"php-fpm管理\"><a href=\"#php-fpm管理\" class=\"headerlink\" title=\"php-fpm管理\"></a>php-fpm管理</h3><p>测试php-fpm配置<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">/usr/local/php/sbin/php-fpm -t</div><div class=\"line\">/usr/local/php/sbin/php-fpm -c /usr/local/php/etc/php.ini -y /usr/local/php/etc/php-fpm.conf -t</div></pre></td></tr></table></figure></p>\n<p>启动php-fpm<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">/usr/local/php/sbin/php-fpm</div><div class=\"line\">/usr/local/php/sbin/php-fpm -c /usr/local/php/etc/php.ini -y /usr/local/php/etc/php-fpm.conf</div></pre></td></tr></table></figure></p>\n<p>关闭php-fpm<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">kill -INT `cat /usr/local/php/var/run/php-fpm.pid`</div></pre></td></tr></table></figure></p>\n<p>重启php-fpm<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">kill -USR2 `cat /usr/local/php/var/run/php-fpm.pid`</div></pre></td></tr></table></figure></p>\n<h2 id=\"配置-Nginx-使其支持-PHP-应用：\"><a href=\"#配置-Nginx-使其支持-PHP-应用：\" class=\"headerlink\" title=\"配置 Nginx 使其支持 PHP 应用：\"></a>配置 Nginx 使其支持 PHP 应用：</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">vim /usr/local/nginx/conf/nginx.conf</div></pre></td></tr></table></figure>\n<p>修改默认的 location 块，使其支持 .php 文件：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">location / &#123;</div><div class=\"line\">    root   html;</div><div class=\"line\">    index  index.php index.html index.htm;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>下一步配置来保证对于 .php 文件的请求将被传送到后端的 PHP-FPM 模块， 取消默认的 PHP 配置块的注释，并修改为下面的内容：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">location ~* \\.php$ &#123;</div><div class=\"line\">    fastcgi_index   index.php;</div><div class=\"line\">    fastcgi_pass    127.0.0.1:9000;</div><div class=\"line\">    include         fastcgi_params;</div><div class=\"line\">    fastcgi_param   SCRIPT_FILENAME    $document_root$fastcgi_script_name;</div><div class=\"line\">    fastcgi_param   SCRIPT_NAME        $fastcgi_script_name;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>重启 Nginx。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"># /usr/local/nginx/sbin/nginx -t</div><div class=\"line\">nginx: the configuration file /usr/local/nginx/conf/nginx.conf syntax is ok</div><div class=\"line\">nginx: configuration file /usr/local/nginx/conf/nginx.conf test is successful</div><div class=\"line\">/usr/local/nginx/sbin/nginx -s reload</div></pre></td></tr></table></figure></p>\n<p>创建测试文件。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">echo &quot;&lt;?php  phpinfo();?&gt;&quot; &gt; /usr/local/nginx/html/index.php</div></pre></td></tr></table></figure></p>\n<p>打开浏览器，访问 <a href=\"http://ip，将会显示\">http://ip，将会显示</a> phpinfo() 。</p>\n<h2 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h2><p>创建测试文件<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">vi mysql_conn_test.php</div></pre></td></tr></table></figure></p>\n<p>输入<br><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;?php</span></div><div class=\"line\">$conn = mysql_connect(<span class=\"string\">\"localhost\"</span>, <span class=\"string\">\"root\"</span>, <span class=\"string\">\"123456\"</span>) <span class=\"keyword\">or</span> <span class=\"keyword\">die</span>(<span class=\"string\">\"connect failed\"</span> . mysql_error());  </div><div class=\"line\">$sql = sprintf(<span class=\"string\">\"SHOW DATABASES;\"</span>);  </div><div class=\"line\">$result = mysql_query($sql, $conn);  </div><div class=\"line\"><span class=\"keyword\">while</span> ($row=mysql_fetch_array($result, MYSQL_ASSOC))&#123;</div><div class=\"line\">  print_r($row);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"meta\">?&gt;</span></div></pre></td></tr></table></figure></p>\n<p>结果如下，则说明，连接测试成功。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">Array ( [Database] =&gt; information_schema ) Array ( [Database] =&gt; mysql ) Array ( [Database] =&gt; performance_schema ) Array ( [Database] =&gt; sys )</div></pre></td></tr></table></figure></p>\n<p>至此，LNMP环境算是基本配置成功。</p>\n<p>over~</p>"},{"title":"linux服务和进程管理","date":"2016-09-28T10:30:00.000Z","ctime":"2016-09-28T10:48:00.000Z","utime":"2016-09-28T10:48:00.000Z","modif_times":0,"_content":"\n![Linux服务和进程管理](http://n.sinaimg.cn/games/3ece443e/20160929/LinuxFuWuHeJinChengGuanLi.png?1)\n\n<!-- more -->\n\n## 进程管理\n进程管理的三个主要任务\n- 判断服务器的健康状态\n- 查看所有正在运行的进程\n- 强制终止进程\n\n### 进程查看\n\n#### ps aux             \n> 查看当前系统所有运行的进程（可以不加-）\n> * -a 显示前台所有进程\n> * -u 显示用户名\n> * -x 显示后台进程\n\n命令执行结果示例：\n```\nps aux\nUSER       PID %CPU %MEM    VSZ   RSS TTY      STAT START   TIME COMMAND\nroot         1  0.0  0.3  41280  3732 ?        Ss   9月26   0:02 /usr/lib/systemd/systemd --switched-root --system\nroot         2  0.0  0.0      0     0 ?        S    9月26   0:00 [kthreadd]\nroot         3  0.0  0.0      0     0 ?        S    9月26   0:00 [ksoftirqd/0]\nroot         5  0.0  0.0      0     0 ?        S<   9月26   0:00 [kworker/0:0H]\nroot         6  0.0  0.0      0     0 ?        S    9月26   0:00 [kworker/u2:0]\nroot         7  0.0  0.0      0     0 ?        S    9月26   0:00 [migration/0]\nroot         8  0.0  0.0      0     0 ?        S    9月26   0:00 [rcu_bh]\nroot         9  0.0  0.0      0     0 ?        S    9月26   0:00 [rcuob/0]\nroot        10  0.0  0.0      0     0 ?        S    9月26   0:36 [rcu_sched]\nroot        11  0.0  0.0      0     0 ?        S    9月26   0:32 [rcuos/0]\n···\n```\n\n参数说明:\n\n参数 | 说明\n----|-----\nUSER|用户名\nPID |进程PID 1  init  系统启动的第一个进程\n%CPU|cpu占用百分比\n%MEM|内存占用百分比\nVSZ |虚拟内存占用量（KB）\nRSS |固定内存占有量\nTTY |登录终端  tty1-7 本地终端1-6 字符、 7图形） pts/0-255\nSTAT|状态 （S：睡眠 D：不可唤醒 R：运行 T：停止 Z：僵死 W：进入内存交换 X：死掉的进程 <:高优先级 N：低优先级 L：被锁进内存 s：含子进程 +：位于后台 l：多线程）\nSTART|进程触发时间\nTIME |占用cpu时间\nCOMMAND|进程本身\n\n#### pstree                    \n> * -a 查看进程树\n\n命令执行结果示例：\n```\npstree -a\nsystemd --switched-root --system --deserialize 21\n  ├─AliHids\n  │   └─4*[{AliHids}]\n  ├─AliYunDun\n  │   └─8*[{AliYunDun}]\n  ├─AliYunDunUpdate\n  │   └─3*[{AliYunDunUpdate}]\n  ├─agetty --noclear tty1 linux\n  ├─aliyun-service -d\n  ├─crond -n\n  ├─dbus-daemon --system --address=systemd: --nofork --nopidfile --systemd-activation\n  ├─memcached -d -m 128 -u root -p 11211\n  │   └─6*[{memcached}]\n  ├─nginx\n  │   └─nginx\n  ├─ntpd -u ntp:ntp -g\n  ├─php-fpm\n  │   ├─php-fpm\n  │   └─php-fpm\n  ├─rsyslogd -n\n  │   └─2*[{rsyslogd}]\n  ├─sshd -D\n  │   └─sshd\n  │       └─bash\n  │           └─pstree -a\n  ├─systemd-journal\n  ├─systemd-logind\n  └─systemd-udevd\n```\n\n#### top                    \n> 实时显示进程状态\n\n命令执行结果示例：\n```\ntop - 15:04:52 up 2 days,  5:25,  1 user,  load average: 0.00, 0.01, 0.05\nTasks:  70 total,   2 running,  68 sleeping,   0 stopped,   0 zombie\n%Cpu(s):  0.3 us,  0.3 sy,  0.0 ni, 99.3 id,  0.0 wa,  0.0 hi,  0.0 si,  0.0 st\nKiB Mem :  1016796 total,   599400 free,    41948 used,   375448 buff/cache\nKiB Swap:        0 total,        0 free,        0 used.   838500 avail Mem\n\n  PID USER      PR  NI    VIRT    RES    SHR S %CPU %MEM     TIME+ COMMAND\n  917 root      20   0   82696   9152   5456 S  0.3  0.9   5:50.76 AliHids\n    1 root      20   0   41280   3732   2388 S  0.0  0.4   0:02.36 systemd\n    2 root      20   0       0      0      0 S  0.0  0.0   0:00.01 kthreadd\n    3 root      20   0       0      0      0 S  0.0  0.0   0:00.00 ksoftirqd/0\n    5 root       0 -20       0      0      0 S  0.0  0.0   0:00.00 kworker/0:0H\n    6 root      20   0       0      0      0 S  0.0  0.0   0:00.26 kworker/u2:0\n    7 root      rt   0       0      0      0 S  0.0  0.0   0:00.00 migration/0\n    ···\n```\n\n参数说明\n- 第一行：系统当前时间，系统持续时间， 登录用户，1,5,15分钟之前的平均负载\n- 第二行：进程总数\n- 第三行：CPU占用率\n- 第四行：内存使用：总共，空闲，已使用，缓存\n- 第五行：swap使用情况\n\n操作命令：\n- M,按内存占用排序\n- P,安CPU占用排序\n- q,退出\n\n\n### 终止进程\n\n#### kill 结束单个进程\n> kill命令是通过向进程发送指定的信号来结束相应进程的。在默认情况下，采用编号为15的TERM信号。TERM信号将终止所有不能捕获该信号的进程。对于那些可以捕获该信号的进程就要用编号为9的kill信号，强行“杀掉”该进程。\n>\n> 命令格式：kill 信号  PID\n\n信号，进程间的通信方式\n\n\n我们常用的信号有\n\n信号名称| 信号| 意义\n------|-----|-----\nHUP   | 1   | 终端断线\nINT   | 2   | 中断（同 Ctrl + C）\nQUIT  | 3   | 退出（同 Ctrl + \\）\nTERM  | 15  |  终止\nKILL  | 9   | 强制终止\nCONT  | 18  |  继续（与STOP相反， fg/bg命令）\nSTOP  | 19  |  暂停（同 Ctrl + Z）\n\n示例：结束 memcached 进程\n\n获取memcached进程pid（24428，即为memcached进程PID）\n```\nps -aux | grep memcache\nroot     24428  0.0  0.0 323120   864 ?        Ssl  11:00   0:02 /usr/local/memcached/bin/memcached -d -m 128 -u root -p 11211\nroot     24727  0.0  0.0 112664   984 pts/0    S+   15:54   0:00 grep --color=auto memcache\n#\nps -ef | grep memcache\nroot     24428     1  0 11:00 ?        00:00:02 /usr/local/memcached/bin/memcached -d -m 128 -u root -p 11211\nroot     24708 24568  0 15:49 pts/0    00:00:00 grep --color=auto memcache\n```\n或者使用pidof查看 （ pid + of ）\n```\n[root@...]# pidof memcached\n24428\n```\n终止 memcached\n```\nkill -9 24428\nps -aux | grep memcache\nroot     24729  0.0  0.0 112664   984 pts/0    S+   15:55   0:00 grep --color=auto memcache\n```\n\n#### killall   \n> 杀死指定名字的进程\n>\n> 命令格式：killall 信号  进程名\n\n示例：\n```\nkillall -9 memcached\n```\n\n#### pkill\n> 支持按照一定规则匹配来杀死进程\n>\n> 命令格式：pkill [options] <pattern>\n\n示例：杀死用户 wahaha 下的所有进程\n```\npkill -u wahaha\n```\n把某个终端登陆的用户踢出\n```\npkill -9 -t 终端号\n```\n把本地登陆终端1登陆用户踢出\n```\npkill -9 -t tty1                              \n```\n\n## 服务管理\n### Linux中服务的分类\n\n#### 系统默认安装的服务(RPM)\n- 独立的服务\n- 基于xinetd的服务，xinetd是系统超级守护进程\n> xinetd服务其本身就是一个独立的服务。\n>\n> 当程序调用xinetd服务时，它先调用的事xinetd服务，让后xinetd服务在调用索要调用的服务进行相应。\n>\n> Linux系统默认是没有安装xinetd服务的，需要进行安装后才能使用。\n\n#### 源码包安装的服务\n### 系统默认安装的服务\n#### 如何区分服务的分类\n查看服务的自启动状态\n```\nchkconfig  --list                      \n```\n运行结果：\n```\nchkconfig  --list\n注意：该输出结果只显示 SysV 服务，并不包含原生 systemd 服务。SysV 配置数据可能被原生 systemd 配置覆盖。\n      如果您想列出 systemd 服务,请执行 'systemctl list-unit-files'。\n      欲查看对特定 target 启用的服务请执行\n      'systemctl list-dependencies [target]'。\naegis          \t0:关\t1:关\t2:开\t3:开\t4:开\t5:开\t6:关\nagentwatch     \t0:关\t1:关\t2:开\t3:开\t4:开\t5:开\t6:关\nnetconsole     \t0:关\t1:关\t2:关\t3:关\t4:关\t5:关\t6:关\nnetwork        \t0:关\t1:关\t2:开\t3:开\t4:开\t5:开\t6:关\n```\n\nLinux的运行级别：0-6\n\n级别| 说明\n---|-----\n0  |关机\n1  |单用户模式\n2  |不完全多用户，不包含NFS服务\n3  |完全多用户,字符界面\n4  |未分配\n5  |图形界面\n6  |重启\n\n查看当前系统的运行级别：\n```\nrunlevel\nN 3\n```\n切换系统当前的运行级别：\n\n命令 | 含义\n----|-----\ninit  0 |关机                   \ninit  5 |切换到图形界面（前提图形界面已经安装）\ninit  3 |切换到字符界面\ninit  6 |重启\n\n#### 独立的服务管理\n\n- 启动\n\n第一种方式：\n```\n/etc/rc.d/init.d/服务名 start| stop | restart | status\n# 例：\n/etc/rc.d/init.d/httpd start\n```\n第二种方式：（只支持RedHat系列的Linux）\n```\nservice 服务名 tart| stop | restart | status\n```\n***service命令其本质是当命令运行时直接在/etc/rc.d/init.d目录下查找相应的服务，并进行相应的操作。）***\n\n- 自启动\n-\n第一种方式：\n```\nchkconfig --level 2345 服务名 on|off\n```\n第二种方式：（推荐）\n```\nvi  /etc/rc.local (系统启动时会运行该文件)\n```\n修改文件内容：\n```\ntouch /var/lock/subsys/local （更新系统的开机时间）\n# 在下一行，写入自己要启动的服务名，比如我要开机自启动httpd服务：\n# 就加入/etc/rc.d/init.d/httpd start\n# 更改后文件就是：\ntouch /var/lock/subsys/local\n/etc/rc.d/init.d/httpd start\n```\n\n#### ntsysv自启动管理工具\n所有系统默认安装服务都可以使用ntsysv命令进行自启动管理。rpm包安装服务，自启动管理工具（只要rpm安装的，都可进行管理）\n\n### 源码包安装的服务\n启动\n```\n/usr/local/apache2/bin/apachectl  start\n```\n自启动\n```\nvi /etc/rc.local         \n加入\n/usr/local/apache2/bin/apachectl  start\n```\n\n\n## 计划任务\n> 首先保证crond服务时启动的（crond默认是自启动的）\n\n命令：crontab\n\n编辑格式： * * * * *  命令\n\n说明：\n- 第一个*：一小时中第几分钟  0-59\n- 第二个*：一天中第几个小时  0-23\n- 第三个*：一个月中第几天    1-31\n- 第四个*：一年第几个月      1-12\n- 第五个*：一周中星期几       0-6             \n\n例\n```\n10  *  31  *  *  命令\n10  *  *  *  *  命令\n5  4  *  5-10  *  命令\n*/10  *  *  *  *  命令\n5 4  1,15  *  *  命令  #日期和星期不要同时指定，会超出预期\n5 4 10 * 5 命令\n*/20 4 * 5 2   命令    #每隔二十分钟\n```\n\n查看系统定时任务\n```\ncrontab  -l\n```\n删除定时任务(慎用，删除之前记得备份数据)\n```\ncrontab  -r\n```\n\n**注意事项：**\n- 选项都不能为空，必须填入，不知道的值使用通配符*表示任何时间\n- 每个时间字段都可以指定多个值，不连续的值用,间隔，连续的值用-间隔\n- 间隔固定时间执行书写为*/n格式\n- 命令应该给出绝对路径\n- 星期几何第几天不能同时出现\n- 最小时间范围是分钟，最大时间范围是月\n\n\n## 查看系统启动信息\n查看系统启动信息\n```\ndmesg\n```\n系统启动信息日志\n```\ncat  /var/log/dmesg\n```\n查看eth0信息\n```\ndmesg | grep eth0                   \n```\n查看cpu信息\n```\ndmesg | grep CPU                   \n```\n","source":"_posts/Linux服务和进程管理.md","raw":"---\ntitle: linux服务和进程管理\ndate: 2016-09-28 18:30:00\nctime: 2016-09-28 18:48:00\nutime: 2016-09-28 18:48:00\nmodif_times: 0\ntags:\n- 进程管理\n- 服务管理\ncategories:\n- Linux\n---\n\n![Linux服务和进程管理](http://n.sinaimg.cn/games/3ece443e/20160929/LinuxFuWuHeJinChengGuanLi.png?1)\n\n<!-- more -->\n\n## 进程管理\n进程管理的三个主要任务\n- 判断服务器的健康状态\n- 查看所有正在运行的进程\n- 强制终止进程\n\n### 进程查看\n\n#### ps aux             \n> 查看当前系统所有运行的进程（可以不加-）\n> * -a 显示前台所有进程\n> * -u 显示用户名\n> * -x 显示后台进程\n\n命令执行结果示例：\n```\nps aux\nUSER       PID %CPU %MEM    VSZ   RSS TTY      STAT START   TIME COMMAND\nroot         1  0.0  0.3  41280  3732 ?        Ss   9月26   0:02 /usr/lib/systemd/systemd --switched-root --system\nroot         2  0.0  0.0      0     0 ?        S    9月26   0:00 [kthreadd]\nroot         3  0.0  0.0      0     0 ?        S    9月26   0:00 [ksoftirqd/0]\nroot         5  0.0  0.0      0     0 ?        S<   9月26   0:00 [kworker/0:0H]\nroot         6  0.0  0.0      0     0 ?        S    9月26   0:00 [kworker/u2:0]\nroot         7  0.0  0.0      0     0 ?        S    9月26   0:00 [migration/0]\nroot         8  0.0  0.0      0     0 ?        S    9月26   0:00 [rcu_bh]\nroot         9  0.0  0.0      0     0 ?        S    9月26   0:00 [rcuob/0]\nroot        10  0.0  0.0      0     0 ?        S    9月26   0:36 [rcu_sched]\nroot        11  0.0  0.0      0     0 ?        S    9月26   0:32 [rcuos/0]\n···\n```\n\n参数说明:\n\n参数 | 说明\n----|-----\nUSER|用户名\nPID |进程PID 1  init  系统启动的第一个进程\n%CPU|cpu占用百分比\n%MEM|内存占用百分比\nVSZ |虚拟内存占用量（KB）\nRSS |固定内存占有量\nTTY |登录终端  tty1-7 本地终端1-6 字符、 7图形） pts/0-255\nSTAT|状态 （S：睡眠 D：不可唤醒 R：运行 T：停止 Z：僵死 W：进入内存交换 X：死掉的进程 <:高优先级 N：低优先级 L：被锁进内存 s：含子进程 +：位于后台 l：多线程）\nSTART|进程触发时间\nTIME |占用cpu时间\nCOMMAND|进程本身\n\n#### pstree                    \n> * -a 查看进程树\n\n命令执行结果示例：\n```\npstree -a\nsystemd --switched-root --system --deserialize 21\n  ├─AliHids\n  │   └─4*[{AliHids}]\n  ├─AliYunDun\n  │   └─8*[{AliYunDun}]\n  ├─AliYunDunUpdate\n  │   └─3*[{AliYunDunUpdate}]\n  ├─agetty --noclear tty1 linux\n  ├─aliyun-service -d\n  ├─crond -n\n  ├─dbus-daemon --system --address=systemd: --nofork --nopidfile --systemd-activation\n  ├─memcached -d -m 128 -u root -p 11211\n  │   └─6*[{memcached}]\n  ├─nginx\n  │   └─nginx\n  ├─ntpd -u ntp:ntp -g\n  ├─php-fpm\n  │   ├─php-fpm\n  │   └─php-fpm\n  ├─rsyslogd -n\n  │   └─2*[{rsyslogd}]\n  ├─sshd -D\n  │   └─sshd\n  │       └─bash\n  │           └─pstree -a\n  ├─systemd-journal\n  ├─systemd-logind\n  └─systemd-udevd\n```\n\n#### top                    \n> 实时显示进程状态\n\n命令执行结果示例：\n```\ntop - 15:04:52 up 2 days,  5:25,  1 user,  load average: 0.00, 0.01, 0.05\nTasks:  70 total,   2 running,  68 sleeping,   0 stopped,   0 zombie\n%Cpu(s):  0.3 us,  0.3 sy,  0.0 ni, 99.3 id,  0.0 wa,  0.0 hi,  0.0 si,  0.0 st\nKiB Mem :  1016796 total,   599400 free,    41948 used,   375448 buff/cache\nKiB Swap:        0 total,        0 free,        0 used.   838500 avail Mem\n\n  PID USER      PR  NI    VIRT    RES    SHR S %CPU %MEM     TIME+ COMMAND\n  917 root      20   0   82696   9152   5456 S  0.3  0.9   5:50.76 AliHids\n    1 root      20   0   41280   3732   2388 S  0.0  0.4   0:02.36 systemd\n    2 root      20   0       0      0      0 S  0.0  0.0   0:00.01 kthreadd\n    3 root      20   0       0      0      0 S  0.0  0.0   0:00.00 ksoftirqd/0\n    5 root       0 -20       0      0      0 S  0.0  0.0   0:00.00 kworker/0:0H\n    6 root      20   0       0      0      0 S  0.0  0.0   0:00.26 kworker/u2:0\n    7 root      rt   0       0      0      0 S  0.0  0.0   0:00.00 migration/0\n    ···\n```\n\n参数说明\n- 第一行：系统当前时间，系统持续时间， 登录用户，1,5,15分钟之前的平均负载\n- 第二行：进程总数\n- 第三行：CPU占用率\n- 第四行：内存使用：总共，空闲，已使用，缓存\n- 第五行：swap使用情况\n\n操作命令：\n- M,按内存占用排序\n- P,安CPU占用排序\n- q,退出\n\n\n### 终止进程\n\n#### kill 结束单个进程\n> kill命令是通过向进程发送指定的信号来结束相应进程的。在默认情况下，采用编号为15的TERM信号。TERM信号将终止所有不能捕获该信号的进程。对于那些可以捕获该信号的进程就要用编号为9的kill信号，强行“杀掉”该进程。\n>\n> 命令格式：kill 信号  PID\n\n信号，进程间的通信方式\n\n\n我们常用的信号有\n\n信号名称| 信号| 意义\n------|-----|-----\nHUP   | 1   | 终端断线\nINT   | 2   | 中断（同 Ctrl + C）\nQUIT  | 3   | 退出（同 Ctrl + \\）\nTERM  | 15  |  终止\nKILL  | 9   | 强制终止\nCONT  | 18  |  继续（与STOP相反， fg/bg命令）\nSTOP  | 19  |  暂停（同 Ctrl + Z）\n\n示例：结束 memcached 进程\n\n获取memcached进程pid（24428，即为memcached进程PID）\n```\nps -aux | grep memcache\nroot     24428  0.0  0.0 323120   864 ?        Ssl  11:00   0:02 /usr/local/memcached/bin/memcached -d -m 128 -u root -p 11211\nroot     24727  0.0  0.0 112664   984 pts/0    S+   15:54   0:00 grep --color=auto memcache\n#\nps -ef | grep memcache\nroot     24428     1  0 11:00 ?        00:00:02 /usr/local/memcached/bin/memcached -d -m 128 -u root -p 11211\nroot     24708 24568  0 15:49 pts/0    00:00:00 grep --color=auto memcache\n```\n或者使用pidof查看 （ pid + of ）\n```\n[root@...]# pidof memcached\n24428\n```\n终止 memcached\n```\nkill -9 24428\nps -aux | grep memcache\nroot     24729  0.0  0.0 112664   984 pts/0    S+   15:55   0:00 grep --color=auto memcache\n```\n\n#### killall   \n> 杀死指定名字的进程\n>\n> 命令格式：killall 信号  进程名\n\n示例：\n```\nkillall -9 memcached\n```\n\n#### pkill\n> 支持按照一定规则匹配来杀死进程\n>\n> 命令格式：pkill [options] <pattern>\n\n示例：杀死用户 wahaha 下的所有进程\n```\npkill -u wahaha\n```\n把某个终端登陆的用户踢出\n```\npkill -9 -t 终端号\n```\n把本地登陆终端1登陆用户踢出\n```\npkill -9 -t tty1                              \n```\n\n## 服务管理\n### Linux中服务的分类\n\n#### 系统默认安装的服务(RPM)\n- 独立的服务\n- 基于xinetd的服务，xinetd是系统超级守护进程\n> xinetd服务其本身就是一个独立的服务。\n>\n> 当程序调用xinetd服务时，它先调用的事xinetd服务，让后xinetd服务在调用索要调用的服务进行相应。\n>\n> Linux系统默认是没有安装xinetd服务的，需要进行安装后才能使用。\n\n#### 源码包安装的服务\n### 系统默认安装的服务\n#### 如何区分服务的分类\n查看服务的自启动状态\n```\nchkconfig  --list                      \n```\n运行结果：\n```\nchkconfig  --list\n注意：该输出结果只显示 SysV 服务，并不包含原生 systemd 服务。SysV 配置数据可能被原生 systemd 配置覆盖。\n      如果您想列出 systemd 服务,请执行 'systemctl list-unit-files'。\n      欲查看对特定 target 启用的服务请执行\n      'systemctl list-dependencies [target]'。\naegis          \t0:关\t1:关\t2:开\t3:开\t4:开\t5:开\t6:关\nagentwatch     \t0:关\t1:关\t2:开\t3:开\t4:开\t5:开\t6:关\nnetconsole     \t0:关\t1:关\t2:关\t3:关\t4:关\t5:关\t6:关\nnetwork        \t0:关\t1:关\t2:开\t3:开\t4:开\t5:开\t6:关\n```\n\nLinux的运行级别：0-6\n\n级别| 说明\n---|-----\n0  |关机\n1  |单用户模式\n2  |不完全多用户，不包含NFS服务\n3  |完全多用户,字符界面\n4  |未分配\n5  |图形界面\n6  |重启\n\n查看当前系统的运行级别：\n```\nrunlevel\nN 3\n```\n切换系统当前的运行级别：\n\n命令 | 含义\n----|-----\ninit  0 |关机                   \ninit  5 |切换到图形界面（前提图形界面已经安装）\ninit  3 |切换到字符界面\ninit  6 |重启\n\n#### 独立的服务管理\n\n- 启动\n\n第一种方式：\n```\n/etc/rc.d/init.d/服务名 start| stop | restart | status\n# 例：\n/etc/rc.d/init.d/httpd start\n```\n第二种方式：（只支持RedHat系列的Linux）\n```\nservice 服务名 tart| stop | restart | status\n```\n***service命令其本质是当命令运行时直接在/etc/rc.d/init.d目录下查找相应的服务，并进行相应的操作。）***\n\n- 自启动\n-\n第一种方式：\n```\nchkconfig --level 2345 服务名 on|off\n```\n第二种方式：（推荐）\n```\nvi  /etc/rc.local (系统启动时会运行该文件)\n```\n修改文件内容：\n```\ntouch /var/lock/subsys/local （更新系统的开机时间）\n# 在下一行，写入自己要启动的服务名，比如我要开机自启动httpd服务：\n# 就加入/etc/rc.d/init.d/httpd start\n# 更改后文件就是：\ntouch /var/lock/subsys/local\n/etc/rc.d/init.d/httpd start\n```\n\n#### ntsysv自启动管理工具\n所有系统默认安装服务都可以使用ntsysv命令进行自启动管理。rpm包安装服务，自启动管理工具（只要rpm安装的，都可进行管理）\n\n### 源码包安装的服务\n启动\n```\n/usr/local/apache2/bin/apachectl  start\n```\n自启动\n```\nvi /etc/rc.local         \n加入\n/usr/local/apache2/bin/apachectl  start\n```\n\n\n## 计划任务\n> 首先保证crond服务时启动的（crond默认是自启动的）\n\n命令：crontab\n\n编辑格式： * * * * *  命令\n\n说明：\n- 第一个*：一小时中第几分钟  0-59\n- 第二个*：一天中第几个小时  0-23\n- 第三个*：一个月中第几天    1-31\n- 第四个*：一年第几个月      1-12\n- 第五个*：一周中星期几       0-6             \n\n例\n```\n10  *  31  *  *  命令\n10  *  *  *  *  命令\n5  4  *  5-10  *  命令\n*/10  *  *  *  *  命令\n5 4  1,15  *  *  命令  #日期和星期不要同时指定，会超出预期\n5 4 10 * 5 命令\n*/20 4 * 5 2   命令    #每隔二十分钟\n```\n\n查看系统定时任务\n```\ncrontab  -l\n```\n删除定时任务(慎用，删除之前记得备份数据)\n```\ncrontab  -r\n```\n\n**注意事项：**\n- 选项都不能为空，必须填入，不知道的值使用通配符*表示任何时间\n- 每个时间字段都可以指定多个值，不连续的值用,间隔，连续的值用-间隔\n- 间隔固定时间执行书写为*/n格式\n- 命令应该给出绝对路径\n- 星期几何第几天不能同时出现\n- 最小时间范围是分钟，最大时间范围是月\n\n\n## 查看系统启动信息\n查看系统启动信息\n```\ndmesg\n```\n系统启动信息日志\n```\ncat  /var/log/dmesg\n```\n查看eth0信息\n```\ndmesg | grep eth0                   \n```\n查看cpu信息\n```\ndmesg | grep CPU                   \n```\n","slug":"Linux服务和进程管理","published":1,"updated":"2016-09-29T03:17:46.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"city8vnn7000ng29fcyaa0ky5","content":"<p><img src=\"http://n.sinaimg.cn/games/3ece443e/20160929/LinuxFuWuHeJinChengGuanLi.png?1\" alt=\"Linux服务和进程管理\"></p>\n<a id=\"more\"></a>\n<h2 id=\"进程管理\"><a href=\"#进程管理\" class=\"headerlink\" title=\"进程管理\"></a>进程管理</h2><p>进程管理的三个主要任务</p>\n<ul>\n<li>判断服务器的健康状态</li>\n<li>查看所有正在运行的进程</li>\n<li>强制终止进程</li>\n</ul>\n<h3 id=\"进程查看\"><a href=\"#进程查看\" class=\"headerlink\" title=\"进程查看\"></a>进程查看</h3><h4 id=\"ps-aux\"><a href=\"#ps-aux\" class=\"headerlink\" title=\"ps aux\"></a>ps aux</h4><blockquote>\n<p>查看当前系统所有运行的进程（可以不加-）</p>\n<ul>\n<li>-a 显示前台所有进程</li>\n<li>-u 显示用户名</li>\n<li>-x 显示后台进程</li>\n</ul>\n</blockquote>\n<p>命令执行结果示例：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">ps aux</div><div class=\"line\">USER       PID %CPU %MEM    VSZ   RSS TTY      STAT START   TIME COMMAND</div><div class=\"line\">root         1  0.0  0.3  41280  3732 ?        Ss   9月26   0:02 /usr/lib/systemd/systemd --switched-root --system</div><div class=\"line\">root         2  0.0  0.0      0     0 ?        S    9月26   0:00 [kthreadd]</div><div class=\"line\">root         3  0.0  0.0      0     0 ?        S    9月26   0:00 [ksoftirqd/0]</div><div class=\"line\">root         5  0.0  0.0      0     0 ?        S&lt;   9月26   0:00 [kworker/0:0H]</div><div class=\"line\">root         6  0.0  0.0      0     0 ?        S    9月26   0:00 [kworker/u2:0]</div><div class=\"line\">root         7  0.0  0.0      0     0 ?        S    9月26   0:00 [migration/0]</div><div class=\"line\">root         8  0.0  0.0      0     0 ?        S    9月26   0:00 [rcu_bh]</div><div class=\"line\">root         9  0.0  0.0      0     0 ?        S    9月26   0:00 [rcuob/0]</div><div class=\"line\">root        10  0.0  0.0      0     0 ?        S    9月26   0:36 [rcu_sched]</div><div class=\"line\">root        11  0.0  0.0      0     0 ?        S    9月26   0:32 [rcuos/0]</div><div class=\"line\">···</div></pre></td></tr></table></figure></p>\n<p>参数说明:</p>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>USER</td>\n<td>用户名</td>\n</tr>\n<tr>\n<td>PID</td>\n<td>进程PID 1  init  系统启动的第一个进程</td>\n</tr>\n<tr>\n<td>%CPU</td>\n<td>cpu占用百分比</td>\n</tr>\n<tr>\n<td>%MEM</td>\n<td>内存占用百分比</td>\n</tr>\n<tr>\n<td>VSZ</td>\n<td>虚拟内存占用量（KB）</td>\n</tr>\n<tr>\n<td>RSS</td>\n<td>固定内存占有量</td>\n</tr>\n<tr>\n<td>TTY</td>\n<td>登录终端  tty1-7 本地终端1-6 字符、 7图形） pts/0-255</td>\n</tr>\n<tr>\n<td>STAT</td>\n<td>状态 （S：睡眠 D：不可唤醒 R：运行 T：停止 Z：僵死 W：进入内存交换 X：死掉的进程 &lt;:高优先级 N：低优先级 L：被锁进内存 s：含子进程 +：位于后台 l：多线程）</td>\n</tr>\n<tr>\n<td>START</td>\n<td>进程触发时间</td>\n</tr>\n<tr>\n<td>TIME</td>\n<td>占用cpu时间</td>\n</tr>\n<tr>\n<td>COMMAND</td>\n<td>进程本身</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"pstree\"><a href=\"#pstree\" class=\"headerlink\" title=\"pstree\"></a>pstree</h4><blockquote>\n<ul>\n<li>-a 查看进程树</li>\n</ul>\n</blockquote>\n<p>命令执行结果示例：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\">pstree -a</div><div class=\"line\">systemd --switched-root --system --deserialize 21</div><div class=\"line\">  ├─AliHids</div><div class=\"line\">  │   └─4*[&#123;AliHids&#125;]</div><div class=\"line\">  ├─AliYunDun</div><div class=\"line\">  │   └─8*[&#123;AliYunDun&#125;]</div><div class=\"line\">  ├─AliYunDunUpdate</div><div class=\"line\">  │   └─3*[&#123;AliYunDunUpdate&#125;]</div><div class=\"line\">  ├─agetty --noclear tty1 linux</div><div class=\"line\">  ├─aliyun-service -d</div><div class=\"line\">  ├─crond -n</div><div class=\"line\">  ├─dbus-daemon --system --address=systemd: --nofork --nopidfile --systemd-activation</div><div class=\"line\">  ├─memcached -d -m 128 -u root -p 11211</div><div class=\"line\">  │   └─6*[&#123;memcached&#125;]</div><div class=\"line\">  ├─nginx</div><div class=\"line\">  │   └─nginx</div><div class=\"line\">  ├─ntpd -u ntp:ntp -g</div><div class=\"line\">  ├─php-fpm</div><div class=\"line\">  │   ├─php-fpm</div><div class=\"line\">  │   └─php-fpm</div><div class=\"line\">  ├─rsyslogd -n</div><div class=\"line\">  │   └─2*[&#123;rsyslogd&#125;]</div><div class=\"line\">  ├─sshd -D</div><div class=\"line\">  │   └─sshd</div><div class=\"line\">  │       └─bash</div><div class=\"line\">  │           └─pstree -a</div><div class=\"line\">  ├─systemd-journal</div><div class=\"line\">  ├─systemd-logind</div><div class=\"line\">  └─systemd-udevd</div></pre></td></tr></table></figure></p>\n<h4 id=\"top\"><a href=\"#top\" class=\"headerlink\" title=\"top\"></a>top</h4><blockquote>\n<p>实时显示进程状态</p>\n</blockquote>\n<p>命令执行结果示例：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">top - 15:04:52 up 2 days,  5:25,  1 user,  load average: 0.00, 0.01, 0.05</div><div class=\"line\">Tasks:  70 total,   2 running,  68 sleeping,   0 stopped,   0 zombie</div><div class=\"line\">%Cpu(s):  0.3 us,  0.3 sy,  0.0 ni, 99.3 id,  0.0 wa,  0.0 hi,  0.0 si,  0.0 st</div><div class=\"line\">KiB Mem :  1016796 total,   599400 free,    41948 used,   375448 buff/cache</div><div class=\"line\">KiB Swap:        0 total,        0 free,        0 used.   838500 avail Mem</div><div class=\"line\"></div><div class=\"line\">  PID USER      PR  NI    VIRT    RES    SHR S %CPU %MEM     TIME+ COMMAND</div><div class=\"line\">  917 root      20   0   82696   9152   5456 S  0.3  0.9   5:50.76 AliHids</div><div class=\"line\">    1 root      20   0   41280   3732   2388 S  0.0  0.4   0:02.36 systemd</div><div class=\"line\">    2 root      20   0       0      0      0 S  0.0  0.0   0:00.01 kthreadd</div><div class=\"line\">    3 root      20   0       0      0      0 S  0.0  0.0   0:00.00 ksoftirqd/0</div><div class=\"line\">    5 root       0 -20       0      0      0 S  0.0  0.0   0:00.00 kworker/0:0H</div><div class=\"line\">    6 root      20   0       0      0      0 S  0.0  0.0   0:00.26 kworker/u2:0</div><div class=\"line\">    7 root      rt   0       0      0      0 S  0.0  0.0   0:00.00 migration/0</div><div class=\"line\">    ···</div></pre></td></tr></table></figure></p>\n<p>参数说明</p>\n<ul>\n<li>第一行：系统当前时间，系统持续时间， 登录用户，1,5,15分钟之前的平均负载</li>\n<li>第二行：进程总数</li>\n<li>第三行：CPU占用率</li>\n<li>第四行：内存使用：总共，空闲，已使用，缓存</li>\n<li>第五行：swap使用情况</li>\n</ul>\n<p>操作命令：</p>\n<ul>\n<li>M,按内存占用排序</li>\n<li>P,安CPU占用排序</li>\n<li>q,退出</li>\n</ul>\n<h3 id=\"终止进程\"><a href=\"#终止进程\" class=\"headerlink\" title=\"终止进程\"></a>终止进程</h3><h4 id=\"kill-结束单个进程\"><a href=\"#kill-结束单个进程\" class=\"headerlink\" title=\"kill 结束单个进程\"></a>kill 结束单个进程</h4><blockquote>\n<p>kill命令是通过向进程发送指定的信号来结束相应进程的。在默认情况下，采用编号为15的TERM信号。TERM信号将终止所有不能捕获该信号的进程。对于那些可以捕获该信号的进程就要用编号为9的kill信号，强行“杀掉”该进程。</p>\n<p>命令格式：kill 信号  PID</p>\n</blockquote>\n<p>信号，进程间的通信方式</p>\n<p>我们常用的信号有</p>\n<table>\n<thead>\n<tr>\n<th>信号名称</th>\n<th>信号</th>\n<th>意义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>HUP</td>\n<td>1</td>\n<td>终端断线</td>\n</tr>\n<tr>\n<td>INT</td>\n<td>2</td>\n<td>中断（同 Ctrl + C）</td>\n</tr>\n<tr>\n<td>QUIT</td>\n<td>3</td>\n<td>退出（同 Ctrl + \\）</td>\n</tr>\n<tr>\n<td>TERM</td>\n<td>15</td>\n<td>终止</td>\n</tr>\n<tr>\n<td>KILL</td>\n<td>9</td>\n<td>强制终止</td>\n</tr>\n<tr>\n<td>CONT</td>\n<td>18</td>\n<td>继续（与STOP相反， fg/bg命令）</td>\n</tr>\n<tr>\n<td>STOP</td>\n<td>19</td>\n<td>暂停（同 Ctrl + Z）</td>\n</tr>\n</tbody>\n</table>\n<p>示例：结束 memcached 进程</p>\n<p>获取memcached进程pid（24428，即为memcached进程PID）<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">ps -aux | grep memcache</div><div class=\"line\">root     24428  0.0  0.0 323120   864 ?        Ssl  11:00   0:02 /usr/local/memcached/bin/memcached -d -m 128 -u root -p 11211</div><div class=\"line\">root     24727  0.0  0.0 112664   984 pts/0    S+   15:54   0:00 grep --color=auto memcache</div><div class=\"line\">#</div><div class=\"line\">ps -ef | grep memcache</div><div class=\"line\">root     24428     1  0 11:00 ?        00:00:02 /usr/local/memcached/bin/memcached -d -m 128 -u root -p 11211</div><div class=\"line\">root     24708 24568  0 15:49 pts/0    00:00:00 grep --color=auto memcache</div></pre></td></tr></table></figure></p>\n<p>或者使用pidof查看 （ pid + of ）<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">[root@...]# pidof memcached</div><div class=\"line\">24428</div></pre></td></tr></table></figure></p>\n<p>终止 memcached<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">kill -9 24428</div><div class=\"line\">ps -aux | grep memcache</div><div class=\"line\">root     24729  0.0  0.0 112664   984 pts/0    S+   15:55   0:00 grep --color=auto memcache</div></pre></td></tr></table></figure></p>\n<h4 id=\"killall\"><a href=\"#killall\" class=\"headerlink\" title=\"killall\"></a>killall</h4><blockquote>\n<p>杀死指定名字的进程</p>\n<p>命令格式：killall 信号  进程名</p>\n</blockquote>\n<p>示例：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">killall -9 memcached</div></pre></td></tr></table></figure></p>\n<h4 id=\"pkill\"><a href=\"#pkill\" class=\"headerlink\" title=\"pkill\"></a>pkill</h4><blockquote>\n<p>支持按照一定规则匹配来杀死进程</p>\n<p>命令格式：pkill [options] <pattern></pattern></p>\n</blockquote>\n<p>示例：杀死用户 wahaha 下的所有进程<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">pkill -u wahaha</div></pre></td></tr></table></figure></p>\n<p>把某个终端登陆的用户踢出<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">pkill -9 -t 终端号</div></pre></td></tr></table></figure></p>\n<p>把本地登陆终端1登陆用户踢出<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">pkill -9 -t tty1</div></pre></td></tr></table></figure></p>\n<h2 id=\"服务管理\"><a href=\"#服务管理\" class=\"headerlink\" title=\"服务管理\"></a>服务管理</h2><h3 id=\"Linux中服务的分类\"><a href=\"#Linux中服务的分类\" class=\"headerlink\" title=\"Linux中服务的分类\"></a>Linux中服务的分类</h3><h4 id=\"系统默认安装的服务-RPM\"><a href=\"#系统默认安装的服务-RPM\" class=\"headerlink\" title=\"系统默认安装的服务(RPM)\"></a>系统默认安装的服务(RPM)</h4><ul>\n<li>独立的服务</li>\n<li>基于xinetd的服务，xinetd是系统超级守护进程<blockquote>\n<p>xinetd服务其本身就是一个独立的服务。</p>\n<p>当程序调用xinetd服务时，它先调用的事xinetd服务，让后xinetd服务在调用索要调用的服务进行相应。</p>\n<p>Linux系统默认是没有安装xinetd服务的，需要进行安装后才能使用。</p>\n</blockquote>\n</li>\n</ul>\n<h4 id=\"源码包安装的服务\"><a href=\"#源码包安装的服务\" class=\"headerlink\" title=\"源码包安装的服务\"></a>源码包安装的服务</h4><h3 id=\"系统默认安装的服务\"><a href=\"#系统默认安装的服务\" class=\"headerlink\" title=\"系统默认安装的服务\"></a>系统默认安装的服务</h3><h4 id=\"如何区分服务的分类\"><a href=\"#如何区分服务的分类\" class=\"headerlink\" title=\"如何区分服务的分类\"></a>如何区分服务的分类</h4><p>查看服务的自启动状态<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">chkconfig  --list</div></pre></td></tr></table></figure></p>\n<p>运行结果：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">chkconfig  --list</div><div class=\"line\">注意：该输出结果只显示 SysV 服务，并不包含原生 systemd 服务。SysV 配置数据可能被原生 systemd 配置覆盖。</div><div class=\"line\">      如果您想列出 systemd 服务,请执行 &apos;systemctl list-unit-files&apos;。</div><div class=\"line\">      欲查看对特定 target 启用的服务请执行</div><div class=\"line\">      &apos;systemctl list-dependencies [target]&apos;。</div><div class=\"line\">aegis          \t0:关\t1:关\t2:开\t3:开\t4:开\t5:开\t6:关</div><div class=\"line\">agentwatch     \t0:关\t1:关\t2:开\t3:开\t4:开\t5:开\t6:关</div><div class=\"line\">netconsole     \t0:关\t1:关\t2:关\t3:关\t4:关\t5:关\t6:关</div><div class=\"line\">network        \t0:关\t1:关\t2:开\t3:开\t4:开\t5:开\t6:关</div></pre></td></tr></table></figure></p>\n<p>Linux的运行级别：0-6</p>\n<table>\n<thead>\n<tr>\n<th>级别</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>0</td>\n<td>关机</td>\n</tr>\n<tr>\n<td>1</td>\n<td>单用户模式</td>\n</tr>\n<tr>\n<td>2</td>\n<td>不完全多用户，不包含NFS服务</td>\n</tr>\n<tr>\n<td>3</td>\n<td>完全多用户,字符界面</td>\n</tr>\n<tr>\n<td>4</td>\n<td>未分配</td>\n</tr>\n<tr>\n<td>5</td>\n<td>图形界面</td>\n</tr>\n<tr>\n<td>6</td>\n<td>重启</td>\n</tr>\n</tbody>\n</table>\n<p>查看当前系统的运行级别：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">runlevel</div><div class=\"line\">N 3</div></pre></td></tr></table></figure></p>\n<p>切换系统当前的运行级别：</p>\n<table>\n<thead>\n<tr>\n<th>命令</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>init  0</td>\n<td>关机                   </td>\n</tr>\n<tr>\n<td>init  5</td>\n<td>切换到图形界面（前提图形界面已经安装）</td>\n</tr>\n<tr>\n<td>init  3</td>\n<td>切换到字符界面</td>\n</tr>\n<tr>\n<td>init  6</td>\n<td>重启</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"独立的服务管理\"><a href=\"#独立的服务管理\" class=\"headerlink\" title=\"独立的服务管理\"></a>独立的服务管理</h4><ul>\n<li>启动</li>\n</ul>\n<p>第一种方式：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">/etc/rc.d/init.d/服务名 start| stop | restart | status</div><div class=\"line\"># 例：</div><div class=\"line\">/etc/rc.d/init.d/httpd start</div></pre></td></tr></table></figure></p>\n<p>第二种方式：（只支持RedHat系列的Linux）<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">service 服务名 tart| stop | restart | status</div></pre></td></tr></table></figure></p>\n<p><strong><em>service命令其本质是当命令运行时直接在/etc/rc.d/init.d目录下查找相应的服务，并进行相应的操作。）</em></strong></p>\n<ul>\n<li>自启动<br>-<br>第一种方式：<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">chkconfig --level 2345 服务名 on|off</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>第二种方式：（推荐）<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">vi  /etc/rc.local (系统启动时会运行该文件)</div></pre></td></tr></table></figure></p>\n<p>修改文件内容：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">touch /var/lock/subsys/local （更新系统的开机时间）</div><div class=\"line\"># 在下一行，写入自己要启动的服务名，比如我要开机自启动httpd服务：</div><div class=\"line\"># 就加入/etc/rc.d/init.d/httpd start</div><div class=\"line\"># 更改后文件就是：</div><div class=\"line\">touch /var/lock/subsys/local</div><div class=\"line\">/etc/rc.d/init.d/httpd start</div></pre></td></tr></table></figure></p>\n<h4 id=\"ntsysv自启动管理工具\"><a href=\"#ntsysv自启动管理工具\" class=\"headerlink\" title=\"ntsysv自启动管理工具\"></a>ntsysv自启动管理工具</h4><p>所有系统默认安装服务都可以使用ntsysv命令进行自启动管理。rpm包安装服务，自启动管理工具（只要rpm安装的，都可进行管理）</p>\n<h3 id=\"源码包安装的服务-1\"><a href=\"#源码包安装的服务-1\" class=\"headerlink\" title=\"源码包安装的服务\"></a>源码包安装的服务</h3><p>启动<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">/usr/local/apache2/bin/apachectl  start</div></pre></td></tr></table></figure></p>\n<p>自启动<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">vi /etc/rc.local         </div><div class=\"line\">加入</div><div class=\"line\">/usr/local/apache2/bin/apachectl  start</div></pre></td></tr></table></figure></p>\n<h2 id=\"计划任务\"><a href=\"#计划任务\" class=\"headerlink\" title=\"计划任务\"></a>计划任务</h2><blockquote>\n<p>首先保证crond服务时启动的（crond默认是自启动的）</p>\n</blockquote>\n<p>命令：crontab</p>\n<p>编辑格式： <em> </em> <em> </em> *  命令</p>\n<p>说明：</p>\n<ul>\n<li>第一个*：一小时中第几分钟  0-59</li>\n<li>第二个*：一天中第几个小时  0-23</li>\n<li>第三个*：一个月中第几天    1-31</li>\n<li>第四个*：一年第几个月      1-12</li>\n<li>第五个*：一周中星期几       0-6             </li>\n</ul>\n<p>例<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">10  *  31  *  *  命令</div><div class=\"line\">10  *  *  *  *  命令</div><div class=\"line\">5  4  *  5-10  *  命令</div><div class=\"line\">*/10  *  *  *  *  命令</div><div class=\"line\">5 4  1,15  *  *  命令  #日期和星期不要同时指定，会超出预期</div><div class=\"line\">5 4 10 * 5 命令</div><div class=\"line\">*/20 4 * 5 2   命令    #每隔二十分钟</div></pre></td></tr></table></figure></p>\n<p>查看系统定时任务<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">crontab  -l</div></pre></td></tr></table></figure></p>\n<p>删除定时任务(慎用，删除之前记得备份数据)<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">crontab  -r</div></pre></td></tr></table></figure></p>\n<p><strong>注意事项：</strong></p>\n<ul>\n<li>选项都不能为空，必须填入，不知道的值使用通配符*表示任何时间</li>\n<li>每个时间字段都可以指定多个值，不连续的值用,间隔，连续的值用-间隔</li>\n<li>间隔固定时间执行书写为*/n格式</li>\n<li>命令应该给出绝对路径</li>\n<li>星期几何第几天不能同时出现</li>\n<li>最小时间范围是分钟，最大时间范围是月</li>\n</ul>\n<h2 id=\"查看系统启动信息\"><a href=\"#查看系统启动信息\" class=\"headerlink\" title=\"查看系统启动信息\"></a>查看系统启动信息</h2><p>查看系统启动信息<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">dmesg</div></pre></td></tr></table></figure></p>\n<p>系统启动信息日志<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">cat  /var/log/dmesg</div></pre></td></tr></table></figure></p>\n<p>查看eth0信息<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">dmesg | grep eth0</div></pre></td></tr></table></figure></p>\n<p>查看cpu信息<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">dmesg | grep CPU</div></pre></td></tr></table></figure></p>\n","excerpt":"<p><img src=\"http://n.sinaimg.cn/games/3ece443e/20160929/LinuxFuWuHeJinChengGuanLi.png?1\" alt=\"Linux服务和进程管理\"></p>","more":"<h2 id=\"进程管理\"><a href=\"#进程管理\" class=\"headerlink\" title=\"进程管理\"></a>进程管理</h2><p>进程管理的三个主要任务</p>\n<ul>\n<li>判断服务器的健康状态</li>\n<li>查看所有正在运行的进程</li>\n<li>强制终止进程</li>\n</ul>\n<h3 id=\"进程查看\"><a href=\"#进程查看\" class=\"headerlink\" title=\"进程查看\"></a>进程查看</h3><h4 id=\"ps-aux\"><a href=\"#ps-aux\" class=\"headerlink\" title=\"ps aux\"></a>ps aux</h4><blockquote>\n<p>查看当前系统所有运行的进程（可以不加-）</p>\n<ul>\n<li>-a 显示前台所有进程</li>\n<li>-u 显示用户名</li>\n<li>-x 显示后台进程</li>\n</ul>\n</blockquote>\n<p>命令执行结果示例：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">ps aux</div><div class=\"line\">USER       PID %CPU %MEM    VSZ   RSS TTY      STAT START   TIME COMMAND</div><div class=\"line\">root         1  0.0  0.3  41280  3732 ?        Ss   9月26   0:02 /usr/lib/systemd/systemd --switched-root --system</div><div class=\"line\">root         2  0.0  0.0      0     0 ?        S    9月26   0:00 [kthreadd]</div><div class=\"line\">root         3  0.0  0.0      0     0 ?        S    9月26   0:00 [ksoftirqd/0]</div><div class=\"line\">root         5  0.0  0.0      0     0 ?        S&lt;   9月26   0:00 [kworker/0:0H]</div><div class=\"line\">root         6  0.0  0.0      0     0 ?        S    9月26   0:00 [kworker/u2:0]</div><div class=\"line\">root         7  0.0  0.0      0     0 ?        S    9月26   0:00 [migration/0]</div><div class=\"line\">root         8  0.0  0.0      0     0 ?        S    9月26   0:00 [rcu_bh]</div><div class=\"line\">root         9  0.0  0.0      0     0 ?        S    9月26   0:00 [rcuob/0]</div><div class=\"line\">root        10  0.0  0.0      0     0 ?        S    9月26   0:36 [rcu_sched]</div><div class=\"line\">root        11  0.0  0.0      0     0 ?        S    9月26   0:32 [rcuos/0]</div><div class=\"line\">···</div></pre></td></tr></table></figure></p>\n<p>参数说明:</p>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>USER</td>\n<td>用户名</td>\n</tr>\n<tr>\n<td>PID</td>\n<td>进程PID 1  init  系统启动的第一个进程</td>\n</tr>\n<tr>\n<td>%CPU</td>\n<td>cpu占用百分比</td>\n</tr>\n<tr>\n<td>%MEM</td>\n<td>内存占用百分比</td>\n</tr>\n<tr>\n<td>VSZ</td>\n<td>虚拟内存占用量（KB）</td>\n</tr>\n<tr>\n<td>RSS</td>\n<td>固定内存占有量</td>\n</tr>\n<tr>\n<td>TTY</td>\n<td>登录终端  tty1-7 本地终端1-6 字符、 7图形） pts/0-255</td>\n</tr>\n<tr>\n<td>STAT</td>\n<td>状态 （S：睡眠 D：不可唤醒 R：运行 T：停止 Z：僵死 W：进入内存交换 X：死掉的进程 &lt;:高优先级 N：低优先级 L：被锁进内存 s：含子进程 +：位于后台 l：多线程）</td>\n</tr>\n<tr>\n<td>START</td>\n<td>进程触发时间</td>\n</tr>\n<tr>\n<td>TIME</td>\n<td>占用cpu时间</td>\n</tr>\n<tr>\n<td>COMMAND</td>\n<td>进程本身</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"pstree\"><a href=\"#pstree\" class=\"headerlink\" title=\"pstree\"></a>pstree</h4><blockquote>\n<ul>\n<li>-a 查看进程树</li>\n</ul>\n</blockquote>\n<p>命令执行结果示例：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\">pstree -a</div><div class=\"line\">systemd --switched-root --system --deserialize 21</div><div class=\"line\">  ├─AliHids</div><div class=\"line\">  │   └─4*[&#123;AliHids&#125;]</div><div class=\"line\">  ├─AliYunDun</div><div class=\"line\">  │   └─8*[&#123;AliYunDun&#125;]</div><div class=\"line\">  ├─AliYunDunUpdate</div><div class=\"line\">  │   └─3*[&#123;AliYunDunUpdate&#125;]</div><div class=\"line\">  ├─agetty --noclear tty1 linux</div><div class=\"line\">  ├─aliyun-service -d</div><div class=\"line\">  ├─crond -n</div><div class=\"line\">  ├─dbus-daemon --system --address=systemd: --nofork --nopidfile --systemd-activation</div><div class=\"line\">  ├─memcached -d -m 128 -u root -p 11211</div><div class=\"line\">  │   └─6*[&#123;memcached&#125;]</div><div class=\"line\">  ├─nginx</div><div class=\"line\">  │   └─nginx</div><div class=\"line\">  ├─ntpd -u ntp:ntp -g</div><div class=\"line\">  ├─php-fpm</div><div class=\"line\">  │   ├─php-fpm</div><div class=\"line\">  │   └─php-fpm</div><div class=\"line\">  ├─rsyslogd -n</div><div class=\"line\">  │   └─2*[&#123;rsyslogd&#125;]</div><div class=\"line\">  ├─sshd -D</div><div class=\"line\">  │   └─sshd</div><div class=\"line\">  │       └─bash</div><div class=\"line\">  │           └─pstree -a</div><div class=\"line\">  ├─systemd-journal</div><div class=\"line\">  ├─systemd-logind</div><div class=\"line\">  └─systemd-udevd</div></pre></td></tr></table></figure></p>\n<h4 id=\"top\"><a href=\"#top\" class=\"headerlink\" title=\"top\"></a>top</h4><blockquote>\n<p>实时显示进程状态</p>\n</blockquote>\n<p>命令执行结果示例：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">top - 15:04:52 up 2 days,  5:25,  1 user,  load average: 0.00, 0.01, 0.05</div><div class=\"line\">Tasks:  70 total,   2 running,  68 sleeping,   0 stopped,   0 zombie</div><div class=\"line\">%Cpu(s):  0.3 us,  0.3 sy,  0.0 ni, 99.3 id,  0.0 wa,  0.0 hi,  0.0 si,  0.0 st</div><div class=\"line\">KiB Mem :  1016796 total,   599400 free,    41948 used,   375448 buff/cache</div><div class=\"line\">KiB Swap:        0 total,        0 free,        0 used.   838500 avail Mem</div><div class=\"line\"></div><div class=\"line\">  PID USER      PR  NI    VIRT    RES    SHR S %CPU %MEM     TIME+ COMMAND</div><div class=\"line\">  917 root      20   0   82696   9152   5456 S  0.3  0.9   5:50.76 AliHids</div><div class=\"line\">    1 root      20   0   41280   3732   2388 S  0.0  0.4   0:02.36 systemd</div><div class=\"line\">    2 root      20   0       0      0      0 S  0.0  0.0   0:00.01 kthreadd</div><div class=\"line\">    3 root      20   0       0      0      0 S  0.0  0.0   0:00.00 ksoftirqd/0</div><div class=\"line\">    5 root       0 -20       0      0      0 S  0.0  0.0   0:00.00 kworker/0:0H</div><div class=\"line\">    6 root      20   0       0      0      0 S  0.0  0.0   0:00.26 kworker/u2:0</div><div class=\"line\">    7 root      rt   0       0      0      0 S  0.0  0.0   0:00.00 migration/0</div><div class=\"line\">    ···</div></pre></td></tr></table></figure></p>\n<p>参数说明</p>\n<ul>\n<li>第一行：系统当前时间，系统持续时间， 登录用户，1,5,15分钟之前的平均负载</li>\n<li>第二行：进程总数</li>\n<li>第三行：CPU占用率</li>\n<li>第四行：内存使用：总共，空闲，已使用，缓存</li>\n<li>第五行：swap使用情况</li>\n</ul>\n<p>操作命令：</p>\n<ul>\n<li>M,按内存占用排序</li>\n<li>P,安CPU占用排序</li>\n<li>q,退出</li>\n</ul>\n<h3 id=\"终止进程\"><a href=\"#终止进程\" class=\"headerlink\" title=\"终止进程\"></a>终止进程</h3><h4 id=\"kill-结束单个进程\"><a href=\"#kill-结束单个进程\" class=\"headerlink\" title=\"kill 结束单个进程\"></a>kill 结束单个进程</h4><blockquote>\n<p>kill命令是通过向进程发送指定的信号来结束相应进程的。在默认情况下，采用编号为15的TERM信号。TERM信号将终止所有不能捕获该信号的进程。对于那些可以捕获该信号的进程就要用编号为9的kill信号，强行“杀掉”该进程。</p>\n<p>命令格式：kill 信号  PID</p>\n</blockquote>\n<p>信号，进程间的通信方式</p>\n<p>我们常用的信号有</p>\n<table>\n<thead>\n<tr>\n<th>信号名称</th>\n<th>信号</th>\n<th>意义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>HUP</td>\n<td>1</td>\n<td>终端断线</td>\n</tr>\n<tr>\n<td>INT</td>\n<td>2</td>\n<td>中断（同 Ctrl + C）</td>\n</tr>\n<tr>\n<td>QUIT</td>\n<td>3</td>\n<td>退出（同 Ctrl + \\）</td>\n</tr>\n<tr>\n<td>TERM</td>\n<td>15</td>\n<td>终止</td>\n</tr>\n<tr>\n<td>KILL</td>\n<td>9</td>\n<td>强制终止</td>\n</tr>\n<tr>\n<td>CONT</td>\n<td>18</td>\n<td>继续（与STOP相反， fg/bg命令）</td>\n</tr>\n<tr>\n<td>STOP</td>\n<td>19</td>\n<td>暂停（同 Ctrl + Z）</td>\n</tr>\n</tbody>\n</table>\n<p>示例：结束 memcached 进程</p>\n<p>获取memcached进程pid（24428，即为memcached进程PID）<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">ps -aux | grep memcache</div><div class=\"line\">root     24428  0.0  0.0 323120   864 ?        Ssl  11:00   0:02 /usr/local/memcached/bin/memcached -d -m 128 -u root -p 11211</div><div class=\"line\">root     24727  0.0  0.0 112664   984 pts/0    S+   15:54   0:00 grep --color=auto memcache</div><div class=\"line\">#</div><div class=\"line\">ps -ef | grep memcache</div><div class=\"line\">root     24428     1  0 11:00 ?        00:00:02 /usr/local/memcached/bin/memcached -d -m 128 -u root -p 11211</div><div class=\"line\">root     24708 24568  0 15:49 pts/0    00:00:00 grep --color=auto memcache</div></pre></td></tr></table></figure></p>\n<p>或者使用pidof查看 （ pid + of ）<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">[root@...]# pidof memcached</div><div class=\"line\">24428</div></pre></td></tr></table></figure></p>\n<p>终止 memcached<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">kill -9 24428</div><div class=\"line\">ps -aux | grep memcache</div><div class=\"line\">root     24729  0.0  0.0 112664   984 pts/0    S+   15:55   0:00 grep --color=auto memcache</div></pre></td></tr></table></figure></p>\n<h4 id=\"killall\"><a href=\"#killall\" class=\"headerlink\" title=\"killall\"></a>killall</h4><blockquote>\n<p>杀死指定名字的进程</p>\n<p>命令格式：killall 信号  进程名</p>\n</blockquote>\n<p>示例：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">killall -9 memcached</div></pre></td></tr></table></figure></p>\n<h4 id=\"pkill\"><a href=\"#pkill\" class=\"headerlink\" title=\"pkill\"></a>pkill</h4><blockquote>\n<p>支持按照一定规则匹配来杀死进程</p>\n<p>命令格式：pkill [options] <pattern></p>\n</blockquote>\n<p>示例：杀死用户 wahaha 下的所有进程<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">pkill -u wahaha</div></pre></td></tr></table></figure></p>\n<p>把某个终端登陆的用户踢出<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">pkill -9 -t 终端号</div></pre></td></tr></table></figure></p>\n<p>把本地登陆终端1登陆用户踢出<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">pkill -9 -t tty1</div></pre></td></tr></table></figure></p>\n<h2 id=\"服务管理\"><a href=\"#服务管理\" class=\"headerlink\" title=\"服务管理\"></a>服务管理</h2><h3 id=\"Linux中服务的分类\"><a href=\"#Linux中服务的分类\" class=\"headerlink\" title=\"Linux中服务的分类\"></a>Linux中服务的分类</h3><h4 id=\"系统默认安装的服务-RPM\"><a href=\"#系统默认安装的服务-RPM\" class=\"headerlink\" title=\"系统默认安装的服务(RPM)\"></a>系统默认安装的服务(RPM)</h4><ul>\n<li>独立的服务</li>\n<li>基于xinetd的服务，xinetd是系统超级守护进程<blockquote>\n<p>xinetd服务其本身就是一个独立的服务。</p>\n<p>当程序调用xinetd服务时，它先调用的事xinetd服务，让后xinetd服务在调用索要调用的服务进行相应。</p>\n<p>Linux系统默认是没有安装xinetd服务的，需要进行安装后才能使用。</p>\n</blockquote>\n</li>\n</ul>\n<h4 id=\"源码包安装的服务\"><a href=\"#源码包安装的服务\" class=\"headerlink\" title=\"源码包安装的服务\"></a>源码包安装的服务</h4><h3 id=\"系统默认安装的服务\"><a href=\"#系统默认安装的服务\" class=\"headerlink\" title=\"系统默认安装的服务\"></a>系统默认安装的服务</h3><h4 id=\"如何区分服务的分类\"><a href=\"#如何区分服务的分类\" class=\"headerlink\" title=\"如何区分服务的分类\"></a>如何区分服务的分类</h4><p>查看服务的自启动状态<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">chkconfig  --list</div></pre></td></tr></table></figure></p>\n<p>运行结果：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">chkconfig  --list</div><div class=\"line\">注意：该输出结果只显示 SysV 服务，并不包含原生 systemd 服务。SysV 配置数据可能被原生 systemd 配置覆盖。</div><div class=\"line\">      如果您想列出 systemd 服务,请执行 &apos;systemctl list-unit-files&apos;。</div><div class=\"line\">      欲查看对特定 target 启用的服务请执行</div><div class=\"line\">      &apos;systemctl list-dependencies [target]&apos;。</div><div class=\"line\">aegis          \t0:关\t1:关\t2:开\t3:开\t4:开\t5:开\t6:关</div><div class=\"line\">agentwatch     \t0:关\t1:关\t2:开\t3:开\t4:开\t5:开\t6:关</div><div class=\"line\">netconsole     \t0:关\t1:关\t2:关\t3:关\t4:关\t5:关\t6:关</div><div class=\"line\">network        \t0:关\t1:关\t2:开\t3:开\t4:开\t5:开\t6:关</div></pre></td></tr></table></figure></p>\n<p>Linux的运行级别：0-6</p>\n<table>\n<thead>\n<tr>\n<th>级别</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>0</td>\n<td>关机</td>\n</tr>\n<tr>\n<td>1</td>\n<td>单用户模式</td>\n</tr>\n<tr>\n<td>2</td>\n<td>不完全多用户，不包含NFS服务</td>\n</tr>\n<tr>\n<td>3</td>\n<td>完全多用户,字符界面</td>\n</tr>\n<tr>\n<td>4</td>\n<td>未分配</td>\n</tr>\n<tr>\n<td>5</td>\n<td>图形界面</td>\n</tr>\n<tr>\n<td>6</td>\n<td>重启</td>\n</tr>\n</tbody>\n</table>\n<p>查看当前系统的运行级别：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">runlevel</div><div class=\"line\">N 3</div></pre></td></tr></table></figure></p>\n<p>切换系统当前的运行级别：</p>\n<table>\n<thead>\n<tr>\n<th>命令</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>init  0</td>\n<td>关机                   </td>\n</tr>\n<tr>\n<td>init  5</td>\n<td>切换到图形界面（前提图形界面已经安装）</td>\n</tr>\n<tr>\n<td>init  3</td>\n<td>切换到字符界面</td>\n</tr>\n<tr>\n<td>init  6</td>\n<td>重启</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"独立的服务管理\"><a href=\"#独立的服务管理\" class=\"headerlink\" title=\"独立的服务管理\"></a>独立的服务管理</h4><ul>\n<li>启动</li>\n</ul>\n<p>第一种方式：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">/etc/rc.d/init.d/服务名 start| stop | restart | status</div><div class=\"line\"># 例：</div><div class=\"line\">/etc/rc.d/init.d/httpd start</div></pre></td></tr></table></figure></p>\n<p>第二种方式：（只支持RedHat系列的Linux）<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">service 服务名 tart| stop | restart | status</div></pre></td></tr></table></figure></p>\n<p><strong><em>service命令其本质是当命令运行时直接在/etc/rc.d/init.d目录下查找相应的服务，并进行相应的操作。）</em></strong></p>\n<ul>\n<li>自启动<br>-<br>第一种方式：<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">chkconfig --level 2345 服务名 on|off</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>第二种方式：（推荐）<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">vi  /etc/rc.local (系统启动时会运行该文件)</div></pre></td></tr></table></figure></p>\n<p>修改文件内容：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">touch /var/lock/subsys/local （更新系统的开机时间）</div><div class=\"line\"># 在下一行，写入自己要启动的服务名，比如我要开机自启动httpd服务：</div><div class=\"line\"># 就加入/etc/rc.d/init.d/httpd start</div><div class=\"line\"># 更改后文件就是：</div><div class=\"line\">touch /var/lock/subsys/local</div><div class=\"line\">/etc/rc.d/init.d/httpd start</div></pre></td></tr></table></figure></p>\n<h4 id=\"ntsysv自启动管理工具\"><a href=\"#ntsysv自启动管理工具\" class=\"headerlink\" title=\"ntsysv自启动管理工具\"></a>ntsysv自启动管理工具</h4><p>所有系统默认安装服务都可以使用ntsysv命令进行自启动管理。rpm包安装服务，自启动管理工具（只要rpm安装的，都可进行管理）</p>\n<h3 id=\"源码包安装的服务-1\"><a href=\"#源码包安装的服务-1\" class=\"headerlink\" title=\"源码包安装的服务\"></a>源码包安装的服务</h3><p>启动<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">/usr/local/apache2/bin/apachectl  start</div></pre></td></tr></table></figure></p>\n<p>自启动<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">vi /etc/rc.local         </div><div class=\"line\">加入</div><div class=\"line\">/usr/local/apache2/bin/apachectl  start</div></pre></td></tr></table></figure></p>\n<h2 id=\"计划任务\"><a href=\"#计划任务\" class=\"headerlink\" title=\"计划任务\"></a>计划任务</h2><blockquote>\n<p>首先保证crond服务时启动的（crond默认是自启动的）</p>\n</blockquote>\n<p>命令：crontab</p>\n<p>编辑格式： <em> </em> <em> </em> *  命令</p>\n<p>说明：</p>\n<ul>\n<li>第一个*：一小时中第几分钟  0-59</li>\n<li>第二个*：一天中第几个小时  0-23</li>\n<li>第三个*：一个月中第几天    1-31</li>\n<li>第四个*：一年第几个月      1-12</li>\n<li>第五个*：一周中星期几       0-6             </li>\n</ul>\n<p>例<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">10  *  31  *  *  命令</div><div class=\"line\">10  *  *  *  *  命令</div><div class=\"line\">5  4  *  5-10  *  命令</div><div class=\"line\">*/10  *  *  *  *  命令</div><div class=\"line\">5 4  1,15  *  *  命令  #日期和星期不要同时指定，会超出预期</div><div class=\"line\">5 4 10 * 5 命令</div><div class=\"line\">*/20 4 * 5 2   命令    #每隔二十分钟</div></pre></td></tr></table></figure></p>\n<p>查看系统定时任务<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">crontab  -l</div></pre></td></tr></table></figure></p>\n<p>删除定时任务(慎用，删除之前记得备份数据)<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">crontab  -r</div></pre></td></tr></table></figure></p>\n<p><strong>注意事项：</strong></p>\n<ul>\n<li>选项都不能为空，必须填入，不知道的值使用通配符*表示任何时间</li>\n<li>每个时间字段都可以指定多个值，不连续的值用,间隔，连续的值用-间隔</li>\n<li>间隔固定时间执行书写为*/n格式</li>\n<li>命令应该给出绝对路径</li>\n<li>星期几何第几天不能同时出现</li>\n<li>最小时间范围是分钟，最大时间范围是月</li>\n</ul>\n<h2 id=\"查看系统启动信息\"><a href=\"#查看系统启动信息\" class=\"headerlink\" title=\"查看系统启动信息\"></a>查看系统启动信息</h2><p>查看系统启动信息<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">dmesg</div></pre></td></tr></table></figure></p>\n<p>系统启动信息日志<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">cat  /var/log/dmesg</div></pre></td></tr></table></figure></p>\n<p>查看eth0信息<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">dmesg | grep eth0</div></pre></td></tr></table></figure></p>\n<p>查看cpu信息<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">dmesg | grep CPU</div></pre></td></tr></table></figure></p>"},{"title":"MVCC多版本并发控制","date":"2016-09-16T17:00:00.000Z","_content":"\nMySQL中大多数事务型的存储引擎都不是简单的行级锁。为了提高并发性，他们一般会采用多版本并发控制（MVCC，一种行级锁的变种）来使很多情况下在避免加锁的情况下就实现并发操作，从而是的系统开销更低。\n\nMySQL的InnoDB存储引擎的MCVV，是通过在每行记录后面保存两个隐藏的列来实现。一个保存行的创建时间，另一个保存过期时间。当然这里所说的时间并不是实际时间，是系统版本号。数据库系统在每开始一个事务，其系统版本号就会自动递增。一个事务开始时刻，事务会去当前的系统版本号作为当前事务的事务版本号，用来和查询到的每行记录的版本号做比较。\n\nid  | fields ...  | create_version  | delete_version\n----|-------------|-----------------|---------------\n1   | ....        | 1               |\n2   | ....        | 2               | 3\n\n<!-- more -->\n\n## 具体实现\nRepeatable read 隔离级别下，MVCC具体操作：\n### Select 操作：\na. InnoDB 只查找版本号小于当前事务版本号的行（即，行的系统版本号小于或者等于当前事务的系统版本号），以确保当前事务读取到的行，要么是当前事务开始之前就已经存在的行，要么就是当前事务插入或者修改过的行。\nb. 行的删除版本号要么未定义，要么大于当前事务的版本号。这样可以确保当前事务读取到行，在事务开始之前为被删除。\n\n只有同事符合上述两个条件的记录，才能被作为查询结果被返回。\n\n### Insert 操作：\nInnoDB为新插入的行保存当前事务的版本号作为行版本号。\n\n\n### Delete 操作：\nInnoDB为删除的每一行记录保存当前的事务版本号作为行删除标识。\n\n### Update 操作：\nInnoDB会插入一条新纪录，保存当前事务版本号作为改行的行版本号，同事保存当前的事务版本号到原来的行作为行删除标识版本号。\n\n\n\n## 多版本并发控制优缺点\n### 优点\n通过两个额外的版本号，能使大多数读操作都可以不用加锁，从而使得查询性能更好。\n\n### 缺点\n每行记录多需要做存储两个版本号，需要浪费额外的存储空间。\n\n**TIPS:**\nMVCC，只在Repeatable read 和read committed两个隔离级别下工作。其他两个隔离级别都和MVCC不兼容，因为 read uncommitted总是读取最新的行，而不是符合当前事务版本号的行，而 serializable 则会对所有读取的行都会加锁。\n","source":"_posts/MVCC-多版本并发控制整理.md","raw":"---\ntitle: MVCC多版本并发控制\ndate: 2016-09-17 01:00:00\ntags:\n- MVCC\n- 多版本并发控制\ncategories:\n- MySQL\n---\n\nMySQL中大多数事务型的存储引擎都不是简单的行级锁。为了提高并发性，他们一般会采用多版本并发控制（MVCC，一种行级锁的变种）来使很多情况下在避免加锁的情况下就实现并发操作，从而是的系统开销更低。\n\nMySQL的InnoDB存储引擎的MCVV，是通过在每行记录后面保存两个隐藏的列来实现。一个保存行的创建时间，另一个保存过期时间。当然这里所说的时间并不是实际时间，是系统版本号。数据库系统在每开始一个事务，其系统版本号就会自动递增。一个事务开始时刻，事务会去当前的系统版本号作为当前事务的事务版本号，用来和查询到的每行记录的版本号做比较。\n\nid  | fields ...  | create_version  | delete_version\n----|-------------|-----------------|---------------\n1   | ....        | 1               |\n2   | ....        | 2               | 3\n\n<!-- more -->\n\n## 具体实现\nRepeatable read 隔离级别下，MVCC具体操作：\n### Select 操作：\na. InnoDB 只查找版本号小于当前事务版本号的行（即，行的系统版本号小于或者等于当前事务的系统版本号），以确保当前事务读取到的行，要么是当前事务开始之前就已经存在的行，要么就是当前事务插入或者修改过的行。\nb. 行的删除版本号要么未定义，要么大于当前事务的版本号。这样可以确保当前事务读取到行，在事务开始之前为被删除。\n\n只有同事符合上述两个条件的记录，才能被作为查询结果被返回。\n\n### Insert 操作：\nInnoDB为新插入的行保存当前事务的版本号作为行版本号。\n\n\n### Delete 操作：\nInnoDB为删除的每一行记录保存当前的事务版本号作为行删除标识。\n\n### Update 操作：\nInnoDB会插入一条新纪录，保存当前事务版本号作为改行的行版本号，同事保存当前的事务版本号到原来的行作为行删除标识版本号。\n\n\n\n## 多版本并发控制优缺点\n### 优点\n通过两个额外的版本号，能使大多数读操作都可以不用加锁，从而使得查询性能更好。\n\n### 缺点\n每行记录多需要做存储两个版本号，需要浪费额外的存储空间。\n\n**TIPS:**\nMVCC，只在Repeatable read 和read committed两个隔离级别下工作。其他两个隔离级别都和MVCC不兼容，因为 read uncommitted总是读取最新的行，而不是符合当前事务版本号的行，而 serializable 则会对所有读取的行都会加锁。\n","slug":"MVCC-多版本并发控制整理","published":1,"updated":"2016-09-17T05:17:55.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"city8vnn9000pg29f5lvafcw2","content":"<p>MySQL中大多数事务型的存储引擎都不是简单的行级锁。为了提高并发性，他们一般会采用多版本并发控制（MVCC，一种行级锁的变种）来使很多情况下在避免加锁的情况下就实现并发操作，从而是的系统开销更低。</p>\n<p>MySQL的InnoDB存储引擎的MCVV，是通过在每行记录后面保存两个隐藏的列来实现。一个保存行的创建时间，另一个保存过期时间。当然这里所说的时间并不是实际时间，是系统版本号。数据库系统在每开始一个事务，其系统版本号就会自动递增。一个事务开始时刻，事务会去当前的系统版本号作为当前事务的事务版本号，用来和查询到的每行记录的版本号做比较。</p>\n<table>\n<thead>\n<tr>\n<th>id</th>\n<th>fields …</th>\n<th>create_version</th>\n<th>delete_version</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1</td>\n<td>….</td>\n<td>1</td>\n<td></td>\n</tr>\n<tr>\n<td>2</td>\n<td>….</td>\n<td>2</td>\n<td>3</td>\n</tr>\n</tbody>\n</table>\n<a id=\"more\"></a>\n<h2 id=\"具体实现\"><a href=\"#具体实现\" class=\"headerlink\" title=\"具体实现\"></a>具体实现</h2><p>Repeatable read 隔离级别下，MVCC具体操作：</p>\n<h3 id=\"Select-操作：\"><a href=\"#Select-操作：\" class=\"headerlink\" title=\"Select 操作：\"></a>Select 操作：</h3><p>a. InnoDB 只查找版本号小于当前事务版本号的行（即，行的系统版本号小于或者等于当前事务的系统版本号），以确保当前事务读取到的行，要么是当前事务开始之前就已经存在的行，要么就是当前事务插入或者修改过的行。<br>b. 行的删除版本号要么未定义，要么大于当前事务的版本号。这样可以确保当前事务读取到行，在事务开始之前为被删除。</p>\n<p>只有同事符合上述两个条件的记录，才能被作为查询结果被返回。</p>\n<h3 id=\"Insert-操作：\"><a href=\"#Insert-操作：\" class=\"headerlink\" title=\"Insert 操作：\"></a>Insert 操作：</h3><p>InnoDB为新插入的行保存当前事务的版本号作为行版本号。</p>\n<h3 id=\"Delete-操作：\"><a href=\"#Delete-操作：\" class=\"headerlink\" title=\"Delete 操作：\"></a>Delete 操作：</h3><p>InnoDB为删除的每一行记录保存当前的事务版本号作为行删除标识。</p>\n<h3 id=\"Update-操作：\"><a href=\"#Update-操作：\" class=\"headerlink\" title=\"Update 操作：\"></a>Update 操作：</h3><p>InnoDB会插入一条新纪录，保存当前事务版本号作为改行的行版本号，同事保存当前的事务版本号到原来的行作为行删除标识版本号。</p>\n<h2 id=\"多版本并发控制优缺点\"><a href=\"#多版本并发控制优缺点\" class=\"headerlink\" title=\"多版本并发控制优缺点\"></a>多版本并发控制优缺点</h2><h3 id=\"优点\"><a href=\"#优点\" class=\"headerlink\" title=\"优点\"></a>优点</h3><p>通过两个额外的版本号，能使大多数读操作都可以不用加锁，从而使得查询性能更好。</p>\n<h3 id=\"缺点\"><a href=\"#缺点\" class=\"headerlink\" title=\"缺点\"></a>缺点</h3><p>每行记录多需要做存储两个版本号，需要浪费额外的存储空间。</p>\n<p><strong>TIPS:</strong><br>MVCC，只在Repeatable read 和read committed两个隔离级别下工作。其他两个隔离级别都和MVCC不兼容，因为 read uncommitted总是读取最新的行，而不是符合当前事务版本号的行，而 serializable 则会对所有读取的行都会加锁。</p>\n","excerpt":"<p>MySQL中大多数事务型的存储引擎都不是简单的行级锁。为了提高并发性，他们一般会采用多版本并发控制（MVCC，一种行级锁的变种）来使很多情况下在避免加锁的情况下就实现并发操作，从而是的系统开销更低。</p>\n<p>MySQL的InnoDB存储引擎的MCVV，是通过在每行记录后面保存两个隐藏的列来实现。一个保存行的创建时间，另一个保存过期时间。当然这里所说的时间并不是实际时间，是系统版本号。数据库系统在每开始一个事务，其系统版本号就会自动递增。一个事务开始时刻，事务会去当前的系统版本号作为当前事务的事务版本号，用来和查询到的每行记录的版本号做比较。</p>\n<table>\n<thead>\n<tr>\n<th>id</th>\n<th>fields …</th>\n<th>create_version</th>\n<th>delete_version</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1</td>\n<td>….</td>\n<td>1</td>\n<td></td>\n</tr>\n<tr>\n<td>2</td>\n<td>….</td>\n<td>2</td>\n<td>3</td>\n</tr>\n</tbody>\n</table>","more":"<h2 id=\"具体实现\"><a href=\"#具体实现\" class=\"headerlink\" title=\"具体实现\"></a>具体实现</h2><p>Repeatable read 隔离级别下，MVCC具体操作：</p>\n<h3 id=\"Select-操作：\"><a href=\"#Select-操作：\" class=\"headerlink\" title=\"Select 操作：\"></a>Select 操作：</h3><p>a. InnoDB 只查找版本号小于当前事务版本号的行（即，行的系统版本号小于或者等于当前事务的系统版本号），以确保当前事务读取到的行，要么是当前事务开始之前就已经存在的行，要么就是当前事务插入或者修改过的行。<br>b. 行的删除版本号要么未定义，要么大于当前事务的版本号。这样可以确保当前事务读取到行，在事务开始之前为被删除。</p>\n<p>只有同事符合上述两个条件的记录，才能被作为查询结果被返回。</p>\n<h3 id=\"Insert-操作：\"><a href=\"#Insert-操作：\" class=\"headerlink\" title=\"Insert 操作：\"></a>Insert 操作：</h3><p>InnoDB为新插入的行保存当前事务的版本号作为行版本号。</p>\n<h3 id=\"Delete-操作：\"><a href=\"#Delete-操作：\" class=\"headerlink\" title=\"Delete 操作：\"></a>Delete 操作：</h3><p>InnoDB为删除的每一行记录保存当前的事务版本号作为行删除标识。</p>\n<h3 id=\"Update-操作：\"><a href=\"#Update-操作：\" class=\"headerlink\" title=\"Update 操作：\"></a>Update 操作：</h3><p>InnoDB会插入一条新纪录，保存当前事务版本号作为改行的行版本号，同事保存当前的事务版本号到原来的行作为行删除标识版本号。</p>\n<h2 id=\"多版本并发控制优缺点\"><a href=\"#多版本并发控制优缺点\" class=\"headerlink\" title=\"多版本并发控制优缺点\"></a>多版本并发控制优缺点</h2><h3 id=\"优点\"><a href=\"#优点\" class=\"headerlink\" title=\"优点\"></a>优点</h3><p>通过两个额外的版本号，能使大多数读操作都可以不用加锁，从而使得查询性能更好。</p>\n<h3 id=\"缺点\"><a href=\"#缺点\" class=\"headerlink\" title=\"缺点\"></a>缺点</h3><p>每行记录多需要做存储两个版本号，需要浪费额外的存储空间。</p>\n<p><strong>TIPS:</strong><br>MVCC，只在Repeatable read 和read committed两个隔离级别下工作。其他两个隔离级别都和MVCC不兼容，因为 read uncommitted总是读取最新的行，而不是符合当前事务版本号的行，而 serializable 则会对所有读取的行都会加锁。</p>"},{"title":"Mac下包管理工具homebrew","date":"2016-09-20T15:30:00.000Z","ctime":"2016-09-20T15:30:00.000Z","utime":"2016-09-20T15:30:00.000Z","modif_times":0,"_content":"\n## Homebrew\n\nhomebrew,一个在Mac OS上的软件包管理工具。是一款有Ruby开发的智能包管理系统.\n\n[官网地址](http://brew.sh)\n\n- 安装：\n```bash\n/usr/bin/ruby -e \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)\"\n```\n- 功能：\n> 软件包管理。homebrew会将套件安装到独立目录，并将文件软连接链接到/usr/local\n\n- 命令格式\n```\n$ brew -h\nExample usage:\n  brew search [TEXT|/REGEX/]\n  brew (info|home|options) [FORMULA...]\n  brew install FORMULA...\n  brew update\n  brew upgrade [FORMULA...]\n  brew uninstall FORMULA...\n  brew list [FORMULA...]\nTroubleshooting:\n  brew config\n  brew doctor\n  brew install -vd FORMULA\nBrewing:\n  brew create [URL [--no-fetch]]\n  brew edit [FORMULA...]\n  https://github.com/Homebrew/brew/blob/master/share/doc/homebrew/Formula-Cookbook.md\nFurther help:\n  man brew\n  brew help [COMMAND]\n  brew home\n```\n\n- 示例\n```\n$ brew install wget\n```\n\n\n## brew-cask\n\nbrew-cask,是一套建立在homebrew之上的Mac软件安装命令行工具。其与brew的区别是，后者侧重与软件套件和软件环境的配置安装。\n\n[官网](http://caskrom.github.io)\n\n- 安装：\n```\n$ brew install brew-cask\n```\n\n- 命令格式\n```\n$ brew cask -h\nbrew-cask provides a friendly homebrew-style CLI workflow for the\nadministration of macOS applications distributed as binaries.\nCommands:\n    audit                  verifies installability of Casks\n    cat                    dump raw source of the given Cask to the standard output\n    cleanup                cleans up cached downloads and tracker symlinks\n    create                 creates the given Cask and opens it in an editor\n    doctor                 checks for configuration issues\n    edit                   edits the given Cask\n    fetch                  downloads remote application files to local cache\n    home                   opens the homepage of the given Cask\n    info                   displays information about the given Cask\n    install                installs the given Cask\n    list                   with no args, lists installed Casks; given installed Casks, lists staged files\n    search                 searches all known Casks\n    style                  checks Cask style using RuboCop\n    uninstall              uninstalls the given Cask\n    update                 a synonym for 'brew update'\n    zap                    zaps all files associated with the given Cask\nSee also \"man brew-cask\"\n```\n\n- 示例\n```\n$ brew cask install iterm2\n```\n","source":"_posts/Mac下包管理工具homebrew.md","raw":"---\ntitle: Mac下包管理工具homebrew\ndate: 2016-09-20 23:30:00\nctime: 2016-09-20 23:30:00\nutime: 2016-09-20 23:30:00\nmodif_times: 0\ntags:\n- Mac\n- homebrew\ncategories:\n- Mac\n---\n\n## Homebrew\n\nhomebrew,一个在Mac OS上的软件包管理工具。是一款有Ruby开发的智能包管理系统.\n\n[官网地址](http://brew.sh)\n\n- 安装：\n```bash\n/usr/bin/ruby -e \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)\"\n```\n- 功能：\n> 软件包管理。homebrew会将套件安装到独立目录，并将文件软连接链接到/usr/local\n\n- 命令格式\n```\n$ brew -h\nExample usage:\n  brew search [TEXT|/REGEX/]\n  brew (info|home|options) [FORMULA...]\n  brew install FORMULA...\n  brew update\n  brew upgrade [FORMULA...]\n  brew uninstall FORMULA...\n  brew list [FORMULA...]\nTroubleshooting:\n  brew config\n  brew doctor\n  brew install -vd FORMULA\nBrewing:\n  brew create [URL [--no-fetch]]\n  brew edit [FORMULA...]\n  https://github.com/Homebrew/brew/blob/master/share/doc/homebrew/Formula-Cookbook.md\nFurther help:\n  man brew\n  brew help [COMMAND]\n  brew home\n```\n\n- 示例\n```\n$ brew install wget\n```\n\n\n## brew-cask\n\nbrew-cask,是一套建立在homebrew之上的Mac软件安装命令行工具。其与brew的区别是，后者侧重与软件套件和软件环境的配置安装。\n\n[官网](http://caskrom.github.io)\n\n- 安装：\n```\n$ brew install brew-cask\n```\n\n- 命令格式\n```\n$ brew cask -h\nbrew-cask provides a friendly homebrew-style CLI workflow for the\nadministration of macOS applications distributed as binaries.\nCommands:\n    audit                  verifies installability of Casks\n    cat                    dump raw source of the given Cask to the standard output\n    cleanup                cleans up cached downloads and tracker symlinks\n    create                 creates the given Cask and opens it in an editor\n    doctor                 checks for configuration issues\n    edit                   edits the given Cask\n    fetch                  downloads remote application files to local cache\n    home                   opens the homepage of the given Cask\n    info                   displays information about the given Cask\n    install                installs the given Cask\n    list                   with no args, lists installed Casks; given installed Casks, lists staged files\n    search                 searches all known Casks\n    style                  checks Cask style using RuboCop\n    uninstall              uninstalls the given Cask\n    update                 a synonym for 'brew update'\n    zap                    zaps all files associated with the given Cask\nSee also \"man brew-cask\"\n```\n\n- 示例\n```\n$ brew cask install iterm2\n```\n","slug":"Mac下包管理工具homebrew","published":1,"updated":"2016-09-20T15:09:18.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"city8vnnc000tg29ft7uyow6l","content":"<h2 id=\"Homebrew\"><a href=\"#Homebrew\" class=\"headerlink\" title=\"Homebrew\"></a>Homebrew</h2><p>homebrew,一个在Mac OS上的软件包管理工具。是一款有Ruby开发的智能包管理系统.</p>\n<p><a href=\"http://brew.sh\" target=\"_blank\" rel=\"external\">官网地址</a></p>\n<ul>\n<li><p>安装：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">/usr/bin/ruby <span class=\"_\">-e</span> <span class=\"string\">\"<span class=\"variable\">$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)</span>\"</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>功能：</p>\n<blockquote>\n<p>软件包管理。homebrew会将套件安装到独立目录，并将文件软连接链接到/usr/local</p>\n</blockquote>\n</li>\n<li><p>命令格式</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ brew -h</div><div class=\"line\">Example usage:</div><div class=\"line\">  brew search [TEXT|/REGEX/]</div><div class=\"line\">  brew (info|home|options) [FORMULA...]</div><div class=\"line\">  brew install FORMULA...</div><div class=\"line\">  brew update</div><div class=\"line\">  brew upgrade [FORMULA...]</div><div class=\"line\">  brew uninstall FORMULA...</div><div class=\"line\">  brew list [FORMULA...]</div><div class=\"line\">Troubleshooting:</div><div class=\"line\">  brew config</div><div class=\"line\">  brew doctor</div><div class=\"line\">  brew install -vd FORMULA</div><div class=\"line\">Brewing:</div><div class=\"line\">  brew create [URL [--no-fetch]]</div><div class=\"line\">  brew edit [FORMULA...]</div><div class=\"line\">  https://github.com/Homebrew/brew/blob/master/share/doc/homebrew/Formula-Cookbook.md</div><div class=\"line\">Further help:</div><div class=\"line\">  man brew</div><div class=\"line\">  brew help [COMMAND]</div><div class=\"line\">  brew home</div></pre></td></tr></table></figure>\n</li>\n<li><p>示例</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ brew install wget</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"brew-cask\"><a href=\"#brew-cask\" class=\"headerlink\" title=\"brew-cask\"></a>brew-cask</h2><p>brew-cask,是一套建立在homebrew之上的Mac软件安装命令行工具。其与brew的区别是，后者侧重与软件套件和软件环境的配置安装。</p>\n<p><a href=\"http://caskrom.github.io\" target=\"_blank\" rel=\"external\">官网</a></p>\n<ul>\n<li><p>安装：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ brew install brew-cask</div></pre></td></tr></table></figure>\n</li>\n<li><p>命令格式</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ brew cask -h</div><div class=\"line\">brew-cask provides a friendly homebrew-style CLI workflow for the</div><div class=\"line\">administration of macOS applications distributed as binaries.</div><div class=\"line\">Commands:</div><div class=\"line\">    audit                  verifies installability of Casks</div><div class=\"line\">    cat                    dump raw source of the given Cask to the standard output</div><div class=\"line\">    cleanup                cleans up cached downloads and tracker symlinks</div><div class=\"line\">    create                 creates the given Cask and opens it in an editor</div><div class=\"line\">    doctor                 checks for configuration issues</div><div class=\"line\">    edit                   edits the given Cask</div><div class=\"line\">    fetch                  downloads remote application files to local cache</div><div class=\"line\">    home                   opens the homepage of the given Cask</div><div class=\"line\">    info                   displays information about the given Cask</div><div class=\"line\">    install                installs the given Cask</div><div class=\"line\">    list                   with no args, lists installed Casks; given installed Casks, lists staged files</div><div class=\"line\">    search                 searches all known Casks</div><div class=\"line\">    style                  checks Cask style using RuboCop</div><div class=\"line\">    uninstall              uninstalls the given Cask</div><div class=\"line\">    update                 a synonym for &apos;brew update&apos;</div><div class=\"line\">    zap                    zaps all files associated with the given Cask</div><div class=\"line\">See also &quot;man brew-cask&quot;</div></pre></td></tr></table></figure>\n</li>\n<li><p>示例</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ brew cask install iterm2</div></pre></td></tr></table></figure>\n</li>\n</ul>\n","excerpt":"","more":"<h2 id=\"Homebrew\"><a href=\"#Homebrew\" class=\"headerlink\" title=\"Homebrew\"></a>Homebrew</h2><p>homebrew,一个在Mac OS上的软件包管理工具。是一款有Ruby开发的智能包管理系统.</p>\n<p><a href=\"http://brew.sh\">官网地址</a></p>\n<ul>\n<li><p>安装：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">/usr/bin/ruby <span class=\"_\">-e</span> <span class=\"string\">\"<span class=\"variable\">$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)</span>\"</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>功能：</p>\n<blockquote>\n<p>软件包管理。homebrew会将套件安装到独立目录，并将文件软连接链接到/usr/local</p>\n</blockquote>\n</li>\n<li><p>命令格式</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ brew -h</div><div class=\"line\">Example usage:</div><div class=\"line\">  brew search [TEXT|/REGEX/]</div><div class=\"line\">  brew (info|home|options) [FORMULA...]</div><div class=\"line\">  brew install FORMULA...</div><div class=\"line\">  brew update</div><div class=\"line\">  brew upgrade [FORMULA...]</div><div class=\"line\">  brew uninstall FORMULA...</div><div class=\"line\">  brew list [FORMULA...]</div><div class=\"line\">Troubleshooting:</div><div class=\"line\">  brew config</div><div class=\"line\">  brew doctor</div><div class=\"line\">  brew install -vd FORMULA</div><div class=\"line\">Brewing:</div><div class=\"line\">  brew create [URL [--no-fetch]]</div><div class=\"line\">  brew edit [FORMULA...]</div><div class=\"line\">  https://github.com/Homebrew/brew/blob/master/share/doc/homebrew/Formula-Cookbook.md</div><div class=\"line\">Further help:</div><div class=\"line\">  man brew</div><div class=\"line\">  brew help [COMMAND]</div><div class=\"line\">  brew home</div></pre></td></tr></table></figure>\n</li>\n<li><p>示例</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ brew install wget</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"brew-cask\"><a href=\"#brew-cask\" class=\"headerlink\" title=\"brew-cask\"></a>brew-cask</h2><p>brew-cask,是一套建立在homebrew之上的Mac软件安装命令行工具。其与brew的区别是，后者侧重与软件套件和软件环境的配置安装。</p>\n<p><a href=\"http://caskrom.github.io\">官网</a></p>\n<ul>\n<li><p>安装：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ brew install brew-cask</div></pre></td></tr></table></figure>\n</li>\n<li><p>命令格式</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ brew cask -h</div><div class=\"line\">brew-cask provides a friendly homebrew-style CLI workflow for the</div><div class=\"line\">administration of macOS applications distributed as binaries.</div><div class=\"line\">Commands:</div><div class=\"line\">    audit                  verifies installability of Casks</div><div class=\"line\">    cat                    dump raw source of the given Cask to the standard output</div><div class=\"line\">    cleanup                cleans up cached downloads and tracker symlinks</div><div class=\"line\">    create                 creates the given Cask and opens it in an editor</div><div class=\"line\">    doctor                 checks for configuration issues</div><div class=\"line\">    edit                   edits the given Cask</div><div class=\"line\">    fetch                  downloads remote application files to local cache</div><div class=\"line\">    home                   opens the homepage of the given Cask</div><div class=\"line\">    info                   displays information about the given Cask</div><div class=\"line\">    install                installs the given Cask</div><div class=\"line\">    list                   with no args, lists installed Casks; given installed Casks, lists staged files</div><div class=\"line\">    search                 searches all known Casks</div><div class=\"line\">    style                  checks Cask style using RuboCop</div><div class=\"line\">    uninstall              uninstalls the given Cask</div><div class=\"line\">    update                 a synonym for &apos;brew update&apos;</div><div class=\"line\">    zap                    zaps all files associated with the given Cask</div><div class=\"line\">See also &quot;man brew-cask&quot;</div></pre></td></tr></table></figure>\n</li>\n<li><p>示例</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ brew cask install iterm2</div></pre></td></tr></table></figure>\n</li>\n</ul>\n"},{"title":"Memcached分布式部署算法整理","date":"2016-10-01T12:00:00.000Z","ctime":"2016-10-01T12:00:00.000Z","utime":"2016-10-01T12:00:00.000Z","modif_times":0,"_content":"虽然memcached是一个高性能的缓存服务器，但是单台服务器对于目前大型的web应用来说还是满足不了需求的。那么就需要布置多台的memcached服务器进行分布式部署。那么一个数据应该存储到哪一台服务器就需要一个分布算法来确定。\n\n常见的分布方案有两种，\n> - 普通Hash分布\n> - 一致性Hash分布\n\n<!-- more -->\n\n## 普通Hash分布\n> 俗称哈希取模法，优点是实现简单，但缺点是缺乏灵活性（比如增加一台服务器，那么之前存储的数据的键值和具体的物理机之间的关系就被完全打乱了，即之前存储的数据就完全失效了）。\n\n### 原理：\nH(key) = hash(key)mod K;\n> 假设有K台物理机，对于key为键值的记录，H(key)值即为存储数据的物理机编号。通过这种方式，就将全部数据分配到K台物理机上，而查找某条记录时，使用同样的Hash函数就可以找到对应的物理机。\n\n### 实现(PHP)：\n```php\n<?php\n  $servers = array(\n    array(\"host\" => \"192.168.1.1\",\"port\" => \"11211\"),\n    array(\"host\" => \"192.168.1.2\",\"port\" => \"11211\"),\n  );\n  $key = \"userDatakey\";\n  $value = \"userDataValue\";\n  $mc_ser = new $servers[mhash($key)%2];\n  $mc = new Memcache($servers);\n  $mc->set($key, $value);\n  var_dump($mc->get($key));\n\n  /**\n   * [mhash 首先通过md5把key处理成一个32位的字符串，取其前8个字符。在经过hash算法处理成一个整数并返回。]\n   * @param  {[type]} $key [description]\n   * @return {[type]}      [description]\n   */\n  function mhash($key){\n    $md5 = substr(md5($key), 0, 8);\n    $seed = 31;\n    $hash = 0;\n    for($i=0;$i<8;$i++){\n      $hash = $hash*$seed + ord($md5{$i});\n    }\n    return $hash & 0x7FFFFFFF;\n  }\n```\n通过Hash函数把key转化成整数后，利用这个整数与服务器数量取模，得到其中一台的服务器配置。然后利用这个配置完成memcached服务器的连接操作。这样就完成了对数据的分布式存储。\n\n## 一致性Hash分布\n> 一致性hash分布是算法，是P2P网络和分布式存储中常用到一项技术。是一种当服务器有增删时，对数据影响最小的一种部署方案。\n\n一致性Hash算法实现：\n### 将一个32位整数（0~2^32-1）想象成一个闭环。\n如图，\n![将32位整数想象成一个闭环](http://n.sinaimg.cn/games/3ece443e/20161001/hash_1.png)\n### 通过Hash函数将key处理成整数\n```\n$key1 = mhash(\"key1\");\n$key2 = mhash(\"key2\");\n$key3 = mhash(\"key3\");\n$key4 = mhash(\"key4\");\n```\n将key通过mhash函数处理成整数，让后就可以将之对应到闭环上。如图，\n![4个key通过mhash处理成整数对应到闭环上](http://n.sinaimg.cn/games/3ece443e/20161001/hash_2.png)\n### 将memcached服务器，通过hash服务器所使用的IP地址，也对应到闭环上。\n例如，有三台服务器，IP分别是192.168.1.1、192.168.1.2、192.168.1.3\n```\n$server1 = mhash(\"192.168.1.1\");\n$server2 = mhash(\"192.168.1.2\");\n$server3 = mhash(\"192.168.1.3\");\n```\n如图，\n![将服务器也映射到环上](http://n.sinaimg.cn/games/3ece443e/20161001/hash_server.png)\n\n### 把数据映射到服务器上\n**映射方法：**\n沿着圆环的顺时针方向的key出发，直到遇上一个服务器，将key对应的数据存储到这个服务器上。\n\n如图，\n![把数据映射到服务器上](http://n.sinaimg.cn/games/3ece443e/20161001/hash_3.png)\n\n### 移除服务器\n假设服务器 server2 崩溃了，那么受影响的仅是哪些hash映射值在server1到server2的值。\n\n如图，受影响的只有key2，它将会重新映射到server3服务器上。\n![移除服务器](http://n.sinaimg.cn/games/3ece443e/20161001/hash_4.png)\n\n### 添加服务器\n如果现在需要新添加一台服务器，其IP地址为（192.168.1.4）\n```\n$server4 = mhash(\"192.168.1.4\");\n```\n其在闭环上的映射位置位于如图的位置，那么受影响是hash映射值在其当前的位置和server2的位置之间的key。\n\n如图，受影响的仅为key3，其将会重新映射到server4上。\n![添加服务器](http://n.sinaimg.cn/games/3ece443e/20161001/hash_5.png)\n\n### 实现（PHP）\n```php\n<?php\nclass FlexiHash{\n  private $serverList = array();\n  private $isSorted = false;\n\n  /**\n   * [addServer 通过hash函数计算除服务器的Hash值，通过此hash值定位服务器列表的某个位置，然后将服务器排序标识置为false]\n   * @param {[type]} $server [description]\n   */\n  function addServer($server){\n    $hash = $this->mhash($server);\n\n    if(!isset($this->serverList[$hash])){\n      $this->serverList[$hash] = $server;\n    }\n\n    $this->isSorted = false;\n    return true;\n  }\n\n  /**\n   * [removeServer 跟addServer实现差不多，将server删除，并将排序标识置为false]\n   * @param  {[type]} $server [description]\n   * @return {[type]}         [description]\n   */\n  function removeServer($server){\n    $hash = $this->mhash($server);\n\n    if(!isset($this->serverList[$hash])){\n      unset($this->serverList[$hash]);\n    }\n\n    $this->isSorted = false;\n    return true;\n  }\n\n  /**\n   * [lookup 先计算除key的hash值，然后判断serverList是排序过，如果没有，就先对服务器列表进行倒序排序操作。倒序排序的作用是把服务器列表转换成一个逆时针的圆环。然后遍历服务器列表，找到一个合适的服务器返回]\n   * @param  {[type]} $key [description]\n   * @return {[type]}      [description]\n   */\n  function lookup($key){\n    $hash = $this->mhash($key);\n\n    if(!$this->isSorted){\n      ksort($this->serverList, SORT_NUMERIC);\n      $this->isSorted = true;\n    }\n\n    foreach($this->serverList as $pos => $server){\n      if($hash >= $pos){\n        return $server;\n      }\n    }\n\n    return $this->serverList[count($this->serverList) - 1];\n  }\n\n  /**\n   * [mhash 首先通过md5把key处理成一个32位的字符串，取其前8个字符。在经过hash算法处理成一个整数并返回。]\n   * @param  {[type]} $key [description]\n   * @return {[type]}      [description]\n   */\n  function mhash($key){\n    $md5 = substr(md5($key), 0, 8);\n    $seed = 31;\n    $hash = 0;\n    for($i=0;$i<8;$i++){\n      $hash = $hash*$seed + ord($md5{$i});\n    }\n    return $hash & 0x7FFFFFFF;\n  }\n\n}\n\n```\n测试\n```php\n<?php\n  $hserver = new FlexiHash();\n\n  $hserver->addServer(\"192.168.1.1\");\n  $hserver->addServer(\"192.168.1.2\");\n  $hserver->addServer(\"192.168.1.3\");\n  $hserver->addServer(\"192.168.1.4\");\n  $hserver->addServer(\"192.168.1.5\");\n\n  echo \"save key1 in server:\".$hserver->lookup(\"key1\");\n  echo \"save key2 in server:\".$hserver->lookup(\"key2\");\n  echo \"==============================================;\n\n  $hserver->removeServer(\"192.168.1.4\");\n  echo \"save key1 in server:\".$hserver->lookup(\"key1\");\n  echo \"save key2 in server:\".$hserver->lookup(\"key2\");\n  echo \"==============================================;\n\n  $hserver->addServer(\"192.168.1.6\");\n  echo \"save key1 in server:\".$hserver->lookup(\"key1\");\n  echo \"save key2 in server:\".$hserver->lookup(\"key2\");\n  echo \"==============================================;  \n?>\n```\n通过测试结果可以看出，在增加或者减少memcached服务器的时候，一致性hash算法只会改变很少的一部分数据的存储服务器，从而能够实现最大限度的减少数据丢失的情况。\n\n## 实际应用（PHP）\n在实际应用当中，PHP提供了两种的关于Memcached的扩展，memcache和memcached。两种扩展中都可以设置采用哪种分布方式，我们只需要选择我们要采用的策略并修改配置即可，而不需要我们自己来实现具体的分布算法。\n\n**memcache扩展配置**\n\n控制key到服务器的映射（分布式）策略。 php.ini 配置\n```ini\n[Memcache]\nMemcache.allow_failover = 1\nmemcache.max_failover_attempts = 2\nMemcache.hash_strategy =consistent\nMemcache.hash_function =crc32\n\n```\nMemcache.allow_failover\n> 是否在发生错误时（对用户）透明的转移到其他服务器。\n\nmemcache.max_failover_attempts\n> 定义在写入和获取数据时最多尝试的服务器次数（即：故障转移最大尝试数），仅和 memcache.allow_failover结合使用。\n\nMemcache.hash_strategy\n> 控制key到服务器的映射（分布式）策略。\n\n- consistent，采用一致性hash分布策略实现映射\n- standard，采用普通hash分布策略实现映射\n\nmemcache.hash_function\n> 控制在key-server映射时使用哪个hash函数crc32 标明使用标准CRC32进行hash，fnv则说明使用FNV-1a。\n\n\n**memcached扩展配置**\n```\n<?php\n  $mem = new memcached();\n  $mem->setOption(Memcached::OPT_DISTRIBUTION,Memcached::DISTRIBUTION_CONSISTENT);\n  $mem->setOption(Memcached::OPT_LIBKETAMA_COMPATIBLE,true);\n```\n\nMemcached::OPT_DISTRIBUTION\n> 指定元素key分布到各个服务器的方法。当前支持的方法有余数分步法合一致性hash算法两种。一致性hash算法提供 了更好的分配策略并且在添加服务器到集群时可以最小化缓存丢失。\n>类型: integer, 默认: Memcached::DISTRIBUTION_MODULA.\n\nMemcached::DISTRIBUTION_MODULA\n> 余数分布算法。\n\nMemcached::DISTRIBUTION_CONSISTENT\n> 一致性分布算法(基于libketama).\n\nMemcached::OPT_LIBKETAMA_COMPATIBLE\n> 开启或关闭兼容的libketama类行为。当开启此选项后，元素key的hash算法将会被设置为md5并且分布算法将会 采用带有权重的一致性hash分布。这一点非常有用因为其他基于libketama的客户端（比如python，urby）在同样 的服务端配置下可以透明的访问key。\n>\n> **Note:**\n> 如果你要使用一致性hash算法强烈建议开启此选项，并且这个选项可能在未来的发布版中被设置为默认开启。\n类型: boolean, 默认: FALSE.\n","source":"_posts/Memcached分布式部署算法整理.md","raw":"---\ntitle: Memcached分布式部署算法整理\ndate: 2016-10-01 20:00:00\nctime: 2016-10-01 20:00:00\nutime: 2016-10-01 20:00:00\nmodif_times: 0\ntags:\n- 分布式部署算法\ncategories:\n- Linux\n---\n虽然memcached是一个高性能的缓存服务器，但是单台服务器对于目前大型的web应用来说还是满足不了需求的。那么就需要布置多台的memcached服务器进行分布式部署。那么一个数据应该存储到哪一台服务器就需要一个分布算法来确定。\n\n常见的分布方案有两种，\n> - 普通Hash分布\n> - 一致性Hash分布\n\n<!-- more -->\n\n## 普通Hash分布\n> 俗称哈希取模法，优点是实现简单，但缺点是缺乏灵活性（比如增加一台服务器，那么之前存储的数据的键值和具体的物理机之间的关系就被完全打乱了，即之前存储的数据就完全失效了）。\n\n### 原理：\nH(key) = hash(key)mod K;\n> 假设有K台物理机，对于key为键值的记录，H(key)值即为存储数据的物理机编号。通过这种方式，就将全部数据分配到K台物理机上，而查找某条记录时，使用同样的Hash函数就可以找到对应的物理机。\n\n### 实现(PHP)：\n```php\n<?php\n  $servers = array(\n    array(\"host\" => \"192.168.1.1\",\"port\" => \"11211\"),\n    array(\"host\" => \"192.168.1.2\",\"port\" => \"11211\"),\n  );\n  $key = \"userDatakey\";\n  $value = \"userDataValue\";\n  $mc_ser = new $servers[mhash($key)%2];\n  $mc = new Memcache($servers);\n  $mc->set($key, $value);\n  var_dump($mc->get($key));\n\n  /**\n   * [mhash 首先通过md5把key处理成一个32位的字符串，取其前8个字符。在经过hash算法处理成一个整数并返回。]\n   * @param  {[type]} $key [description]\n   * @return {[type]}      [description]\n   */\n  function mhash($key){\n    $md5 = substr(md5($key), 0, 8);\n    $seed = 31;\n    $hash = 0;\n    for($i=0;$i<8;$i++){\n      $hash = $hash*$seed + ord($md5{$i});\n    }\n    return $hash & 0x7FFFFFFF;\n  }\n```\n通过Hash函数把key转化成整数后，利用这个整数与服务器数量取模，得到其中一台的服务器配置。然后利用这个配置完成memcached服务器的连接操作。这样就完成了对数据的分布式存储。\n\n## 一致性Hash分布\n> 一致性hash分布是算法，是P2P网络和分布式存储中常用到一项技术。是一种当服务器有增删时，对数据影响最小的一种部署方案。\n\n一致性Hash算法实现：\n### 将一个32位整数（0~2^32-1）想象成一个闭环。\n如图，\n![将32位整数想象成一个闭环](http://n.sinaimg.cn/games/3ece443e/20161001/hash_1.png)\n### 通过Hash函数将key处理成整数\n```\n$key1 = mhash(\"key1\");\n$key2 = mhash(\"key2\");\n$key3 = mhash(\"key3\");\n$key4 = mhash(\"key4\");\n```\n将key通过mhash函数处理成整数，让后就可以将之对应到闭环上。如图，\n![4个key通过mhash处理成整数对应到闭环上](http://n.sinaimg.cn/games/3ece443e/20161001/hash_2.png)\n### 将memcached服务器，通过hash服务器所使用的IP地址，也对应到闭环上。\n例如，有三台服务器，IP分别是192.168.1.1、192.168.1.2、192.168.1.3\n```\n$server1 = mhash(\"192.168.1.1\");\n$server2 = mhash(\"192.168.1.2\");\n$server3 = mhash(\"192.168.1.3\");\n```\n如图，\n![将服务器也映射到环上](http://n.sinaimg.cn/games/3ece443e/20161001/hash_server.png)\n\n### 把数据映射到服务器上\n**映射方法：**\n沿着圆环的顺时针方向的key出发，直到遇上一个服务器，将key对应的数据存储到这个服务器上。\n\n如图，\n![把数据映射到服务器上](http://n.sinaimg.cn/games/3ece443e/20161001/hash_3.png)\n\n### 移除服务器\n假设服务器 server2 崩溃了，那么受影响的仅是哪些hash映射值在server1到server2的值。\n\n如图，受影响的只有key2，它将会重新映射到server3服务器上。\n![移除服务器](http://n.sinaimg.cn/games/3ece443e/20161001/hash_4.png)\n\n### 添加服务器\n如果现在需要新添加一台服务器，其IP地址为（192.168.1.4）\n```\n$server4 = mhash(\"192.168.1.4\");\n```\n其在闭环上的映射位置位于如图的位置，那么受影响是hash映射值在其当前的位置和server2的位置之间的key。\n\n如图，受影响的仅为key3，其将会重新映射到server4上。\n![添加服务器](http://n.sinaimg.cn/games/3ece443e/20161001/hash_5.png)\n\n### 实现（PHP）\n```php\n<?php\nclass FlexiHash{\n  private $serverList = array();\n  private $isSorted = false;\n\n  /**\n   * [addServer 通过hash函数计算除服务器的Hash值，通过此hash值定位服务器列表的某个位置，然后将服务器排序标识置为false]\n   * @param {[type]} $server [description]\n   */\n  function addServer($server){\n    $hash = $this->mhash($server);\n\n    if(!isset($this->serverList[$hash])){\n      $this->serverList[$hash] = $server;\n    }\n\n    $this->isSorted = false;\n    return true;\n  }\n\n  /**\n   * [removeServer 跟addServer实现差不多，将server删除，并将排序标识置为false]\n   * @param  {[type]} $server [description]\n   * @return {[type]}         [description]\n   */\n  function removeServer($server){\n    $hash = $this->mhash($server);\n\n    if(!isset($this->serverList[$hash])){\n      unset($this->serverList[$hash]);\n    }\n\n    $this->isSorted = false;\n    return true;\n  }\n\n  /**\n   * [lookup 先计算除key的hash值，然后判断serverList是排序过，如果没有，就先对服务器列表进行倒序排序操作。倒序排序的作用是把服务器列表转换成一个逆时针的圆环。然后遍历服务器列表，找到一个合适的服务器返回]\n   * @param  {[type]} $key [description]\n   * @return {[type]}      [description]\n   */\n  function lookup($key){\n    $hash = $this->mhash($key);\n\n    if(!$this->isSorted){\n      ksort($this->serverList, SORT_NUMERIC);\n      $this->isSorted = true;\n    }\n\n    foreach($this->serverList as $pos => $server){\n      if($hash >= $pos){\n        return $server;\n      }\n    }\n\n    return $this->serverList[count($this->serverList) - 1];\n  }\n\n  /**\n   * [mhash 首先通过md5把key处理成一个32位的字符串，取其前8个字符。在经过hash算法处理成一个整数并返回。]\n   * @param  {[type]} $key [description]\n   * @return {[type]}      [description]\n   */\n  function mhash($key){\n    $md5 = substr(md5($key), 0, 8);\n    $seed = 31;\n    $hash = 0;\n    for($i=0;$i<8;$i++){\n      $hash = $hash*$seed + ord($md5{$i});\n    }\n    return $hash & 0x7FFFFFFF;\n  }\n\n}\n\n```\n测试\n```php\n<?php\n  $hserver = new FlexiHash();\n\n  $hserver->addServer(\"192.168.1.1\");\n  $hserver->addServer(\"192.168.1.2\");\n  $hserver->addServer(\"192.168.1.3\");\n  $hserver->addServer(\"192.168.1.4\");\n  $hserver->addServer(\"192.168.1.5\");\n\n  echo \"save key1 in server:\".$hserver->lookup(\"key1\");\n  echo \"save key2 in server:\".$hserver->lookup(\"key2\");\n  echo \"==============================================;\n\n  $hserver->removeServer(\"192.168.1.4\");\n  echo \"save key1 in server:\".$hserver->lookup(\"key1\");\n  echo \"save key2 in server:\".$hserver->lookup(\"key2\");\n  echo \"==============================================;\n\n  $hserver->addServer(\"192.168.1.6\");\n  echo \"save key1 in server:\".$hserver->lookup(\"key1\");\n  echo \"save key2 in server:\".$hserver->lookup(\"key2\");\n  echo \"==============================================;  \n?>\n```\n通过测试结果可以看出，在增加或者减少memcached服务器的时候，一致性hash算法只会改变很少的一部分数据的存储服务器，从而能够实现最大限度的减少数据丢失的情况。\n\n## 实际应用（PHP）\n在实际应用当中，PHP提供了两种的关于Memcached的扩展，memcache和memcached。两种扩展中都可以设置采用哪种分布方式，我们只需要选择我们要采用的策略并修改配置即可，而不需要我们自己来实现具体的分布算法。\n\n**memcache扩展配置**\n\n控制key到服务器的映射（分布式）策略。 php.ini 配置\n```ini\n[Memcache]\nMemcache.allow_failover = 1\nmemcache.max_failover_attempts = 2\nMemcache.hash_strategy =consistent\nMemcache.hash_function =crc32\n\n```\nMemcache.allow_failover\n> 是否在发生错误时（对用户）透明的转移到其他服务器。\n\nmemcache.max_failover_attempts\n> 定义在写入和获取数据时最多尝试的服务器次数（即：故障转移最大尝试数），仅和 memcache.allow_failover结合使用。\n\nMemcache.hash_strategy\n> 控制key到服务器的映射（分布式）策略。\n\n- consistent，采用一致性hash分布策略实现映射\n- standard，采用普通hash分布策略实现映射\n\nmemcache.hash_function\n> 控制在key-server映射时使用哪个hash函数crc32 标明使用标准CRC32进行hash，fnv则说明使用FNV-1a。\n\n\n**memcached扩展配置**\n```\n<?php\n  $mem = new memcached();\n  $mem->setOption(Memcached::OPT_DISTRIBUTION,Memcached::DISTRIBUTION_CONSISTENT);\n  $mem->setOption(Memcached::OPT_LIBKETAMA_COMPATIBLE,true);\n```\n\nMemcached::OPT_DISTRIBUTION\n> 指定元素key分布到各个服务器的方法。当前支持的方法有余数分步法合一致性hash算法两种。一致性hash算法提供 了更好的分配策略并且在添加服务器到集群时可以最小化缓存丢失。\n>类型: integer, 默认: Memcached::DISTRIBUTION_MODULA.\n\nMemcached::DISTRIBUTION_MODULA\n> 余数分布算法。\n\nMemcached::DISTRIBUTION_CONSISTENT\n> 一致性分布算法(基于libketama).\n\nMemcached::OPT_LIBKETAMA_COMPATIBLE\n> 开启或关闭兼容的libketama类行为。当开启此选项后，元素key的hash算法将会被设置为md5并且分布算法将会 采用带有权重的一致性hash分布。这一点非常有用因为其他基于libketama的客户端（比如python，urby）在同样 的服务端配置下可以透明的访问key。\n>\n> **Note:**\n> 如果你要使用一致性hash算法强烈建议开启此选项，并且这个选项可能在未来的发布版中被设置为默认开启。\n类型: boolean, 默认: FALSE.\n","slug":"Memcached分布式部署算法整理","published":1,"updated":"2016-10-01T10:05:08.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"city8vnne000ug29f0msxum7k","content":"<p>虽然memcached是一个高性能的缓存服务器，但是单台服务器对于目前大型的web应用来说还是满足不了需求的。那么就需要布置多台的memcached服务器进行分布式部署。那么一个数据应该存储到哪一台服务器就需要一个分布算法来确定。</p>\n<p>常见的分布方案有两种，</p>\n<blockquote>\n<ul>\n<li>普通Hash分布</li>\n<li>一致性Hash分布</li>\n</ul>\n</blockquote>\n<a id=\"more\"></a>\n<h2 id=\"普通Hash分布\"><a href=\"#普通Hash分布\" class=\"headerlink\" title=\"普通Hash分布\"></a>普通Hash分布</h2><blockquote>\n<p>俗称哈希取模法，优点是实现简单，但缺点是缺乏灵活性（比如增加一台服务器，那么之前存储的数据的键值和具体的物理机之间的关系就被完全打乱了，即之前存储的数据就完全失效了）。</p>\n</blockquote>\n<h3 id=\"原理：\"><a href=\"#原理：\" class=\"headerlink\" title=\"原理：\"></a>原理：</h3><p>H(key) = hash(key)mod K;</p>\n<blockquote>\n<p>假设有K台物理机，对于key为键值的记录，H(key)值即为存储数据的物理机编号。通过这种方式，就将全部数据分配到K台物理机上，而查找某条记录时，使用同样的Hash函数就可以找到对应的物理机。</p>\n</blockquote>\n<h3 id=\"实现-PHP-：\"><a href=\"#实现-PHP-：\" class=\"headerlink\" title=\"实现(PHP)：\"></a>实现(PHP)：</h3><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;?php</span></div><div class=\"line\">  $servers = <span class=\"keyword\">array</span>(</div><div class=\"line\">    <span class=\"keyword\">array</span>(<span class=\"string\">\"host\"</span> =&gt; <span class=\"string\">\"192.168.1.1\"</span>,<span class=\"string\">\"port\"</span> =&gt; <span class=\"string\">\"11211\"</span>),</div><div class=\"line\">    <span class=\"keyword\">array</span>(<span class=\"string\">\"host\"</span> =&gt; <span class=\"string\">\"192.168.1.2\"</span>,<span class=\"string\">\"port\"</span> =&gt; <span class=\"string\">\"11211\"</span>),</div><div class=\"line\">  );</div><div class=\"line\">  $key = <span class=\"string\">\"userDatakey\"</span>;</div><div class=\"line\">  $value = <span class=\"string\">\"userDataValue\"</span>;</div><div class=\"line\">  $mc_ser = <span class=\"keyword\">new</span> $servers[mhash($key)%<span class=\"number\">2</span>];</div><div class=\"line\">  $mc = <span class=\"keyword\">new</span> Memcache($servers);</div><div class=\"line\">  $mc-&gt;set($key, $value);</div><div class=\"line\">  var_dump($mc-&gt;get($key));</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">/**</span></div><div class=\"line\">   * [mhash 首先通过md5把key处理成一个32位的字符串，取其前8个字符。在经过hash算法处理成一个整数并返回。]</div><div class=\"line\">   * <span class=\"doctag\">@param</span>  &#123;[type]&#125; $key [description]</div><div class=\"line\">   * <span class=\"doctag\">@return</span> &#123;[type]&#125;      [description]</div><div class=\"line\">   */</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">mhash</span><span class=\"params\">($key)</span></span>&#123;</div><div class=\"line\">    $md5 = substr(md5($key), <span class=\"number\">0</span>, <span class=\"number\">8</span>);</div><div class=\"line\">    $seed = <span class=\"number\">31</span>;</div><div class=\"line\">    $hash = <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"keyword\">for</span>($i=<span class=\"number\">0</span>;$i&lt;<span class=\"number\">8</span>;$i++)&#123;</div><div class=\"line\">      $hash = $hash*$seed + ord($md5&#123;$i&#125;);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> $hash &amp; <span class=\"number\">0x7FFFFFFF</span>;</div><div class=\"line\">  &#125;</div></pre></td></tr></table></figure>\n<p>通过Hash函数把key转化成整数后，利用这个整数与服务器数量取模，得到其中一台的服务器配置。然后利用这个配置完成memcached服务器的连接操作。这样就完成了对数据的分布式存储。</p>\n<h2 id=\"一致性Hash分布\"><a href=\"#一致性Hash分布\" class=\"headerlink\" title=\"一致性Hash分布\"></a>一致性Hash分布</h2><blockquote>\n<p>一致性hash分布是算法，是P2P网络和分布式存储中常用到一项技术。是一种当服务器有增删时，对数据影响最小的一种部署方案。</p>\n</blockquote>\n<p>一致性Hash算法实现：</p>\n<h3 id=\"将一个32位整数（0-2-32-1）想象成一个闭环。\"><a href=\"#将一个32位整数（0-2-32-1）想象成一个闭环。\" class=\"headerlink\" title=\"将一个32位整数（0~2^32-1）想象成一个闭环。\"></a>将一个32位整数（0~2^32-1）想象成一个闭环。</h3><p>如图，<br><img src=\"http://n.sinaimg.cn/games/3ece443e/20161001/hash_1.png\" alt=\"将32位整数想象成一个闭环\"></p>\n<h3 id=\"通过Hash函数将key处理成整数\"><a href=\"#通过Hash函数将key处理成整数\" class=\"headerlink\" title=\"通过Hash函数将key处理成整数\"></a>通过Hash函数将key处理成整数</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">$key1 = mhash(&quot;key1&quot;);</div><div class=\"line\">$key2 = mhash(&quot;key2&quot;);</div><div class=\"line\">$key3 = mhash(&quot;key3&quot;);</div><div class=\"line\">$key4 = mhash(&quot;key4&quot;);</div></pre></td></tr></table></figure>\n<p>将key通过mhash函数处理成整数，让后就可以将之对应到闭环上。如图，<br><img src=\"http://n.sinaimg.cn/games/3ece443e/20161001/hash_2.png\" alt=\"4个key通过mhash处理成整数对应到闭环上\"></p>\n<h3 id=\"将memcached服务器，通过hash服务器所使用的IP地址，也对应到闭环上。\"><a href=\"#将memcached服务器，通过hash服务器所使用的IP地址，也对应到闭环上。\" class=\"headerlink\" title=\"将memcached服务器，通过hash服务器所使用的IP地址，也对应到闭环上。\"></a>将memcached服务器，通过hash服务器所使用的IP地址，也对应到闭环上。</h3><p>例如，有三台服务器，IP分别是192.168.1.1、192.168.1.2、192.168.1.3<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">$server1 = mhash(&quot;192.168.1.1&quot;);</div><div class=\"line\">$server2 = mhash(&quot;192.168.1.2&quot;);</div><div class=\"line\">$server3 = mhash(&quot;192.168.1.3&quot;);</div></pre></td></tr></table></figure></p>\n<p>如图，<br><img src=\"http://n.sinaimg.cn/games/3ece443e/20161001/hash_server.png\" alt=\"将服务器也映射到环上\"></p>\n<h3 id=\"把数据映射到服务器上\"><a href=\"#把数据映射到服务器上\" class=\"headerlink\" title=\"把数据映射到服务器上\"></a>把数据映射到服务器上</h3><p><strong>映射方法：</strong><br>沿着圆环的顺时针方向的key出发，直到遇上一个服务器，将key对应的数据存储到这个服务器上。</p>\n<p>如图，<br><img src=\"http://n.sinaimg.cn/games/3ece443e/20161001/hash_3.png\" alt=\"把数据映射到服务器上\"></p>\n<h3 id=\"移除服务器\"><a href=\"#移除服务器\" class=\"headerlink\" title=\"移除服务器\"></a>移除服务器</h3><p>假设服务器 server2 崩溃了，那么受影响的仅是哪些hash映射值在server1到server2的值。</p>\n<p>如图，受影响的只有key2，它将会重新映射到server3服务器上。<br><img src=\"http://n.sinaimg.cn/games/3ece443e/20161001/hash_4.png\" alt=\"移除服务器\"></p>\n<h3 id=\"添加服务器\"><a href=\"#添加服务器\" class=\"headerlink\" title=\"添加服务器\"></a>添加服务器</h3><p>如果现在需要新添加一台服务器，其IP地址为（192.168.1.4）<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$server4 = mhash(&quot;192.168.1.4&quot;);</div></pre></td></tr></table></figure></p>\n<p>其在闭环上的映射位置位于如图的位置，那么受影响是hash映射值在其当前的位置和server2的位置之间的key。</p>\n<p>如图，受影响的仅为key3，其将会重新映射到server4上。<br><img src=\"http://n.sinaimg.cn/games/3ece443e/20161001/hash_5.png\" alt=\"添加服务器\"></p>\n<h3 id=\"实现（PHP）\"><a href=\"#实现（PHP）\" class=\"headerlink\" title=\"实现（PHP）\"></a>实现（PHP）</h3><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;?php</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FlexiHash</span></span>&#123;</div><div class=\"line\">  <span class=\"keyword\">private</span> $serverList = <span class=\"keyword\">array</span>();</div><div class=\"line\">  <span class=\"keyword\">private</span> $isSorted = <span class=\"keyword\">false</span>;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">/**</span></div><div class=\"line\">   * [addServer 通过hash函数计算除服务器的Hash值，通过此hash值定位服务器列表的某个位置，然后将服务器排序标识置为false]</div><div class=\"line\">   * <span class=\"doctag\">@param</span> &#123;[type]&#125; $server [description]</div><div class=\"line\">   */</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">addServer</span><span class=\"params\">($server)</span></span>&#123;</div><div class=\"line\">    $hash = <span class=\"keyword\">$this</span>-&gt;mhash($server);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span>(!<span class=\"keyword\">isset</span>(<span class=\"keyword\">$this</span>-&gt;serverList[$hash]))&#123;</div><div class=\"line\">      <span class=\"keyword\">$this</span>-&gt;serverList[$hash] = $server;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">$this</span>-&gt;isSorted = <span class=\"keyword\">false</span>;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">/**</span></div><div class=\"line\">   * [removeServer 跟addServer实现差不多，将server删除，并将排序标识置为false]</div><div class=\"line\">   * <span class=\"doctag\">@param</span>  &#123;[type]&#125; $server [description]</div><div class=\"line\">   * <span class=\"doctag\">@return</span> &#123;[type]&#125;         [description]</div><div class=\"line\">   */</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">removeServer</span><span class=\"params\">($server)</span></span>&#123;</div><div class=\"line\">    $hash = <span class=\"keyword\">$this</span>-&gt;mhash($server);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span>(!<span class=\"keyword\">isset</span>(<span class=\"keyword\">$this</span>-&gt;serverList[$hash]))&#123;</div><div class=\"line\">      <span class=\"keyword\">unset</span>(<span class=\"keyword\">$this</span>-&gt;serverList[$hash]);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">$this</span>-&gt;isSorted = <span class=\"keyword\">false</span>;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">/**</span></div><div class=\"line\">   * [lookup 先计算除key的hash值，然后判断serverList是排序过，如果没有，就先对服务器列表进行倒序排序操作。倒序排序的作用是把服务器列表转换成一个逆时针的圆环。然后遍历服务器列表，找到一个合适的服务器返回]</div><div class=\"line\">   * <span class=\"doctag\">@param</span>  &#123;[type]&#125; $key [description]</div><div class=\"line\">   * <span class=\"doctag\">@return</span> &#123;[type]&#125;      [description]</div><div class=\"line\">   */</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">lookup</span><span class=\"params\">($key)</span></span>&#123;</div><div class=\"line\">    $hash = <span class=\"keyword\">$this</span>-&gt;mhash($key);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span>(!<span class=\"keyword\">$this</span>-&gt;isSorted)&#123;</div><div class=\"line\">      ksort(<span class=\"keyword\">$this</span>-&gt;serverList, SORT_NUMERIC);</div><div class=\"line\">      <span class=\"keyword\">$this</span>-&gt;isSorted = <span class=\"keyword\">true</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">foreach</span>(<span class=\"keyword\">$this</span>-&gt;serverList <span class=\"keyword\">as</span> $pos =&gt; $server)&#123;</div><div class=\"line\">      <span class=\"keyword\">if</span>($hash &gt;= $pos)&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> $server;</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">$this</span>-&gt;serverList[count(<span class=\"keyword\">$this</span>-&gt;serverList) - <span class=\"number\">1</span>];</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">/**</span></div><div class=\"line\">   * [mhash 首先通过md5把key处理成一个32位的字符串，取其前8个字符。在经过hash算法处理成一个整数并返回。]</div><div class=\"line\">   * <span class=\"doctag\">@param</span>  &#123;[type]&#125; $key [description]</div><div class=\"line\">   * <span class=\"doctag\">@return</span> &#123;[type]&#125;      [description]</div><div class=\"line\">   */</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">mhash</span><span class=\"params\">($key)</span></span>&#123;</div><div class=\"line\">    $md5 = substr(md5($key), <span class=\"number\">0</span>, <span class=\"number\">8</span>);</div><div class=\"line\">    $seed = <span class=\"number\">31</span>;</div><div class=\"line\">    $hash = <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"keyword\">for</span>($i=<span class=\"number\">0</span>;$i&lt;<span class=\"number\">8</span>;$i++)&#123;</div><div class=\"line\">      $hash = $hash*$seed + ord($md5&#123;$i&#125;);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> $hash &amp; <span class=\"number\">0x7FFFFFFF</span>;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>测试<br><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;?php</span></div><div class=\"line\">  $hserver = <span class=\"keyword\">new</span> FlexiHash();</div><div class=\"line\"></div><div class=\"line\">  $hserver-&gt;addServer(<span class=\"string\">\"192.168.1.1\"</span>);</div><div class=\"line\">  $hserver-&gt;addServer(<span class=\"string\">\"192.168.1.2\"</span>);</div><div class=\"line\">  $hserver-&gt;addServer(<span class=\"string\">\"192.168.1.3\"</span>);</div><div class=\"line\">  $hserver-&gt;addServer(<span class=\"string\">\"192.168.1.4\"</span>);</div><div class=\"line\">  $hserver-&gt;addServer(<span class=\"string\">\"192.168.1.5\"</span>);</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">echo</span> <span class=\"string\">\"save key1 in server:\"</span>.$hserver-&gt;lookup(<span class=\"string\">\"key1\"</span>);</div><div class=\"line\">  <span class=\"keyword\">echo</span> <span class=\"string\">\"save key2 in server:\"</span>.$hserver-&gt;lookup(<span class=\"string\">\"key2\"</span>);</div><div class=\"line\">  <span class=\"keyword\">echo</span> <span class=\"string\">\"==============================================;</span></div><div class=\"line\"></div><div class=\"line\">  $hserver-&gt;removeServer(\"<span class=\"number\">192.168</span><span class=\"number\">.1</span><span class=\"number\">.4</span><span class=\"string\">\");</span></div><div class=\"line\">  echo \"save key1 in server:<span class=\"string\">\".$hserver-&gt;lookup(\"</span>key1<span class=\"string\">\");</span></div><div class=\"line\">  echo \"save key2 in server:<span class=\"string\">\".$hserver-&gt;lookup(\"</span>key2<span class=\"string\">\");</span></div><div class=\"line\">  echo \"==============================================;</div><div class=\"line\"></div><div class=\"line\">  $hserver-&gt;addServer(<span class=\"string\">\"192.168.1.6\"</span>);</div><div class=\"line\">  <span class=\"keyword\">echo</span> <span class=\"string\">\"save key1 in server:\"</span>.$hserver-&gt;lookup(<span class=\"string\">\"key1\"</span>);</div><div class=\"line\">  <span class=\"keyword\">echo</span> <span class=\"string\">\"save key2 in server:\"</span>.$hserver-&gt;lookup(<span class=\"string\">\"key2\"</span>);</div><div class=\"line\">  <span class=\"keyword\">echo</span> <span class=\"string\">\"==============================================;  </span></div><div class=\"line\">?&gt;</div></pre></td></tr></table></figure></p>\n<p>通过测试结果可以看出，在增加或者减少memcached服务器的时候，一致性hash算法只会改变很少的一部分数据的存储服务器，从而能够实现最大限度的减少数据丢失的情况。</p>\n<h2 id=\"实际应用（PHP）\"><a href=\"#实际应用（PHP）\" class=\"headerlink\" title=\"实际应用（PHP）\"></a>实际应用（PHP）</h2><p>在实际应用当中，PHP提供了两种的关于Memcached的扩展，memcache和memcached。两种扩展中都可以设置采用哪种分布方式，我们只需要选择我们要采用的策略并修改配置即可，而不需要我们自己来实现具体的分布算法。</p>\n<p><strong>memcache扩展配置</strong></p>\n<p>控制key到服务器的映射（分布式）策略。 php.ini 配置<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">[Memcache]</div><div class=\"line\">Memcache.allow_failover = 1</div><div class=\"line\">memcache.max_failover_attempts = 2</div><div class=\"line\">Memcache.hash_strategy =consistent</div><div class=\"line\">Memcache.hash_function =crc32</div></pre></td></tr></table></figure></p>\n<p>Memcache.allow_failover</p>\n<blockquote>\n<p>是否在发生错误时（对用户）透明的转移到其他服务器。</p>\n</blockquote>\n<p>memcache.max_failover_attempts</p>\n<blockquote>\n<p>定义在写入和获取数据时最多尝试的服务器次数（即：故障转移最大尝试数），仅和 memcache.allow_failover结合使用。</p>\n</blockquote>\n<p>Memcache.hash_strategy</p>\n<blockquote>\n<p>控制key到服务器的映射（分布式）策略。</p>\n</blockquote>\n<ul>\n<li>consistent，采用一致性hash分布策略实现映射</li>\n<li>standard，采用普通hash分布策略实现映射</li>\n</ul>\n<p>memcache.hash_function</p>\n<blockquote>\n<p>控制在key-server映射时使用哪个hash函数crc32 标明使用标准CRC32进行hash，fnv则说明使用FNV-1a。</p>\n</blockquote>\n<p><strong>memcached扩展配置</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;?php</div><div class=\"line\">  $mem = new memcached();</div><div class=\"line\">  $mem-&gt;setOption(Memcached::OPT_DISTRIBUTION,Memcached::DISTRIBUTION_CONSISTENT);</div><div class=\"line\">  $mem-&gt;setOption(Memcached::OPT_LIBKETAMA_COMPATIBLE,true);</div></pre></td></tr></table></figure></p>\n<p>Memcached::OPT_DISTRIBUTION</p>\n<blockquote>\n<p>指定元素key分布到各个服务器的方法。当前支持的方法有余数分步法合一致性hash算法两种。一致性hash算法提供 了更好的分配策略并且在添加服务器到集群时可以最小化缓存丢失。<br>类型: integer, 默认: Memcached::DISTRIBUTION_MODULA.</p>\n</blockquote>\n<p>Memcached::DISTRIBUTION_MODULA</p>\n<blockquote>\n<p>余数分布算法。</p>\n</blockquote>\n<p>Memcached::DISTRIBUTION_CONSISTENT</p>\n<blockquote>\n<p>一致性分布算法(基于libketama).</p>\n</blockquote>\n<p>Memcached::OPT_LIBKETAMA_COMPATIBLE</p>\n<blockquote>\n<p>开启或关闭兼容的libketama类行为。当开启此选项后，元素key的hash算法将会被设置为md5并且分布算法将会 采用带有权重的一致性hash分布。这一点非常有用因为其他基于libketama的客户端（比如python，urby）在同样 的服务端配置下可以透明的访问key。</p>\n<p><strong>Note:</strong><br>如果你要使用一致性hash算法强烈建议开启此选项，并且这个选项可能在未来的发布版中被设置为默认开启。<br>类型: boolean, 默认: FALSE.</p>\n</blockquote>\n","excerpt":"<p>虽然memcached是一个高性能的缓存服务器，但是单台服务器对于目前大型的web应用来说还是满足不了需求的。那么就需要布置多台的memcached服务器进行分布式部署。那么一个数据应该存储到哪一台服务器就需要一个分布算法来确定。</p>\n<p>常见的分布方案有两种，</p>\n<blockquote>\n<ul>\n<li>普通Hash分布</li>\n<li>一致性Hash分布</li>\n</ul>\n</blockquote>","more":"<h2 id=\"普通Hash分布\"><a href=\"#普通Hash分布\" class=\"headerlink\" title=\"普通Hash分布\"></a>普通Hash分布</h2><blockquote>\n<p>俗称哈希取模法，优点是实现简单，但缺点是缺乏灵活性（比如增加一台服务器，那么之前存储的数据的键值和具体的物理机之间的关系就被完全打乱了，即之前存储的数据就完全失效了）。</p>\n</blockquote>\n<h3 id=\"原理：\"><a href=\"#原理：\" class=\"headerlink\" title=\"原理：\"></a>原理：</h3><p>H(key) = hash(key)mod K;</p>\n<blockquote>\n<p>假设有K台物理机，对于key为键值的记录，H(key)值即为存储数据的物理机编号。通过这种方式，就将全部数据分配到K台物理机上，而查找某条记录时，使用同样的Hash函数就可以找到对应的物理机。</p>\n</blockquote>\n<h3 id=\"实现-PHP-：\"><a href=\"#实现-PHP-：\" class=\"headerlink\" title=\"实现(PHP)：\"></a>实现(PHP)：</h3><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;?php</span></div><div class=\"line\">  $servers = <span class=\"keyword\">array</span>(</div><div class=\"line\">    <span class=\"keyword\">array</span>(<span class=\"string\">\"host\"</span> =&gt; <span class=\"string\">\"192.168.1.1\"</span>,<span class=\"string\">\"port\"</span> =&gt; <span class=\"string\">\"11211\"</span>),</div><div class=\"line\">    <span class=\"keyword\">array</span>(<span class=\"string\">\"host\"</span> =&gt; <span class=\"string\">\"192.168.1.2\"</span>,<span class=\"string\">\"port\"</span> =&gt; <span class=\"string\">\"11211\"</span>),</div><div class=\"line\">  );</div><div class=\"line\">  $key = <span class=\"string\">\"userDatakey\"</span>;</div><div class=\"line\">  $value = <span class=\"string\">\"userDataValue\"</span>;</div><div class=\"line\">  $mc_ser = <span class=\"keyword\">new</span> $servers[mhash($key)%<span class=\"number\">2</span>];</div><div class=\"line\">  $mc = <span class=\"keyword\">new</span> Memcache($servers);</div><div class=\"line\">  $mc-&gt;set($key, $value);</div><div class=\"line\">  var_dump($mc-&gt;get($key));</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">/**</div><div class=\"line\">   * [mhash 首先通过md5把key处理成一个32位的字符串，取其前8个字符。在经过hash算法处理成一个整数并返回。]</div><div class=\"line\">   * <span class=\"doctag\">@param</span>  &#123;[type]&#125; $key [description]</div><div class=\"line\">   * <span class=\"doctag\">@return</span> &#123;[type]&#125;      [description]</div><div class=\"line\">   */</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">mhash</span><span class=\"params\">($key)</span></span>&#123;</div><div class=\"line\">    $md5 = substr(md5($key), <span class=\"number\">0</span>, <span class=\"number\">8</span>);</div><div class=\"line\">    $seed = <span class=\"number\">31</span>;</div><div class=\"line\">    $hash = <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"keyword\">for</span>($i=<span class=\"number\">0</span>;$i&lt;<span class=\"number\">8</span>;$i++)&#123;</div><div class=\"line\">      $hash = $hash*$seed + ord($md5&#123;$i&#125;);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> $hash &amp; <span class=\"number\">0x7FFFFFFF</span>;</div><div class=\"line\">  &#125;</div></pre></td></tr></table></figure>\n<p>通过Hash函数把key转化成整数后，利用这个整数与服务器数量取模，得到其中一台的服务器配置。然后利用这个配置完成memcached服务器的连接操作。这样就完成了对数据的分布式存储。</p>\n<h2 id=\"一致性Hash分布\"><a href=\"#一致性Hash分布\" class=\"headerlink\" title=\"一致性Hash分布\"></a>一致性Hash分布</h2><blockquote>\n<p>一致性hash分布是算法，是P2P网络和分布式存储中常用到一项技术。是一种当服务器有增删时，对数据影响最小的一种部署方案。</p>\n</blockquote>\n<p>一致性Hash算法实现：</p>\n<h3 id=\"将一个32位整数（0-2-32-1）想象成一个闭环。\"><a href=\"#将一个32位整数（0-2-32-1）想象成一个闭环。\" class=\"headerlink\" title=\"将一个32位整数（0~2^32-1）想象成一个闭环。\"></a>将一个32位整数（0~2^32-1）想象成一个闭环。</h3><p>如图，<br><img src=\"http://n.sinaimg.cn/games/3ece443e/20161001/hash_1.png\" alt=\"将32位整数想象成一个闭环\"></p>\n<h3 id=\"通过Hash函数将key处理成整数\"><a href=\"#通过Hash函数将key处理成整数\" class=\"headerlink\" title=\"通过Hash函数将key处理成整数\"></a>通过Hash函数将key处理成整数</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">$key1 = mhash(&quot;key1&quot;);</div><div class=\"line\">$key2 = mhash(&quot;key2&quot;);</div><div class=\"line\">$key3 = mhash(&quot;key3&quot;);</div><div class=\"line\">$key4 = mhash(&quot;key4&quot;);</div></pre></td></tr></table></figure>\n<p>将key通过mhash函数处理成整数，让后就可以将之对应到闭环上。如图，<br><img src=\"http://n.sinaimg.cn/games/3ece443e/20161001/hash_2.png\" alt=\"4个key通过mhash处理成整数对应到闭环上\"></p>\n<h3 id=\"将memcached服务器，通过hash服务器所使用的IP地址，也对应到闭环上。\"><a href=\"#将memcached服务器，通过hash服务器所使用的IP地址，也对应到闭环上。\" class=\"headerlink\" title=\"将memcached服务器，通过hash服务器所使用的IP地址，也对应到闭环上。\"></a>将memcached服务器，通过hash服务器所使用的IP地址，也对应到闭环上。</h3><p>例如，有三台服务器，IP分别是192.168.1.1、192.168.1.2、192.168.1.3<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">$server1 = mhash(&quot;192.168.1.1&quot;);</div><div class=\"line\">$server2 = mhash(&quot;192.168.1.2&quot;);</div><div class=\"line\">$server3 = mhash(&quot;192.168.1.3&quot;);</div></pre></td></tr></table></figure></p>\n<p>如图，<br><img src=\"http://n.sinaimg.cn/games/3ece443e/20161001/hash_server.png\" alt=\"将服务器也映射到环上\"></p>\n<h3 id=\"把数据映射到服务器上\"><a href=\"#把数据映射到服务器上\" class=\"headerlink\" title=\"把数据映射到服务器上\"></a>把数据映射到服务器上</h3><p><strong>映射方法：</strong><br>沿着圆环的顺时针方向的key出发，直到遇上一个服务器，将key对应的数据存储到这个服务器上。</p>\n<p>如图，<br><img src=\"http://n.sinaimg.cn/games/3ece443e/20161001/hash_3.png\" alt=\"把数据映射到服务器上\"></p>\n<h3 id=\"移除服务器\"><a href=\"#移除服务器\" class=\"headerlink\" title=\"移除服务器\"></a>移除服务器</h3><p>假设服务器 server2 崩溃了，那么受影响的仅是哪些hash映射值在server1到server2的值。</p>\n<p>如图，受影响的只有key2，它将会重新映射到server3服务器上。<br><img src=\"http://n.sinaimg.cn/games/3ece443e/20161001/hash_4.png\" alt=\"移除服务器\"></p>\n<h3 id=\"添加服务器\"><a href=\"#添加服务器\" class=\"headerlink\" title=\"添加服务器\"></a>添加服务器</h3><p>如果现在需要新添加一台服务器，其IP地址为（192.168.1.4）<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$server4 = mhash(&quot;192.168.1.4&quot;);</div></pre></td></tr></table></figure></p>\n<p>其在闭环上的映射位置位于如图的位置，那么受影响是hash映射值在其当前的位置和server2的位置之间的key。</p>\n<p>如图，受影响的仅为key3，其将会重新映射到server4上。<br><img src=\"http://n.sinaimg.cn/games/3ece443e/20161001/hash_5.png\" alt=\"添加服务器\"></p>\n<h3 id=\"实现（PHP）\"><a href=\"#实现（PHP）\" class=\"headerlink\" title=\"实现（PHP）\"></a>实现（PHP）</h3><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;?php</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FlexiHash</span></span>&#123;</div><div class=\"line\">  <span class=\"keyword\">private</span> $serverList = <span class=\"keyword\">array</span>();</div><div class=\"line\">  <span class=\"keyword\">private</span> $isSorted = <span class=\"keyword\">false</span>;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">/**</div><div class=\"line\">   * [addServer 通过hash函数计算除服务器的Hash值，通过此hash值定位服务器列表的某个位置，然后将服务器排序标识置为false]</div><div class=\"line\">   * <span class=\"doctag\">@param</span> &#123;[type]&#125; $server [description]</div><div class=\"line\">   */</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">addServer</span><span class=\"params\">($server)</span></span>&#123;</div><div class=\"line\">    $hash = <span class=\"keyword\">$this</span>-&gt;mhash($server);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span>(!<span class=\"keyword\">isset</span>(<span class=\"keyword\">$this</span>-&gt;serverList[$hash]))&#123;</div><div class=\"line\">      <span class=\"keyword\">$this</span>-&gt;serverList[$hash] = $server;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">$this</span>-&gt;isSorted = <span class=\"keyword\">false</span>;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">/**</div><div class=\"line\">   * [removeServer 跟addServer实现差不多，将server删除，并将排序标识置为false]</div><div class=\"line\">   * <span class=\"doctag\">@param</span>  &#123;[type]&#125; $server [description]</div><div class=\"line\">   * <span class=\"doctag\">@return</span> &#123;[type]&#125;         [description]</div><div class=\"line\">   */</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">removeServer</span><span class=\"params\">($server)</span></span>&#123;</div><div class=\"line\">    $hash = <span class=\"keyword\">$this</span>-&gt;mhash($server);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span>(!<span class=\"keyword\">isset</span>(<span class=\"keyword\">$this</span>-&gt;serverList[$hash]))&#123;</div><div class=\"line\">      <span class=\"keyword\">unset</span>(<span class=\"keyword\">$this</span>-&gt;serverList[$hash]);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">$this</span>-&gt;isSorted = <span class=\"keyword\">false</span>;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">/**</div><div class=\"line\">   * [lookup 先计算除key的hash值，然后判断serverList是排序过，如果没有，就先对服务器列表进行倒序排序操作。倒序排序的作用是把服务器列表转换成一个逆时针的圆环。然后遍历服务器列表，找到一个合适的服务器返回]</div><div class=\"line\">   * <span class=\"doctag\">@param</span>  &#123;[type]&#125; $key [description]</div><div class=\"line\">   * <span class=\"doctag\">@return</span> &#123;[type]&#125;      [description]</div><div class=\"line\">   */</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">lookup</span><span class=\"params\">($key)</span></span>&#123;</div><div class=\"line\">    $hash = <span class=\"keyword\">$this</span>-&gt;mhash($key);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span>(!<span class=\"keyword\">$this</span>-&gt;isSorted)&#123;</div><div class=\"line\">      ksort(<span class=\"keyword\">$this</span>-&gt;serverList, SORT_NUMERIC);</div><div class=\"line\">      <span class=\"keyword\">$this</span>-&gt;isSorted = <span class=\"keyword\">true</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">foreach</span>(<span class=\"keyword\">$this</span>-&gt;serverList <span class=\"keyword\">as</span> $pos =&gt; $server)&#123;</div><div class=\"line\">      <span class=\"keyword\">if</span>($hash &gt;= $pos)&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> $server;</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">$this</span>-&gt;serverList[count(<span class=\"keyword\">$this</span>-&gt;serverList) - <span class=\"number\">1</span>];</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">/**</div><div class=\"line\">   * [mhash 首先通过md5把key处理成一个32位的字符串，取其前8个字符。在经过hash算法处理成一个整数并返回。]</div><div class=\"line\">   * <span class=\"doctag\">@param</span>  &#123;[type]&#125; $key [description]</div><div class=\"line\">   * <span class=\"doctag\">@return</span> &#123;[type]&#125;      [description]</div><div class=\"line\">   */</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">mhash</span><span class=\"params\">($key)</span></span>&#123;</div><div class=\"line\">    $md5 = substr(md5($key), <span class=\"number\">0</span>, <span class=\"number\">8</span>);</div><div class=\"line\">    $seed = <span class=\"number\">31</span>;</div><div class=\"line\">    $hash = <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"keyword\">for</span>($i=<span class=\"number\">0</span>;$i&lt;<span class=\"number\">8</span>;$i++)&#123;</div><div class=\"line\">      $hash = $hash*$seed + ord($md5&#123;$i&#125;);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> $hash &amp; <span class=\"number\">0x7FFFFFFF</span>;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>测试<br><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;?php</span></div><div class=\"line\">  $hserver = <span class=\"keyword\">new</span> FlexiHash();</div><div class=\"line\"></div><div class=\"line\">  $hserver-&gt;addServer(<span class=\"string\">\"192.168.1.1\"</span>);</div><div class=\"line\">  $hserver-&gt;addServer(<span class=\"string\">\"192.168.1.2\"</span>);</div><div class=\"line\">  $hserver-&gt;addServer(<span class=\"string\">\"192.168.1.3\"</span>);</div><div class=\"line\">  $hserver-&gt;addServer(<span class=\"string\">\"192.168.1.4\"</span>);</div><div class=\"line\">  $hserver-&gt;addServer(<span class=\"string\">\"192.168.1.5\"</span>);</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">echo</span> <span class=\"string\">\"save key1 in server:\"</span>.$hserver-&gt;lookup(<span class=\"string\">\"key1\"</span>);</div><div class=\"line\">  <span class=\"keyword\">echo</span> <span class=\"string\">\"save key2 in server:\"</span>.$hserver-&gt;lookup(<span class=\"string\">\"key2\"</span>);</div><div class=\"line\">  <span class=\"keyword\">echo</span> <span class=\"string\">\"==============================================;</div><div class=\"line\"></div><div class=\"line\">  $hserver-&gt;removeServer(\"</span><span class=\"number\">192.168</span><span class=\"number\">.1</span><span class=\"number\">.4</span><span class=\"string\">\");</div><div class=\"line\">  echo \"</span>save key1 in server:<span class=\"string\">\".$hserver-&gt;lookup(\"</span>key1<span class=\"string\">\");</div><div class=\"line\">  echo \"</span>save key2 in server:<span class=\"string\">\".$hserver-&gt;lookup(\"</span>key2<span class=\"string\">\");</div><div class=\"line\">  echo \"</span>==============================================;</div><div class=\"line\"></div><div class=\"line\">  $hserver-&gt;addServer(<span class=\"string\">\"192.168.1.6\"</span>);</div><div class=\"line\">  <span class=\"keyword\">echo</span> <span class=\"string\">\"save key1 in server:\"</span>.$hserver-&gt;lookup(<span class=\"string\">\"key1\"</span>);</div><div class=\"line\">  <span class=\"keyword\">echo</span> <span class=\"string\">\"save key2 in server:\"</span>.$hserver-&gt;lookup(<span class=\"string\">\"key2\"</span>);</div><div class=\"line\">  <span class=\"keyword\">echo</span> <span class=\"string\">\"==============================================;  </div><div class=\"line\">?&gt;</span></div></pre></td></tr></table></figure></p>\n<p>通过测试结果可以看出，在增加或者减少memcached服务器的时候，一致性hash算法只会改变很少的一部分数据的存储服务器，从而能够实现最大限度的减少数据丢失的情况。</p>\n<h2 id=\"实际应用（PHP）\"><a href=\"#实际应用（PHP）\" class=\"headerlink\" title=\"实际应用（PHP）\"></a>实际应用（PHP）</h2><p>在实际应用当中，PHP提供了两种的关于Memcached的扩展，memcache和memcached。两种扩展中都可以设置采用哪种分布方式，我们只需要选择我们要采用的策略并修改配置即可，而不需要我们自己来实现具体的分布算法。</p>\n<p><strong>memcache扩展配置</strong></p>\n<p>控制key到服务器的映射（分布式）策略。 php.ini 配置<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">[Memcache]</div><div class=\"line\">Memcache.allow_failover = 1</div><div class=\"line\">memcache.max_failover_attempts = 2</div><div class=\"line\">Memcache.hash_strategy =consistent</div><div class=\"line\">Memcache.hash_function =crc32</div></pre></td></tr></table></figure></p>\n<p>Memcache.allow_failover</p>\n<blockquote>\n<p>是否在发生错误时（对用户）透明的转移到其他服务器。</p>\n</blockquote>\n<p>memcache.max_failover_attempts</p>\n<blockquote>\n<p>定义在写入和获取数据时最多尝试的服务器次数（即：故障转移最大尝试数），仅和 memcache.allow_failover结合使用。</p>\n</blockquote>\n<p>Memcache.hash_strategy</p>\n<blockquote>\n<p>控制key到服务器的映射（分布式）策略。</p>\n</blockquote>\n<ul>\n<li>consistent，采用一致性hash分布策略实现映射</li>\n<li>standard，采用普通hash分布策略实现映射</li>\n</ul>\n<p>memcache.hash_function</p>\n<blockquote>\n<p>控制在key-server映射时使用哪个hash函数crc32 标明使用标准CRC32进行hash，fnv则说明使用FNV-1a。</p>\n</blockquote>\n<p><strong>memcached扩展配置</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;?php</div><div class=\"line\">  $mem = new memcached();</div><div class=\"line\">  $mem-&gt;setOption(Memcached::OPT_DISTRIBUTION,Memcached::DISTRIBUTION_CONSISTENT);</div><div class=\"line\">  $mem-&gt;setOption(Memcached::OPT_LIBKETAMA_COMPATIBLE,true);</div></pre></td></tr></table></figure></p>\n<p>Memcached::OPT_DISTRIBUTION</p>\n<blockquote>\n<p>指定元素key分布到各个服务器的方法。当前支持的方法有余数分步法合一致性hash算法两种。一致性hash算法提供 了更好的分配策略并且在添加服务器到集群时可以最小化缓存丢失。<br>类型: integer, 默认: Memcached::DISTRIBUTION_MODULA.</p>\n</blockquote>\n<p>Memcached::DISTRIBUTION_MODULA</p>\n<blockquote>\n<p>余数分布算法。</p>\n</blockquote>\n<p>Memcached::DISTRIBUTION_CONSISTENT</p>\n<blockquote>\n<p>一致性分布算法(基于libketama).</p>\n</blockquote>\n<p>Memcached::OPT_LIBKETAMA_COMPATIBLE</p>\n<blockquote>\n<p>开启或关闭兼容的libketama类行为。当开启此选项后，元素key的hash算法将会被设置为md5并且分布算法将会 采用带有权重的一致性hash分布。这一点非常有用因为其他基于libketama的客户端（比如python，urby）在同样 的服务端配置下可以透明的访问key。</p>\n<p><strong>Note:</strong><br>如果你要使用一致性hash算法强烈建议开启此选项，并且这个选项可能在未来的发布版中被设置为默认开启。<br>类型: boolean, 默认: FALSE.</p>\n</blockquote>"},{"title":"如何查看表的相关信息","date":"2016-09-17T14:00:00.000Z","_content":"\n在文件系统中，MySQL将每个数据库（也被称为schema）保存为数据目录下的一个子目录。在创建表的时候，MySQL会在数据库子目录下创建一个和表同名的 .frm 文件对表的定义。例如，创建一个名为 mytable 的表，MySQL会在 mytable.frm 文件中保存对该表的定义。\n\n通常，我们可以使用 show table status 命令来显示表的相关信息。（MySQL 5.0 + 的版本，也可以查看 INFOMATION_SCHEMA 中对应的表的信息）。\n例如，对于MySQL数据库中的 user 表：\n```sql\nmysql> show table status like 'user' \\G;\n*************************** 1. row ***************************\n           Name: user\n         Engine: MyISAM\n        Version: 10\n     Row_format: Dynamic\n           Rows: 14\n Avg_row_length: 63\n    Data_length: 952\nMax_data_length: 281474976710655\n   Index_length: 2048\n      Data_free: 64\n Auto_increment: NULL\n    Create_time: 2012-12-25 14:23:08\n    Update_time: 2015-08-11 11:17:42\n     Check_time: NULL\n      Collation: utf8_bin\n       Checksum: NULL\n Create_options:\n        Comment: Users and global privileges\n1 row in set (0.01 sec)\n```\n<!-- more -->\n\n下面简单介绍一下每行的含义：\n- Name\n> 表名。\n\n- Engine\n> 表的存储引擎。\n\n- Row_format\n> 行的格式，对于MyISAM表，可选的值为Dynamic、Fixed、Compressed。\n  - Dynamic，表示行的长度是可变的，一般包含可变长度的字段，如varchar、blob等。\n  - Fixed，行的长度是固定的，只包含固定长短的列。\n  - Compressed，只在压缩表中出现，表示是被压缩的。\n\n- Rrows\n> 表中行数，对于MyISAM和其他的一些存储引擎该值是精确的，但对于InnoDB该值只是一个大概值。\n\n- Avg_row_length\n> 平均每行包含的字节数\n\n- Data_length\n> 表数据的大小(单位：字节)\n\n- Max_data_length\n> 表数据的最大容量，该值和存储引擎有关。\n\n- Index_length\n> 索引的大小(单位：字节)\n\n- Data_free\n> 对于MyISAM表示已经分配但是目前没有被使用的空间。这部分空间包括之前删除的行，以及后续可以被Insert利用的行。\n\n- Auto_increment\n> 下一个Auto_increment的值。\n\n- Create_time\n> 表的创建时间。\n\n- Update_time\n> 表数据的最后修改时间。\n\n- Check_time\n> 使用check table命令或者muisamchk 工具最后一次检查表的时间。\n\n- Collation\n> 表的默认字符集和字符列排序规则。\n\n- Checksum\n> 如果启用，保存的是整个表的实时校验和。\n\n- Create_options\n> 创建表时指定的其他选项。\n\n- Comment\n> 该列包含了一些其他的额外信息。对于MyISAM表，保存的是在表创建的时候附带的注释。对于InnoDB表，该值保存的是InnoDB表空间的剩余空间信息。如果是一个视图，该列将会包含『VIEW』字样。\n","source":"_posts/MySQL如何查看表的相关信息.md","raw":"---\ntitle: 如何查看表的相关信息\ndate: 2016-09-17 22:00:00\ntags:\ncategories:\n- MySQL\n---\n\n在文件系统中，MySQL将每个数据库（也被称为schema）保存为数据目录下的一个子目录。在创建表的时候，MySQL会在数据库子目录下创建一个和表同名的 .frm 文件对表的定义。例如，创建一个名为 mytable 的表，MySQL会在 mytable.frm 文件中保存对该表的定义。\n\n通常，我们可以使用 show table status 命令来显示表的相关信息。（MySQL 5.0 + 的版本，也可以查看 INFOMATION_SCHEMA 中对应的表的信息）。\n例如，对于MySQL数据库中的 user 表：\n```sql\nmysql> show table status like 'user' \\G;\n*************************** 1. row ***************************\n           Name: user\n         Engine: MyISAM\n        Version: 10\n     Row_format: Dynamic\n           Rows: 14\n Avg_row_length: 63\n    Data_length: 952\nMax_data_length: 281474976710655\n   Index_length: 2048\n      Data_free: 64\n Auto_increment: NULL\n    Create_time: 2012-12-25 14:23:08\n    Update_time: 2015-08-11 11:17:42\n     Check_time: NULL\n      Collation: utf8_bin\n       Checksum: NULL\n Create_options:\n        Comment: Users and global privileges\n1 row in set (0.01 sec)\n```\n<!-- more -->\n\n下面简单介绍一下每行的含义：\n- Name\n> 表名。\n\n- Engine\n> 表的存储引擎。\n\n- Row_format\n> 行的格式，对于MyISAM表，可选的值为Dynamic、Fixed、Compressed。\n  - Dynamic，表示行的长度是可变的，一般包含可变长度的字段，如varchar、blob等。\n  - Fixed，行的长度是固定的，只包含固定长短的列。\n  - Compressed，只在压缩表中出现，表示是被压缩的。\n\n- Rrows\n> 表中行数，对于MyISAM和其他的一些存储引擎该值是精确的，但对于InnoDB该值只是一个大概值。\n\n- Avg_row_length\n> 平均每行包含的字节数\n\n- Data_length\n> 表数据的大小(单位：字节)\n\n- Max_data_length\n> 表数据的最大容量，该值和存储引擎有关。\n\n- Index_length\n> 索引的大小(单位：字节)\n\n- Data_free\n> 对于MyISAM表示已经分配但是目前没有被使用的空间。这部分空间包括之前删除的行，以及后续可以被Insert利用的行。\n\n- Auto_increment\n> 下一个Auto_increment的值。\n\n- Create_time\n> 表的创建时间。\n\n- Update_time\n> 表数据的最后修改时间。\n\n- Check_time\n> 使用check table命令或者muisamchk 工具最后一次检查表的时间。\n\n- Collation\n> 表的默认字符集和字符列排序规则。\n\n- Checksum\n> 如果启用，保存的是整个表的实时校验和。\n\n- Create_options\n> 创建表时指定的其他选项。\n\n- Comment\n> 该列包含了一些其他的额外信息。对于MyISAM表，保存的是在表创建的时候附带的注释。对于InnoDB表，该值保存的是InnoDB表空间的剩余空间信息。如果是一个视图，该列将会包含『VIEW』字样。\n","slug":"MySQL如何查看表的相关信息","published":1,"updated":"2016-09-17T08:42:49.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"city8vnng000yg29fp9cpsq10","content":"<p>在文件系统中，MySQL将每个数据库（也被称为schema）保存为数据目录下的一个子目录。在创建表的时候，MySQL会在数据库子目录下创建一个和表同名的 .frm 文件对表的定义。例如，创建一个名为 mytable 的表，MySQL会在 mytable.frm 文件中保存对该表的定义。</p>\n<p>通常，我们可以使用 show table status 命令来显示表的相关信息。（MySQL 5.0 + 的版本，也可以查看 INFOMATION_SCHEMA 中对应的表的信息）。<br>例如，对于MySQL数据库中的 user 表：<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\">mysql&gt; show table status like 'user' \\G;</div><div class=\"line\">*************************** 1. row ***************************</div><div class=\"line\">           Name: user</div><div class=\"line\">         Engine: MyISAM</div><div class=\"line\">        Version: 10</div><div class=\"line\">     Row_format: Dynamic</div><div class=\"line\">           Rows: 14</div><div class=\"line\"> Avg_row_length: 63</div><div class=\"line\">    Data_length: 952</div><div class=\"line\">Max_data_length: 281474976710655</div><div class=\"line\">   Index_length: 2048</div><div class=\"line\">      Data_free: 64</div><div class=\"line\"> Auto_increment: NULL</div><div class=\"line\">    Create_time: 2012-12-25 14:23:08</div><div class=\"line\">    Update_time: 2015-08-11 11:17:42</div><div class=\"line\">     Check_time: NULL</div><div class=\"line\">      Collation: utf8_bin</div><div class=\"line\">       Checksum: NULL</div><div class=\"line\"> Create_options:</div><div class=\"line\">        Comment: Users and global privileges</div><div class=\"line\">1 row in set (0.01 sec)</div></pre></td></tr></table></figure></p>\n<a id=\"more\"></a>\n<p>下面简单介绍一下每行的含义：</p>\n<ul>\n<li><p>Name</p>\n<blockquote>\n<p>表名。</p>\n</blockquote>\n</li>\n<li><p>Engine</p>\n<blockquote>\n<p>表的存储引擎。</p>\n</blockquote>\n</li>\n<li><p>Row_format</p>\n<blockquote>\n<p>行的格式，对于MyISAM表，可选的值为Dynamic、Fixed、Compressed。</p>\n<ul>\n<li>Dynamic，表示行的长度是可变的，一般包含可变长度的字段，如varchar、blob等。</li>\n<li>Fixed，行的长度是固定的，只包含固定长短的列。</li>\n<li>Compressed，只在压缩表中出现，表示是被压缩的。</li>\n</ul>\n</blockquote>\n</li>\n<li><p>Rrows</p>\n<blockquote>\n<p>表中行数，对于MyISAM和其他的一些存储引擎该值是精确的，但对于InnoDB该值只是一个大概值。</p>\n</blockquote>\n</li>\n<li><p>Avg_row_length</p>\n<blockquote>\n<p>平均每行包含的字节数</p>\n</blockquote>\n</li>\n<li><p>Data_length</p>\n<blockquote>\n<p>表数据的大小(单位：字节)</p>\n</blockquote>\n</li>\n<li><p>Max_data_length</p>\n<blockquote>\n<p>表数据的最大容量，该值和存储引擎有关。</p>\n</blockquote>\n</li>\n<li><p>Index_length</p>\n<blockquote>\n<p>索引的大小(单位：字节)</p>\n</blockquote>\n</li>\n<li><p>Data_free</p>\n<blockquote>\n<p>对于MyISAM表示已经分配但是目前没有被使用的空间。这部分空间包括之前删除的行，以及后续可以被Insert利用的行。</p>\n</blockquote>\n</li>\n<li><p>Auto_increment</p>\n<blockquote>\n<p>下一个Auto_increment的值。</p>\n</blockquote>\n</li>\n<li><p>Create_time</p>\n<blockquote>\n<p>表的创建时间。</p>\n</blockquote>\n</li>\n<li><p>Update_time</p>\n<blockquote>\n<p>表数据的最后修改时间。</p>\n</blockquote>\n</li>\n<li><p>Check_time</p>\n<blockquote>\n<p>使用check table命令或者muisamchk 工具最后一次检查表的时间。</p>\n</blockquote>\n</li>\n<li><p>Collation</p>\n<blockquote>\n<p>表的默认字符集和字符列排序规则。</p>\n</blockquote>\n</li>\n<li><p>Checksum</p>\n<blockquote>\n<p>如果启用，保存的是整个表的实时校验和。</p>\n</blockquote>\n</li>\n<li><p>Create_options</p>\n<blockquote>\n<p>创建表时指定的其他选项。</p>\n</blockquote>\n</li>\n<li><p>Comment</p>\n<blockquote>\n<p>该列包含了一些其他的额外信息。对于MyISAM表，保存的是在表创建的时候附带的注释。对于InnoDB表，该值保存的是InnoDB表空间的剩余空间信息。如果是一个视图，该列将会包含『VIEW』字样。</p>\n</blockquote>\n</li>\n</ul>\n","excerpt":"<p>在文件系统中，MySQL将每个数据库（也被称为schema）保存为数据目录下的一个子目录。在创建表的时候，MySQL会在数据库子目录下创建一个和表同名的 .frm 文件对表的定义。例如，创建一个名为 mytable 的表，MySQL会在 mytable.frm 文件中保存对该表的定义。</p>\n<p>通常，我们可以使用 show table status 命令来显示表的相关信息。（MySQL 5.0 + 的版本，也可以查看 INFOMATION_SCHEMA 中对应的表的信息）。<br>例如，对于MySQL数据库中的 user 表：<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\">mysql&gt; show table status like 'user' \\G;</div><div class=\"line\">*************************** 1. row ***************************</div><div class=\"line\">           Name: user</div><div class=\"line\">         Engine: MyISAM</div><div class=\"line\">        Version: 10</div><div class=\"line\">     Row_format: Dynamic</div><div class=\"line\">           Rows: 14</div><div class=\"line\"> Avg_row_length: 63</div><div class=\"line\">    Data_length: 952</div><div class=\"line\">Max_data_length: 281474976710655</div><div class=\"line\">   Index_length: 2048</div><div class=\"line\">      Data_free: 64</div><div class=\"line\"> Auto_increment: NULL</div><div class=\"line\">    Create_time: 2012-12-25 14:23:08</div><div class=\"line\">    Update_time: 2015-08-11 11:17:42</div><div class=\"line\">     Check_time: NULL</div><div class=\"line\">      Collation: utf8_bin</div><div class=\"line\">       Checksum: NULL</div><div class=\"line\"> Create_options:</div><div class=\"line\">        Comment: Users and global privileges</div><div class=\"line\">1 row in set (0.01 sec)</div></pre></td></tr></table></figure></p>","more":"<p>下面简单介绍一下每行的含义：</p>\n<ul>\n<li><p>Name</p>\n<blockquote>\n<p>表名。</p>\n</blockquote>\n</li>\n<li><p>Engine</p>\n<blockquote>\n<p>表的存储引擎。</p>\n</blockquote>\n</li>\n<li><p>Row_format</p>\n<blockquote>\n<p>行的格式，对于MyISAM表，可选的值为Dynamic、Fixed、Compressed。</p>\n<ul>\n<li>Dynamic，表示行的长度是可变的，一般包含可变长度的字段，如varchar、blob等。</li>\n<li>Fixed，行的长度是固定的，只包含固定长短的列。</li>\n<li>Compressed，只在压缩表中出现，表示是被压缩的。</li>\n</ul>\n</blockquote>\n</li>\n<li><p>Rrows</p>\n<blockquote>\n<p>表中行数，对于MyISAM和其他的一些存储引擎该值是精确的，但对于InnoDB该值只是一个大概值。</p>\n</blockquote>\n</li>\n<li><p>Avg_row_length</p>\n<blockquote>\n<p>平均每行包含的字节数</p>\n</blockquote>\n</li>\n<li><p>Data_length</p>\n<blockquote>\n<p>表数据的大小(单位：字节)</p>\n</blockquote>\n</li>\n<li><p>Max_data_length</p>\n<blockquote>\n<p>表数据的最大容量，该值和存储引擎有关。</p>\n</blockquote>\n</li>\n<li><p>Index_length</p>\n<blockquote>\n<p>索引的大小(单位：字节)</p>\n</blockquote>\n</li>\n<li><p>Data_free</p>\n<blockquote>\n<p>对于MyISAM表示已经分配但是目前没有被使用的空间。这部分空间包括之前删除的行，以及后续可以被Insert利用的行。</p>\n</blockquote>\n</li>\n<li><p>Auto_increment</p>\n<blockquote>\n<p>下一个Auto_increment的值。</p>\n</blockquote>\n</li>\n<li><p>Create_time</p>\n<blockquote>\n<p>表的创建时间。</p>\n</blockquote>\n</li>\n<li><p>Update_time</p>\n<blockquote>\n<p>表数据的最后修改时间。</p>\n</blockquote>\n</li>\n<li><p>Check_time</p>\n<blockquote>\n<p>使用check table命令或者muisamchk 工具最后一次检查表的时间。</p>\n</blockquote>\n</li>\n<li><p>Collation</p>\n<blockquote>\n<p>表的默认字符集和字符列排序规则。</p>\n</blockquote>\n</li>\n<li><p>Checksum</p>\n<blockquote>\n<p>如果启用，保存的是整个表的实时校验和。</p>\n</blockquote>\n</li>\n<li><p>Create_options</p>\n<blockquote>\n<p>创建表时指定的其他选项。</p>\n</blockquote>\n</li>\n<li><p>Comment</p>\n<blockquote>\n<p>该列包含了一些其他的额外信息。对于MyISAM表，保存的是在表创建的时候附带的注释。对于InnoDB表，该值保存的是InnoDB表空间的剩余空间信息。如果是一个视图，该列将会包含『VIEW』字样。</p>\n</blockquote>\n</li>\n</ul>"},{"title":"MySQL存储引擎概述","date":"2016-09-17T15:00:00.000Z","_content":"\n基于存储引擎在MySQL架构中的地位，在学习和使用MySQL时我们需要对MySQL的各种存储引擎有一个大概的了解。\n并且知道在实际项目中如何选择适合的存储引擎，以及如何实现不同存储引擎的相互切换。\n\n<!-- more -->\n\n## 存储引擎分类\n\n### InnoDB\nInnoDB，是MySQL的默认事务型引擎，也是做重要、使用最广泛的存储引擎。它的性能和自动崩溃恢复特性，使得它在非事务行存储的需求中也很流行。所以除非有非常特别的原因需要使用其他的存储引擎，否则应该优先考虑InnoDB引擎。并且InnoDB作为事务型存储引擎，它通过一些机制和工具可以支持真正的热备份，而MySQL其他的存储引擎则不支持热备份。\n\n### MyISAM\n在MySQL 5.1 及之前的版本，MyISAM是MySQL默认的存储引擎。MyISAM提供大量的特性，包括全文索引、压缩、空间函数（GIS）等，但是MyISAM不支持事务和行级锁，而且有一个毫无疑问的缺陷就是崩溃后无法安全恢复。尽管MyISAM不支持事务、不支持崩溃后的安全恢复，但是对于一些只读的数据，或者表比较小，可以忍受repair（修复）操作，则依然可以继续使用MyISAM。**但请不要默认使用MyISAM，而是应当默认使用InnoDB**\n\n### Archive\nArchive 存储引擎只支持INSERT 和SELECT 操作，在MySQL 5.1之前还不支持索引。Archive会缓存所有的写并利用zlib对插入的行进行压缩，所以比MyISAM表的磁盘I/O更少。但是每次select操作都需要对全表进行扫描，所以Archive表适合日志和数据采集类应用，或者一些需要更快速insert操作的场合下使用。总之，MyISAM是一个针对告诉插入和压缩做了优化的简单引擎。\n\n### Blackhole\nBlackhole引擎没有实现任何的存储机制，他会丢弃所有的插入的数据，不做任何的保存。但是服务器会记录Blackhole表的日志，所以可以用于复制数据库到备库，或者只是简单地记录到日志。这种特殊的存储引擎可以在一些特殊的复制架构和日志审核时发挥所用。\n\n### CSV\nCSV引擎可以将普通的CSV文件作为MySQL的表来处理，但这种表不支持索引。CSV引擎可以在数据运行是拷入或者烤出文件。可以将Excel等电子表格中的数据存储为CSV文件，然后复制到MySQL数据目录下，然后就能在MySQL中打开使用。因此，CSV引擎可以作为一种数据交换的机制，非常有用。\n\n### Federated\nFederated引擎是访问其他MySQL服务器的一个代理，他会创建一个到远程MySQL服务器的的客户端连接，并将查询传输到远程服务器执行，然后提取或者发送需要的数据。但是尽管该引擎看起来提供了一种很好的跨服务器的灵活性，但也经常带来问题。因此默认是禁用的。\n\n### Memory\nMemory表所有的数据都保存在内存中，因此Memory表的访问速度非常的快（至少要比MyISAM快一个数量级），并且不需要磁盘的I/O操作。但是Memory表在系统重启后虽然表结构会保留，但是数据会丢失。\n\nMemory表支持Hash索引，因此查询操作非常快。但是MySQL表采用的表级锁，因此并发写入的性能较低。\n\nMemory表的应用场景：\n- 用于查找（lookup）或者映射（mapping）表。\n- 用于缓存周期性聚合数据的结果。\n- 用于保存数据分析中产生的中间问题。\n\n**Tips：**\n如果MySQL在执行查询的过程中需要使用临时表来保存中间结果，内部使用的临时表就是Memory表。如果中间结果大大超出了Memory表的限制，或者有大量的BLOB或TEXT字段，则临时表会转换成MyISAM表。\n\n### Merge\nMerge引擎是MyISAM的一种变种。Merge表是由多个MyISAM表合并而来的虚拟表。\n\n### NDB\nMySQL服务器、NDB集群引擎、以及分布式的、share-nothing的、容灾的、高可用的NDB数据库组合，被称之为MySQL集群（MySQL Cluster）。\n\n### 其他的第三方存储引擎\nMySQL从07年开始提供了插件式的存储引擎API，从此出现了一系列为不同目的而设计的存储引擎。其中一些已经合并到MySQL服务器，但大多数还是第三方产品或者开源项目。比较有名的有：\n- OLTP类引擎\n- 面向列的存储引擎\n- 社区存储引擎\n\n## 选择合适的存储引擎的考虑因素\n\n不同的应用可能会根据不同的需求而采用不同的存储引擎。那么我们再为应用选择存储引擎时，通常会考虑以下几点：\n- 事务\n引用是否需要事务支持。如果需要，那么InnoDB是目前最稳定且经过验证的选择。如果不需要，并且主要是select和insert操作，那么MyISAM是不错的选择。\n\n- 备份\n如果可以定期的通过关闭服务器来执行备份，那么备份因素就可以忽略。反之，如果需要支持在线热备份，那么选择InnoDB就是基本的要求。\n\n- 崩溃恢复\n相对而言，MyISAM崩溃后发生的数据毁坏的概率要比InnoDB高的多，并且恢复速度也要慢的多。所以，即使不需要事务支持，很多人也会选择InnoDB引擎。\n\n- 特有的特性\n有些应用可能需要一些存储引擎锁独有的特性或者优化，比如依赖聚簇索引的优化，或者需要对地理空间的搜索。\n\n**总之，如无特殊的需求和例外，统统建议选择InnoDB存储引擎。**\n\n## 如何转换表的存储引擎\n有很多中方法可以转换，一般我们会使用以下三种方法：\n### ALTER TABLE\n```sql\nmysql>alter table mytable engine=innodb;\n```\n上述语法可以适应与任何存储引擎。但是当表数据很大时，这种方法将会执行很长时间。MySQL会按行将数据从原表复制到一张新的表中。所以，在繁忙的表上执行此操作要非常小心。\n\n### 导入/导出\n使用mysqldump工具将数据到出到文件，然后修改文件中create table 语句中的存储引擎的选项，（同时注意修改表名，避免在导入的时候将原表删除，造成数据丢失）。然后导入文件到数据库，这样就得到了一个原表的一个全量复制表。\n\n### 创建与查询\n综合第一种方法的高效和第二种的安全。不需要导出整张表的数据，而是先创建一个新的存储引擎的表，然后利用 insert...select语法来导数据。\n```\nmysql>create table innodb_table like myisam_table;\nmysql>alter table innodb_table engine=innodb;\nmysql>insert into innodb_table select * from myisam_table;\n```\n如果数据量大的话，可以考虑分批处理，并使用事务进行提交操作；\n```\nmysql>start transaction;\nmysql>insert into innodb_table select * from myisam_table where id between x and y;\nmysql>commit;\n```\n如果有必要，在操作的时候可以对原表加锁，以确保新表和原表数据一致。\n这样操作之后也会得到一个对原表的全量复制的表，如果需要还可以删除原表。\n\n\n**Tips：**\nPersona Toolkit 提供了一个 pt-online-schema-change的工具（基于Facebook的在线变更技术），可以比较简单、方便的执行上述过程，避免收工操作可能会带来的错误是繁琐。。。。。。\n","source":"_posts/MySQL存储引擎概述.md","raw":"---\ntitle: MySQL存储引擎概述\ndate: 2016-09-17 23:00:00\ntags:\n- 存储引擎\ncategories:\n- MySQL\n---\n\n基于存储引擎在MySQL架构中的地位，在学习和使用MySQL时我们需要对MySQL的各种存储引擎有一个大概的了解。\n并且知道在实际项目中如何选择适合的存储引擎，以及如何实现不同存储引擎的相互切换。\n\n<!-- more -->\n\n## 存储引擎分类\n\n### InnoDB\nInnoDB，是MySQL的默认事务型引擎，也是做重要、使用最广泛的存储引擎。它的性能和自动崩溃恢复特性，使得它在非事务行存储的需求中也很流行。所以除非有非常特别的原因需要使用其他的存储引擎，否则应该优先考虑InnoDB引擎。并且InnoDB作为事务型存储引擎，它通过一些机制和工具可以支持真正的热备份，而MySQL其他的存储引擎则不支持热备份。\n\n### MyISAM\n在MySQL 5.1 及之前的版本，MyISAM是MySQL默认的存储引擎。MyISAM提供大量的特性，包括全文索引、压缩、空间函数（GIS）等，但是MyISAM不支持事务和行级锁，而且有一个毫无疑问的缺陷就是崩溃后无法安全恢复。尽管MyISAM不支持事务、不支持崩溃后的安全恢复，但是对于一些只读的数据，或者表比较小，可以忍受repair（修复）操作，则依然可以继续使用MyISAM。**但请不要默认使用MyISAM，而是应当默认使用InnoDB**\n\n### Archive\nArchive 存储引擎只支持INSERT 和SELECT 操作，在MySQL 5.1之前还不支持索引。Archive会缓存所有的写并利用zlib对插入的行进行压缩，所以比MyISAM表的磁盘I/O更少。但是每次select操作都需要对全表进行扫描，所以Archive表适合日志和数据采集类应用，或者一些需要更快速insert操作的场合下使用。总之，MyISAM是一个针对告诉插入和压缩做了优化的简单引擎。\n\n### Blackhole\nBlackhole引擎没有实现任何的存储机制，他会丢弃所有的插入的数据，不做任何的保存。但是服务器会记录Blackhole表的日志，所以可以用于复制数据库到备库，或者只是简单地记录到日志。这种特殊的存储引擎可以在一些特殊的复制架构和日志审核时发挥所用。\n\n### CSV\nCSV引擎可以将普通的CSV文件作为MySQL的表来处理，但这种表不支持索引。CSV引擎可以在数据运行是拷入或者烤出文件。可以将Excel等电子表格中的数据存储为CSV文件，然后复制到MySQL数据目录下，然后就能在MySQL中打开使用。因此，CSV引擎可以作为一种数据交换的机制，非常有用。\n\n### Federated\nFederated引擎是访问其他MySQL服务器的一个代理，他会创建一个到远程MySQL服务器的的客户端连接，并将查询传输到远程服务器执行，然后提取或者发送需要的数据。但是尽管该引擎看起来提供了一种很好的跨服务器的灵活性，但也经常带来问题。因此默认是禁用的。\n\n### Memory\nMemory表所有的数据都保存在内存中，因此Memory表的访问速度非常的快（至少要比MyISAM快一个数量级），并且不需要磁盘的I/O操作。但是Memory表在系统重启后虽然表结构会保留，但是数据会丢失。\n\nMemory表支持Hash索引，因此查询操作非常快。但是MySQL表采用的表级锁，因此并发写入的性能较低。\n\nMemory表的应用场景：\n- 用于查找（lookup）或者映射（mapping）表。\n- 用于缓存周期性聚合数据的结果。\n- 用于保存数据分析中产生的中间问题。\n\n**Tips：**\n如果MySQL在执行查询的过程中需要使用临时表来保存中间结果，内部使用的临时表就是Memory表。如果中间结果大大超出了Memory表的限制，或者有大量的BLOB或TEXT字段，则临时表会转换成MyISAM表。\n\n### Merge\nMerge引擎是MyISAM的一种变种。Merge表是由多个MyISAM表合并而来的虚拟表。\n\n### NDB\nMySQL服务器、NDB集群引擎、以及分布式的、share-nothing的、容灾的、高可用的NDB数据库组合，被称之为MySQL集群（MySQL Cluster）。\n\n### 其他的第三方存储引擎\nMySQL从07年开始提供了插件式的存储引擎API，从此出现了一系列为不同目的而设计的存储引擎。其中一些已经合并到MySQL服务器，但大多数还是第三方产品或者开源项目。比较有名的有：\n- OLTP类引擎\n- 面向列的存储引擎\n- 社区存储引擎\n\n## 选择合适的存储引擎的考虑因素\n\n不同的应用可能会根据不同的需求而采用不同的存储引擎。那么我们再为应用选择存储引擎时，通常会考虑以下几点：\n- 事务\n引用是否需要事务支持。如果需要，那么InnoDB是目前最稳定且经过验证的选择。如果不需要，并且主要是select和insert操作，那么MyISAM是不错的选择。\n\n- 备份\n如果可以定期的通过关闭服务器来执行备份，那么备份因素就可以忽略。反之，如果需要支持在线热备份，那么选择InnoDB就是基本的要求。\n\n- 崩溃恢复\n相对而言，MyISAM崩溃后发生的数据毁坏的概率要比InnoDB高的多，并且恢复速度也要慢的多。所以，即使不需要事务支持，很多人也会选择InnoDB引擎。\n\n- 特有的特性\n有些应用可能需要一些存储引擎锁独有的特性或者优化，比如依赖聚簇索引的优化，或者需要对地理空间的搜索。\n\n**总之，如无特殊的需求和例外，统统建议选择InnoDB存储引擎。**\n\n## 如何转换表的存储引擎\n有很多中方法可以转换，一般我们会使用以下三种方法：\n### ALTER TABLE\n```sql\nmysql>alter table mytable engine=innodb;\n```\n上述语法可以适应与任何存储引擎。但是当表数据很大时，这种方法将会执行很长时间。MySQL会按行将数据从原表复制到一张新的表中。所以，在繁忙的表上执行此操作要非常小心。\n\n### 导入/导出\n使用mysqldump工具将数据到出到文件，然后修改文件中create table 语句中的存储引擎的选项，（同时注意修改表名，避免在导入的时候将原表删除，造成数据丢失）。然后导入文件到数据库，这样就得到了一个原表的一个全量复制表。\n\n### 创建与查询\n综合第一种方法的高效和第二种的安全。不需要导出整张表的数据，而是先创建一个新的存储引擎的表，然后利用 insert...select语法来导数据。\n```\nmysql>create table innodb_table like myisam_table;\nmysql>alter table innodb_table engine=innodb;\nmysql>insert into innodb_table select * from myisam_table;\n```\n如果数据量大的话，可以考虑分批处理，并使用事务进行提交操作；\n```\nmysql>start transaction;\nmysql>insert into innodb_table select * from myisam_table where id between x and y;\nmysql>commit;\n```\n如果有必要，在操作的时候可以对原表加锁，以确保新表和原表数据一致。\n这样操作之后也会得到一个对原表的全量复制的表，如果需要还可以删除原表。\n\n\n**Tips：**\nPersona Toolkit 提供了一个 pt-online-schema-change的工具（基于Facebook的在线变更技术），可以比较简单、方便的执行上述过程，避免收工操作可能会带来的错误是繁琐。。。。。。\n","slug":"MySQL存储引擎概述","published":1,"updated":"2016-09-17T15:06:38.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"city8vnnh0010g29f22yypom7","content":"<p>基于存储引擎在MySQL架构中的地位，在学习和使用MySQL时我们需要对MySQL的各种存储引擎有一个大概的了解。<br>并且知道在实际项目中如何选择适合的存储引擎，以及如何实现不同存储引擎的相互切换。</p>\n<a id=\"more\"></a>\n<h2 id=\"存储引擎分类\"><a href=\"#存储引擎分类\" class=\"headerlink\" title=\"存储引擎分类\"></a>存储引擎分类</h2><h3 id=\"InnoDB\"><a href=\"#InnoDB\" class=\"headerlink\" title=\"InnoDB\"></a>InnoDB</h3><p>InnoDB，是MySQL的默认事务型引擎，也是做重要、使用最广泛的存储引擎。它的性能和自动崩溃恢复特性，使得它在非事务行存储的需求中也很流行。所以除非有非常特别的原因需要使用其他的存储引擎，否则应该优先考虑InnoDB引擎。并且InnoDB作为事务型存储引擎，它通过一些机制和工具可以支持真正的热备份，而MySQL其他的存储引擎则不支持热备份。</p>\n<h3 id=\"MyISAM\"><a href=\"#MyISAM\" class=\"headerlink\" title=\"MyISAM\"></a>MyISAM</h3><p>在MySQL 5.1 及之前的版本，MyISAM是MySQL默认的存储引擎。MyISAM提供大量的特性，包括全文索引、压缩、空间函数（GIS）等，但是MyISAM不支持事务和行级锁，而且有一个毫无疑问的缺陷就是崩溃后无法安全恢复。尽管MyISAM不支持事务、不支持崩溃后的安全恢复，但是对于一些只读的数据，或者表比较小，可以忍受repair（修复）操作，则依然可以继续使用MyISAM。<strong>但请不要默认使用MyISAM，而是应当默认使用InnoDB</strong></p>\n<h3 id=\"Archive\"><a href=\"#Archive\" class=\"headerlink\" title=\"Archive\"></a>Archive</h3><p>Archive 存储引擎只支持INSERT 和SELECT 操作，在MySQL 5.1之前还不支持索引。Archive会缓存所有的写并利用zlib对插入的行进行压缩，所以比MyISAM表的磁盘I/O更少。但是每次select操作都需要对全表进行扫描，所以Archive表适合日志和数据采集类应用，或者一些需要更快速insert操作的场合下使用。总之，MyISAM是一个针对告诉插入和压缩做了优化的简单引擎。</p>\n<h3 id=\"Blackhole\"><a href=\"#Blackhole\" class=\"headerlink\" title=\"Blackhole\"></a>Blackhole</h3><p>Blackhole引擎没有实现任何的存储机制，他会丢弃所有的插入的数据，不做任何的保存。但是服务器会记录Blackhole表的日志，所以可以用于复制数据库到备库，或者只是简单地记录到日志。这种特殊的存储引擎可以在一些特殊的复制架构和日志审核时发挥所用。</p>\n<h3 id=\"CSV\"><a href=\"#CSV\" class=\"headerlink\" title=\"CSV\"></a>CSV</h3><p>CSV引擎可以将普通的CSV文件作为MySQL的表来处理，但这种表不支持索引。CSV引擎可以在数据运行是拷入或者烤出文件。可以将Excel等电子表格中的数据存储为CSV文件，然后复制到MySQL数据目录下，然后就能在MySQL中打开使用。因此，CSV引擎可以作为一种数据交换的机制，非常有用。</p>\n<h3 id=\"Federated\"><a href=\"#Federated\" class=\"headerlink\" title=\"Federated\"></a>Federated</h3><p>Federated引擎是访问其他MySQL服务器的一个代理，他会创建一个到远程MySQL服务器的的客户端连接，并将查询传输到远程服务器执行，然后提取或者发送需要的数据。但是尽管该引擎看起来提供了一种很好的跨服务器的灵活性，但也经常带来问题。因此默认是禁用的。</p>\n<h3 id=\"Memory\"><a href=\"#Memory\" class=\"headerlink\" title=\"Memory\"></a>Memory</h3><p>Memory表所有的数据都保存在内存中，因此Memory表的访问速度非常的快（至少要比MyISAM快一个数量级），并且不需要磁盘的I/O操作。但是Memory表在系统重启后虽然表结构会保留，但是数据会丢失。</p>\n<p>Memory表支持Hash索引，因此查询操作非常快。但是MySQL表采用的表级锁，因此并发写入的性能较低。</p>\n<p>Memory表的应用场景：</p>\n<ul>\n<li>用于查找（lookup）或者映射（mapping）表。</li>\n<li>用于缓存周期性聚合数据的结果。</li>\n<li>用于保存数据分析中产生的中间问题。</li>\n</ul>\n<p><strong>Tips：</strong><br>如果MySQL在执行查询的过程中需要使用临时表来保存中间结果，内部使用的临时表就是Memory表。如果中间结果大大超出了Memory表的限制，或者有大量的BLOB或TEXT字段，则临时表会转换成MyISAM表。</p>\n<h3 id=\"Merge\"><a href=\"#Merge\" class=\"headerlink\" title=\"Merge\"></a>Merge</h3><p>Merge引擎是MyISAM的一种变种。Merge表是由多个MyISAM表合并而来的虚拟表。</p>\n<h3 id=\"NDB\"><a href=\"#NDB\" class=\"headerlink\" title=\"NDB\"></a>NDB</h3><p>MySQL服务器、NDB集群引擎、以及分布式的、share-nothing的、容灾的、高可用的NDB数据库组合，被称之为MySQL集群（MySQL Cluster）。</p>\n<h3 id=\"其他的第三方存储引擎\"><a href=\"#其他的第三方存储引擎\" class=\"headerlink\" title=\"其他的第三方存储引擎\"></a>其他的第三方存储引擎</h3><p>MySQL从07年开始提供了插件式的存储引擎API，从此出现了一系列为不同目的而设计的存储引擎。其中一些已经合并到MySQL服务器，但大多数还是第三方产品或者开源项目。比较有名的有：</p>\n<ul>\n<li>OLTP类引擎</li>\n<li>面向列的存储引擎</li>\n<li>社区存储引擎</li>\n</ul>\n<h2 id=\"选择合适的存储引擎的考虑因素\"><a href=\"#选择合适的存储引擎的考虑因素\" class=\"headerlink\" title=\"选择合适的存储引擎的考虑因素\"></a>选择合适的存储引擎的考虑因素</h2><p>不同的应用可能会根据不同的需求而采用不同的存储引擎。那么我们再为应用选择存储引擎时，通常会考虑以下几点：</p>\n<ul>\n<li><p>事务<br>引用是否需要事务支持。如果需要，那么InnoDB是目前最稳定且经过验证的选择。如果不需要，并且主要是select和insert操作，那么MyISAM是不错的选择。</p>\n</li>\n<li><p>备份<br>如果可以定期的通过关闭服务器来执行备份，那么备份因素就可以忽略。反之，如果需要支持在线热备份，那么选择InnoDB就是基本的要求。</p>\n</li>\n<li><p>崩溃恢复<br>相对而言，MyISAM崩溃后发生的数据毁坏的概率要比InnoDB高的多，并且恢复速度也要慢的多。所以，即使不需要事务支持，很多人也会选择InnoDB引擎。</p>\n</li>\n<li><p>特有的特性<br>有些应用可能需要一些存储引擎锁独有的特性或者优化，比如依赖聚簇索引的优化，或者需要对地理空间的搜索。</p>\n</li>\n</ul>\n<p><strong>总之，如无特殊的需求和例外，统统建议选择InnoDB存储引擎。</strong></p>\n<h2 id=\"如何转换表的存储引擎\"><a href=\"#如何转换表的存储引擎\" class=\"headerlink\" title=\"如何转换表的存储引擎\"></a>如何转换表的存储引擎</h2><p>有很多中方法可以转换，一般我们会使用以下三种方法：</p>\n<h3 id=\"ALTER-TABLE\"><a href=\"#ALTER-TABLE\" class=\"headerlink\" title=\"ALTER TABLE\"></a>ALTER TABLE</h3><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">mysql&gt;alter table mytable engine=innodb;</div></pre></td></tr></table></figure>\n<p>上述语法可以适应与任何存储引擎。但是当表数据很大时，这种方法将会执行很长时间。MySQL会按行将数据从原表复制到一张新的表中。所以，在繁忙的表上执行此操作要非常小心。</p>\n<h3 id=\"导入-导出\"><a href=\"#导入-导出\" class=\"headerlink\" title=\"导入/导出\"></a>导入/导出</h3><p>使用mysqldump工具将数据到出到文件，然后修改文件中create table 语句中的存储引擎的选项，（同时注意修改表名，避免在导入的时候将原表删除，造成数据丢失）。然后导入文件到数据库，这样就得到了一个原表的一个全量复制表。</p>\n<h3 id=\"创建与查询\"><a href=\"#创建与查询\" class=\"headerlink\" title=\"创建与查询\"></a>创建与查询</h3><p>综合第一种方法的高效和第二种的安全。不需要导出整张表的数据，而是先创建一个新的存储引擎的表，然后利用 insert…select语法来导数据。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">mysql&gt;create table innodb_table like myisam_table;</div><div class=\"line\">mysql&gt;alter table innodb_table engine=innodb;</div><div class=\"line\">mysql&gt;insert into innodb_table select * from myisam_table;</div></pre></td></tr></table></figure></p>\n<p>如果数据量大的话，可以考虑分批处理，并使用事务进行提交操作；<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">mysql&gt;start transaction;</div><div class=\"line\">mysql&gt;insert into innodb_table select * from myisam_table where id between x and y;</div><div class=\"line\">mysql&gt;commit;</div></pre></td></tr></table></figure></p>\n<p>如果有必要，在操作的时候可以对原表加锁，以确保新表和原表数据一致。<br>这样操作之后也会得到一个对原表的全量复制的表，如果需要还可以删除原表。</p>\n<p><strong>Tips：</strong><br>Persona Toolkit 提供了一个 pt-online-schema-change的工具（基于Facebook的在线变更技术），可以比较简单、方便的执行上述过程，避免收工操作可能会带来的错误是繁琐。。。。。。</p>\n","excerpt":"<p>基于存储引擎在MySQL架构中的地位，在学习和使用MySQL时我们需要对MySQL的各种存储引擎有一个大概的了解。<br>并且知道在实际项目中如何选择适合的存储引擎，以及如何实现不同存储引擎的相互切换。</p>","more":"<h2 id=\"存储引擎分类\"><a href=\"#存储引擎分类\" class=\"headerlink\" title=\"存储引擎分类\"></a>存储引擎分类</h2><h3 id=\"InnoDB\"><a href=\"#InnoDB\" class=\"headerlink\" title=\"InnoDB\"></a>InnoDB</h3><p>InnoDB，是MySQL的默认事务型引擎，也是做重要、使用最广泛的存储引擎。它的性能和自动崩溃恢复特性，使得它在非事务行存储的需求中也很流行。所以除非有非常特别的原因需要使用其他的存储引擎，否则应该优先考虑InnoDB引擎。并且InnoDB作为事务型存储引擎，它通过一些机制和工具可以支持真正的热备份，而MySQL其他的存储引擎则不支持热备份。</p>\n<h3 id=\"MyISAM\"><a href=\"#MyISAM\" class=\"headerlink\" title=\"MyISAM\"></a>MyISAM</h3><p>在MySQL 5.1 及之前的版本，MyISAM是MySQL默认的存储引擎。MyISAM提供大量的特性，包括全文索引、压缩、空间函数（GIS）等，但是MyISAM不支持事务和行级锁，而且有一个毫无疑问的缺陷就是崩溃后无法安全恢复。尽管MyISAM不支持事务、不支持崩溃后的安全恢复，但是对于一些只读的数据，或者表比较小，可以忍受repair（修复）操作，则依然可以继续使用MyISAM。<strong>但请不要默认使用MyISAM，而是应当默认使用InnoDB</strong></p>\n<h3 id=\"Archive\"><a href=\"#Archive\" class=\"headerlink\" title=\"Archive\"></a>Archive</h3><p>Archive 存储引擎只支持INSERT 和SELECT 操作，在MySQL 5.1之前还不支持索引。Archive会缓存所有的写并利用zlib对插入的行进行压缩，所以比MyISAM表的磁盘I/O更少。但是每次select操作都需要对全表进行扫描，所以Archive表适合日志和数据采集类应用，或者一些需要更快速insert操作的场合下使用。总之，MyISAM是一个针对告诉插入和压缩做了优化的简单引擎。</p>\n<h3 id=\"Blackhole\"><a href=\"#Blackhole\" class=\"headerlink\" title=\"Blackhole\"></a>Blackhole</h3><p>Blackhole引擎没有实现任何的存储机制，他会丢弃所有的插入的数据，不做任何的保存。但是服务器会记录Blackhole表的日志，所以可以用于复制数据库到备库，或者只是简单地记录到日志。这种特殊的存储引擎可以在一些特殊的复制架构和日志审核时发挥所用。</p>\n<h3 id=\"CSV\"><a href=\"#CSV\" class=\"headerlink\" title=\"CSV\"></a>CSV</h3><p>CSV引擎可以将普通的CSV文件作为MySQL的表来处理，但这种表不支持索引。CSV引擎可以在数据运行是拷入或者烤出文件。可以将Excel等电子表格中的数据存储为CSV文件，然后复制到MySQL数据目录下，然后就能在MySQL中打开使用。因此，CSV引擎可以作为一种数据交换的机制，非常有用。</p>\n<h3 id=\"Federated\"><a href=\"#Federated\" class=\"headerlink\" title=\"Federated\"></a>Federated</h3><p>Federated引擎是访问其他MySQL服务器的一个代理，他会创建一个到远程MySQL服务器的的客户端连接，并将查询传输到远程服务器执行，然后提取或者发送需要的数据。但是尽管该引擎看起来提供了一种很好的跨服务器的灵活性，但也经常带来问题。因此默认是禁用的。</p>\n<h3 id=\"Memory\"><a href=\"#Memory\" class=\"headerlink\" title=\"Memory\"></a>Memory</h3><p>Memory表所有的数据都保存在内存中，因此Memory表的访问速度非常的快（至少要比MyISAM快一个数量级），并且不需要磁盘的I/O操作。但是Memory表在系统重启后虽然表结构会保留，但是数据会丢失。</p>\n<p>Memory表支持Hash索引，因此查询操作非常快。但是MySQL表采用的表级锁，因此并发写入的性能较低。</p>\n<p>Memory表的应用场景：</p>\n<ul>\n<li>用于查找（lookup）或者映射（mapping）表。</li>\n<li>用于缓存周期性聚合数据的结果。</li>\n<li>用于保存数据分析中产生的中间问题。</li>\n</ul>\n<p><strong>Tips：</strong><br>如果MySQL在执行查询的过程中需要使用临时表来保存中间结果，内部使用的临时表就是Memory表。如果中间结果大大超出了Memory表的限制，或者有大量的BLOB或TEXT字段，则临时表会转换成MyISAM表。</p>\n<h3 id=\"Merge\"><a href=\"#Merge\" class=\"headerlink\" title=\"Merge\"></a>Merge</h3><p>Merge引擎是MyISAM的一种变种。Merge表是由多个MyISAM表合并而来的虚拟表。</p>\n<h3 id=\"NDB\"><a href=\"#NDB\" class=\"headerlink\" title=\"NDB\"></a>NDB</h3><p>MySQL服务器、NDB集群引擎、以及分布式的、share-nothing的、容灾的、高可用的NDB数据库组合，被称之为MySQL集群（MySQL Cluster）。</p>\n<h3 id=\"其他的第三方存储引擎\"><a href=\"#其他的第三方存储引擎\" class=\"headerlink\" title=\"其他的第三方存储引擎\"></a>其他的第三方存储引擎</h3><p>MySQL从07年开始提供了插件式的存储引擎API，从此出现了一系列为不同目的而设计的存储引擎。其中一些已经合并到MySQL服务器，但大多数还是第三方产品或者开源项目。比较有名的有：</p>\n<ul>\n<li>OLTP类引擎</li>\n<li>面向列的存储引擎</li>\n<li>社区存储引擎</li>\n</ul>\n<h2 id=\"选择合适的存储引擎的考虑因素\"><a href=\"#选择合适的存储引擎的考虑因素\" class=\"headerlink\" title=\"选择合适的存储引擎的考虑因素\"></a>选择合适的存储引擎的考虑因素</h2><p>不同的应用可能会根据不同的需求而采用不同的存储引擎。那么我们再为应用选择存储引擎时，通常会考虑以下几点：</p>\n<ul>\n<li><p>事务<br>引用是否需要事务支持。如果需要，那么InnoDB是目前最稳定且经过验证的选择。如果不需要，并且主要是select和insert操作，那么MyISAM是不错的选择。</p>\n</li>\n<li><p>备份<br>如果可以定期的通过关闭服务器来执行备份，那么备份因素就可以忽略。反之，如果需要支持在线热备份，那么选择InnoDB就是基本的要求。</p>\n</li>\n<li><p>崩溃恢复<br>相对而言，MyISAM崩溃后发生的数据毁坏的概率要比InnoDB高的多，并且恢复速度也要慢的多。所以，即使不需要事务支持，很多人也会选择InnoDB引擎。</p>\n</li>\n<li><p>特有的特性<br>有些应用可能需要一些存储引擎锁独有的特性或者优化，比如依赖聚簇索引的优化，或者需要对地理空间的搜索。</p>\n</li>\n</ul>\n<p><strong>总之，如无特殊的需求和例外，统统建议选择InnoDB存储引擎。</strong></p>\n<h2 id=\"如何转换表的存储引擎\"><a href=\"#如何转换表的存储引擎\" class=\"headerlink\" title=\"如何转换表的存储引擎\"></a>如何转换表的存储引擎</h2><p>有很多中方法可以转换，一般我们会使用以下三种方法：</p>\n<h3 id=\"ALTER-TABLE\"><a href=\"#ALTER-TABLE\" class=\"headerlink\" title=\"ALTER TABLE\"></a>ALTER TABLE</h3><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">mysql&gt;alter table mytable engine=innodb;</div></pre></td></tr></table></figure>\n<p>上述语法可以适应与任何存储引擎。但是当表数据很大时，这种方法将会执行很长时间。MySQL会按行将数据从原表复制到一张新的表中。所以，在繁忙的表上执行此操作要非常小心。</p>\n<h3 id=\"导入-导出\"><a href=\"#导入-导出\" class=\"headerlink\" title=\"导入/导出\"></a>导入/导出</h3><p>使用mysqldump工具将数据到出到文件，然后修改文件中create table 语句中的存储引擎的选项，（同时注意修改表名，避免在导入的时候将原表删除，造成数据丢失）。然后导入文件到数据库，这样就得到了一个原表的一个全量复制表。</p>\n<h3 id=\"创建与查询\"><a href=\"#创建与查询\" class=\"headerlink\" title=\"创建与查询\"></a>创建与查询</h3><p>综合第一种方法的高效和第二种的安全。不需要导出整张表的数据，而是先创建一个新的存储引擎的表，然后利用 insert…select语法来导数据。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">mysql&gt;create table innodb_table like myisam_table;</div><div class=\"line\">mysql&gt;alter table innodb_table engine=innodb;</div><div class=\"line\">mysql&gt;insert into innodb_table select * from myisam_table;</div></pre></td></tr></table></figure></p>\n<p>如果数据量大的话，可以考虑分批处理，并使用事务进行提交操作；<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">mysql&gt;start transaction;</div><div class=\"line\">mysql&gt;insert into innodb_table select * from myisam_table where id between x and y;</div><div class=\"line\">mysql&gt;commit;</div></pre></td></tr></table></figure></p>\n<p>如果有必要，在操作的时候可以对原表加锁，以确保新表和原表数据一致。<br>这样操作之后也会得到一个对原表的全量复制的表，如果需要还可以删除原表。</p>\n<p><strong>Tips：</strong><br>Persona Toolkit 提供了一个 pt-online-schema-change的工具（基于Facebook的在线变更技术），可以比较简单、方便的执行上述过程，避免收工操作可能会带来的错误是繁琐。。。。。。</p>"},{"title":"MySQL编译安装","date":"2016-09-25T12:30:00.000Z","ctime":"2016-09-25T12:30:00.000Z","utime":"2016-09-25T12:30:00.000Z","modif_times":0,"_content":"\n![MySQL](http://n.sinaimg.cn/games/3ece443e/20160925/mysql_log.png)\n<!-- more -->\n\n## 环境\nOS：CentOS 7.2 64\n\nMySQL：[mysql-5.7.15](http://dev.mysql.com/downloads/mysql/)\n\n## 编译环境准备\n```\n# yum -y install make gcc-c++ cmake bison-devel ncurses-devel\n```\n> make，Linux下非常重要的编译工具，最主要也是最基本的功能就是通过makefile文件来描述源程序之间的相互关系并自动维护编译工作。\n> gcc-c++，C++ 编译器（gcc，C编译器）\n> cmake，一个跨平台的编译自动配置工具，（作用生成makefile 文件）\n> bison-devel 一个语法分析器生成器\n> ncurses-devel，Ncurses介绍摘要:Ncurses是一个能提供功能键定义(快捷键),屏幕绘制以及基于文本终端.\n\n### ncurses\nNcurses 提供字符终端处理库，包括面板和菜单。它提供了一套控制光标，建立窗口，改变前景背景颜色以及处理鼠标操作的函数。使用户在字符终端下编写应用程序时绕过了那些恼人的底层机制。简而言之，他是一个可以使应用程序直接控制终端屏幕显示的函数库。\n1、yum安装\n```\nyum -y install ncurses-devel\n```\n注：如果报错，包找不到，是*通配符没有识别，给文件名加双引号  “ncurses*”\n\n2、源代码编译:\n```\n下载解压\ncd ncurses-5.9\n./configure --with-shared --without-debug --without-ada --enable-overwrite\nmake\nmake install\n```\n* 若不安装ncurses编译MySQL时会报错\n* --without-ada 参数为设定不编译为ada绑定，因进入chroot环境不能使用ada ；--enable-overwrite参数为定义把头文件安装到/tools/include下而不是/tools/include/ncurses目录\n* --with-shared 生成共享库\n\n### 安装cmake和bison\nmysql在5.5以后，不再使用./configure工具，进行编译安装。而使用cmake工具替代了./configure工具。cmake的具体用法参考文档cmake说明。\n\nbison是一个自由软件，用于自动生成语法分析器程序，可用于所有常见的操作系统\n```\nyum -y install cmake\nyum -y install bison\n```\n\n## 编译\n\n解压源码包\n```\ntar -zxvf mysql-5.7.15.tar.gz\n```\n进入源码包目录\n```\ncd mysql-5.7.15\n```\n编译\n```\ncmake  \\\n-DDEFAULT_CHARSET=utf8 \\\n-DDEFAULT_COLLATION=utf8_general_ci \\\n-DWITH_INNOBASE_STORAGE_ENGINE=1 \\\n-DENABLED_LOCAL_INFILE=1 \\\n-DWITH_BOOST=/usr/local/boost\n```\nBoost，是为C++语言标准库提供扩展的一些C++程序库的总称，，由Boost社区组织开发、维护。\n最后一行配置，是配置boost库的，如果没有boost包，编译会报错。\n如果之前没有安装过，可以单独安装，也可在mysql安装的时候直接下载安装，这样的话，最后一行配置修改如下：\n```\n-DDOWNLOAD_BOOST=1 -DWITH_BOOST=/usr/local/boost #直接下载并安装\n```\n```\nmake && make install\n```\n\n## 配置\n\n### 创建MySQL运行用户和用户组\n查看mysql用户及用户组\n```\ncat /etc/passwd     查看用户列表\ncat /etc/group      查看用户组列表\n```\n如果没有就创建\n```\ngroupadd mysql\nuseradd -g mysql mysql\n```\n修改/usr/local/mysql权限\n```\nchown -R mysql:mysql /usr/local/mysql\n```\n初始化配置\n```\ncd /usr/local/mysql\ncp support-files/my-default.cnf /etc/my.cnf\n```\n注：在启动MySQL服务时，会按照一定次序搜索my.cnf，先在/etc目录下找，找不到则会在安装目录下面找，在本例中就是 /usr/local/mysql/my.cnf，这是新版MySQL的配置文件的默认位置。\n\n### 初始化数据库并生成初始密码\n```\n/usr/local/mysql/bin/mysqld --initialize --user=mysql\n```\n会生成一个初始密码\n```\n# A temporary password is generated for root@localhost: -qeFRRlHV0jf\n```\n密码：-qeFRRlHV0jf\n\n### 设置环境变量（使得mysql服务可以全局访问）\n```\nvi ~/.bash_profile\n```\n在修改PATH=$PATH:$HOME/bin为：\n```\nPATH=$PATH:$HOME/bin:/usr/local/mysql/bin:/usr/local/mysql/lib\n```\n重新加载环境变量\n```\n[root@root ~]# source /root/.bash_profile    \n```\n## 管理\n### 启动mysql\n\n方法一：\n```\n# 将mysql的启动服务添加到系统服务中\n# cp support-files/mysql.server /etc/init.d/mysql\n# service mysql start\n```\n方法二：\n```\n/usr/local/mysql/bin/mysqld_safe --user=mysql &\n```\n\n### 设置开机自启动\n方法一：\n\n通过chkconfig实现。\n\n方法二：直接修改 rc.local 文件\n```\necho \"/usr/local/mysql/bin/mysqld_safe --user=mysql &\" >> /etc/rc.local\n```\n\n### 修改密码\n登录并修改初始密码（不修改密码不让你操作，就是这么任性）\n```\n# mysql -uroot -hlocalhost -p\nEnter password:-qeFRRlHV0jf（初始密码）\n# mysql> SET PASSWORD FOR 'root'@'localhost' = PASSWORD('xxxxxxx');\n```\n\n重新登录\n```\n#  mysql> exit\n#  mysql -u root -p\nEnter password:\n```\n能够登录进去，则说明MySQL安装成功。over~\n","source":"_posts/MySQL安装编译.md","raw":"---\ntitle: MySQL编译安装\ndate: 2016-09-25 20:30:00\nctime: 2016-09-25 20:30:00\nutime: 2016-09-25 20:30:00\nmodif_times: 0\ntags:\n- \ncategories:\n- MySQL\n---\n\n![MySQL](http://n.sinaimg.cn/games/3ece443e/20160925/mysql_log.png)\n<!-- more -->\n\n## 环境\nOS：CentOS 7.2 64\n\nMySQL：[mysql-5.7.15](http://dev.mysql.com/downloads/mysql/)\n\n## 编译环境准备\n```\n# yum -y install make gcc-c++ cmake bison-devel ncurses-devel\n```\n> make，Linux下非常重要的编译工具，最主要也是最基本的功能就是通过makefile文件来描述源程序之间的相互关系并自动维护编译工作。\n> gcc-c++，C++ 编译器（gcc，C编译器）\n> cmake，一个跨平台的编译自动配置工具，（作用生成makefile 文件）\n> bison-devel 一个语法分析器生成器\n> ncurses-devel，Ncurses介绍摘要:Ncurses是一个能提供功能键定义(快捷键),屏幕绘制以及基于文本终端.\n\n### ncurses\nNcurses 提供字符终端处理库，包括面板和菜单。它提供了一套控制光标，建立窗口，改变前景背景颜色以及处理鼠标操作的函数。使用户在字符终端下编写应用程序时绕过了那些恼人的底层机制。简而言之，他是一个可以使应用程序直接控制终端屏幕显示的函数库。\n1、yum安装\n```\nyum -y install ncurses-devel\n```\n注：如果报错，包找不到，是*通配符没有识别，给文件名加双引号  “ncurses*”\n\n2、源代码编译:\n```\n下载解压\ncd ncurses-5.9\n./configure --with-shared --without-debug --without-ada --enable-overwrite\nmake\nmake install\n```\n* 若不安装ncurses编译MySQL时会报错\n* --without-ada 参数为设定不编译为ada绑定，因进入chroot环境不能使用ada ；--enable-overwrite参数为定义把头文件安装到/tools/include下而不是/tools/include/ncurses目录\n* --with-shared 生成共享库\n\n### 安装cmake和bison\nmysql在5.5以后，不再使用./configure工具，进行编译安装。而使用cmake工具替代了./configure工具。cmake的具体用法参考文档cmake说明。\n\nbison是一个自由软件，用于自动生成语法分析器程序，可用于所有常见的操作系统\n```\nyum -y install cmake\nyum -y install bison\n```\n\n## 编译\n\n解压源码包\n```\ntar -zxvf mysql-5.7.15.tar.gz\n```\n进入源码包目录\n```\ncd mysql-5.7.15\n```\n编译\n```\ncmake  \\\n-DDEFAULT_CHARSET=utf8 \\\n-DDEFAULT_COLLATION=utf8_general_ci \\\n-DWITH_INNOBASE_STORAGE_ENGINE=1 \\\n-DENABLED_LOCAL_INFILE=1 \\\n-DWITH_BOOST=/usr/local/boost\n```\nBoost，是为C++语言标准库提供扩展的一些C++程序库的总称，，由Boost社区组织开发、维护。\n最后一行配置，是配置boost库的，如果没有boost包，编译会报错。\n如果之前没有安装过，可以单独安装，也可在mysql安装的时候直接下载安装，这样的话，最后一行配置修改如下：\n```\n-DDOWNLOAD_BOOST=1 -DWITH_BOOST=/usr/local/boost #直接下载并安装\n```\n```\nmake && make install\n```\n\n## 配置\n\n### 创建MySQL运行用户和用户组\n查看mysql用户及用户组\n```\ncat /etc/passwd     查看用户列表\ncat /etc/group      查看用户组列表\n```\n如果没有就创建\n```\ngroupadd mysql\nuseradd -g mysql mysql\n```\n修改/usr/local/mysql权限\n```\nchown -R mysql:mysql /usr/local/mysql\n```\n初始化配置\n```\ncd /usr/local/mysql\ncp support-files/my-default.cnf /etc/my.cnf\n```\n注：在启动MySQL服务时，会按照一定次序搜索my.cnf，先在/etc目录下找，找不到则会在安装目录下面找，在本例中就是 /usr/local/mysql/my.cnf，这是新版MySQL的配置文件的默认位置。\n\n### 初始化数据库并生成初始密码\n```\n/usr/local/mysql/bin/mysqld --initialize --user=mysql\n```\n会生成一个初始密码\n```\n# A temporary password is generated for root@localhost: -qeFRRlHV0jf\n```\n密码：-qeFRRlHV0jf\n\n### 设置环境变量（使得mysql服务可以全局访问）\n```\nvi ~/.bash_profile\n```\n在修改PATH=$PATH:$HOME/bin为：\n```\nPATH=$PATH:$HOME/bin:/usr/local/mysql/bin:/usr/local/mysql/lib\n```\n重新加载环境变量\n```\n[root@root ~]# source /root/.bash_profile    \n```\n## 管理\n### 启动mysql\n\n方法一：\n```\n# 将mysql的启动服务添加到系统服务中\n# cp support-files/mysql.server /etc/init.d/mysql\n# service mysql start\n```\n方法二：\n```\n/usr/local/mysql/bin/mysqld_safe --user=mysql &\n```\n\n### 设置开机自启动\n方法一：\n\n通过chkconfig实现。\n\n方法二：直接修改 rc.local 文件\n```\necho \"/usr/local/mysql/bin/mysqld_safe --user=mysql &\" >> /etc/rc.local\n```\n\n### 修改密码\n登录并修改初始密码（不修改密码不让你操作，就是这么任性）\n```\n# mysql -uroot -hlocalhost -p\nEnter password:-qeFRRlHV0jf（初始密码）\n# mysql> SET PASSWORD FOR 'root'@'localhost' = PASSWORD('xxxxxxx');\n```\n\n重新登录\n```\n#  mysql> exit\n#  mysql -u root -p\nEnter password:\n```\n能够登录进去，则说明MySQL安装成功。over~\n","slug":"MySQL安装编译","published":1,"updated":"2016-09-25T10:46:14.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"city8vnnl0014g29ftayz73qz","content":"<p><img src=\"http://n.sinaimg.cn/games/3ece443e/20160925/mysql_log.png\" alt=\"MySQL\"><br><a id=\"more\"></a></p>\n<h2 id=\"环境\"><a href=\"#环境\" class=\"headerlink\" title=\"环境\"></a>环境</h2><p>OS：CentOS 7.2 64</p>\n<p>MySQL：<a href=\"http://dev.mysql.com/downloads/mysql/\" target=\"_blank\" rel=\"external\">mysql-5.7.15</a></p>\n<h2 id=\"编译环境准备\"><a href=\"#编译环境准备\" class=\"headerlink\" title=\"编译环境准备\"></a>编译环境准备</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"># yum -y install make gcc-c++ cmake bison-devel ncurses-devel</div></pre></td></tr></table></figure>\n<blockquote>\n<p>make，Linux下非常重要的编译工具，最主要也是最基本的功能就是通过makefile文件来描述源程序之间的相互关系并自动维护编译工作。<br>gcc-c++，C++ 编译器（gcc，C编译器）<br>cmake，一个跨平台的编译自动配置工具，（作用生成makefile 文件）<br>bison-devel 一个语法分析器生成器<br>ncurses-devel，Ncurses介绍摘要:Ncurses是一个能提供功能键定义(快捷键),屏幕绘制以及基于文本终端.</p>\n</blockquote>\n<h3 id=\"ncurses\"><a href=\"#ncurses\" class=\"headerlink\" title=\"ncurses\"></a>ncurses</h3><p>Ncurses 提供字符终端处理库，包括面板和菜单。它提供了一套控制光标，建立窗口，改变前景背景颜色以及处理鼠标操作的函数。使用户在字符终端下编写应用程序时绕过了那些恼人的底层机制。简而言之，他是一个可以使应用程序直接控制终端屏幕显示的函数库。<br>1、yum安装<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">yum -y install ncurses-devel</div></pre></td></tr></table></figure></p>\n<p>注：如果报错，包找不到，是<em>通配符没有识别，给文件名加双引号  “ncurses</em>”</p>\n<p>2、源代码编译:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">下载解压</div><div class=\"line\">cd ncurses-5.9</div><div class=\"line\">./configure --with-shared --without-debug --without-ada --enable-overwrite</div><div class=\"line\">make</div><div class=\"line\">make install</div></pre></td></tr></table></figure></p>\n<ul>\n<li>若不安装ncurses编译MySQL时会报错</li>\n<li>–without-ada 参数为设定不编译为ada绑定，因进入chroot环境不能使用ada ；–enable-overwrite参数为定义把头文件安装到/tools/include下而不是/tools/include/ncurses目录</li>\n<li>–with-shared 生成共享库</li>\n</ul>\n<h3 id=\"安装cmake和bison\"><a href=\"#安装cmake和bison\" class=\"headerlink\" title=\"安装cmake和bison\"></a>安装cmake和bison</h3><p>mysql在5.5以后，不再使用./configure工具，进行编译安装。而使用cmake工具替代了./configure工具。cmake的具体用法参考文档cmake说明。</p>\n<p>bison是一个自由软件，用于自动生成语法分析器程序，可用于所有常见的操作系统<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">yum -y install cmake</div><div class=\"line\">yum -y install bison</div></pre></td></tr></table></figure></p>\n<h2 id=\"编译\"><a href=\"#编译\" class=\"headerlink\" title=\"编译\"></a>编译</h2><p>解压源码包<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">tar -zxvf mysql-5.7.15.tar.gz</div></pre></td></tr></table></figure></p>\n<p>进入源码包目录<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">cd mysql-5.7.15</div></pre></td></tr></table></figure></p>\n<p>编译<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">cmake  \\</div><div class=\"line\">-DDEFAULT_CHARSET=utf8 \\</div><div class=\"line\">-DDEFAULT_COLLATION=utf8_general_ci \\</div><div class=\"line\">-DWITH_INNOBASE_STORAGE_ENGINE=1 \\</div><div class=\"line\">-DENABLED_LOCAL_INFILE=1 \\</div><div class=\"line\">-DWITH_BOOST=/usr/local/boost</div></pre></td></tr></table></figure></p>\n<p>Boost，是为C++语言标准库提供扩展的一些C++程序库的总称，，由Boost社区组织开发、维护。<br>最后一行配置，是配置boost库的，如果没有boost包，编译会报错。<br>如果之前没有安装过，可以单独安装，也可在mysql安装的时候直接下载安装，这样的话，最后一行配置修改如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">-DDOWNLOAD_BOOST=1 -DWITH_BOOST=/usr/local/boost #直接下载并安装</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">make &amp;&amp; make install</div></pre></td></tr></table></figure>\n<h2 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h2><h3 id=\"创建MySQL运行用户和用户组\"><a href=\"#创建MySQL运行用户和用户组\" class=\"headerlink\" title=\"创建MySQL运行用户和用户组\"></a>创建MySQL运行用户和用户组</h3><p>查看mysql用户及用户组<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">cat /etc/passwd     查看用户列表</div><div class=\"line\">cat /etc/group      查看用户组列表</div></pre></td></tr></table></figure></p>\n<p>如果没有就创建<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">groupadd mysql</div><div class=\"line\">useradd -g mysql mysql</div></pre></td></tr></table></figure></p>\n<p>修改/usr/local/mysql权限<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">chown -R mysql:mysql /usr/local/mysql</div></pre></td></tr></table></figure></p>\n<p>初始化配置<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">cd /usr/local/mysql</div><div class=\"line\">cp support-files/my-default.cnf /etc/my.cnf</div></pre></td></tr></table></figure></p>\n<p>注：在启动MySQL服务时，会按照一定次序搜索my.cnf，先在/etc目录下找，找不到则会在安装目录下面找，在本例中就是 /usr/local/mysql/my.cnf，这是新版MySQL的配置文件的默认位置。</p>\n<h3 id=\"初始化数据库并生成初始密码\"><a href=\"#初始化数据库并生成初始密码\" class=\"headerlink\" title=\"初始化数据库并生成初始密码\"></a>初始化数据库并生成初始密码</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">/usr/local/mysql/bin/mysqld --initialize --user=mysql</div></pre></td></tr></table></figure>\n<p>会生成一个初始密码<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"># A temporary password is generated for root@localhost: -qeFRRlHV0jf</div></pre></td></tr></table></figure></p>\n<p>密码：-qeFRRlHV0jf</p>\n<h3 id=\"设置环境变量（使得mysql服务可以全局访问）\"><a href=\"#设置环境变量（使得mysql服务可以全局访问）\" class=\"headerlink\" title=\"设置环境变量（使得mysql服务可以全局访问）\"></a>设置环境变量（使得mysql服务可以全局访问）</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">vi ~/.bash_profile</div></pre></td></tr></table></figure>\n<p>在修改PATH=$PATH:$HOME/bin为：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">PATH=$PATH:$HOME/bin:/usr/local/mysql/bin:/usr/local/mysql/lib</div></pre></td></tr></table></figure></p>\n<p>重新加载环境变量<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">[root@root ~]# source /root/.bash_profile</div></pre></td></tr></table></figure></p>\n<h2 id=\"管理\"><a href=\"#管理\" class=\"headerlink\" title=\"管理\"></a>管理</h2><h3 id=\"启动mysql\"><a href=\"#启动mysql\" class=\"headerlink\" title=\"启动mysql\"></a>启动mysql</h3><p>方法一：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"># 将mysql的启动服务添加到系统服务中</div><div class=\"line\"># cp support-files/mysql.server /etc/init.d/mysql</div><div class=\"line\"># service mysql start</div></pre></td></tr></table></figure></p>\n<p>方法二：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">/usr/local/mysql/bin/mysqld_safe --user=mysql &amp;</div></pre></td></tr></table></figure></p>\n<h3 id=\"设置开机自启动\"><a href=\"#设置开机自启动\" class=\"headerlink\" title=\"设置开机自启动\"></a>设置开机自启动</h3><p>方法一：</p>\n<p>通过chkconfig实现。</p>\n<p>方法二：直接修改 rc.local 文件<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">echo &quot;/usr/local/mysql/bin/mysqld_safe --user=mysql &amp;&quot; &gt;&gt; /etc/rc.local</div></pre></td></tr></table></figure></p>\n<h3 id=\"修改密码\"><a href=\"#修改密码\" class=\"headerlink\" title=\"修改密码\"></a>修改密码</h3><p>登录并修改初始密码（不修改密码不让你操作，就是这么任性）<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"># mysql -uroot -hlocalhost -p</div><div class=\"line\">Enter password:-qeFRRlHV0jf（初始密码）</div><div class=\"line\"># mysql&gt; SET PASSWORD FOR &apos;root&apos;@&apos;localhost&apos; = PASSWORD(&apos;xxxxxxx&apos;);</div></pre></td></tr></table></figure></p>\n<p>重新登录<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">#  mysql&gt; exit</div><div class=\"line\">#  mysql -u root -p</div><div class=\"line\">Enter password:</div></pre></td></tr></table></figure></p>\n<p>能够登录进去，则说明MySQL安装成功。over~</p>\n","excerpt":"<p><img src=\"http://n.sinaimg.cn/games/3ece443e/20160925/mysql_log.png\" alt=\"MySQL\"><br>","more":"</p>\n<h2 id=\"环境\"><a href=\"#环境\" class=\"headerlink\" title=\"环境\"></a>环境</h2><p>OS：CentOS 7.2 64</p>\n<p>MySQL：<a href=\"http://dev.mysql.com/downloads/mysql/\">mysql-5.7.15</a></p>\n<h2 id=\"编译环境准备\"><a href=\"#编译环境准备\" class=\"headerlink\" title=\"编译环境准备\"></a>编译环境准备</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"># yum -y install make gcc-c++ cmake bison-devel ncurses-devel</div></pre></td></tr></table></figure>\n<blockquote>\n<p>make，Linux下非常重要的编译工具，最主要也是最基本的功能就是通过makefile文件来描述源程序之间的相互关系并自动维护编译工作。<br>gcc-c++，C++ 编译器（gcc，C编译器）<br>cmake，一个跨平台的编译自动配置工具，（作用生成makefile 文件）<br>bison-devel 一个语法分析器生成器<br>ncurses-devel，Ncurses介绍摘要:Ncurses是一个能提供功能键定义(快捷键),屏幕绘制以及基于文本终端.</p>\n</blockquote>\n<h3 id=\"ncurses\"><a href=\"#ncurses\" class=\"headerlink\" title=\"ncurses\"></a>ncurses</h3><p>Ncurses 提供字符终端处理库，包括面板和菜单。它提供了一套控制光标，建立窗口，改变前景背景颜色以及处理鼠标操作的函数。使用户在字符终端下编写应用程序时绕过了那些恼人的底层机制。简而言之，他是一个可以使应用程序直接控制终端屏幕显示的函数库。<br>1、yum安装<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">yum -y install ncurses-devel</div></pre></td></tr></table></figure></p>\n<p>注：如果报错，包找不到，是<em>通配符没有识别，给文件名加双引号  “ncurses</em>”</p>\n<p>2、源代码编译:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">下载解压</div><div class=\"line\">cd ncurses-5.9</div><div class=\"line\">./configure --with-shared --without-debug --without-ada --enable-overwrite</div><div class=\"line\">make</div><div class=\"line\">make install</div></pre></td></tr></table></figure></p>\n<ul>\n<li>若不安装ncurses编译MySQL时会报错</li>\n<li>–without-ada 参数为设定不编译为ada绑定，因进入chroot环境不能使用ada ；–enable-overwrite参数为定义把头文件安装到/tools/include下而不是/tools/include/ncurses目录</li>\n<li>–with-shared 生成共享库</li>\n</ul>\n<h3 id=\"安装cmake和bison\"><a href=\"#安装cmake和bison\" class=\"headerlink\" title=\"安装cmake和bison\"></a>安装cmake和bison</h3><p>mysql在5.5以后，不再使用./configure工具，进行编译安装。而使用cmake工具替代了./configure工具。cmake的具体用法参考文档cmake说明。</p>\n<p>bison是一个自由软件，用于自动生成语法分析器程序，可用于所有常见的操作系统<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">yum -y install cmake</div><div class=\"line\">yum -y install bison</div></pre></td></tr></table></figure></p>\n<h2 id=\"编译\"><a href=\"#编译\" class=\"headerlink\" title=\"编译\"></a>编译</h2><p>解压源码包<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">tar -zxvf mysql-5.7.15.tar.gz</div></pre></td></tr></table></figure></p>\n<p>进入源码包目录<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">cd mysql-5.7.15</div></pre></td></tr></table></figure></p>\n<p>编译<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">cmake  \\</div><div class=\"line\">-DDEFAULT_CHARSET=utf8 \\</div><div class=\"line\">-DDEFAULT_COLLATION=utf8_general_ci \\</div><div class=\"line\">-DWITH_INNOBASE_STORAGE_ENGINE=1 \\</div><div class=\"line\">-DENABLED_LOCAL_INFILE=1 \\</div><div class=\"line\">-DWITH_BOOST=/usr/local/boost</div></pre></td></tr></table></figure></p>\n<p>Boost，是为C++语言标准库提供扩展的一些C++程序库的总称，，由Boost社区组织开发、维护。<br>最后一行配置，是配置boost库的，如果没有boost包，编译会报错。<br>如果之前没有安装过，可以单独安装，也可在mysql安装的时候直接下载安装，这样的话，最后一行配置修改如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">-DDOWNLOAD_BOOST=1 -DWITH_BOOST=/usr/local/boost #直接下载并安装</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">make &amp;&amp; make install</div></pre></td></tr></table></figure>\n<h2 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h2><h3 id=\"创建MySQL运行用户和用户组\"><a href=\"#创建MySQL运行用户和用户组\" class=\"headerlink\" title=\"创建MySQL运行用户和用户组\"></a>创建MySQL运行用户和用户组</h3><p>查看mysql用户及用户组<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">cat /etc/passwd     查看用户列表</div><div class=\"line\">cat /etc/group      查看用户组列表</div></pre></td></tr></table></figure></p>\n<p>如果没有就创建<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">groupadd mysql</div><div class=\"line\">useradd -g mysql mysql</div></pre></td></tr></table></figure></p>\n<p>修改/usr/local/mysql权限<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">chown -R mysql:mysql /usr/local/mysql</div></pre></td></tr></table></figure></p>\n<p>初始化配置<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">cd /usr/local/mysql</div><div class=\"line\">cp support-files/my-default.cnf /etc/my.cnf</div></pre></td></tr></table></figure></p>\n<p>注：在启动MySQL服务时，会按照一定次序搜索my.cnf，先在/etc目录下找，找不到则会在安装目录下面找，在本例中就是 /usr/local/mysql/my.cnf，这是新版MySQL的配置文件的默认位置。</p>\n<h3 id=\"初始化数据库并生成初始密码\"><a href=\"#初始化数据库并生成初始密码\" class=\"headerlink\" title=\"初始化数据库并生成初始密码\"></a>初始化数据库并生成初始密码</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">/usr/local/mysql/bin/mysqld --initialize --user=mysql</div></pre></td></tr></table></figure>\n<p>会生成一个初始密码<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"># A temporary password is generated for root@localhost: -qeFRRlHV0jf</div></pre></td></tr></table></figure></p>\n<p>密码：-qeFRRlHV0jf</p>\n<h3 id=\"设置环境变量（使得mysql服务可以全局访问）\"><a href=\"#设置环境变量（使得mysql服务可以全局访问）\" class=\"headerlink\" title=\"设置环境变量（使得mysql服务可以全局访问）\"></a>设置环境变量（使得mysql服务可以全局访问）</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">vi ~/.bash_profile</div></pre></td></tr></table></figure>\n<p>在修改PATH=$PATH:$HOME/bin为：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">PATH=$PATH:$HOME/bin:/usr/local/mysql/bin:/usr/local/mysql/lib</div></pre></td></tr></table></figure></p>\n<p>重新加载环境变量<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">[root@root ~]# source /root/.bash_profile</div></pre></td></tr></table></figure></p>\n<h2 id=\"管理\"><a href=\"#管理\" class=\"headerlink\" title=\"管理\"></a>管理</h2><h3 id=\"启动mysql\"><a href=\"#启动mysql\" class=\"headerlink\" title=\"启动mysql\"></a>启动mysql</h3><p>方法一：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"># 将mysql的启动服务添加到系统服务中</div><div class=\"line\"># cp support-files/mysql.server /etc/init.d/mysql</div><div class=\"line\"># service mysql start</div></pre></td></tr></table></figure></p>\n<p>方法二：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">/usr/local/mysql/bin/mysqld_safe --user=mysql &amp;</div></pre></td></tr></table></figure></p>\n<h3 id=\"设置开机自启动\"><a href=\"#设置开机自启动\" class=\"headerlink\" title=\"设置开机自启动\"></a>设置开机自启动</h3><p>方法一：</p>\n<p>通过chkconfig实现。</p>\n<p>方法二：直接修改 rc.local 文件<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">echo &quot;/usr/local/mysql/bin/mysqld_safe --user=mysql &amp;&quot; &gt;&gt; /etc/rc.local</div></pre></td></tr></table></figure></p>\n<h3 id=\"修改密码\"><a href=\"#修改密码\" class=\"headerlink\" title=\"修改密码\"></a>修改密码</h3><p>登录并修改初始密码（不修改密码不让你操作，就是这么任性）<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"># mysql -uroot -hlocalhost -p</div><div class=\"line\">Enter password:-qeFRRlHV0jf（初始密码）</div><div class=\"line\"># mysql&gt; SET PASSWORD FOR &apos;root&apos;@&apos;localhost&apos; = PASSWORD(&apos;xxxxxxx&apos;);</div></pre></td></tr></table></figure></p>\n<p>重新登录<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">#  mysql&gt; exit</div><div class=\"line\">#  mysql -u root -p</div><div class=\"line\">Enter password:</div></pre></td></tr></table></figure></p>\n<p>能够登录进去，则说明MySQL安装成功。over~</p>"},{"title":"MySQL并发控制整理","date":"2016-09-16T13:00:00.000Z","_content":"\n根据控制的不同层次，MySQL的并发控制可以分为：\n- 服务器层\n- 存储引擎层\n\n实现并发控制的方法策略：***锁机制***\n- 共享锁（shared lock）<======> 读锁（read lock）\n- 排它锁（exclusive lock） <======> 写锁（write lock）\n\n如何选择适合的锁？***锁策略***\n- 锁的粒度越小，系统的并发性越高\n- 所得操作越多，系统的开销越大\n> 所以所谓的锁策略，就是在锁的开销和数据的安全性之间寻求平衡。\n\n<!-- more -->\n\n## MySQL中锁策略类型\nMySQL不同的存储引擎中用到的锁策略基本有两种。一种是表级锁，另一种是行级锁。\n- 表锁，一种开销最小的锁策略。\n> 一个用户对表进行写操作时，需要先获得写锁，这是其他用户读该表进行的读写操作都会进行阻塞。只有当前写操作被释放之后，其他人才能活的读锁。当当前表有读锁时，其他人也可以继续获得读锁。读锁是共享性的不同的读锁之间是互相不阻塞的。\n> 另外，写锁的优先级高于读锁。所以当有多个锁请求存在是，读锁的请求会被优先插入到锁队列的前边。\n\n- 行锁，最大程度支持并发处理，同时也是锁开销最大的锁策略。\n> 顾名思义，行级锁只在将要修改的记录行上进行锁操作，对其他的行的操作没有影响。\n\n尽管我们一般提到的锁，都处于存储引擎这一层，但是MySQL本身在某些情况下，也会对锁策略进行控制。比如表的alter table操作，会对表本身使用表锁，而直接忽略存储引擎的锁机制。\n\n## MySQL中死锁问题解决方法\n> 死锁，即两个或者多个事务在同一资源上相互占用，并请求占用对方已经占用的资源的情况。\n\n既然有锁存在，当然就会有死锁的情况发生。那么MySQL中是如何处理死锁问题的呢？\n死锁的通常解决方案有两种，即：\n- 死锁检测机制\n- 超时机制\n\nInnoDB存储引擎在检测到有死锁发生的处理方法是，将当前持有最少的行级锁的事务进行回滚。待打破死锁后，重新执行因为死锁而回滚的事务。\n","source":"_posts/MySQL的并发控制整理.md","raw":"---\ntitle: MySQL并发控制整理\ndate: 2016-09-16 21:00:00\ntags:\n- 并发控制\ncategories:\n- MySQL\n---\n\n根据控制的不同层次，MySQL的并发控制可以分为：\n- 服务器层\n- 存储引擎层\n\n实现并发控制的方法策略：***锁机制***\n- 共享锁（shared lock）<======> 读锁（read lock）\n- 排它锁（exclusive lock） <======> 写锁（write lock）\n\n如何选择适合的锁？***锁策略***\n- 锁的粒度越小，系统的并发性越高\n- 所得操作越多，系统的开销越大\n> 所以所谓的锁策略，就是在锁的开销和数据的安全性之间寻求平衡。\n\n<!-- more -->\n\n## MySQL中锁策略类型\nMySQL不同的存储引擎中用到的锁策略基本有两种。一种是表级锁，另一种是行级锁。\n- 表锁，一种开销最小的锁策略。\n> 一个用户对表进行写操作时，需要先获得写锁，这是其他用户读该表进行的读写操作都会进行阻塞。只有当前写操作被释放之后，其他人才能活的读锁。当当前表有读锁时，其他人也可以继续获得读锁。读锁是共享性的不同的读锁之间是互相不阻塞的。\n> 另外，写锁的优先级高于读锁。所以当有多个锁请求存在是，读锁的请求会被优先插入到锁队列的前边。\n\n- 行锁，最大程度支持并发处理，同时也是锁开销最大的锁策略。\n> 顾名思义，行级锁只在将要修改的记录行上进行锁操作，对其他的行的操作没有影响。\n\n尽管我们一般提到的锁，都处于存储引擎这一层，但是MySQL本身在某些情况下，也会对锁策略进行控制。比如表的alter table操作，会对表本身使用表锁，而直接忽略存储引擎的锁机制。\n\n## MySQL中死锁问题解决方法\n> 死锁，即两个或者多个事务在同一资源上相互占用，并请求占用对方已经占用的资源的情况。\n\n既然有锁存在，当然就会有死锁的情况发生。那么MySQL中是如何处理死锁问题的呢？\n死锁的通常解决方案有两种，即：\n- 死锁检测机制\n- 超时机制\n\nInnoDB存储引擎在检测到有死锁发生的处理方法是，将当前持有最少的行级锁的事务进行回滚。待打破死锁后，重新执行因为死锁而回滚的事务。\n","slug":"MySQL的并发控制整理","published":1,"updated":"2016-09-16T18:06:35.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"city8vnnp0018g29f8zoh8df4","content":"<p>根据控制的不同层次，MySQL的并发控制可以分为：</p>\n<ul>\n<li>服务器层</li>\n<li>存储引擎层</li>\n</ul>\n<p>实现并发控制的方法策略：<strong><em>锁机制</em></strong></p>\n<ul>\n<li>共享锁（shared lock）&lt;======&gt; 读锁（read lock）</li>\n<li>排它锁（exclusive lock） &lt;======&gt; 写锁（write lock）</li>\n</ul>\n<p>如何选择适合的锁？<strong><em>锁策略</em></strong></p>\n<ul>\n<li>锁的粒度越小，系统的并发性越高</li>\n<li>所得操作越多，系统的开销越大<blockquote>\n<p>所以所谓的锁策略，就是在锁的开销和数据的安全性之间寻求平衡。</p>\n</blockquote>\n</li>\n</ul>\n<a id=\"more\"></a>\n<h2 id=\"MySQL中锁策略类型\"><a href=\"#MySQL中锁策略类型\" class=\"headerlink\" title=\"MySQL中锁策略类型\"></a>MySQL中锁策略类型</h2><p>MySQL不同的存储引擎中用到的锁策略基本有两种。一种是表级锁，另一种是行级锁。</p>\n<ul>\n<li><p>表锁，一种开销最小的锁策略。</p>\n<blockquote>\n<p>一个用户对表进行写操作时，需要先获得写锁，这是其他用户读该表进行的读写操作都会进行阻塞。只有当前写操作被释放之后，其他人才能活的读锁。当当前表有读锁时，其他人也可以继续获得读锁。读锁是共享性的不同的读锁之间是互相不阻塞的。<br>另外，写锁的优先级高于读锁。所以当有多个锁请求存在是，读锁的请求会被优先插入到锁队列的前边。</p>\n</blockquote>\n</li>\n<li><p>行锁，最大程度支持并发处理，同时也是锁开销最大的锁策略。</p>\n<blockquote>\n<p>顾名思义，行级锁只在将要修改的记录行上进行锁操作，对其他的行的操作没有影响。</p>\n</blockquote>\n</li>\n</ul>\n<p>尽管我们一般提到的锁，都处于存储引擎这一层，但是MySQL本身在某些情况下，也会对锁策略进行控制。比如表的alter table操作，会对表本身使用表锁，而直接忽略存储引擎的锁机制。</p>\n<h2 id=\"MySQL中死锁问题解决方法\"><a href=\"#MySQL中死锁问题解决方法\" class=\"headerlink\" title=\"MySQL中死锁问题解决方法\"></a>MySQL中死锁问题解决方法</h2><blockquote>\n<p>死锁，即两个或者多个事务在同一资源上相互占用，并请求占用对方已经占用的资源的情况。</p>\n</blockquote>\n<p>既然有锁存在，当然就会有死锁的情况发生。那么MySQL中是如何处理死锁问题的呢？<br>死锁的通常解决方案有两种，即：</p>\n<ul>\n<li>死锁检测机制</li>\n<li>超时机制</li>\n</ul>\n<p>InnoDB存储引擎在检测到有死锁发生的处理方法是，将当前持有最少的行级锁的事务进行回滚。待打破死锁后，重新执行因为死锁而回滚的事务。</p>\n","excerpt":"<p>根据控制的不同层次，MySQL的并发控制可以分为：</p>\n<ul>\n<li>服务器层</li>\n<li>存储引擎层</li>\n</ul>\n<p>实现并发控制的方法策略：<strong><em>锁机制</em></strong></p>\n<ul>\n<li>共享锁（shared lock）&lt;======&gt; 读锁（read lock）</li>\n<li>排它锁（exclusive lock） &lt;======&gt; 写锁（write lock）</li>\n</ul>\n<p>如何选择适合的锁？<strong><em>锁策略</em></strong></p>\n<ul>\n<li>锁的粒度越小，系统的并发性越高</li>\n<li>所得操作越多，系统的开销越大<blockquote>\n<p>所以所谓的锁策略，就是在锁的开销和数据的安全性之间寻求平衡。</p>\n</blockquote>\n</li>\n</ul>","more":"<h2 id=\"MySQL中锁策略类型\"><a href=\"#MySQL中锁策略类型\" class=\"headerlink\" title=\"MySQL中锁策略类型\"></a>MySQL中锁策略类型</h2><p>MySQL不同的存储引擎中用到的锁策略基本有两种。一种是表级锁，另一种是行级锁。</p>\n<ul>\n<li><p>表锁，一种开销最小的锁策略。</p>\n<blockquote>\n<p>一个用户对表进行写操作时，需要先获得写锁，这是其他用户读该表进行的读写操作都会进行阻塞。只有当前写操作被释放之后，其他人才能活的读锁。当当前表有读锁时，其他人也可以继续获得读锁。读锁是共享性的不同的读锁之间是互相不阻塞的。<br>另外，写锁的优先级高于读锁。所以当有多个锁请求存在是，读锁的请求会被优先插入到锁队列的前边。</p>\n</blockquote>\n</li>\n<li><p>行锁，最大程度支持并发处理，同时也是锁开销最大的锁策略。</p>\n<blockquote>\n<p>顾名思义，行级锁只在将要修改的记录行上进行锁操作，对其他的行的操作没有影响。</p>\n</blockquote>\n</li>\n</ul>\n<p>尽管我们一般提到的锁，都处于存储引擎这一层，但是MySQL本身在某些情况下，也会对锁策略进行控制。比如表的alter table操作，会对表本身使用表锁，而直接忽略存储引擎的锁机制。</p>\n<h2 id=\"MySQL中死锁问题解决方法\"><a href=\"#MySQL中死锁问题解决方法\" class=\"headerlink\" title=\"MySQL中死锁问题解决方法\"></a>MySQL中死锁问题解决方法</h2><blockquote>\n<p>死锁，即两个或者多个事务在同一资源上相互占用，并请求占用对方已经占用的资源的情况。</p>\n</blockquote>\n<p>既然有锁存在，当然就会有死锁的情况发生。那么MySQL中是如何处理死锁问题的呢？<br>死锁的通常解决方案有两种，即：</p>\n<ul>\n<li>死锁检测机制</li>\n<li>超时机制</li>\n</ul>\n<p>InnoDB存储引擎在检测到有死锁发生的处理方法是，将当前持有最少的行级锁的事务进行回滚。待打破死锁后，重新执行因为死锁而回滚的事务。</p>"},{"title":"MySQL逻辑架构设计","date":"2016-09-16T12:00:00.000Z","_content":"\n通常MySQL架构有两种划分，一种划为两层架构，另一种划为三层。\n两层架构划为MySQL服务器层和存储引擎层，三层架构则把MySQL层又划为两层。\n\n![MySQL架构图](http://n.sinaimg.cn/games/3ece443e/20160916/MySQLJiaGouTu1.png)\n\n<!-- more -->\n\n## 三层架构说明\n- 第一层，用于连接处理、授权认证、安全认证等等。大多数基于客户端/服务器端的工具或者服务器都有类似架构。\n\n- 第二层，是MySQL架构的核心部分。MySQL的大部分核心服务功能大都在这一层。包括查询解析、分析、优化、缓存以及所有的内置函数的实现，还有所有的跨存储引擎的功能都在这一层实现：存储过程、触发器、试图等。\n\n- 第三层，存储引擎层。存储引擎负责MySQL中数据的存储和读取。每个存储引擎都有自己的优势和劣势。MySQL服务器层通过API与存储引擎进行通信。存储引擎本身是不会解析SQL，且不同的存储引擎之间也是不会相互通信。\n\n## MySQL服务器接收/处理一个查询请求的过程\n\n1. 当MySQL服务器接收到一个查询请求，首先会对当前的连接请求进行认证，认证其用户名和密码信息。\n\n2. 连接成功之后，会继续验证该连接是否具有执行某个特定查询的权限。\n\n3. 所有的验证都通过，如果是 select 操作，MySQL会先检查查询缓存中是否存在该缓存，如果存在直接返回结果。不存在继续下一步。\n\n4. 解析查询，并创建内部数据结构（生成 解析树），然后对解析树进行各种优化（包括，重写查询，决定表的读取顺序、选择合适的索引等等）。\n\n5. 通过存储引擎存储或者提取结果。\n\n6. 如果是select操作，生成查询缓存。\n\n7. 返回结果。\n\nover~\n","source":"_posts/MySQL逻辑架构实现小结.md","raw":"---\ntitle: MySQL逻辑架构设计\ndate: 2016-09-16 20:00:00\ntags:\n- MySQL逻辑架构\ncategories:\n- MySQL\n---\n\n通常MySQL架构有两种划分，一种划为两层架构，另一种划为三层。\n两层架构划为MySQL服务器层和存储引擎层，三层架构则把MySQL层又划为两层。\n\n![MySQL架构图](http://n.sinaimg.cn/games/3ece443e/20160916/MySQLJiaGouTu1.png)\n\n<!-- more -->\n\n## 三层架构说明\n- 第一层，用于连接处理、授权认证、安全认证等等。大多数基于客户端/服务器端的工具或者服务器都有类似架构。\n\n- 第二层，是MySQL架构的核心部分。MySQL的大部分核心服务功能大都在这一层。包括查询解析、分析、优化、缓存以及所有的内置函数的实现，还有所有的跨存储引擎的功能都在这一层实现：存储过程、触发器、试图等。\n\n- 第三层，存储引擎层。存储引擎负责MySQL中数据的存储和读取。每个存储引擎都有自己的优势和劣势。MySQL服务器层通过API与存储引擎进行通信。存储引擎本身是不会解析SQL，且不同的存储引擎之间也是不会相互通信。\n\n## MySQL服务器接收/处理一个查询请求的过程\n\n1. 当MySQL服务器接收到一个查询请求，首先会对当前的连接请求进行认证，认证其用户名和密码信息。\n\n2. 连接成功之后，会继续验证该连接是否具有执行某个特定查询的权限。\n\n3. 所有的验证都通过，如果是 select 操作，MySQL会先检查查询缓存中是否存在该缓存，如果存在直接返回结果。不存在继续下一步。\n\n4. 解析查询，并创建内部数据结构（生成 解析树），然后对解析树进行各种优化（包括，重写查询，决定表的读取顺序、选择合适的索引等等）。\n\n5. 通过存储引擎存储或者提取结果。\n\n6. 如果是select操作，生成查询缓存。\n\n7. 返回结果。\n\nover~\n","slug":"MySQL逻辑架构实现小结","published":1,"updated":"2016-09-16T08:42:10.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"city8vnnt001bg29fwr6tk3ds","content":"<p>通常MySQL架构有两种划分，一种划为两层架构，另一种划为三层。<br>两层架构划为MySQL服务器层和存储引擎层，三层架构则把MySQL层又划为两层。</p>\n<p><img src=\"http://n.sinaimg.cn/games/3ece443e/20160916/MySQLJiaGouTu1.png\" alt=\"MySQL架构图\"></p>\n<a id=\"more\"></a>\n<h2 id=\"三层架构说明\"><a href=\"#三层架构说明\" class=\"headerlink\" title=\"三层架构说明\"></a>三层架构说明</h2><ul>\n<li><p>第一层，用于连接处理、授权认证、安全认证等等。大多数基于客户端/服务器端的工具或者服务器都有类似架构。</p>\n</li>\n<li><p>第二层，是MySQL架构的核心部分。MySQL的大部分核心服务功能大都在这一层。包括查询解析、分析、优化、缓存以及所有的内置函数的实现，还有所有的跨存储引擎的功能都在这一层实现：存储过程、触发器、试图等。</p>\n</li>\n<li><p>第三层，存储引擎层。存储引擎负责MySQL中数据的存储和读取。每个存储引擎都有自己的优势和劣势。MySQL服务器层通过API与存储引擎进行通信。存储引擎本身是不会解析SQL，且不同的存储引擎之间也是不会相互通信。</p>\n</li>\n</ul>\n<h2 id=\"MySQL服务器接收-处理一个查询请求的过程\"><a href=\"#MySQL服务器接收-处理一个查询请求的过程\" class=\"headerlink\" title=\"MySQL服务器接收/处理一个查询请求的过程\"></a>MySQL服务器接收/处理一个查询请求的过程</h2><ol>\n<li><p>当MySQL服务器接收到一个查询请求，首先会对当前的连接请求进行认证，认证其用户名和密码信息。</p>\n</li>\n<li><p>连接成功之后，会继续验证该连接是否具有执行某个特定查询的权限。</p>\n</li>\n<li><p>所有的验证都通过，如果是 select 操作，MySQL会先检查查询缓存中是否存在该缓存，如果存在直接返回结果。不存在继续下一步。</p>\n</li>\n<li><p>解析查询，并创建内部数据结构（生成 解析树），然后对解析树进行各种优化（包括，重写查询，决定表的读取顺序、选择合适的索引等等）。</p>\n</li>\n<li><p>通过存储引擎存储或者提取结果。</p>\n</li>\n<li><p>如果是select操作，生成查询缓存。</p>\n</li>\n<li><p>返回结果。</p>\n</li>\n</ol>\n<p>over~</p>\n","excerpt":"<p>通常MySQL架构有两种划分，一种划为两层架构，另一种划为三层。<br>两层架构划为MySQL服务器层和存储引擎层，三层架构则把MySQL层又划为两层。</p>\n<p><img src=\"http://n.sinaimg.cn/games/3ece443e/20160916/MySQLJiaGouTu1.png\" alt=\"MySQL架构图\"></p>","more":"<h2 id=\"三层架构说明\"><a href=\"#三层架构说明\" class=\"headerlink\" title=\"三层架构说明\"></a>三层架构说明</h2><ul>\n<li><p>第一层，用于连接处理、授权认证、安全认证等等。大多数基于客户端/服务器端的工具或者服务器都有类似架构。</p>\n</li>\n<li><p>第二层，是MySQL架构的核心部分。MySQL的大部分核心服务功能大都在这一层。包括查询解析、分析、优化、缓存以及所有的内置函数的实现，还有所有的跨存储引擎的功能都在这一层实现：存储过程、触发器、试图等。</p>\n</li>\n<li><p>第三层，存储引擎层。存储引擎负责MySQL中数据的存储和读取。每个存储引擎都有自己的优势和劣势。MySQL服务器层通过API与存储引擎进行通信。存储引擎本身是不会解析SQL，且不同的存储引擎之间也是不会相互通信。</p>\n</li>\n</ul>\n<h2 id=\"MySQL服务器接收-处理一个查询请求的过程\"><a href=\"#MySQL服务器接收-处理一个查询请求的过程\" class=\"headerlink\" title=\"MySQL服务器接收/处理一个查询请求的过程\"></a>MySQL服务器接收/处理一个查询请求的过程</h2><ol>\n<li><p>当MySQL服务器接收到一个查询请求，首先会对当前的连接请求进行认证，认证其用户名和密码信息。</p>\n</li>\n<li><p>连接成功之后，会继续验证该连接是否具有执行某个特定查询的权限。</p>\n</li>\n<li><p>所有的验证都通过，如果是 select 操作，MySQL会先检查查询缓存中是否存在该缓存，如果存在直接返回结果。不存在继续下一步。</p>\n</li>\n<li><p>解析查询，并创建内部数据结构（生成 解析树），然后对解析树进行各种优化（包括，重写查询，决定表的读取顺序、选择合适的索引等等）。</p>\n</li>\n<li><p>通过存储引擎存储或者提取结果。</p>\n</li>\n<li><p>如果是select操作，生成查询缓存。</p>\n</li>\n<li><p>返回结果。</p>\n</li>\n</ol>\n<p>over~</p>"},{"title":"Nginx服务器https配置","date":"2016-10-04T13:30:00.000Z","ctime":"2016-10-04T13:30:00.000Z","utime":"2016-10-04T13:30:00.000Z","modif_times":0,"_content":"\n![Nginx服务器https配置](http://n.sinaimg.cn/games/3ece443e/20161004/https.png)\n\n<!-- more -->\n\n## 准备\n\nLinux：Linux version 3.10.0-123.9.3.el7.x86_64\nNginx：nginx/1.6.3\nopenssl：1.0.1e\n\n\n## 申请证书\n目前网上有不少机构提供个人免费 ssl 证书，有效期几个月到几年不等。以 [StartSSL :https://www.startssl.com](https://www.startssl.com) 为例, 申请成功后有效期 3 年，到期后可免费续租。\n具体申请过程也很简单。\n注册登录以后选择 Certificates Wizard >> \tDV SSL Certificate 申请一个免费的 ssl 证书。\n\n通过邮件验证域名之后，然后在自己服务器中生成 SSL 证书的 csr ，**记住生成输入的秘密**，之后要用到：\n```\nopenssl req -newkey rsa:2048 -keyout weizhimiao.cn.key -out weizhimiao.cn.csr\n```\n将生成的证书，放到指定的存放证书的目录，如 `/data/secret/` 。查看证书 `weizhimiao.csr` 内容，将内容复制到页面中的 Certificate Signing Request (CSR)部分，提交页面。\n\n下载生成好的证书,选择对应的web服务器（Nginx，1_weizhimiao.cn_bundle.crt），这样私钥和公钥我们就都有了。\n- 1_weizhimiao.cn_bundle.crt（公钥）\n- weizhimiao.cn.key（私钥）\n\n## nginx配置（为指定域名增加https）\nnginx.conf当前配置\n```\n...\nhttp {\n    ...\n    include /etc/nginx/conf.d/*.conf;\n\n    server {\n        ...\n    }\n}\n```\n\n./conf.d/weizhimiao.cn.conf中加入\n```\n\nserver{\n    listen 443 ssl;\n    server_name weizhimiao.cn;\n\n    ssl_certificate /data/secret/1_weizhimiao.cn_bundle.crt;\n    ssl_certificate_key /data/secret/weizhimiao.cn.key;\n    ssl_prefer_server_ciphers on;\n    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;\n\n    ssl_ciphers 'kEECDH+ECDSA+AES128 kEECDH+ECDSA+AES256 kEECDH+AES128 kEECDH+AES256 kEDH+AES128 kEDH+AES256 DES-CBC3-SHA +SHA !aNULL !eNULL !LOW !MD5 !EXP !DSS !PSK !SRP !kECDH !CAMELLIA !RC4 !SEED';\n\n    add_header Strict-Transport-Security 'max-age=31536000; preload';\n    add_header X-Frame-Options DENY;\n    ssl_session_cache   shared:SSL:10m;\n    ssl_session_timeout 10m;\n    keepalive_timeout 70;\n    ssl_dhparam /data/secret/dhparam.pem;\n\n    add_header X-Content-Type-Options nosniff;\n\n    add_header X-Xss-Protection 1;\n\n    root /data/www/weizhimiao.cn;\n    index index.html;\n\n    location / {\n\n    }\n}\n\n```\n**注：**\n配置中用到一个 `/data/secret/dhparam.pem` 文件，该文件是一个PEM格式的密钥文件，用于TLS会话中。用来加强ssl的安全性。生成该文件方法，\n```\ncd /data/secret/\nopenssl dhparam 2048 -out dhparam.pem\n```\n\n将原来80端口的访问，重定向。./conf.d/weizhimiao.cn.conf中加入\n```\nserver{\n    listen 80;\n    server_name  weizhimiao.cn;\n    return 301 https://weizhimiao.cn$request_uri;\n}\n\n```\n\n## 测试\n检测配置文件是否有语法错误，需要输入之前生成公钥时输入的密码。\n```\nnginx -t\nEnter PEM pass phrase:\nnginx: the configuration file /etc/nginx/nginx.conf syntax is ok\nnginx: configuration file /etc/nginx/nginx.conf test is successful\n\n```\n重启Nginx(切记，reload不起作用)\n```\nnginx -s stop\nEnter PEM pass phrase:\nnginx\nEnter PEM pass phrase:\n```\n浏览器访问 weizhimiao.cn ,是否生效。\n\n另，Nginx配置了安全证书之后，nginx每次的reload、stop等操作都需要输入密码。\n可以通过生成一个解密的key文件，替代原来key文件。\n```\ncd /data/secret/\nopenssl rsa -in weizhimiao.cn.key -out weizhimiao.cn.key.unsecure\n```\n替换 `weizhimiao.cn.conf` 中的 `weizhimiao.cn.key` 文件.\n```\nserver {\n  ...\n  ssl_certificate /data/secret/1_weizhimiao.cn_bundle.crt;\n  ssl_certificate_key /data/secret/weizhimiao.cn.key.unsecure;\n  ...\n}\n```\n之后每次在reload时，就不需要在输入密码了。\n\n\n最后，用 [SSLLABS](https://www.ssllabs.com/ssltest/index.html) 来进行一下测试。\n![ssllabs](http://n.sinaimg.cn/games/3ece443e/20161004/ssllabs.png)\n结果\n![ssllabs](http://n.sinaimg.cn/games/3ece443e/20161004/ssllabsres.png)\n\n\n\n\nover~\n","source":"_posts/Nginx服务器https配置.md","raw":"---\ntitle: Nginx服务器https配置\ndate: 2016-10-04 21:30:00\nctime: 2016-10-04 21:30:00\nutime: 2016-10-04 21:30:00\nmodif_times: 0\ntags:\n- https\ncategories:\n- Nginx\n---\n\n![Nginx服务器https配置](http://n.sinaimg.cn/games/3ece443e/20161004/https.png)\n\n<!-- more -->\n\n## 准备\n\nLinux：Linux version 3.10.0-123.9.3.el7.x86_64\nNginx：nginx/1.6.3\nopenssl：1.0.1e\n\n\n## 申请证书\n目前网上有不少机构提供个人免费 ssl 证书，有效期几个月到几年不等。以 [StartSSL :https://www.startssl.com](https://www.startssl.com) 为例, 申请成功后有效期 3 年，到期后可免费续租。\n具体申请过程也很简单。\n注册登录以后选择 Certificates Wizard >> \tDV SSL Certificate 申请一个免费的 ssl 证书。\n\n通过邮件验证域名之后，然后在自己服务器中生成 SSL 证书的 csr ，**记住生成输入的秘密**，之后要用到：\n```\nopenssl req -newkey rsa:2048 -keyout weizhimiao.cn.key -out weizhimiao.cn.csr\n```\n将生成的证书，放到指定的存放证书的目录，如 `/data/secret/` 。查看证书 `weizhimiao.csr` 内容，将内容复制到页面中的 Certificate Signing Request (CSR)部分，提交页面。\n\n下载生成好的证书,选择对应的web服务器（Nginx，1_weizhimiao.cn_bundle.crt），这样私钥和公钥我们就都有了。\n- 1_weizhimiao.cn_bundle.crt（公钥）\n- weizhimiao.cn.key（私钥）\n\n## nginx配置（为指定域名增加https）\nnginx.conf当前配置\n```\n...\nhttp {\n    ...\n    include /etc/nginx/conf.d/*.conf;\n\n    server {\n        ...\n    }\n}\n```\n\n./conf.d/weizhimiao.cn.conf中加入\n```\n\nserver{\n    listen 443 ssl;\n    server_name weizhimiao.cn;\n\n    ssl_certificate /data/secret/1_weizhimiao.cn_bundle.crt;\n    ssl_certificate_key /data/secret/weizhimiao.cn.key;\n    ssl_prefer_server_ciphers on;\n    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;\n\n    ssl_ciphers 'kEECDH+ECDSA+AES128 kEECDH+ECDSA+AES256 kEECDH+AES128 kEECDH+AES256 kEDH+AES128 kEDH+AES256 DES-CBC3-SHA +SHA !aNULL !eNULL !LOW !MD5 !EXP !DSS !PSK !SRP !kECDH !CAMELLIA !RC4 !SEED';\n\n    add_header Strict-Transport-Security 'max-age=31536000; preload';\n    add_header X-Frame-Options DENY;\n    ssl_session_cache   shared:SSL:10m;\n    ssl_session_timeout 10m;\n    keepalive_timeout 70;\n    ssl_dhparam /data/secret/dhparam.pem;\n\n    add_header X-Content-Type-Options nosniff;\n\n    add_header X-Xss-Protection 1;\n\n    root /data/www/weizhimiao.cn;\n    index index.html;\n\n    location / {\n\n    }\n}\n\n```\n**注：**\n配置中用到一个 `/data/secret/dhparam.pem` 文件，该文件是一个PEM格式的密钥文件，用于TLS会话中。用来加强ssl的安全性。生成该文件方法，\n```\ncd /data/secret/\nopenssl dhparam 2048 -out dhparam.pem\n```\n\n将原来80端口的访问，重定向。./conf.d/weizhimiao.cn.conf中加入\n```\nserver{\n    listen 80;\n    server_name  weizhimiao.cn;\n    return 301 https://weizhimiao.cn$request_uri;\n}\n\n```\n\n## 测试\n检测配置文件是否有语法错误，需要输入之前生成公钥时输入的密码。\n```\nnginx -t\nEnter PEM pass phrase:\nnginx: the configuration file /etc/nginx/nginx.conf syntax is ok\nnginx: configuration file /etc/nginx/nginx.conf test is successful\n\n```\n重启Nginx(切记，reload不起作用)\n```\nnginx -s stop\nEnter PEM pass phrase:\nnginx\nEnter PEM pass phrase:\n```\n浏览器访问 weizhimiao.cn ,是否生效。\n\n另，Nginx配置了安全证书之后，nginx每次的reload、stop等操作都需要输入密码。\n可以通过生成一个解密的key文件，替代原来key文件。\n```\ncd /data/secret/\nopenssl rsa -in weizhimiao.cn.key -out weizhimiao.cn.key.unsecure\n```\n替换 `weizhimiao.cn.conf` 中的 `weizhimiao.cn.key` 文件.\n```\nserver {\n  ...\n  ssl_certificate /data/secret/1_weizhimiao.cn_bundle.crt;\n  ssl_certificate_key /data/secret/weizhimiao.cn.key.unsecure;\n  ...\n}\n```\n之后每次在reload时，就不需要在输入密码了。\n\n\n最后，用 [SSLLABS](https://www.ssllabs.com/ssltest/index.html) 来进行一下测试。\n![ssllabs](http://n.sinaimg.cn/games/3ece443e/20161004/ssllabs.png)\n结果\n![ssllabs](http://n.sinaimg.cn/games/3ece443e/20161004/ssllabsres.png)\n\n\n\n\nover~\n","slug":"Nginx服务器https配置","published":1,"updated":"2016-10-04T14:38:23.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"city8vnnv001dg29fzxgplkef","content":"<p><img src=\"http://n.sinaimg.cn/games/3ece443e/20161004/https.png\" alt=\"Nginx服务器https配置\"></p>\n<a id=\"more\"></a>\n<h2 id=\"准备\"><a href=\"#准备\" class=\"headerlink\" title=\"准备\"></a>准备</h2><p>Linux：Linux version 3.10.0-123.9.3.el7.x86_64<br>Nginx：nginx/1.6.3<br>openssl：1.0.1e</p>\n<h2 id=\"申请证书\"><a href=\"#申请证书\" class=\"headerlink\" title=\"申请证书\"></a>申请证书</h2><p>目前网上有不少机构提供个人免费 ssl 证书，有效期几个月到几年不等。以 <a href=\"https://www.startssl.com\" target=\"_blank\" rel=\"external\">StartSSL :https://www.startssl.com</a> 为例, 申请成功后有效期 3 年，到期后可免费续租。<br>具体申请过程也很简单。<br>注册登录以后选择 Certificates Wizard &gt;&gt;     DV SSL Certificate 申请一个免费的 ssl 证书。</p>\n<p>通过邮件验证域名之后，然后在自己服务器中生成 SSL 证书的 csr ，<strong>记住生成输入的秘密</strong>，之后要用到：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">openssl req -newkey rsa:2048 -keyout weizhimiao.cn.key -out weizhimiao.cn.csr</div></pre></td></tr></table></figure></p>\n<p>将生成的证书，放到指定的存放证书的目录，如 <code>/data/secret/</code> 。查看证书 <code>weizhimiao.csr</code> 内容，将内容复制到页面中的 Certificate Signing Request (CSR)部分，提交页面。</p>\n<p>下载生成好的证书,选择对应的web服务器（Nginx，1_weizhimiao.cn_bundle.crt），这样私钥和公钥我们就都有了。</p>\n<ul>\n<li>1_weizhimiao.cn_bundle.crt（公钥）</li>\n<li>weizhimiao.cn.key（私钥）</li>\n</ul>\n<h2 id=\"nginx配置（为指定域名增加https）\"><a href=\"#nginx配置（为指定域名增加https）\" class=\"headerlink\" title=\"nginx配置（为指定域名增加https）\"></a>nginx配置（为指定域名增加https）</h2><p>nginx.conf当前配置<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">...</div><div class=\"line\">http &#123;</div><div class=\"line\">    ...</div><div class=\"line\">    include /etc/nginx/conf.d/*.conf;</div><div class=\"line\"></div><div class=\"line\">    server &#123;</div><div class=\"line\">        ...</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>./conf.d/weizhimiao.cn.conf中加入<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">server&#123;</div><div class=\"line\">    listen 443 ssl;</div><div class=\"line\">    server_name weizhimiao.cn;</div><div class=\"line\"></div><div class=\"line\">    ssl_certificate /data/secret/1_weizhimiao.cn_bundle.crt;</div><div class=\"line\">    ssl_certificate_key /data/secret/weizhimiao.cn.key;</div><div class=\"line\">    ssl_prefer_server_ciphers on;</div><div class=\"line\">    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;</div><div class=\"line\"></div><div class=\"line\">    ssl_ciphers &apos;kEECDH+ECDSA+AES128 kEECDH+ECDSA+AES256 kEECDH+AES128 kEECDH+AES256 kEDH+AES128 kEDH+AES256 DES-CBC3-SHA +SHA !aNULL !eNULL !LOW !MD5 !EXP !DSS !PSK !SRP !kECDH !CAMELLIA !RC4 !SEED&apos;;</div><div class=\"line\"></div><div class=\"line\">    add_header Strict-Transport-Security &apos;max-age=31536000; preload&apos;;</div><div class=\"line\">    add_header X-Frame-Options DENY;</div><div class=\"line\">    ssl_session_cache   shared:SSL:10m;</div><div class=\"line\">    ssl_session_timeout 10m;</div><div class=\"line\">    keepalive_timeout 70;</div><div class=\"line\">    ssl_dhparam /data/secret/dhparam.pem;</div><div class=\"line\"></div><div class=\"line\">    add_header X-Content-Type-Options nosniff;</div><div class=\"line\"></div><div class=\"line\">    add_header X-Xss-Protection 1;</div><div class=\"line\"></div><div class=\"line\">    root /data/www/weizhimiao.cn;</div><div class=\"line\">    index index.html;</div><div class=\"line\"></div><div class=\"line\">    location / &#123;</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p><strong>注：</strong><br>配置中用到一个 <code>/data/secret/dhparam.pem</code> 文件，该文件是一个PEM格式的密钥文件，用于TLS会话中。用来加强ssl的安全性。生成该文件方法，<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">cd /data/secret/</div><div class=\"line\">openssl dhparam 2048 -out dhparam.pem</div></pre></td></tr></table></figure></p>\n<p>将原来80端口的访问，重定向。./conf.d/weizhimiao.cn.conf中加入<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">server&#123;</div><div class=\"line\">    listen 80;</div><div class=\"line\">    server_name  weizhimiao.cn;</div><div class=\"line\">    return 301 https://weizhimiao.cn$request_uri;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h2 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h2><p>检测配置文件是否有语法错误，需要输入之前生成公钥时输入的密码。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">nginx -t</div><div class=\"line\">Enter PEM pass phrase:</div><div class=\"line\">nginx: the configuration file /etc/nginx/nginx.conf syntax is ok</div><div class=\"line\">nginx: configuration file /etc/nginx/nginx.conf test is successful</div></pre></td></tr></table></figure></p>\n<p>重启Nginx(切记，reload不起作用)<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">nginx -s stop</div><div class=\"line\">Enter PEM pass phrase:</div><div class=\"line\">nginx</div><div class=\"line\">Enter PEM pass phrase:</div></pre></td></tr></table></figure></p>\n<p>浏览器访问 weizhimiao.cn ,是否生效。</p>\n<p>另，Nginx配置了安全证书之后，nginx每次的reload、stop等操作都需要输入密码。<br>可以通过生成一个解密的key文件，替代原来key文件。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">cd /data/secret/</div><div class=\"line\">openssl rsa -in weizhimiao.cn.key -out weizhimiao.cn.key.unsecure</div></pre></td></tr></table></figure></p>\n<p>替换 <code>weizhimiao.cn.conf</code> 中的 <code>weizhimiao.cn.key</code> 文件.<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">server &#123;</div><div class=\"line\">  ...</div><div class=\"line\">  ssl_certificate /data/secret/1_weizhimiao.cn_bundle.crt;</div><div class=\"line\">  ssl_certificate_key /data/secret/weizhimiao.cn.key.unsecure;</div><div class=\"line\">  ...</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>之后每次在reload时，就不需要在输入密码了。</p>\n<p>最后，用 <a href=\"https://www.ssllabs.com/ssltest/index.html\" target=\"_blank\" rel=\"external\">SSLLABS</a> 来进行一下测试。<br><img src=\"http://n.sinaimg.cn/games/3ece443e/20161004/ssllabs.png\" alt=\"ssllabs\"><br>结果<br><img src=\"http://n.sinaimg.cn/games/3ece443e/20161004/ssllabsres.png\" alt=\"ssllabs\"></p>\n<p>over~</p>\n","excerpt":"<p><img src=\"http://n.sinaimg.cn/games/3ece443e/20161004/https.png\" alt=\"Nginx服务器https配置\"></p>","more":"<h2 id=\"准备\"><a href=\"#准备\" class=\"headerlink\" title=\"准备\"></a>准备</h2><p>Linux：Linux version 3.10.0-123.9.3.el7.x86_64<br>Nginx：nginx/1.6.3<br>openssl：1.0.1e</p>\n<h2 id=\"申请证书\"><a href=\"#申请证书\" class=\"headerlink\" title=\"申请证书\"></a>申请证书</h2><p>目前网上有不少机构提供个人免费 ssl 证书，有效期几个月到几年不等。以 <a href=\"https://www.startssl.com\">StartSSL :https://www.startssl.com</a> 为例, 申请成功后有效期 3 年，到期后可免费续租。<br>具体申请过程也很简单。<br>注册登录以后选择 Certificates Wizard &gt;&gt;     DV SSL Certificate 申请一个免费的 ssl 证书。</p>\n<p>通过邮件验证域名之后，然后在自己服务器中生成 SSL 证书的 csr ，<strong>记住生成输入的秘密</strong>，之后要用到：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">openssl req -newkey rsa:2048 -keyout weizhimiao.cn.key -out weizhimiao.cn.csr</div></pre></td></tr></table></figure></p>\n<p>将生成的证书，放到指定的存放证书的目录，如 <code>/data/secret/</code> 。查看证书 <code>weizhimiao.csr</code> 内容，将内容复制到页面中的 Certificate Signing Request (CSR)部分，提交页面。</p>\n<p>下载生成好的证书,选择对应的web服务器（Nginx，1_weizhimiao.cn_bundle.crt），这样私钥和公钥我们就都有了。</p>\n<ul>\n<li>1_weizhimiao.cn_bundle.crt（公钥）</li>\n<li>weizhimiao.cn.key（私钥）</li>\n</ul>\n<h2 id=\"nginx配置（为指定域名增加https）\"><a href=\"#nginx配置（为指定域名增加https）\" class=\"headerlink\" title=\"nginx配置（为指定域名增加https）\"></a>nginx配置（为指定域名增加https）</h2><p>nginx.conf当前配置<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">...</div><div class=\"line\">http &#123;</div><div class=\"line\">    ...</div><div class=\"line\">    include /etc/nginx/conf.d/*.conf;</div><div class=\"line\"></div><div class=\"line\">    server &#123;</div><div class=\"line\">        ...</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>./conf.d/weizhimiao.cn.conf中加入<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">server&#123;</div><div class=\"line\">    listen 443 ssl;</div><div class=\"line\">    server_name weizhimiao.cn;</div><div class=\"line\"></div><div class=\"line\">    ssl_certificate /data/secret/1_weizhimiao.cn_bundle.crt;</div><div class=\"line\">    ssl_certificate_key /data/secret/weizhimiao.cn.key;</div><div class=\"line\">    ssl_prefer_server_ciphers on;</div><div class=\"line\">    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;</div><div class=\"line\"></div><div class=\"line\">    ssl_ciphers &apos;kEECDH+ECDSA+AES128 kEECDH+ECDSA+AES256 kEECDH+AES128 kEECDH+AES256 kEDH+AES128 kEDH+AES256 DES-CBC3-SHA +SHA !aNULL !eNULL !LOW !MD5 !EXP !DSS !PSK !SRP !kECDH !CAMELLIA !RC4 !SEED&apos;;</div><div class=\"line\"></div><div class=\"line\">    add_header Strict-Transport-Security &apos;max-age=31536000; preload&apos;;</div><div class=\"line\">    add_header X-Frame-Options DENY;</div><div class=\"line\">    ssl_session_cache   shared:SSL:10m;</div><div class=\"line\">    ssl_session_timeout 10m;</div><div class=\"line\">    keepalive_timeout 70;</div><div class=\"line\">    ssl_dhparam /data/secret/dhparam.pem;</div><div class=\"line\"></div><div class=\"line\">    add_header X-Content-Type-Options nosniff;</div><div class=\"line\"></div><div class=\"line\">    add_header X-Xss-Protection 1;</div><div class=\"line\"></div><div class=\"line\">    root /data/www/weizhimiao.cn;</div><div class=\"line\">    index index.html;</div><div class=\"line\"></div><div class=\"line\">    location / &#123;</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p><strong>注：</strong><br>配置中用到一个 <code>/data/secret/dhparam.pem</code> 文件，该文件是一个PEM格式的密钥文件，用于TLS会话中。用来加强ssl的安全性。生成该文件方法，<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">cd /data/secret/</div><div class=\"line\">openssl dhparam 2048 -out dhparam.pem</div></pre></td></tr></table></figure></p>\n<p>将原来80端口的访问，重定向。./conf.d/weizhimiao.cn.conf中加入<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">server&#123;</div><div class=\"line\">    listen 80;</div><div class=\"line\">    server_name  weizhimiao.cn;</div><div class=\"line\">    return 301 https://weizhimiao.cn$request_uri;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h2 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h2><p>检测配置文件是否有语法错误，需要输入之前生成公钥时输入的密码。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">nginx -t</div><div class=\"line\">Enter PEM pass phrase:</div><div class=\"line\">nginx: the configuration file /etc/nginx/nginx.conf syntax is ok</div><div class=\"line\">nginx: configuration file /etc/nginx/nginx.conf test is successful</div></pre></td></tr></table></figure></p>\n<p>重启Nginx(切记，reload不起作用)<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">nginx -s stop</div><div class=\"line\">Enter PEM pass phrase:</div><div class=\"line\">nginx</div><div class=\"line\">Enter PEM pass phrase:</div></pre></td></tr></table></figure></p>\n<p>浏览器访问 weizhimiao.cn ,是否生效。</p>\n<p>另，Nginx配置了安全证书之后，nginx每次的reload、stop等操作都需要输入密码。<br>可以通过生成一个解密的key文件，替代原来key文件。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">cd /data/secret/</div><div class=\"line\">openssl rsa -in weizhimiao.cn.key -out weizhimiao.cn.key.unsecure</div></pre></td></tr></table></figure></p>\n<p>替换 <code>weizhimiao.cn.conf</code> 中的 <code>weizhimiao.cn.key</code> 文件.<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">server &#123;</div><div class=\"line\">  ...</div><div class=\"line\">  ssl_certificate /data/secret/1_weizhimiao.cn_bundle.crt;</div><div class=\"line\">  ssl_certificate_key /data/secret/weizhimiao.cn.key.unsecure;</div><div class=\"line\">  ...</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>之后每次在reload时，就不需要在输入密码了。</p>\n<p>最后，用 <a href=\"https://www.ssllabs.com/ssltest/index.html\">SSLLABS</a> 来进行一下测试。<br><img src=\"http://n.sinaimg.cn/games/3ece443e/20161004/ssllabs.png\" alt=\"ssllabs\"><br>结果<br><img src=\"http://n.sinaimg.cn/games/3ece443e/20161004/ssllabsres.png\" alt=\"ssllabs\"></p>\n<p>over~</p>"},{"title":"Nginx虚拟主机配置","date":"2016-10-04T12:30:00.000Z","ctime":"2016-10-04T12:30:00.000Z","utime":"2016-10-04T12:30:00.000Z","modif_times":0,"_content":"\n![virtual Host](http://n.sinaimg.cn/games/3ece443e/20161004/VirtualHost.png)\n\n<!-- more -->\n\n## 准备\n\nLinux：Linux version 3.10.0-123.9.3.el7.x86_64\n\nNginx: nginx/1.6.3\n\n配置文件目录结构\n```\n$ tree\n.\n├── conf.d\n├── default.d\n├── fastcgi.conf\n├── fastcgi.conf.default\n├── fastcgi_params\n├── fastcgi_params.default\n├── koi-utf\n├── koi-win\n├── mime.types\n├── mime.types.default\n├── nginx.conf\n├── nginx.conf.default\n├── scgi_params\n├── scgi_params.default\n├── uwsgi_params\n├── uwsgi_params.default\n└── win-utf\n```\n\n## 配置\n将 site1.cn 和site2.cn基于域名进行配置\n\n### 准备\n分别创建两个域名的配置文件和web根目录。\n\n./conf.d/下\n```\ncd conf.d/\ntouch site1.cn.conf\ntouch site2.cn.conf\n```\n分别创建web根目录\n```\nmkdri -p /data/www\ncd  /data/www\nmkdir site1.cn\nmkdir site2.cn\n```\n\n### 修改主配置文件nginx.conf\n```\nuser nginx;\nworker_processes auto;\nerror_log /var/log/nginx/error.log;\npid /run/nginx.pid;\n\nevents {\n    worker_connections 1024;\n}\n\nhttp {\n    log_format  main  '$remote_addr - $remote_user [$time_local] \"$request\" '\n                      '$status $body_bytes_sent \"$http_referer\" '\n                      '\"$http_user_agent\" \"$http_x_forwarded_for\"';\n\n    access_log  /var/log/nginx/access.log  main;\n\n    sendfile            on;\n    tcp_nopush          on;\n    tcp_nodelay         on;\n    keepalive_timeout   65;\n    types_hash_max_size 2048;\n\n    include             /etc/nginx/mime.types;\n    default_type        application/octet-stream;\n\n    # Load modular configuration files from the /etc/nginx/conf.d directory.\n    # See http://nginx.org/en/docs/ngx_core_module.html#include\n    # for more information.\n    include /etc/nginx/conf.d/*.conf;\n\n    server {\n        listen       80 default_server;\n        listen       [::]:80 default_server;\n        server_name  _;\n        root         /usr/share/nginx/html;\n\n        # Load configuration files for the default server block.\n        include /etc/nginx/default.d/*.conf;\n\n        location / {\n        }\n\n        error_page 404 /404.html;\n            location = /40x.html {\n        }\n\n        error_page 500 502 503 504 /50x.html;\n            location = /50x.html {\n        }\n    }\n}\n```\n确保在http的context中的server部分前面要有\n```\ninclude /etc/nginx/conf.d/*.conf;\n```\n通常情况下主配置文件中的server部分，将会是默认的server（通过添加default_server来声明），当一个请求过来，目录/etc/nginx/conf.d/中的所有server部分都匹配不了，那么这个请求将会被猪配置文件中的server来进行处理.\n\n### site1.cn\n修改配置文件\n```\nvi ./conf.d/site1.cn.conf\n```\n```\nserver {\n\tlisten\t\t80;\n\tserver_name\tsite1.cn;\n\n\terror_page  404  /404.html;\n\n\terror_page   500 503 504  /50x.html;\n\terror_log\t/var/log/nginx/debug.log debug;\n\tindex\tindex.html index.htm;\n\troot /data/www/site1.cn;\n\n\tlocation / {\n\t\tindex index.html;\n\t}\n\n  location = /favicon.ico {\n  \ttry_files $uri $uri/favicon.ico /data/www/site1.cn/favicon.ico =404;\n  }\n\n  # Deny all attempts to access hidden files such as .htaccess, .htpasswd, .DS_Store(Mac).\n  location ~ /\\. {\n      deny all;\n  }\n\n\tlocation = /50x.html {\n\t\troot   /usr/share/nginx/html;\n\t}\n\n\tlocation = /404.html {\n\t\troot   /usr/share/nginx/html;\n\t}\n}\n```\n添加测试页面\n```\ncd /data/www/site1.cn\necho \"site1.cn index.html\" >> index.html\n```\n\n### site2.cn\n修改配置文件\n```\nvi ./conf.d/site2.cn.conf\n```\n```\nserver {\n\tlisten\t\t80;\n\tserver_name\tsite2.cn;\n\n\terror_page  404  /404.html;\n\n\terror_page   500 503 504  /50x.html;\n\terror_log\t/var/log/nginx/debug.log debug;\n\tindex\tindex.html index.htm;\n\troot /data/www/site2.cn;\n\n\tlocation / {\n\t\tindex index.html;\n\t}\n\n  location = /favicon.ico {\n  \ttry_files $uri $uri/favicon.ico /data/www/site2.cn/favicon.ico =404;\n  }\n\n  # Deny all attempts to access hidden files such as .htaccess, .htpasswd, .DS_Store(Mac).\n  location ~ /\\. {\n      deny all;\n  }\n\n\tlocation = /50x.html {\n\t\troot   /usr/share/nginx/html;\n\t}\n\n\tlocation = /404.html {\n\t\troot   /usr/share/nginx/html;\n\t}\n}\n```\n添加测试页面\n```\ncd /data/www/site2.cn\necho \"site2.cn index.html\" >> index.html\n```\n\n### 重启Nginx\n重启之前，需要先进行配置文件语法检测\n```\nnginx -t\nnginx: the configuration file /etc/nginx/nginx.conf syntax is ok\nnginx: configuration file /etc/nginx/nginx.conf test is successful\n```\n确定语法无问题之后，重启Nginx\n```\nnginx -s reload\n```\n\n### 测试\nvi /etc/hosts\n添加\n```\nsite1.cn 127.0.0.1\nsite2.cn 127.0.0.1\n```\n分别访问 site1.cn和site2.cn ,查看是否输出对应内容\n```\nwget  site1.cn\ncat index.html\n#site1.cn index.html\n\nwget site2.cn\ncat index.html.2\n#site2.cn index.html\n```\n\n关于nginx学习的一个网站:http://nglua.com\n\nover~\n","source":"_posts/Nginx虚拟主机设置.md","raw":"---\ntitle: Nginx虚拟主机配置\ndate: 2016-10-04 20:30:00\nctime: 2016-10-04 20:30:00\nutime: 2016-10-04 20:30:00\nmodif_times: 0\ntags:\n- 虚拟主机\ncategories:\n- Nginx\n---\n\n![virtual Host](http://n.sinaimg.cn/games/3ece443e/20161004/VirtualHost.png)\n\n<!-- more -->\n\n## 准备\n\nLinux：Linux version 3.10.0-123.9.3.el7.x86_64\n\nNginx: nginx/1.6.3\n\n配置文件目录结构\n```\n$ tree\n.\n├── conf.d\n├── default.d\n├── fastcgi.conf\n├── fastcgi.conf.default\n├── fastcgi_params\n├── fastcgi_params.default\n├── koi-utf\n├── koi-win\n├── mime.types\n├── mime.types.default\n├── nginx.conf\n├── nginx.conf.default\n├── scgi_params\n├── scgi_params.default\n├── uwsgi_params\n├── uwsgi_params.default\n└── win-utf\n```\n\n## 配置\n将 site1.cn 和site2.cn基于域名进行配置\n\n### 准备\n分别创建两个域名的配置文件和web根目录。\n\n./conf.d/下\n```\ncd conf.d/\ntouch site1.cn.conf\ntouch site2.cn.conf\n```\n分别创建web根目录\n```\nmkdri -p /data/www\ncd  /data/www\nmkdir site1.cn\nmkdir site2.cn\n```\n\n### 修改主配置文件nginx.conf\n```\nuser nginx;\nworker_processes auto;\nerror_log /var/log/nginx/error.log;\npid /run/nginx.pid;\n\nevents {\n    worker_connections 1024;\n}\n\nhttp {\n    log_format  main  '$remote_addr - $remote_user [$time_local] \"$request\" '\n                      '$status $body_bytes_sent \"$http_referer\" '\n                      '\"$http_user_agent\" \"$http_x_forwarded_for\"';\n\n    access_log  /var/log/nginx/access.log  main;\n\n    sendfile            on;\n    tcp_nopush          on;\n    tcp_nodelay         on;\n    keepalive_timeout   65;\n    types_hash_max_size 2048;\n\n    include             /etc/nginx/mime.types;\n    default_type        application/octet-stream;\n\n    # Load modular configuration files from the /etc/nginx/conf.d directory.\n    # See http://nginx.org/en/docs/ngx_core_module.html#include\n    # for more information.\n    include /etc/nginx/conf.d/*.conf;\n\n    server {\n        listen       80 default_server;\n        listen       [::]:80 default_server;\n        server_name  _;\n        root         /usr/share/nginx/html;\n\n        # Load configuration files for the default server block.\n        include /etc/nginx/default.d/*.conf;\n\n        location / {\n        }\n\n        error_page 404 /404.html;\n            location = /40x.html {\n        }\n\n        error_page 500 502 503 504 /50x.html;\n            location = /50x.html {\n        }\n    }\n}\n```\n确保在http的context中的server部分前面要有\n```\ninclude /etc/nginx/conf.d/*.conf;\n```\n通常情况下主配置文件中的server部分，将会是默认的server（通过添加default_server来声明），当一个请求过来，目录/etc/nginx/conf.d/中的所有server部分都匹配不了，那么这个请求将会被猪配置文件中的server来进行处理.\n\n### site1.cn\n修改配置文件\n```\nvi ./conf.d/site1.cn.conf\n```\n```\nserver {\n\tlisten\t\t80;\n\tserver_name\tsite1.cn;\n\n\terror_page  404  /404.html;\n\n\terror_page   500 503 504  /50x.html;\n\terror_log\t/var/log/nginx/debug.log debug;\n\tindex\tindex.html index.htm;\n\troot /data/www/site1.cn;\n\n\tlocation / {\n\t\tindex index.html;\n\t}\n\n  location = /favicon.ico {\n  \ttry_files $uri $uri/favicon.ico /data/www/site1.cn/favicon.ico =404;\n  }\n\n  # Deny all attempts to access hidden files such as .htaccess, .htpasswd, .DS_Store(Mac).\n  location ~ /\\. {\n      deny all;\n  }\n\n\tlocation = /50x.html {\n\t\troot   /usr/share/nginx/html;\n\t}\n\n\tlocation = /404.html {\n\t\troot   /usr/share/nginx/html;\n\t}\n}\n```\n添加测试页面\n```\ncd /data/www/site1.cn\necho \"site1.cn index.html\" >> index.html\n```\n\n### site2.cn\n修改配置文件\n```\nvi ./conf.d/site2.cn.conf\n```\n```\nserver {\n\tlisten\t\t80;\n\tserver_name\tsite2.cn;\n\n\terror_page  404  /404.html;\n\n\terror_page   500 503 504  /50x.html;\n\terror_log\t/var/log/nginx/debug.log debug;\n\tindex\tindex.html index.htm;\n\troot /data/www/site2.cn;\n\n\tlocation / {\n\t\tindex index.html;\n\t}\n\n  location = /favicon.ico {\n  \ttry_files $uri $uri/favicon.ico /data/www/site2.cn/favicon.ico =404;\n  }\n\n  # Deny all attempts to access hidden files such as .htaccess, .htpasswd, .DS_Store(Mac).\n  location ~ /\\. {\n      deny all;\n  }\n\n\tlocation = /50x.html {\n\t\troot   /usr/share/nginx/html;\n\t}\n\n\tlocation = /404.html {\n\t\troot   /usr/share/nginx/html;\n\t}\n}\n```\n添加测试页面\n```\ncd /data/www/site2.cn\necho \"site2.cn index.html\" >> index.html\n```\n\n### 重启Nginx\n重启之前，需要先进行配置文件语法检测\n```\nnginx -t\nnginx: the configuration file /etc/nginx/nginx.conf syntax is ok\nnginx: configuration file /etc/nginx/nginx.conf test is successful\n```\n确定语法无问题之后，重启Nginx\n```\nnginx -s reload\n```\n\n### 测试\nvi /etc/hosts\n添加\n```\nsite1.cn 127.0.0.1\nsite2.cn 127.0.0.1\n```\n分别访问 site1.cn和site2.cn ,查看是否输出对应内容\n```\nwget  site1.cn\ncat index.html\n#site1.cn index.html\n\nwget site2.cn\ncat index.html.2\n#site2.cn index.html\n```\n\n关于nginx学习的一个网站:http://nglua.com\n\nover~\n","slug":"Nginx虚拟主机设置","published":1,"updated":"2016-10-04T14:46:59.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"city8vnnw001gg29fjiltmil0","content":"<p><img src=\"http://n.sinaimg.cn/games/3ece443e/20161004/VirtualHost.png\" alt=\"virtual Host\"></p>\n<a id=\"more\"></a>\n<h2 id=\"准备\"><a href=\"#准备\" class=\"headerlink\" title=\"准备\"></a>准备</h2><p>Linux：Linux version 3.10.0-123.9.3.el7.x86_64</p>\n<p>Nginx: nginx/1.6.3</p>\n<p>配置文件目录结构<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ tree</div><div class=\"line\">.</div><div class=\"line\">├── conf.d</div><div class=\"line\">├── default.d</div><div class=\"line\">├── fastcgi.conf</div><div class=\"line\">├── fastcgi.conf.default</div><div class=\"line\">├── fastcgi_params</div><div class=\"line\">├── fastcgi_params.default</div><div class=\"line\">├── koi-utf</div><div class=\"line\">├── koi-win</div><div class=\"line\">├── mime.types</div><div class=\"line\">├── mime.types.default</div><div class=\"line\">├── nginx.conf</div><div class=\"line\">├── nginx.conf.default</div><div class=\"line\">├── scgi_params</div><div class=\"line\">├── scgi_params.default</div><div class=\"line\">├── uwsgi_params</div><div class=\"line\">├── uwsgi_params.default</div><div class=\"line\">└── win-utf</div></pre></td></tr></table></figure></p>\n<h2 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h2><p>将 site1.cn 和site2.cn基于域名进行配置</p>\n<h3 id=\"准备-1\"><a href=\"#准备-1\" class=\"headerlink\" title=\"准备\"></a>准备</h3><p>分别创建两个域名的配置文件和web根目录。</p>\n<p>./conf.d/下<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">cd conf.d/</div><div class=\"line\">touch site1.cn.conf</div><div class=\"line\">touch site2.cn.conf</div></pre></td></tr></table></figure></p>\n<p>分别创建web根目录<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">mkdri -p /data/www</div><div class=\"line\">cd  /data/www</div><div class=\"line\">mkdir site1.cn</div><div class=\"line\">mkdir site2.cn</div></pre></td></tr></table></figure></p>\n<h3 id=\"修改主配置文件nginx-conf\"><a href=\"#修改主配置文件nginx-conf\" class=\"headerlink\" title=\"修改主配置文件nginx.conf\"></a>修改主配置文件nginx.conf</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div></pre></td><td class=\"code\"><pre><div class=\"line\">user nginx;</div><div class=\"line\">worker_processes auto;</div><div class=\"line\">error_log /var/log/nginx/error.log;</div><div class=\"line\">pid /run/nginx.pid;</div><div class=\"line\"></div><div class=\"line\">events &#123;</div><div class=\"line\">    worker_connections 1024;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">http &#123;</div><div class=\"line\">    log_format  main  &apos;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &apos;</div><div class=\"line\">                      &apos;$status $body_bytes_sent &quot;$http_referer&quot; &apos;</div><div class=\"line\">                      &apos;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&apos;;</div><div class=\"line\"></div><div class=\"line\">    access_log  /var/log/nginx/access.log  main;</div><div class=\"line\"></div><div class=\"line\">    sendfile            on;</div><div class=\"line\">    tcp_nopush          on;</div><div class=\"line\">    tcp_nodelay         on;</div><div class=\"line\">    keepalive_timeout   65;</div><div class=\"line\">    types_hash_max_size 2048;</div><div class=\"line\"></div><div class=\"line\">    include             /etc/nginx/mime.types;</div><div class=\"line\">    default_type        application/octet-stream;</div><div class=\"line\"></div><div class=\"line\">    # Load modular configuration files from the /etc/nginx/conf.d directory.</div><div class=\"line\">    # See http://nginx.org/en/docs/ngx_core_module.html#include</div><div class=\"line\">    # for more information.</div><div class=\"line\">    include /etc/nginx/conf.d/*.conf;</div><div class=\"line\"></div><div class=\"line\">    server &#123;</div><div class=\"line\">        listen       80 default_server;</div><div class=\"line\">        listen       [::]:80 default_server;</div><div class=\"line\">        server_name  _;</div><div class=\"line\">        root         /usr/share/nginx/html;</div><div class=\"line\"></div><div class=\"line\">        # Load configuration files for the default server block.</div><div class=\"line\">        include /etc/nginx/default.d/*.conf;</div><div class=\"line\"></div><div class=\"line\">        location / &#123;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        error_page 404 /404.html;</div><div class=\"line\">            location = /40x.html &#123;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        error_page 500 502 503 504 /50x.html;</div><div class=\"line\">            location = /50x.html &#123;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>确保在http的context中的server部分前面要有<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">include /etc/nginx/conf.d/*.conf;</div></pre></td></tr></table></figure></p>\n<p>通常情况下主配置文件中的server部分，将会是默认的server（通过添加default_server来声明），当一个请求过来，目录/etc/nginx/conf.d/中的所有server部分都匹配不了，那么这个请求将会被猪配置文件中的server来进行处理.</p>\n<h3 id=\"site1-cn\"><a href=\"#site1-cn\" class=\"headerlink\" title=\"site1.cn\"></a>site1.cn</h3><p>修改配置文件<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">vi ./conf.d/site1.cn.conf</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div></pre></td><td class=\"code\"><pre><div class=\"line\">server &#123;</div><div class=\"line\">\tlisten\t\t80;</div><div class=\"line\">\tserver_name\tsite1.cn;</div><div class=\"line\"></div><div class=\"line\">\terror_page  404  /404.html;</div><div class=\"line\"></div><div class=\"line\">\terror_page   500 503 504  /50x.html;</div><div class=\"line\">\terror_log\t/var/log/nginx/debug.log debug;</div><div class=\"line\">\tindex\tindex.html index.htm;</div><div class=\"line\">\troot /data/www/site1.cn;</div><div class=\"line\"></div><div class=\"line\">\tlocation / &#123;</div><div class=\"line\">\t\tindex index.html;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">  location = /favicon.ico &#123;</div><div class=\"line\">  \ttry_files $uri $uri/favicon.ico /data/www/site1.cn/favicon.ico =404;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  # Deny all attempts to access hidden files such as .htaccess, .htpasswd, .DS_Store(Mac).</div><div class=\"line\">  location ~ /\\. &#123;</div><div class=\"line\">      deny all;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">\tlocation = /50x.html &#123;</div><div class=\"line\">\t\troot   /usr/share/nginx/html;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\tlocation = /404.html &#123;</div><div class=\"line\">\t\troot   /usr/share/nginx/html;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>添加测试页面<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">cd /data/www/site1.cn</div><div class=\"line\">echo &quot;site1.cn index.html&quot; &gt;&gt; index.html</div></pre></td></tr></table></figure></p>\n<h3 id=\"site2-cn\"><a href=\"#site2-cn\" class=\"headerlink\" title=\"site2.cn\"></a>site2.cn</h3><p>修改配置文件<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">vi ./conf.d/site2.cn.conf</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div></pre></td><td class=\"code\"><pre><div class=\"line\">server &#123;</div><div class=\"line\">\tlisten\t\t80;</div><div class=\"line\">\tserver_name\tsite2.cn;</div><div class=\"line\"></div><div class=\"line\">\terror_page  404  /404.html;</div><div class=\"line\"></div><div class=\"line\">\terror_page   500 503 504  /50x.html;</div><div class=\"line\">\terror_log\t/var/log/nginx/debug.log debug;</div><div class=\"line\">\tindex\tindex.html index.htm;</div><div class=\"line\">\troot /data/www/site2.cn;</div><div class=\"line\"></div><div class=\"line\">\tlocation / &#123;</div><div class=\"line\">\t\tindex index.html;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">  location = /favicon.ico &#123;</div><div class=\"line\">  \ttry_files $uri $uri/favicon.ico /data/www/site2.cn/favicon.ico =404;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  # Deny all attempts to access hidden files such as .htaccess, .htpasswd, .DS_Store(Mac).</div><div class=\"line\">  location ~ /\\. &#123;</div><div class=\"line\">      deny all;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">\tlocation = /50x.html &#123;</div><div class=\"line\">\t\troot   /usr/share/nginx/html;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\tlocation = /404.html &#123;</div><div class=\"line\">\t\troot   /usr/share/nginx/html;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>添加测试页面<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">cd /data/www/site2.cn</div><div class=\"line\">echo &quot;site2.cn index.html&quot; &gt;&gt; index.html</div></pre></td></tr></table></figure></p>\n<h3 id=\"重启Nginx\"><a href=\"#重启Nginx\" class=\"headerlink\" title=\"重启Nginx\"></a>重启Nginx</h3><p>重启之前，需要先进行配置文件语法检测<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">nginx -t</div><div class=\"line\">nginx: the configuration file /etc/nginx/nginx.conf syntax is ok</div><div class=\"line\">nginx: configuration file /etc/nginx/nginx.conf test is successful</div></pre></td></tr></table></figure></p>\n<p>确定语法无问题之后，重启Nginx<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">nginx -s reload</div></pre></td></tr></table></figure></p>\n<h3 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h3><p>vi /etc/hosts<br>添加<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">site1.cn 127.0.0.1</div><div class=\"line\">site2.cn 127.0.0.1</div></pre></td></tr></table></figure></p>\n<p>分别访问 site1.cn和site2.cn ,查看是否输出对应内容<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">wget  site1.cn</div><div class=\"line\">cat index.html</div><div class=\"line\">#site1.cn index.html</div><div class=\"line\"></div><div class=\"line\">wget site2.cn</div><div class=\"line\">cat index.html.2</div><div class=\"line\">#site2.cn index.html</div></pre></td></tr></table></figure></p>\n<p>关于nginx学习的一个网站:<a href=\"http://nglua.com\" target=\"_blank\" rel=\"external\">http://nglua.com</a></p>\n<p>over~</p>\n","excerpt":"<p><img src=\"http://n.sinaimg.cn/games/3ece443e/20161004/VirtualHost.png\" alt=\"virtual Host\"></p>","more":"<h2 id=\"准备\"><a href=\"#准备\" class=\"headerlink\" title=\"准备\"></a>准备</h2><p>Linux：Linux version 3.10.0-123.9.3.el7.x86_64</p>\n<p>Nginx: nginx/1.6.3</p>\n<p>配置文件目录结构<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ tree</div><div class=\"line\">.</div><div class=\"line\">├── conf.d</div><div class=\"line\">├── default.d</div><div class=\"line\">├── fastcgi.conf</div><div class=\"line\">├── fastcgi.conf.default</div><div class=\"line\">├── fastcgi_params</div><div class=\"line\">├── fastcgi_params.default</div><div class=\"line\">├── koi-utf</div><div class=\"line\">├── koi-win</div><div class=\"line\">├── mime.types</div><div class=\"line\">├── mime.types.default</div><div class=\"line\">├── nginx.conf</div><div class=\"line\">├── nginx.conf.default</div><div class=\"line\">├── scgi_params</div><div class=\"line\">├── scgi_params.default</div><div class=\"line\">├── uwsgi_params</div><div class=\"line\">├── uwsgi_params.default</div><div class=\"line\">└── win-utf</div></pre></td></tr></table></figure></p>\n<h2 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h2><p>将 site1.cn 和site2.cn基于域名进行配置</p>\n<h3 id=\"准备-1\"><a href=\"#准备-1\" class=\"headerlink\" title=\"准备\"></a>准备</h3><p>分别创建两个域名的配置文件和web根目录。</p>\n<p>./conf.d/下<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">cd conf.d/</div><div class=\"line\">touch site1.cn.conf</div><div class=\"line\">touch site2.cn.conf</div></pre></td></tr></table></figure></p>\n<p>分别创建web根目录<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">mkdri -p /data/www</div><div class=\"line\">cd  /data/www</div><div class=\"line\">mkdir site1.cn</div><div class=\"line\">mkdir site2.cn</div></pre></td></tr></table></figure></p>\n<h3 id=\"修改主配置文件nginx-conf\"><a href=\"#修改主配置文件nginx-conf\" class=\"headerlink\" title=\"修改主配置文件nginx.conf\"></a>修改主配置文件nginx.conf</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div></pre></td><td class=\"code\"><pre><div class=\"line\">user nginx;</div><div class=\"line\">worker_processes auto;</div><div class=\"line\">error_log /var/log/nginx/error.log;</div><div class=\"line\">pid /run/nginx.pid;</div><div class=\"line\"></div><div class=\"line\">events &#123;</div><div class=\"line\">    worker_connections 1024;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">http &#123;</div><div class=\"line\">    log_format  main  &apos;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &apos;</div><div class=\"line\">                      &apos;$status $body_bytes_sent &quot;$http_referer&quot; &apos;</div><div class=\"line\">                      &apos;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&apos;;</div><div class=\"line\"></div><div class=\"line\">    access_log  /var/log/nginx/access.log  main;</div><div class=\"line\"></div><div class=\"line\">    sendfile            on;</div><div class=\"line\">    tcp_nopush          on;</div><div class=\"line\">    tcp_nodelay         on;</div><div class=\"line\">    keepalive_timeout   65;</div><div class=\"line\">    types_hash_max_size 2048;</div><div class=\"line\"></div><div class=\"line\">    include             /etc/nginx/mime.types;</div><div class=\"line\">    default_type        application/octet-stream;</div><div class=\"line\"></div><div class=\"line\">    # Load modular configuration files from the /etc/nginx/conf.d directory.</div><div class=\"line\">    # See http://nginx.org/en/docs/ngx_core_module.html#include</div><div class=\"line\">    # for more information.</div><div class=\"line\">    include /etc/nginx/conf.d/*.conf;</div><div class=\"line\"></div><div class=\"line\">    server &#123;</div><div class=\"line\">        listen       80 default_server;</div><div class=\"line\">        listen       [::]:80 default_server;</div><div class=\"line\">        server_name  _;</div><div class=\"line\">        root         /usr/share/nginx/html;</div><div class=\"line\"></div><div class=\"line\">        # Load configuration files for the default server block.</div><div class=\"line\">        include /etc/nginx/default.d/*.conf;</div><div class=\"line\"></div><div class=\"line\">        location / &#123;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        error_page 404 /404.html;</div><div class=\"line\">            location = /40x.html &#123;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        error_page 500 502 503 504 /50x.html;</div><div class=\"line\">            location = /50x.html &#123;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>确保在http的context中的server部分前面要有<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">include /etc/nginx/conf.d/*.conf;</div></pre></td></tr></table></figure></p>\n<p>通常情况下主配置文件中的server部分，将会是默认的server（通过添加default_server来声明），当一个请求过来，目录/etc/nginx/conf.d/中的所有server部分都匹配不了，那么这个请求将会被猪配置文件中的server来进行处理.</p>\n<h3 id=\"site1-cn\"><a href=\"#site1-cn\" class=\"headerlink\" title=\"site1.cn\"></a>site1.cn</h3><p>修改配置文件<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">vi ./conf.d/site1.cn.conf</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div></pre></td><td class=\"code\"><pre><div class=\"line\">server &#123;</div><div class=\"line\">\tlisten\t\t80;</div><div class=\"line\">\tserver_name\tsite1.cn;</div><div class=\"line\"></div><div class=\"line\">\terror_page  404  /404.html;</div><div class=\"line\"></div><div class=\"line\">\terror_page   500 503 504  /50x.html;</div><div class=\"line\">\terror_log\t/var/log/nginx/debug.log debug;</div><div class=\"line\">\tindex\tindex.html index.htm;</div><div class=\"line\">\troot /data/www/site1.cn;</div><div class=\"line\"></div><div class=\"line\">\tlocation / &#123;</div><div class=\"line\">\t\tindex index.html;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">  location = /favicon.ico &#123;</div><div class=\"line\">  \ttry_files $uri $uri/favicon.ico /data/www/site1.cn/favicon.ico =404;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  # Deny all attempts to access hidden files such as .htaccess, .htpasswd, .DS_Store(Mac).</div><div class=\"line\">  location ~ /\\. &#123;</div><div class=\"line\">      deny all;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">\tlocation = /50x.html &#123;</div><div class=\"line\">\t\troot   /usr/share/nginx/html;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\tlocation = /404.html &#123;</div><div class=\"line\">\t\troot   /usr/share/nginx/html;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>添加测试页面<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">cd /data/www/site1.cn</div><div class=\"line\">echo &quot;site1.cn index.html&quot; &gt;&gt; index.html</div></pre></td></tr></table></figure></p>\n<h3 id=\"site2-cn\"><a href=\"#site2-cn\" class=\"headerlink\" title=\"site2.cn\"></a>site2.cn</h3><p>修改配置文件<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">vi ./conf.d/site2.cn.conf</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div></pre></td><td class=\"code\"><pre><div class=\"line\">server &#123;</div><div class=\"line\">\tlisten\t\t80;</div><div class=\"line\">\tserver_name\tsite2.cn;</div><div class=\"line\"></div><div class=\"line\">\terror_page  404  /404.html;</div><div class=\"line\"></div><div class=\"line\">\terror_page   500 503 504  /50x.html;</div><div class=\"line\">\terror_log\t/var/log/nginx/debug.log debug;</div><div class=\"line\">\tindex\tindex.html index.htm;</div><div class=\"line\">\troot /data/www/site2.cn;</div><div class=\"line\"></div><div class=\"line\">\tlocation / &#123;</div><div class=\"line\">\t\tindex index.html;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">  location = /favicon.ico &#123;</div><div class=\"line\">  \ttry_files $uri $uri/favicon.ico /data/www/site2.cn/favicon.ico =404;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  # Deny all attempts to access hidden files such as .htaccess, .htpasswd, .DS_Store(Mac).</div><div class=\"line\">  location ~ /\\. &#123;</div><div class=\"line\">      deny all;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">\tlocation = /50x.html &#123;</div><div class=\"line\">\t\troot   /usr/share/nginx/html;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\tlocation = /404.html &#123;</div><div class=\"line\">\t\troot   /usr/share/nginx/html;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>添加测试页面<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">cd /data/www/site2.cn</div><div class=\"line\">echo &quot;site2.cn index.html&quot; &gt;&gt; index.html</div></pre></td></tr></table></figure></p>\n<h3 id=\"重启Nginx\"><a href=\"#重启Nginx\" class=\"headerlink\" title=\"重启Nginx\"></a>重启Nginx</h3><p>重启之前，需要先进行配置文件语法检测<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">nginx -t</div><div class=\"line\">nginx: the configuration file /etc/nginx/nginx.conf syntax is ok</div><div class=\"line\">nginx: configuration file /etc/nginx/nginx.conf test is successful</div></pre></td></tr></table></figure></p>\n<p>确定语法无问题之后，重启Nginx<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">nginx -s reload</div></pre></td></tr></table></figure></p>\n<h3 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h3><p>vi /etc/hosts<br>添加<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">site1.cn 127.0.0.1</div><div class=\"line\">site2.cn 127.0.0.1</div></pre></td></tr></table></figure></p>\n<p>分别访问 site1.cn和site2.cn ,查看是否输出对应内容<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">wget  site1.cn</div><div class=\"line\">cat index.html</div><div class=\"line\">#site1.cn index.html</div><div class=\"line\"></div><div class=\"line\">wget site2.cn</div><div class=\"line\">cat index.html.2</div><div class=\"line\">#site2.cn index.html</div></pre></td></tr></table></figure></p>\n<p>关于nginx学习的一个网站:<a href=\"http://nglua.com\">http://nglua.com</a></p>\n<p>over~</p>"},{"title":"Nginx运行状态监控","date":"2016-09-27T14:30:00.000Z","_content":"\nNginx可以通过stub_status模块来查看服务器的状态信息。\n\n<!-- more -->\n## 安装stub_status模块\n查看服务器当前是否已经编译安装过stub_status模块\n```\n/usr/local/nginx/sbin/nginx -V\nnginx version: nginx/1.11.4\nbuilt by gcc 4.8.5 20150623 (Red Hat 4.8.5-4) (GCC)\nconfigure arguments: --prefix=/usr/local/nginx\n```\n安装 stub_status 模块\n\n解压相应版本的nginx源码包，\n```\ncd nginx-1.11.4\n```\n配置\n```\n./configure --prefix=/usr/local/nginx --with-http_stub_status_module\n```\n编译（不执行make install操作）\n```\nmake\n```\n手动替换 nginx 执行文件\n```\nmv /usr/local/nginx/sbin/nginx /usr/local/nginx/sbin/nginx.bak\ncp ./objs/nginx /usr/local/nginx/sbin/\n```\n查看是否安装成功\n```\n/usr/local/nginx/sbin/nginx -V\nnginx version: nginx/1.11.4\nbuilt by gcc 4.8.5 20150623 (Red Hat 4.8.5-4) (GCC)\nconfigure arguments: --prefix=/usr/local/nginx --with-http_stub_status_module\n```\n\n## 启用nginx status配置\n\n修改配置\n```\nvi /usr/local/nginx/conf/nginx.conf\n```\n加入配置\n```\nlocation /ngx_status\n{\n    stub_status on;\n    access_log off;\n    allow all;\n    #deny all;\n}\n```\n重启nginx\n```\n# /usr/local/nginx/sbin/nginx -s reload 可能或有问题，所以先停止当前nginx进程，然后在重启。\n/usr/local/nginx/sbin/nginx -s stop\n/usr/local/nginx/sbin/nginx\n```\n\n## 测试\n\n浏览器或者curl访问\n\nhttp://120.76.250.101/ngx_status\n或\n```\ncurl 127.0.0.1/ngx_status\nActive connections: 1\nserver accepts handled requests\n 2 2 2\nReading: 0 Writing: 1 Waiting: 0\n```\n\n参数说明\n\n参数 | 说明\n----|-----\nActive connections | 活跃的连接数量\nserver accepts handled requests | 2 2 2 表示总共处理了2个连接 , 成功创建2次握手, 总共处理了2个请求\nreading | 读取客户端的连接数.\nwriting | 响应数据到客户端的数量\nwaiting | 开启 keep-alive 的情况下,这个值等于 active – (reading+writing), 意思就是 Nginx 已经处理完正在等候下一次请求指令的驻留连接.\n\nover~\n","source":"_posts/Nginx运行状态监控.md","raw":"---\ntitle: Nginx运行状态监控\ndate: 2016-09-27 22:30:00\ntags:\n- 监控\ncategories:\n- Nginx\n---\n\nNginx可以通过stub_status模块来查看服务器的状态信息。\n\n<!-- more -->\n## 安装stub_status模块\n查看服务器当前是否已经编译安装过stub_status模块\n```\n/usr/local/nginx/sbin/nginx -V\nnginx version: nginx/1.11.4\nbuilt by gcc 4.8.5 20150623 (Red Hat 4.8.5-4) (GCC)\nconfigure arguments: --prefix=/usr/local/nginx\n```\n安装 stub_status 模块\n\n解压相应版本的nginx源码包，\n```\ncd nginx-1.11.4\n```\n配置\n```\n./configure --prefix=/usr/local/nginx --with-http_stub_status_module\n```\n编译（不执行make install操作）\n```\nmake\n```\n手动替换 nginx 执行文件\n```\nmv /usr/local/nginx/sbin/nginx /usr/local/nginx/sbin/nginx.bak\ncp ./objs/nginx /usr/local/nginx/sbin/\n```\n查看是否安装成功\n```\n/usr/local/nginx/sbin/nginx -V\nnginx version: nginx/1.11.4\nbuilt by gcc 4.8.5 20150623 (Red Hat 4.8.5-4) (GCC)\nconfigure arguments: --prefix=/usr/local/nginx --with-http_stub_status_module\n```\n\n## 启用nginx status配置\n\n修改配置\n```\nvi /usr/local/nginx/conf/nginx.conf\n```\n加入配置\n```\nlocation /ngx_status\n{\n    stub_status on;\n    access_log off;\n    allow all;\n    #deny all;\n}\n```\n重启nginx\n```\n# /usr/local/nginx/sbin/nginx -s reload 可能或有问题，所以先停止当前nginx进程，然后在重启。\n/usr/local/nginx/sbin/nginx -s stop\n/usr/local/nginx/sbin/nginx\n```\n\n## 测试\n\n浏览器或者curl访问\n\nhttp://120.76.250.101/ngx_status\n或\n```\ncurl 127.0.0.1/ngx_status\nActive connections: 1\nserver accepts handled requests\n 2 2 2\nReading: 0 Writing: 1 Waiting: 0\n```\n\n参数说明\n\n参数 | 说明\n----|-----\nActive connections | 活跃的连接数量\nserver accepts handled requests | 2 2 2 表示总共处理了2个连接 , 成功创建2次握手, 总共处理了2个请求\nreading | 读取客户端的连接数.\nwriting | 响应数据到客户端的数量\nwaiting | 开启 keep-alive 的情况下,这个值等于 active – (reading+writing), 意思就是 Nginx 已经处理完正在等候下一次请求指令的驻留连接.\n\nover~\n","slug":"Nginx运行状态监控","published":1,"updated":"2016-09-27T09:41:45.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"city8vno0001kg29frzlavyp3","content":"<p>Nginx可以通过stub_status模块来查看服务器的状态信息。</p>\n<a id=\"more\"></a>\n<h2 id=\"安装stub-status模块\"><a href=\"#安装stub-status模块\" class=\"headerlink\" title=\"安装stub_status模块\"></a>安装stub_status模块</h2><p>查看服务器当前是否已经编译安装过stub_status模块<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">/usr/local/nginx/sbin/nginx -V</div><div class=\"line\">nginx version: nginx/1.11.4</div><div class=\"line\">built by gcc 4.8.5 20150623 (Red Hat 4.8.5-4) (GCC)</div><div class=\"line\">configure arguments: --prefix=/usr/local/nginx</div></pre></td></tr></table></figure></p>\n<p>安装 stub_status 模块</p>\n<p>解压相应版本的nginx源码包，<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">cd nginx-1.11.4</div></pre></td></tr></table></figure></p>\n<p>配置<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">./configure --prefix=/usr/local/nginx --with-http_stub_status_module</div></pre></td></tr></table></figure></p>\n<p>编译（不执行make install操作）<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">make</div></pre></td></tr></table></figure></p>\n<p>手动替换 nginx 执行文件<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">mv /usr/local/nginx/sbin/nginx /usr/local/nginx/sbin/nginx.bak</div><div class=\"line\">cp ./objs/nginx /usr/local/nginx/sbin/</div></pre></td></tr></table></figure></p>\n<p>查看是否安装成功<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">/usr/local/nginx/sbin/nginx -V</div><div class=\"line\">nginx version: nginx/1.11.4</div><div class=\"line\">built by gcc 4.8.5 20150623 (Red Hat 4.8.5-4) (GCC)</div><div class=\"line\">configure arguments: --prefix=/usr/local/nginx --with-http_stub_status_module</div></pre></td></tr></table></figure></p>\n<h2 id=\"启用nginx-status配置\"><a href=\"#启用nginx-status配置\" class=\"headerlink\" title=\"启用nginx status配置\"></a>启用nginx status配置</h2><p>修改配置<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">vi /usr/local/nginx/conf/nginx.conf</div></pre></td></tr></table></figure></p>\n<p>加入配置<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">location /ngx_status</div><div class=\"line\">&#123;</div><div class=\"line\">    stub_status on;</div><div class=\"line\">    access_log off;</div><div class=\"line\">    allow all;</div><div class=\"line\">    #deny all;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>重启nginx<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"># /usr/local/nginx/sbin/nginx -s reload 可能或有问题，所以先停止当前nginx进程，然后在重启。</div><div class=\"line\">/usr/local/nginx/sbin/nginx -s stop</div><div class=\"line\">/usr/local/nginx/sbin/nginx</div></pre></td></tr></table></figure></p>\n<h2 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h2><p>浏览器或者curl访问</p>\n<p><a href=\"http://120.76.250.101/ngx_status\" target=\"_blank\" rel=\"external\">http://120.76.250.101/ngx_status</a><br>或<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">curl 127.0.0.1/ngx_status</div><div class=\"line\">Active connections: 1</div><div class=\"line\">server accepts handled requests</div><div class=\"line\"> 2 2 2</div><div class=\"line\">Reading: 0 Writing: 1 Waiting: 0</div></pre></td></tr></table></figure></p>\n<p>参数说明</p>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Active connections</td>\n<td>活跃的连接数量</td>\n</tr>\n<tr>\n<td>server accepts handled requests</td>\n<td>2 2 2 表示总共处理了2个连接 , 成功创建2次握手, 总共处理了2个请求</td>\n</tr>\n<tr>\n<td>reading</td>\n<td>读取客户端的连接数.</td>\n</tr>\n<tr>\n<td>writing</td>\n<td>响应数据到客户端的数量</td>\n</tr>\n<tr>\n<td>waiting</td>\n<td>开启 keep-alive 的情况下,这个值等于 active – (reading+writing), 意思就是 Nginx 已经处理完正在等候下一次请求指令的驻留连接.</td>\n</tr>\n</tbody>\n</table>\n<p>over~</p>\n","excerpt":"<p>Nginx可以通过stub_status模块来查看服务器的状态信息。</p>","more":"<h2 id=\"安装stub-status模块\"><a href=\"#安装stub-status模块\" class=\"headerlink\" title=\"安装stub_status模块\"></a>安装stub_status模块</h2><p>查看服务器当前是否已经编译安装过stub_status模块<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">/usr/local/nginx/sbin/nginx -V</div><div class=\"line\">nginx version: nginx/1.11.4</div><div class=\"line\">built by gcc 4.8.5 20150623 (Red Hat 4.8.5-4) (GCC)</div><div class=\"line\">configure arguments: --prefix=/usr/local/nginx</div></pre></td></tr></table></figure></p>\n<p>安装 stub_status 模块</p>\n<p>解压相应版本的nginx源码包，<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">cd nginx-1.11.4</div></pre></td></tr></table></figure></p>\n<p>配置<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">./configure --prefix=/usr/local/nginx --with-http_stub_status_module</div></pre></td></tr></table></figure></p>\n<p>编译（不执行make install操作）<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">make</div></pre></td></tr></table></figure></p>\n<p>手动替换 nginx 执行文件<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">mv /usr/local/nginx/sbin/nginx /usr/local/nginx/sbin/nginx.bak</div><div class=\"line\">cp ./objs/nginx /usr/local/nginx/sbin/</div></pre></td></tr></table></figure></p>\n<p>查看是否安装成功<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">/usr/local/nginx/sbin/nginx -V</div><div class=\"line\">nginx version: nginx/1.11.4</div><div class=\"line\">built by gcc 4.8.5 20150623 (Red Hat 4.8.5-4) (GCC)</div><div class=\"line\">configure arguments: --prefix=/usr/local/nginx --with-http_stub_status_module</div></pre></td></tr></table></figure></p>\n<h2 id=\"启用nginx-status配置\"><a href=\"#启用nginx-status配置\" class=\"headerlink\" title=\"启用nginx status配置\"></a>启用nginx status配置</h2><p>修改配置<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">vi /usr/local/nginx/conf/nginx.conf</div></pre></td></tr></table></figure></p>\n<p>加入配置<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">location /ngx_status</div><div class=\"line\">&#123;</div><div class=\"line\">    stub_status on;</div><div class=\"line\">    access_log off;</div><div class=\"line\">    allow all;</div><div class=\"line\">    #deny all;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>重启nginx<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"># /usr/local/nginx/sbin/nginx -s reload 可能或有问题，所以先停止当前nginx进程，然后在重启。</div><div class=\"line\">/usr/local/nginx/sbin/nginx -s stop</div><div class=\"line\">/usr/local/nginx/sbin/nginx</div></pre></td></tr></table></figure></p>\n<h2 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h2><p>浏览器或者curl访问</p>\n<p><a href=\"http://120.76.250.101/ngx_status\">http://120.76.250.101/ngx_status</a><br>或<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">curl 127.0.0.1/ngx_status</div><div class=\"line\">Active connections: 1</div><div class=\"line\">server accepts handled requests</div><div class=\"line\"> 2 2 2</div><div class=\"line\">Reading: 0 Writing: 1 Waiting: 0</div></pre></td></tr></table></figure></p>\n<p>参数说明</p>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Active connections</td>\n<td>活跃的连接数量</td>\n</tr>\n<tr>\n<td>server accepts handled requests</td>\n<td>2 2 2 表示总共处理了2个连接 , 成功创建2次握手, 总共处理了2个请求</td>\n</tr>\n<tr>\n<td>reading</td>\n<td>读取客户端的连接数.</td>\n</tr>\n<tr>\n<td>writing</td>\n<td>响应数据到客户端的数量</td>\n</tr>\n<tr>\n<td>waiting</td>\n<td>开启 keep-alive 的情况下,这个值等于 active – (reading+writing), 意思就是 Nginx 已经处理完正在等候下一次请求指令的驻留连接.</td>\n</tr>\n</tbody>\n</table>\n<p>over~</p>"},{"title":"Nginx配置整理","date":"2016-10-03T14:30:00.000Z","ctime":"2016-10-03T14:30:00.000Z","utime":"2016-10-03T14:30:00.000Z","modif_times":0,"_content":"\nNginx配置主要分成四部分：main、server、upstream 和 location，每部分包含若干个指令。\nmain(全局设置)\n> 该部分设置的指令将影响其它所有部分的设置；\n\nserver(主机设置)\n> 该部分的指令主要用于指定虚拟主机域名、IP和端口；\n\nupstream(上游服务器设置)\n> 该部分的指令用于设置一系列的后端服务器，设置反向代理及后端服务器的负载均衡；\n\nlocation(URL匹配特定位置后的设置)\n> 该部分用于匹配网页位置（比如，根目录“/”,“/images”,等等）。\n\nNginx本身是模块化设计。全局的配置区段负责全局的各个方面，对于不同的协议可以单独划分成一个部分。我们可以通过在这些单独的协议配置中（http或mail）指定server来定义每一个请求应该被如何处理，以便请求被路由到特定的IP地址或端口上。在http区段中，使用location来匹配URI请求，这些location又可以嵌套使用或者按照一定顺序使用，以确保请求被路由到正确的文件系统区域或者其他地方。\n\n**他们之间的关系式：** server继承main，location继承server；upstream既不会继承指令也不会被继承。它有自己的特殊指令，不需要在其他地方的应用。\n\n<!-- more -->\n\n## 基本配置格式\nNginx的配置文件由若干部分组成。但每一部分都是通过下列的方法定义。\n```conf\n<section> {\n  <directive><parameters>\n}\n```\n**Tips:**\n- 每一个指令行都由分号结束（;），这标志着一行结束。\n- 大括号（{}）实际上表示一个新上下文（context），常称为『节，部分（section）』\n\n## Nginx的全局配置\n全局配置顾名思义就是对整个server都有效的参数。全局配置部分可能包含配置指令（如，user、worker_processes），也包括『节、部分（section）（如，events）』。这部分配置一般放在 nginx.conf 文件的顶部。\n\n示例：\n```\nuser nginx;\nworker_processes auto;\nerror_log /var/log/nginx/error.log;\npid /run/nginx.pid;\n\nevents {\n    use epoll   #使用网络IO模型，epoll模型比select模型效率高很多\n    worker_connections 1024;    #每个worker能够处理的最大连接数，最大值取决于ulimit -n的值\n}\n```\n\n主要配置指令及含义\n\n配置指令|说明\n-------|----\nuser   |配置worker进程运行的用户和用户组，第一个参数为user，第二个为group（如果忽略了group，那么group与user同名）\nworker_processes|指定worker进程启动的数量。这些进程用于处理客户的连接。通常该值会设置成CPU处理器核心数相同的数量。默认值是\"auto\"，也是按照这样去设置数量\nerror_log|设置错误日志文件位置。如果在其他的区段中没有设置其他的error_log,那么这个日志文件将会记录所有的错误。该指令的第二个参数指定了被记录的错误信息级别（debug[注，debug级别的错误只有在nginx编译的时候配置了 --with-debug选项才可以使用]、info、notice、warn、error、crit、alert、emsg）\npid   |设置记录主进程ID的文件地址。通常设置该值来方便我们对nginx的管理\nuse   |该指令指示我们使用什么样的连接方式。该指令需要写在 events 区段里面。\nworker_connections|配置一个工作进程能够接受并发连接的最大数。这个连接包括，客户连接和向上游服务器的连接，但也不仅限于此。通常该配置同use一样写在events里面\n\n## include指令\n在Nginx配置文件中可以使用include指令将其他位置存放的配置文件加载进来，来方便配置管理和增强配置文件的可读性。\n\n**Tips：**\n使用include文件，要确保被包含的文件自身符合nginx配置语法。\n```\ninclude /etc/nginx/default.d/*.conf;\n```\n路径中出现通配符表示可以匹配多个文件。\nnginx配置文件的语法错误可以通过nginx的 -t 选项来进行测试。\n```\n/path/to/nginx -t -c <path-to-nginx.conf>\n```\n**注：** 该命令只能检查语法错误，具体到某个功能性的测试还需要我们自己有针对性的去测。\n\n\n## Http的server部分\n通常我们提到的server部分，具体指的是Http的server部分。所以，其在Http配置的context是可用的。该部分用于处理http连接，因此该模块下提供了相当数量的指令。\n\n### 客户端指令\n> 用于处理客户端连接本身的各个方面，以及不同类型的客户端\n\n指令|说明\n---|-----\nchunked_transfer_encoding|在发给客户端的响应中允许禁用http/1.1标准的块传输编码\nclient_body_buffer_size|为了阻止临时文件写到磁盘，可以通过该指令为客户端请求体设置缓存大小，默认的缓存大小为两个内存页面\nclient_body_in_file_only|用于调试或者是进一步处理客户端请求体。该指令能够将客户端请求体强制写入到磁盘文件\nclient_body_in_single_buffer|为了减少拷贝的操作，使用该指令强制Nginx将整个客户端请求体保存到单个缓存中\nclient_body_temp_path|定义一个命令路径用于保存客户端请求体\nclent_body_timeout|指定客户端成功读取的两个操作之间的时间间隔\nclient_header_buffer_size|为客户端请求头指定一个缓存大小，当请求头大于1kB时会用到这个设置。\nclient_header_timeout|读取整个客户端头的超时时间\nclient_max_body_size|定义允许最大的客户端请求头，如果大于该值，那么客户端将会是413（request entity too large）错误\nkeepalive_disable|对某些类型的客户端禁用keep-alive请求功能。\nkeepalive_requests|定义在一个keep-alive关闭之前可以接收多少个请求\nkeepalive_timeout|指定keep-alive连接持续多久。第二个参数用于在响应头中这只\"Keep-Alive\"头\nlarge_client_header_buffers|定义最大数量和最大客户端请求头的大小\nmsie_padding|为了填充响应的大小至512字节，对于MSIE客户端，大于400的状态码会被添加注释以便满足512字节，通过启用该命令可以阻止这种行为\nmsie_refresh|对于MSIE客户端，可启用发送一个refresh头\n\n### 文件I/O指令\n> 用于控制Nginx如何投递静态文件。\n\n指令|说明\n---|----\naio|启用异步文件I/O。FreeBSD系统下，该值可能被用于sendfile预加载数据。Linux下需要directio指令，自动禁用sendfile\ndirectio|用于启用操作系统特定的标识或者功能提供大于给定参数的文件。Linux下使用aio时需要使用该指令。\ndirectio_alignment|设置directio算法。默认值是512，通常已经足够，但是在Linux的XFS下推荐增加至4K\nopen_file_cache|配置一个缓存用于存放打开的文件描述符、目录查询和文件查询错误\nopen_file_cache_errors|按照open_file_cache，启用文件查询错误缓存\nopen_file_cache_min_uses|open_file_cache缓存的文件描述符保留在缓存中，使用该指令配置最少使用文件描述符的次数\nopen_file_cache_valid|指定对open_file_cache缓存有效性检查的时间间隔\npostpone_output|指定Nginx发送给客户端最小的数值，如果可能的话，没有数据会发送，直到达到此值\nread_ahead|如果可能的话，内核将预读文件到设定的参数大小\nsendfile|使用sendfile（2）直接复制数据从一个到另一个文件描述符\nsendfile_max_chunk|设置在一个sendfile(2)拷贝中最大数据的大小，这是为了阻止worker\"贪婪\"\n\n\n\n### Hash指令\n> 控制Nginx 分配给某些变量多大的静态文件\n\n指令| 说明\n---|-----\nserver_names_hash_bucket_size|指定用于保存server_name哈希表大小的\"桶\"\nserver_names_hash_max_size|指定的server_name哈希表的最大值的大小\ntypes_hash_bucket_size|指定用于存放哈希表的\"桶\"的大小\ntypes_hash_max_size|指定哈希类型表的最大值的大小\nvariables_hash_bucket_size|指定用于存放保留变量\"桶\"的大小\nvariables_hash_max_size|指定存放保留变量最大哈希值的大小\n\n\n### Socket指令\n> 描述Nginx如何设置创建TCP套接字的变量选项\n\n指令|说明\n---|-----\nlingering_close|指定如何保持客户端的连接，以便用于更多数据的传输\nlingering_time|在使用lingering_close指令的连接中，使用该指令指定客户端连接为了处理更多的数据需要保持打开连接的时间\nlingering_timeout|结合lingering_close，该指令显示Nginx在关闭客户端连接之前，为获得更多数据会等待多久\nreset_timeout_connection|使用这个指令之后，超时的连接会被立即关闭，释放相关的内存。默认的状态是处于FIN_WAIT1，这种状态将会一直保持连接\nsend_lowat|如果非零，Nginx将会在客户端套接字尝试减少发送操作\nsend_timeout|在两次成功的客户端接收响应的写操作之间设置一个超时时间\ntcp_nodelay|启用或禁用TCP_NODELAY选项，用于keep-alive连接\ntcp_nopush|仅依赖于sendfile的使用。它能够使Nginx在一个数据包中尝试发送响应头，以及在数据包中发送一个完整的文件\n\n\n### server部分\n\n示例：\n```\nhttp {\n    ...\n    server {\n        listen       80 default_server;\n        server_name  _;\n        root         /usr/share/nginx/html;\n\n        # Load configuration files for the default server block.\n        include /etc/nginx/default.d/*.conf;\n\n        location / {\n        }\n\n        error_page 404 /404.html;\n            location = /40x.html {\n        }\n\n        error_page 500 502 503 504 /50x.html;\n            location = /50x.html {\n        }\n    }\n    ...\n}\n```\n一个虚拟服务器由listen和server_name指令组合定义。\n\n**listen**\n> 指令定义一个IP地址/端口组合或者UNIX套接字路径。示例\n> - listen address[:port];\n> - listen port;\n> - listen unix:path;\n\n示例：\n```\nlisten     127.0.0.1:80;\nlisten     localhost:80;\nlisten     127.0.0.1:8080;\nlisten     localhost:8080;\nlisten     192.168.3.105:80;\nlisten     192.168.3.105:8080;\nlisten     80;\nlisten     *:80;\nlisten     8080;\nlisten     *:8080;\nlisten     12.34.56.77:80;\nlisten     12.34.56.78:80;\nlisten     12.34.56.79:80;\n```\n\n另外，listen还有其他的一些可选参数。常用到的有\ndefault_server，表示定义这样的一个组合：（address:port）默认的请求被绑定于此\nssl，表明该端口仅接受Https的连接\n\n\n**server_name**\n> 用来指定域名。\n\n示例：\n```\nserver_name   nginx.cn;\nserver_name   nginx.cn www.nginx.cn;\nserver_name   *.nginx.cn;\nserver_name   .nginx.cn;\nserver_name   nginx.*;\nserver_name   nginx.cng bucknell.net brackley.org;\nserver_name   localhost litchfield bleddington;\nserver_name   \"\";\n\n```\n\n除了普通字符串外，Nginx也接受通配符作为Server_name的参数。\n- 使用通配符替代部分子域名： \\*.example.com\n- 代替顶级域部分： www.example.*\n- 匹配子域和域本身： .example.com 能匹配 \\*.example.com 和example.com\n\n另外，在域名前加上（~），正则表达式也可应用于 server_name.\n```\nserver_name ~^www\\.example\\.com$\nserver_name ~^www(\\d+).example\\.(com)$\n```\n对于后一种方式是利用捕获，可以在以后的引用中进一步配置（用$1,$2等）指令中使用。\n\n\n\n\n## location部分\nlocation指令可以用在虚拟服务器server部分，并且意味着提供来自客户端的URI或者内部的重定向访问。\n\nlocation定义：\n```\nlocation [modifier] uri {...}\n```\n或者是命名location\n```\nlocation @name {...}\n```\n> 命名location仅对内部访问重定向，在进入一个location之前他会保留被请求的URI部分。且命名location只能存在与server级别的定义。\n\n示例\n```\nlocation / { }\nlocation /images/ { }\nlocation /blog/ { }\nlocation /planet/ { }\nlocation /planet/blog/ { }\n\nlocation ~ IndexPage.php$ { }\nlocation ~ ^/BlogPlanet(/|/index.php)$ { }\n\nlocation ~* .(pl|cgi|perl|prl)$ { }\nlocation ~* .(md|mdwn|txt|mkdn)$ { }\n\nlocation ^~ /images/IndexPage/ { }\nlocation ^~ /blog/BlogPlanet/ { }\n\nlocation = / { }\n```\n\n当一个请求进入时，URI将会被检测匹配一个最佳的location。\n- 没有正则表达式的location被认为是最佳的匹配，独立于含有正则表达式的location。\n- 在配置文件中按照查找顺序进行正则匹配，在查到第一个正则表达式匹配时结束查找，将请求交由这个location处理。\n**Tips：**\n这里匹配的解码URI，如在URL中的\"%20\",将会匹配location中的\"\"(空格)。\n\nlocation常见的修饰符\n\n修饰符|说明\n----|----\n=   |使用精确匹配并且终止搜索\n~   |区分大小写的正则表达式匹配\n~*  |不去分大小写的正则表达式匹配\n^~  |如果该location是最佳的匹配，那么对于匹配这个location的字符串不在进行正则表达式检测。\n\n仅用于location中的指令\n\n指令| 说明\n---|----\nalias|定义location的其他名字，在文件系统中能够找到。\ninternal|指定一个仅用于内部请求的location（其他指定定义的重定向，rewrite请求，error请求等）\nlimit_except|限定一个location可以执行的Http操作（如，GET或HEAD）\n\n\n\n命名location的使用（一般与try_files配合使用）\n示例：\n```\nlocation / {\n  try_files $uri $uri/ $mongrel;\n}\n\nlocation @mongrel {\n  proxy_pass http://appserver;\n}\n```\n上面一段配置表示，如果给定的URI作为一个文件没有被找到，那么处理将会通过代理被传递到appserver\n\nlocation的嵌套使用：\n```\nroot /var/www\n\nlocation / {\n  location ^~ /css {\n    location ~* /css.*\\.css$ {\n      ...\n    }\n    ...\n  }\n  ...\n}\n```\n**实践表明正则表达式location被嵌套在基于字符串的location是最佳的配置方式**\n\n## 完整的配置文件示例\n\n```\n# For more information on configuration, see:\n#   * Official English Documentation: http://nginx.org/en/docs/\n#   * Official Russian Documentation: http://nginx.org/ru/docs/\n\nuser nginx;\nworker_processes auto;\nerror_log /var/log/nginx/error.log;\npid /run/nginx.pid;\n\nevents {\n    worker_connections 1024;\n}\n\nhttp {\n    log_format  main  '$remote_addr - $remote_user [$time_local] \"$request\" '\n                      '$status $body_bytes_sent \"$http_referer\" '\n                      '\"$http_user_agent\" \"$http_x_forwarded_for\"';\n\n    access_log  /var/log/nginx/access.log  main;\n\n    sendfile            on;\n    tcp_nopush          on;\n    tcp_nodelay         on;\n    keepalive_timeout   65;\n    types_hash_max_size 2048;\n\n    include             /etc/nginx/mime.types;\n    default_type        application/octet-stream;\n\n    # Load modular configuration files from the /etc/nginx/conf.d directory.\n    # See http://nginx.org/en/docs/ngx_core_module.html#include\n    # for more information.\n    include /etc/nginx/conf.d/*.conf;\n\n    server {\n        listen       80 default_server;\n        listen       [::]:80 default_server;\n        server_name  _;\n        root         /usr/share/nginx/html;\n\n        # Load configuration files for the default server block.\n        include /etc/nginx/default.d/*.conf;\n\n        location / {\n        }\n\n        error_page 404 /404.html;\n            location = /40x.html {\n        }\n\n        error_page 500 502 503 504 /50x.html;\n            location = /50x.html {\n        }\n    }\n}\n```\n","source":"_posts/Nginx配置整理.md","raw":"---\ntitle: Nginx配置整理\ndate: 2016-10-03 22:30:00\nctime: 2016-10-03 22:30:00\nutime: 2016-10-03 22:30:00\nmodif_times: 0\ntags:\n-\ncategories:\n- Nginx\n---\n\nNginx配置主要分成四部分：main、server、upstream 和 location，每部分包含若干个指令。\nmain(全局设置)\n> 该部分设置的指令将影响其它所有部分的设置；\n\nserver(主机设置)\n> 该部分的指令主要用于指定虚拟主机域名、IP和端口；\n\nupstream(上游服务器设置)\n> 该部分的指令用于设置一系列的后端服务器，设置反向代理及后端服务器的负载均衡；\n\nlocation(URL匹配特定位置后的设置)\n> 该部分用于匹配网页位置（比如，根目录“/”,“/images”,等等）。\n\nNginx本身是模块化设计。全局的配置区段负责全局的各个方面，对于不同的协议可以单独划分成一个部分。我们可以通过在这些单独的协议配置中（http或mail）指定server来定义每一个请求应该被如何处理，以便请求被路由到特定的IP地址或端口上。在http区段中，使用location来匹配URI请求，这些location又可以嵌套使用或者按照一定顺序使用，以确保请求被路由到正确的文件系统区域或者其他地方。\n\n**他们之间的关系式：** server继承main，location继承server；upstream既不会继承指令也不会被继承。它有自己的特殊指令，不需要在其他地方的应用。\n\n<!-- more -->\n\n## 基本配置格式\nNginx的配置文件由若干部分组成。但每一部分都是通过下列的方法定义。\n```conf\n<section> {\n  <directive><parameters>\n}\n```\n**Tips:**\n- 每一个指令行都由分号结束（;），这标志着一行结束。\n- 大括号（{}）实际上表示一个新上下文（context），常称为『节，部分（section）』\n\n## Nginx的全局配置\n全局配置顾名思义就是对整个server都有效的参数。全局配置部分可能包含配置指令（如，user、worker_processes），也包括『节、部分（section）（如，events）』。这部分配置一般放在 nginx.conf 文件的顶部。\n\n示例：\n```\nuser nginx;\nworker_processes auto;\nerror_log /var/log/nginx/error.log;\npid /run/nginx.pid;\n\nevents {\n    use epoll   #使用网络IO模型，epoll模型比select模型效率高很多\n    worker_connections 1024;    #每个worker能够处理的最大连接数，最大值取决于ulimit -n的值\n}\n```\n\n主要配置指令及含义\n\n配置指令|说明\n-------|----\nuser   |配置worker进程运行的用户和用户组，第一个参数为user，第二个为group（如果忽略了group，那么group与user同名）\nworker_processes|指定worker进程启动的数量。这些进程用于处理客户的连接。通常该值会设置成CPU处理器核心数相同的数量。默认值是\"auto\"，也是按照这样去设置数量\nerror_log|设置错误日志文件位置。如果在其他的区段中没有设置其他的error_log,那么这个日志文件将会记录所有的错误。该指令的第二个参数指定了被记录的错误信息级别（debug[注，debug级别的错误只有在nginx编译的时候配置了 --with-debug选项才可以使用]、info、notice、warn、error、crit、alert、emsg）\npid   |设置记录主进程ID的文件地址。通常设置该值来方便我们对nginx的管理\nuse   |该指令指示我们使用什么样的连接方式。该指令需要写在 events 区段里面。\nworker_connections|配置一个工作进程能够接受并发连接的最大数。这个连接包括，客户连接和向上游服务器的连接，但也不仅限于此。通常该配置同use一样写在events里面\n\n## include指令\n在Nginx配置文件中可以使用include指令将其他位置存放的配置文件加载进来，来方便配置管理和增强配置文件的可读性。\n\n**Tips：**\n使用include文件，要确保被包含的文件自身符合nginx配置语法。\n```\ninclude /etc/nginx/default.d/*.conf;\n```\n路径中出现通配符表示可以匹配多个文件。\nnginx配置文件的语法错误可以通过nginx的 -t 选项来进行测试。\n```\n/path/to/nginx -t -c <path-to-nginx.conf>\n```\n**注：** 该命令只能检查语法错误，具体到某个功能性的测试还需要我们自己有针对性的去测。\n\n\n## Http的server部分\n通常我们提到的server部分，具体指的是Http的server部分。所以，其在Http配置的context是可用的。该部分用于处理http连接，因此该模块下提供了相当数量的指令。\n\n### 客户端指令\n> 用于处理客户端连接本身的各个方面，以及不同类型的客户端\n\n指令|说明\n---|-----\nchunked_transfer_encoding|在发给客户端的响应中允许禁用http/1.1标准的块传输编码\nclient_body_buffer_size|为了阻止临时文件写到磁盘，可以通过该指令为客户端请求体设置缓存大小，默认的缓存大小为两个内存页面\nclient_body_in_file_only|用于调试或者是进一步处理客户端请求体。该指令能够将客户端请求体强制写入到磁盘文件\nclient_body_in_single_buffer|为了减少拷贝的操作，使用该指令强制Nginx将整个客户端请求体保存到单个缓存中\nclient_body_temp_path|定义一个命令路径用于保存客户端请求体\nclent_body_timeout|指定客户端成功读取的两个操作之间的时间间隔\nclient_header_buffer_size|为客户端请求头指定一个缓存大小，当请求头大于1kB时会用到这个设置。\nclient_header_timeout|读取整个客户端头的超时时间\nclient_max_body_size|定义允许最大的客户端请求头，如果大于该值，那么客户端将会是413（request entity too large）错误\nkeepalive_disable|对某些类型的客户端禁用keep-alive请求功能。\nkeepalive_requests|定义在一个keep-alive关闭之前可以接收多少个请求\nkeepalive_timeout|指定keep-alive连接持续多久。第二个参数用于在响应头中这只\"Keep-Alive\"头\nlarge_client_header_buffers|定义最大数量和最大客户端请求头的大小\nmsie_padding|为了填充响应的大小至512字节，对于MSIE客户端，大于400的状态码会被添加注释以便满足512字节，通过启用该命令可以阻止这种行为\nmsie_refresh|对于MSIE客户端，可启用发送一个refresh头\n\n### 文件I/O指令\n> 用于控制Nginx如何投递静态文件。\n\n指令|说明\n---|----\naio|启用异步文件I/O。FreeBSD系统下，该值可能被用于sendfile预加载数据。Linux下需要directio指令，自动禁用sendfile\ndirectio|用于启用操作系统特定的标识或者功能提供大于给定参数的文件。Linux下使用aio时需要使用该指令。\ndirectio_alignment|设置directio算法。默认值是512，通常已经足够，但是在Linux的XFS下推荐增加至4K\nopen_file_cache|配置一个缓存用于存放打开的文件描述符、目录查询和文件查询错误\nopen_file_cache_errors|按照open_file_cache，启用文件查询错误缓存\nopen_file_cache_min_uses|open_file_cache缓存的文件描述符保留在缓存中，使用该指令配置最少使用文件描述符的次数\nopen_file_cache_valid|指定对open_file_cache缓存有效性检查的时间间隔\npostpone_output|指定Nginx发送给客户端最小的数值，如果可能的话，没有数据会发送，直到达到此值\nread_ahead|如果可能的话，内核将预读文件到设定的参数大小\nsendfile|使用sendfile（2）直接复制数据从一个到另一个文件描述符\nsendfile_max_chunk|设置在一个sendfile(2)拷贝中最大数据的大小，这是为了阻止worker\"贪婪\"\n\n\n\n### Hash指令\n> 控制Nginx 分配给某些变量多大的静态文件\n\n指令| 说明\n---|-----\nserver_names_hash_bucket_size|指定用于保存server_name哈希表大小的\"桶\"\nserver_names_hash_max_size|指定的server_name哈希表的最大值的大小\ntypes_hash_bucket_size|指定用于存放哈希表的\"桶\"的大小\ntypes_hash_max_size|指定哈希类型表的最大值的大小\nvariables_hash_bucket_size|指定用于存放保留变量\"桶\"的大小\nvariables_hash_max_size|指定存放保留变量最大哈希值的大小\n\n\n### Socket指令\n> 描述Nginx如何设置创建TCP套接字的变量选项\n\n指令|说明\n---|-----\nlingering_close|指定如何保持客户端的连接，以便用于更多数据的传输\nlingering_time|在使用lingering_close指令的连接中，使用该指令指定客户端连接为了处理更多的数据需要保持打开连接的时间\nlingering_timeout|结合lingering_close，该指令显示Nginx在关闭客户端连接之前，为获得更多数据会等待多久\nreset_timeout_connection|使用这个指令之后，超时的连接会被立即关闭，释放相关的内存。默认的状态是处于FIN_WAIT1，这种状态将会一直保持连接\nsend_lowat|如果非零，Nginx将会在客户端套接字尝试减少发送操作\nsend_timeout|在两次成功的客户端接收响应的写操作之间设置一个超时时间\ntcp_nodelay|启用或禁用TCP_NODELAY选项，用于keep-alive连接\ntcp_nopush|仅依赖于sendfile的使用。它能够使Nginx在一个数据包中尝试发送响应头，以及在数据包中发送一个完整的文件\n\n\n### server部分\n\n示例：\n```\nhttp {\n    ...\n    server {\n        listen       80 default_server;\n        server_name  _;\n        root         /usr/share/nginx/html;\n\n        # Load configuration files for the default server block.\n        include /etc/nginx/default.d/*.conf;\n\n        location / {\n        }\n\n        error_page 404 /404.html;\n            location = /40x.html {\n        }\n\n        error_page 500 502 503 504 /50x.html;\n            location = /50x.html {\n        }\n    }\n    ...\n}\n```\n一个虚拟服务器由listen和server_name指令组合定义。\n\n**listen**\n> 指令定义一个IP地址/端口组合或者UNIX套接字路径。示例\n> - listen address[:port];\n> - listen port;\n> - listen unix:path;\n\n示例：\n```\nlisten     127.0.0.1:80;\nlisten     localhost:80;\nlisten     127.0.0.1:8080;\nlisten     localhost:8080;\nlisten     192.168.3.105:80;\nlisten     192.168.3.105:8080;\nlisten     80;\nlisten     *:80;\nlisten     8080;\nlisten     *:8080;\nlisten     12.34.56.77:80;\nlisten     12.34.56.78:80;\nlisten     12.34.56.79:80;\n```\n\n另外，listen还有其他的一些可选参数。常用到的有\ndefault_server，表示定义这样的一个组合：（address:port）默认的请求被绑定于此\nssl，表明该端口仅接受Https的连接\n\n\n**server_name**\n> 用来指定域名。\n\n示例：\n```\nserver_name   nginx.cn;\nserver_name   nginx.cn www.nginx.cn;\nserver_name   *.nginx.cn;\nserver_name   .nginx.cn;\nserver_name   nginx.*;\nserver_name   nginx.cng bucknell.net brackley.org;\nserver_name   localhost litchfield bleddington;\nserver_name   \"\";\n\n```\n\n除了普通字符串外，Nginx也接受通配符作为Server_name的参数。\n- 使用通配符替代部分子域名： \\*.example.com\n- 代替顶级域部分： www.example.*\n- 匹配子域和域本身： .example.com 能匹配 \\*.example.com 和example.com\n\n另外，在域名前加上（~），正则表达式也可应用于 server_name.\n```\nserver_name ~^www\\.example\\.com$\nserver_name ~^www(\\d+).example\\.(com)$\n```\n对于后一种方式是利用捕获，可以在以后的引用中进一步配置（用$1,$2等）指令中使用。\n\n\n\n\n## location部分\nlocation指令可以用在虚拟服务器server部分，并且意味着提供来自客户端的URI或者内部的重定向访问。\n\nlocation定义：\n```\nlocation [modifier] uri {...}\n```\n或者是命名location\n```\nlocation @name {...}\n```\n> 命名location仅对内部访问重定向，在进入一个location之前他会保留被请求的URI部分。且命名location只能存在与server级别的定义。\n\n示例\n```\nlocation / { }\nlocation /images/ { }\nlocation /blog/ { }\nlocation /planet/ { }\nlocation /planet/blog/ { }\n\nlocation ~ IndexPage.php$ { }\nlocation ~ ^/BlogPlanet(/|/index.php)$ { }\n\nlocation ~* .(pl|cgi|perl|prl)$ { }\nlocation ~* .(md|mdwn|txt|mkdn)$ { }\n\nlocation ^~ /images/IndexPage/ { }\nlocation ^~ /blog/BlogPlanet/ { }\n\nlocation = / { }\n```\n\n当一个请求进入时，URI将会被检测匹配一个最佳的location。\n- 没有正则表达式的location被认为是最佳的匹配，独立于含有正则表达式的location。\n- 在配置文件中按照查找顺序进行正则匹配，在查到第一个正则表达式匹配时结束查找，将请求交由这个location处理。\n**Tips：**\n这里匹配的解码URI，如在URL中的\"%20\",将会匹配location中的\"\"(空格)。\n\nlocation常见的修饰符\n\n修饰符|说明\n----|----\n=   |使用精确匹配并且终止搜索\n~   |区分大小写的正则表达式匹配\n~*  |不去分大小写的正则表达式匹配\n^~  |如果该location是最佳的匹配，那么对于匹配这个location的字符串不在进行正则表达式检测。\n\n仅用于location中的指令\n\n指令| 说明\n---|----\nalias|定义location的其他名字，在文件系统中能够找到。\ninternal|指定一个仅用于内部请求的location（其他指定定义的重定向，rewrite请求，error请求等）\nlimit_except|限定一个location可以执行的Http操作（如，GET或HEAD）\n\n\n\n命名location的使用（一般与try_files配合使用）\n示例：\n```\nlocation / {\n  try_files $uri $uri/ $mongrel;\n}\n\nlocation @mongrel {\n  proxy_pass http://appserver;\n}\n```\n上面一段配置表示，如果给定的URI作为一个文件没有被找到，那么处理将会通过代理被传递到appserver\n\nlocation的嵌套使用：\n```\nroot /var/www\n\nlocation / {\n  location ^~ /css {\n    location ~* /css.*\\.css$ {\n      ...\n    }\n    ...\n  }\n  ...\n}\n```\n**实践表明正则表达式location被嵌套在基于字符串的location是最佳的配置方式**\n\n## 完整的配置文件示例\n\n```\n# For more information on configuration, see:\n#   * Official English Documentation: http://nginx.org/en/docs/\n#   * Official Russian Documentation: http://nginx.org/ru/docs/\n\nuser nginx;\nworker_processes auto;\nerror_log /var/log/nginx/error.log;\npid /run/nginx.pid;\n\nevents {\n    worker_connections 1024;\n}\n\nhttp {\n    log_format  main  '$remote_addr - $remote_user [$time_local] \"$request\" '\n                      '$status $body_bytes_sent \"$http_referer\" '\n                      '\"$http_user_agent\" \"$http_x_forwarded_for\"';\n\n    access_log  /var/log/nginx/access.log  main;\n\n    sendfile            on;\n    tcp_nopush          on;\n    tcp_nodelay         on;\n    keepalive_timeout   65;\n    types_hash_max_size 2048;\n\n    include             /etc/nginx/mime.types;\n    default_type        application/octet-stream;\n\n    # Load modular configuration files from the /etc/nginx/conf.d directory.\n    # See http://nginx.org/en/docs/ngx_core_module.html#include\n    # for more information.\n    include /etc/nginx/conf.d/*.conf;\n\n    server {\n        listen       80 default_server;\n        listen       [::]:80 default_server;\n        server_name  _;\n        root         /usr/share/nginx/html;\n\n        # Load configuration files for the default server block.\n        include /etc/nginx/default.d/*.conf;\n\n        location / {\n        }\n\n        error_page 404 /404.html;\n            location = /40x.html {\n        }\n\n        error_page 500 502 503 504 /50x.html;\n            location = /50x.html {\n        }\n    }\n}\n```\n","slug":"Nginx配置整理","published":1,"updated":"2016-10-04T10:36:46.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"city8vno2001ng29f1l75qyaz","content":"<p>Nginx配置主要分成四部分：main、server、upstream 和 location，每部分包含若干个指令。<br>main(全局设置)</p>\n<blockquote>\n<p>该部分设置的指令将影响其它所有部分的设置；</p>\n</blockquote>\n<p>server(主机设置)</p>\n<blockquote>\n<p>该部分的指令主要用于指定虚拟主机域名、IP和端口；</p>\n</blockquote>\n<p>upstream(上游服务器设置)</p>\n<blockquote>\n<p>该部分的指令用于设置一系列的后端服务器，设置反向代理及后端服务器的负载均衡；</p>\n</blockquote>\n<p>location(URL匹配特定位置后的设置)</p>\n<blockquote>\n<p>该部分用于匹配网页位置（比如，根目录“/”,“/images”,等等）。</p>\n</blockquote>\n<p>Nginx本身是模块化设计。全局的配置区段负责全局的各个方面，对于不同的协议可以单独划分成一个部分。我们可以通过在这些单独的协议配置中（http或mail）指定server来定义每一个请求应该被如何处理，以便请求被路由到特定的IP地址或端口上。在http区段中，使用location来匹配URI请求，这些location又可以嵌套使用或者按照一定顺序使用，以确保请求被路由到正确的文件系统区域或者其他地方。</p>\n<p><strong>他们之间的关系式：</strong> server继承main，location继承server；upstream既不会继承指令也不会被继承。它有自己的特殊指令，不需要在其他地方的应用。</p>\n<a id=\"more\"></a>\n<h2 id=\"基本配置格式\"><a href=\"#基本配置格式\" class=\"headerlink\" title=\"基本配置格式\"></a>基本配置格式</h2><p>Nginx的配置文件由若干部分组成。但每一部分都是通过下列的方法定义。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;section&gt; &#123;</div><div class=\"line\">  &lt;directive&gt;&lt;parameters&gt;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p><strong>Tips:</strong></p>\n<ul>\n<li>每一个指令行都由分号结束（;），这标志着一行结束。</li>\n<li>大括号（{}）实际上表示一个新上下文（context），常称为『节，部分（section）』</li>\n</ul>\n<h2 id=\"Nginx的全局配置\"><a href=\"#Nginx的全局配置\" class=\"headerlink\" title=\"Nginx的全局配置\"></a>Nginx的全局配置</h2><p>全局配置顾名思义就是对整个server都有效的参数。全局配置部分可能包含配置指令（如，user、worker_processes），也包括『节、部分（section）（如，events）』。这部分配置一般放在 nginx.conf 文件的顶部。</p>\n<p>示例：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">user nginx;</div><div class=\"line\">worker_processes auto;</div><div class=\"line\">error_log /var/log/nginx/error.log;</div><div class=\"line\">pid /run/nginx.pid;</div><div class=\"line\"></div><div class=\"line\">events &#123;</div><div class=\"line\">    use epoll   #使用网络IO模型，epoll模型比select模型效率高很多</div><div class=\"line\">    worker_connections 1024;    #每个worker能够处理的最大连接数，最大值取决于ulimit -n的值</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>主要配置指令及含义</p>\n<table>\n<thead>\n<tr>\n<th>配置指令</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>user</td>\n<td>配置worker进程运行的用户和用户组，第一个参数为user，第二个为group（如果忽略了group，那么group与user同名）</td>\n</tr>\n<tr>\n<td>worker_processes</td>\n<td>指定worker进程启动的数量。这些进程用于处理客户的连接。通常该值会设置成CPU处理器核心数相同的数量。默认值是”auto”，也是按照这样去设置数量</td>\n</tr>\n<tr>\n<td>error_log</td>\n<td>设置错误日志文件位置。如果在其他的区段中没有设置其他的error_log,那么这个日志文件将会记录所有的错误。该指令的第二个参数指定了被记录的错误信息级别（debug[注，debug级别的错误只有在nginx编译的时候配置了 –with-debug选项才可以使用]、info、notice、warn、error、crit、alert、emsg）</td>\n</tr>\n<tr>\n<td>pid</td>\n<td>设置记录主进程ID的文件地址。通常设置该值来方便我们对nginx的管理</td>\n</tr>\n<tr>\n<td>use</td>\n<td>该指令指示我们使用什么样的连接方式。该指令需要写在 events 区段里面。</td>\n</tr>\n<tr>\n<td>worker_connections</td>\n<td>配置一个工作进程能够接受并发连接的最大数。这个连接包括，客户连接和向上游服务器的连接，但也不仅限于此。通常该配置同use一样写在events里面</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"include指令\"><a href=\"#include指令\" class=\"headerlink\" title=\"include指令\"></a>include指令</h2><p>在Nginx配置文件中可以使用include指令将其他位置存放的配置文件加载进来，来方便配置管理和增强配置文件的可读性。</p>\n<p><strong>Tips：</strong><br>使用include文件，要确保被包含的文件自身符合nginx配置语法。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">include /etc/nginx/default.d/*.conf;</div></pre></td></tr></table></figure></p>\n<p>路径中出现通配符表示可以匹配多个文件。<br>nginx配置文件的语法错误可以通过nginx的 -t 选项来进行测试。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">/path/to/nginx -t -c &lt;path-to-nginx.conf&gt;</div></pre></td></tr></table></figure></p>\n<p><strong>注：</strong> 该命令只能检查语法错误，具体到某个功能性的测试还需要我们自己有针对性的去测。</p>\n<h2 id=\"Http的server部分\"><a href=\"#Http的server部分\" class=\"headerlink\" title=\"Http的server部分\"></a>Http的server部分</h2><p>通常我们提到的server部分，具体指的是Http的server部分。所以，其在Http配置的context是可用的。该部分用于处理http连接，因此该模块下提供了相当数量的指令。</p>\n<h3 id=\"客户端指令\"><a href=\"#客户端指令\" class=\"headerlink\" title=\"客户端指令\"></a>客户端指令</h3><blockquote>\n<p>用于处理客户端连接本身的各个方面，以及不同类型的客户端</p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th>指令</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>chunked_transfer_encoding</td>\n<td>在发给客户端的响应中允许禁用http/1.1标准的块传输编码</td>\n</tr>\n<tr>\n<td>client_body_buffer_size</td>\n<td>为了阻止临时文件写到磁盘，可以通过该指令为客户端请求体设置缓存大小，默认的缓存大小为两个内存页面</td>\n</tr>\n<tr>\n<td>client_body_in_file_only</td>\n<td>用于调试或者是进一步处理客户端请求体。该指令能够将客户端请求体强制写入到磁盘文件</td>\n</tr>\n<tr>\n<td>client_body_in_single_buffer</td>\n<td>为了减少拷贝的操作，使用该指令强制Nginx将整个客户端请求体保存到单个缓存中</td>\n</tr>\n<tr>\n<td>client_body_temp_path</td>\n<td>定义一个命令路径用于保存客户端请求体</td>\n</tr>\n<tr>\n<td>clent_body_timeout</td>\n<td>指定客户端成功读取的两个操作之间的时间间隔</td>\n</tr>\n<tr>\n<td>client_header_buffer_size</td>\n<td>为客户端请求头指定一个缓存大小，当请求头大于1kB时会用到这个设置。</td>\n</tr>\n<tr>\n<td>client_header_timeout</td>\n<td>读取整个客户端头的超时时间</td>\n</tr>\n<tr>\n<td>client_max_body_size</td>\n<td>定义允许最大的客户端请求头，如果大于该值，那么客户端将会是413（request entity too large）错误</td>\n</tr>\n<tr>\n<td>keepalive_disable</td>\n<td>对某些类型的客户端禁用keep-alive请求功能。</td>\n</tr>\n<tr>\n<td>keepalive_requests</td>\n<td>定义在一个keep-alive关闭之前可以接收多少个请求</td>\n</tr>\n<tr>\n<td>keepalive_timeout</td>\n<td>指定keep-alive连接持续多久。第二个参数用于在响应头中这只”Keep-Alive”头</td>\n</tr>\n<tr>\n<td>large_client_header_buffers</td>\n<td>定义最大数量和最大客户端请求头的大小</td>\n</tr>\n<tr>\n<td>msie_padding</td>\n<td>为了填充响应的大小至512字节，对于MSIE客户端，大于400的状态码会被添加注释以便满足512字节，通过启用该命令可以阻止这种行为</td>\n</tr>\n<tr>\n<td>msie_refresh</td>\n<td>对于MSIE客户端，可启用发送一个refresh头</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"文件I-O指令\"><a href=\"#文件I-O指令\" class=\"headerlink\" title=\"文件I/O指令\"></a>文件I/O指令</h3><blockquote>\n<p>用于控制Nginx如何投递静态文件。</p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th>指令</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>aio</td>\n<td>启用异步文件I/O。FreeBSD系统下，该值可能被用于sendfile预加载数据。Linux下需要directio指令，自动禁用sendfile</td>\n</tr>\n<tr>\n<td>directio</td>\n<td>用于启用操作系统特定的标识或者功能提供大于给定参数的文件。Linux下使用aio时需要使用该指令。</td>\n</tr>\n<tr>\n<td>directio_alignment</td>\n<td>设置directio算法。默认值是512，通常已经足够，但是在Linux的XFS下推荐增加至4K</td>\n</tr>\n<tr>\n<td>open_file_cache</td>\n<td>配置一个缓存用于存放打开的文件描述符、目录查询和文件查询错误</td>\n</tr>\n<tr>\n<td>open_file_cache_errors</td>\n<td>按照open_file_cache，启用文件查询错误缓存</td>\n</tr>\n<tr>\n<td>open_file_cache_min_uses</td>\n<td>open_file_cache缓存的文件描述符保留在缓存中，使用该指令配置最少使用文件描述符的次数</td>\n</tr>\n<tr>\n<td>open_file_cache_valid</td>\n<td>指定对open_file_cache缓存有效性检查的时间间隔</td>\n</tr>\n<tr>\n<td>postpone_output</td>\n<td>指定Nginx发送给客户端最小的数值，如果可能的话，没有数据会发送，直到达到此值</td>\n</tr>\n<tr>\n<td>read_ahead</td>\n<td>如果可能的话，内核将预读文件到设定的参数大小</td>\n</tr>\n<tr>\n<td>sendfile</td>\n<td>使用sendfile（2）直接复制数据从一个到另一个文件描述符</td>\n</tr>\n<tr>\n<td>sendfile_max_chunk</td>\n<td>设置在一个sendfile(2)拷贝中最大数据的大小，这是为了阻止worker”贪婪”</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"Hash指令\"><a href=\"#Hash指令\" class=\"headerlink\" title=\"Hash指令\"></a>Hash指令</h3><blockquote>\n<p>控制Nginx 分配给某些变量多大的静态文件</p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th>指令</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>server_names_hash_bucket_size</td>\n<td>指定用于保存server_name哈希表大小的”桶”</td>\n</tr>\n<tr>\n<td>server_names_hash_max_size</td>\n<td>指定的server_name哈希表的最大值的大小</td>\n</tr>\n<tr>\n<td>types_hash_bucket_size</td>\n<td>指定用于存放哈希表的”桶”的大小</td>\n</tr>\n<tr>\n<td>types_hash_max_size</td>\n<td>指定哈希类型表的最大值的大小</td>\n</tr>\n<tr>\n<td>variables_hash_bucket_size</td>\n<td>指定用于存放保留变量”桶”的大小</td>\n</tr>\n<tr>\n<td>variables_hash_max_size</td>\n<td>指定存放保留变量最大哈希值的大小</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"Socket指令\"><a href=\"#Socket指令\" class=\"headerlink\" title=\"Socket指令\"></a>Socket指令</h3><blockquote>\n<p>描述Nginx如何设置创建TCP套接字的变量选项</p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th>指令</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>lingering_close</td>\n<td>指定如何保持客户端的连接，以便用于更多数据的传输</td>\n</tr>\n<tr>\n<td>lingering_time</td>\n<td>在使用lingering_close指令的连接中，使用该指令指定客户端连接为了处理更多的数据需要保持打开连接的时间</td>\n</tr>\n<tr>\n<td>lingering_timeout</td>\n<td>结合lingering_close，该指令显示Nginx在关闭客户端连接之前，为获得更多数据会等待多久</td>\n</tr>\n<tr>\n<td>reset_timeout_connection</td>\n<td>使用这个指令之后，超时的连接会被立即关闭，释放相关的内存。默认的状态是处于FIN_WAIT1，这种状态将会一直保持连接</td>\n</tr>\n<tr>\n<td>send_lowat</td>\n<td>如果非零，Nginx将会在客户端套接字尝试减少发送操作</td>\n</tr>\n<tr>\n<td>send_timeout</td>\n<td>在两次成功的客户端接收响应的写操作之间设置一个超时时间</td>\n</tr>\n<tr>\n<td>tcp_nodelay</td>\n<td>启用或禁用TCP_NODELAY选项，用于keep-alive连接</td>\n</tr>\n<tr>\n<td>tcp_nopush</td>\n<td>仅依赖于sendfile的使用。它能够使Nginx在一个数据包中尝试发送响应头，以及在数据包中发送一个完整的文件</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"server部分\"><a href=\"#server部分\" class=\"headerlink\" title=\"server部分\"></a>server部分</h3><p>示例：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\">http &#123;</div><div class=\"line\">    ...</div><div class=\"line\">    server &#123;</div><div class=\"line\">        listen       80 default_server;</div><div class=\"line\">        server_name  _;</div><div class=\"line\">        root         /usr/share/nginx/html;</div><div class=\"line\"></div><div class=\"line\">        # Load configuration files for the default server block.</div><div class=\"line\">        include /etc/nginx/default.d/*.conf;</div><div class=\"line\"></div><div class=\"line\">        location / &#123;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        error_page 404 /404.html;</div><div class=\"line\">            location = /40x.html &#123;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        error_page 500 502 503 504 /50x.html;</div><div class=\"line\">            location = /50x.html &#123;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    ...</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>一个虚拟服务器由listen和server_name指令组合定义。</p>\n<p><strong>listen</strong></p>\n<blockquote>\n<p>指令定义一个IP地址/端口组合或者UNIX套接字路径。示例</p>\n<ul>\n<li>listen address[:port];</li>\n<li>listen port;</li>\n<li>listen unix:path;</li>\n</ul>\n</blockquote>\n<p>示例：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">listen     127.0.0.1:80;</div><div class=\"line\">listen     localhost:80;</div><div class=\"line\">listen     127.0.0.1:8080;</div><div class=\"line\">listen     localhost:8080;</div><div class=\"line\">listen     192.168.3.105:80;</div><div class=\"line\">listen     192.168.3.105:8080;</div><div class=\"line\">listen     80;</div><div class=\"line\">listen     *:80;</div><div class=\"line\">listen     8080;</div><div class=\"line\">listen     *:8080;</div><div class=\"line\">listen     12.34.56.77:80;</div><div class=\"line\">listen     12.34.56.78:80;</div><div class=\"line\">listen     12.34.56.79:80;</div></pre></td></tr></table></figure></p>\n<p>另外，listen还有其他的一些可选参数。常用到的有<br>default_server，表示定义这样的一个组合：（address:port）默认的请求被绑定于此<br>ssl，表明该端口仅接受Https的连接</p>\n<p><strong>server_name</strong></p>\n<blockquote>\n<p>用来指定域名。</p>\n</blockquote>\n<p>示例：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">server_name   nginx.cn;</div><div class=\"line\">server_name   nginx.cn www.nginx.cn;</div><div class=\"line\">server_name   *.nginx.cn;</div><div class=\"line\">server_name   .nginx.cn;</div><div class=\"line\">server_name   nginx.*;</div><div class=\"line\">server_name   nginx.cng bucknell.net brackley.org;</div><div class=\"line\">server_name   localhost litchfield bleddington;</div><div class=\"line\">server_name   &quot;&quot;;</div></pre></td></tr></table></figure></p>\n<p>除了普通字符串外，Nginx也接受通配符作为Server_name的参数。</p>\n<ul>\n<li>使用通配符替代部分子域名： *.example.com</li>\n<li>代替顶级域部分： www.example.*</li>\n<li>匹配子域和域本身： .example.com 能匹配 *.example.com 和example.com</li>\n</ul>\n<p>另外，在域名前加上（~），正则表达式也可应用于 server_name.<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">server_name ~^www\\.example\\.com$</div><div class=\"line\">server_name ~^www(\\d+).example\\.(com)$</div></pre></td></tr></table></figure></p>\n<p>对于后一种方式是利用捕获，可以在以后的引用中进一步配置（用$1,$2等）指令中使用。</p>\n<h2 id=\"location部分\"><a href=\"#location部分\" class=\"headerlink\" title=\"location部分\"></a>location部分</h2><p>location指令可以用在虚拟服务器server部分，并且意味着提供来自客户端的URI或者内部的重定向访问。</p>\n<p>location定义：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">location [modifier] uri &#123;...&#125;</div></pre></td></tr></table></figure></p>\n<p>或者是命名location<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">location @name &#123;...&#125;</div></pre></td></tr></table></figure></p>\n<blockquote>\n<p>命名location仅对内部访问重定向，在进入一个location之前他会保留被请求的URI部分。且命名location只能存在与server级别的定义。</p>\n</blockquote>\n<p>示例<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">location / &#123; &#125;</div><div class=\"line\">location /images/ &#123; &#125;</div><div class=\"line\">location /blog/ &#123; &#125;</div><div class=\"line\">location /planet/ &#123; &#125;</div><div class=\"line\">location /planet/blog/ &#123; &#125;</div><div class=\"line\"></div><div class=\"line\">location ~ IndexPage.php$ &#123; &#125;</div><div class=\"line\">location ~ ^/BlogPlanet(/|/index.php)$ &#123; &#125;</div><div class=\"line\"></div><div class=\"line\">location ~* .(pl|cgi|perl|prl)$ &#123; &#125;</div><div class=\"line\">location ~* .(md|mdwn|txt|mkdn)$ &#123; &#125;</div><div class=\"line\"></div><div class=\"line\">location ^~ /images/IndexPage/ &#123; &#125;</div><div class=\"line\">location ^~ /blog/BlogPlanet/ &#123; &#125;</div><div class=\"line\"></div><div class=\"line\">location = / &#123; &#125;</div></pre></td></tr></table></figure></p>\n<p>当一个请求进入时，URI将会被检测匹配一个最佳的location。</p>\n<ul>\n<li>没有正则表达式的location被认为是最佳的匹配，独立于含有正则表达式的location。</li>\n<li>在配置文件中按照查找顺序进行正则匹配，在查到第一个正则表达式匹配时结束查找，将请求交由这个location处理。<br><strong>Tips：</strong><br>这里匹配的解码URI，如在URL中的”%20”,将会匹配location中的””(空格)。</li>\n</ul>\n<p>location常见的修饰符</p>\n<table>\n<thead>\n<tr>\n<th>修饰符</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>=</td>\n<td>使用精确匹配并且终止搜索</td>\n</tr>\n<tr>\n<td>~</td>\n<td>区分大小写的正则表达式匹配</td>\n</tr>\n<tr>\n<td>~*</td>\n<td>不去分大小写的正则表达式匹配</td>\n</tr>\n<tr>\n<td>^~</td>\n<td>如果该location是最佳的匹配，那么对于匹配这个location的字符串不在进行正则表达式检测。</td>\n</tr>\n</tbody>\n</table>\n<p>仅用于location中的指令</p>\n<table>\n<thead>\n<tr>\n<th>指令</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>alias</td>\n<td>定义location的其他名字，在文件系统中能够找到。</td>\n</tr>\n<tr>\n<td>internal</td>\n<td>指定一个仅用于内部请求的location（其他指定定义的重定向，rewrite请求，error请求等）</td>\n</tr>\n<tr>\n<td>limit_except</td>\n<td>限定一个location可以执行的Http操作（如，GET或HEAD）</td>\n</tr>\n</tbody>\n</table>\n<p>命名location的使用（一般与try_files配合使用）<br>示例：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">location / &#123;</div><div class=\"line\">  try_files $uri $uri/ $mongrel;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">location @mongrel &#123;</div><div class=\"line\">  proxy_pass http://appserver;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>上面一段配置表示，如果给定的URI作为一个文件没有被找到，那么处理将会通过代理被传递到appserver</p>\n<p>location的嵌套使用：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">root /var/www</div><div class=\"line\"></div><div class=\"line\">location / &#123;</div><div class=\"line\">  location ^~ /css &#123;</div><div class=\"line\">    location ~* /css.*\\.css$ &#123;</div><div class=\"line\">      ...</div><div class=\"line\">    &#125;</div><div class=\"line\">    ...</div><div class=\"line\">  &#125;</div><div class=\"line\">  ...</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p><strong>实践表明正则表达式location被嵌套在基于字符串的location是最佳的配置方式</strong></p>\n<h2 id=\"完整的配置文件示例\"><a href=\"#完整的配置文件示例\" class=\"headerlink\" title=\"完整的配置文件示例\"></a>完整的配置文件示例</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div></pre></td><td class=\"code\"><pre><div class=\"line\"># For more information on configuration, see:</div><div class=\"line\">#   * Official English Documentation: http://nginx.org/en/docs/</div><div class=\"line\">#   * Official Russian Documentation: http://nginx.org/ru/docs/</div><div class=\"line\"></div><div class=\"line\">user nginx;</div><div class=\"line\">worker_processes auto;</div><div class=\"line\">error_log /var/log/nginx/error.log;</div><div class=\"line\">pid /run/nginx.pid;</div><div class=\"line\"></div><div class=\"line\">events &#123;</div><div class=\"line\">    worker_connections 1024;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">http &#123;</div><div class=\"line\">    log_format  main  &apos;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &apos;</div><div class=\"line\">                      &apos;$status $body_bytes_sent &quot;$http_referer&quot; &apos;</div><div class=\"line\">                      &apos;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&apos;;</div><div class=\"line\"></div><div class=\"line\">    access_log  /var/log/nginx/access.log  main;</div><div class=\"line\"></div><div class=\"line\">    sendfile            on;</div><div class=\"line\">    tcp_nopush          on;</div><div class=\"line\">    tcp_nodelay         on;</div><div class=\"line\">    keepalive_timeout   65;</div><div class=\"line\">    types_hash_max_size 2048;</div><div class=\"line\"></div><div class=\"line\">    include             /etc/nginx/mime.types;</div><div class=\"line\">    default_type        application/octet-stream;</div><div class=\"line\"></div><div class=\"line\">    # Load modular configuration files from the /etc/nginx/conf.d directory.</div><div class=\"line\">    # See http://nginx.org/en/docs/ngx_core_module.html#include</div><div class=\"line\">    # for more information.</div><div class=\"line\">    include /etc/nginx/conf.d/*.conf;</div><div class=\"line\"></div><div class=\"line\">    server &#123;</div><div class=\"line\">        listen       80 default_server;</div><div class=\"line\">        listen       [::]:80 default_server;</div><div class=\"line\">        server_name  _;</div><div class=\"line\">        root         /usr/share/nginx/html;</div><div class=\"line\"></div><div class=\"line\">        # Load configuration files for the default server block.</div><div class=\"line\">        include /etc/nginx/default.d/*.conf;</div><div class=\"line\"></div><div class=\"line\">        location / &#123;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        error_page 404 /404.html;</div><div class=\"line\">            location = /40x.html &#123;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        error_page 500 502 503 504 /50x.html;</div><div class=\"line\">            location = /50x.html &#123;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n","excerpt":"<p>Nginx配置主要分成四部分：main、server、upstream 和 location，每部分包含若干个指令。<br>main(全局设置)</p>\n<blockquote>\n<p>该部分设置的指令将影响其它所有部分的设置；</p>\n</blockquote>\n<p>server(主机设置)</p>\n<blockquote>\n<p>该部分的指令主要用于指定虚拟主机域名、IP和端口；</p>\n</blockquote>\n<p>upstream(上游服务器设置)</p>\n<blockquote>\n<p>该部分的指令用于设置一系列的后端服务器，设置反向代理及后端服务器的负载均衡；</p>\n</blockquote>\n<p>location(URL匹配特定位置后的设置)</p>\n<blockquote>\n<p>该部分用于匹配网页位置（比如，根目录“/”,“/images”,等等）。</p>\n</blockquote>\n<p>Nginx本身是模块化设计。全局的配置区段负责全局的各个方面，对于不同的协议可以单独划分成一个部分。我们可以通过在这些单独的协议配置中（http或mail）指定server来定义每一个请求应该被如何处理，以便请求被路由到特定的IP地址或端口上。在http区段中，使用location来匹配URI请求，这些location又可以嵌套使用或者按照一定顺序使用，以确保请求被路由到正确的文件系统区域或者其他地方。</p>\n<p><strong>他们之间的关系式：</strong> server继承main，location继承server；upstream既不会继承指令也不会被继承。它有自己的特殊指令，不需要在其他地方的应用。</p>","more":"<h2 id=\"基本配置格式\"><a href=\"#基本配置格式\" class=\"headerlink\" title=\"基本配置格式\"></a>基本配置格式</h2><p>Nginx的配置文件由若干部分组成。但每一部分都是通过下列的方法定义。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;section&gt; &#123;</div><div class=\"line\">  &lt;directive&gt;&lt;parameters&gt;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p><strong>Tips:</strong></p>\n<ul>\n<li>每一个指令行都由分号结束（;），这标志着一行结束。</li>\n<li>大括号（{}）实际上表示一个新上下文（context），常称为『节，部分（section）』</li>\n</ul>\n<h2 id=\"Nginx的全局配置\"><a href=\"#Nginx的全局配置\" class=\"headerlink\" title=\"Nginx的全局配置\"></a>Nginx的全局配置</h2><p>全局配置顾名思义就是对整个server都有效的参数。全局配置部分可能包含配置指令（如，user、worker_processes），也包括『节、部分（section）（如，events）』。这部分配置一般放在 nginx.conf 文件的顶部。</p>\n<p>示例：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">user nginx;</div><div class=\"line\">worker_processes auto;</div><div class=\"line\">error_log /var/log/nginx/error.log;</div><div class=\"line\">pid /run/nginx.pid;</div><div class=\"line\"></div><div class=\"line\">events &#123;</div><div class=\"line\">    use epoll   #使用网络IO模型，epoll模型比select模型效率高很多</div><div class=\"line\">    worker_connections 1024;    #每个worker能够处理的最大连接数，最大值取决于ulimit -n的值</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>主要配置指令及含义</p>\n<table>\n<thead>\n<tr>\n<th>配置指令</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>user</td>\n<td>配置worker进程运行的用户和用户组，第一个参数为user，第二个为group（如果忽略了group，那么group与user同名）</td>\n</tr>\n<tr>\n<td>worker_processes</td>\n<td>指定worker进程启动的数量。这些进程用于处理客户的连接。通常该值会设置成CPU处理器核心数相同的数量。默认值是”auto”，也是按照这样去设置数量</td>\n</tr>\n<tr>\n<td>error_log</td>\n<td>设置错误日志文件位置。如果在其他的区段中没有设置其他的error_log,那么这个日志文件将会记录所有的错误。该指令的第二个参数指定了被记录的错误信息级别（debug[注，debug级别的错误只有在nginx编译的时候配置了 –with-debug选项才可以使用]、info、notice、warn、error、crit、alert、emsg）</td>\n</tr>\n<tr>\n<td>pid</td>\n<td>设置记录主进程ID的文件地址。通常设置该值来方便我们对nginx的管理</td>\n</tr>\n<tr>\n<td>use</td>\n<td>该指令指示我们使用什么样的连接方式。该指令需要写在 events 区段里面。</td>\n</tr>\n<tr>\n<td>worker_connections</td>\n<td>配置一个工作进程能够接受并发连接的最大数。这个连接包括，客户连接和向上游服务器的连接，但也不仅限于此。通常该配置同use一样写在events里面</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"include指令\"><a href=\"#include指令\" class=\"headerlink\" title=\"include指令\"></a>include指令</h2><p>在Nginx配置文件中可以使用include指令将其他位置存放的配置文件加载进来，来方便配置管理和增强配置文件的可读性。</p>\n<p><strong>Tips：</strong><br>使用include文件，要确保被包含的文件自身符合nginx配置语法。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">include /etc/nginx/default.d/*.conf;</div></pre></td></tr></table></figure></p>\n<p>路径中出现通配符表示可以匹配多个文件。<br>nginx配置文件的语法错误可以通过nginx的 -t 选项来进行测试。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">/path/to/nginx -t -c &lt;path-to-nginx.conf&gt;</div></pre></td></tr></table></figure></p>\n<p><strong>注：</strong> 该命令只能检查语法错误，具体到某个功能性的测试还需要我们自己有针对性的去测。</p>\n<h2 id=\"Http的server部分\"><a href=\"#Http的server部分\" class=\"headerlink\" title=\"Http的server部分\"></a>Http的server部分</h2><p>通常我们提到的server部分，具体指的是Http的server部分。所以，其在Http配置的context是可用的。该部分用于处理http连接，因此该模块下提供了相当数量的指令。</p>\n<h3 id=\"客户端指令\"><a href=\"#客户端指令\" class=\"headerlink\" title=\"客户端指令\"></a>客户端指令</h3><blockquote>\n<p>用于处理客户端连接本身的各个方面，以及不同类型的客户端</p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th>指令</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>chunked_transfer_encoding</td>\n<td>在发给客户端的响应中允许禁用http/1.1标准的块传输编码</td>\n</tr>\n<tr>\n<td>client_body_buffer_size</td>\n<td>为了阻止临时文件写到磁盘，可以通过该指令为客户端请求体设置缓存大小，默认的缓存大小为两个内存页面</td>\n</tr>\n<tr>\n<td>client_body_in_file_only</td>\n<td>用于调试或者是进一步处理客户端请求体。该指令能够将客户端请求体强制写入到磁盘文件</td>\n</tr>\n<tr>\n<td>client_body_in_single_buffer</td>\n<td>为了减少拷贝的操作，使用该指令强制Nginx将整个客户端请求体保存到单个缓存中</td>\n</tr>\n<tr>\n<td>client_body_temp_path</td>\n<td>定义一个命令路径用于保存客户端请求体</td>\n</tr>\n<tr>\n<td>clent_body_timeout</td>\n<td>指定客户端成功读取的两个操作之间的时间间隔</td>\n</tr>\n<tr>\n<td>client_header_buffer_size</td>\n<td>为客户端请求头指定一个缓存大小，当请求头大于1kB时会用到这个设置。</td>\n</tr>\n<tr>\n<td>client_header_timeout</td>\n<td>读取整个客户端头的超时时间</td>\n</tr>\n<tr>\n<td>client_max_body_size</td>\n<td>定义允许最大的客户端请求头，如果大于该值，那么客户端将会是413（request entity too large）错误</td>\n</tr>\n<tr>\n<td>keepalive_disable</td>\n<td>对某些类型的客户端禁用keep-alive请求功能。</td>\n</tr>\n<tr>\n<td>keepalive_requests</td>\n<td>定义在一个keep-alive关闭之前可以接收多少个请求</td>\n</tr>\n<tr>\n<td>keepalive_timeout</td>\n<td>指定keep-alive连接持续多久。第二个参数用于在响应头中这只”Keep-Alive”头</td>\n</tr>\n<tr>\n<td>large_client_header_buffers</td>\n<td>定义最大数量和最大客户端请求头的大小</td>\n</tr>\n<tr>\n<td>msie_padding</td>\n<td>为了填充响应的大小至512字节，对于MSIE客户端，大于400的状态码会被添加注释以便满足512字节，通过启用该命令可以阻止这种行为</td>\n</tr>\n<tr>\n<td>msie_refresh</td>\n<td>对于MSIE客户端，可启用发送一个refresh头</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"文件I-O指令\"><a href=\"#文件I-O指令\" class=\"headerlink\" title=\"文件I/O指令\"></a>文件I/O指令</h3><blockquote>\n<p>用于控制Nginx如何投递静态文件。</p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th>指令</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>aio</td>\n<td>启用异步文件I/O。FreeBSD系统下，该值可能被用于sendfile预加载数据。Linux下需要directio指令，自动禁用sendfile</td>\n</tr>\n<tr>\n<td>directio</td>\n<td>用于启用操作系统特定的标识或者功能提供大于给定参数的文件。Linux下使用aio时需要使用该指令。</td>\n</tr>\n<tr>\n<td>directio_alignment</td>\n<td>设置directio算法。默认值是512，通常已经足够，但是在Linux的XFS下推荐增加至4K</td>\n</tr>\n<tr>\n<td>open_file_cache</td>\n<td>配置一个缓存用于存放打开的文件描述符、目录查询和文件查询错误</td>\n</tr>\n<tr>\n<td>open_file_cache_errors</td>\n<td>按照open_file_cache，启用文件查询错误缓存</td>\n</tr>\n<tr>\n<td>open_file_cache_min_uses</td>\n<td>open_file_cache缓存的文件描述符保留在缓存中，使用该指令配置最少使用文件描述符的次数</td>\n</tr>\n<tr>\n<td>open_file_cache_valid</td>\n<td>指定对open_file_cache缓存有效性检查的时间间隔</td>\n</tr>\n<tr>\n<td>postpone_output</td>\n<td>指定Nginx发送给客户端最小的数值，如果可能的话，没有数据会发送，直到达到此值</td>\n</tr>\n<tr>\n<td>read_ahead</td>\n<td>如果可能的话，内核将预读文件到设定的参数大小</td>\n</tr>\n<tr>\n<td>sendfile</td>\n<td>使用sendfile（2）直接复制数据从一个到另一个文件描述符</td>\n</tr>\n<tr>\n<td>sendfile_max_chunk</td>\n<td>设置在一个sendfile(2)拷贝中最大数据的大小，这是为了阻止worker”贪婪”</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"Hash指令\"><a href=\"#Hash指令\" class=\"headerlink\" title=\"Hash指令\"></a>Hash指令</h3><blockquote>\n<p>控制Nginx 分配给某些变量多大的静态文件</p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th>指令</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>server_names_hash_bucket_size</td>\n<td>指定用于保存server_name哈希表大小的”桶”</td>\n</tr>\n<tr>\n<td>server_names_hash_max_size</td>\n<td>指定的server_name哈希表的最大值的大小</td>\n</tr>\n<tr>\n<td>types_hash_bucket_size</td>\n<td>指定用于存放哈希表的”桶”的大小</td>\n</tr>\n<tr>\n<td>types_hash_max_size</td>\n<td>指定哈希类型表的最大值的大小</td>\n</tr>\n<tr>\n<td>variables_hash_bucket_size</td>\n<td>指定用于存放保留变量”桶”的大小</td>\n</tr>\n<tr>\n<td>variables_hash_max_size</td>\n<td>指定存放保留变量最大哈希值的大小</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"Socket指令\"><a href=\"#Socket指令\" class=\"headerlink\" title=\"Socket指令\"></a>Socket指令</h3><blockquote>\n<p>描述Nginx如何设置创建TCP套接字的变量选项</p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th>指令</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>lingering_close</td>\n<td>指定如何保持客户端的连接，以便用于更多数据的传输</td>\n</tr>\n<tr>\n<td>lingering_time</td>\n<td>在使用lingering_close指令的连接中，使用该指令指定客户端连接为了处理更多的数据需要保持打开连接的时间</td>\n</tr>\n<tr>\n<td>lingering_timeout</td>\n<td>结合lingering_close，该指令显示Nginx在关闭客户端连接之前，为获得更多数据会等待多久</td>\n</tr>\n<tr>\n<td>reset_timeout_connection</td>\n<td>使用这个指令之后，超时的连接会被立即关闭，释放相关的内存。默认的状态是处于FIN_WAIT1，这种状态将会一直保持连接</td>\n</tr>\n<tr>\n<td>send_lowat</td>\n<td>如果非零，Nginx将会在客户端套接字尝试减少发送操作</td>\n</tr>\n<tr>\n<td>send_timeout</td>\n<td>在两次成功的客户端接收响应的写操作之间设置一个超时时间</td>\n</tr>\n<tr>\n<td>tcp_nodelay</td>\n<td>启用或禁用TCP_NODELAY选项，用于keep-alive连接</td>\n</tr>\n<tr>\n<td>tcp_nopush</td>\n<td>仅依赖于sendfile的使用。它能够使Nginx在一个数据包中尝试发送响应头，以及在数据包中发送一个完整的文件</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"server部分\"><a href=\"#server部分\" class=\"headerlink\" title=\"server部分\"></a>server部分</h3><p>示例：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\">http &#123;</div><div class=\"line\">    ...</div><div class=\"line\">    server &#123;</div><div class=\"line\">        listen       80 default_server;</div><div class=\"line\">        server_name  _;</div><div class=\"line\">        root         /usr/share/nginx/html;</div><div class=\"line\"></div><div class=\"line\">        # Load configuration files for the default server block.</div><div class=\"line\">        include /etc/nginx/default.d/*.conf;</div><div class=\"line\"></div><div class=\"line\">        location / &#123;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        error_page 404 /404.html;</div><div class=\"line\">            location = /40x.html &#123;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        error_page 500 502 503 504 /50x.html;</div><div class=\"line\">            location = /50x.html &#123;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    ...</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>一个虚拟服务器由listen和server_name指令组合定义。</p>\n<p><strong>listen</strong></p>\n<blockquote>\n<p>指令定义一个IP地址/端口组合或者UNIX套接字路径。示例</p>\n<ul>\n<li>listen address[:port];</li>\n<li>listen port;</li>\n<li>listen unix:path;</li>\n</ul>\n</blockquote>\n<p>示例：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">listen     127.0.0.1:80;</div><div class=\"line\">listen     localhost:80;</div><div class=\"line\">listen     127.0.0.1:8080;</div><div class=\"line\">listen     localhost:8080;</div><div class=\"line\">listen     192.168.3.105:80;</div><div class=\"line\">listen     192.168.3.105:8080;</div><div class=\"line\">listen     80;</div><div class=\"line\">listen     *:80;</div><div class=\"line\">listen     8080;</div><div class=\"line\">listen     *:8080;</div><div class=\"line\">listen     12.34.56.77:80;</div><div class=\"line\">listen     12.34.56.78:80;</div><div class=\"line\">listen     12.34.56.79:80;</div></pre></td></tr></table></figure></p>\n<p>另外，listen还有其他的一些可选参数。常用到的有<br>default_server，表示定义这样的一个组合：（address:port）默认的请求被绑定于此<br>ssl，表明该端口仅接受Https的连接</p>\n<p><strong>server_name</strong></p>\n<blockquote>\n<p>用来指定域名。</p>\n</blockquote>\n<p>示例：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">server_name   nginx.cn;</div><div class=\"line\">server_name   nginx.cn www.nginx.cn;</div><div class=\"line\">server_name   *.nginx.cn;</div><div class=\"line\">server_name   .nginx.cn;</div><div class=\"line\">server_name   nginx.*;</div><div class=\"line\">server_name   nginx.cng bucknell.net brackley.org;</div><div class=\"line\">server_name   localhost litchfield bleddington;</div><div class=\"line\">server_name   &quot;&quot;;</div></pre></td></tr></table></figure></p>\n<p>除了普通字符串外，Nginx也接受通配符作为Server_name的参数。</p>\n<ul>\n<li>使用通配符替代部分子域名： *.example.com</li>\n<li>代替顶级域部分： www.example.*</li>\n<li>匹配子域和域本身： .example.com 能匹配 *.example.com 和example.com</li>\n</ul>\n<p>另外，在域名前加上（~），正则表达式也可应用于 server_name.<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">server_name ~^www\\.example\\.com$</div><div class=\"line\">server_name ~^www(\\d+).example\\.(com)$</div></pre></td></tr></table></figure></p>\n<p>对于后一种方式是利用捕获，可以在以后的引用中进一步配置（用$1,$2等）指令中使用。</p>\n<h2 id=\"location部分\"><a href=\"#location部分\" class=\"headerlink\" title=\"location部分\"></a>location部分</h2><p>location指令可以用在虚拟服务器server部分，并且意味着提供来自客户端的URI或者内部的重定向访问。</p>\n<p>location定义：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">location [modifier] uri &#123;...&#125;</div></pre></td></tr></table></figure></p>\n<p>或者是命名location<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">location @name &#123;...&#125;</div></pre></td></tr></table></figure></p>\n<blockquote>\n<p>命名location仅对内部访问重定向，在进入一个location之前他会保留被请求的URI部分。且命名location只能存在与server级别的定义。</p>\n</blockquote>\n<p>示例<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">location / &#123; &#125;</div><div class=\"line\">location /images/ &#123; &#125;</div><div class=\"line\">location /blog/ &#123; &#125;</div><div class=\"line\">location /planet/ &#123; &#125;</div><div class=\"line\">location /planet/blog/ &#123; &#125;</div><div class=\"line\"></div><div class=\"line\">location ~ IndexPage.php$ &#123; &#125;</div><div class=\"line\">location ~ ^/BlogPlanet(/|/index.php)$ &#123; &#125;</div><div class=\"line\"></div><div class=\"line\">location ~* .(pl|cgi|perl|prl)$ &#123; &#125;</div><div class=\"line\">location ~* .(md|mdwn|txt|mkdn)$ &#123; &#125;</div><div class=\"line\"></div><div class=\"line\">location ^~ /images/IndexPage/ &#123; &#125;</div><div class=\"line\">location ^~ /blog/BlogPlanet/ &#123; &#125;</div><div class=\"line\"></div><div class=\"line\">location = / &#123; &#125;</div></pre></td></tr></table></figure></p>\n<p>当一个请求进入时，URI将会被检测匹配一个最佳的location。</p>\n<ul>\n<li>没有正则表达式的location被认为是最佳的匹配，独立于含有正则表达式的location。</li>\n<li>在配置文件中按照查找顺序进行正则匹配，在查到第一个正则表达式匹配时结束查找，将请求交由这个location处理。<br><strong>Tips：</strong><br>这里匹配的解码URI，如在URL中的”%20”,将会匹配location中的””(空格)。</li>\n</ul>\n<p>location常见的修饰符</p>\n<table>\n<thead>\n<tr>\n<th>修饰符</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>=</td>\n<td>使用精确匹配并且终止搜索</td>\n</tr>\n<tr>\n<td>~</td>\n<td>区分大小写的正则表达式匹配</td>\n</tr>\n<tr>\n<td>~*</td>\n<td>不去分大小写的正则表达式匹配</td>\n</tr>\n<tr>\n<td>^~</td>\n<td>如果该location是最佳的匹配，那么对于匹配这个location的字符串不在进行正则表达式检测。</td>\n</tr>\n</tbody>\n</table>\n<p>仅用于location中的指令</p>\n<table>\n<thead>\n<tr>\n<th>指令</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>alias</td>\n<td>定义location的其他名字，在文件系统中能够找到。</td>\n</tr>\n<tr>\n<td>internal</td>\n<td>指定一个仅用于内部请求的location（其他指定定义的重定向，rewrite请求，error请求等）</td>\n</tr>\n<tr>\n<td>limit_except</td>\n<td>限定一个location可以执行的Http操作（如，GET或HEAD）</td>\n</tr>\n</tbody>\n</table>\n<p>命名location的使用（一般与try_files配合使用）<br>示例：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">location / &#123;</div><div class=\"line\">  try_files $uri $uri/ $mongrel;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">location @mongrel &#123;</div><div class=\"line\">  proxy_pass http://appserver;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>上面一段配置表示，如果给定的URI作为一个文件没有被找到，那么处理将会通过代理被传递到appserver</p>\n<p>location的嵌套使用：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">root /var/www</div><div class=\"line\"></div><div class=\"line\">location / &#123;</div><div class=\"line\">  location ^~ /css &#123;</div><div class=\"line\">    location ~* /css.*\\.css$ &#123;</div><div class=\"line\">      ...</div><div class=\"line\">    &#125;</div><div class=\"line\">    ...</div><div class=\"line\">  &#125;</div><div class=\"line\">  ...</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p><strong>实践表明正则表达式location被嵌套在基于字符串的location是最佳的配置方式</strong></p>\n<h2 id=\"完整的配置文件示例\"><a href=\"#完整的配置文件示例\" class=\"headerlink\" title=\"完整的配置文件示例\"></a>完整的配置文件示例</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div></pre></td><td class=\"code\"><pre><div class=\"line\"># For more information on configuration, see:</div><div class=\"line\">#   * Official English Documentation: http://nginx.org/en/docs/</div><div class=\"line\">#   * Official Russian Documentation: http://nginx.org/ru/docs/</div><div class=\"line\"></div><div class=\"line\">user nginx;</div><div class=\"line\">worker_processes auto;</div><div class=\"line\">error_log /var/log/nginx/error.log;</div><div class=\"line\">pid /run/nginx.pid;</div><div class=\"line\"></div><div class=\"line\">events &#123;</div><div class=\"line\">    worker_connections 1024;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">http &#123;</div><div class=\"line\">    log_format  main  &apos;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &apos;</div><div class=\"line\">                      &apos;$status $body_bytes_sent &quot;$http_referer&quot; &apos;</div><div class=\"line\">                      &apos;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&apos;;</div><div class=\"line\"></div><div class=\"line\">    access_log  /var/log/nginx/access.log  main;</div><div class=\"line\"></div><div class=\"line\">    sendfile            on;</div><div class=\"line\">    tcp_nopush          on;</div><div class=\"line\">    tcp_nodelay         on;</div><div class=\"line\">    keepalive_timeout   65;</div><div class=\"line\">    types_hash_max_size 2048;</div><div class=\"line\"></div><div class=\"line\">    include             /etc/nginx/mime.types;</div><div class=\"line\">    default_type        application/octet-stream;</div><div class=\"line\"></div><div class=\"line\">    # Load modular configuration files from the /etc/nginx/conf.d directory.</div><div class=\"line\">    # See http://nginx.org/en/docs/ngx_core_module.html#include</div><div class=\"line\">    # for more information.</div><div class=\"line\">    include /etc/nginx/conf.d/*.conf;</div><div class=\"line\"></div><div class=\"line\">    server &#123;</div><div class=\"line\">        listen       80 default_server;</div><div class=\"line\">        listen       [::]:80 default_server;</div><div class=\"line\">        server_name  _;</div><div class=\"line\">        root         /usr/share/nginx/html;</div><div class=\"line\"></div><div class=\"line\">        # Load configuration files for the default server block.</div><div class=\"line\">        include /etc/nginx/default.d/*.conf;</div><div class=\"line\"></div><div class=\"line\">        location / &#123;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        error_page 404 /404.html;</div><div class=\"line\">            location = /40x.html &#123;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        error_page 500 502 503 504 /50x.html;</div><div class=\"line\">            location = /50x.html &#123;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>"},{"title":"PHP-FPM运行状态监控","date":"2016-09-27T13:30:00.000Z","_content":"PHP-FPM内置了一个运行状态页，开启后便可查看PHP-FPM的详细运行状态，可以给我们在优化PHP-FPM时带来帮助。\n\n<!-- more -->\n\n## php-fpm配置\n查看php-fpm配置文件\n```\n$ /usr/local/php56/sbin/php-fpm -t\n[27-Sep-2016 14:59:06] NOTICE: configuration file /usr/local/php56/etc/php-fpm.conf test is successful\n```\n开启php-fpm的status配置\n```\nvi /usr/local/php56/etc/php-fpm.conf\n```\n修改加入：\n```\npm.status_path = /phpfpm_status\n```\n配置文件中相关的说明\n```\n; The URI to view the FPM status page. If this value is not set, no URI will be\n; recognized as a status page. It shows the following informations:\n;   pool                 - the name of the pool;\n;   process manager      - static, dynamic or ondemand;\n;   start time           - the date and time FPM has started;\n;   start since          - number of seconds since FPM has started;\n;   accepted conn        - the number of request accepted by the pool;\n;   listen queue         - the number of request in the queue of pending\n;                          connections (see backlog in listen(2));\n;   max listen queue     - the maximum number of requests in the queue\n;                          of pending connections since FPM has started;\n;   listen queue len     - the size of the socket queue of pending connections;\n;   idle processes       - the number of idle processes;\n;   active processes     - the number of active processes;\n;   total processes      - the number of idle + active processes;\n;   max active processes - the maximum number of active processes since FPM\n;                          has started;\n;   max children reached - number of times, the process limit has been reached,\n;                          when pm tries to start more children (works only for\n;                          pm 'dynamic' and 'ondemand');\n; Value are updated in real time.\n; Value are updated in real time.\n; Example output:\n;   pool:                 www\n;   process manager:      static\n;   start time:           01/Jul/2011:17:53:49 +0200\n;   start since:          62636\n;   accepted conn:        190460\n;   listen queue:         0\n;   max listen queue:     1\n;   listen queue len:     42\n;   idle processes:       4\n;   active processes:     11\n;   total processes:      15\n;   max active processes: 12\n;   max children reached: 0\n;\n; By default the status page output is formatted as text/plain. Passing either\n; 'html', 'xml' or 'json' in the query string will return the corresponding\n; output syntax. Example:\n;   http://www.foo.bar/status\n;   http://www.foo.bar/status?json\n;   http://www.foo.bar/status?html\n;   http://www.foo.bar/status?xml\n;\n; By default the status page only outputs short status. Passing 'full' in the\n; query string will also return status for each pool process.\n; Example:\n;   http://www.foo.bar/status?full\n;   http://www.foo.bar/status?json&full\n;   http://www.foo.bar/status?html&full\n;   http://www.foo.bar/status?xml&full\n; The Full status returns for each process:\n; The Full status returns for each process:\n;   pid                  - the PID of the process;\n;   state                - the state of the process (Idle, Running, ...);\n;   start time           - the date and time the process has started;\n;   start since          - the number of seconds since the process has started;\n;   requests             - the number of requests the process has served;\n;   request duration     - the duration in µs of the requests;\n;   request method       - the request method (GET, POST, ...);\n;   request URI          - the request URI with the query string;\n;   content length       - the content length of the request (only with POST);\n;   user                 - the user (PHP_AUTH_USER) (or '-' if not set);\n;   script               - the main script called (or '-' if not set);\n;   last request cpu     - the %cpu the last request consumed\n;                          it's always 0 if the process is not in Idle state\n;                          because CPU calculation is done when the request\n;                          processing has terminated;\n;   last request memory  - the max amount of memory the last request consumed\n;                          it's always 0 if the process is not in Idle state\n;                          because memory calculation is done when the request\n;                          processing has terminated;\n; If the process is in Idle state, then informations are related to the\n; last request the process has served. Otherwise informations are related to\n; the current request being served.\n; Example output:\n;   ************************\n;   pid:                  31330\n;   state:                Running\n;   start time:           01/Jul/2011:17:53:49 +0200\n;   start since:          63087\n;   requests:             12808\n;   request duration:     1250261\n;   request method:       GET\n;   request URI:          /test_mem.php?N=10000\n;   content length:       0\n;   user:                 -\n;   script:               /home/fat/web/docs/php/test_mem.php\n;   last request cpu:     0.00\n;   last request memory:  0\n;\n; Note: There is a real-time FPM status monitoring sample web page available\n;       It's available in: /usr/local/php56/share/php/fpm/status.html\n;\n; Note: The value must start with a leading slash (/). The value can be\n;       anything, but it may not be a good idea to use the .php extension or it\n;       may conflict with a real PHP file.\n; Default Value: not set\npm.status_path = /phpfpm_status\n```\n## 重启PHP-FPM\n```\nkill -USR2 `cat /usr/local/php56/var/run/php-fpm.pid`\n```\n\n## 配置nginx代理\n查看nginx配置文件\n```\n/usr/local/nginx/sbin/nginx -t\nnginx: the configuration file /usr/local/nginx/conf/nginx.conf syntax is ok\nnginx: configuration file /usr/local/nginx/conf/nginx.conf test is successful\n```\n\n修改配置\n```\nvi /usr/local/nginx/conf/nginx.conf\n```\n加入：\n```\nlocation /phpfpm_status {\n        fastcgi_pass  127.0.0.1:9000;\n        include fastcgi_params;\n        fastcgi_param SCRIPT_FILENAME $fastcgi_script_name;\n}\n```\n\n重启nginx\n```\n/usr/local/nginx/sbin/nginx -s reload\n```\n\n## 测试\n浏览器或者通过curl访问\n\n[http://you-server-ip/phpfpm_status](http://127.0.0.1/phpfpm_status)\n\n```\n[root@iZwz9g8nzni5lj69dhlesoZ ~]# curl 127.0.0.1/phpfpm_status\npool:                 www\nprocess manager:      dynamic\nstart time:           27/Sep/2016:15:08:57 +0800\nstart since:          385\naccepted conn:        3\nlisten queue:         0\nmax listen queue:     0\nlisten queue len:     128\nidle processes:       1\nactive processes:     1\ntotal processes:      2\nmax active processes: 1\nmax children reached: 0\nslow requests:        0\n```\n\n- 参数说明：\n\n参数| 说明\n----|-----\npool | fpm池子名称，大多数为www\nprocess manager | 进程管理方式,值：static, dynamic or ondemand. dynamic\nstart time | 启动日期,如果reload了php-fpm，时间会更新\nstart since | 运行时长\naccepted conn | 当前池子接受的请求数\nlisten queue | 请求等待队列，如果这个值不为0，那么要增加FPM的进程数量\nmax listen queue | 请求等待队列最高的数量\nlisten queue len | socket等待队列长度\nidle processes | 空闲进程数量\nactive processes | 活跃进程数量\ntotal processes | 总进程数量\nmax active processes | 最大的活跃进程数量（FPM启动开始算）\nmax children reached | 大道进程最大数量限制的次数，如果这个数量不为0，那说明你的最大进程数量太小了，请改大一点。\nslow requests | 启用了php-fpm slow-log，缓慢请求的数量\n\n- php-fpm还提供不同格式的输入，方便我们查看和与其他监控系统对接。\n\n```\nhttp://www.foo.bar/status       #默认纯文本\nhttp://www.foo.bar/status?json  #json格式\nhttp://www.foo.bar/status?html  #html\nhttp://www.foo.bar/status?xml   #xml\n```\n\n- 通过增加full参数，php-fpm还提供查看所有进程的运行状况\n\n```\nhttp://www.foo.bar/status?full        #默认纯文本\nhttp://www.foo.bar/status?json&full   #json格式\nhttp://www.foo.bar/status?html&full   #html\nhttp://www.foo.bar/status?xml&full    #xml\n```\n\n示例：\n```\ncurl 'http://127.0.0.1/phpfpm_status?full'\npool:                 www\nprocess manager:      dynamic\nstart time:           27/Sep/2016:15:08:57 +0800\nstart since:          1546\naccepted conn:        14\nlisten queue:         0\nmax listen queue:     0\nlisten queue len:     128\nidle processes:       1\nactive processes:     1\ntotal processes:      2\nmax active processes: 1\nmax children reached: 0\nslow requests:        0\n************************\npid:                  12132\nstate:                Running\nstart time:           27/Sep/2016:15:08:57 +0800\nstart since:          1546\nrequests:             7\nrequest duration:     117\nrequest method:       GET\nrequest URI:          /phpfpm_status?full\ncontent length:       0\nuser:                 -\nscript:               /phpfpm_status\nlast request cpu:     0.00\nlast request memory:  0\n************************\npid:                  12133\nstate:                Idle\nstart time:           27/Sep/2016:15:08:57 +0800\nstart since:          1546\nrequests:             7\nrequest duration:     132\nrequest method:       GET\nrequest URI:          /phpfpm_status?html&full\ncontent length:       0\nuser:                 -\nscript:               /phpfpm_status\nlast request cpu:     0.00\nlast request memory:  262144\n```\n\n具体进程参数说明\n\n参数 | 说明\n----|-----\npid | 进程号\nstate | 状态（Idle - 闲置， Running - 运行， ...）\nstart time | 进程开始运行时间\nstart since | 进程开始持续时间（单位：秒）\nrequests | 进程已经处理的请求数\nrequest duration | µs的请求数量\nrequest method | 请求方式（GET, POST, ...）\nrequest URI | 请求URI\ncontent length | 请求内容长度（仅限POST请求）\nuser | PHP_AUTH_USER （'-'， 表示没有限制）\nscript | 请求文件\nlast request cpu | 最后一次请求占用CPU百分比（如果进程不是处于 `Idle - 闲置` 状态，该值总是0，因为当请求处理终止时，CPU计算已经完成）\nlast request memory | 最后一次请求占用内存（如果进程不是处于 `Idle - 闲置` 状态，该值总是0，因为当请求处理终止时，memory计算已经完成）\n\n**Tips:**\n如果进程处于 idle 状态，所显示的信息就是基于最后一次请求给出的状态，否则就是基于本次请求的状态。\n","source":"_posts/PHP-FPM运行状态监控.md","raw":"---\ntitle: PHP-FPM运行状态监控\ndate: 2016-09-27 21:30:00\ntags:\n- PHP-FPM\n- 监控\ncategories:\n- PHP\n---\nPHP-FPM内置了一个运行状态页，开启后便可查看PHP-FPM的详细运行状态，可以给我们在优化PHP-FPM时带来帮助。\n\n<!-- more -->\n\n## php-fpm配置\n查看php-fpm配置文件\n```\n$ /usr/local/php56/sbin/php-fpm -t\n[27-Sep-2016 14:59:06] NOTICE: configuration file /usr/local/php56/etc/php-fpm.conf test is successful\n```\n开启php-fpm的status配置\n```\nvi /usr/local/php56/etc/php-fpm.conf\n```\n修改加入：\n```\npm.status_path = /phpfpm_status\n```\n配置文件中相关的说明\n```\n; The URI to view the FPM status page. If this value is not set, no URI will be\n; recognized as a status page. It shows the following informations:\n;   pool                 - the name of the pool;\n;   process manager      - static, dynamic or ondemand;\n;   start time           - the date and time FPM has started;\n;   start since          - number of seconds since FPM has started;\n;   accepted conn        - the number of request accepted by the pool;\n;   listen queue         - the number of request in the queue of pending\n;                          connections (see backlog in listen(2));\n;   max listen queue     - the maximum number of requests in the queue\n;                          of pending connections since FPM has started;\n;   listen queue len     - the size of the socket queue of pending connections;\n;   idle processes       - the number of idle processes;\n;   active processes     - the number of active processes;\n;   total processes      - the number of idle + active processes;\n;   max active processes - the maximum number of active processes since FPM\n;                          has started;\n;   max children reached - number of times, the process limit has been reached,\n;                          when pm tries to start more children (works only for\n;                          pm 'dynamic' and 'ondemand');\n; Value are updated in real time.\n; Value are updated in real time.\n; Example output:\n;   pool:                 www\n;   process manager:      static\n;   start time:           01/Jul/2011:17:53:49 +0200\n;   start since:          62636\n;   accepted conn:        190460\n;   listen queue:         0\n;   max listen queue:     1\n;   listen queue len:     42\n;   idle processes:       4\n;   active processes:     11\n;   total processes:      15\n;   max active processes: 12\n;   max children reached: 0\n;\n; By default the status page output is formatted as text/plain. Passing either\n; 'html', 'xml' or 'json' in the query string will return the corresponding\n; output syntax. Example:\n;   http://www.foo.bar/status\n;   http://www.foo.bar/status?json\n;   http://www.foo.bar/status?html\n;   http://www.foo.bar/status?xml\n;\n; By default the status page only outputs short status. Passing 'full' in the\n; query string will also return status for each pool process.\n; Example:\n;   http://www.foo.bar/status?full\n;   http://www.foo.bar/status?json&full\n;   http://www.foo.bar/status?html&full\n;   http://www.foo.bar/status?xml&full\n; The Full status returns for each process:\n; The Full status returns for each process:\n;   pid                  - the PID of the process;\n;   state                - the state of the process (Idle, Running, ...);\n;   start time           - the date and time the process has started;\n;   start since          - the number of seconds since the process has started;\n;   requests             - the number of requests the process has served;\n;   request duration     - the duration in µs of the requests;\n;   request method       - the request method (GET, POST, ...);\n;   request URI          - the request URI with the query string;\n;   content length       - the content length of the request (only with POST);\n;   user                 - the user (PHP_AUTH_USER) (or '-' if not set);\n;   script               - the main script called (or '-' if not set);\n;   last request cpu     - the %cpu the last request consumed\n;                          it's always 0 if the process is not in Idle state\n;                          because CPU calculation is done when the request\n;                          processing has terminated;\n;   last request memory  - the max amount of memory the last request consumed\n;                          it's always 0 if the process is not in Idle state\n;                          because memory calculation is done when the request\n;                          processing has terminated;\n; If the process is in Idle state, then informations are related to the\n; last request the process has served. Otherwise informations are related to\n; the current request being served.\n; Example output:\n;   ************************\n;   pid:                  31330\n;   state:                Running\n;   start time:           01/Jul/2011:17:53:49 +0200\n;   start since:          63087\n;   requests:             12808\n;   request duration:     1250261\n;   request method:       GET\n;   request URI:          /test_mem.php?N=10000\n;   content length:       0\n;   user:                 -\n;   script:               /home/fat/web/docs/php/test_mem.php\n;   last request cpu:     0.00\n;   last request memory:  0\n;\n; Note: There is a real-time FPM status monitoring sample web page available\n;       It's available in: /usr/local/php56/share/php/fpm/status.html\n;\n; Note: The value must start with a leading slash (/). The value can be\n;       anything, but it may not be a good idea to use the .php extension or it\n;       may conflict with a real PHP file.\n; Default Value: not set\npm.status_path = /phpfpm_status\n```\n## 重启PHP-FPM\n```\nkill -USR2 `cat /usr/local/php56/var/run/php-fpm.pid`\n```\n\n## 配置nginx代理\n查看nginx配置文件\n```\n/usr/local/nginx/sbin/nginx -t\nnginx: the configuration file /usr/local/nginx/conf/nginx.conf syntax is ok\nnginx: configuration file /usr/local/nginx/conf/nginx.conf test is successful\n```\n\n修改配置\n```\nvi /usr/local/nginx/conf/nginx.conf\n```\n加入：\n```\nlocation /phpfpm_status {\n        fastcgi_pass  127.0.0.1:9000;\n        include fastcgi_params;\n        fastcgi_param SCRIPT_FILENAME $fastcgi_script_name;\n}\n```\n\n重启nginx\n```\n/usr/local/nginx/sbin/nginx -s reload\n```\n\n## 测试\n浏览器或者通过curl访问\n\n[http://you-server-ip/phpfpm_status](http://127.0.0.1/phpfpm_status)\n\n```\n[root@iZwz9g8nzni5lj69dhlesoZ ~]# curl 127.0.0.1/phpfpm_status\npool:                 www\nprocess manager:      dynamic\nstart time:           27/Sep/2016:15:08:57 +0800\nstart since:          385\naccepted conn:        3\nlisten queue:         0\nmax listen queue:     0\nlisten queue len:     128\nidle processes:       1\nactive processes:     1\ntotal processes:      2\nmax active processes: 1\nmax children reached: 0\nslow requests:        0\n```\n\n- 参数说明：\n\n参数| 说明\n----|-----\npool | fpm池子名称，大多数为www\nprocess manager | 进程管理方式,值：static, dynamic or ondemand. dynamic\nstart time | 启动日期,如果reload了php-fpm，时间会更新\nstart since | 运行时长\naccepted conn | 当前池子接受的请求数\nlisten queue | 请求等待队列，如果这个值不为0，那么要增加FPM的进程数量\nmax listen queue | 请求等待队列最高的数量\nlisten queue len | socket等待队列长度\nidle processes | 空闲进程数量\nactive processes | 活跃进程数量\ntotal processes | 总进程数量\nmax active processes | 最大的活跃进程数量（FPM启动开始算）\nmax children reached | 大道进程最大数量限制的次数，如果这个数量不为0，那说明你的最大进程数量太小了，请改大一点。\nslow requests | 启用了php-fpm slow-log，缓慢请求的数量\n\n- php-fpm还提供不同格式的输入，方便我们查看和与其他监控系统对接。\n\n```\nhttp://www.foo.bar/status       #默认纯文本\nhttp://www.foo.bar/status?json  #json格式\nhttp://www.foo.bar/status?html  #html\nhttp://www.foo.bar/status?xml   #xml\n```\n\n- 通过增加full参数，php-fpm还提供查看所有进程的运行状况\n\n```\nhttp://www.foo.bar/status?full        #默认纯文本\nhttp://www.foo.bar/status?json&full   #json格式\nhttp://www.foo.bar/status?html&full   #html\nhttp://www.foo.bar/status?xml&full    #xml\n```\n\n示例：\n```\ncurl 'http://127.0.0.1/phpfpm_status?full'\npool:                 www\nprocess manager:      dynamic\nstart time:           27/Sep/2016:15:08:57 +0800\nstart since:          1546\naccepted conn:        14\nlisten queue:         0\nmax listen queue:     0\nlisten queue len:     128\nidle processes:       1\nactive processes:     1\ntotal processes:      2\nmax active processes: 1\nmax children reached: 0\nslow requests:        0\n************************\npid:                  12132\nstate:                Running\nstart time:           27/Sep/2016:15:08:57 +0800\nstart since:          1546\nrequests:             7\nrequest duration:     117\nrequest method:       GET\nrequest URI:          /phpfpm_status?full\ncontent length:       0\nuser:                 -\nscript:               /phpfpm_status\nlast request cpu:     0.00\nlast request memory:  0\n************************\npid:                  12133\nstate:                Idle\nstart time:           27/Sep/2016:15:08:57 +0800\nstart since:          1546\nrequests:             7\nrequest duration:     132\nrequest method:       GET\nrequest URI:          /phpfpm_status?html&full\ncontent length:       0\nuser:                 -\nscript:               /phpfpm_status\nlast request cpu:     0.00\nlast request memory:  262144\n```\n\n具体进程参数说明\n\n参数 | 说明\n----|-----\npid | 进程号\nstate | 状态（Idle - 闲置， Running - 运行， ...）\nstart time | 进程开始运行时间\nstart since | 进程开始持续时间（单位：秒）\nrequests | 进程已经处理的请求数\nrequest duration | µs的请求数量\nrequest method | 请求方式（GET, POST, ...）\nrequest URI | 请求URI\ncontent length | 请求内容长度（仅限POST请求）\nuser | PHP_AUTH_USER （'-'， 表示没有限制）\nscript | 请求文件\nlast request cpu | 最后一次请求占用CPU百分比（如果进程不是处于 `Idle - 闲置` 状态，该值总是0，因为当请求处理终止时，CPU计算已经完成）\nlast request memory | 最后一次请求占用内存（如果进程不是处于 `Idle - 闲置` 状态，该值总是0，因为当请求处理终止时，memory计算已经完成）\n\n**Tips:**\n如果进程处于 idle 状态，所显示的信息就是基于最后一次请求给出的状态，否则就是基于本次请求的状态。\n","slug":"PHP-FPM运行状态监控","published":1,"updated":"2016-09-27T09:29:18.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"city8vno3001qg29famitzuye","content":"<p>PHP-FPM内置了一个运行状态页，开启后便可查看PHP-FPM的详细运行状态，可以给我们在优化PHP-FPM时带来帮助。</p>\n<a id=\"more\"></a>\n<h2 id=\"php-fpm配置\"><a href=\"#php-fpm配置\" class=\"headerlink\" title=\"php-fpm配置\"></a>php-fpm配置</h2><p>查看php-fpm配置文件<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ /usr/local/php56/sbin/php-fpm -t</div><div class=\"line\">[27-Sep-2016 14:59:06] NOTICE: configuration file /usr/local/php56/etc/php-fpm.conf test is successful</div></pre></td></tr></table></figure></p>\n<p>开启php-fpm的status配置<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">vi /usr/local/php56/etc/php-fpm.conf</div></pre></td></tr></table></figure></p>\n<p>修改加入：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">pm.status_path = /phpfpm_status</div></pre></td></tr></table></figure></p>\n<p>配置文件中相关的说明<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div></pre></td><td class=\"code\"><pre><div class=\"line\">; The URI to view the FPM status page. If this value is not set, no URI will be</div><div class=\"line\">; recognized as a status page. It shows the following informations:</div><div class=\"line\">;   pool                 - the name of the pool;</div><div class=\"line\">;   process manager      - static, dynamic or ondemand;</div><div class=\"line\">;   start time           - the date and time FPM has started;</div><div class=\"line\">;   start since          - number of seconds since FPM has started;</div><div class=\"line\">;   accepted conn        - the number of request accepted by the pool;</div><div class=\"line\">;   listen queue         - the number of request in the queue of pending</div><div class=\"line\">;                          connections (see backlog in listen(2));</div><div class=\"line\">;   max listen queue     - the maximum number of requests in the queue</div><div class=\"line\">;                          of pending connections since FPM has started;</div><div class=\"line\">;   listen queue len     - the size of the socket queue of pending connections;</div><div class=\"line\">;   idle processes       - the number of idle processes;</div><div class=\"line\">;   active processes     - the number of active processes;</div><div class=\"line\">;   total processes      - the number of idle + active processes;</div><div class=\"line\">;   max active processes - the maximum number of active processes since FPM</div><div class=\"line\">;                          has started;</div><div class=\"line\">;   max children reached - number of times, the process limit has been reached,</div><div class=\"line\">;                          when pm tries to start more children (works only for</div><div class=\"line\">;                          pm &apos;dynamic&apos; and &apos;ondemand&apos;);</div><div class=\"line\">; Value are updated in real time.</div><div class=\"line\">; Value are updated in real time.</div><div class=\"line\">; Example output:</div><div class=\"line\">;   pool:                 www</div><div class=\"line\">;   process manager:      static</div><div class=\"line\">;   start time:           01/Jul/2011:17:53:49 +0200</div><div class=\"line\">;   start since:          62636</div><div class=\"line\">;   accepted conn:        190460</div><div class=\"line\">;   listen queue:         0</div><div class=\"line\">;   max listen queue:     1</div><div class=\"line\">;   listen queue len:     42</div><div class=\"line\">;   idle processes:       4</div><div class=\"line\">;   active processes:     11</div><div class=\"line\">;   total processes:      15</div><div class=\"line\">;   max active processes: 12</div><div class=\"line\">;   max children reached: 0</div><div class=\"line\">;</div><div class=\"line\">; By default the status page output is formatted as text/plain. Passing either</div><div class=\"line\">; &apos;html&apos;, &apos;xml&apos; or &apos;json&apos; in the query string will return the corresponding</div><div class=\"line\">; output syntax. Example:</div><div class=\"line\">;   http://www.foo.bar/status</div><div class=\"line\">;   http://www.foo.bar/status?json</div><div class=\"line\">;   http://www.foo.bar/status?html</div><div class=\"line\">;   http://www.foo.bar/status?xml</div><div class=\"line\">;</div><div class=\"line\">; By default the status page only outputs short status. Passing &apos;full&apos; in the</div><div class=\"line\">; query string will also return status for each pool process.</div><div class=\"line\">; Example:</div><div class=\"line\">;   http://www.foo.bar/status?full</div><div class=\"line\">;   http://www.foo.bar/status?json&amp;full</div><div class=\"line\">;   http://www.foo.bar/status?html&amp;full</div><div class=\"line\">;   http://www.foo.bar/status?xml&amp;full</div><div class=\"line\">; The Full status returns for each process:</div><div class=\"line\">; The Full status returns for each process:</div><div class=\"line\">;   pid                  - the PID of the process;</div><div class=\"line\">;   state                - the state of the process (Idle, Running, ...);</div><div class=\"line\">;   start time           - the date and time the process has started;</div><div class=\"line\">;   start since          - the number of seconds since the process has started;</div><div class=\"line\">;   requests             - the number of requests the process has served;</div><div class=\"line\">;   request duration     - the duration in µs of the requests;</div><div class=\"line\">;   request method       - the request method (GET, POST, ...);</div><div class=\"line\">;   request URI          - the request URI with the query string;</div><div class=\"line\">;   content length       - the content length of the request (only with POST);</div><div class=\"line\">;   user                 - the user (PHP_AUTH_USER) (or &apos;-&apos; if not set);</div><div class=\"line\">;   script               - the main script called (or &apos;-&apos; if not set);</div><div class=\"line\">;   last request cpu     - the %cpu the last request consumed</div><div class=\"line\">;                          it&apos;s always 0 if the process is not in Idle state</div><div class=\"line\">;                          because CPU calculation is done when the request</div><div class=\"line\">;                          processing has terminated;</div><div class=\"line\">;   last request memory  - the max amount of memory the last request consumed</div><div class=\"line\">;                          it&apos;s always 0 if the process is not in Idle state</div><div class=\"line\">;                          because memory calculation is done when the request</div><div class=\"line\">;                          processing has terminated;</div><div class=\"line\">; If the process is in Idle state, then informations are related to the</div><div class=\"line\">; last request the process has served. Otherwise informations are related to</div><div class=\"line\">; the current request being served.</div><div class=\"line\">; Example output:</div><div class=\"line\">;   ************************</div><div class=\"line\">;   pid:                  31330</div><div class=\"line\">;   state:                Running</div><div class=\"line\">;   start time:           01/Jul/2011:17:53:49 +0200</div><div class=\"line\">;   start since:          63087</div><div class=\"line\">;   requests:             12808</div><div class=\"line\">;   request duration:     1250261</div><div class=\"line\">;   request method:       GET</div><div class=\"line\">;   request URI:          /test_mem.php?N=10000</div><div class=\"line\">;   content length:       0</div><div class=\"line\">;   user:                 -</div><div class=\"line\">;   script:               /home/fat/web/docs/php/test_mem.php</div><div class=\"line\">;   last request cpu:     0.00</div><div class=\"line\">;   last request memory:  0</div><div class=\"line\">;</div><div class=\"line\">; Note: There is a real-time FPM status monitoring sample web page available</div><div class=\"line\">;       It&apos;s available in: /usr/local/php56/share/php/fpm/status.html</div><div class=\"line\">;</div><div class=\"line\">; Note: The value must start with a leading slash (/). The value can be</div><div class=\"line\">;       anything, but it may not be a good idea to use the .php extension or it</div><div class=\"line\">;       may conflict with a real PHP file.</div><div class=\"line\">; Default Value: not set</div><div class=\"line\">pm.status_path = /phpfpm_status</div></pre></td></tr></table></figure></p>\n<h2 id=\"重启PHP-FPM\"><a href=\"#重启PHP-FPM\" class=\"headerlink\" title=\"重启PHP-FPM\"></a>重启PHP-FPM</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">kill -USR2 `cat /usr/local/php56/var/run/php-fpm.pid`</div></pre></td></tr></table></figure>\n<h2 id=\"配置nginx代理\"><a href=\"#配置nginx代理\" class=\"headerlink\" title=\"配置nginx代理\"></a>配置nginx代理</h2><p>查看nginx配置文件<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">/usr/local/nginx/sbin/nginx -t</div><div class=\"line\">nginx: the configuration file /usr/local/nginx/conf/nginx.conf syntax is ok</div><div class=\"line\">nginx: configuration file /usr/local/nginx/conf/nginx.conf test is successful</div></pre></td></tr></table></figure></p>\n<p>修改配置<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">vi /usr/local/nginx/conf/nginx.conf</div></pre></td></tr></table></figure></p>\n<p>加入：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">location /phpfpm_status &#123;</div><div class=\"line\">        fastcgi_pass  127.0.0.1:9000;</div><div class=\"line\">        include fastcgi_params;</div><div class=\"line\">        fastcgi_param SCRIPT_FILENAME $fastcgi_script_name;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>重启nginx<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">/usr/local/nginx/sbin/nginx -s reload</div></pre></td></tr></table></figure></p>\n<h2 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h2><p>浏览器或者通过curl访问</p>\n<p><a href=\"http://127.0.0.1/phpfpm_status\" target=\"_blank\" rel=\"external\">http://you-server-ip/phpfpm_status</a></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">[root@iZwz9g8nzni5lj69dhlesoZ ~]# curl 127.0.0.1/phpfpm_status</div><div class=\"line\">pool:                 www</div><div class=\"line\">process manager:      dynamic</div><div class=\"line\">start time:           27/Sep/2016:15:08:57 +0800</div><div class=\"line\">start since:          385</div><div class=\"line\">accepted conn:        3</div><div class=\"line\">listen queue:         0</div><div class=\"line\">max listen queue:     0</div><div class=\"line\">listen queue len:     128</div><div class=\"line\">idle processes:       1</div><div class=\"line\">active processes:     1</div><div class=\"line\">total processes:      2</div><div class=\"line\">max active processes: 1</div><div class=\"line\">max children reached: 0</div><div class=\"line\">slow requests:        0</div></pre></td></tr></table></figure>\n<ul>\n<li>参数说明：</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>pool</td>\n<td>fpm池子名称，大多数为www</td>\n</tr>\n<tr>\n<td>process manager</td>\n<td>进程管理方式,值：static, dynamic or ondemand. dynamic</td>\n</tr>\n<tr>\n<td>start time</td>\n<td>启动日期,如果reload了php-fpm，时间会更新</td>\n</tr>\n<tr>\n<td>start since</td>\n<td>运行时长</td>\n</tr>\n<tr>\n<td>accepted conn</td>\n<td>当前池子接受的请求数</td>\n</tr>\n<tr>\n<td>listen queue</td>\n<td>请求等待队列，如果这个值不为0，那么要增加FPM的进程数量</td>\n</tr>\n<tr>\n<td>max listen queue</td>\n<td>请求等待队列最高的数量</td>\n</tr>\n<tr>\n<td>listen queue len</td>\n<td>socket等待队列长度</td>\n</tr>\n<tr>\n<td>idle processes</td>\n<td>空闲进程数量</td>\n</tr>\n<tr>\n<td>active processes</td>\n<td>活跃进程数量</td>\n</tr>\n<tr>\n<td>total processes</td>\n<td>总进程数量</td>\n</tr>\n<tr>\n<td>max active processes</td>\n<td>最大的活跃进程数量（FPM启动开始算）</td>\n</tr>\n<tr>\n<td>max children reached</td>\n<td>大道进程最大数量限制的次数，如果这个数量不为0，那说明你的最大进程数量太小了，请改大一点。</td>\n</tr>\n<tr>\n<td>slow requests</td>\n<td>启用了php-fpm slow-log，缓慢请求的数量</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li>php-fpm还提供不同格式的输入，方便我们查看和与其他监控系统对接。</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">http://www.foo.bar/status       #默认纯文本</div><div class=\"line\">http://www.foo.bar/status?json  #json格式</div><div class=\"line\">http://www.foo.bar/status?html  #html</div><div class=\"line\">http://www.foo.bar/status?xml   #xml</div></pre></td></tr></table></figure>\n<ul>\n<li>通过增加full参数，php-fpm还提供查看所有进程的运行状况</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">http://www.foo.bar/status?full        #默认纯文本</div><div class=\"line\">http://www.foo.bar/status?json&amp;full   #json格式</div><div class=\"line\">http://www.foo.bar/status?html&amp;full   #html</div><div class=\"line\">http://www.foo.bar/status?xml&amp;full    #xml</div></pre></td></tr></table></figure>\n<p>示例：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div></pre></td><td class=\"code\"><pre><div class=\"line\">curl &apos;http://127.0.0.1/phpfpm_status?full&apos;</div><div class=\"line\">pool:                 www</div><div class=\"line\">process manager:      dynamic</div><div class=\"line\">start time:           27/Sep/2016:15:08:57 +0800</div><div class=\"line\">start since:          1546</div><div class=\"line\">accepted conn:        14</div><div class=\"line\">listen queue:         0</div><div class=\"line\">max listen queue:     0</div><div class=\"line\">listen queue len:     128</div><div class=\"line\">idle processes:       1</div><div class=\"line\">active processes:     1</div><div class=\"line\">total processes:      2</div><div class=\"line\">max active processes: 1</div><div class=\"line\">max children reached: 0</div><div class=\"line\">slow requests:        0</div><div class=\"line\">************************</div><div class=\"line\">pid:                  12132</div><div class=\"line\">state:                Running</div><div class=\"line\">start time:           27/Sep/2016:15:08:57 +0800</div><div class=\"line\">start since:          1546</div><div class=\"line\">requests:             7</div><div class=\"line\">request duration:     117</div><div class=\"line\">request method:       GET</div><div class=\"line\">request URI:          /phpfpm_status?full</div><div class=\"line\">content length:       0</div><div class=\"line\">user:                 -</div><div class=\"line\">script:               /phpfpm_status</div><div class=\"line\">last request cpu:     0.00</div><div class=\"line\">last request memory:  0</div><div class=\"line\">************************</div><div class=\"line\">pid:                  12133</div><div class=\"line\">state:                Idle</div><div class=\"line\">start time:           27/Sep/2016:15:08:57 +0800</div><div class=\"line\">start since:          1546</div><div class=\"line\">requests:             7</div><div class=\"line\">request duration:     132</div><div class=\"line\">request method:       GET</div><div class=\"line\">request URI:          /phpfpm_status?html&amp;full</div><div class=\"line\">content length:       0</div><div class=\"line\">user:                 -</div><div class=\"line\">script:               /phpfpm_status</div><div class=\"line\">last request cpu:     0.00</div><div class=\"line\">last request memory:  262144</div></pre></td></tr></table></figure></p>\n<p>具体进程参数说明</p>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>pid</td>\n<td>进程号</td>\n</tr>\n<tr>\n<td>state</td>\n<td>状态（Idle - 闲置， Running - 运行， …）</td>\n</tr>\n<tr>\n<td>start time</td>\n<td>进程开始运行时间</td>\n</tr>\n<tr>\n<td>start since</td>\n<td>进程开始持续时间（单位：秒）</td>\n</tr>\n<tr>\n<td>requests</td>\n<td>进程已经处理的请求数</td>\n</tr>\n<tr>\n<td>request duration</td>\n<td>µs的请求数量</td>\n</tr>\n<tr>\n<td>request method</td>\n<td>请求方式（GET, POST, …）</td>\n</tr>\n<tr>\n<td>request URI</td>\n<td>请求URI</td>\n</tr>\n<tr>\n<td>content length</td>\n<td>请求内容长度（仅限POST请求）</td>\n</tr>\n<tr>\n<td>user</td>\n<td>PHP_AUTH_USER （’-‘， 表示没有限制）</td>\n</tr>\n<tr>\n<td>script</td>\n<td>请求文件</td>\n</tr>\n<tr>\n<td>last request cpu</td>\n<td>最后一次请求占用CPU百分比（如果进程不是处于 <code>Idle - 闲置</code> 状态，该值总是0，因为当请求处理终止时，CPU计算已经完成）</td>\n</tr>\n<tr>\n<td>last request memory</td>\n<td>最后一次请求占用内存（如果进程不是处于 <code>Idle - 闲置</code> 状态，该值总是0，因为当请求处理终止时，memory计算已经完成）</td>\n</tr>\n</tbody>\n</table>\n<p><strong>Tips:</strong><br>如果进程处于 idle 状态，所显示的信息就是基于最后一次请求给出的状态，否则就是基于本次请求的状态。</p>\n","excerpt":"<p>PHP-FPM内置了一个运行状态页，开启后便可查看PHP-FPM的详细运行状态，可以给我们在优化PHP-FPM时带来帮助。</p>","more":"<h2 id=\"php-fpm配置\"><a href=\"#php-fpm配置\" class=\"headerlink\" title=\"php-fpm配置\"></a>php-fpm配置</h2><p>查看php-fpm配置文件<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ /usr/local/php56/sbin/php-fpm -t</div><div class=\"line\">[27-Sep-2016 14:59:06] NOTICE: configuration file /usr/local/php56/etc/php-fpm.conf test is successful</div></pre></td></tr></table></figure></p>\n<p>开启php-fpm的status配置<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">vi /usr/local/php56/etc/php-fpm.conf</div></pre></td></tr></table></figure></p>\n<p>修改加入：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">pm.status_path = /phpfpm_status</div></pre></td></tr></table></figure></p>\n<p>配置文件中相关的说明<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div></pre></td><td class=\"code\"><pre><div class=\"line\">; The URI to view the FPM status page. If this value is not set, no URI will be</div><div class=\"line\">; recognized as a status page. It shows the following informations:</div><div class=\"line\">;   pool                 - the name of the pool;</div><div class=\"line\">;   process manager      - static, dynamic or ondemand;</div><div class=\"line\">;   start time           - the date and time FPM has started;</div><div class=\"line\">;   start since          - number of seconds since FPM has started;</div><div class=\"line\">;   accepted conn        - the number of request accepted by the pool;</div><div class=\"line\">;   listen queue         - the number of request in the queue of pending</div><div class=\"line\">;                          connections (see backlog in listen(2));</div><div class=\"line\">;   max listen queue     - the maximum number of requests in the queue</div><div class=\"line\">;                          of pending connections since FPM has started;</div><div class=\"line\">;   listen queue len     - the size of the socket queue of pending connections;</div><div class=\"line\">;   idle processes       - the number of idle processes;</div><div class=\"line\">;   active processes     - the number of active processes;</div><div class=\"line\">;   total processes      - the number of idle + active processes;</div><div class=\"line\">;   max active processes - the maximum number of active processes since FPM</div><div class=\"line\">;                          has started;</div><div class=\"line\">;   max children reached - number of times, the process limit has been reached,</div><div class=\"line\">;                          when pm tries to start more children (works only for</div><div class=\"line\">;                          pm &apos;dynamic&apos; and &apos;ondemand&apos;);</div><div class=\"line\">; Value are updated in real time.</div><div class=\"line\">; Value are updated in real time.</div><div class=\"line\">; Example output:</div><div class=\"line\">;   pool:                 www</div><div class=\"line\">;   process manager:      static</div><div class=\"line\">;   start time:           01/Jul/2011:17:53:49 +0200</div><div class=\"line\">;   start since:          62636</div><div class=\"line\">;   accepted conn:        190460</div><div class=\"line\">;   listen queue:         0</div><div class=\"line\">;   max listen queue:     1</div><div class=\"line\">;   listen queue len:     42</div><div class=\"line\">;   idle processes:       4</div><div class=\"line\">;   active processes:     11</div><div class=\"line\">;   total processes:      15</div><div class=\"line\">;   max active processes: 12</div><div class=\"line\">;   max children reached: 0</div><div class=\"line\">;</div><div class=\"line\">; By default the status page output is formatted as text/plain. Passing either</div><div class=\"line\">; &apos;html&apos;, &apos;xml&apos; or &apos;json&apos; in the query string will return the corresponding</div><div class=\"line\">; output syntax. Example:</div><div class=\"line\">;   http://www.foo.bar/status</div><div class=\"line\">;   http://www.foo.bar/status?json</div><div class=\"line\">;   http://www.foo.bar/status?html</div><div class=\"line\">;   http://www.foo.bar/status?xml</div><div class=\"line\">;</div><div class=\"line\">; By default the status page only outputs short status. Passing &apos;full&apos; in the</div><div class=\"line\">; query string will also return status for each pool process.</div><div class=\"line\">; Example:</div><div class=\"line\">;   http://www.foo.bar/status?full</div><div class=\"line\">;   http://www.foo.bar/status?json&amp;full</div><div class=\"line\">;   http://www.foo.bar/status?html&amp;full</div><div class=\"line\">;   http://www.foo.bar/status?xml&amp;full</div><div class=\"line\">; The Full status returns for each process:</div><div class=\"line\">; The Full status returns for each process:</div><div class=\"line\">;   pid                  - the PID of the process;</div><div class=\"line\">;   state                - the state of the process (Idle, Running, ...);</div><div class=\"line\">;   start time           - the date and time the process has started;</div><div class=\"line\">;   start since          - the number of seconds since the process has started;</div><div class=\"line\">;   requests             - the number of requests the process has served;</div><div class=\"line\">;   request duration     - the duration in µs of the requests;</div><div class=\"line\">;   request method       - the request method (GET, POST, ...);</div><div class=\"line\">;   request URI          - the request URI with the query string;</div><div class=\"line\">;   content length       - the content length of the request (only with POST);</div><div class=\"line\">;   user                 - the user (PHP_AUTH_USER) (or &apos;-&apos; if not set);</div><div class=\"line\">;   script               - the main script called (or &apos;-&apos; if not set);</div><div class=\"line\">;   last request cpu     - the %cpu the last request consumed</div><div class=\"line\">;                          it&apos;s always 0 if the process is not in Idle state</div><div class=\"line\">;                          because CPU calculation is done when the request</div><div class=\"line\">;                          processing has terminated;</div><div class=\"line\">;   last request memory  - the max amount of memory the last request consumed</div><div class=\"line\">;                          it&apos;s always 0 if the process is not in Idle state</div><div class=\"line\">;                          because memory calculation is done when the request</div><div class=\"line\">;                          processing has terminated;</div><div class=\"line\">; If the process is in Idle state, then informations are related to the</div><div class=\"line\">; last request the process has served. Otherwise informations are related to</div><div class=\"line\">; the current request being served.</div><div class=\"line\">; Example output:</div><div class=\"line\">;   ************************</div><div class=\"line\">;   pid:                  31330</div><div class=\"line\">;   state:                Running</div><div class=\"line\">;   start time:           01/Jul/2011:17:53:49 +0200</div><div class=\"line\">;   start since:          63087</div><div class=\"line\">;   requests:             12808</div><div class=\"line\">;   request duration:     1250261</div><div class=\"line\">;   request method:       GET</div><div class=\"line\">;   request URI:          /test_mem.php?N=10000</div><div class=\"line\">;   content length:       0</div><div class=\"line\">;   user:                 -</div><div class=\"line\">;   script:               /home/fat/web/docs/php/test_mem.php</div><div class=\"line\">;   last request cpu:     0.00</div><div class=\"line\">;   last request memory:  0</div><div class=\"line\">;</div><div class=\"line\">; Note: There is a real-time FPM status monitoring sample web page available</div><div class=\"line\">;       It&apos;s available in: /usr/local/php56/share/php/fpm/status.html</div><div class=\"line\">;</div><div class=\"line\">; Note: The value must start with a leading slash (/). The value can be</div><div class=\"line\">;       anything, but it may not be a good idea to use the .php extension or it</div><div class=\"line\">;       may conflict with a real PHP file.</div><div class=\"line\">; Default Value: not set</div><div class=\"line\">pm.status_path = /phpfpm_status</div></pre></td></tr></table></figure></p>\n<h2 id=\"重启PHP-FPM\"><a href=\"#重启PHP-FPM\" class=\"headerlink\" title=\"重启PHP-FPM\"></a>重启PHP-FPM</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">kill -USR2 `cat /usr/local/php56/var/run/php-fpm.pid`</div></pre></td></tr></table></figure>\n<h2 id=\"配置nginx代理\"><a href=\"#配置nginx代理\" class=\"headerlink\" title=\"配置nginx代理\"></a>配置nginx代理</h2><p>查看nginx配置文件<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">/usr/local/nginx/sbin/nginx -t</div><div class=\"line\">nginx: the configuration file /usr/local/nginx/conf/nginx.conf syntax is ok</div><div class=\"line\">nginx: configuration file /usr/local/nginx/conf/nginx.conf test is successful</div></pre></td></tr></table></figure></p>\n<p>修改配置<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">vi /usr/local/nginx/conf/nginx.conf</div></pre></td></tr></table></figure></p>\n<p>加入：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">location /phpfpm_status &#123;</div><div class=\"line\">        fastcgi_pass  127.0.0.1:9000;</div><div class=\"line\">        include fastcgi_params;</div><div class=\"line\">        fastcgi_param SCRIPT_FILENAME $fastcgi_script_name;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>重启nginx<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">/usr/local/nginx/sbin/nginx -s reload</div></pre></td></tr></table></figure></p>\n<h2 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h2><p>浏览器或者通过curl访问</p>\n<p><a href=\"http://127.0.0.1/phpfpm_status\">http://you-server-ip/phpfpm_status</a></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">[root@iZwz9g8nzni5lj69dhlesoZ ~]# curl 127.0.0.1/phpfpm_status</div><div class=\"line\">pool:                 www</div><div class=\"line\">process manager:      dynamic</div><div class=\"line\">start time:           27/Sep/2016:15:08:57 +0800</div><div class=\"line\">start since:          385</div><div class=\"line\">accepted conn:        3</div><div class=\"line\">listen queue:         0</div><div class=\"line\">max listen queue:     0</div><div class=\"line\">listen queue len:     128</div><div class=\"line\">idle processes:       1</div><div class=\"line\">active processes:     1</div><div class=\"line\">total processes:      2</div><div class=\"line\">max active processes: 1</div><div class=\"line\">max children reached: 0</div><div class=\"line\">slow requests:        0</div></pre></td></tr></table></figure>\n<ul>\n<li>参数说明：</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>pool</td>\n<td>fpm池子名称，大多数为www</td>\n</tr>\n<tr>\n<td>process manager</td>\n<td>进程管理方式,值：static, dynamic or ondemand. dynamic</td>\n</tr>\n<tr>\n<td>start time</td>\n<td>启动日期,如果reload了php-fpm，时间会更新</td>\n</tr>\n<tr>\n<td>start since</td>\n<td>运行时长</td>\n</tr>\n<tr>\n<td>accepted conn</td>\n<td>当前池子接受的请求数</td>\n</tr>\n<tr>\n<td>listen queue</td>\n<td>请求等待队列，如果这个值不为0，那么要增加FPM的进程数量</td>\n</tr>\n<tr>\n<td>max listen queue</td>\n<td>请求等待队列最高的数量</td>\n</tr>\n<tr>\n<td>listen queue len</td>\n<td>socket等待队列长度</td>\n</tr>\n<tr>\n<td>idle processes</td>\n<td>空闲进程数量</td>\n</tr>\n<tr>\n<td>active processes</td>\n<td>活跃进程数量</td>\n</tr>\n<tr>\n<td>total processes</td>\n<td>总进程数量</td>\n</tr>\n<tr>\n<td>max active processes</td>\n<td>最大的活跃进程数量（FPM启动开始算）</td>\n</tr>\n<tr>\n<td>max children reached</td>\n<td>大道进程最大数量限制的次数，如果这个数量不为0，那说明你的最大进程数量太小了，请改大一点。</td>\n</tr>\n<tr>\n<td>slow requests</td>\n<td>启用了php-fpm slow-log，缓慢请求的数量</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li>php-fpm还提供不同格式的输入，方便我们查看和与其他监控系统对接。</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">http://www.foo.bar/status       #默认纯文本</div><div class=\"line\">http://www.foo.bar/status?json  #json格式</div><div class=\"line\">http://www.foo.bar/status?html  #html</div><div class=\"line\">http://www.foo.bar/status?xml   #xml</div></pre></td></tr></table></figure>\n<ul>\n<li>通过增加full参数，php-fpm还提供查看所有进程的运行状况</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">http://www.foo.bar/status?full        #默认纯文本</div><div class=\"line\">http://www.foo.bar/status?json&amp;full   #json格式</div><div class=\"line\">http://www.foo.bar/status?html&amp;full   #html</div><div class=\"line\">http://www.foo.bar/status?xml&amp;full    #xml</div></pre></td></tr></table></figure>\n<p>示例：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div></pre></td><td class=\"code\"><pre><div class=\"line\">curl &apos;http://127.0.0.1/phpfpm_status?full&apos;</div><div class=\"line\">pool:                 www</div><div class=\"line\">process manager:      dynamic</div><div class=\"line\">start time:           27/Sep/2016:15:08:57 +0800</div><div class=\"line\">start since:          1546</div><div class=\"line\">accepted conn:        14</div><div class=\"line\">listen queue:         0</div><div class=\"line\">max listen queue:     0</div><div class=\"line\">listen queue len:     128</div><div class=\"line\">idle processes:       1</div><div class=\"line\">active processes:     1</div><div class=\"line\">total processes:      2</div><div class=\"line\">max active processes: 1</div><div class=\"line\">max children reached: 0</div><div class=\"line\">slow requests:        0</div><div class=\"line\">************************</div><div class=\"line\">pid:                  12132</div><div class=\"line\">state:                Running</div><div class=\"line\">start time:           27/Sep/2016:15:08:57 +0800</div><div class=\"line\">start since:          1546</div><div class=\"line\">requests:             7</div><div class=\"line\">request duration:     117</div><div class=\"line\">request method:       GET</div><div class=\"line\">request URI:          /phpfpm_status?full</div><div class=\"line\">content length:       0</div><div class=\"line\">user:                 -</div><div class=\"line\">script:               /phpfpm_status</div><div class=\"line\">last request cpu:     0.00</div><div class=\"line\">last request memory:  0</div><div class=\"line\">************************</div><div class=\"line\">pid:                  12133</div><div class=\"line\">state:                Idle</div><div class=\"line\">start time:           27/Sep/2016:15:08:57 +0800</div><div class=\"line\">start since:          1546</div><div class=\"line\">requests:             7</div><div class=\"line\">request duration:     132</div><div class=\"line\">request method:       GET</div><div class=\"line\">request URI:          /phpfpm_status?html&amp;full</div><div class=\"line\">content length:       0</div><div class=\"line\">user:                 -</div><div class=\"line\">script:               /phpfpm_status</div><div class=\"line\">last request cpu:     0.00</div><div class=\"line\">last request memory:  262144</div></pre></td></tr></table></figure></p>\n<p>具体进程参数说明</p>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>pid</td>\n<td>进程号</td>\n</tr>\n<tr>\n<td>state</td>\n<td>状态（Idle - 闲置， Running - 运行， …）</td>\n</tr>\n<tr>\n<td>start time</td>\n<td>进程开始运行时间</td>\n</tr>\n<tr>\n<td>start since</td>\n<td>进程开始持续时间（单位：秒）</td>\n</tr>\n<tr>\n<td>requests</td>\n<td>进程已经处理的请求数</td>\n</tr>\n<tr>\n<td>request duration</td>\n<td>µs的请求数量</td>\n</tr>\n<tr>\n<td>request method</td>\n<td>请求方式（GET, POST, …）</td>\n</tr>\n<tr>\n<td>request URI</td>\n<td>请求URI</td>\n</tr>\n<tr>\n<td>content length</td>\n<td>请求内容长度（仅限POST请求）</td>\n</tr>\n<tr>\n<td>user</td>\n<td>PHP_AUTH_USER （’-‘， 表示没有限制）</td>\n</tr>\n<tr>\n<td>script</td>\n<td>请求文件</td>\n</tr>\n<tr>\n<td>last request cpu</td>\n<td>最后一次请求占用CPU百分比（如果进程不是处于 <code>Idle - 闲置</code> 状态，该值总是0，因为当请求处理终止时，CPU计算已经完成）</td>\n</tr>\n<tr>\n<td>last request memory</td>\n<td>最后一次请求占用内存（如果进程不是处于 <code>Idle - 闲置</code> 状态，该值总是0，因为当请求处理终止时，memory计算已经完成）</td>\n</tr>\n</tbody>\n</table>\n<p><strong>Tips:</strong><br>如果进程处于 idle 状态，所显示的信息就是基于最后一次请求给出的状态，否则就是基于本次请求的状态。</p>"},{"title":"PHP安装","date":"2016-09-25T14:30:00.000Z","ctime":"2016-09-25T14:30:00.000Z","utime":"2016-09-25T14:30:00.000Z","modif_times":0,"_content":"\n![php](http://n.sinaimg.cn/games/3ece443e/20160925/php_log.png)\n\n<!-- more -->\n\n## 环境\n\nOS：CentOS 7.2 64\n\nPHP：[php-5.6.25](http://n.sinaimg.cn/games/3ece443e/20160925/php-5.6.25.tar.gz)\n\n\n## 编译前准备\n```\nyum -y install libxml2 libxml2-devel\n```\nlibxml2,是个C语言的XML程式库，能简单方便的提供对XML文件的各种操作，并且支持XPATH查询，及部分的支持XSLT转换等功能。\n\n## 编译安装\n解压源码包\n```\ntar zxvf php-5.6.25.tar.gz\n```\n进入源码包目录\n```\ncd php-5.6.25\n```\n编译、安装\n```\n./configure --prefix=/usr/local/php56 --enable-fpm --with-mysql\nmake && make install\nInstalling shared extensions:     /usr/local/php56/lib/php/extensions/no-debug-non-zts-20131226/\nInstalling PHP CLI binary:        /usr/local/php56/bin/\nInstalling PHP CLI man page:      /usr/local/php56/php/man/man1/\nInstalling PHP FPM binary:        /usr/local/php56/sbin/\nInstalling PHP FPM config:        /usr/local/php56/etc/\nInstalling PHP FPM man page:      /usr/local/php56/php/man/man8/\nInstalling PHP FPM status page:   /usr/local/php56/php/php/fpm/\nInstalling PHP CGI binary:        /usr/local/php56/bin/\nInstalling PHP CGI man page:      /usr/local/php56/php/man/man1/\nInstalling build environment:     /usr/local/php56/lib/php/build/\nInstalling header files:           /usr/local/php56/include/php/\nInstalling helper programs:       /usr/local/php56/bin/\n  program: phpize\n  program: php-config\nInstalling man pages:             /usr/local/php56/php/man/man1/\n  page: phpize.1\n  page: php-config.1\nInstalling PEAR environment:      /usr/local/php56/lib/php/\n[PEAR] Archive_Tar    - installed: 1.4.0\n[PEAR] Console_Getopt - installed: 1.4.1\n[PEAR] Structures_Graph- installed: 1.1.1\n[PEAR] XML_Util       - installed: 1.3.0\n[PEAR] PEAR           - installed: 1.10.1\nWrote PEAR system config file at: /usr/local/php56/etc/pear.conf\nYou may want to add: /usr/local/php56/lib/php to your php.ini include_path\n/root/php-5.6.25/build/shtool install -c ext/phar/phar.phar /usr/local/php56/bin\nln -s -f phar.phar /usr/local/php56/bin/phar\nInstalling PDO headers:           /usr/local/php56/include/php/ext/pdo/\n```\n生成配置文件\n```\ncp php.ini-development /usr/local/php56/lib/php.ini\ncp /usr/local/php56/etc/php-fpm.conf.default /usr/local/php56/etc/php-fpm.conf\n```\n\n查看配置文件是否已生效。\n```\n$ /usr/local/php56/bin/php -r \"phpinfo();\"\n如果看到以下输出，则表示配置文件加载成功。\nConfiguration File (php.ini) Path => /usr/local/php56/lib\nLoaded Configuration File => /usr/local/php56/lib/php.ini\n```\n\n将php加入到PATH中\n```\nvi ~/.bash_profile\n#在export PATH前一行插入\nPATH=$PATH:/usr/local/php56/bin:/usr/local/php56/lib\n```\n重新加载环境变量\n```\nsource /root/.bash_profile\n```\n\n## 测试\n```\n[root@iZwz97v8o84q253plfkxvfZ php56]# php -version\nPHP 5.6.25 (cli) (built: Sep 24 2016 23:30:43)\nCopyright (c) 1997-2016 The PHP Group\nZend Engine v2.6.0, Copyright (c) 1998-2016 Zend Technologies\n```\n\n**Tips:**\n如何确定PHP当前使用的配置文件的位置？\n\nphp：\n```\n$ /usr/local/php56/bin/php -r \"phpinfo();\"\n如果看到以下输出，则表示配置文件加载成功。\nConfiguration File (php.ini) Path => /usr/local/php56/lib\nLoaded Configuration File => /usr/local/php56/lib/php.ini\n```\nphp-fpm:\n```\n/usr/local/php56/sbin/php-fpm -t\n[25-Sep-2016 18:01:40] NOTICE: configuration file /usr/local/php56/etc/php-fpm.conf test is successful\n```\nover~\n","source":"_posts/PHP安装.md","raw":"---\ntitle: PHP安装\ndate: 2016-09-25 22:30:00\nctime: 2016-09-25 22:30:00\nutime: 2016-09-25 22:30:00\nmodif_times: 0\ntags:\n- PHP-FPM\ncategories:\n- PHP\n---\n\n![php](http://n.sinaimg.cn/games/3ece443e/20160925/php_log.png)\n\n<!-- more -->\n\n## 环境\n\nOS：CentOS 7.2 64\n\nPHP：[php-5.6.25](http://n.sinaimg.cn/games/3ece443e/20160925/php-5.6.25.tar.gz)\n\n\n## 编译前准备\n```\nyum -y install libxml2 libxml2-devel\n```\nlibxml2,是个C语言的XML程式库，能简单方便的提供对XML文件的各种操作，并且支持XPATH查询，及部分的支持XSLT转换等功能。\n\n## 编译安装\n解压源码包\n```\ntar zxvf php-5.6.25.tar.gz\n```\n进入源码包目录\n```\ncd php-5.6.25\n```\n编译、安装\n```\n./configure --prefix=/usr/local/php56 --enable-fpm --with-mysql\nmake && make install\nInstalling shared extensions:     /usr/local/php56/lib/php/extensions/no-debug-non-zts-20131226/\nInstalling PHP CLI binary:        /usr/local/php56/bin/\nInstalling PHP CLI man page:      /usr/local/php56/php/man/man1/\nInstalling PHP FPM binary:        /usr/local/php56/sbin/\nInstalling PHP FPM config:        /usr/local/php56/etc/\nInstalling PHP FPM man page:      /usr/local/php56/php/man/man8/\nInstalling PHP FPM status page:   /usr/local/php56/php/php/fpm/\nInstalling PHP CGI binary:        /usr/local/php56/bin/\nInstalling PHP CGI man page:      /usr/local/php56/php/man/man1/\nInstalling build environment:     /usr/local/php56/lib/php/build/\nInstalling header files:           /usr/local/php56/include/php/\nInstalling helper programs:       /usr/local/php56/bin/\n  program: phpize\n  program: php-config\nInstalling man pages:             /usr/local/php56/php/man/man1/\n  page: phpize.1\n  page: php-config.1\nInstalling PEAR environment:      /usr/local/php56/lib/php/\n[PEAR] Archive_Tar    - installed: 1.4.0\n[PEAR] Console_Getopt - installed: 1.4.1\n[PEAR] Structures_Graph- installed: 1.1.1\n[PEAR] XML_Util       - installed: 1.3.0\n[PEAR] PEAR           - installed: 1.10.1\nWrote PEAR system config file at: /usr/local/php56/etc/pear.conf\nYou may want to add: /usr/local/php56/lib/php to your php.ini include_path\n/root/php-5.6.25/build/shtool install -c ext/phar/phar.phar /usr/local/php56/bin\nln -s -f phar.phar /usr/local/php56/bin/phar\nInstalling PDO headers:           /usr/local/php56/include/php/ext/pdo/\n```\n生成配置文件\n```\ncp php.ini-development /usr/local/php56/lib/php.ini\ncp /usr/local/php56/etc/php-fpm.conf.default /usr/local/php56/etc/php-fpm.conf\n```\n\n查看配置文件是否已生效。\n```\n$ /usr/local/php56/bin/php -r \"phpinfo();\"\n如果看到以下输出，则表示配置文件加载成功。\nConfiguration File (php.ini) Path => /usr/local/php56/lib\nLoaded Configuration File => /usr/local/php56/lib/php.ini\n```\n\n将php加入到PATH中\n```\nvi ~/.bash_profile\n#在export PATH前一行插入\nPATH=$PATH:/usr/local/php56/bin:/usr/local/php56/lib\n```\n重新加载环境变量\n```\nsource /root/.bash_profile\n```\n\n## 测试\n```\n[root@iZwz97v8o84q253plfkxvfZ php56]# php -version\nPHP 5.6.25 (cli) (built: Sep 24 2016 23:30:43)\nCopyright (c) 1997-2016 The PHP Group\nZend Engine v2.6.0, Copyright (c) 1998-2016 Zend Technologies\n```\n\n**Tips:**\n如何确定PHP当前使用的配置文件的位置？\n\nphp：\n```\n$ /usr/local/php56/bin/php -r \"phpinfo();\"\n如果看到以下输出，则表示配置文件加载成功。\nConfiguration File (php.ini) Path => /usr/local/php56/lib\nLoaded Configuration File => /usr/local/php56/lib/php.ini\n```\nphp-fpm:\n```\n/usr/local/php56/sbin/php-fpm -t\n[25-Sep-2016 18:01:40] NOTICE: configuration file /usr/local/php56/etc/php-fpm.conf test is successful\n```\nover~\n","slug":"PHP安装","published":1,"updated":"2016-09-25T10:43:48.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"city8vno4001rg29f5xwpo8yt","content":"<p><img src=\"http://n.sinaimg.cn/games/3ece443e/20160925/php_log.png\" alt=\"php\"></p>\n<a id=\"more\"></a>\n<h2 id=\"环境\"><a href=\"#环境\" class=\"headerlink\" title=\"环境\"></a>环境</h2><p>OS：CentOS 7.2 64</p>\n<p>PHP：<a href=\"http://n.sinaimg.cn/games/3ece443e/20160925/php-5.6.25.tar.gz\" target=\"_blank\" rel=\"external\">php-5.6.25</a></p>\n<h2 id=\"编译前准备\"><a href=\"#编译前准备\" class=\"headerlink\" title=\"编译前准备\"></a>编译前准备</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">yum -y install libxml2 libxml2-devel</div></pre></td></tr></table></figure>\n<p>libxml2,是个C语言的XML程式库，能简单方便的提供对XML文件的各种操作，并且支持XPATH查询，及部分的支持XSLT转换等功能。</p>\n<h2 id=\"编译安装\"><a href=\"#编译安装\" class=\"headerlink\" title=\"编译安装\"></a>编译安装</h2><p>解压源码包<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">tar zxvf php-5.6.25.tar.gz</div></pre></td></tr></table></figure></p>\n<p>进入源码包目录<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">cd php-5.6.25</div></pre></td></tr></table></figure></p>\n<p>编译、安装<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div></pre></td><td class=\"code\"><pre><div class=\"line\">./configure --prefix=/usr/local/php56 --enable-fpm --with-mysql</div><div class=\"line\">make &amp;&amp; make install</div><div class=\"line\">Installing shared extensions:     /usr/local/php56/lib/php/extensions/no-debug-non-zts-20131226/</div><div class=\"line\">Installing PHP CLI binary:        /usr/local/php56/bin/</div><div class=\"line\">Installing PHP CLI man page:      /usr/local/php56/php/man/man1/</div><div class=\"line\">Installing PHP FPM binary:        /usr/local/php56/sbin/</div><div class=\"line\">Installing PHP FPM config:        /usr/local/php56/etc/</div><div class=\"line\">Installing PHP FPM man page:      /usr/local/php56/php/man/man8/</div><div class=\"line\">Installing PHP FPM status page:   /usr/local/php56/php/php/fpm/</div><div class=\"line\">Installing PHP CGI binary:        /usr/local/php56/bin/</div><div class=\"line\">Installing PHP CGI man page:      /usr/local/php56/php/man/man1/</div><div class=\"line\">Installing build environment:     /usr/local/php56/lib/php/build/</div><div class=\"line\">Installing header files:           /usr/local/php56/include/php/</div><div class=\"line\">Installing helper programs:       /usr/local/php56/bin/</div><div class=\"line\">  program: phpize</div><div class=\"line\">  program: php-config</div><div class=\"line\">Installing man pages:             /usr/local/php56/php/man/man1/</div><div class=\"line\">  page: phpize.1</div><div class=\"line\">  page: php-config.1</div><div class=\"line\">Installing PEAR environment:      /usr/local/php56/lib/php/</div><div class=\"line\">[PEAR] Archive_Tar    - installed: 1.4.0</div><div class=\"line\">[PEAR] Console_Getopt - installed: 1.4.1</div><div class=\"line\">[PEAR] Structures_Graph- installed: 1.1.1</div><div class=\"line\">[PEAR] XML_Util       - installed: 1.3.0</div><div class=\"line\">[PEAR] PEAR           - installed: 1.10.1</div><div class=\"line\">Wrote PEAR system config file at: /usr/local/php56/etc/pear.conf</div><div class=\"line\">You may want to add: /usr/local/php56/lib/php to your php.ini include_path</div><div class=\"line\">/root/php-5.6.25/build/shtool install -c ext/phar/phar.phar /usr/local/php56/bin</div><div class=\"line\">ln -s -f phar.phar /usr/local/php56/bin/phar</div><div class=\"line\">Installing PDO headers:           /usr/local/php56/include/php/ext/pdo/</div></pre></td></tr></table></figure></p>\n<p>生成配置文件<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">cp php.ini-development /usr/local/php56/lib/php.ini</div><div class=\"line\">cp /usr/local/php56/etc/php-fpm.conf.default /usr/local/php56/etc/php-fpm.conf</div></pre></td></tr></table></figure></p>\n<p>查看配置文件是否已生效。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ /usr/local/php56/bin/php -r &quot;phpinfo();&quot;</div><div class=\"line\">如果看到以下输出，则表示配置文件加载成功。</div><div class=\"line\">Configuration File (php.ini) Path =&gt; /usr/local/php56/lib</div><div class=\"line\">Loaded Configuration File =&gt; /usr/local/php56/lib/php.ini</div></pre></td></tr></table></figure></p>\n<p>将php加入到PATH中<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">vi ~/.bash_profile</div><div class=\"line\">#在export PATH前一行插入</div><div class=\"line\">PATH=$PATH:/usr/local/php56/bin:/usr/local/php56/lib</div></pre></td></tr></table></figure></p>\n<p>重新加载环境变量<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">source /root/.bash_profile</div></pre></td></tr></table></figure></p>\n<h2 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">[root@iZwz97v8o84q253plfkxvfZ php56]# php -version</div><div class=\"line\">PHP 5.6.25 (cli) (built: Sep 24 2016 23:30:43)</div><div class=\"line\">Copyright (c) 1997-2016 The PHP Group</div><div class=\"line\">Zend Engine v2.6.0, Copyright (c) 1998-2016 Zend Technologies</div></pre></td></tr></table></figure>\n<p><strong>Tips:</strong><br>如何确定PHP当前使用的配置文件的位置？</p>\n<p>php：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ /usr/local/php56/bin/php -r &quot;phpinfo();&quot;</div><div class=\"line\">如果看到以下输出，则表示配置文件加载成功。</div><div class=\"line\">Configuration File (php.ini) Path =&gt; /usr/local/php56/lib</div><div class=\"line\">Loaded Configuration File =&gt; /usr/local/php56/lib/php.ini</div></pre></td></tr></table></figure></p>\n<p>php-fpm:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">/usr/local/php56/sbin/php-fpm -t</div><div class=\"line\">[25-Sep-2016 18:01:40] NOTICE: configuration file /usr/local/php56/etc/php-fpm.conf test is successful</div></pre></td></tr></table></figure></p>\n<p>over~</p>\n","excerpt":"<p><img src=\"http://n.sinaimg.cn/games/3ece443e/20160925/php_log.png\" alt=\"php\"></p>","more":"<h2 id=\"环境\"><a href=\"#环境\" class=\"headerlink\" title=\"环境\"></a>环境</h2><p>OS：CentOS 7.2 64</p>\n<p>PHP：<a href=\"http://n.sinaimg.cn/games/3ece443e/20160925/php-5.6.25.tar.gz\">php-5.6.25</a></p>\n<h2 id=\"编译前准备\"><a href=\"#编译前准备\" class=\"headerlink\" title=\"编译前准备\"></a>编译前准备</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">yum -y install libxml2 libxml2-devel</div></pre></td></tr></table></figure>\n<p>libxml2,是个C语言的XML程式库，能简单方便的提供对XML文件的各种操作，并且支持XPATH查询，及部分的支持XSLT转换等功能。</p>\n<h2 id=\"编译安装\"><a href=\"#编译安装\" class=\"headerlink\" title=\"编译安装\"></a>编译安装</h2><p>解压源码包<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">tar zxvf php-5.6.25.tar.gz</div></pre></td></tr></table></figure></p>\n<p>进入源码包目录<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">cd php-5.6.25</div></pre></td></tr></table></figure></p>\n<p>编译、安装<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div></pre></td><td class=\"code\"><pre><div class=\"line\">./configure --prefix=/usr/local/php56 --enable-fpm --with-mysql</div><div class=\"line\">make &amp;&amp; make install</div><div class=\"line\">Installing shared extensions:     /usr/local/php56/lib/php/extensions/no-debug-non-zts-20131226/</div><div class=\"line\">Installing PHP CLI binary:        /usr/local/php56/bin/</div><div class=\"line\">Installing PHP CLI man page:      /usr/local/php56/php/man/man1/</div><div class=\"line\">Installing PHP FPM binary:        /usr/local/php56/sbin/</div><div class=\"line\">Installing PHP FPM config:        /usr/local/php56/etc/</div><div class=\"line\">Installing PHP FPM man page:      /usr/local/php56/php/man/man8/</div><div class=\"line\">Installing PHP FPM status page:   /usr/local/php56/php/php/fpm/</div><div class=\"line\">Installing PHP CGI binary:        /usr/local/php56/bin/</div><div class=\"line\">Installing PHP CGI man page:      /usr/local/php56/php/man/man1/</div><div class=\"line\">Installing build environment:     /usr/local/php56/lib/php/build/</div><div class=\"line\">Installing header files:           /usr/local/php56/include/php/</div><div class=\"line\">Installing helper programs:       /usr/local/php56/bin/</div><div class=\"line\">  program: phpize</div><div class=\"line\">  program: php-config</div><div class=\"line\">Installing man pages:             /usr/local/php56/php/man/man1/</div><div class=\"line\">  page: phpize.1</div><div class=\"line\">  page: php-config.1</div><div class=\"line\">Installing PEAR environment:      /usr/local/php56/lib/php/</div><div class=\"line\">[PEAR] Archive_Tar    - installed: 1.4.0</div><div class=\"line\">[PEAR] Console_Getopt - installed: 1.4.1</div><div class=\"line\">[PEAR] Structures_Graph- installed: 1.1.1</div><div class=\"line\">[PEAR] XML_Util       - installed: 1.3.0</div><div class=\"line\">[PEAR] PEAR           - installed: 1.10.1</div><div class=\"line\">Wrote PEAR system config file at: /usr/local/php56/etc/pear.conf</div><div class=\"line\">You may want to add: /usr/local/php56/lib/php to your php.ini include_path</div><div class=\"line\">/root/php-5.6.25/build/shtool install -c ext/phar/phar.phar /usr/local/php56/bin</div><div class=\"line\">ln -s -f phar.phar /usr/local/php56/bin/phar</div><div class=\"line\">Installing PDO headers:           /usr/local/php56/include/php/ext/pdo/</div></pre></td></tr></table></figure></p>\n<p>生成配置文件<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">cp php.ini-development /usr/local/php56/lib/php.ini</div><div class=\"line\">cp /usr/local/php56/etc/php-fpm.conf.default /usr/local/php56/etc/php-fpm.conf</div></pre></td></tr></table></figure></p>\n<p>查看配置文件是否已生效。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ /usr/local/php56/bin/php -r &quot;phpinfo();&quot;</div><div class=\"line\">如果看到以下输出，则表示配置文件加载成功。</div><div class=\"line\">Configuration File (php.ini) Path =&gt; /usr/local/php56/lib</div><div class=\"line\">Loaded Configuration File =&gt; /usr/local/php56/lib/php.ini</div></pre></td></tr></table></figure></p>\n<p>将php加入到PATH中<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">vi ~/.bash_profile</div><div class=\"line\">#在export PATH前一行插入</div><div class=\"line\">PATH=$PATH:/usr/local/php56/bin:/usr/local/php56/lib</div></pre></td></tr></table></figure></p>\n<p>重新加载环境变量<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">source /root/.bash_profile</div></pre></td></tr></table></figure></p>\n<h2 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">[root@iZwz97v8o84q253plfkxvfZ php56]# php -version</div><div class=\"line\">PHP 5.6.25 (cli) (built: Sep 24 2016 23:30:43)</div><div class=\"line\">Copyright (c) 1997-2016 The PHP Group</div><div class=\"line\">Zend Engine v2.6.0, Copyright (c) 1998-2016 Zend Technologies</div></pre></td></tr></table></figure>\n<p><strong>Tips:</strong><br>如何确定PHP当前使用的配置文件的位置？</p>\n<p>php：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ /usr/local/php56/bin/php -r &quot;phpinfo();&quot;</div><div class=\"line\">如果看到以下输出，则表示配置文件加载成功。</div><div class=\"line\">Configuration File (php.ini) Path =&gt; /usr/local/php56/lib</div><div class=\"line\">Loaded Configuration File =&gt; /usr/local/php56/lib/php.ini</div></pre></td></tr></table></figure></p>\n<p>php-fpm:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">/usr/local/php56/sbin/php-fpm -t</div><div class=\"line\">[25-Sep-2016 18:01:40] NOTICE: configuration file /usr/local/php56/etc/php-fpm.conf test is successful</div></pre></td></tr></table></figure></p>\n<p>over~</p>"},{"title":"PHP异常和错误处理","date":"2016-09-30T15:10:00.000Z","_content":"首先，需要明确以下这两个概念\n- 异常(exception)\n> PHP中的异常，是程序运行中不符合预期的情况及与正常流程不同的状况。\n> 是属于逻辑和业务流程的一种中断，而不是语法错误。\n\n- 错误(error)\n> PHP中的错误则属于自身的问题，是一种非法的语法或者环境问题导致的、让编译器无法通过检查甚至无法运行的情况。\n\n<!-- more -->\n\n## 异常处理\n\nPHP中玉带任何自身问题都会触发一个错误，而不是抛出异常。所以，如果想使用异常处理来处理不可预知的问题，这是PHP办不到的。但在处理一些可以预知的错误，PHP的异常处理机制还是能够帮我们解决一些问题的。例如：\n- 代码冗余复杂，到处充斥着if...else\n- 代码可读性差\n\n而异常处理，其主要作用是将『正常执行过程的代码』和『处理问题怎么处理的代码』进行分离。\n\n### PHP常见的异常类\n#### Exception\n> 所有异常的基类。\n\n类摘要\n```php\n<?php\n  Exception {\n    /* 属性 */\n    protected string $message ;     //异常消息内容\n    protected int $code ;           //异常代码\n    protected string $file ;        //抛出异常的文件名\n    protected int $line ;           //抛出异常在该文件中的行号\n    /* 方法 */\n    public __construct ([ string $message = \"\" [, int $code = 0 [, Exception $previous = NULL ]]] )           //异常构造函数\n    final public string getMessage ( void )    //获取异常消息内容\n    final public Exception getPrevious ( void )//返回异常链中的前一个异常\n    final public int getCode ( void )          //获取异常代码\n    final public string getFile ( void )       //获取发生异常的程序文件名称\n    final public int getLine ( void )          //获取发生异常的代码在文件中的行号\n    final public array getTrace ( void )       //获取异常追踪信息\n    final public string getTraceAsString ( void )//获取字符串类型的异常追踪信息\n    public string __toString ( void )            //将异常对象转换为字符串\n    final private void __clone ( void )          //异常克隆\n  }\n```\n\n#### 错误异常类\n\n类摘要\n```php\n<?php\n  ErrorException extends Exception {\n      /* 属性 */\n      protected int $severity ;     //异常级别\n      /* 方法 */\n      public __construct ([ string $message = \"\" [, int $code = 0 [, int $severity = 1 [, string $filename = __FILE__ [, int $lineno = __LINE__ [, Exception $previous = NULL ]]]]]] )   //异常构造函数\n      final public int getSeverity ( void )             // 获取异常的严重程度\n      /* 继承的方法 */\n      final public string Exception::getMessage ( void )\n      final public Exception Exception::getPrevious ( void )\n      final public int Exception::getCode ( void )\n      final public string Exception::getFile ( void )\n      final public int Exception::getLine ( void )\n      final public array Exception::getTrace ( void )\n      final public string Exception::getTraceAsString ( void )\n      public string Exception::__toString ( void )\n      final private void Exception::__clone ( void )\n  }\n```\n常见使用方式（使用set_error_handle()函数讲错误信息托管至ErrorException）\n```php\n<?php\nfunction exception_error_handler($errno, $errstr, $errfile, $errline ) {\n    throw new ErrorException($errstr, 0, $errno, $errfile, $errline);\n}\nset_error_handler(\"exception_error_handler\");\n/* Trigger exception 抛出异常 */\nstrpos();\n?>\n```\n\n#### 自定义异常类\n\n```php\n<?php\n/**\n * 自定义一个异常处理类\n */\nclass MyException extends Exception\n{\n    // 重定义构造器使 message 变为必须被指定的属性\n    public function __construct($message, $code = 0, Exception $previous = null) {\n        // 自定义的代码\n\n        // 确保所有变量都被正确赋值\n        parent::__construct($message, $code, $previous);\n    }\n    // 自定义字符串输出的样式\n    public function __toString() {\n        return __CLASS__ . \": [{$this->code}]: {$this->message}\\n\";\n    }\n    public function customFunction() {\n        echo \"A custom function for this type of exception\\n\";\n    }\n}\n```\n\n### PHP中异常用法\n>\n\n首先我们需要知道，***在PHP中只有手动抛出异常后才能捕获异常，对于抛出的异常只有进行捕获并作出相应的操作抛出异常才有意义，否则没有任何意义。***\n\n抛出异常\n```php\n<?php\n  function check($n){\n    if(empty($n)){\n      throw new Exception(\"参数错误\");\n    }\n  }\n```\n\n#### try...catch\n示例：关于上传操作的异常处理\n\n方式一：异常发生时立即捕获\n```php\n<?php\n  try{\n    //可能出现错误的代码\n    if(文件上传不成功)\n      throw (上传异常)；\n    if(更新数据库不成功)\n      throw (数据库异常操作)；\n  } catch(异常){\n    //必须的补救措施，例如删除文件、删除数据库记录\n    ...\n  }\n```\n方式二：分散抛出，集中捕获\n```php\n<?php\n  上传{\n    if(文件上传不成功) throw (上传异常)；\n    if(更新数据库不成功)  throw (数据库异常)；\n  }\n  其他{\n    if(其他操作失败) throw （其他操作异常）；\n  }\n  //其他代码...\n  try{\n      上传；\n      其他；\n  } catch(上传异常){\n      //上传异常处理、例如删除文件\n  } catch(数据库异常){\n      //数据库异常处理、比如删除数据库记录等\n  } catch(其他异常){\n      //其他异常处理，比如记录异常日志等\n  }\n```\n\n**需要注意，exception作为超类应该放在最后捕获**\n\n\n#### try...catch...finally\n示例：\n```php\n<?php\n  function inverse($x) {\n      if (!$x) {\n          throw new Exception('Division by zero.');\n      }\n      return 1/$x;\n  }\n  //\n  try {\n      echo inverse(5) . \"\\n\";\n  } catch (Exception $e) {\n      echo 'Caught exception: ',  $e->getMessage(), \"\\n\";\n  } finally {\n      echo \"First finally.\\n\";\n  }\n  //\n  try {\n      echo inverse(0) . \"\\n\";\n  } catch (Exception $e) {\n      echo 'Caught exception: ',  $e->getMessage(), \"\\n\";\n  } finally {\n      echo \"Second finally.\\n\";\n  }\n  //\n  // Continue execution\n  echo \"Hello World\\n\";\n?>\n\n```\n\n### PHP异常处理使用场景\n#### 对程序的悲观预测\n即当一个操作可能会由于一些不可控的因素（比如网络问题等），可能会出现执行不成功的情况。那么在种情况下就可以抛出异常，然后进行捕获，对异常情况进行细致的处理。\n#### 程序的需要和对业务的需要\n需要强调的是，异常是业务处理中必不可少的环节，我们不能对异常视而不见。\n需要用到异常处理的情况\n- 不希望业务代码中充斥着大量的打印、调试等处理；\n- 业务中自定义的异常，对现实生活中各种业务进行补充；\n- 对数据一致性有要求的业务操作中；\n\n异常处理机制可以把每一件事当做事务来考虑，还可以把异常处理当做成一种内建的恢复系统。\n\n\n\n#### 语言级别的健壮性要求\n我们都知道PHP在健壮性这一点是不足的。对很多异常是没有强制性限制的。所以很多异常需要我们自己来做。\n\n通过try...catch处理，我们可以把异常造成的逻辑中断破坏降低到最小的范围，并且经过补救处理后不影响业务逻辑的完整性；乱抛异常和只抛不捕获，或者捕获而不补救，都会导致数据混乱。\n\n\n\n\n## 错误处理\n### PHP中的错误级别\nPHP的错误有很多类，包括warning、notice、deprecated、fatal error等。\n\n常用到的错误级别\n- deprecated，是最低级别的错误，表示不推荐、不建议。其虽不影响PHP正常的业务流程，但一般情况下建议修正；\n- notice，通知级别错误。表示你语法中存在不恰当的地方。常见的是 使用未定义的变量就会报此错误。这种错误也影响PHP正常流程；\n- warning，警告级别错误，是比较高级别的错误，表示在语法中出现很不恰当的地方，比如函数参数不匹配。这种级别的错误可能会导致出现不可预期的结果，所以建议修正；\n- fetal error，致命错误。直接导致PHP流程终结，后面代码不在执行。\n- prase error，语法解析错误。导致PHP代码无法通过语法检查。\n\n错误信息显示控制\n方式一：\nphp.ini\n```\nerror_reporting = E_ALL | E_STRICT  #指定显示错误级别\ndisplay_errors = On                 #错误信息显示控制\n```\n方式二：PHP代码中\n1. error_reporting(0),表示屏蔽所有错误信息。正式部署时采用这样的策略，来防止错误信息泄露敏感信息。\n2. @mysql_connect(),抑制错误信息输出。\n\n\n\n### PHP错误处理机制\n\n#### trigger_error\n该方法用于主动抛出一个错误。示例\n```php\n<?php\n  if(mt_rand(0,1) == 1){\n    triggererror(\"random no eq 0\",E_USER_ERROR);\n  }\n\n```\n\n#### set_error_handler\nPHP中提供了set_error_handler（）函数可以用来接管PHP错误处理。\n\n**set_error_handler(error_function, error_type);**\n- error_function,规定发生错误时运行的函数。（必须）\n- error_types,规定在哪个错误级别报告级别会显示用户定义的错误，（可选，默认『E_ALL』）\n\n示例：\n```php\n<?php\n  function customError($errNo, $errStr, $errFile, $errLine){\n    echo \"<b>错误代码：</b>[$errNo]{$errStr}\\r\\n\";\n    echo \"错误所在的代码行：{$errLine},文件:{$errFile}\\r\\n\";\n    echo \"PHP 版本 ，\".PHP_VERSION.\"(\".PHP_OS.\")\\r\\n\";\n    die();  //如果有必要，用户自定义的错误处理程序必须终止（die（）；）当前脚本。\n  }\n\n  set_error_handler(\"custonError\", E_ALL | E_STRICT);\n  $a = array('o' => 2,3,4,8);\n  echo $a[o]\n```\n\n自定义的错误处理函数一定要有这四个输入变量$errno, $errstr, $errfile, $errline.\n- errno,代表错误等级的一组常量。比如 E_WARNING 其二进制掩码为4，表示告警信息。\n\n**注意：** 自定义的错误处理函数并不能托管所有种类的错误，比如E_ERROR, E_PARSE, E_CORE_ERROR, E_CORE_WARNING, E_COMPILE_ERROR, E_COMPILE_WARNING,以及E_STRICT中的部分。\n\n**注意：** 如果使用自定义的 set_error_handler 接管PHP的错误处理，先前代码里的错误抑制 @ 也将会失效，这是这种错误也会被显示。\n\n#### restore_error_handler\n该函数可以取消 set_error_handler 的错误接管.\n\n\n## 结合PHP错误处理主动抛出异常\n\n结合PHP的错误处理机制和异常处理机制，通过组合也可以实现同时捕获异常和非致命错误。\n示例\n```php\n<?php\n  function customError($errNo, $errStr, $errFile, $errLine){\n    //自定义错误处理时，可以手动抛出异常\n    throw new Exception($level.\"|\".$errStr);\n  }\n  set_error_handler(\"custonError\", E_ALL | E_STRICT);\n  try{\n    $a = 5/0;\n  } catch(Exception $e){\n      echo \"错误信息\".$e->getMessage();\n  }\n```\n通过上面示例可以捕获到异常和非致命错误，但对于 fetal error 这样的错误却捕获不到。但是通过其他的一些方法，我们还是可以做一些处理。 register_shutdown_function 该函数会在程序终止或die时触发一个函数，我们可以利用该触发函数做一些最后的收尾操作。\n\n调用时机\n- 当页面被用户强制停止时\n- 当程序代码运行超时时\n- 当ＰＨＰ代码执行完成时，代码执行存在异常和错误、警告\n\nvoid register_shutdown_function ( callable $callback [, mixed $parameter [, mixed $... ]] )\n\n示例\n```php\n<?php\n  function shutdown()\n  {\n      // This is our shutdown function, in\n      // here we can do any last operations\n      // before the script is complete.\n      echo 'Script executed with success', PHP_EOL;\n  }\n  register_shutdown_function('shutdown');\n?>\n```\n\n对于 prase error 级别的错误，PHP层面就没有办法做什么了。我们只能通过开启错误日志，来记录这些错误。\n\nphp.ini设置\n```\nlog_errors = On\nerror_log = /usr/log/log.log\n```\n","source":"_posts/PHP异常和错误处理.md","raw":"---\ntitle: PHP异常和错误处理\ndate: 2016-09-30 23:10:00\ntags:\n- 异常处理\n- 错误处理\ncategories:\n- PHP\n---\n首先，需要明确以下这两个概念\n- 异常(exception)\n> PHP中的异常，是程序运行中不符合预期的情况及与正常流程不同的状况。\n> 是属于逻辑和业务流程的一种中断，而不是语法错误。\n\n- 错误(error)\n> PHP中的错误则属于自身的问题，是一种非法的语法或者环境问题导致的、让编译器无法通过检查甚至无法运行的情况。\n\n<!-- more -->\n\n## 异常处理\n\nPHP中玉带任何自身问题都会触发一个错误，而不是抛出异常。所以，如果想使用异常处理来处理不可预知的问题，这是PHP办不到的。但在处理一些可以预知的错误，PHP的异常处理机制还是能够帮我们解决一些问题的。例如：\n- 代码冗余复杂，到处充斥着if...else\n- 代码可读性差\n\n而异常处理，其主要作用是将『正常执行过程的代码』和『处理问题怎么处理的代码』进行分离。\n\n### PHP常见的异常类\n#### Exception\n> 所有异常的基类。\n\n类摘要\n```php\n<?php\n  Exception {\n    /* 属性 */\n    protected string $message ;     //异常消息内容\n    protected int $code ;           //异常代码\n    protected string $file ;        //抛出异常的文件名\n    protected int $line ;           //抛出异常在该文件中的行号\n    /* 方法 */\n    public __construct ([ string $message = \"\" [, int $code = 0 [, Exception $previous = NULL ]]] )           //异常构造函数\n    final public string getMessage ( void )    //获取异常消息内容\n    final public Exception getPrevious ( void )//返回异常链中的前一个异常\n    final public int getCode ( void )          //获取异常代码\n    final public string getFile ( void )       //获取发生异常的程序文件名称\n    final public int getLine ( void )          //获取发生异常的代码在文件中的行号\n    final public array getTrace ( void )       //获取异常追踪信息\n    final public string getTraceAsString ( void )//获取字符串类型的异常追踪信息\n    public string __toString ( void )            //将异常对象转换为字符串\n    final private void __clone ( void )          //异常克隆\n  }\n```\n\n#### 错误异常类\n\n类摘要\n```php\n<?php\n  ErrorException extends Exception {\n      /* 属性 */\n      protected int $severity ;     //异常级别\n      /* 方法 */\n      public __construct ([ string $message = \"\" [, int $code = 0 [, int $severity = 1 [, string $filename = __FILE__ [, int $lineno = __LINE__ [, Exception $previous = NULL ]]]]]] )   //异常构造函数\n      final public int getSeverity ( void )             // 获取异常的严重程度\n      /* 继承的方法 */\n      final public string Exception::getMessage ( void )\n      final public Exception Exception::getPrevious ( void )\n      final public int Exception::getCode ( void )\n      final public string Exception::getFile ( void )\n      final public int Exception::getLine ( void )\n      final public array Exception::getTrace ( void )\n      final public string Exception::getTraceAsString ( void )\n      public string Exception::__toString ( void )\n      final private void Exception::__clone ( void )\n  }\n```\n常见使用方式（使用set_error_handle()函数讲错误信息托管至ErrorException）\n```php\n<?php\nfunction exception_error_handler($errno, $errstr, $errfile, $errline ) {\n    throw new ErrorException($errstr, 0, $errno, $errfile, $errline);\n}\nset_error_handler(\"exception_error_handler\");\n/* Trigger exception 抛出异常 */\nstrpos();\n?>\n```\n\n#### 自定义异常类\n\n```php\n<?php\n/**\n * 自定义一个异常处理类\n */\nclass MyException extends Exception\n{\n    // 重定义构造器使 message 变为必须被指定的属性\n    public function __construct($message, $code = 0, Exception $previous = null) {\n        // 自定义的代码\n\n        // 确保所有变量都被正确赋值\n        parent::__construct($message, $code, $previous);\n    }\n    // 自定义字符串输出的样式\n    public function __toString() {\n        return __CLASS__ . \": [{$this->code}]: {$this->message}\\n\";\n    }\n    public function customFunction() {\n        echo \"A custom function for this type of exception\\n\";\n    }\n}\n```\n\n### PHP中异常用法\n>\n\n首先我们需要知道，***在PHP中只有手动抛出异常后才能捕获异常，对于抛出的异常只有进行捕获并作出相应的操作抛出异常才有意义，否则没有任何意义。***\n\n抛出异常\n```php\n<?php\n  function check($n){\n    if(empty($n)){\n      throw new Exception(\"参数错误\");\n    }\n  }\n```\n\n#### try...catch\n示例：关于上传操作的异常处理\n\n方式一：异常发生时立即捕获\n```php\n<?php\n  try{\n    //可能出现错误的代码\n    if(文件上传不成功)\n      throw (上传异常)；\n    if(更新数据库不成功)\n      throw (数据库异常操作)；\n  } catch(异常){\n    //必须的补救措施，例如删除文件、删除数据库记录\n    ...\n  }\n```\n方式二：分散抛出，集中捕获\n```php\n<?php\n  上传{\n    if(文件上传不成功) throw (上传异常)；\n    if(更新数据库不成功)  throw (数据库异常)；\n  }\n  其他{\n    if(其他操作失败) throw （其他操作异常）；\n  }\n  //其他代码...\n  try{\n      上传；\n      其他；\n  } catch(上传异常){\n      //上传异常处理、例如删除文件\n  } catch(数据库异常){\n      //数据库异常处理、比如删除数据库记录等\n  } catch(其他异常){\n      //其他异常处理，比如记录异常日志等\n  }\n```\n\n**需要注意，exception作为超类应该放在最后捕获**\n\n\n#### try...catch...finally\n示例：\n```php\n<?php\n  function inverse($x) {\n      if (!$x) {\n          throw new Exception('Division by zero.');\n      }\n      return 1/$x;\n  }\n  //\n  try {\n      echo inverse(5) . \"\\n\";\n  } catch (Exception $e) {\n      echo 'Caught exception: ',  $e->getMessage(), \"\\n\";\n  } finally {\n      echo \"First finally.\\n\";\n  }\n  //\n  try {\n      echo inverse(0) . \"\\n\";\n  } catch (Exception $e) {\n      echo 'Caught exception: ',  $e->getMessage(), \"\\n\";\n  } finally {\n      echo \"Second finally.\\n\";\n  }\n  //\n  // Continue execution\n  echo \"Hello World\\n\";\n?>\n\n```\n\n### PHP异常处理使用场景\n#### 对程序的悲观预测\n即当一个操作可能会由于一些不可控的因素（比如网络问题等），可能会出现执行不成功的情况。那么在种情况下就可以抛出异常，然后进行捕获，对异常情况进行细致的处理。\n#### 程序的需要和对业务的需要\n需要强调的是，异常是业务处理中必不可少的环节，我们不能对异常视而不见。\n需要用到异常处理的情况\n- 不希望业务代码中充斥着大量的打印、调试等处理；\n- 业务中自定义的异常，对现实生活中各种业务进行补充；\n- 对数据一致性有要求的业务操作中；\n\n异常处理机制可以把每一件事当做事务来考虑，还可以把异常处理当做成一种内建的恢复系统。\n\n\n\n#### 语言级别的健壮性要求\n我们都知道PHP在健壮性这一点是不足的。对很多异常是没有强制性限制的。所以很多异常需要我们自己来做。\n\n通过try...catch处理，我们可以把异常造成的逻辑中断破坏降低到最小的范围，并且经过补救处理后不影响业务逻辑的完整性；乱抛异常和只抛不捕获，或者捕获而不补救，都会导致数据混乱。\n\n\n\n\n## 错误处理\n### PHP中的错误级别\nPHP的错误有很多类，包括warning、notice、deprecated、fatal error等。\n\n常用到的错误级别\n- deprecated，是最低级别的错误，表示不推荐、不建议。其虽不影响PHP正常的业务流程，但一般情况下建议修正；\n- notice，通知级别错误。表示你语法中存在不恰当的地方。常见的是 使用未定义的变量就会报此错误。这种错误也影响PHP正常流程；\n- warning，警告级别错误，是比较高级别的错误，表示在语法中出现很不恰当的地方，比如函数参数不匹配。这种级别的错误可能会导致出现不可预期的结果，所以建议修正；\n- fetal error，致命错误。直接导致PHP流程终结，后面代码不在执行。\n- prase error，语法解析错误。导致PHP代码无法通过语法检查。\n\n错误信息显示控制\n方式一：\nphp.ini\n```\nerror_reporting = E_ALL | E_STRICT  #指定显示错误级别\ndisplay_errors = On                 #错误信息显示控制\n```\n方式二：PHP代码中\n1. error_reporting(0),表示屏蔽所有错误信息。正式部署时采用这样的策略，来防止错误信息泄露敏感信息。\n2. @mysql_connect(),抑制错误信息输出。\n\n\n\n### PHP错误处理机制\n\n#### trigger_error\n该方法用于主动抛出一个错误。示例\n```php\n<?php\n  if(mt_rand(0,1) == 1){\n    triggererror(\"random no eq 0\",E_USER_ERROR);\n  }\n\n```\n\n#### set_error_handler\nPHP中提供了set_error_handler（）函数可以用来接管PHP错误处理。\n\n**set_error_handler(error_function, error_type);**\n- error_function,规定发生错误时运行的函数。（必须）\n- error_types,规定在哪个错误级别报告级别会显示用户定义的错误，（可选，默认『E_ALL』）\n\n示例：\n```php\n<?php\n  function customError($errNo, $errStr, $errFile, $errLine){\n    echo \"<b>错误代码：</b>[$errNo]{$errStr}\\r\\n\";\n    echo \"错误所在的代码行：{$errLine},文件:{$errFile}\\r\\n\";\n    echo \"PHP 版本 ，\".PHP_VERSION.\"(\".PHP_OS.\")\\r\\n\";\n    die();  //如果有必要，用户自定义的错误处理程序必须终止（die（）；）当前脚本。\n  }\n\n  set_error_handler(\"custonError\", E_ALL | E_STRICT);\n  $a = array('o' => 2,3,4,8);\n  echo $a[o]\n```\n\n自定义的错误处理函数一定要有这四个输入变量$errno, $errstr, $errfile, $errline.\n- errno,代表错误等级的一组常量。比如 E_WARNING 其二进制掩码为4，表示告警信息。\n\n**注意：** 自定义的错误处理函数并不能托管所有种类的错误，比如E_ERROR, E_PARSE, E_CORE_ERROR, E_CORE_WARNING, E_COMPILE_ERROR, E_COMPILE_WARNING,以及E_STRICT中的部分。\n\n**注意：** 如果使用自定义的 set_error_handler 接管PHP的错误处理，先前代码里的错误抑制 @ 也将会失效，这是这种错误也会被显示。\n\n#### restore_error_handler\n该函数可以取消 set_error_handler 的错误接管.\n\n\n## 结合PHP错误处理主动抛出异常\n\n结合PHP的错误处理机制和异常处理机制，通过组合也可以实现同时捕获异常和非致命错误。\n示例\n```php\n<?php\n  function customError($errNo, $errStr, $errFile, $errLine){\n    //自定义错误处理时，可以手动抛出异常\n    throw new Exception($level.\"|\".$errStr);\n  }\n  set_error_handler(\"custonError\", E_ALL | E_STRICT);\n  try{\n    $a = 5/0;\n  } catch(Exception $e){\n      echo \"错误信息\".$e->getMessage();\n  }\n```\n通过上面示例可以捕获到异常和非致命错误，但对于 fetal error 这样的错误却捕获不到。但是通过其他的一些方法，我们还是可以做一些处理。 register_shutdown_function 该函数会在程序终止或die时触发一个函数，我们可以利用该触发函数做一些最后的收尾操作。\n\n调用时机\n- 当页面被用户强制停止时\n- 当程序代码运行超时时\n- 当ＰＨＰ代码执行完成时，代码执行存在异常和错误、警告\n\nvoid register_shutdown_function ( callable $callback [, mixed $parameter [, mixed $... ]] )\n\n示例\n```php\n<?php\n  function shutdown()\n  {\n      // This is our shutdown function, in\n      // here we can do any last operations\n      // before the script is complete.\n      echo 'Script executed with success', PHP_EOL;\n  }\n  register_shutdown_function('shutdown');\n?>\n```\n\n对于 prase error 级别的错误，PHP层面就没有办法做什么了。我们只能通过开启错误日志，来记录这些错误。\n\nphp.ini设置\n```\nlog_errors = On\nerror_log = /usr/log/log.log\n```\n","slug":"PHP异常和错误处理","published":1,"updated":"2016-09-30T15:11:50.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"city8vno6001ug29fvzulx9yv","content":"<p>首先，需要明确以下这两个概念</p>\n<ul>\n<li><p>异常(exception)</p>\n<blockquote>\n<p>PHP中的异常，是程序运行中不符合预期的情况及与正常流程不同的状况。<br>是属于逻辑和业务流程的一种中断，而不是语法错误。</p>\n</blockquote>\n</li>\n<li><p>错误(error)</p>\n<blockquote>\n<p>PHP中的错误则属于自身的问题，是一种非法的语法或者环境问题导致的、让编译器无法通过检查甚至无法运行的情况。</p>\n</blockquote>\n</li>\n</ul>\n<a id=\"more\"></a>\n<h2 id=\"异常处理\"><a href=\"#异常处理\" class=\"headerlink\" title=\"异常处理\"></a>异常处理</h2><p>PHP中玉带任何自身问题都会触发一个错误，而不是抛出异常。所以，如果想使用异常处理来处理不可预知的问题，这是PHP办不到的。但在处理一些可以预知的错误，PHP的异常处理机制还是能够帮我们解决一些问题的。例如：</p>\n<ul>\n<li>代码冗余复杂，到处充斥着if…else</li>\n<li>代码可读性差</li>\n</ul>\n<p>而异常处理，其主要作用是将『正常执行过程的代码』和『处理问题怎么处理的代码』进行分离。</p>\n<h3 id=\"PHP常见的异常类\"><a href=\"#PHP常见的异常类\" class=\"headerlink\" title=\"PHP常见的异常类\"></a>PHP常见的异常类</h3><h4 id=\"Exception\"><a href=\"#Exception\" class=\"headerlink\" title=\"Exception\"></a>Exception</h4><blockquote>\n<p>所有异常的基类。</p>\n</blockquote>\n<p>类摘要<br><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;?php</span></div><div class=\"line\">  <span class=\"keyword\">Exception</span> &#123;</div><div class=\"line\">    <span class=\"comment\">/* 属性 */</span></div><div class=\"line\">    <span class=\"keyword\">protected</span> string $message ;     <span class=\"comment\">//异常消息内容</span></div><div class=\"line\">    <span class=\"keyword\">protected</span> int $code ;           <span class=\"comment\">//异常代码</span></div><div class=\"line\">    <span class=\"keyword\">protected</span> string $file ;        <span class=\"comment\">//抛出异常的文件名</span></div><div class=\"line\">    <span class=\"keyword\">protected</span> int $line ;           <span class=\"comment\">//抛出异常在该文件中的行号</span></div><div class=\"line\">    <span class=\"comment\">/* 方法 */</span></div><div class=\"line\">    <span class=\"keyword\">public</span> __construct ([ string $message = <span class=\"string\">\"\"</span> [, int $code = <span class=\"number\">0</span> [, <span class=\"keyword\">Exception</span> $previous = <span class=\"keyword\">NULL</span> ]]] )           <span class=\"comment\">//异常构造函数</span></div><div class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">public</span> string getMessage ( void )    <span class=\"comment\">//获取异常消息内容</span></div><div class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">public</span> <span class=\"keyword\">Exception</span> getPrevious ( void )<span class=\"comment\">//返回异常链中的前一个异常</span></div><div class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">public</span> int getCode ( void )          <span class=\"comment\">//获取异常代码</span></div><div class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">public</span> string getFile ( void )       <span class=\"comment\">//获取发生异常的程序文件名称</span></div><div class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">public</span> int getLine ( void )          <span class=\"comment\">//获取发生异常的代码在文件中的行号</span></div><div class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">public</span> <span class=\"keyword\">array</span> getTrace ( void )       <span class=\"comment\">//获取异常追踪信息</span></div><div class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">public</span> string getTraceAsString ( void )<span class=\"comment\">//获取字符串类型的异常追踪信息</span></div><div class=\"line\">    <span class=\"keyword\">public</span> string __toString ( void )            <span class=\"comment\">//将异常对象转换为字符串</span></div><div class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">private</span> void __clone ( void )          <span class=\"comment\">//异常克隆</span></div><div class=\"line\">  &#125;</div></pre></td></tr></table></figure></p>\n<h4 id=\"错误异常类\"><a href=\"#错误异常类\" class=\"headerlink\" title=\"错误异常类\"></a>错误异常类</h4><p>类摘要<br><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;?php</span></div><div class=\"line\">  ErrorException extends <span class=\"keyword\">Exception</span> &#123;</div><div class=\"line\">      <span class=\"comment\">/* 属性 */</span></div><div class=\"line\">      <span class=\"keyword\">protected</span> int $severity ;     <span class=\"comment\">//异常级别</span></div><div class=\"line\">      <span class=\"comment\">/* 方法 */</span></div><div class=\"line\">      <span class=\"keyword\">public</span> __construct ([ string $message = <span class=\"string\">\"\"</span> [, int $code = <span class=\"number\">0</span> [, int $severity = <span class=\"number\">1</span> [, string $filename = <span class=\"keyword\">__FILE__</span> [, int $lineno = <span class=\"keyword\">__LINE__</span> [, <span class=\"keyword\">Exception</span> $previous = <span class=\"keyword\">NULL</span> ]]]]]] )   <span class=\"comment\">//异常构造函数</span></div><div class=\"line\">      <span class=\"keyword\">final</span> <span class=\"keyword\">public</span> int getSeverity ( void )             <span class=\"comment\">// 获取异常的严重程度</span></div><div class=\"line\">      <span class=\"comment\">/* 继承的方法 */</span></div><div class=\"line\">      <span class=\"keyword\">final</span> <span class=\"keyword\">public</span> string <span class=\"keyword\">Exception</span>::getMessage ( void )</div><div class=\"line\">      <span class=\"keyword\">final</span> <span class=\"keyword\">public</span> <span class=\"keyword\">Exception</span> <span class=\"keyword\">Exception</span>::getPrevious ( void )</div><div class=\"line\">      <span class=\"keyword\">final</span> <span class=\"keyword\">public</span> int <span class=\"keyword\">Exception</span>::getCode ( void )</div><div class=\"line\">      <span class=\"keyword\">final</span> <span class=\"keyword\">public</span> string <span class=\"keyword\">Exception</span>::getFile ( void )</div><div class=\"line\">      <span class=\"keyword\">final</span> <span class=\"keyword\">public</span> int <span class=\"keyword\">Exception</span>::getLine ( void )</div><div class=\"line\">      <span class=\"keyword\">final</span> <span class=\"keyword\">public</span> <span class=\"keyword\">array</span> <span class=\"keyword\">Exception</span>::getTrace ( void )</div><div class=\"line\">      <span class=\"keyword\">final</span> <span class=\"keyword\">public</span> string <span class=\"keyword\">Exception</span>::getTraceAsString ( void )</div><div class=\"line\">      <span class=\"keyword\">public</span> string <span class=\"keyword\">Exception</span>::__toString ( void )</div><div class=\"line\">      <span class=\"keyword\">final</span> <span class=\"keyword\">private</span> void <span class=\"keyword\">Exception</span>::__clone ( void )</div><div class=\"line\">  &#125;</div></pre></td></tr></table></figure></p>\n<p>常见使用方式（使用set_error_handle()函数讲错误信息托管至ErrorException）<br><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;?php</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">exception_error_handler</span><span class=\"params\">($errno, $errstr, $errfile, $errline )</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> ErrorException($errstr, <span class=\"number\">0</span>, $errno, $errfile, $errline);</div><div class=\"line\">&#125;</div><div class=\"line\">set_error_handler(<span class=\"string\">\"exception_error_handler\"</span>);</div><div class=\"line\"><span class=\"comment\">/* Trigger exception 抛出异常 */</span></div><div class=\"line\">strpos();</div><div class=\"line\"><span class=\"meta\">?&gt;</span></div></pre></td></tr></table></figure></p>\n<h4 id=\"自定义异常类\"><a href=\"#自定义异常类\" class=\"headerlink\" title=\"自定义异常类\"></a>自定义异常类</h4><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;?php</span></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * 自定义一个异常处理类</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyException</span> <span class=\"keyword\">extends</span> <span class=\"title\">Exception</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"comment\">// 重定义构造器使 message 变为必须被指定的属性</span></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__construct</span><span class=\"params\">($message, $code = <span class=\"number\">0</span>, Exception $previous = null)</span> </span>&#123;</div><div class=\"line\">        <span class=\"comment\">// 自定义的代码</span></div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">// 确保所有变量都被正确赋值</span></div><div class=\"line\">        <span class=\"keyword\">parent</span>::__construct($message, $code, $previous);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">// 自定义字符串输出的样式</span></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__toString</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">__CLASS__</span> . <span class=\"string\">\": [&#123;$this-&gt;code&#125;]: &#123;$this-&gt;message&#125;\\n\"</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">customFunction</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"string\">\"A custom function for this type of exception\\n\"</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"PHP中异常用法\"><a href=\"#PHP中异常用法\" class=\"headerlink\" title=\"PHP中异常用法\"></a>PHP中异常用法</h3><p>&gt;</p>\n<p>首先我们需要知道，<strong><em>在PHP中只有手动抛出异常后才能捕获异常，对于抛出的异常只有进行捕获并作出相应的操作抛出异常才有意义，否则没有任何意义。</em></strong></p>\n<p>抛出异常<br><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;?php</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">check</span><span class=\"params\">($n)</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"keyword\">empty</span>($n))&#123;</div><div class=\"line\">      <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"keyword\">Exception</span>(<span class=\"string\">\"参数错误\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div></pre></td></tr></table></figure></p>\n<h4 id=\"try…catch\"><a href=\"#try…catch\" class=\"headerlink\" title=\"try…catch\"></a>try…catch</h4><p>示例：关于上传操作的异常处理</p>\n<p>方式一：异常发生时立即捕获<br><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;?php</span></div><div class=\"line\">  <span class=\"keyword\">try</span>&#123;</div><div class=\"line\">    <span class=\"comment\">//可能出现错误的代码</span></div><div class=\"line\">    <span class=\"keyword\">if</span>(文件上传不成功)</div><div class=\"line\">      <span class=\"keyword\">throw</span> (上传异常)；</div><div class=\"line\">    <span class=\"keyword\">if</span>(更新数据库不成功)</div><div class=\"line\">      <span class=\"keyword\">throw</span> (数据库异常操作)；</div><div class=\"line\">  &#125; <span class=\"keyword\">catch</span>(异常)&#123;</div><div class=\"line\">    <span class=\"comment\">//必须的补救措施，例如删除文件、删除数据库记录</span></div><div class=\"line\">    ...</div><div class=\"line\">  &#125;</div></pre></td></tr></table></figure></p>\n<p>方式二：分散抛出，集中捕获<br><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;?php</span></div><div class=\"line\">  上传&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span>(文件上传不成功) <span class=\"keyword\">throw</span> (上传异常)；</div><div class=\"line\">    <span class=\"keyword\">if</span>(更新数据库不成功)  <span class=\"keyword\">throw</span> (数据库异常)；</div><div class=\"line\">  &#125;</div><div class=\"line\">  其他&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span>(其他操作失败) <span class=\"keyword\">throw</span> （其他操作异常）；</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"comment\">//其他代码...</span></div><div class=\"line\">  <span class=\"keyword\">try</span>&#123;</div><div class=\"line\">      上传；</div><div class=\"line\">      其他；</div><div class=\"line\">  &#125; <span class=\"keyword\">catch</span>(上传异常)&#123;</div><div class=\"line\">      <span class=\"comment\">//上传异常处理、例如删除文件</span></div><div class=\"line\">  &#125; <span class=\"keyword\">catch</span>(数据库异常)&#123;</div><div class=\"line\">      <span class=\"comment\">//数据库异常处理、比如删除数据库记录等</span></div><div class=\"line\">  &#125; <span class=\"keyword\">catch</span>(其他异常)&#123;</div><div class=\"line\">      <span class=\"comment\">//其他异常处理，比如记录异常日志等</span></div><div class=\"line\">  &#125;</div></pre></td></tr></table></figure></p>\n<p><strong>需要注意，exception作为超类应该放在最后捕获</strong></p>\n<h4 id=\"try…catch…finally\"><a href=\"#try…catch…finally\" class=\"headerlink\" title=\"try…catch…finally\"></a>try…catch…finally</h4><p>示例：<br><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;?php</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">inverse</span><span class=\"params\">($x)</span> </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">if</span> (!$x) &#123;</div><div class=\"line\">          <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"keyword\">Exception</span>(<span class=\"string\">'Division by zero.'</span>);</div><div class=\"line\">      &#125;</div><div class=\"line\">      <span class=\"keyword\">return</span> <span class=\"number\">1</span>/$x;</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"comment\">//</span></div><div class=\"line\">  <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">      <span class=\"keyword\">echo</span> inverse(<span class=\"number\">5</span>) . <span class=\"string\">\"\\n\"</span>;</div><div class=\"line\">  &#125; <span class=\"keyword\">catch</span> (<span class=\"keyword\">Exception</span> $e) &#123;</div><div class=\"line\">      <span class=\"keyword\">echo</span> <span class=\"string\">'Caught exception: '</span>,  $e-&gt;getMessage(), <span class=\"string\">\"\\n\"</span>;</div><div class=\"line\">  &#125; <span class=\"keyword\">finally</span> &#123;</div><div class=\"line\">      <span class=\"keyword\">echo</span> <span class=\"string\">\"First finally.\\n\"</span>;</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"comment\">//</span></div><div class=\"line\">  <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">      <span class=\"keyword\">echo</span> inverse(<span class=\"number\">0</span>) . <span class=\"string\">\"\\n\"</span>;</div><div class=\"line\">  &#125; <span class=\"keyword\">catch</span> (<span class=\"keyword\">Exception</span> $e) &#123;</div><div class=\"line\">      <span class=\"keyword\">echo</span> <span class=\"string\">'Caught exception: '</span>,  $e-&gt;getMessage(), <span class=\"string\">\"\\n\"</span>;</div><div class=\"line\">  &#125; <span class=\"keyword\">finally</span> &#123;</div><div class=\"line\">      <span class=\"keyword\">echo</span> <span class=\"string\">\"Second finally.\\n\"</span>;</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"comment\">//</span></div><div class=\"line\">  <span class=\"comment\">// Continue execution</span></div><div class=\"line\">  <span class=\"keyword\">echo</span> <span class=\"string\">\"Hello World\\n\"</span>;</div><div class=\"line\"><span class=\"meta\">?&gt;</span></div></pre></td></tr></table></figure></p>\n<h3 id=\"PHP异常处理使用场景\"><a href=\"#PHP异常处理使用场景\" class=\"headerlink\" title=\"PHP异常处理使用场景\"></a>PHP异常处理使用场景</h3><h4 id=\"对程序的悲观预测\"><a href=\"#对程序的悲观预测\" class=\"headerlink\" title=\"对程序的悲观预测\"></a>对程序的悲观预测</h4><p>即当一个操作可能会由于一些不可控的因素（比如网络问题等），可能会出现执行不成功的情况。那么在种情况下就可以抛出异常，然后进行捕获，对异常情况进行细致的处理。</p>\n<h4 id=\"程序的需要和对业务的需要\"><a href=\"#程序的需要和对业务的需要\" class=\"headerlink\" title=\"程序的需要和对业务的需要\"></a>程序的需要和对业务的需要</h4><p>需要强调的是，异常是业务处理中必不可少的环节，我们不能对异常视而不见。<br>需要用到异常处理的情况</p>\n<ul>\n<li>不希望业务代码中充斥着大量的打印、调试等处理；</li>\n<li>业务中自定义的异常，对现实生活中各种业务进行补充；</li>\n<li>对数据一致性有要求的业务操作中；</li>\n</ul>\n<p>异常处理机制可以把每一件事当做事务来考虑，还可以把异常处理当做成一种内建的恢复系统。</p>\n<h4 id=\"语言级别的健壮性要求\"><a href=\"#语言级别的健壮性要求\" class=\"headerlink\" title=\"语言级别的健壮性要求\"></a>语言级别的健壮性要求</h4><p>我们都知道PHP在健壮性这一点是不足的。对很多异常是没有强制性限制的。所以很多异常需要我们自己来做。</p>\n<p>通过try…catch处理，我们可以把异常造成的逻辑中断破坏降低到最小的范围，并且经过补救处理后不影响业务逻辑的完整性；乱抛异常和只抛不捕获，或者捕获而不补救，都会导致数据混乱。</p>\n<h2 id=\"错误处理\"><a href=\"#错误处理\" class=\"headerlink\" title=\"错误处理\"></a>错误处理</h2><h3 id=\"PHP中的错误级别\"><a href=\"#PHP中的错误级别\" class=\"headerlink\" title=\"PHP中的错误级别\"></a>PHP中的错误级别</h3><p>PHP的错误有很多类，包括warning、notice、deprecated、fatal error等。</p>\n<p>常用到的错误级别</p>\n<ul>\n<li>deprecated，是最低级别的错误，表示不推荐、不建议。其虽不影响PHP正常的业务流程，但一般情况下建议修正；</li>\n<li>notice，通知级别错误。表示你语法中存在不恰当的地方。常见的是 使用未定义的变量就会报此错误。这种错误也影响PHP正常流程；</li>\n<li>warning，警告级别错误，是比较高级别的错误，表示在语法中出现很不恰当的地方，比如函数参数不匹配。这种级别的错误可能会导致出现不可预期的结果，所以建议修正；</li>\n<li>fetal error，致命错误。直接导致PHP流程终结，后面代码不在执行。</li>\n<li>prase error，语法解析错误。导致PHP代码无法通过语法检查。</li>\n</ul>\n<p>错误信息显示控制<br>方式一：<br>php.ini<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">error_reporting = E_ALL | E_STRICT  #指定显示错误级别</div><div class=\"line\">display_errors = On                 #错误信息显示控制</div></pre></td></tr></table></figure></p>\n<p>方式二：PHP代码中</p>\n<ol>\n<li>error_reporting(0),表示屏蔽所有错误信息。正式部署时采用这样的策略，来防止错误信息泄露敏感信息。</li>\n<li>@mysql_connect(),抑制错误信息输出。</li>\n</ol>\n<h3 id=\"PHP错误处理机制\"><a href=\"#PHP错误处理机制\" class=\"headerlink\" title=\"PHP错误处理机制\"></a>PHP错误处理机制</h3><h4 id=\"trigger-error\"><a href=\"#trigger-error\" class=\"headerlink\" title=\"trigger_error\"></a>trigger_error</h4><p>该方法用于主动抛出一个错误。示例<br><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;?php</span></div><div class=\"line\">  <span class=\"keyword\">if</span>(mt_rand(<span class=\"number\">0</span>,<span class=\"number\">1</span>) == <span class=\"number\">1</span>)&#123;</div><div class=\"line\">    triggererror(<span class=\"string\">\"random no eq 0\"</span>,E_USER_ERROR);</div><div class=\"line\">  &#125;</div></pre></td></tr></table></figure></p>\n<h4 id=\"set-error-handler\"><a href=\"#set-error-handler\" class=\"headerlink\" title=\"set_error_handler\"></a>set_error_handler</h4><p>PHP中提供了set_error_handler（）函数可以用来接管PHP错误处理。</p>\n<p><strong>set_error_handler(error_function, error_type);</strong></p>\n<ul>\n<li>error_function,规定发生错误时运行的函数。（必须）</li>\n<li>error_types,规定在哪个错误级别报告级别会显示用户定义的错误，（可选，默认『E_ALL』）</li>\n</ul>\n<p>示例：<br><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;?php</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">customError</span><span class=\"params\">($errNo, $errStr, $errFile, $errLine)</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">echo</span> <span class=\"string\">\"&lt;b&gt;错误代码：&lt;/b&gt;[$errNo]&#123;$errStr&#125;\\r\\n\"</span>;</div><div class=\"line\">    <span class=\"keyword\">echo</span> <span class=\"string\">\"错误所在的代码行：&#123;$errLine&#125;,文件:&#123;$errFile&#125;\\r\\n\"</span>;</div><div class=\"line\">    <span class=\"keyword\">echo</span> <span class=\"string\">\"PHP 版本 ，\"</span>.PHP_VERSION.<span class=\"string\">\"(\"</span>.PHP_OS.<span class=\"string\">\")\\r\\n\"</span>;</div><div class=\"line\">    <span class=\"keyword\">die</span>();  <span class=\"comment\">//如果有必要，用户自定义的错误处理程序必须终止（die（）；）当前脚本。</span></div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  set_error_handler(<span class=\"string\">\"custonError\"</span>, E_ALL | E_STRICT);</div><div class=\"line\">  $a = <span class=\"keyword\">array</span>(<span class=\"string\">'o'</span> =&gt; <span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">8</span>);</div><div class=\"line\">  <span class=\"keyword\">echo</span> $a[o]</div></pre></td></tr></table></figure></p>\n<p>自定义的错误处理函数一定要有这四个输入变量$errno, $errstr, $errfile, $errline.</p>\n<ul>\n<li>errno,代表错误等级的一组常量。比如 E_WARNING 其二进制掩码为4，表示告警信息。</li>\n</ul>\n<p><strong>注意：</strong> 自定义的错误处理函数并不能托管所有种类的错误，比如E_ERROR, E_PARSE, E_CORE_ERROR, E_CORE_WARNING, E_COMPILE_ERROR, E_COMPILE_WARNING,以及E_STRICT中的部分。</p>\n<p><strong>注意：</strong> 如果使用自定义的 set_error_handler 接管PHP的错误处理，先前代码里的错误抑制 @ 也将会失效，这是这种错误也会被显示。</p>\n<h4 id=\"restore-error-handler\"><a href=\"#restore-error-handler\" class=\"headerlink\" title=\"restore_error_handler\"></a>restore_error_handler</h4><p>该函数可以取消 set_error_handler 的错误接管.</p>\n<h2 id=\"结合PHP错误处理主动抛出异常\"><a href=\"#结合PHP错误处理主动抛出异常\" class=\"headerlink\" title=\"结合PHP错误处理主动抛出异常\"></a>结合PHP错误处理主动抛出异常</h2><p>结合PHP的错误处理机制和异常处理机制，通过组合也可以实现同时捕获异常和非致命错误。<br>示例<br><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;?php</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">customError</span><span class=\"params\">($errNo, $errStr, $errFile, $errLine)</span></span>&#123;</div><div class=\"line\">    <span class=\"comment\">//自定义错误处理时，可以手动抛出异常</span></div><div class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"keyword\">Exception</span>($level.<span class=\"string\">\"|\"</span>.$errStr);</div><div class=\"line\">  &#125;</div><div class=\"line\">  set_error_handler(<span class=\"string\">\"custonError\"</span>, E_ALL | E_STRICT);</div><div class=\"line\">  <span class=\"keyword\">try</span>&#123;</div><div class=\"line\">    $a = <span class=\"number\">5</span>/<span class=\"number\">0</span>;</div><div class=\"line\">  &#125; <span class=\"keyword\">catch</span>(<span class=\"keyword\">Exception</span> $e)&#123;</div><div class=\"line\">      <span class=\"keyword\">echo</span> <span class=\"string\">\"错误信息\"</span>.$e-&gt;getMessage();</div><div class=\"line\">  &#125;</div></pre></td></tr></table></figure></p>\n<p>通过上面示例可以捕获到异常和非致命错误，但对于 fetal error 这样的错误却捕获不到。但是通过其他的一些方法，我们还是可以做一些处理。 register_shutdown_function 该函数会在程序终止或die时触发一个函数，我们可以利用该触发函数做一些最后的收尾操作。</p>\n<p>调用时机</p>\n<ul>\n<li>当页面被用户强制停止时</li>\n<li>当程序代码运行超时时</li>\n<li>当ＰＨＰ代码执行完成时，代码执行存在异常和错误、警告</li>\n</ul>\n<p>void register_shutdown_function ( callable $callback [, mixed $parameter [, mixed $… ]] )</p>\n<p>示例<br><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;?php</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">shutdown</span><span class=\"params\">()</span></span></div><div class=\"line\">  &#123;</div><div class=\"line\">      <span class=\"comment\">// This is our shutdown function, in</span></div><div class=\"line\">      <span class=\"comment\">// here we can do any last operations</span></div><div class=\"line\">      <span class=\"comment\">// before the script is complete.</span></div><div class=\"line\">      <span class=\"keyword\">echo</span> <span class=\"string\">'Script executed with success'</span>, PHP_EOL;</div><div class=\"line\">  &#125;</div><div class=\"line\">  register_shutdown_function(<span class=\"string\">'shutdown'</span>);</div><div class=\"line\"><span class=\"meta\">?&gt;</span></div></pre></td></tr></table></figure></p>\n<p>对于 prase error 级别的错误，PHP层面就没有办法做什么了。我们只能通过开启错误日志，来记录这些错误。</p>\n<p>php.ini设置<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">log_errors = On</div><div class=\"line\">error_log = /usr/log/log.log</div></pre></td></tr></table></figure></p>\n","excerpt":"<p>首先，需要明确以下这两个概念</p>\n<ul>\n<li><p>异常(exception)</p>\n<blockquote>\n<p>PHP中的异常，是程序运行中不符合预期的情况及与正常流程不同的状况。<br>是属于逻辑和业务流程的一种中断，而不是语法错误。</p>\n</blockquote>\n</li>\n<li><p>错误(error)</p>\n<blockquote>\n<p>PHP中的错误则属于自身的问题，是一种非法的语法或者环境问题导致的、让编译器无法通过检查甚至无法运行的情况。</p>\n</blockquote>\n</li>\n</ul>","more":"<h2 id=\"异常处理\"><a href=\"#异常处理\" class=\"headerlink\" title=\"异常处理\"></a>异常处理</h2><p>PHP中玉带任何自身问题都会触发一个错误，而不是抛出异常。所以，如果想使用异常处理来处理不可预知的问题，这是PHP办不到的。但在处理一些可以预知的错误，PHP的异常处理机制还是能够帮我们解决一些问题的。例如：</p>\n<ul>\n<li>代码冗余复杂，到处充斥着if…else</li>\n<li>代码可读性差</li>\n</ul>\n<p>而异常处理，其主要作用是将『正常执行过程的代码』和『处理问题怎么处理的代码』进行分离。</p>\n<h3 id=\"PHP常见的异常类\"><a href=\"#PHP常见的异常类\" class=\"headerlink\" title=\"PHP常见的异常类\"></a>PHP常见的异常类</h3><h4 id=\"Exception\"><a href=\"#Exception\" class=\"headerlink\" title=\"Exception\"></a>Exception</h4><blockquote>\n<p>所有异常的基类。</p>\n</blockquote>\n<p>类摘要<br><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;?php</span></div><div class=\"line\">  <span class=\"keyword\">Exception</span> &#123;</div><div class=\"line\">    <span class=\"comment\">/* 属性 */</span></div><div class=\"line\">    <span class=\"keyword\">protected</span> string $message ;     <span class=\"comment\">//异常消息内容</span></div><div class=\"line\">    <span class=\"keyword\">protected</span> int $code ;           <span class=\"comment\">//异常代码</span></div><div class=\"line\">    <span class=\"keyword\">protected</span> string $file ;        <span class=\"comment\">//抛出异常的文件名</span></div><div class=\"line\">    <span class=\"keyword\">protected</span> int $line ;           <span class=\"comment\">//抛出异常在该文件中的行号</span></div><div class=\"line\">    <span class=\"comment\">/* 方法 */</span></div><div class=\"line\">    <span class=\"keyword\">public</span> __construct ([ string $message = <span class=\"string\">\"\"</span> [, int $code = <span class=\"number\">0</span> [, <span class=\"keyword\">Exception</span> $previous = <span class=\"keyword\">NULL</span> ]]] )           <span class=\"comment\">//异常构造函数</span></div><div class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">public</span> string getMessage ( void )    <span class=\"comment\">//获取异常消息内容</span></div><div class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">public</span> <span class=\"keyword\">Exception</span> getPrevious ( void )<span class=\"comment\">//返回异常链中的前一个异常</span></div><div class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">public</span> int getCode ( void )          <span class=\"comment\">//获取异常代码</span></div><div class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">public</span> string getFile ( void )       <span class=\"comment\">//获取发生异常的程序文件名称</span></div><div class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">public</span> int getLine ( void )          <span class=\"comment\">//获取发生异常的代码在文件中的行号</span></div><div class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">public</span> <span class=\"keyword\">array</span> getTrace ( void )       <span class=\"comment\">//获取异常追踪信息</span></div><div class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">public</span> string getTraceAsString ( void )<span class=\"comment\">//获取字符串类型的异常追踪信息</span></div><div class=\"line\">    <span class=\"keyword\">public</span> string __toString ( void )            <span class=\"comment\">//将异常对象转换为字符串</span></div><div class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">private</span> void __clone ( void )          <span class=\"comment\">//异常克隆</span></div><div class=\"line\">  &#125;</div></pre></td></tr></table></figure></p>\n<h4 id=\"错误异常类\"><a href=\"#错误异常类\" class=\"headerlink\" title=\"错误异常类\"></a>错误异常类</h4><p>类摘要<br><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;?php</span></div><div class=\"line\">  ErrorException extends <span class=\"keyword\">Exception</span> &#123;</div><div class=\"line\">      <span class=\"comment\">/* 属性 */</span></div><div class=\"line\">      <span class=\"keyword\">protected</span> int $severity ;     <span class=\"comment\">//异常级别</span></div><div class=\"line\">      <span class=\"comment\">/* 方法 */</span></div><div class=\"line\">      <span class=\"keyword\">public</span> __construct ([ string $message = <span class=\"string\">\"\"</span> [, int $code = <span class=\"number\">0</span> [, int $severity = <span class=\"number\">1</span> [, string $filename = <span class=\"keyword\">__FILE__</span> [, int $lineno = <span class=\"keyword\">__LINE__</span> [, <span class=\"keyword\">Exception</span> $previous = <span class=\"keyword\">NULL</span> ]]]]]] )   <span class=\"comment\">//异常构造函数</span></div><div class=\"line\">      <span class=\"keyword\">final</span> <span class=\"keyword\">public</span> int getSeverity ( void )             <span class=\"comment\">// 获取异常的严重程度</span></div><div class=\"line\">      <span class=\"comment\">/* 继承的方法 */</span></div><div class=\"line\">      <span class=\"keyword\">final</span> <span class=\"keyword\">public</span> string <span class=\"keyword\">Exception</span>::getMessage ( void )</div><div class=\"line\">      <span class=\"keyword\">final</span> <span class=\"keyword\">public</span> <span class=\"keyword\">Exception</span> <span class=\"keyword\">Exception</span>::getPrevious ( void )</div><div class=\"line\">      <span class=\"keyword\">final</span> <span class=\"keyword\">public</span> int <span class=\"keyword\">Exception</span>::getCode ( void )</div><div class=\"line\">      <span class=\"keyword\">final</span> <span class=\"keyword\">public</span> string <span class=\"keyword\">Exception</span>::getFile ( void )</div><div class=\"line\">      <span class=\"keyword\">final</span> <span class=\"keyword\">public</span> int <span class=\"keyword\">Exception</span>::getLine ( void )</div><div class=\"line\">      <span class=\"keyword\">final</span> <span class=\"keyword\">public</span> <span class=\"keyword\">array</span> <span class=\"keyword\">Exception</span>::getTrace ( void )</div><div class=\"line\">      <span class=\"keyword\">final</span> <span class=\"keyword\">public</span> string <span class=\"keyword\">Exception</span>::getTraceAsString ( void )</div><div class=\"line\">      <span class=\"keyword\">public</span> string <span class=\"keyword\">Exception</span>::__toString ( void )</div><div class=\"line\">      <span class=\"keyword\">final</span> <span class=\"keyword\">private</span> void <span class=\"keyword\">Exception</span>::__clone ( void )</div><div class=\"line\">  &#125;</div></pre></td></tr></table></figure></p>\n<p>常见使用方式（使用set_error_handle()函数讲错误信息托管至ErrorException）<br><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;?php</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">exception_error_handler</span><span class=\"params\">($errno, $errstr, $errfile, $errline )</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> ErrorException($errstr, <span class=\"number\">0</span>, $errno, $errfile, $errline);</div><div class=\"line\">&#125;</div><div class=\"line\">set_error_handler(<span class=\"string\">\"exception_error_handler\"</span>);</div><div class=\"line\"><span class=\"comment\">/* Trigger exception 抛出异常 */</span></div><div class=\"line\">strpos();</div><div class=\"line\"><span class=\"meta\">?&gt;</span></div></pre></td></tr></table></figure></p>\n<h4 id=\"自定义异常类\"><a href=\"#自定义异常类\" class=\"headerlink\" title=\"自定义异常类\"></a>自定义异常类</h4><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;?php</span></div><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\"> * 自定义一个异常处理类</div><div class=\"line\"> */</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyException</span> <span class=\"keyword\">extends</span> <span class=\"title\">Exception</span></div><div class=\"line\"></span>&#123;</div><div class=\"line\">    <span class=\"comment\">// 重定义构造器使 message 变为必须被指定的属性</span></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__construct</span><span class=\"params\">($message, $code = <span class=\"number\">0</span>, Exception $previous = null)</span> </span>&#123;</div><div class=\"line\">        <span class=\"comment\">// 自定义的代码</span></div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">// 确保所有变量都被正确赋值</span></div><div class=\"line\">        <span class=\"keyword\">parent</span>::__construct($message, $code, $previous);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">// 自定义字符串输出的样式</span></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__toString</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">__CLASS__</span> . <span class=\"string\">\": [&#123;$this-&gt;code&#125;]: &#123;$this-&gt;message&#125;\\n\"</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">customFunction</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"string\">\"A custom function for this type of exception\\n\"</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"PHP中异常用法\"><a href=\"#PHP中异常用法\" class=\"headerlink\" title=\"PHP中异常用法\"></a>PHP中异常用法</h3><p>&gt;</p>\n<p>首先我们需要知道，<strong><em>在PHP中只有手动抛出异常后才能捕获异常，对于抛出的异常只有进行捕获并作出相应的操作抛出异常才有意义，否则没有任何意义。</em></strong></p>\n<p>抛出异常<br><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;?php</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">check</span><span class=\"params\">($n)</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"keyword\">empty</span>($n))&#123;</div><div class=\"line\">      <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"keyword\">Exception</span>(<span class=\"string\">\"参数错误\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div></pre></td></tr></table></figure></p>\n<h4 id=\"try…catch\"><a href=\"#try…catch\" class=\"headerlink\" title=\"try…catch\"></a>try…catch</h4><p>示例：关于上传操作的异常处理</p>\n<p>方式一：异常发生时立即捕获<br><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;?php</span></div><div class=\"line\">  <span class=\"keyword\">try</span>&#123;</div><div class=\"line\">    <span class=\"comment\">//可能出现错误的代码</span></div><div class=\"line\">    <span class=\"keyword\">if</span>(文件上传不成功)</div><div class=\"line\">      <span class=\"keyword\">throw</span> (上传异常)；</div><div class=\"line\">    <span class=\"keyword\">if</span>(更新数据库不成功)</div><div class=\"line\">      <span class=\"keyword\">throw</span> (数据库异常操作)；</div><div class=\"line\">  &#125; <span class=\"keyword\">catch</span>(异常)&#123;</div><div class=\"line\">    <span class=\"comment\">//必须的补救措施，例如删除文件、删除数据库记录</span></div><div class=\"line\">    ...</div><div class=\"line\">  &#125;</div></pre></td></tr></table></figure></p>\n<p>方式二：分散抛出，集中捕获<br><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;?php</span></div><div class=\"line\">  上传&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span>(文件上传不成功) <span class=\"keyword\">throw</span> (上传异常)；</div><div class=\"line\">    <span class=\"keyword\">if</span>(更新数据库不成功)  <span class=\"keyword\">throw</span> (数据库异常)；</div><div class=\"line\">  &#125;</div><div class=\"line\">  其他&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span>(其他操作失败) <span class=\"keyword\">throw</span> （其他操作异常）；</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"comment\">//其他代码...</span></div><div class=\"line\">  <span class=\"keyword\">try</span>&#123;</div><div class=\"line\">      上传；</div><div class=\"line\">      其他；</div><div class=\"line\">  &#125; <span class=\"keyword\">catch</span>(上传异常)&#123;</div><div class=\"line\">      <span class=\"comment\">//上传异常处理、例如删除文件</span></div><div class=\"line\">  &#125; <span class=\"keyword\">catch</span>(数据库异常)&#123;</div><div class=\"line\">      <span class=\"comment\">//数据库异常处理、比如删除数据库记录等</span></div><div class=\"line\">  &#125; <span class=\"keyword\">catch</span>(其他异常)&#123;</div><div class=\"line\">      <span class=\"comment\">//其他异常处理，比如记录异常日志等</span></div><div class=\"line\">  &#125;</div></pre></td></tr></table></figure></p>\n<p><strong>需要注意，exception作为超类应该放在最后捕获</strong></p>\n<h4 id=\"try…catch…finally\"><a href=\"#try…catch…finally\" class=\"headerlink\" title=\"try…catch…finally\"></a>try…catch…finally</h4><p>示例：<br><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;?php</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">inverse</span><span class=\"params\">($x)</span> </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">if</span> (!$x) &#123;</div><div class=\"line\">          <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"keyword\">Exception</span>(<span class=\"string\">'Division by zero.'</span>);</div><div class=\"line\">      &#125;</div><div class=\"line\">      <span class=\"keyword\">return</span> <span class=\"number\">1</span>/$x;</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"comment\">//</span></div><div class=\"line\">  <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">      <span class=\"keyword\">echo</span> inverse(<span class=\"number\">5</span>) . <span class=\"string\">\"\\n\"</span>;</div><div class=\"line\">  &#125; <span class=\"keyword\">catch</span> (<span class=\"keyword\">Exception</span> $e) &#123;</div><div class=\"line\">      <span class=\"keyword\">echo</span> <span class=\"string\">'Caught exception: '</span>,  $e-&gt;getMessage(), <span class=\"string\">\"\\n\"</span>;</div><div class=\"line\">  &#125; <span class=\"keyword\">finally</span> &#123;</div><div class=\"line\">      <span class=\"keyword\">echo</span> <span class=\"string\">\"First finally.\\n\"</span>;</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"comment\">//</span></div><div class=\"line\">  <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">      <span class=\"keyword\">echo</span> inverse(<span class=\"number\">0</span>) . <span class=\"string\">\"\\n\"</span>;</div><div class=\"line\">  &#125; <span class=\"keyword\">catch</span> (<span class=\"keyword\">Exception</span> $e) &#123;</div><div class=\"line\">      <span class=\"keyword\">echo</span> <span class=\"string\">'Caught exception: '</span>,  $e-&gt;getMessage(), <span class=\"string\">\"\\n\"</span>;</div><div class=\"line\">  &#125; <span class=\"keyword\">finally</span> &#123;</div><div class=\"line\">      <span class=\"keyword\">echo</span> <span class=\"string\">\"Second finally.\\n\"</span>;</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"comment\">//</span></div><div class=\"line\">  <span class=\"comment\">// Continue execution</span></div><div class=\"line\">  <span class=\"keyword\">echo</span> <span class=\"string\">\"Hello World\\n\"</span>;</div><div class=\"line\"><span class=\"meta\">?&gt;</span></div></pre></td></tr></table></figure></p>\n<h3 id=\"PHP异常处理使用场景\"><a href=\"#PHP异常处理使用场景\" class=\"headerlink\" title=\"PHP异常处理使用场景\"></a>PHP异常处理使用场景</h3><h4 id=\"对程序的悲观预测\"><a href=\"#对程序的悲观预测\" class=\"headerlink\" title=\"对程序的悲观预测\"></a>对程序的悲观预测</h4><p>即当一个操作可能会由于一些不可控的因素（比如网络问题等），可能会出现执行不成功的情况。那么在种情况下就可以抛出异常，然后进行捕获，对异常情况进行细致的处理。</p>\n<h4 id=\"程序的需要和对业务的需要\"><a href=\"#程序的需要和对业务的需要\" class=\"headerlink\" title=\"程序的需要和对业务的需要\"></a>程序的需要和对业务的需要</h4><p>需要强调的是，异常是业务处理中必不可少的环节，我们不能对异常视而不见。<br>需要用到异常处理的情况</p>\n<ul>\n<li>不希望业务代码中充斥着大量的打印、调试等处理；</li>\n<li>业务中自定义的异常，对现实生活中各种业务进行补充；</li>\n<li>对数据一致性有要求的业务操作中；</li>\n</ul>\n<p>异常处理机制可以把每一件事当做事务来考虑，还可以把异常处理当做成一种内建的恢复系统。</p>\n<h4 id=\"语言级别的健壮性要求\"><a href=\"#语言级别的健壮性要求\" class=\"headerlink\" title=\"语言级别的健壮性要求\"></a>语言级别的健壮性要求</h4><p>我们都知道PHP在健壮性这一点是不足的。对很多异常是没有强制性限制的。所以很多异常需要我们自己来做。</p>\n<p>通过try…catch处理，我们可以把异常造成的逻辑中断破坏降低到最小的范围，并且经过补救处理后不影响业务逻辑的完整性；乱抛异常和只抛不捕获，或者捕获而不补救，都会导致数据混乱。</p>\n<h2 id=\"错误处理\"><a href=\"#错误处理\" class=\"headerlink\" title=\"错误处理\"></a>错误处理</h2><h3 id=\"PHP中的错误级别\"><a href=\"#PHP中的错误级别\" class=\"headerlink\" title=\"PHP中的错误级别\"></a>PHP中的错误级别</h3><p>PHP的错误有很多类，包括warning、notice、deprecated、fatal error等。</p>\n<p>常用到的错误级别</p>\n<ul>\n<li>deprecated，是最低级别的错误，表示不推荐、不建议。其虽不影响PHP正常的业务流程，但一般情况下建议修正；</li>\n<li>notice，通知级别错误。表示你语法中存在不恰当的地方。常见的是 使用未定义的变量就会报此错误。这种错误也影响PHP正常流程；</li>\n<li>warning，警告级别错误，是比较高级别的错误，表示在语法中出现很不恰当的地方，比如函数参数不匹配。这种级别的错误可能会导致出现不可预期的结果，所以建议修正；</li>\n<li>fetal error，致命错误。直接导致PHP流程终结，后面代码不在执行。</li>\n<li>prase error，语法解析错误。导致PHP代码无法通过语法检查。</li>\n</ul>\n<p>错误信息显示控制<br>方式一：<br>php.ini<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">error_reporting = E_ALL | E_STRICT  #指定显示错误级别</div><div class=\"line\">display_errors = On                 #错误信息显示控制</div></pre></td></tr></table></figure></p>\n<p>方式二：PHP代码中</p>\n<ol>\n<li>error_reporting(0),表示屏蔽所有错误信息。正式部署时采用这样的策略，来防止错误信息泄露敏感信息。</li>\n<li>@mysql_connect(),抑制错误信息输出。</li>\n</ol>\n<h3 id=\"PHP错误处理机制\"><a href=\"#PHP错误处理机制\" class=\"headerlink\" title=\"PHP错误处理机制\"></a>PHP错误处理机制</h3><h4 id=\"trigger-error\"><a href=\"#trigger-error\" class=\"headerlink\" title=\"trigger_error\"></a>trigger_error</h4><p>该方法用于主动抛出一个错误。示例<br><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;?php</span></div><div class=\"line\">  <span class=\"keyword\">if</span>(mt_rand(<span class=\"number\">0</span>,<span class=\"number\">1</span>) == <span class=\"number\">1</span>)&#123;</div><div class=\"line\">    triggererror(<span class=\"string\">\"random no eq 0\"</span>,E_USER_ERROR);</div><div class=\"line\">  &#125;</div></pre></td></tr></table></figure></p>\n<h4 id=\"set-error-handler\"><a href=\"#set-error-handler\" class=\"headerlink\" title=\"set_error_handler\"></a>set_error_handler</h4><p>PHP中提供了set_error_handler（）函数可以用来接管PHP错误处理。</p>\n<p><strong>set_error_handler(error_function, error_type);</strong></p>\n<ul>\n<li>error_function,规定发生错误时运行的函数。（必须）</li>\n<li>error_types,规定在哪个错误级别报告级别会显示用户定义的错误，（可选，默认『E_ALL』）</li>\n</ul>\n<p>示例：<br><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;?php</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">customError</span><span class=\"params\">($errNo, $errStr, $errFile, $errLine)</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">echo</span> <span class=\"string\">\"&lt;b&gt;错误代码：&lt;/b&gt;[$errNo]&#123;$errStr&#125;\\r\\n\"</span>;</div><div class=\"line\">    <span class=\"keyword\">echo</span> <span class=\"string\">\"错误所在的代码行：&#123;$errLine&#125;,文件:&#123;$errFile&#125;\\r\\n\"</span>;</div><div class=\"line\">    <span class=\"keyword\">echo</span> <span class=\"string\">\"PHP 版本 ，\"</span>.PHP_VERSION.<span class=\"string\">\"(\"</span>.PHP_OS.<span class=\"string\">\")\\r\\n\"</span>;</div><div class=\"line\">    <span class=\"keyword\">die</span>();  <span class=\"comment\">//如果有必要，用户自定义的错误处理程序必须终止（die（）；）当前脚本。</span></div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  set_error_handler(<span class=\"string\">\"custonError\"</span>, E_ALL | E_STRICT);</div><div class=\"line\">  $a = <span class=\"keyword\">array</span>(<span class=\"string\">'o'</span> =&gt; <span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">8</span>);</div><div class=\"line\">  <span class=\"keyword\">echo</span> $a[o]</div></pre></td></tr></table></figure></p>\n<p>自定义的错误处理函数一定要有这四个输入变量$errno, $errstr, $errfile, $errline.</p>\n<ul>\n<li>errno,代表错误等级的一组常量。比如 E_WARNING 其二进制掩码为4，表示告警信息。</li>\n</ul>\n<p><strong>注意：</strong> 自定义的错误处理函数并不能托管所有种类的错误，比如E_ERROR, E_PARSE, E_CORE_ERROR, E_CORE_WARNING, E_COMPILE_ERROR, E_COMPILE_WARNING,以及E_STRICT中的部分。</p>\n<p><strong>注意：</strong> 如果使用自定义的 set_error_handler 接管PHP的错误处理，先前代码里的错误抑制 @ 也将会失效，这是这种错误也会被显示。</p>\n<h4 id=\"restore-error-handler\"><a href=\"#restore-error-handler\" class=\"headerlink\" title=\"restore_error_handler\"></a>restore_error_handler</h4><p>该函数可以取消 set_error_handler 的错误接管.</p>\n<h2 id=\"结合PHP错误处理主动抛出异常\"><a href=\"#结合PHP错误处理主动抛出异常\" class=\"headerlink\" title=\"结合PHP错误处理主动抛出异常\"></a>结合PHP错误处理主动抛出异常</h2><p>结合PHP的错误处理机制和异常处理机制，通过组合也可以实现同时捕获异常和非致命错误。<br>示例<br><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;?php</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">customError</span><span class=\"params\">($errNo, $errStr, $errFile, $errLine)</span></span>&#123;</div><div class=\"line\">    <span class=\"comment\">//自定义错误处理时，可以手动抛出异常</span></div><div class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"keyword\">Exception</span>($level.<span class=\"string\">\"|\"</span>.$errStr);</div><div class=\"line\">  &#125;</div><div class=\"line\">  set_error_handler(<span class=\"string\">\"custonError\"</span>, E_ALL | E_STRICT);</div><div class=\"line\">  <span class=\"keyword\">try</span>&#123;</div><div class=\"line\">    $a = <span class=\"number\">5</span>/<span class=\"number\">0</span>;</div><div class=\"line\">  &#125; <span class=\"keyword\">catch</span>(<span class=\"keyword\">Exception</span> $e)&#123;</div><div class=\"line\">      <span class=\"keyword\">echo</span> <span class=\"string\">\"错误信息\"</span>.$e-&gt;getMessage();</div><div class=\"line\">  &#125;</div></pre></td></tr></table></figure></p>\n<p>通过上面示例可以捕获到异常和非致命错误，但对于 fetal error 这样的错误却捕获不到。但是通过其他的一些方法，我们还是可以做一些处理。 register_shutdown_function 该函数会在程序终止或die时触发一个函数，我们可以利用该触发函数做一些最后的收尾操作。</p>\n<p>调用时机</p>\n<ul>\n<li>当页面被用户强制停止时</li>\n<li>当程序代码运行超时时</li>\n<li>当ＰＨＰ代码执行完成时，代码执行存在异常和错误、警告</li>\n</ul>\n<p>void register_shutdown_function ( callable $callback [, mixed $parameter [, mixed $… ]] )</p>\n<p>示例<br><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;?php</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">shutdown</span><span class=\"params\">()</span></div><div class=\"line\">  </span>&#123;</div><div class=\"line\">      <span class=\"comment\">// This is our shutdown function, in</span></div><div class=\"line\">      <span class=\"comment\">// here we can do any last operations</span></div><div class=\"line\">      <span class=\"comment\">// before the script is complete.</span></div><div class=\"line\">      <span class=\"keyword\">echo</span> <span class=\"string\">'Script executed with success'</span>, PHP_EOL;</div><div class=\"line\">  &#125;</div><div class=\"line\">  register_shutdown_function(<span class=\"string\">'shutdown'</span>);</div><div class=\"line\"><span class=\"meta\">?&gt;</span></div></pre></td></tr></table></figure></p>\n<p>对于 prase error 级别的错误，PHP层面就没有办法做什么了。我们只能通过开启错误日志，来记录这些错误。</p>\n<p>php.ini设置<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">log_errors = On</div><div class=\"line\">error_log = /usr/log/log.log</div></pre></td></tr></table></figure></p>"},{"title":"PHP扩展模块安装","date":"2016-09-26T13:30:00.000Z","ctime":"2016-09-26T13:48:00.000Z","utime":"2016-09-26T13:48:00.000Z","modif_times":1,"_content":"\nPHP编译安装之后，通常我们还需要根据我们的业务需求去安装各种扩展。通常我们可以通过php提供的phpize这个工具来为PHP动态地添加我们需要的模块。\n\n<!-- more -->\n\n## 工具介绍\n- phpize，是用来扩展php扩展模块的，通过phpize可以建立php的外挂模块。一般在我们安装PHP时已经一起安装了。位置一般在/path/to/php/bin/phpize。\n\n- autoconf，是用来生成自动配置软件源代码脚本（configure）的 工具.configure脚本能独立于autoconf运行,且在 运行的 过程中,不需要用户的干预.\n\n- m4，是 一个宏处理器.将输入拷贝到输出,同时将宏展开.宏可以是 内嵌的 ,也可以是 用户定义的 .除了可以展开宏,m4还有一些内建的 函数,用来引用文件,执行命令,整数运算,文本操作,循环等.m4既可以作为编译器的 前端,也可以单独作为一个宏处理器.\n\n## 示例（为PHP添加mysqli扩展）\n进入PHP源码包的ext/mysqli扩展目录\n```\ncd  ext/mysqli\n./configure --with-php-config=/usr/local/php56/bin/php-config --with-mysqli=/usr/local/mysql/bin/mysql_config\nmake && make install\n#\n#Installing shared extensions:     /usr/local/php56/lib/php/extensions/no-debug-non-zts-20131226/\n#Installing header files:           /usr/local/php56/include/php/\n```\n\n查看模块是否编译成功\n```\ncd /usr/local/php56/lib/php/extensions/no-debug-non-zts-20131226/\nll\n#-rwxr-xr-x 1 root root  756714 Sep 26 17:32 mysqli.so\n#-rwxr-xr-x 1 root root 1333912 Sep 24 23:31 opcache.a\n#-rwxr-xr-x 1 root root  618435 Sep 24 23:31 opcache.so\n```\n\n将模块加载到php\n```\nvi /usr/local/php56/lib/php.ini\n#将下面这行写入到php.ini中\nextension=/usr/local/php56/lib/php/extensions/no-debug-non-zts-20131226/mysqli.so\n```\n重启php-fpm\n```\nkill -USR2 `cat /usr/local/php56/var/run/php-fpm.pid`\n```\n\n查看是否加载成功\n```\nphp -m\n```\n或浏览器访问index.php (包含phpinfo()函数)\n","source":"_posts/PHP扩展模块安装.md","raw":"---\ntitle: PHP扩展模块安装\ndate: 2016-09-26 21:30:00\nctime: 2016-09-26 21:48:00\nutime: 2016-09-26 21:48:00\nmodif_times: 1\ntags:\n- PHP扩展\n- phpize\ncategories:\n- PHP\n---\n\nPHP编译安装之后，通常我们还需要根据我们的业务需求去安装各种扩展。通常我们可以通过php提供的phpize这个工具来为PHP动态地添加我们需要的模块。\n\n<!-- more -->\n\n## 工具介绍\n- phpize，是用来扩展php扩展模块的，通过phpize可以建立php的外挂模块。一般在我们安装PHP时已经一起安装了。位置一般在/path/to/php/bin/phpize。\n\n- autoconf，是用来生成自动配置软件源代码脚本（configure）的 工具.configure脚本能独立于autoconf运行,且在 运行的 过程中,不需要用户的干预.\n\n- m4，是 一个宏处理器.将输入拷贝到输出,同时将宏展开.宏可以是 内嵌的 ,也可以是 用户定义的 .除了可以展开宏,m4还有一些内建的 函数,用来引用文件,执行命令,整数运算,文本操作,循环等.m4既可以作为编译器的 前端,也可以单独作为一个宏处理器.\n\n## 示例（为PHP添加mysqli扩展）\n进入PHP源码包的ext/mysqli扩展目录\n```\ncd  ext/mysqli\n./configure --with-php-config=/usr/local/php56/bin/php-config --with-mysqli=/usr/local/mysql/bin/mysql_config\nmake && make install\n#\n#Installing shared extensions:     /usr/local/php56/lib/php/extensions/no-debug-non-zts-20131226/\n#Installing header files:           /usr/local/php56/include/php/\n```\n\n查看模块是否编译成功\n```\ncd /usr/local/php56/lib/php/extensions/no-debug-non-zts-20131226/\nll\n#-rwxr-xr-x 1 root root  756714 Sep 26 17:32 mysqli.so\n#-rwxr-xr-x 1 root root 1333912 Sep 24 23:31 opcache.a\n#-rwxr-xr-x 1 root root  618435 Sep 24 23:31 opcache.so\n```\n\n将模块加载到php\n```\nvi /usr/local/php56/lib/php.ini\n#将下面这行写入到php.ini中\nextension=/usr/local/php56/lib/php/extensions/no-debug-non-zts-20131226/mysqli.so\n```\n重启php-fpm\n```\nkill -USR2 `cat /usr/local/php56/var/run/php-fpm.pid`\n```\n\n查看是否加载成功\n```\nphp -m\n```\n或浏览器访问index.php (包含phpinfo()函数)\n","slug":"PHP扩展模块安装","published":1,"updated":"2016-09-26T13:14:08.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"city8vno7001yg29fm9nt8hzc","content":"<p>PHP编译安装之后，通常我们还需要根据我们的业务需求去安装各种扩展。通常我们可以通过php提供的phpize这个工具来为PHP动态地添加我们需要的模块。</p>\n<a id=\"more\"></a>\n<h2 id=\"工具介绍\"><a href=\"#工具介绍\" class=\"headerlink\" title=\"工具介绍\"></a>工具介绍</h2><ul>\n<li><p>phpize，是用来扩展php扩展模块的，通过phpize可以建立php的外挂模块。一般在我们安装PHP时已经一起安装了。位置一般在/path/to/php/bin/phpize。</p>\n</li>\n<li><p>autoconf，是用来生成自动配置软件源代码脚本（configure）的 工具.configure脚本能独立于autoconf运行,且在 运行的 过程中,不需要用户的干预.</p>\n</li>\n<li><p>m4，是 一个宏处理器.将输入拷贝到输出,同时将宏展开.宏可以是 内嵌的 ,也可以是 用户定义的 .除了可以展开宏,m4还有一些内建的 函数,用来引用文件,执行命令,整数运算,文本操作,循环等.m4既可以作为编译器的 前端,也可以单独作为一个宏处理器.</p>\n</li>\n</ul>\n<h2 id=\"示例（为PHP添加mysqli扩展）\"><a href=\"#示例（为PHP添加mysqli扩展）\" class=\"headerlink\" title=\"示例（为PHP添加mysqli扩展）\"></a>示例（为PHP添加mysqli扩展）</h2><p>进入PHP源码包的ext/mysqli扩展目录<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">cd  ext/mysqli</div><div class=\"line\">./configure --with-php-config=/usr/local/php56/bin/php-config --with-mysqli=/usr/local/mysql/bin/mysql_config</div><div class=\"line\">make &amp;&amp; make install</div><div class=\"line\">#</div><div class=\"line\">#Installing shared extensions:     /usr/local/php56/lib/php/extensions/no-debug-non-zts-20131226/</div><div class=\"line\">#Installing header files:           /usr/local/php56/include/php/</div></pre></td></tr></table></figure></p>\n<p>查看模块是否编译成功<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">cd /usr/local/php56/lib/php/extensions/no-debug-non-zts-20131226/</div><div class=\"line\">ll</div><div class=\"line\">#-rwxr-xr-x 1 root root  756714 Sep 26 17:32 mysqli.so</div><div class=\"line\">#-rwxr-xr-x 1 root root 1333912 Sep 24 23:31 opcache.a</div><div class=\"line\">#-rwxr-xr-x 1 root root  618435 Sep 24 23:31 opcache.so</div></pre></td></tr></table></figure></p>\n<p>将模块加载到php<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">vi /usr/local/php56/lib/php.ini</div><div class=\"line\">#将下面这行写入到php.ini中</div><div class=\"line\">extension=/usr/local/php56/lib/php/extensions/no-debug-non-zts-20131226/mysqli.so</div></pre></td></tr></table></figure></p>\n<p>重启php-fpm<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">kill -USR2 `cat /usr/local/php56/var/run/php-fpm.pid`</div></pre></td></tr></table></figure></p>\n<p>查看是否加载成功<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">php -m</div></pre></td></tr></table></figure></p>\n<p>或浏览器访问index.php (包含phpinfo()函数)</p>\n","excerpt":"<p>PHP编译安装之后，通常我们还需要根据我们的业务需求去安装各种扩展。通常我们可以通过php提供的phpize这个工具来为PHP动态地添加我们需要的模块。</p>","more":"<h2 id=\"工具介绍\"><a href=\"#工具介绍\" class=\"headerlink\" title=\"工具介绍\"></a>工具介绍</h2><ul>\n<li><p>phpize，是用来扩展php扩展模块的，通过phpize可以建立php的外挂模块。一般在我们安装PHP时已经一起安装了。位置一般在/path/to/php/bin/phpize。</p>\n</li>\n<li><p>autoconf，是用来生成自动配置软件源代码脚本（configure）的 工具.configure脚本能独立于autoconf运行,且在 运行的 过程中,不需要用户的干预.</p>\n</li>\n<li><p>m4，是 一个宏处理器.将输入拷贝到输出,同时将宏展开.宏可以是 内嵌的 ,也可以是 用户定义的 .除了可以展开宏,m4还有一些内建的 函数,用来引用文件,执行命令,整数运算,文本操作,循环等.m4既可以作为编译器的 前端,也可以单独作为一个宏处理器.</p>\n</li>\n</ul>\n<h2 id=\"示例（为PHP添加mysqli扩展）\"><a href=\"#示例（为PHP添加mysqli扩展）\" class=\"headerlink\" title=\"示例（为PHP添加mysqli扩展）\"></a>示例（为PHP添加mysqli扩展）</h2><p>进入PHP源码包的ext/mysqli扩展目录<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">cd  ext/mysqli</div><div class=\"line\">./configure --with-php-config=/usr/local/php56/bin/php-config --with-mysqli=/usr/local/mysql/bin/mysql_config</div><div class=\"line\">make &amp;&amp; make install</div><div class=\"line\">#</div><div class=\"line\">#Installing shared extensions:     /usr/local/php56/lib/php/extensions/no-debug-non-zts-20131226/</div><div class=\"line\">#Installing header files:           /usr/local/php56/include/php/</div></pre></td></tr></table></figure></p>\n<p>查看模块是否编译成功<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">cd /usr/local/php56/lib/php/extensions/no-debug-non-zts-20131226/</div><div class=\"line\">ll</div><div class=\"line\">#-rwxr-xr-x 1 root root  756714 Sep 26 17:32 mysqli.so</div><div class=\"line\">#-rwxr-xr-x 1 root root 1333912 Sep 24 23:31 opcache.a</div><div class=\"line\">#-rwxr-xr-x 1 root root  618435 Sep 24 23:31 opcache.so</div></pre></td></tr></table></figure></p>\n<p>将模块加载到php<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">vi /usr/local/php56/lib/php.ini</div><div class=\"line\">#将下面这行写入到php.ini中</div><div class=\"line\">extension=/usr/local/php56/lib/php/extensions/no-debug-non-zts-20131226/mysqli.so</div></pre></td></tr></table></figure></p>\n<p>重启php-fpm<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">kill -USR2 `cat /usr/local/php56/var/run/php-fpm.pid`</div></pre></td></tr></table></figure></p>\n<p>查看是否加载成功<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">php -m</div></pre></td></tr></table></figure></p>\n<p>或浏览器访问index.php (包含phpinfo()函数)</p>"},{"title":"Schema数据类型优化","date":"2016-09-19T10:30:00.000Z","_content":"\n良好的数据路逻辑设计和物理设计是高性能的基石，所以要打造一个高性能的数据库服务，在Schema设计之初就应该需要权衡各种因素。\n\n## 选择最优化的数据类型\n数据库支持的数据类型非常多，选择一个正确的数据类型对于获得高性能至关重要。\n\n选择合适数据类型的几个原则：\n1. 更小的通常更好\n一般情况下，应该尽量使用可以正确数据类型的最小数据类型。但也要确保没有低估需要存储的范围。\n\n2. 简单就好\n简单的数据类型的操作通常需要更少的CPU周期。例如，\n- 整型比字符串操作代价更低\n- 使用MySQL内建的数据类型（比如，date、time、datetime），比用字符串更快\n- 使用整型存储一个IP地址，比用一个字符串更好\n\n3. 尽量避免使用NULL\n因为如果在查询中包含有NULL的列，对MySQL来说更难优化。所以通常情况下，最好指定列为 NOT NULL。\n\n**TIPS：**\ndatetime和timstamp列都可以存储相同类型的数据（时间和日期，都可以精确到秒），然而timestamp实际只使用datetime一般的存储空间。但另一方面，timestamp允许的时间范围要小的多。\n\n<!-- more -->\n\n## 基本的数据类型\n1. 数字\n  1. 整数\n    - TINYINT (8)\n    - SMALLINT (16)\n    - MEDIUMINT (24)\n    - INT (32)\n    - BIGINT (64)\n\n    > **TIPS1:** 整数类型有可选的 unsigned 属性，表示不允许有负值，如果将要使用的列不会出现负值的话，加上这个属性，将会可以使正数的上限增加一倍。\n\n    > **TIPS2:** int(1)与int(11)，对于存储和计算来说，这两者本质是没有区别的；两者只是在MySQL的一些交互工具中略有差别（比如，MySQL命令行客户端，用来控制显示字符的个数）。\n\n  2. 实数\n    - 作用\n    > 存储小数\n    > \n    > 存储比BIGINT更大的数\n\n    - float\n    - double\n    > float 和 double支持使用标准的浮点运算进行近似的计算。\n\n    - decimal\n    > decimal 类型用于存储精确的小数，支持精确的计算。\n    >\n    > 由于CPU不支持对decimal的直接计算，所以对decimal的精确计算是由MySQL服务器自己来实现。\n    >\n    > **Tips:** 因为在进行精确计算时需要额外的空间和计算开销，所以尽量只对小数才使用decimal。比如，财务数据。另外如果数据量大的话，可以考虑使用bigint代替decimal，只需将存储的货币单位根据小数的位数乘以相应的倍数即可。\n2. 字符串\n  1. CHAR\n  > char 类型是定长的：MySQL是根据定义的字符串长度分配足够的空间。\n  > char，适合存储很短的字符串，或者所有值的长度都差不多的的字符串。例如，密码的md5值。\n  > 另外，char还适合存储经常进行变更的值，相比于vachar，char类型很少会产生碎片。所以这一类的列，会比varchar更好。\n\n  2. VARCHAR\n  > varchar 类型用于存储可变长的字符串。它只使用必要的空间，所以比定长类型更节省空间。\n  >\n  > varchar,需要使用一个或者两个额外的字节来存储当前字符串的长度信息；如果列的长度小于或等于255个字节，则只需要一个字节表示，否则就需要两个字节来表示。\n  >\n  > 下面的这些情况适合使用varchar\n  > 1. 字符串列的长度比平均长度大很多\n  > 2. 列的更新很少，所以碎片不是问题\n  > 3. 使用了像UTF-8这样复杂的字符集，因为该字符集中每个字符可能使用不同的字节来进行存储\n\n    **Tips:**\n    用varchar(5)和varchar(200)来存储 「hello」有什么区别？\n\n    首先两者在存储空间的开销是一样的。\n    但是，一般的列在查询时会消耗更多的内存，因为在读到这些列时MySQL通常会分配固定大小的内存块来保存内部值。\n    尤其在使用内存临时表进行排序或者其他操作时，会特别的糟糕。\n    所以最好的策略就是，**分配真正需要的空间**。\n\n    **Tips：**\n    字符串长度定义不是字节数，而是字符数。两者概念是不同的，多字节字符集会需要更多的空间存储单个字符。\n3. BLOB和TEXT\n> 两者都是为存储很大的数据而设计的字符串数据类型，不同的是两者分别采用二进制和字符方式存储。\n>\n>MySQL在处理两个类型的值时，处理基本相同，仅有的不同是BLOB类型是以二进制格式来存储的，所以没有排序规则和字符集，而text类型有排序规则和字符集。\n\n4. 枚举（ENUM）\n> 枚举可以把一些不重复的字符串存储成一个预定义的集合。\n> MySQL会在存储枚举类型时粉肠紧凑，会根据列的值的数量压缩到一个或者两个字节中。\n> MySQL会在内部将每个值在列表中的位置保存成整数，而这些『数字--字符串』的对应关系，会保存在 .frm 文件中。\n> 所以当该列需要新添加一个新的枚举值时，必须添加在之前枚举列表的最后面，否则就会出现数据错乱的问题。切记。\n\n5. 日期和时间类型\n  - DATETIME\n  > 该类型能保存大范围的值，从1001年到9999年，精度为秒。他会把时间封装到YYYYMMDDHHIISS的整数中，没有时区概念。使用8个字节的存储空间。\n\n  - TIMESTAMP\n  > 该类型保存了从1970-01-01 00：00：00（格林威治时间）以来的秒数。该类型使用4个字节的存储空间，所以只能表示1970到2023年，其值还具有时区的概念。\n\n6. 位数据类型\n> 存储更紧凑。但所有这些位类型，不管底层存储格式和存储方式，从技术上来说都是字符串类型。虽然用它存储数据更紧凑，但是对于大部分应用来说，最好避免使用该类型。\n\n  - BIT\n\n  - SET\n\n7. 特殊类型的数据\n> 某些数据的类型并不直接和内置的类型一致。所以需要一定的转换进行存储。\n\n  - 低于秒级的时间戳\n  > 低于秒级的时间需要在引用层做处理，一般可以通过存储两个或者多个列来存储（一个存储秒级的时间戳，另外的存储秒级以下的）\n\n  - ipv4地址\n  > 我们常见到有人会用 varchar(15)来存错一个IP地址，IP地址实际是一个32位的无符号整数，所以应该用无符号整数来存储IP地址。MySQL提供了 INET_ATON()和 INET_NTOA() 函数在这两表示方法之间转换。\n\nlove over~\n2016-09-19\n\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"http://music.163.com/outchain/player?type=2&id=28947001&auto=1&height=66\"></iframe>\n","source":"_posts/Schema数据类型优化.md","raw":"---\ntitle: Schema数据类型优化\ndate: 2016-09-19 18:30:00\ntags:\n- 数据类型\ncategories:\n- MySQL\n---\n\n良好的数据路逻辑设计和物理设计是高性能的基石，所以要打造一个高性能的数据库服务，在Schema设计之初就应该需要权衡各种因素。\n\n## 选择最优化的数据类型\n数据库支持的数据类型非常多，选择一个正确的数据类型对于获得高性能至关重要。\n\n选择合适数据类型的几个原则：\n1. 更小的通常更好\n一般情况下，应该尽量使用可以正确数据类型的最小数据类型。但也要确保没有低估需要存储的范围。\n\n2. 简单就好\n简单的数据类型的操作通常需要更少的CPU周期。例如，\n- 整型比字符串操作代价更低\n- 使用MySQL内建的数据类型（比如，date、time、datetime），比用字符串更快\n- 使用整型存储一个IP地址，比用一个字符串更好\n\n3. 尽量避免使用NULL\n因为如果在查询中包含有NULL的列，对MySQL来说更难优化。所以通常情况下，最好指定列为 NOT NULL。\n\n**TIPS：**\ndatetime和timstamp列都可以存储相同类型的数据（时间和日期，都可以精确到秒），然而timestamp实际只使用datetime一般的存储空间。但另一方面，timestamp允许的时间范围要小的多。\n\n<!-- more -->\n\n## 基本的数据类型\n1. 数字\n  1. 整数\n    - TINYINT (8)\n    - SMALLINT (16)\n    - MEDIUMINT (24)\n    - INT (32)\n    - BIGINT (64)\n\n    > **TIPS1:** 整数类型有可选的 unsigned 属性，表示不允许有负值，如果将要使用的列不会出现负值的话，加上这个属性，将会可以使正数的上限增加一倍。\n\n    > **TIPS2:** int(1)与int(11)，对于存储和计算来说，这两者本质是没有区别的；两者只是在MySQL的一些交互工具中略有差别（比如，MySQL命令行客户端，用来控制显示字符的个数）。\n\n  2. 实数\n    - 作用\n    > 存储小数\n    > \n    > 存储比BIGINT更大的数\n\n    - float\n    - double\n    > float 和 double支持使用标准的浮点运算进行近似的计算。\n\n    - decimal\n    > decimal 类型用于存储精确的小数，支持精确的计算。\n    >\n    > 由于CPU不支持对decimal的直接计算，所以对decimal的精确计算是由MySQL服务器自己来实现。\n    >\n    > **Tips:** 因为在进行精确计算时需要额外的空间和计算开销，所以尽量只对小数才使用decimal。比如，财务数据。另外如果数据量大的话，可以考虑使用bigint代替decimal，只需将存储的货币单位根据小数的位数乘以相应的倍数即可。\n2. 字符串\n  1. CHAR\n  > char 类型是定长的：MySQL是根据定义的字符串长度分配足够的空间。\n  > char，适合存储很短的字符串，或者所有值的长度都差不多的的字符串。例如，密码的md5值。\n  > 另外，char还适合存储经常进行变更的值，相比于vachar，char类型很少会产生碎片。所以这一类的列，会比varchar更好。\n\n  2. VARCHAR\n  > varchar 类型用于存储可变长的字符串。它只使用必要的空间，所以比定长类型更节省空间。\n  >\n  > varchar,需要使用一个或者两个额外的字节来存储当前字符串的长度信息；如果列的长度小于或等于255个字节，则只需要一个字节表示，否则就需要两个字节来表示。\n  >\n  > 下面的这些情况适合使用varchar\n  > 1. 字符串列的长度比平均长度大很多\n  > 2. 列的更新很少，所以碎片不是问题\n  > 3. 使用了像UTF-8这样复杂的字符集，因为该字符集中每个字符可能使用不同的字节来进行存储\n\n    **Tips:**\n    用varchar(5)和varchar(200)来存储 「hello」有什么区别？\n\n    首先两者在存储空间的开销是一样的。\n    但是，一般的列在查询时会消耗更多的内存，因为在读到这些列时MySQL通常会分配固定大小的内存块来保存内部值。\n    尤其在使用内存临时表进行排序或者其他操作时，会特别的糟糕。\n    所以最好的策略就是，**分配真正需要的空间**。\n\n    **Tips：**\n    字符串长度定义不是字节数，而是字符数。两者概念是不同的，多字节字符集会需要更多的空间存储单个字符。\n3. BLOB和TEXT\n> 两者都是为存储很大的数据而设计的字符串数据类型，不同的是两者分别采用二进制和字符方式存储。\n>\n>MySQL在处理两个类型的值时，处理基本相同，仅有的不同是BLOB类型是以二进制格式来存储的，所以没有排序规则和字符集，而text类型有排序规则和字符集。\n\n4. 枚举（ENUM）\n> 枚举可以把一些不重复的字符串存储成一个预定义的集合。\n> MySQL会在存储枚举类型时粉肠紧凑，会根据列的值的数量压缩到一个或者两个字节中。\n> MySQL会在内部将每个值在列表中的位置保存成整数，而这些『数字--字符串』的对应关系，会保存在 .frm 文件中。\n> 所以当该列需要新添加一个新的枚举值时，必须添加在之前枚举列表的最后面，否则就会出现数据错乱的问题。切记。\n\n5. 日期和时间类型\n  - DATETIME\n  > 该类型能保存大范围的值，从1001年到9999年，精度为秒。他会把时间封装到YYYYMMDDHHIISS的整数中，没有时区概念。使用8个字节的存储空间。\n\n  - TIMESTAMP\n  > 该类型保存了从1970-01-01 00：00：00（格林威治时间）以来的秒数。该类型使用4个字节的存储空间，所以只能表示1970到2023年，其值还具有时区的概念。\n\n6. 位数据类型\n> 存储更紧凑。但所有这些位类型，不管底层存储格式和存储方式，从技术上来说都是字符串类型。虽然用它存储数据更紧凑，但是对于大部分应用来说，最好避免使用该类型。\n\n  - BIT\n\n  - SET\n\n7. 特殊类型的数据\n> 某些数据的类型并不直接和内置的类型一致。所以需要一定的转换进行存储。\n\n  - 低于秒级的时间戳\n  > 低于秒级的时间需要在引用层做处理，一般可以通过存储两个或者多个列来存储（一个存储秒级的时间戳，另外的存储秒级以下的）\n\n  - ipv4地址\n  > 我们常见到有人会用 varchar(15)来存错一个IP地址，IP地址实际是一个32位的无符号整数，所以应该用无符号整数来存储IP地址。MySQL提供了 INET_ATON()和 INET_NTOA() 函数在这两表示方法之间转换。\n\nlove over~\n2016-09-19\n\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"http://music.163.com/outchain/player?type=2&id=28947001&auto=1&height=66\"></iframe>\n","slug":"Schema数据类型优化","published":1,"updated":"2016-09-20T14:35:05.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"city8vno90022g29fi3j9m5bz","content":"<p>良好的数据路逻辑设计和物理设计是高性能的基石，所以要打造一个高性能的数据库服务，在Schema设计之初就应该需要权衡各种因素。</p>\n<h2 id=\"选择最优化的数据类型\"><a href=\"#选择最优化的数据类型\" class=\"headerlink\" title=\"选择最优化的数据类型\"></a>选择最优化的数据类型</h2><p>数据库支持的数据类型非常多，选择一个正确的数据类型对于获得高性能至关重要。</p>\n<p>选择合适数据类型的几个原则：</p>\n<ol>\n<li><p>更小的通常更好<br>一般情况下，应该尽量使用可以正确数据类型的最小数据类型。但也要确保没有低估需要存储的范围。</p>\n</li>\n<li><p>简单就好<br>简单的数据类型的操作通常需要更少的CPU周期。例如，</p>\n</li>\n</ol>\n<ul>\n<li>整型比字符串操作代价更低</li>\n<li>使用MySQL内建的数据类型（比如，date、time、datetime），比用字符串更快</li>\n<li>使用整型存储一个IP地址，比用一个字符串更好</li>\n</ul>\n<ol>\n<li>尽量避免使用NULL<br>因为如果在查询中包含有NULL的列，对MySQL来说更难优化。所以通常情况下，最好指定列为 NOT NULL。</li>\n</ol>\n<p><strong>TIPS：</strong><br>datetime和timstamp列都可以存储相同类型的数据（时间和日期，都可以精确到秒），然而timestamp实际只使用datetime一般的存储空间。但另一方面，timestamp允许的时间范围要小的多。</p>\n<a id=\"more\"></a>\n<h2 id=\"基本的数据类型\"><a href=\"#基本的数据类型\" class=\"headerlink\" title=\"基本的数据类型\"></a>基本的数据类型</h2><ol>\n<li><p>数字</p>\n<ol>\n<li><p>整数</p>\n<ul>\n<li>TINYINT (8)</li>\n<li>SMALLINT (16)</li>\n<li>MEDIUMINT (24)</li>\n<li>INT (32)</li>\n<li>BIGINT (64)</li>\n</ul>\n<blockquote>\n<p><strong>TIPS1:</strong> 整数类型有可选的 unsigned 属性，表示不允许有负值，如果将要使用的列不会出现负值的话，加上这个属性，将会可以使正数的上限增加一倍。</p>\n<p><strong>TIPS2:</strong> int(1)与int(11)，对于存储和计算来说，这两者本质是没有区别的；两者只是在MySQL的一些交互工具中略有差别（比如，MySQL命令行客户端，用来控制显示字符的个数）。</p>\n</blockquote>\n</li>\n<li><p>实数</p>\n<ul>\n<li><p>作用</p>\n<blockquote>\n<p>存储小数</p>\n<p>存储比BIGINT更大的数</p>\n</blockquote>\n</li>\n<li><p>float</p>\n</li>\n<li><p>double</p>\n<blockquote>\n<p>float 和 double支持使用标准的浮点运算进行近似的计算。</p>\n</blockquote>\n</li>\n<li><p>decimal</p>\n<blockquote>\n<p>decimal 类型用于存储精确的小数，支持精确的计算。</p>\n<p>由于CPU不支持对decimal的直接计算，所以对decimal的精确计算是由MySQL服务器自己来实现。</p>\n<p><strong>Tips:</strong> 因为在进行精确计算时需要额外的空间和计算开销，所以尽量只对小数才使用decimal。比如，财务数据。另外如果数据量大的话，可以考虑使用bigint代替decimal，只需将存储的货币单位根据小数的位数乘以相应的倍数即可。</p>\n</blockquote>\n</li>\n</ul>\n</li>\n</ol>\n</li>\n<li><p>字符串</p>\n<ol>\n<li><p>CHAR</p>\n<blockquote>\n<p>char 类型是定长的：MySQL是根据定义的字符串长度分配足够的空间。<br>char，适合存储很短的字符串，或者所有值的长度都差不多的的字符串。例如，密码的md5值。<br>另外，char还适合存储经常进行变更的值，相比于vachar，char类型很少会产生碎片。所以这一类的列，会比varchar更好。</p>\n</blockquote>\n</li>\n<li><p>VARCHAR</p>\n<blockquote>\n<p>varchar 类型用于存储可变长的字符串。它只使用必要的空间，所以比定长类型更节省空间。</p>\n<p>varchar,需要使用一个或者两个额外的字节来存储当前字符串的长度信息；如果列的长度小于或等于255个字节，则只需要一个字节表示，否则就需要两个字节来表示。</p>\n<p>下面的这些情况适合使用varchar</p>\n<ol>\n<li>字符串列的长度比平均长度大很多</li>\n<li>列的更新很少，所以碎片不是问题</li>\n<li>使用了像UTF-8这样复杂的字符集，因为该字符集中每个字符可能使用不同的字节来进行存储</li>\n</ol>\n</blockquote>\n<p><strong>Tips:</strong><br>用varchar(5)和varchar(200)来存储 「hello」有什么区别？</p>\n<p>首先两者在存储空间的开销是一样的。<br>但是，一般的列在查询时会消耗更多的内存，因为在读到这些列时MySQL通常会分配固定大小的内存块来保存内部值。<br>尤其在使用内存临时表进行排序或者其他操作时，会特别的糟糕。<br>所以最好的策略就是，<strong>分配真正需要的空间</strong>。</p>\n<p><strong>Tips：</strong><br>字符串长度定义不是字节数，而是字符数。两者概念是不同的，多字节字符集会需要更多的空间存储单个字符。</p>\n</li>\n</ol>\n</li>\n<li><p>BLOB和TEXT</p>\n<blockquote>\n<p>两者都是为存储很大的数据而设计的字符串数据类型，不同的是两者分别采用二进制和字符方式存储。</p>\n<p>MySQL在处理两个类型的值时，处理基本相同，仅有的不同是BLOB类型是以二进制格式来存储的，所以没有排序规则和字符集，而text类型有排序规则和字符集。</p>\n</blockquote>\n</li>\n<li><p>枚举（ENUM）</p>\n<blockquote>\n<p>枚举可以把一些不重复的字符串存储成一个预定义的集合。<br>MySQL会在存储枚举类型时粉肠紧凑，会根据列的值的数量压缩到一个或者两个字节中。<br>MySQL会在内部将每个值在列表中的位置保存成整数，而这些『数字–字符串』的对应关系，会保存在 .frm 文件中。<br>所以当该列需要新添加一个新的枚举值时，必须添加在之前枚举列表的最后面，否则就会出现数据错乱的问题。切记。</p>\n</blockquote>\n</li>\n<li><p>日期和时间类型</p>\n<ul>\n<li><p>DATETIME</p>\n<blockquote>\n<p>该类型能保存大范围的值，从1001年到9999年，精度为秒。他会把时间封装到YYYYMMDDHHIISS的整数中，没有时区概念。使用8个字节的存储空间。</p>\n</blockquote>\n</li>\n<li><p>TIMESTAMP</p>\n<blockquote>\n<p>该类型保存了从1970-01-01 00：00：00（格林威治时间）以来的秒数。该类型使用4个字节的存储空间，所以只能表示1970到2023年，其值还具有时区的概念。</p>\n</blockquote>\n</li>\n</ul>\n</li>\n<li><p>位数据类型</p>\n<blockquote>\n<p>存储更紧凑。但所有这些位类型，不管底层存储格式和存储方式，从技术上来说都是字符串类型。虽然用它存储数据更紧凑，但是对于大部分应用来说，最好避免使用该类型。</p>\n</blockquote>\n<ul>\n<li><p>BIT</p>\n</li>\n<li><p>SET</p>\n</li>\n</ul>\n</li>\n<li><p>特殊类型的数据</p>\n<blockquote>\n<p>某些数据的类型并不直接和内置的类型一致。所以需要一定的转换进行存储。</p>\n</blockquote>\n<ul>\n<li><p>低于秒级的时间戳</p>\n<blockquote>\n<p>低于秒级的时间需要在引用层做处理，一般可以通过存储两个或者多个列来存储（一个存储秒级的时间戳，另外的存储秒级以下的）</p>\n</blockquote>\n</li>\n<li><p>ipv4地址</p>\n<blockquote>\n<p>我们常见到有人会用 varchar(15)来存错一个IP地址，IP地址实际是一个32位的无符号整数，所以应该用无符号整数来存储IP地址。MySQL提供了 INET_ATON()和 INET_NTOA() 函数在这两表示方法之间转换。</p>\n</blockquote>\n</li>\n</ul>\n</li>\n</ol>\n<p>love over~<br>2016-09-19</p>\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=\"330\" height=\"86\" src=\"http://music.163.com/outchain/player?type=2&id=28947001&auto=1&height=66\"></iframe>\n","excerpt":"<p>良好的数据路逻辑设计和物理设计是高性能的基石，所以要打造一个高性能的数据库服务，在Schema设计之初就应该需要权衡各种因素。</p>\n<h2 id=\"选择最优化的数据类型\"><a href=\"#选择最优化的数据类型\" class=\"headerlink\" title=\"选择最优化的数据类型\"></a>选择最优化的数据类型</h2><p>数据库支持的数据类型非常多，选择一个正确的数据类型对于获得高性能至关重要。</p>\n<p>选择合适数据类型的几个原则：</p>\n<ol>\n<li><p>更小的通常更好<br>一般情况下，应该尽量使用可以正确数据类型的最小数据类型。但也要确保没有低估需要存储的范围。</p>\n</li>\n<li><p>简单就好<br>简单的数据类型的操作通常需要更少的CPU周期。例如，</p>\n</li>\n</ol>\n<ul>\n<li>整型比字符串操作代价更低</li>\n<li>使用MySQL内建的数据类型（比如，date、time、datetime），比用字符串更快</li>\n<li>使用整型存储一个IP地址，比用一个字符串更好</li>\n</ul>\n<ol>\n<li>尽量避免使用NULL<br>因为如果在查询中包含有NULL的列，对MySQL来说更难优化。所以通常情况下，最好指定列为 NOT NULL。</li>\n</ol>\n<p><strong>TIPS：</strong><br>datetime和timstamp列都可以存储相同类型的数据（时间和日期，都可以精确到秒），然而timestamp实际只使用datetime一般的存储空间。但另一方面，timestamp允许的时间范围要小的多。</p>","more":"<h2 id=\"基本的数据类型\"><a href=\"#基本的数据类型\" class=\"headerlink\" title=\"基本的数据类型\"></a>基本的数据类型</h2><ol>\n<li><p>数字</p>\n<ol>\n<li><p>整数</p>\n<ul>\n<li>TINYINT (8)</li>\n<li>SMALLINT (16)</li>\n<li>MEDIUMINT (24)</li>\n<li>INT (32)</li>\n<li>BIGINT (64)</li>\n</ul>\n<blockquote>\n<p><strong>TIPS1:</strong> 整数类型有可选的 unsigned 属性，表示不允许有负值，如果将要使用的列不会出现负值的话，加上这个属性，将会可以使正数的上限增加一倍。</p>\n<p><strong>TIPS2:</strong> int(1)与int(11)，对于存储和计算来说，这两者本质是没有区别的；两者只是在MySQL的一些交互工具中略有差别（比如，MySQL命令行客户端，用来控制显示字符的个数）。</p>\n</blockquote>\n</li>\n<li><p>实数</p>\n<ul>\n<li><p>作用</p>\n<blockquote>\n<p>存储小数</p>\n<p>存储比BIGINT更大的数</p>\n</blockquote>\n</li>\n<li><p>float</p>\n</li>\n<li><p>double</p>\n<blockquote>\n<p>float 和 double支持使用标准的浮点运算进行近似的计算。</p>\n</blockquote>\n</li>\n<li><p>decimal</p>\n<blockquote>\n<p>decimal 类型用于存储精确的小数，支持精确的计算。</p>\n<p>由于CPU不支持对decimal的直接计算，所以对decimal的精确计算是由MySQL服务器自己来实现。</p>\n<p><strong>Tips:</strong> 因为在进行精确计算时需要额外的空间和计算开销，所以尽量只对小数才使用decimal。比如，财务数据。另外如果数据量大的话，可以考虑使用bigint代替decimal，只需将存储的货币单位根据小数的位数乘以相应的倍数即可。</p>\n</blockquote>\n</li>\n</ul>\n</li>\n</ol>\n</li>\n<li><p>字符串</p>\n<ol>\n<li><p>CHAR</p>\n<blockquote>\n<p>char 类型是定长的：MySQL是根据定义的字符串长度分配足够的空间。<br>char，适合存储很短的字符串，或者所有值的长度都差不多的的字符串。例如，密码的md5值。<br>另外，char还适合存储经常进行变更的值，相比于vachar，char类型很少会产生碎片。所以这一类的列，会比varchar更好。</p>\n</blockquote>\n</li>\n<li><p>VARCHAR</p>\n<blockquote>\n<p>varchar 类型用于存储可变长的字符串。它只使用必要的空间，所以比定长类型更节省空间。</p>\n<p>varchar,需要使用一个或者两个额外的字节来存储当前字符串的长度信息；如果列的长度小于或等于255个字节，则只需要一个字节表示，否则就需要两个字节来表示。</p>\n<p>下面的这些情况适合使用varchar</p>\n<ol>\n<li>字符串列的长度比平均长度大很多</li>\n<li>列的更新很少，所以碎片不是问题</li>\n<li>使用了像UTF-8这样复杂的字符集，因为该字符集中每个字符可能使用不同的字节来进行存储</li>\n</ol>\n</blockquote>\n<p><strong>Tips:</strong><br>用varchar(5)和varchar(200)来存储 「hello」有什么区别？</p>\n<p>首先两者在存储空间的开销是一样的。<br>但是，一般的列在查询时会消耗更多的内存，因为在读到这些列时MySQL通常会分配固定大小的内存块来保存内部值。<br>尤其在使用内存临时表进行排序或者其他操作时，会特别的糟糕。<br>所以最好的策略就是，<strong>分配真正需要的空间</strong>。</p>\n<p><strong>Tips：</strong><br>字符串长度定义不是字节数，而是字符数。两者概念是不同的，多字节字符集会需要更多的空间存储单个字符。</p>\n</li>\n</ol>\n</li>\n<li><p>BLOB和TEXT</p>\n<blockquote>\n<p>两者都是为存储很大的数据而设计的字符串数据类型，不同的是两者分别采用二进制和字符方式存储。</p>\n<p>MySQL在处理两个类型的值时，处理基本相同，仅有的不同是BLOB类型是以二进制格式来存储的，所以没有排序规则和字符集，而text类型有排序规则和字符集。</p>\n</blockquote>\n</li>\n<li><p>枚举（ENUM）</p>\n<blockquote>\n<p>枚举可以把一些不重复的字符串存储成一个预定义的集合。<br>MySQL会在存储枚举类型时粉肠紧凑，会根据列的值的数量压缩到一个或者两个字节中。<br>MySQL会在内部将每个值在列表中的位置保存成整数，而这些『数字–字符串』的对应关系，会保存在 .frm 文件中。<br>所以当该列需要新添加一个新的枚举值时，必须添加在之前枚举列表的最后面，否则就会出现数据错乱的问题。切记。</p>\n</blockquote>\n</li>\n<li><p>日期和时间类型</p>\n<ul>\n<li><p>DATETIME</p>\n<blockquote>\n<p>该类型能保存大范围的值，从1001年到9999年，精度为秒。他会把时间封装到YYYYMMDDHHIISS的整数中，没有时区概念。使用8个字节的存储空间。</p>\n</blockquote>\n</li>\n<li><p>TIMESTAMP</p>\n<blockquote>\n<p>该类型保存了从1970-01-01 00：00：00（格林威治时间）以来的秒数。该类型使用4个字节的存储空间，所以只能表示1970到2023年，其值还具有时区的概念。</p>\n</blockquote>\n</li>\n</ul>\n</li>\n<li><p>位数据类型</p>\n<blockquote>\n<p>存储更紧凑。但所有这些位类型，不管底层存储格式和存储方式，从技术上来说都是字符串类型。虽然用它存储数据更紧凑，但是对于大部分应用来说，最好避免使用该类型。</p>\n</blockquote>\n<ul>\n<li><p>BIT</p>\n</li>\n<li><p>SET</p>\n</li>\n</ul>\n</li>\n<li><p>特殊类型的数据</p>\n<blockquote>\n<p>某些数据的类型并不直接和内置的类型一致。所以需要一定的转换进行存储。</p>\n</blockquote>\n<ul>\n<li><p>低于秒级的时间戳</p>\n<blockquote>\n<p>低于秒级的时间需要在引用层做处理，一般可以通过存储两个或者多个列来存储（一个存储秒级的时间戳，另外的存储秒级以下的）</p>\n</blockquote>\n</li>\n<li><p>ipv4地址</p>\n<blockquote>\n<p>我们常见到有人会用 varchar(15)来存错一个IP地址，IP地址实际是一个32位的无符号整数，所以应该用无符号整数来存储IP地址。MySQL提供了 INET_ATON()和 INET_NTOA() 函数在这两表示方法之间转换。</p>\n</blockquote>\n</li>\n</ul>\n</li>\n</ol>\n<p>love over~<br>2016-09-19</p>\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"http://music.163.com/outchain/player?type=2&id=28947001&auto=1&height=66\"></iframe>"},{"title":"hexo常用命令","date":"2016-08-12T12:00:00.000Z","_content":"\n## init\n```\n$ hexo init [folder]\n```\n新建一个网站。如果没有设置 folder ，Hexo 默认在目前的文件夹建立网站。\n\n## new\n```\n$ hexo new [layout] <title>\n```\n新建一篇文章。如果没有设置 layout 的话，默认使用 `_config.yml` 中的 default_layout 参数代替。如果标题包含空格的话，请使用引号括起来。\n\n\n<!-- more -->\n\n\n## generate\n```\n$ hexo generate\n```\n生成静态文件。\n\n  选项\t描述\n  -d, --deploy\t文件生成后立即部署网站\n  -w, --watch\t监视文件变动\n\n\n##  publish\n```\n$ hexo publish [layout] <filename>\n```\n发表草稿。\n\n## server\n```\n$ hexo server\n```\n启动服务器。默认情况下，访问网址为： http://localhost:4000/。\n\n  选项\t描述\n  -p, --port\t重设端口\n  -s, --static\t只使用静态文件\n  -l, --log\t启动日记记录，使用覆盖记录格式\n\n## deploy\n```\n$ hexo deploy\n```\n部署网站。\n\n  参数\t描述\n  -g, --generate\t部署之前预先生成静态文件\n\n## render\n```\n$ hexo render <file1> [file2] ...\n```\n渲染文件。\n\n  参数\t描述\n  -o, --output\t设置输出路径\n\n## migrate\n```\n$ hexo migrate <type>\n```\n从其他博客系统 迁移内容。\n\n## clean\n```\n$ hexo clean\n```\n清除缓存文件 (db.json) 和已生成的静态文件 (public)。\n\n## list\n```\n$ hexo list <type>\n```\n列出网站资料。\n\n## version\n```\n$ hexo version\n```\n显示 Hexo 版本。\n\n## 选项\n### 安全模式\n```\n$ hexo --safe\n```\n在安全模式下，不会载入插件和脚本。当您在安装新插件遭遇问题时，可以尝试以安全模式重新执行。\n\n### 调试模式\n```\n$ hexo --debug\n```\n在终端中显示调试信息并记录到 debug.log。当您碰到问题时，可以尝试用调试模式重新执行一次，并 提交调试信息到 GitHub。\n\n### 简洁模式\n```\n$ hexo --silent\n```\n隐藏终端信息。\n\n### 自定义配置文件的路径\n```\n$ hexo --config custom.yml\n```\n自定义配置文件的路径，执行后将不再使用 `_config.yml`。\n\n### 显示草稿\n```\n$ hexo --draft\n```\n显示 `source/_drafts` 文件夹中的草稿文章。\n\n### 自定义 CWD\n```\n$ hexo --cwd /path/to/cwd\n```\n自定义当前工作目录（Current working directory）的路径。\n","source":"_posts/hexo常用命令.md","raw":"---\ntitle: hexo常用命令\ndate: 2016-08-12 20:00:00\ntags:\n- hexo\n---\n\n## init\n```\n$ hexo init [folder]\n```\n新建一个网站。如果没有设置 folder ，Hexo 默认在目前的文件夹建立网站。\n\n## new\n```\n$ hexo new [layout] <title>\n```\n新建一篇文章。如果没有设置 layout 的话，默认使用 `_config.yml` 中的 default_layout 参数代替。如果标题包含空格的话，请使用引号括起来。\n\n\n<!-- more -->\n\n\n## generate\n```\n$ hexo generate\n```\n生成静态文件。\n\n  选项\t描述\n  -d, --deploy\t文件生成后立即部署网站\n  -w, --watch\t监视文件变动\n\n\n##  publish\n```\n$ hexo publish [layout] <filename>\n```\n发表草稿。\n\n## server\n```\n$ hexo server\n```\n启动服务器。默认情况下，访问网址为： http://localhost:4000/。\n\n  选项\t描述\n  -p, --port\t重设端口\n  -s, --static\t只使用静态文件\n  -l, --log\t启动日记记录，使用覆盖记录格式\n\n## deploy\n```\n$ hexo deploy\n```\n部署网站。\n\n  参数\t描述\n  -g, --generate\t部署之前预先生成静态文件\n\n## render\n```\n$ hexo render <file1> [file2] ...\n```\n渲染文件。\n\n  参数\t描述\n  -o, --output\t设置输出路径\n\n## migrate\n```\n$ hexo migrate <type>\n```\n从其他博客系统 迁移内容。\n\n## clean\n```\n$ hexo clean\n```\n清除缓存文件 (db.json) 和已生成的静态文件 (public)。\n\n## list\n```\n$ hexo list <type>\n```\n列出网站资料。\n\n## version\n```\n$ hexo version\n```\n显示 Hexo 版本。\n\n## 选项\n### 安全模式\n```\n$ hexo --safe\n```\n在安全模式下，不会载入插件和脚本。当您在安装新插件遭遇问题时，可以尝试以安全模式重新执行。\n\n### 调试模式\n```\n$ hexo --debug\n```\n在终端中显示调试信息并记录到 debug.log。当您碰到问题时，可以尝试用调试模式重新执行一次，并 提交调试信息到 GitHub。\n\n### 简洁模式\n```\n$ hexo --silent\n```\n隐藏终端信息。\n\n### 自定义配置文件的路径\n```\n$ hexo --config custom.yml\n```\n自定义配置文件的路径，执行后将不再使用 `_config.yml`。\n\n### 显示草稿\n```\n$ hexo --draft\n```\n显示 `source/_drafts` 文件夹中的草稿文章。\n\n### 自定义 CWD\n```\n$ hexo --cwd /path/to/cwd\n```\n自定义当前工作目录（Current working directory）的路径。\n","slug":"hexo常用命令","published":1,"updated":"2016-08-24T03:16:26.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"city8vnob0025g29fju45q3lj","content":"<h2 id=\"init\"><a href=\"#init\" class=\"headerlink\" title=\"init\"></a>init</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo init [folder]</div></pre></td></tr></table></figure>\n<p>新建一个网站。如果没有设置 folder ，Hexo 默认在目前的文件夹建立网站。</p>\n<h2 id=\"new\"><a href=\"#new\" class=\"headerlink\" title=\"new\"></a>new</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo new [layout] &lt;title&gt;</div></pre></td></tr></table></figure>\n<p>新建一篇文章。如果没有设置 layout 的话，默认使用 <code>_config.yml</code> 中的 default_layout 参数代替。如果标题包含空格的话，请使用引号括起来。</p>\n<a id=\"more\"></a>\n<h2 id=\"generate\"><a href=\"#generate\" class=\"headerlink\" title=\"generate\"></a>generate</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo generate</div></pre></td></tr></table></figure>\n<p>生成静态文件。</p>\n<p>  选项    描述<br>  -d, –deploy    文件生成后立即部署网站<br>  -w, –watch    监视文件变动</p>\n<h2 id=\"publish\"><a href=\"#publish\" class=\"headerlink\" title=\"publish\"></a>publish</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo publish [layout] &lt;filename&gt;</div></pre></td></tr></table></figure>\n<p>发表草稿。</p>\n<h2 id=\"server\"><a href=\"#server\" class=\"headerlink\" title=\"server\"></a>server</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo server</div></pre></td></tr></table></figure>\n<p>启动服务器。默认情况下，访问网址为： <a href=\"http://localhost:4000/。\" target=\"_blank\" rel=\"external\">http://localhost:4000/。</a></p>\n<p>  选项    描述<br>  -p, –port    重设端口<br>  -s, –static    只使用静态文件<br>  -l, –log    启动日记记录，使用覆盖记录格式</p>\n<h2 id=\"deploy\"><a href=\"#deploy\" class=\"headerlink\" title=\"deploy\"></a>deploy</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo deploy</div></pre></td></tr></table></figure>\n<p>部署网站。</p>\n<p>  参数    描述<br>  -g, –generate    部署之前预先生成静态文件</p>\n<h2 id=\"render\"><a href=\"#render\" class=\"headerlink\" title=\"render\"></a>render</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo render &lt;file1&gt; [file2] ...</div></pre></td></tr></table></figure>\n<p>渲染文件。</p>\n<p>  参数    描述<br>  -o, –output    设置输出路径</p>\n<h2 id=\"migrate\"><a href=\"#migrate\" class=\"headerlink\" title=\"migrate\"></a>migrate</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo migrate &lt;type&gt;</div></pre></td></tr></table></figure>\n<p>从其他博客系统 迁移内容。</p>\n<h2 id=\"clean\"><a href=\"#clean\" class=\"headerlink\" title=\"clean\"></a>clean</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo clean</div></pre></td></tr></table></figure>\n<p>清除缓存文件 (db.json) 和已生成的静态文件 (public)。</p>\n<h2 id=\"list\"><a href=\"#list\" class=\"headerlink\" title=\"list\"></a>list</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo list &lt;type&gt;</div></pre></td></tr></table></figure>\n<p>列出网站资料。</p>\n<h2 id=\"version\"><a href=\"#version\" class=\"headerlink\" title=\"version\"></a>version</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo version</div></pre></td></tr></table></figure>\n<p>显示 Hexo 版本。</p>\n<h2 id=\"选项\"><a href=\"#选项\" class=\"headerlink\" title=\"选项\"></a>选项</h2><h3 id=\"安全模式\"><a href=\"#安全模式\" class=\"headerlink\" title=\"安全模式\"></a>安全模式</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo --safe</div></pre></td></tr></table></figure>\n<p>在安全模式下，不会载入插件和脚本。当您在安装新插件遭遇问题时，可以尝试以安全模式重新执行。</p>\n<h3 id=\"调试模式\"><a href=\"#调试模式\" class=\"headerlink\" title=\"调试模式\"></a>调试模式</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo --debug</div></pre></td></tr></table></figure>\n<p>在终端中显示调试信息并记录到 debug.log。当您碰到问题时，可以尝试用调试模式重新执行一次，并 提交调试信息到 GitHub。</p>\n<h3 id=\"简洁模式\"><a href=\"#简洁模式\" class=\"headerlink\" title=\"简洁模式\"></a>简洁模式</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo --silent</div></pre></td></tr></table></figure>\n<p>隐藏终端信息。</p>\n<h3 id=\"自定义配置文件的路径\"><a href=\"#自定义配置文件的路径\" class=\"headerlink\" title=\"自定义配置文件的路径\"></a>自定义配置文件的路径</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo --config custom.yml</div></pre></td></tr></table></figure>\n<p>自定义配置文件的路径，执行后将不再使用 <code>_config.yml</code>。</p>\n<h3 id=\"显示草稿\"><a href=\"#显示草稿\" class=\"headerlink\" title=\"显示草稿\"></a>显示草稿</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo --draft</div></pre></td></tr></table></figure>\n<p>显示 <code>source/_drafts</code> 文件夹中的草稿文章。</p>\n<h3 id=\"自定义-CWD\"><a href=\"#自定义-CWD\" class=\"headerlink\" title=\"自定义 CWD\"></a>自定义 CWD</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo --cwd /path/to/cwd</div></pre></td></tr></table></figure>\n<p>自定义当前工作目录（Current working directory）的路径。</p>\n","excerpt":"<h2 id=\"init\"><a href=\"#init\" class=\"headerlink\" title=\"init\"></a>init</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo init [folder]</div></pre></td></tr></table></figure>\n<p>新建一个网站。如果没有设置 folder ，Hexo 默认在目前的文件夹建立网站。</p>\n<h2 id=\"new\"><a href=\"#new\" class=\"headerlink\" title=\"new\"></a>new</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo new [layout] &lt;title&gt;</div></pre></td></tr></table></figure>\n<p>新建一篇文章。如果没有设置 layout 的话，默认使用 <code>_config.yml</code> 中的 default_layout 参数代替。如果标题包含空格的话，请使用引号括起来。</p>","more":"<h2 id=\"generate\"><a href=\"#generate\" class=\"headerlink\" title=\"generate\"></a>generate</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo generate</div></pre></td></tr></table></figure>\n<p>生成静态文件。</p>\n<p>  选项    描述<br>  -d, –deploy    文件生成后立即部署网站<br>  -w, –watch    监视文件变动</p>\n<h2 id=\"publish\"><a href=\"#publish\" class=\"headerlink\" title=\"publish\"></a>publish</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo publish [layout] &lt;filename&gt;</div></pre></td></tr></table></figure>\n<p>发表草稿。</p>\n<h2 id=\"server\"><a href=\"#server\" class=\"headerlink\" title=\"server\"></a>server</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo server</div></pre></td></tr></table></figure>\n<p>启动服务器。默认情况下，访问网址为： <a href=\"http://localhost:4000/。\">http://localhost:4000/。</a></p>\n<p>  选项    描述<br>  -p, –port    重设端口<br>  -s, –static    只使用静态文件<br>  -l, –log    启动日记记录，使用覆盖记录格式</p>\n<h2 id=\"deploy\"><a href=\"#deploy\" class=\"headerlink\" title=\"deploy\"></a>deploy</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo deploy</div></pre></td></tr></table></figure>\n<p>部署网站。</p>\n<p>  参数    描述<br>  -g, –generate    部署之前预先生成静态文件</p>\n<h2 id=\"render\"><a href=\"#render\" class=\"headerlink\" title=\"render\"></a>render</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo render &lt;file1&gt; [file2] ...</div></pre></td></tr></table></figure>\n<p>渲染文件。</p>\n<p>  参数    描述<br>  -o, –output    设置输出路径</p>\n<h2 id=\"migrate\"><a href=\"#migrate\" class=\"headerlink\" title=\"migrate\"></a>migrate</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo migrate &lt;type&gt;</div></pre></td></tr></table></figure>\n<p>从其他博客系统 迁移内容。</p>\n<h2 id=\"clean\"><a href=\"#clean\" class=\"headerlink\" title=\"clean\"></a>clean</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo clean</div></pre></td></tr></table></figure>\n<p>清除缓存文件 (db.json) 和已生成的静态文件 (public)。</p>\n<h2 id=\"list\"><a href=\"#list\" class=\"headerlink\" title=\"list\"></a>list</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo list &lt;type&gt;</div></pre></td></tr></table></figure>\n<p>列出网站资料。</p>\n<h2 id=\"version\"><a href=\"#version\" class=\"headerlink\" title=\"version\"></a>version</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo version</div></pre></td></tr></table></figure>\n<p>显示 Hexo 版本。</p>\n<h2 id=\"选项\"><a href=\"#选项\" class=\"headerlink\" title=\"选项\"></a>选项</h2><h3 id=\"安全模式\"><a href=\"#安全模式\" class=\"headerlink\" title=\"安全模式\"></a>安全模式</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo --safe</div></pre></td></tr></table></figure>\n<p>在安全模式下，不会载入插件和脚本。当您在安装新插件遭遇问题时，可以尝试以安全模式重新执行。</p>\n<h3 id=\"调试模式\"><a href=\"#调试模式\" class=\"headerlink\" title=\"调试模式\"></a>调试模式</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo --debug</div></pre></td></tr></table></figure>\n<p>在终端中显示调试信息并记录到 debug.log。当您碰到问题时，可以尝试用调试模式重新执行一次，并 提交调试信息到 GitHub。</p>\n<h3 id=\"简洁模式\"><a href=\"#简洁模式\" class=\"headerlink\" title=\"简洁模式\"></a>简洁模式</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo --silent</div></pre></td></tr></table></figure>\n<p>隐藏终端信息。</p>\n<h3 id=\"自定义配置文件的路径\"><a href=\"#自定义配置文件的路径\" class=\"headerlink\" title=\"自定义配置文件的路径\"></a>自定义配置文件的路径</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo --config custom.yml</div></pre></td></tr></table></figure>\n<p>自定义配置文件的路径，执行后将不再使用 <code>_config.yml</code>。</p>\n<h3 id=\"显示草稿\"><a href=\"#显示草稿\" class=\"headerlink\" title=\"显示草稿\"></a>显示草稿</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo --draft</div></pre></td></tr></table></figure>\n<p>显示 <code>source/_drafts</code> 文件夹中的草稿文章。</p>\n<h3 id=\"自定义-CWD\"><a href=\"#自定义-CWD\" class=\"headerlink\" title=\"自定义 CWD\"></a>自定义 CWD</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo --cwd /path/to/cwd</div></pre></td></tr></table></figure>\n<p>自定义当前工作目录（Current working directory）的路径。</p>"},{"title":"Web性能优化随笔","date":"2016-07-31T06:22:23.000Z","_content":"谈到web性能优化，一般我们可以把它分为两个部分来讲，页面加载（Page Speed）和页面渲染（Page Performance）。\n\n\n<!-- more -->\n\n\n# 页面加载\n\n## 加快服务器脚本的计算速度\n* 动态内容缓存\n* 数据缓存\n* 动态内容静态化\n* 选择适合的web服务器软件（Apache、nginx等）\n* 数据库优化\n* 等等···\n\n\n## 压缩源码和图片\n* Js 混淆压缩\n* CSS 普通压缩\n* JPG 根据具体质量压缩到50%~70%\n* PNG 色彩压缩、去除一些格式信息等\n\n\n## 选择合适的图片\n* 颜色较多，则使用JPG格式\n* 颜色较少，则使用PNG格式\n* 尽量使用WebP、SVG\n\n> 总之就是，尽量减少每一个资源的体积\n\n## 合并静态资源\n合并CSS、Javascript和小图片\n\n> 尽量减少同一域下的HTTP请求数\n\n## 开启服务器短的Gzip压缩\nGzip开启以后会将输出到用户浏览器的数据进行压缩的处理，这样就会减小通过网络传输的数据量，提高浏览的速度。所以Gzip对文本资源非常有效。\n\n\n## 使用CDN\n一些公用的静态资源（比如jquery、angular、bootstrap等）。使用这些公用的静态资源一方面可以增加页面文件并发下载量，另一方面还能和其他网站共享这些缓存。\n\n\n## 尽可能缓存静态资源\n尽可能延长静态资源的缓存时间，不但能使频繁访问网站的用户更快的访问，还能减轻服务器压力。至于静态资源的更新，则可以结合`修改文件名和+版本号`的方式来确保资源更新时，用户会加载到新的内容。\n\n\n## 尽可能将CSS文件放在页面头部，JavaScript放在页面底部\n应为javascript在加载的时候会出现阻塞，所以为避免出现阻塞页面渲染，让页面页面出现长时间空白，尽量将Javascript文件放在页面底部。\n\n# 页面渲染\n\n## 关键渲染路径\n![CRP](https://sfault-image.b0.upaiyun.com/315/063/3150630289-5766c21f45ef4_articlex)\n\n> 上图是浏览器渲染的关键路径，首先，让我们从浏览器解析一个页面开始吧。\n\n* ***转化***： 浏览器从磁盘或网络读取 HTML 的原始字节，浏览器会将这段原始文件按照相应编码规范进行解码（现在一般为 utf-8）。\n* ***符号化***： 根据 W3C 标准转化为对应的符号（一般在尖括号内）。\n* ***DOM 构建***：HTML 解析器会解析其中的 tag 标签，生成 token ，遇到 CSS 或 JS 会发送相应请求。HTML 解析时阻塞主进程的，CSS 一般也是阻塞主进程的（媒体查询时例外），也就是说它们在解析过程中是无法做出响应的。而 JS 手动添加 async 后达到异步加载，根据 token 生成相应 DOM 树。\n* ***CSSDOM 构建***：添加 CSS 样式生成 CSSDOM 树。\n* ***渲染树构建***：从 DOM 树的根节点开始，遍历每个可见的节点，给每个可见节点找到相应匹配的 CSSOM 规则，并应用这些规则，连带其内容及计算的样式。\n* ***样式计算***：浏览器会将所有的相对位置转换成绝对位置等一系列的样式计算。\n* ***布局***：浏览器将元素进行定位、布局。\n* ***绘制***：绘制元素样式，颜色、背景、大小、边框等。\n* ***合成***：将各层合成到一起、显示在屏幕上。\n\n![](https://sfault-image.b0.upaiyun.com/951/893/951893846-5766c220cc68c_articlex)\n\n如果我们是做一个动画，一般会用 JS 更改相应样式，接着浏览器就会经历 JS 运行、样式计算、布局、绘制、合成等多个重要步骤（后面还会讲到这个步骤实际过程中可以更长或者更短）。那么要做的优化就是在这几个步骤中进行优化并且尽量去掉中间的耗时步骤。\n![](https://sfault-image.b0.upaiyun.com/396/985/3969857354-5766c2228ceed_articlex)\n\n\n### 优化JavaScript的执行\n* 函数的输入事件处理\n* 优化处理\n\n\n### 样式计算\n* 减小选择器的复杂性\n* 减少样式的计算量\n\n\n### 布局\n* 避免触发布局\n* 使用Flexbox布局\n* 避免强制同步布局事件\n* 避免快速连续的布局\n\n\n### 绘制\n* 提升移动或渐变元素的绘制层\n* 仔细规划动画和简化绘制的复杂度\n\n\n### 合成\n* 使用transform/opacity实现动画效果\n* 管理渲染层、避免过多数量的层\n\n\n### 其他\n* 关注趋势，今天很多的性能瓶颈很可能在将来都不再是问题。\n* 充分利用工具 Chrome DevTools。\n* 不要进行微优化，有时花上很短的带来的性能提升却很小，对于日常快速迭代的业务是没必要这样做的。\n\n\n[更多详细关于页面渲染的内容，请查看][Performance]\n[Performance]:https://segmentfault.com/a/1190000005754881\n","source":"_posts/Web性能优化随笔.md","raw":"---\ntitle: Web性能优化随笔\ndate: 2016-07-31 14:22:23\ntags:\n- Web\n- 性能优化\ncategories:\n- Web\n---\n谈到web性能优化，一般我们可以把它分为两个部分来讲，页面加载（Page Speed）和页面渲染（Page Performance）。\n\n\n<!-- more -->\n\n\n# 页面加载\n\n## 加快服务器脚本的计算速度\n* 动态内容缓存\n* 数据缓存\n* 动态内容静态化\n* 选择适合的web服务器软件（Apache、nginx等）\n* 数据库优化\n* 等等···\n\n\n## 压缩源码和图片\n* Js 混淆压缩\n* CSS 普通压缩\n* JPG 根据具体质量压缩到50%~70%\n* PNG 色彩压缩、去除一些格式信息等\n\n\n## 选择合适的图片\n* 颜色较多，则使用JPG格式\n* 颜色较少，则使用PNG格式\n* 尽量使用WebP、SVG\n\n> 总之就是，尽量减少每一个资源的体积\n\n## 合并静态资源\n合并CSS、Javascript和小图片\n\n> 尽量减少同一域下的HTTP请求数\n\n## 开启服务器短的Gzip压缩\nGzip开启以后会将输出到用户浏览器的数据进行压缩的处理，这样就会减小通过网络传输的数据量，提高浏览的速度。所以Gzip对文本资源非常有效。\n\n\n## 使用CDN\n一些公用的静态资源（比如jquery、angular、bootstrap等）。使用这些公用的静态资源一方面可以增加页面文件并发下载量，另一方面还能和其他网站共享这些缓存。\n\n\n## 尽可能缓存静态资源\n尽可能延长静态资源的缓存时间，不但能使频繁访问网站的用户更快的访问，还能减轻服务器压力。至于静态资源的更新，则可以结合`修改文件名和+版本号`的方式来确保资源更新时，用户会加载到新的内容。\n\n\n## 尽可能将CSS文件放在页面头部，JavaScript放在页面底部\n应为javascript在加载的时候会出现阻塞，所以为避免出现阻塞页面渲染，让页面页面出现长时间空白，尽量将Javascript文件放在页面底部。\n\n# 页面渲染\n\n## 关键渲染路径\n![CRP](https://sfault-image.b0.upaiyun.com/315/063/3150630289-5766c21f45ef4_articlex)\n\n> 上图是浏览器渲染的关键路径，首先，让我们从浏览器解析一个页面开始吧。\n\n* ***转化***： 浏览器从磁盘或网络读取 HTML 的原始字节，浏览器会将这段原始文件按照相应编码规范进行解码（现在一般为 utf-8）。\n* ***符号化***： 根据 W3C 标准转化为对应的符号（一般在尖括号内）。\n* ***DOM 构建***：HTML 解析器会解析其中的 tag 标签，生成 token ，遇到 CSS 或 JS 会发送相应请求。HTML 解析时阻塞主进程的，CSS 一般也是阻塞主进程的（媒体查询时例外），也就是说它们在解析过程中是无法做出响应的。而 JS 手动添加 async 后达到异步加载，根据 token 生成相应 DOM 树。\n* ***CSSDOM 构建***：添加 CSS 样式生成 CSSDOM 树。\n* ***渲染树构建***：从 DOM 树的根节点开始，遍历每个可见的节点，给每个可见节点找到相应匹配的 CSSOM 规则，并应用这些规则，连带其内容及计算的样式。\n* ***样式计算***：浏览器会将所有的相对位置转换成绝对位置等一系列的样式计算。\n* ***布局***：浏览器将元素进行定位、布局。\n* ***绘制***：绘制元素样式，颜色、背景、大小、边框等。\n* ***合成***：将各层合成到一起、显示在屏幕上。\n\n![](https://sfault-image.b0.upaiyun.com/951/893/951893846-5766c220cc68c_articlex)\n\n如果我们是做一个动画，一般会用 JS 更改相应样式，接着浏览器就会经历 JS 运行、样式计算、布局、绘制、合成等多个重要步骤（后面还会讲到这个步骤实际过程中可以更长或者更短）。那么要做的优化就是在这几个步骤中进行优化并且尽量去掉中间的耗时步骤。\n![](https://sfault-image.b0.upaiyun.com/396/985/3969857354-5766c2228ceed_articlex)\n\n\n### 优化JavaScript的执行\n* 函数的输入事件处理\n* 优化处理\n\n\n### 样式计算\n* 减小选择器的复杂性\n* 减少样式的计算量\n\n\n### 布局\n* 避免触发布局\n* 使用Flexbox布局\n* 避免强制同步布局事件\n* 避免快速连续的布局\n\n\n### 绘制\n* 提升移动或渐变元素的绘制层\n* 仔细规划动画和简化绘制的复杂度\n\n\n### 合成\n* 使用transform/opacity实现动画效果\n* 管理渲染层、避免过多数量的层\n\n\n### 其他\n* 关注趋势，今天很多的性能瓶颈很可能在将来都不再是问题。\n* 充分利用工具 Chrome DevTools。\n* 不要进行微优化，有时花上很短的带来的性能提升却很小，对于日常快速迭代的业务是没必要这样做的。\n\n\n[更多详细关于页面渲染的内容，请查看][Performance]\n[Performance]:https://segmentfault.com/a/1190000005754881\n","slug":"Web性能优化随笔","published":1,"updated":"2016-08-24T03:16:22.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"city8vnod0028g29fl6fun6f2","content":"<p>谈到web性能优化，一般我们可以把它分为两个部分来讲，页面加载（Page Speed）和页面渲染（Page Performance）。</p>\n<a id=\"more\"></a>\n<h1 id=\"页面加载\"><a href=\"#页面加载\" class=\"headerlink\" title=\"页面加载\"></a>页面加载</h1><h2 id=\"加快服务器脚本的计算速度\"><a href=\"#加快服务器脚本的计算速度\" class=\"headerlink\" title=\"加快服务器脚本的计算速度\"></a>加快服务器脚本的计算速度</h2><ul>\n<li>动态内容缓存</li>\n<li>数据缓存</li>\n<li>动态内容静态化</li>\n<li>选择适合的web服务器软件（Apache、nginx等）</li>\n<li>数据库优化</li>\n<li>等等···</li>\n</ul>\n<h2 id=\"压缩源码和图片\"><a href=\"#压缩源码和图片\" class=\"headerlink\" title=\"压缩源码和图片\"></a>压缩源码和图片</h2><ul>\n<li>Js 混淆压缩</li>\n<li>CSS 普通压缩</li>\n<li>JPG 根据具体质量压缩到50%~70%</li>\n<li>PNG 色彩压缩、去除一些格式信息等</li>\n</ul>\n<h2 id=\"选择合适的图片\"><a href=\"#选择合适的图片\" class=\"headerlink\" title=\"选择合适的图片\"></a>选择合适的图片</h2><ul>\n<li>颜色较多，则使用JPG格式</li>\n<li>颜色较少，则使用PNG格式</li>\n<li>尽量使用WebP、SVG</li>\n</ul>\n<blockquote>\n<p>总之就是，尽量减少每一个资源的体积</p>\n</blockquote>\n<h2 id=\"合并静态资源\"><a href=\"#合并静态资源\" class=\"headerlink\" title=\"合并静态资源\"></a>合并静态资源</h2><p>合并CSS、Javascript和小图片</p>\n<blockquote>\n<p>尽量减少同一域下的HTTP请求数</p>\n</blockquote>\n<h2 id=\"开启服务器短的Gzip压缩\"><a href=\"#开启服务器短的Gzip压缩\" class=\"headerlink\" title=\"开启服务器短的Gzip压缩\"></a>开启服务器短的Gzip压缩</h2><p>Gzip开启以后会将输出到用户浏览器的数据进行压缩的处理，这样就会减小通过网络传输的数据量，提高浏览的速度。所以Gzip对文本资源非常有效。</p>\n<h2 id=\"使用CDN\"><a href=\"#使用CDN\" class=\"headerlink\" title=\"使用CDN\"></a>使用CDN</h2><p>一些公用的静态资源（比如jquery、angular、bootstrap等）。使用这些公用的静态资源一方面可以增加页面文件并发下载量，另一方面还能和其他网站共享这些缓存。</p>\n<h2 id=\"尽可能缓存静态资源\"><a href=\"#尽可能缓存静态资源\" class=\"headerlink\" title=\"尽可能缓存静态资源\"></a>尽可能缓存静态资源</h2><p>尽可能延长静态资源的缓存时间，不但能使频繁访问网站的用户更快的访问，还能减轻服务器压力。至于静态资源的更新，则可以结合<code>修改文件名和+版本号</code>的方式来确保资源更新时，用户会加载到新的内容。</p>\n<h2 id=\"尽可能将CSS文件放在页面头部，JavaScript放在页面底部\"><a href=\"#尽可能将CSS文件放在页面头部，JavaScript放在页面底部\" class=\"headerlink\" title=\"尽可能将CSS文件放在页面头部，JavaScript放在页面底部\"></a>尽可能将CSS文件放在页面头部，JavaScript放在页面底部</h2><p>应为javascript在加载的时候会出现阻塞，所以为避免出现阻塞页面渲染，让页面页面出现长时间空白，尽量将Javascript文件放在页面底部。</p>\n<h1 id=\"页面渲染\"><a href=\"#页面渲染\" class=\"headerlink\" title=\"页面渲染\"></a>页面渲染</h1><h2 id=\"关键渲染路径\"><a href=\"#关键渲染路径\" class=\"headerlink\" title=\"关键渲染路径\"></a>关键渲染路径</h2><p><img src=\"https://sfault-image.b0.upaiyun.com/315/063/3150630289-5766c21f45ef4_articlex\" alt=\"CRP\"></p>\n<blockquote>\n<p>上图是浏览器渲染的关键路径，首先，让我们从浏览器解析一个页面开始吧。</p>\n</blockquote>\n<ul>\n<li><strong><em>转化</em></strong>： 浏览器从磁盘或网络读取 HTML 的原始字节，浏览器会将这段原始文件按照相应编码规范进行解码（现在一般为 utf-8）。</li>\n<li><strong><em>符号化</em></strong>： 根据 W3C 标准转化为对应的符号（一般在尖括号内）。</li>\n<li><strong><em>DOM 构建</em></strong>：HTML 解析器会解析其中的 tag 标签，生成 token ，遇到 CSS 或 JS 会发送相应请求。HTML 解析时阻塞主进程的，CSS 一般也是阻塞主进程的（媒体查询时例外），也就是说它们在解析过程中是无法做出响应的。而 JS 手动添加 async 后达到异步加载，根据 token 生成相应 DOM 树。</li>\n<li><strong><em>CSSDOM 构建</em></strong>：添加 CSS 样式生成 CSSDOM 树。</li>\n<li><strong><em>渲染树构建</em></strong>：从 DOM 树的根节点开始，遍历每个可见的节点，给每个可见节点找到相应匹配的 CSSOM 规则，并应用这些规则，连带其内容及计算的样式。</li>\n<li><strong><em>样式计算</em></strong>：浏览器会将所有的相对位置转换成绝对位置等一系列的样式计算。</li>\n<li><strong><em>布局</em></strong>：浏览器将元素进行定位、布局。</li>\n<li><strong><em>绘制</em></strong>：绘制元素样式，颜色、背景、大小、边框等。</li>\n<li><strong><em>合成</em></strong>：将各层合成到一起、显示在屏幕上。</li>\n</ul>\n<p><img src=\"https://sfault-image.b0.upaiyun.com/951/893/951893846-5766c220cc68c_articlex\" alt=\"\"></p>\n<p>如果我们是做一个动画，一般会用 JS 更改相应样式，接着浏览器就会经历 JS 运行、样式计算、布局、绘制、合成等多个重要步骤（后面还会讲到这个步骤实际过程中可以更长或者更短）。那么要做的优化就是在这几个步骤中进行优化并且尽量去掉中间的耗时步骤。<br><img src=\"https://sfault-image.b0.upaiyun.com/396/985/3969857354-5766c2228ceed_articlex\" alt=\"\"></p>\n<h3 id=\"优化JavaScript的执行\"><a href=\"#优化JavaScript的执行\" class=\"headerlink\" title=\"优化JavaScript的执行\"></a>优化JavaScript的执行</h3><ul>\n<li>函数的输入事件处理</li>\n<li>优化处理</li>\n</ul>\n<h3 id=\"样式计算\"><a href=\"#样式计算\" class=\"headerlink\" title=\"样式计算\"></a>样式计算</h3><ul>\n<li>减小选择器的复杂性</li>\n<li>减少样式的计算量</li>\n</ul>\n<h3 id=\"布局\"><a href=\"#布局\" class=\"headerlink\" title=\"布局\"></a>布局</h3><ul>\n<li>避免触发布局</li>\n<li>使用Flexbox布局</li>\n<li>避免强制同步布局事件</li>\n<li>避免快速连续的布局</li>\n</ul>\n<h3 id=\"绘制\"><a href=\"#绘制\" class=\"headerlink\" title=\"绘制\"></a>绘制</h3><ul>\n<li>提升移动或渐变元素的绘制层</li>\n<li>仔细规划动画和简化绘制的复杂度</li>\n</ul>\n<h3 id=\"合成\"><a href=\"#合成\" class=\"headerlink\" title=\"合成\"></a>合成</h3><ul>\n<li>使用transform/opacity实现动画效果</li>\n<li>管理渲染层、避免过多数量的层</li>\n</ul>\n<h3 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h3><ul>\n<li>关注趋势，今天很多的性能瓶颈很可能在将来都不再是问题。</li>\n<li>充分利用工具 Chrome DevTools。</li>\n<li>不要进行微优化，有时花上很短的带来的性能提升却很小，对于日常快速迭代的业务是没必要这样做的。</li>\n</ul>\n<p><a href=\"https://segmentfault.com/a/1190000005754881\" target=\"_blank\" rel=\"external\">更多详细关于页面渲染的内容，请查看</a></p>\n","excerpt":"<p>谈到web性能优化，一般我们可以把它分为两个部分来讲，页面加载（Page Speed）和页面渲染（Page Performance）。</p>","more":"<h1 id=\"页面加载\"><a href=\"#页面加载\" class=\"headerlink\" title=\"页面加载\"></a>页面加载</h1><h2 id=\"加快服务器脚本的计算速度\"><a href=\"#加快服务器脚本的计算速度\" class=\"headerlink\" title=\"加快服务器脚本的计算速度\"></a>加快服务器脚本的计算速度</h2><ul>\n<li>动态内容缓存</li>\n<li>数据缓存</li>\n<li>动态内容静态化</li>\n<li>选择适合的web服务器软件（Apache、nginx等）</li>\n<li>数据库优化</li>\n<li>等等···</li>\n</ul>\n<h2 id=\"压缩源码和图片\"><a href=\"#压缩源码和图片\" class=\"headerlink\" title=\"压缩源码和图片\"></a>压缩源码和图片</h2><ul>\n<li>Js 混淆压缩</li>\n<li>CSS 普通压缩</li>\n<li>JPG 根据具体质量压缩到50%~70%</li>\n<li>PNG 色彩压缩、去除一些格式信息等</li>\n</ul>\n<h2 id=\"选择合适的图片\"><a href=\"#选择合适的图片\" class=\"headerlink\" title=\"选择合适的图片\"></a>选择合适的图片</h2><ul>\n<li>颜色较多，则使用JPG格式</li>\n<li>颜色较少，则使用PNG格式</li>\n<li>尽量使用WebP、SVG</li>\n</ul>\n<blockquote>\n<p>总之就是，尽量减少每一个资源的体积</p>\n</blockquote>\n<h2 id=\"合并静态资源\"><a href=\"#合并静态资源\" class=\"headerlink\" title=\"合并静态资源\"></a>合并静态资源</h2><p>合并CSS、Javascript和小图片</p>\n<blockquote>\n<p>尽量减少同一域下的HTTP请求数</p>\n</blockquote>\n<h2 id=\"开启服务器短的Gzip压缩\"><a href=\"#开启服务器短的Gzip压缩\" class=\"headerlink\" title=\"开启服务器短的Gzip压缩\"></a>开启服务器短的Gzip压缩</h2><p>Gzip开启以后会将输出到用户浏览器的数据进行压缩的处理，这样就会减小通过网络传输的数据量，提高浏览的速度。所以Gzip对文本资源非常有效。</p>\n<h2 id=\"使用CDN\"><a href=\"#使用CDN\" class=\"headerlink\" title=\"使用CDN\"></a>使用CDN</h2><p>一些公用的静态资源（比如jquery、angular、bootstrap等）。使用这些公用的静态资源一方面可以增加页面文件并发下载量，另一方面还能和其他网站共享这些缓存。</p>\n<h2 id=\"尽可能缓存静态资源\"><a href=\"#尽可能缓存静态资源\" class=\"headerlink\" title=\"尽可能缓存静态资源\"></a>尽可能缓存静态资源</h2><p>尽可能延长静态资源的缓存时间，不但能使频繁访问网站的用户更快的访问，还能减轻服务器压力。至于静态资源的更新，则可以结合<code>修改文件名和+版本号</code>的方式来确保资源更新时，用户会加载到新的内容。</p>\n<h2 id=\"尽可能将CSS文件放在页面头部，JavaScript放在页面底部\"><a href=\"#尽可能将CSS文件放在页面头部，JavaScript放在页面底部\" class=\"headerlink\" title=\"尽可能将CSS文件放在页面头部，JavaScript放在页面底部\"></a>尽可能将CSS文件放在页面头部，JavaScript放在页面底部</h2><p>应为javascript在加载的时候会出现阻塞，所以为避免出现阻塞页面渲染，让页面页面出现长时间空白，尽量将Javascript文件放在页面底部。</p>\n<h1 id=\"页面渲染\"><a href=\"#页面渲染\" class=\"headerlink\" title=\"页面渲染\"></a>页面渲染</h1><h2 id=\"关键渲染路径\"><a href=\"#关键渲染路径\" class=\"headerlink\" title=\"关键渲染路径\"></a>关键渲染路径</h2><p><img src=\"https://sfault-image.b0.upaiyun.com/315/063/3150630289-5766c21f45ef4_articlex\" alt=\"CRP\"></p>\n<blockquote>\n<p>上图是浏览器渲染的关键路径，首先，让我们从浏览器解析一个页面开始吧。</p>\n</blockquote>\n<ul>\n<li><strong><em>转化</em></strong>： 浏览器从磁盘或网络读取 HTML 的原始字节，浏览器会将这段原始文件按照相应编码规范进行解码（现在一般为 utf-8）。</li>\n<li><strong><em>符号化</em></strong>： 根据 W3C 标准转化为对应的符号（一般在尖括号内）。</li>\n<li><strong><em>DOM 构建</em></strong>：HTML 解析器会解析其中的 tag 标签，生成 token ，遇到 CSS 或 JS 会发送相应请求。HTML 解析时阻塞主进程的，CSS 一般也是阻塞主进程的（媒体查询时例外），也就是说它们在解析过程中是无法做出响应的。而 JS 手动添加 async 后达到异步加载，根据 token 生成相应 DOM 树。</li>\n<li><strong><em>CSSDOM 构建</em></strong>：添加 CSS 样式生成 CSSDOM 树。</li>\n<li><strong><em>渲染树构建</em></strong>：从 DOM 树的根节点开始，遍历每个可见的节点，给每个可见节点找到相应匹配的 CSSOM 规则，并应用这些规则，连带其内容及计算的样式。</li>\n<li><strong><em>样式计算</em></strong>：浏览器会将所有的相对位置转换成绝对位置等一系列的样式计算。</li>\n<li><strong><em>布局</em></strong>：浏览器将元素进行定位、布局。</li>\n<li><strong><em>绘制</em></strong>：绘制元素样式，颜色、背景、大小、边框等。</li>\n<li><strong><em>合成</em></strong>：将各层合成到一起、显示在屏幕上。</li>\n</ul>\n<p><img src=\"https://sfault-image.b0.upaiyun.com/951/893/951893846-5766c220cc68c_articlex\" alt=\"\"></p>\n<p>如果我们是做一个动画，一般会用 JS 更改相应样式，接着浏览器就会经历 JS 运行、样式计算、布局、绘制、合成等多个重要步骤（后面还会讲到这个步骤实际过程中可以更长或者更短）。那么要做的优化就是在这几个步骤中进行优化并且尽量去掉中间的耗时步骤。<br><img src=\"https://sfault-image.b0.upaiyun.com/396/985/3969857354-5766c2228ceed_articlex\" alt=\"\"></p>\n<h3 id=\"优化JavaScript的执行\"><a href=\"#优化JavaScript的执行\" class=\"headerlink\" title=\"优化JavaScript的执行\"></a>优化JavaScript的执行</h3><ul>\n<li>函数的输入事件处理</li>\n<li>优化处理</li>\n</ul>\n<h3 id=\"样式计算\"><a href=\"#样式计算\" class=\"headerlink\" title=\"样式计算\"></a>样式计算</h3><ul>\n<li>减小选择器的复杂性</li>\n<li>减少样式的计算量</li>\n</ul>\n<h3 id=\"布局\"><a href=\"#布局\" class=\"headerlink\" title=\"布局\"></a>布局</h3><ul>\n<li>避免触发布局</li>\n<li>使用Flexbox布局</li>\n<li>避免强制同步布局事件</li>\n<li>避免快速连续的布局</li>\n</ul>\n<h3 id=\"绘制\"><a href=\"#绘制\" class=\"headerlink\" title=\"绘制\"></a>绘制</h3><ul>\n<li>提升移动或渐变元素的绘制层</li>\n<li>仔细规划动画和简化绘制的复杂度</li>\n</ul>\n<h3 id=\"合成\"><a href=\"#合成\" class=\"headerlink\" title=\"合成\"></a>合成</h3><ul>\n<li>使用transform/opacity实现动画效果</li>\n<li>管理渲染层、避免过多数量的层</li>\n</ul>\n<h3 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h3><ul>\n<li>关注趋势，今天很多的性能瓶颈很可能在将来都不再是问题。</li>\n<li>充分利用工具 Chrome DevTools。</li>\n<li>不要进行微优化，有时花上很短的带来的性能提升却很小，对于日常快速迭代的业务是没必要这样做的。</li>\n</ul>\n<p><a href=\"https://segmentfault.com/a/1190000005754881\">更多详细关于页面渲染的内容，请查看</a></p>"},{"title":".htaccess 文件功能及配置介绍","date":"2016-09-05T02:00:00.000Z","_content":"\nURL重定向是`.htaccess` 的重头戏，它可以将长地址转为短地址、将动态地址转为静态地址、重定向丢失的页面、防止盗链、实现自动语言转换等等。\n\n**难点：** 正则表达式的运用和理解。\n\n<!-- more -->\n## 准备 mod_rewrite\n要实现上述功能，首先得装上mod_rewrite 模块，并确保启用了该模块。\n\n一般我们会这样设置。\n```\n<IfModule mod_rewrite.c>\n  Options +FollowSymlinks\n  RewriteEngine on\n  ...\n\n<IfModule>\n```\n***Tips:***\n* FollowSymlinks:必须启用，这是rewrite引擎的安全要求。\n* RewriteEngine：用于启用rewrite引擎。\n\n## URL重写及重定向\n利用`.htaccess` 文件可以实现对URL的重写（rewrite）与重定向（redirect）\n1. 将`.html` 映射到`.php`\n```\n  Options +FollowSymlinks\n  RewriteEngine on\n  RewriteRule ^(.*)\\.html$ $1.php [NC]\n```\n***注***\n  - 必须保证服务器上有对应的`.php` 文件，否则会报 404\n  - 浏览器和搜索引擎可同事用`.html` 和`.php` 访问到网页。\n  - [NC] 表示不区分大小写\n\n2. 临时重定向（R=302）与永久重定向（R=301）\n```\nRewriteEngine on\nRewriteBase /\nRewriteRule ^(.*)\\.html $1.php [R,NC,L]\n```\n***注***\n  - RewriteBase 定义了重写基准目录。\n  > 例如，如虚拟机站点设在 /var/www目录下，删除这行这行将会导致重定向到 http://your-domain/var/www/1.php. 显然这不是我们想要的。如果RewriteBase /base/，那么将会重定向到http://your-domain/base/1.php.\n\n  - 对于重写基准目录，我们还可以将 `$1.php` 变成 `/$1.php` 实现直接变换，这是就可以将 `RewriteBase` 省略。\n  - 字母`L`，表示如果能匹配到本条规则，则本条规则是最后一条（Last），忽略之后的规则。\n\n  永久重定向（R=301）\n```\nRewriteEngine on\nRewriteRule ^(.*)$ http://newdomain/$1 [R=301,NC,L]\n```\n\n3. 为什么要用重定向\n  1. 通过重定向，浏览器知道页面位置发生变化，从而会改变地址栏到新的地址。\n  2. 通过重定向，搜索引擎能够发现位置发生变化，从而进行更新。\n  3. R=302，R=301都是亲搜索引擎的，是SEO的一个重要手段。\n  4. **URL重写用于将页面映射到本站的另一页面，而重写到另一个域名下，则安重定向处理。**\n\n4. 长短地址处理   \n> 利用URL重写，方便实现长短地址转换。\n\n  ```\nRewriteEngine on\nRewriteRule ^grab /public/files/download/download.php\n```\n若访问 http://your-domain/grab?file=my.zip, 则页面会实际执行该页面 http://your-domain/public/files/download/download.php?file=my.zip\n5. 去掉WWW\n```\nRewriteEngine on\nRewriteCond %{HTTP_HOST} ^(.*)$\nRewriteRule (.*) http://www\\.%1/$1 [R=301,L]\n```\n***注:***\n  - RewriteCond 定义了规则的生效条件。即，一个RewriteRule规则之前可以有一个或者多个RewriteCond指令。\n  - 语法：RewriteCond TestString CondPattern [flags]\n\n6. 加上www\n```\nRewriteEngine on\nRewriteCond %{HTTP_HOST} ^(.*)$\nRewriteRule (.*) http://www\\.%1/$1 [R=301,L]\n```\n\n7. 支持多域名访问\n\n  > 如果有些主机不支持多域名，那么`.htaccess` 或许也可以解决。\n\n  ```\n#one.com\nRewriteCond %{HTTP_HOST} one.com\nRewriteCond %{REQUEST_URI} !^/one\nRewriteRule ^(.*)$ /one/$1 [L]\n#two.com\nRewriteCond %{HTTP_HOST} two.com\nRewriteCond %{REQUEST_URI} !^/two\nRewriteRule ^(.*)$ /two/$1 [L]\n```\n\n## 改写查询字符串 QUERY_STRING\n所谓查询字符串，就是值URL问号之后的部分。\n1. 利用QSA转换 QUERY_STRING\n```\nRewriteEngine on\nRewriteRule /page/(.+) /page.php?page=$1 [QSA]\n```\n***注：***\n 1. 将会把 `/page/123?one=two` 映射到 `/page.php?page=123&one=two`.\n 2. 如果没有[QAS] 标志，则会映射到`page.php?page=123`.\n 3. 如果没有用到小括号正则表达式，就不需要 QSA\n > 例，将 `/simple/flat/link ` => server-side.php?first-var=flat&second-var=link\n\n    ```\nRewriteEngine on\nRewriteRule ^/simple/([^/]+)/([^/]+)/? /server-side.php?first-var=$1&second-var=$2 [QSA]\n```\n2. 利用RewriteCond 改写 QUERY_STRING\n```\nRewriteEngine On\nRewriteCond %{QUERY_STRING} foo=(.*)\nRewriteRule ^grab(.*) /page.php?bar=%1\n```\n  - 该规则将访问请求http://mysite/grab?foo=bar转换为http://mysite/page.php?bar=bar\n  - RewriteCond用于捕获查询字符串（QUERY_STRING）中变量foo的值，并存储在%1中\n  - QUERY_STRING是Apache定义的“变量=值”向量（数组）\n\n3. RewriteCond与QSA双剑齐发\n```\nRewriteEngine On\nRewriteCond %{QUERY_STRING} foo=(.+)\nRewriteRule ^grab/(.*) /%1/index.php?file=$1 [QSA]\n```\n - 会把/grab/foobar.zip?level=5&foo=bar 映射到 /bar/index.php?file=foobar.zip&level=5&foo=bar\n - 转换后根目录是bar目录\n - foobar.zip?level=5中的“问号”变成了foobar.zip&level=5中的“与”符号\n\n4. 剥离查询字符串\n> 只需在要开始剥离的链接后面加个“问号”，并且不要启用QSA标志，就可剥离查询字符串\n\n  ```\nRewriteEngine On\n# Whatever QS is\nRewriteCond %{QUERY_STRING} .\n# I don't want it with Question mark\nRewriteRule foo.php(.*) /foo.php? [L]\n```\n\n\n\n## 访问控制\n1. 文件访问控制\n> 利用Order、Files及FilesMatch命令实现的访问控制可以满足大部分要求，但是当用户被拒绝时，他们看到的是硕大的“403 Forbidden”，如果你不想伤害用户的感情，就需要显示一些别的东西，通过Rewrite就可以实现这个特性：\n\n  ```\nRewriteEngine On\nRewriteCond %{REQUEST_FILENAME} !^(.+)\\.css$\nRewriteCond %{REQUEST_FILENAME} !^(.+)\\.js$\nRewriteCond %{REQUEST_FILENAME} !special.zip$\nRewriteRule ^(.+)$ /chat/ [NC]\n```\n - 该规则将仅允许用户请求.css, .js类型的文件，还有special.zip文件\n - RewriteRule 后面指定了限制规则：映射到/char/目录下处理\n - RewriteCond 后面的“感叹号”(!)起到了“否定”作用，它表明，对不满足后面正则表达式者应用RewriteRule规则，也就是对当前类型的文件将不应用规则\n - RewriteCond 之间是以逻辑“与”连接的，也就是只有当三个条件都不满足时才执行RewriteRule\n - 该规则也会限制访问.htm, .jpg等格式\n - 该规则不可以放在虚拟站点根目录（/）下，否则会死循环\n - 如果是二级目录，如/test/，那么传入RewriteCond的参数是以/test/开始的，因此从(.+)获得的文件名也含有/test/，读者必须对此多加小心\n - 要想仅获得文件名，可以将(.+)替换成([^/]+)，并且去掉符号^，如下所示：\n```\nRewriteEngine On\nRewriteCond %{REQUEST_FILENAME} !([^/]+)\\.css$\nRewriteCond %{REQUEST_FILENAME} !([^/]+)\\.js$\nRewriteRule ^(.+)$ /chat/ [NC]\n```\n\n2. 用.htaccess阻止User-agent\n> User-agent用于浏览器向服务器“自报家门”，更确切的说是所有HTTP客户端都得用User-agent向服务器“自报家门”，以便服务器对不同的客户端作出不同响应。比如，某站点可能需要对浏览器、搜索引擎crawl还有各类下载工具作出不同的响应。服务器就是通过所谓的User-agent进行区分的。\n如果你的服务器提供某些资源的下载，那么你就必须多加小心诸如“迅雷”等下载软件，因为它们可能把你网站资源吸干，并且影响你的正常访客访问。\n\n  为此，我们可以利用Rewrite限制某些UA的访问：\n  ```\nRewriteEngine on\nRewriteCond %{HTTP_USER_AGENT} 2.0.50727 [NC]\nRewriteRule . abuse.txt [L]\n```\n - 该规则限制“迅雷”客户端下载资源，并将下载文件重置到abuse.txt\n - HTTP_USER_AGENT是Apache的内置变量\n - 2.0.50727是迅雷User-agent的特征字符串\n - RewriteRule后面的“点”表示“任意URI”，也就是不管请求的是什么，都输出abuse.txt\n\n  通常，我们不会仅限制一个UA。利用[OR]即可实现对多个UA作出统一处理：\n  ```\nRewriteEngine on\nRewriteCond %{HTTP_USER_AGENT} 2.0.50727 [NC,OR]\nRewriteCond %{HTTP_USER_AGENT} ^BlackWidow [NC,OR]\n# etc..\nRewriteCond %{HTTP_USER_AGENT} ^Net\\ Vampire [NC]\nRewriteRule . abuse.txt [L]\n```\n\n3. 用.htaccess阻止盗链(hot-linking)\n> 盗链，特别是图片，是非常可耻的！哪怕将图片复制到自己服务器上，也比盗用他人的图片链接来得光彩！\n\n  .htaccess的Rewrite功能可以提供非常简单、有效的方法阻止这种可耻行为：\n  ```\nRewriteEngine On\nRewriteCond %{HTTP_REFERER} !^$\nRewriteCond %{HTTP_REFERER} !^http://(www\\.)?lesca\\.me/ [NC]\nRewriteCond %{REQUEST_URI} !hotlink\\.png [NC]\nRewriteRule .*\\.(gif|jpg|png)$ /hotlink.png [NC]\n```\n简单解释一下该规则的功能：\n - 除本站以外其他网站都不得引用本站图片，具体可以理解为\n - 如果引用站点为“空”或者是“本站”，或者，所引用对象是“hotlink.png”，那么就允许访问\n - 再次提醒，RewriteCond之间默认的逻辑连接词是逻辑“与”\n - 这里的难点是理解逻辑转换，即德·摩根定律\n\n\n## htaccess 缺点\n说了这么多`.htaccess` 可以实现这么多的功能，那么它有没有什么缺点呢?\n\n答案是，当然有。由于开启了`.htaccess` 文件，当我们访问了一个地址对应到服务器端某个目录之后`Apache` 会遍历并解析每层目录下的`.htaccess` 文件，所有对服务器性能会有一定的影响。\n\n但是具体影响有多大，要不要使用还需要看具体的环境。或者需要进行前后对比在进行选择。\n\n## htaccess 生成工具\n说了这么多，貌似真正配置起来还是非常麻烦。不用着急目前网上有非常多`htaccess` 在线生成工具，可大大方便我们进行完成各种配置。\n\n如：[smarty .htaccess :http://htaccess.uuz.cc/](http://htaccess.uuz.cc/)\n\n[转自:Lesca技术宅](http://lesca.me/archives/htaccess-rewrite.html)\n","source":"_posts/htaccess 文件功能及配置整理.md","raw":"---\ntitle: .htaccess 文件功能及配置介绍\ndate: 2016-09-05 10:00:00\ntags:\n- Apache\n- .htaccess\ncategories:\n- Apache\n---\n\nURL重定向是`.htaccess` 的重头戏，它可以将长地址转为短地址、将动态地址转为静态地址、重定向丢失的页面、防止盗链、实现自动语言转换等等。\n\n**难点：** 正则表达式的运用和理解。\n\n<!-- more -->\n## 准备 mod_rewrite\n要实现上述功能，首先得装上mod_rewrite 模块，并确保启用了该模块。\n\n一般我们会这样设置。\n```\n<IfModule mod_rewrite.c>\n  Options +FollowSymlinks\n  RewriteEngine on\n  ...\n\n<IfModule>\n```\n***Tips:***\n* FollowSymlinks:必须启用，这是rewrite引擎的安全要求。\n* RewriteEngine：用于启用rewrite引擎。\n\n## URL重写及重定向\n利用`.htaccess` 文件可以实现对URL的重写（rewrite）与重定向（redirect）\n1. 将`.html` 映射到`.php`\n```\n  Options +FollowSymlinks\n  RewriteEngine on\n  RewriteRule ^(.*)\\.html$ $1.php [NC]\n```\n***注***\n  - 必须保证服务器上有对应的`.php` 文件，否则会报 404\n  - 浏览器和搜索引擎可同事用`.html` 和`.php` 访问到网页。\n  - [NC] 表示不区分大小写\n\n2. 临时重定向（R=302）与永久重定向（R=301）\n```\nRewriteEngine on\nRewriteBase /\nRewriteRule ^(.*)\\.html $1.php [R,NC,L]\n```\n***注***\n  - RewriteBase 定义了重写基准目录。\n  > 例如，如虚拟机站点设在 /var/www目录下，删除这行这行将会导致重定向到 http://your-domain/var/www/1.php. 显然这不是我们想要的。如果RewriteBase /base/，那么将会重定向到http://your-domain/base/1.php.\n\n  - 对于重写基准目录，我们还可以将 `$1.php` 变成 `/$1.php` 实现直接变换，这是就可以将 `RewriteBase` 省略。\n  - 字母`L`，表示如果能匹配到本条规则，则本条规则是最后一条（Last），忽略之后的规则。\n\n  永久重定向（R=301）\n```\nRewriteEngine on\nRewriteRule ^(.*)$ http://newdomain/$1 [R=301,NC,L]\n```\n\n3. 为什么要用重定向\n  1. 通过重定向，浏览器知道页面位置发生变化，从而会改变地址栏到新的地址。\n  2. 通过重定向，搜索引擎能够发现位置发生变化，从而进行更新。\n  3. R=302，R=301都是亲搜索引擎的，是SEO的一个重要手段。\n  4. **URL重写用于将页面映射到本站的另一页面，而重写到另一个域名下，则安重定向处理。**\n\n4. 长短地址处理   \n> 利用URL重写，方便实现长短地址转换。\n\n  ```\nRewriteEngine on\nRewriteRule ^grab /public/files/download/download.php\n```\n若访问 http://your-domain/grab?file=my.zip, 则页面会实际执行该页面 http://your-domain/public/files/download/download.php?file=my.zip\n5. 去掉WWW\n```\nRewriteEngine on\nRewriteCond %{HTTP_HOST} ^(.*)$\nRewriteRule (.*) http://www\\.%1/$1 [R=301,L]\n```\n***注:***\n  - RewriteCond 定义了规则的生效条件。即，一个RewriteRule规则之前可以有一个或者多个RewriteCond指令。\n  - 语法：RewriteCond TestString CondPattern [flags]\n\n6. 加上www\n```\nRewriteEngine on\nRewriteCond %{HTTP_HOST} ^(.*)$\nRewriteRule (.*) http://www\\.%1/$1 [R=301,L]\n```\n\n7. 支持多域名访问\n\n  > 如果有些主机不支持多域名，那么`.htaccess` 或许也可以解决。\n\n  ```\n#one.com\nRewriteCond %{HTTP_HOST} one.com\nRewriteCond %{REQUEST_URI} !^/one\nRewriteRule ^(.*)$ /one/$1 [L]\n#two.com\nRewriteCond %{HTTP_HOST} two.com\nRewriteCond %{REQUEST_URI} !^/two\nRewriteRule ^(.*)$ /two/$1 [L]\n```\n\n## 改写查询字符串 QUERY_STRING\n所谓查询字符串，就是值URL问号之后的部分。\n1. 利用QSA转换 QUERY_STRING\n```\nRewriteEngine on\nRewriteRule /page/(.+) /page.php?page=$1 [QSA]\n```\n***注：***\n 1. 将会把 `/page/123?one=two` 映射到 `/page.php?page=123&one=two`.\n 2. 如果没有[QAS] 标志，则会映射到`page.php?page=123`.\n 3. 如果没有用到小括号正则表达式，就不需要 QSA\n > 例，将 `/simple/flat/link ` => server-side.php?first-var=flat&second-var=link\n\n    ```\nRewriteEngine on\nRewriteRule ^/simple/([^/]+)/([^/]+)/? /server-side.php?first-var=$1&second-var=$2 [QSA]\n```\n2. 利用RewriteCond 改写 QUERY_STRING\n```\nRewriteEngine On\nRewriteCond %{QUERY_STRING} foo=(.*)\nRewriteRule ^grab(.*) /page.php?bar=%1\n```\n  - 该规则将访问请求http://mysite/grab?foo=bar转换为http://mysite/page.php?bar=bar\n  - RewriteCond用于捕获查询字符串（QUERY_STRING）中变量foo的值，并存储在%1中\n  - QUERY_STRING是Apache定义的“变量=值”向量（数组）\n\n3. RewriteCond与QSA双剑齐发\n```\nRewriteEngine On\nRewriteCond %{QUERY_STRING} foo=(.+)\nRewriteRule ^grab/(.*) /%1/index.php?file=$1 [QSA]\n```\n - 会把/grab/foobar.zip?level=5&foo=bar 映射到 /bar/index.php?file=foobar.zip&level=5&foo=bar\n - 转换后根目录是bar目录\n - foobar.zip?level=5中的“问号”变成了foobar.zip&level=5中的“与”符号\n\n4. 剥离查询字符串\n> 只需在要开始剥离的链接后面加个“问号”，并且不要启用QSA标志，就可剥离查询字符串\n\n  ```\nRewriteEngine On\n# Whatever QS is\nRewriteCond %{QUERY_STRING} .\n# I don't want it with Question mark\nRewriteRule foo.php(.*) /foo.php? [L]\n```\n\n\n\n## 访问控制\n1. 文件访问控制\n> 利用Order、Files及FilesMatch命令实现的访问控制可以满足大部分要求，但是当用户被拒绝时，他们看到的是硕大的“403 Forbidden”，如果你不想伤害用户的感情，就需要显示一些别的东西，通过Rewrite就可以实现这个特性：\n\n  ```\nRewriteEngine On\nRewriteCond %{REQUEST_FILENAME} !^(.+)\\.css$\nRewriteCond %{REQUEST_FILENAME} !^(.+)\\.js$\nRewriteCond %{REQUEST_FILENAME} !special.zip$\nRewriteRule ^(.+)$ /chat/ [NC]\n```\n - 该规则将仅允许用户请求.css, .js类型的文件，还有special.zip文件\n - RewriteRule 后面指定了限制规则：映射到/char/目录下处理\n - RewriteCond 后面的“感叹号”(!)起到了“否定”作用，它表明，对不满足后面正则表达式者应用RewriteRule规则，也就是对当前类型的文件将不应用规则\n - RewriteCond 之间是以逻辑“与”连接的，也就是只有当三个条件都不满足时才执行RewriteRule\n - 该规则也会限制访问.htm, .jpg等格式\n - 该规则不可以放在虚拟站点根目录（/）下，否则会死循环\n - 如果是二级目录，如/test/，那么传入RewriteCond的参数是以/test/开始的，因此从(.+)获得的文件名也含有/test/，读者必须对此多加小心\n - 要想仅获得文件名，可以将(.+)替换成([^/]+)，并且去掉符号^，如下所示：\n```\nRewriteEngine On\nRewriteCond %{REQUEST_FILENAME} !([^/]+)\\.css$\nRewriteCond %{REQUEST_FILENAME} !([^/]+)\\.js$\nRewriteRule ^(.+)$ /chat/ [NC]\n```\n\n2. 用.htaccess阻止User-agent\n> User-agent用于浏览器向服务器“自报家门”，更确切的说是所有HTTP客户端都得用User-agent向服务器“自报家门”，以便服务器对不同的客户端作出不同响应。比如，某站点可能需要对浏览器、搜索引擎crawl还有各类下载工具作出不同的响应。服务器就是通过所谓的User-agent进行区分的。\n如果你的服务器提供某些资源的下载，那么你就必须多加小心诸如“迅雷”等下载软件，因为它们可能把你网站资源吸干，并且影响你的正常访客访问。\n\n  为此，我们可以利用Rewrite限制某些UA的访问：\n  ```\nRewriteEngine on\nRewriteCond %{HTTP_USER_AGENT} 2.0.50727 [NC]\nRewriteRule . abuse.txt [L]\n```\n - 该规则限制“迅雷”客户端下载资源，并将下载文件重置到abuse.txt\n - HTTP_USER_AGENT是Apache的内置变量\n - 2.0.50727是迅雷User-agent的特征字符串\n - RewriteRule后面的“点”表示“任意URI”，也就是不管请求的是什么，都输出abuse.txt\n\n  通常，我们不会仅限制一个UA。利用[OR]即可实现对多个UA作出统一处理：\n  ```\nRewriteEngine on\nRewriteCond %{HTTP_USER_AGENT} 2.0.50727 [NC,OR]\nRewriteCond %{HTTP_USER_AGENT} ^BlackWidow [NC,OR]\n# etc..\nRewriteCond %{HTTP_USER_AGENT} ^Net\\ Vampire [NC]\nRewriteRule . abuse.txt [L]\n```\n\n3. 用.htaccess阻止盗链(hot-linking)\n> 盗链，特别是图片，是非常可耻的！哪怕将图片复制到自己服务器上，也比盗用他人的图片链接来得光彩！\n\n  .htaccess的Rewrite功能可以提供非常简单、有效的方法阻止这种可耻行为：\n  ```\nRewriteEngine On\nRewriteCond %{HTTP_REFERER} !^$\nRewriteCond %{HTTP_REFERER} !^http://(www\\.)?lesca\\.me/ [NC]\nRewriteCond %{REQUEST_URI} !hotlink\\.png [NC]\nRewriteRule .*\\.(gif|jpg|png)$ /hotlink.png [NC]\n```\n简单解释一下该规则的功能：\n - 除本站以外其他网站都不得引用本站图片，具体可以理解为\n - 如果引用站点为“空”或者是“本站”，或者，所引用对象是“hotlink.png”，那么就允许访问\n - 再次提醒，RewriteCond之间默认的逻辑连接词是逻辑“与”\n - 这里的难点是理解逻辑转换，即德·摩根定律\n\n\n## htaccess 缺点\n说了这么多`.htaccess` 可以实现这么多的功能，那么它有没有什么缺点呢?\n\n答案是，当然有。由于开启了`.htaccess` 文件，当我们访问了一个地址对应到服务器端某个目录之后`Apache` 会遍历并解析每层目录下的`.htaccess` 文件，所有对服务器性能会有一定的影响。\n\n但是具体影响有多大，要不要使用还需要看具体的环境。或者需要进行前后对比在进行选择。\n\n## htaccess 生成工具\n说了这么多，貌似真正配置起来还是非常麻烦。不用着急目前网上有非常多`htaccess` 在线生成工具，可大大方便我们进行完成各种配置。\n\n如：[smarty .htaccess :http://htaccess.uuz.cc/](http://htaccess.uuz.cc/)\n\n[转自:Lesca技术宅](http://lesca.me/archives/htaccess-rewrite.html)\n","slug":"htaccess 文件功能及配置整理","published":1,"updated":"2016-09-05T11:44:28.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"city8vnog002bg29fcr549pnh","content":"<p>URL重定向是<code>.htaccess</code> 的重头戏，它可以将长地址转为短地址、将动态地址转为静态地址、重定向丢失的页面、防止盗链、实现自动语言转换等等。</p>\n<p><strong>难点：</strong> 正则表达式的运用和理解。</p>\n<a id=\"more\"></a>\n<h2 id=\"准备-mod-rewrite\"><a href=\"#准备-mod-rewrite\" class=\"headerlink\" title=\"准备 mod_rewrite\"></a>准备 mod_rewrite</h2><p>要实现上述功能，首先得装上mod_rewrite 模块，并确保启用了该模块。</p>\n<p>一般我们会这样设置。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;IfModule mod_rewrite.c&gt;</div><div class=\"line\">  Options +FollowSymlinks</div><div class=\"line\">  RewriteEngine on</div><div class=\"line\">  ...</div><div class=\"line\"></div><div class=\"line\">&lt;IfModule&gt;</div></pre></td></tr></table></figure></p>\n<p><strong><em>Tips:</em></strong></p>\n<ul>\n<li>FollowSymlinks:必须启用，这是rewrite引擎的安全要求。</li>\n<li>RewriteEngine：用于启用rewrite引擎。</li>\n</ul>\n<h2 id=\"URL重写及重定向\"><a href=\"#URL重写及重定向\" class=\"headerlink\" title=\"URL重写及重定向\"></a>URL重写及重定向</h2><p>利用<code>.htaccess</code> 文件可以实现对URL的重写（rewrite）与重定向（redirect）</p>\n<ol>\n<li>将<code>.html</code> 映射到<code>.php</code><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">Options +FollowSymlinks</div><div class=\"line\">RewriteEngine on</div><div class=\"line\">RewriteRule ^(.*)\\.html$ $1.php [NC]</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<p><strong><em>注</em></strong></p>\n<ul>\n<li>必须保证服务器上有对应的<code>.php</code> 文件，否则会报 404</li>\n<li>浏览器和搜索引擎可同事用<code>.html</code> 和<code>.php</code> 访问到网页。</li>\n<li>[NC] 表示不区分大小写</li>\n</ul>\n<ol>\n<li>临时重定向（R=302）与永久重定向（R=301）<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">RewriteEngine on</div><div class=\"line\">RewriteBase /</div><div class=\"line\">RewriteRule ^(.*)\\.html $1.php [R,NC,L]</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<p><strong><em>注</em></strong></p>\n<ul>\n<li><p>RewriteBase 定义了重写基准目录。</p>\n<blockquote>\n<p>例如，如虚拟机站点设在 /var/www目录下，删除这行这行将会导致重定向到 <a href=\"http://your-domain/var/www/1.php\" target=\"_blank\" rel=\"external\">http://your-domain/var/www/1.php</a>. 显然这不是我们想要的。如果RewriteBase /base/，那么将会重定向到<a href=\"http://your-domain/base/1.php\" target=\"_blank\" rel=\"external\">http://your-domain/base/1.php</a>.</p>\n</blockquote>\n</li>\n<li><p>对于重写基准目录，我们还可以将 <code>$1.php</code> 变成 <code>/$1.php</code> 实现直接变换，这是就可以将 <code>RewriteBase</code> 省略。</p>\n</li>\n<li><p>字母<code>L</code>，表示如果能匹配到本条规则，则本条规则是最后一条（Last），忽略之后的规则。</p>\n<p>永久重定向（R=301）</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">RewriteEngine on</div><div class=\"line\">RewriteRule ^(.*)$ http://newdomain/$1 [R=301,NC,L]</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<ol>\n<li><p>为什么要用重定向</p>\n<ol>\n<li>通过重定向，浏览器知道页面位置发生变化，从而会改变地址栏到新的地址。</li>\n<li>通过重定向，搜索引擎能够发现位置发生变化，从而进行更新。</li>\n<li>R=302，R=301都是亲搜索引擎的，是SEO的一个重要手段。</li>\n<li><strong>URL重写用于将页面映射到本站的另一页面，而重写到另一个域名下，则安重定向处理。</strong></li>\n</ol>\n</li>\n<li><p>长短地址处理   </p>\n<blockquote>\n<p>利用URL重写，方便实现长短地址转换。</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">RewriteEngine on</div><div class=\"line\">RewriteRule ^grab /public/files/download/download.php</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>若访问 <a href=\"http://your-domain/grab?file=my.zip\" target=\"_blank\" rel=\"external\">http://your-domain/grab?file=my.zip</a>, 则页面会实际执行该页面 <a href=\"http://your-domain/public/files/download/download.php?file=my.zip\" target=\"_blank\" rel=\"external\">http://your-domain/public/files/download/download.php?file=my.zip</a></p>\n<ol>\n<li>去掉WWW<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">RewriteEngine on</div><div class=\"line\">RewriteCond %&#123;HTTP_HOST&#125; ^(.*)$</div><div class=\"line\">RewriteRule (.*) http://www\\.%1/$1 [R=301,L]</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<p><strong><em>注:</em></strong></p>\n<ul>\n<li>RewriteCond 定义了规则的生效条件。即，一个RewriteRule规则之前可以有一个或者多个RewriteCond指令。</li>\n<li>语法：RewriteCond TestString CondPattern [flags]</li>\n</ul>\n<ol>\n<li><p>加上www</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">RewriteEngine on</div><div class=\"line\">RewriteCond %&#123;HTTP_HOST&#125; ^(.*)$</div><div class=\"line\">RewriteRule (.*) http://www\\.%1/$1 [R=301,L]</div></pre></td></tr></table></figure>\n</li>\n<li><p>支持多域名访问</p>\n<blockquote>\n<p>如果有些主机不支持多域名，那么<code>.htaccess</code> 或许也可以解决。</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">#one.com</div><div class=\"line\">RewriteCond %&#123;HTTP_HOST&#125; one.com</div><div class=\"line\">RewriteCond %&#123;REQUEST_URI&#125; !^/one</div><div class=\"line\">RewriteRule ^(.*)$ /one/$1 [L]</div><div class=\"line\">#two.com</div><div class=\"line\">RewriteCond %&#123;HTTP_HOST&#125; two.com</div><div class=\"line\">RewriteCond %&#123;REQUEST_URI&#125; !^/two</div><div class=\"line\">RewriteRule ^(.*)$ /two/$1 [L]</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<h2 id=\"改写查询字符串-QUERY-STRING\"><a href=\"#改写查询字符串-QUERY-STRING\" class=\"headerlink\" title=\"改写查询字符串 QUERY_STRING\"></a>改写查询字符串 QUERY_STRING</h2><p>所谓查询字符串，就是值URL问号之后的部分。</p>\n<ol>\n<li>利用QSA转换 QUERY_STRING<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">RewriteEngine on</div><div class=\"line\">RewriteRule /page/(.+) /page.php?page=$1 [QSA]</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<p><strong><em>注：</em></strong></p>\n<ol>\n<li>将会把 <code>/page/123?one=two</code> 映射到 <code>/page.php?page=123&amp;one=two</code>.</li>\n<li>如果没有[QAS] 标志，则会映射到<code>page.php?page=123</code>.</li>\n<li><p>如果没有用到小括号正则表达式，就不需要 QSA</p>\n<blockquote>\n<p>例，将 <code>/simple/flat/link</code> =&gt; server-side.php?first-var=flat&amp;second-var=link</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">RewriteEngine on</div><div class=\"line\">RewriteRule ^/simple/([^/]+)/([^/]+)/? /server-side.php?first-var=$1&amp;second-var=$2 [QSA]</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<ol>\n<li><p>利用RewriteCond 改写 QUERY_STRING</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">RewriteEngine On</div><div class=\"line\">RewriteCond %&#123;QUERY_STRING&#125; foo=(.*)</div><div class=\"line\">RewriteRule ^grab(.*) /page.php?bar=%1</div></pre></td></tr></table></figure>\n<ul>\n<li>该规则将访问请求<a href=\"http://mysite/grab?foo=bar转换为http://mysite/page.php?bar=bar\" target=\"_blank\" rel=\"external\">http://mysite/grab?foo=bar转换为http://mysite/page.php?bar=bar</a></li>\n<li>RewriteCond用于捕获查询字符串（QUERY_STRING）中变量foo的值，并存储在%1中</li>\n<li>QUERY_STRING是Apache定义的“变量=值”向量（数组）</li>\n</ul>\n</li>\n<li><p>RewriteCond与QSA双剑齐发</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">RewriteEngine On</div><div class=\"line\">RewriteCond %&#123;QUERY_STRING&#125; foo=(.+)</div><div class=\"line\">RewriteRule ^grab/(.*) /%1/index.php?file=$1 [QSA]</div></pre></td></tr></table></figure>\n<ul>\n<li>会把/grab/foobar.zip?level=5&amp;foo=bar 映射到 /bar/index.php?file=foobar.zip&amp;level=5&amp;foo=bar</li>\n<li>转换后根目录是bar目录</li>\n<li>foobar.zip?level=5中的“问号”变成了foobar.zip&amp;level=5中的“与”符号</li>\n</ul>\n</li>\n<li><p>剥离查询字符串</p>\n<blockquote>\n<p>只需在要开始剥离的链接后面加个“问号”，并且不要启用QSA标志，就可剥离查询字符串</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">RewriteEngine On</div><div class=\"line\"># Whatever QS is</div><div class=\"line\">RewriteCond %&#123;QUERY_STRING&#125; .</div><div class=\"line\"># I don&apos;t want it with Question mark</div><div class=\"line\">RewriteRule foo.php(.*) /foo.php? [L]</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<h2 id=\"访问控制\"><a href=\"#访问控制\" class=\"headerlink\" title=\"访问控制\"></a>访问控制</h2><ol>\n<li><p>文件访问控制</p>\n<blockquote>\n<p>利用Order、Files及FilesMatch命令实现的访问控制可以满足大部分要求，但是当用户被拒绝时，他们看到的是硕大的“403 Forbidden”，如果你不想伤害用户的感情，就需要显示一些别的东西，通过Rewrite就可以实现这个特性：</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">RewriteEngine On</div><div class=\"line\">RewriteCond %&#123;REQUEST_FILENAME&#125; !^(.+)\\.css$</div><div class=\"line\">RewriteCond %&#123;REQUEST_FILENAME&#125; !^(.+)\\.js$</div><div class=\"line\">RewriteCond %&#123;REQUEST_FILENAME&#125; !special.zip$</div><div class=\"line\">RewriteRule ^(.+)$ /chat/ [NC]</div></pre></td></tr></table></figure>\n<ul>\n<li>该规则将仅允许用户请求.css, .js类型的文件，还有special.zip文件</li>\n<li>RewriteRule 后面指定了限制规则：映射到/char/目录下处理</li>\n<li>RewriteCond 后面的“感叹号”(!)起到了“否定”作用，它表明，对不满足后面正则表达式者应用RewriteRule规则，也就是对当前类型的文件将不应用规则</li>\n<li>RewriteCond 之间是以逻辑“与”连接的，也就是只有当三个条件都不满足时才执行RewriteRule</li>\n<li>该规则也会限制访问.htm, .jpg等格式</li>\n<li>该规则不可以放在虚拟站点根目录（/）下，否则会死循环</li>\n<li>如果是二级目录，如/test/，那么传入RewriteCond的参数是以/test/开始的，因此从(.+)获得的文件名也含有/test/，读者必须对此多加小心</li>\n<li>要想仅获得文件名，可以将(.+)替换成([^/]+)，并且去掉符号^，如下所示：<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">RewriteEngine On</div><div class=\"line\">RewriteCond %&#123;REQUEST_FILENAME&#125; !([^/]+)\\.css$</div><div class=\"line\">RewriteCond %&#123;REQUEST_FILENAME&#125; !([^/]+)\\.js$</div><div class=\"line\">RewriteRule ^(.+)$ /chat/ [NC]</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p>用.htaccess阻止User-agent</p>\n<blockquote>\n<p>User-agent用于浏览器向服务器“自报家门”，更确切的说是所有HTTP客户端都得用User-agent向服务器“自报家门”，以便服务器对不同的客户端作出不同响应。比如，某站点可能需要对浏览器、搜索引擎crawl还有各类下载工具作出不同的响应。服务器就是通过所谓的User-agent进行区分的。<br>如果你的服务器提供某些资源的下载，那么你就必须多加小心诸如“迅雷”等下载软件，因为它们可能把你网站资源吸干，并且影响你的正常访客访问。</p>\n</blockquote>\n<p>为此，我们可以利用Rewrite限制某些UA的访问：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">RewriteEngine on</div><div class=\"line\">RewriteCond %&#123;HTTP_USER_AGENT&#125; 2.0.50727 [NC]</div><div class=\"line\">RewriteRule . abuse.txt [L]</div></pre></td></tr></table></figure>\n<ul>\n<li>该规则限制“迅雷”客户端下载资源，并将下载文件重置到abuse.txt</li>\n<li>HTTP_USER_AGENT是Apache的内置变量</li>\n<li>2.0.50727是迅雷User-agent的特征字符串</li>\n<li>RewriteRule后面的“点”表示“任意URI”，也就是不管请求的是什么，都输出abuse.txt</li>\n</ul>\n<p>通常，我们不会仅限制一个UA。利用[OR]即可实现对多个UA作出统一处理：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">RewriteEngine on</div><div class=\"line\">RewriteCond %&#123;HTTP_USER_AGENT&#125; 2.0.50727 [NC,OR]</div><div class=\"line\">RewriteCond %&#123;HTTP_USER_AGENT&#125; ^BlackWidow [NC,OR]</div><div class=\"line\"># etc..</div><div class=\"line\">RewriteCond %&#123;HTTP_USER_AGENT&#125; ^Net\\ Vampire [NC]</div><div class=\"line\">RewriteRule . abuse.txt [L]</div></pre></td></tr></table></figure>\n</li>\n<li><p>用.htaccess阻止盗链(hot-linking)</p>\n<blockquote>\n<p>盗链，特别是图片，是非常可耻的！哪怕将图片复制到自己服务器上，也比盗用他人的图片链接来得光彩！</p>\n</blockquote>\n<p>.htaccess的Rewrite功能可以提供非常简单、有效的方法阻止这种可耻行为：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">RewriteEngine On</div><div class=\"line\">RewriteCond %&#123;HTTP_REFERER&#125; !^$</div><div class=\"line\">RewriteCond %&#123;HTTP_REFERER&#125; !^http://(www\\.)?lesca\\.me/ [NC]</div><div class=\"line\">RewriteCond %&#123;REQUEST_URI&#125; !hotlink\\.png [NC]</div><div class=\"line\">RewriteRule .*\\.(gif|jpg|png)$ /hotlink.png [NC]</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>简单解释一下该规则的功能：</p>\n<ul>\n<li>除本站以外其他网站都不得引用本站图片，具体可以理解为</li>\n<li>如果引用站点为“空”或者是“本站”，或者，所引用对象是“hotlink.png”，那么就允许访问</li>\n<li>再次提醒，RewriteCond之间默认的逻辑连接词是逻辑“与”</li>\n<li>这里的难点是理解逻辑转换，即德·摩根定律</li>\n</ul>\n<h2 id=\"htaccess-缺点\"><a href=\"#htaccess-缺点\" class=\"headerlink\" title=\"htaccess 缺点\"></a>htaccess 缺点</h2><p>说了这么多<code>.htaccess</code> 可以实现这么多的功能，那么它有没有什么缺点呢?</p>\n<p>答案是，当然有。由于开启了<code>.htaccess</code> 文件，当我们访问了一个地址对应到服务器端某个目录之后<code>Apache</code> 会遍历并解析每层目录下的<code>.htaccess</code> 文件，所有对服务器性能会有一定的影响。</p>\n<p>但是具体影响有多大，要不要使用还需要看具体的环境。或者需要进行前后对比在进行选择。</p>\n<h2 id=\"htaccess-生成工具\"><a href=\"#htaccess-生成工具\" class=\"headerlink\" title=\"htaccess 生成工具\"></a>htaccess 生成工具</h2><p>说了这么多，貌似真正配置起来还是非常麻烦。不用着急目前网上有非常多<code>htaccess</code> 在线生成工具，可大大方便我们进行完成各种配置。</p>\n<p>如：<a href=\"http://htaccess.uuz.cc/\" target=\"_blank\" rel=\"external\">smarty .htaccess :http://htaccess.uuz.cc/</a></p>\n<p><a href=\"http://lesca.me/archives/htaccess-rewrite.html\" target=\"_blank\" rel=\"external\">转自:Lesca技术宅</a></p>\n","excerpt":"<p>URL重定向是<code>.htaccess</code> 的重头戏，它可以将长地址转为短地址、将动态地址转为静态地址、重定向丢失的页面、防止盗链、实现自动语言转换等等。</p>\n<p><strong>难点：</strong> 正则表达式的运用和理解。</p>","more":"<h2 id=\"准备-mod-rewrite\"><a href=\"#准备-mod-rewrite\" class=\"headerlink\" title=\"准备 mod_rewrite\"></a>准备 mod_rewrite</h2><p>要实现上述功能，首先得装上mod_rewrite 模块，并确保启用了该模块。</p>\n<p>一般我们会这样设置。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;IfModule mod_rewrite.c&gt;</div><div class=\"line\">  Options +FollowSymlinks</div><div class=\"line\">  RewriteEngine on</div><div class=\"line\">  ...</div><div class=\"line\"></div><div class=\"line\">&lt;IfModule&gt;</div></pre></td></tr></table></figure></p>\n<p><strong><em>Tips:</em></strong></p>\n<ul>\n<li>FollowSymlinks:必须启用，这是rewrite引擎的安全要求。</li>\n<li>RewriteEngine：用于启用rewrite引擎。</li>\n</ul>\n<h2 id=\"URL重写及重定向\"><a href=\"#URL重写及重定向\" class=\"headerlink\" title=\"URL重写及重定向\"></a>URL重写及重定向</h2><p>利用<code>.htaccess</code> 文件可以实现对URL的重写（rewrite）与重定向（redirect）</p>\n<ol>\n<li>将<code>.html</code> 映射到<code>.php</code><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">Options +FollowSymlinks</div><div class=\"line\">RewriteEngine on</div><div class=\"line\">RewriteRule ^(.*)\\.html$ $1.php [NC]</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<p><strong><em>注</em></strong></p>\n<ul>\n<li>必须保证服务器上有对应的<code>.php</code> 文件，否则会报 404</li>\n<li>浏览器和搜索引擎可同事用<code>.html</code> 和<code>.php</code> 访问到网页。</li>\n<li>[NC] 表示不区分大小写</li>\n</ul>\n<ol>\n<li>临时重定向（R=302）与永久重定向（R=301）<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">RewriteEngine on</div><div class=\"line\">RewriteBase /</div><div class=\"line\">RewriteRule ^(.*)\\.html $1.php [R,NC,L]</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<p><strong><em>注</em></strong></p>\n<ul>\n<li><p>RewriteBase 定义了重写基准目录。</p>\n<blockquote>\n<p>例如，如虚拟机站点设在 /var/www目录下，删除这行这行将会导致重定向到 <a href=\"http://your-domain/var/www/1.php\">http://your-domain/var/www/1.php</a>. 显然这不是我们想要的。如果RewriteBase /base/，那么将会重定向到<a href=\"http://your-domain/base/1.php\">http://your-domain/base/1.php</a>.</p>\n</blockquote>\n</li>\n<li><p>对于重写基准目录，我们还可以将 <code>$1.php</code> 变成 <code>/$1.php</code> 实现直接变换，这是就可以将 <code>RewriteBase</code> 省略。</p>\n</li>\n<li><p>字母<code>L</code>，表示如果能匹配到本条规则，则本条规则是最后一条（Last），忽略之后的规则。</p>\n<p>永久重定向（R=301）</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">RewriteEngine on</div><div class=\"line\">RewriteRule ^(.*)$ http://newdomain/$1 [R=301,NC,L]</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<ol>\n<li><p>为什么要用重定向</p>\n<ol>\n<li>通过重定向，浏览器知道页面位置发生变化，从而会改变地址栏到新的地址。</li>\n<li>通过重定向，搜索引擎能够发现位置发生变化，从而进行更新。</li>\n<li>R=302，R=301都是亲搜索引擎的，是SEO的一个重要手段。</li>\n<li><strong>URL重写用于将页面映射到本站的另一页面，而重写到另一个域名下，则安重定向处理。</strong></li>\n</ol>\n</li>\n<li><p>长短地址处理   </p>\n<blockquote>\n<p>利用URL重写，方便实现长短地址转换。</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">RewriteEngine on</div><div class=\"line\">RewriteRule ^grab /public/files/download/download.php</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>若访问 <a href=\"http://your-domain/grab?file=my.zip\">http://your-domain/grab?file=my.zip</a>, 则页面会实际执行该页面 <a href=\"http://your-domain/public/files/download/download.php?file=my.zip\">http://your-domain/public/files/download/download.php?file=my.zip</a></p>\n<ol>\n<li>去掉WWW<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">RewriteEngine on</div><div class=\"line\">RewriteCond %&#123;HTTP_HOST&#125; ^(.*)$</div><div class=\"line\">RewriteRule (.*) http://www\\.%1/$1 [R=301,L]</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<p><strong><em>注:</em></strong></p>\n<ul>\n<li>RewriteCond 定义了规则的生效条件。即，一个RewriteRule规则之前可以有一个或者多个RewriteCond指令。</li>\n<li>语法：RewriteCond TestString CondPattern [flags]</li>\n</ul>\n<ol>\n<li><p>加上www</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">RewriteEngine on</div><div class=\"line\">RewriteCond %&#123;HTTP_HOST&#125; ^(.*)$</div><div class=\"line\">RewriteRule (.*) http://www\\.%1/$1 [R=301,L]</div></pre></td></tr></table></figure>\n</li>\n<li><p>支持多域名访问</p>\n<blockquote>\n<p>如果有些主机不支持多域名，那么<code>.htaccess</code> 或许也可以解决。</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">#one.com</div><div class=\"line\">RewriteCond %&#123;HTTP_HOST&#125; one.com</div><div class=\"line\">RewriteCond %&#123;REQUEST_URI&#125; !^/one</div><div class=\"line\">RewriteRule ^(.*)$ /one/$1 [L]</div><div class=\"line\">#two.com</div><div class=\"line\">RewriteCond %&#123;HTTP_HOST&#125; two.com</div><div class=\"line\">RewriteCond %&#123;REQUEST_URI&#125; !^/two</div><div class=\"line\">RewriteRule ^(.*)$ /two/$1 [L]</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<h2 id=\"改写查询字符串-QUERY-STRING\"><a href=\"#改写查询字符串-QUERY-STRING\" class=\"headerlink\" title=\"改写查询字符串 QUERY_STRING\"></a>改写查询字符串 QUERY_STRING</h2><p>所谓查询字符串，就是值URL问号之后的部分。</p>\n<ol>\n<li>利用QSA转换 QUERY_STRING<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">RewriteEngine on</div><div class=\"line\">RewriteRule /page/(.+) /page.php?page=$1 [QSA]</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<p><strong><em>注：</em></strong></p>\n<ol>\n<li>将会把 <code>/page/123?one=two</code> 映射到 <code>/page.php?page=123&amp;one=two</code>.</li>\n<li>如果没有[QAS] 标志，则会映射到<code>page.php?page=123</code>.</li>\n<li><p>如果没有用到小括号正则表达式，就不需要 QSA</p>\n<blockquote>\n<p>例，将 <code>/simple/flat/link</code> =&gt; server-side.php?first-var=flat&amp;second-var=link</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">RewriteEngine on</div><div class=\"line\">RewriteRule ^/simple/([^/]+)/([^/]+)/? /server-side.php?first-var=$1&amp;second-var=$2 [QSA]</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<ol>\n<li><p>利用RewriteCond 改写 QUERY_STRING</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">RewriteEngine On</div><div class=\"line\">RewriteCond %&#123;QUERY_STRING&#125; foo=(.*)</div><div class=\"line\">RewriteRule ^grab(.*) /page.php?bar=%1</div></pre></td></tr></table></figure>\n<ul>\n<li>该规则将访问请求<a href=\"http://mysite/grab?foo=bar转换为http://mysite/page.php?bar=bar\">http://mysite/grab?foo=bar转换为http://mysite/page.php?bar=bar</a></li>\n<li>RewriteCond用于捕获查询字符串（QUERY_STRING）中变量foo的值，并存储在%1中</li>\n<li>QUERY_STRING是Apache定义的“变量=值”向量（数组）</li>\n</ul>\n</li>\n<li><p>RewriteCond与QSA双剑齐发</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">RewriteEngine On</div><div class=\"line\">RewriteCond %&#123;QUERY_STRING&#125; foo=(.+)</div><div class=\"line\">RewriteRule ^grab/(.*) /%1/index.php?file=$1 [QSA]</div></pre></td></tr></table></figure>\n<ul>\n<li>会把/grab/foobar.zip?level=5&amp;foo=bar 映射到 /bar/index.php?file=foobar.zip&amp;level=5&amp;foo=bar</li>\n<li>转换后根目录是bar目录</li>\n<li>foobar.zip?level=5中的“问号”变成了foobar.zip&amp;level=5中的“与”符号</li>\n</ul>\n</li>\n<li><p>剥离查询字符串</p>\n<blockquote>\n<p>只需在要开始剥离的链接后面加个“问号”，并且不要启用QSA标志，就可剥离查询字符串</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">RewriteEngine On</div><div class=\"line\"># Whatever QS is</div><div class=\"line\">RewriteCond %&#123;QUERY_STRING&#125; .</div><div class=\"line\"># I don&apos;t want it with Question mark</div><div class=\"line\">RewriteRule foo.php(.*) /foo.php? [L]</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<h2 id=\"访问控制\"><a href=\"#访问控制\" class=\"headerlink\" title=\"访问控制\"></a>访问控制</h2><ol>\n<li><p>文件访问控制</p>\n<blockquote>\n<p>利用Order、Files及FilesMatch命令实现的访问控制可以满足大部分要求，但是当用户被拒绝时，他们看到的是硕大的“403 Forbidden”，如果你不想伤害用户的感情，就需要显示一些别的东西，通过Rewrite就可以实现这个特性：</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">RewriteEngine On</div><div class=\"line\">RewriteCond %&#123;REQUEST_FILENAME&#125; !^(.+)\\.css$</div><div class=\"line\">RewriteCond %&#123;REQUEST_FILENAME&#125; !^(.+)\\.js$</div><div class=\"line\">RewriteCond %&#123;REQUEST_FILENAME&#125; !special.zip$</div><div class=\"line\">RewriteRule ^(.+)$ /chat/ [NC]</div></pre></td></tr></table></figure>\n<ul>\n<li>该规则将仅允许用户请求.css, .js类型的文件，还有special.zip文件</li>\n<li>RewriteRule 后面指定了限制规则：映射到/char/目录下处理</li>\n<li>RewriteCond 后面的“感叹号”(!)起到了“否定”作用，它表明，对不满足后面正则表达式者应用RewriteRule规则，也就是对当前类型的文件将不应用规则</li>\n<li>RewriteCond 之间是以逻辑“与”连接的，也就是只有当三个条件都不满足时才执行RewriteRule</li>\n<li>该规则也会限制访问.htm, .jpg等格式</li>\n<li>该规则不可以放在虚拟站点根目录（/）下，否则会死循环</li>\n<li>如果是二级目录，如/test/，那么传入RewriteCond的参数是以/test/开始的，因此从(.+)获得的文件名也含有/test/，读者必须对此多加小心</li>\n<li>要想仅获得文件名，可以将(.+)替换成([^/]+)，并且去掉符号^，如下所示：<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">RewriteEngine On</div><div class=\"line\">RewriteCond %&#123;REQUEST_FILENAME&#125; !([^/]+)\\.css$</div><div class=\"line\">RewriteCond %&#123;REQUEST_FILENAME&#125; !([^/]+)\\.js$</div><div class=\"line\">RewriteRule ^(.+)$ /chat/ [NC]</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p>用.htaccess阻止User-agent</p>\n<blockquote>\n<p>User-agent用于浏览器向服务器“自报家门”，更确切的说是所有HTTP客户端都得用User-agent向服务器“自报家门”，以便服务器对不同的客户端作出不同响应。比如，某站点可能需要对浏览器、搜索引擎crawl还有各类下载工具作出不同的响应。服务器就是通过所谓的User-agent进行区分的。<br>如果你的服务器提供某些资源的下载，那么你就必须多加小心诸如“迅雷”等下载软件，因为它们可能把你网站资源吸干，并且影响你的正常访客访问。</p>\n</blockquote>\n<p>为此，我们可以利用Rewrite限制某些UA的访问：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">RewriteEngine on</div><div class=\"line\">RewriteCond %&#123;HTTP_USER_AGENT&#125; 2.0.50727 [NC]</div><div class=\"line\">RewriteRule . abuse.txt [L]</div></pre></td></tr></table></figure>\n<ul>\n<li>该规则限制“迅雷”客户端下载资源，并将下载文件重置到abuse.txt</li>\n<li>HTTP_USER_AGENT是Apache的内置变量</li>\n<li>2.0.50727是迅雷User-agent的特征字符串</li>\n<li>RewriteRule后面的“点”表示“任意URI”，也就是不管请求的是什么，都输出abuse.txt</li>\n</ul>\n<p>通常，我们不会仅限制一个UA。利用[OR]即可实现对多个UA作出统一处理：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">RewriteEngine on</div><div class=\"line\">RewriteCond %&#123;HTTP_USER_AGENT&#125; 2.0.50727 [NC,OR]</div><div class=\"line\">RewriteCond %&#123;HTTP_USER_AGENT&#125; ^BlackWidow [NC,OR]</div><div class=\"line\"># etc..</div><div class=\"line\">RewriteCond %&#123;HTTP_USER_AGENT&#125; ^Net\\ Vampire [NC]</div><div class=\"line\">RewriteRule . abuse.txt [L]</div></pre></td></tr></table></figure>\n</li>\n<li><p>用.htaccess阻止盗链(hot-linking)</p>\n<blockquote>\n<p>盗链，特别是图片，是非常可耻的！哪怕将图片复制到自己服务器上，也比盗用他人的图片链接来得光彩！</p>\n</blockquote>\n<p>.htaccess的Rewrite功能可以提供非常简单、有效的方法阻止这种可耻行为：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">RewriteEngine On</div><div class=\"line\">RewriteCond %&#123;HTTP_REFERER&#125; !^$</div><div class=\"line\">RewriteCond %&#123;HTTP_REFERER&#125; !^http://(www\\.)?lesca\\.me/ [NC]</div><div class=\"line\">RewriteCond %&#123;REQUEST_URI&#125; !hotlink\\.png [NC]</div><div class=\"line\">RewriteRule .*\\.(gif|jpg|png)$ /hotlink.png [NC]</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>简单解释一下该规则的功能：</p>\n<ul>\n<li>除本站以外其他网站都不得引用本站图片，具体可以理解为</li>\n<li>如果引用站点为“空”或者是“本站”，或者，所引用对象是“hotlink.png”，那么就允许访问</li>\n<li>再次提醒，RewriteCond之间默认的逻辑连接词是逻辑“与”</li>\n<li>这里的难点是理解逻辑转换，即德·摩根定律</li>\n</ul>\n<h2 id=\"htaccess-缺点\"><a href=\"#htaccess-缺点\" class=\"headerlink\" title=\"htaccess 缺点\"></a>htaccess 缺点</h2><p>说了这么多<code>.htaccess</code> 可以实现这么多的功能，那么它有没有什么缺点呢?</p>\n<p>答案是，当然有。由于开启了<code>.htaccess</code> 文件，当我们访问了一个地址对应到服务器端某个目录之后<code>Apache</code> 会遍历并解析每层目录下的<code>.htaccess</code> 文件，所有对服务器性能会有一定的影响。</p>\n<p>但是具体影响有多大，要不要使用还需要看具体的环境。或者需要进行前后对比在进行选择。</p>\n<h2 id=\"htaccess-生成工具\"><a href=\"#htaccess-生成工具\" class=\"headerlink\" title=\"htaccess 生成工具\"></a>htaccess 生成工具</h2><p>说了这么多，貌似真正配置起来还是非常麻烦。不用着急目前网上有非常多<code>htaccess</code> 在线生成工具，可大大方便我们进行完成各种配置。</p>\n<p>如：<a href=\"http://htaccess.uuz.cc/\">smarty .htaccess :http://htaccess.uuz.cc/</a></p>\n<p><a href=\"http://lesca.me/archives/htaccess-rewrite.html\">转自:Lesca技术宅</a></p>"},{"title":"keepalive工作原理和配置(转)","date":"2016-10-05T12:30:00.000Z","utime":"2016-10-05T12:30:00.000Z","modif_times":0,"_content":"\n\n## keepalived是什么\n\nkeepalived是集群管理中保证集群高可用的一个服务软件，其功能类似于[heartbeat](https://github.com/chenzhiwei/linux/tree/master/heartbeat)，用来防止单点故障。\n\n## keepalived工作原理\n\nkeepalived是以VRRP协议为实现基础的，VRRP全称Virtual Router Redundancy Protocol，即[虚拟路由冗余协议](http://en.wikipedia.org/wiki/VRRP)。\n\n虚拟路由冗余协议，可以认为是实现路由器高可用的协议，即将N台提供相同功能的路由器组成一个路由器组，这个组里面有一个master和多个backup，master上面有一个对外提供服务的vip（该路由器所在局域网内其他机器的默认路由为该vip），master会发组播，当backup收不到vrrp包时就认为master宕掉了，这时就需要根据[VRRP的优先级](http://tools.ietf.org/html/rfc5798#section-5.1)来选举一个backup当master。这样的话就可以保证路由器的高可用了。\n\nkeepalived主要有三个模块，分别是core、check和vrrp。\n- core模块为keepalived的核心，负责主进程的启动、维护以及全局配置文件的加载和解析。\n- check负责健康检查，包括常见的各种检查方式。\n- vrrp模块是来实现VRRP协议的。\n\n<!-- more -->\n\n## keepalived的配置文件\n\nkeepalived只有一个配置文件keepalived.conf，里面主要包括以下几个配置区域，分别是global_defs、static_ipaddress、static_routes、vrrp_script、vrrp_instance和virtual_server。\n\n### global_defs区域\n> 主要是配置故障发生时的通知对象以及机器标识\n\n```\nglobal_defs {\n    notification_email {\n        a@abc.com\n        b@abc.com\n        ...\n    }\n    notification_email_from alert@abc.com\n    smtp_server smtp.abc.com\n    smtp_connect_timeout 30\n    enable_traps\n    router_id host163\n}\n```\n- notification_email 故障发生时给谁发邮件通知。\n- notification_email_from 通知邮件从哪个地址发出。\n- smpt_server 通知邮件的smtp地址。\n- smtp_connect_timeout 连接smtp服务器的超时时间。\n- enable_traps 开启SNMP陷阱（[Simple Network Management Protocol](http://en.wikipedia.org/wiki/Simple_Network_Management_Protocol)）。\n- router_id 标识本节点的字条串，通常为hostname，但不一定非得是hostname。故障发生时，邮件通知会用到。\n\n\n### static_ipaddress和static_routes\n> static_ipaddress和static_routes区域配置的是是本节点的IP和路由信息。如果你的机器上已经配置了IP和路由，那么这两个区域可以不用配置。\n> 其实，一般情况下你的机器都会有IP地址和路由信息的，因此没必要再在这两个区域配置。\n\n```\nstatic_ipaddress {\n    10.210.214.163/24 brd 10.210.214.255 dev eth0\n    ...\n}\n```\n```\nstatic_routes {\n    10.0.0.0/8 via 10.210.214.1 dev eth0\n    ...\n}\n```\n以上分别表示启动/关闭keepalived时在本机执行的如下命令：\n```\n# /sbin/ip addr add 10.210.214.163/24 brd 10.210.214.255 dev eth0\n# /sbin/ip route add 10.0.0.0/8 via 10.210.214.1 dev eth0\n# /sbin/ip addr del 10.210.214.163/24 brd 10.210.214.255 dev eth0\n# /sbin/ip route del 10.0.0.0/8 via 10.210.214.1 dev eth0\n```\n注意： 请忽略这两个区域，因为我坚信你的机器肯定已经配置了IP和路由。\n\n### vrrp_script\n> 用来做健康检查的，当时检查失败时会将vrrp_instance的priority减少相应的值。\n\n```\nvrrp_script chk_http_port {\n    script \"</dev/tcp/127.0.0.1/80\"\n    interval 1\n    weight -10\n}\n```\n以上意思是如果script中的指令执行失败，那么相应的vrrp_instance的优先级会减少10个点。\n\n### vrrp_instance和vrrp_sync_group区域\n> vrrp_instance用来定义对外提供服务的VIP区域及其相关属性。\n>\n> vrrp_rsync_group用来定义vrrp_intance组，使得这个组内成员动作一致。\n\n举个例子来说明一下其功能：\n\n两个vrrp_instance同属于一个vrrp_rsync_group，那么其中一个vrrp_instance发生故障切换时，另一个vrrp_instance也会跟着切换（即使这个instance没有发生故障）。\n```\nvrrp_sync_group VG_1 {\n    group {\n        inside_network   # name of vrrp_instance (below)\n        outside_network  # One for each moveable IP.\n        ...\n    }\n    notify_master /path/to_master.sh\n    notify_backup /path/to_backup.sh\n    notify_fault \"/path/fault.sh VG_1\"\n    notify /path/notify.sh\n    smtp_alert\n}\nvrrp_instance VI_1 {\n    state MASTER\n    interface eth0\n    use_vmac <VMAC_INTERFACE>\n    dont_track_primary\n    track_interface {\n        eth0\n        eth1\n    }\n    mcast_src_ip <IPADDR>\n    lvs_sync_daemon_interface eth1\n    garp_master_delay 10\n    virtual_router_id 1\n    priority 100\n    advert_int 1\n    authentication {\n        auth_type PASS\n        auth_pass 12345678\n    }\n    virtual_ipaddress {\n        10.210.214.253/24 brd 10.210.214.255 dev eth0\n        192.168.1.11/24 brd 192.168.1.255 dev eth1\n    }\n    virtual_routes {\n        172.16.0.0/12 via 10.210.214.1\n        192.168.1.0/24 via 192.168.1.1 dev eth1\n        default via 202.102.152.1\n    }\n    track_script {\n        chk_http_port\n    }\n    nopreempt\n    preempt_delay 300\n    debug\n    notify_master <STRING>|<QUOTED-STRING>\n    notify_backup <STRING>|<QUOTED-STRING>\n    notify_fault <STRING>|<QUOTED-STRING>\n    notify <STRING>|<QUOTED-STRING>\n    smtp_alert\n}\n```\n- notify_master/backup/fault 分别表示切换为主/备/出错时所执行的脚本。\n- notify 表示任何一状态切换时都会调用该脚本，并且该脚本在以上三个脚本执行完成之后进行调用，keepalived会自动传递三个参数（$1 = \"GROUP\"|\"INSTANCE\"，$2 = name of group or instance，$3 = target state of transition(MASTER/BACKUP/FAULT)）。\n- smtp_alert 表示是否开启邮件通知（用全局区域的邮件设置来发通知）。\n- state 可以是MASTER或BACKUP，不过当其他节点keepalived启动时会将priority比较大的节点选举为MASTER，因此该项其实没有实质用途。\n- interface 节点固有IP（非VIP）的网卡，用来发VRRP包。\n- use_vmac 是否使用VRRP的虚拟MAC地址。\n- dont_track_primary 忽略VRRP网卡错误。（默认未设置）\n- track_interface 监控以下网卡，如果任何一个不通就会切换到FALT状态。（可选项）\n- mcast_src_ip 修改vrrp组播包的源地址，默认源地址为master的IP。（由于是组播，因此即使修改了源地址，该master还是能收到回应的）\n- lvs_sync_daemon_interface 绑定lvs syncd的网卡。\n- garp_master_delay 当切为主状态后多久更新ARP缓存，默认5秒。\n- virtual_router_id 取值在0-255之间，用来区分多个instance的VRRP组播。\n\n注意： 同一网段中virtual_router_id的值不能重复，否则会出错，相关错误信息如下。\n```\nKeepalived_vrrp[27120]: ip address associated with VRID not present in received packet :\none or more VIP associated with VRID mismatch actual MASTER advert\nbogus VRRP packet received on eth1 !!!\nreceive an invalid ip number count associated with VRID!\nVRRP_Instance(xxx) ignoring received advertisment...\n```\n可以用这条命令来查看该网络中所存在的vrid：`tcpdump -nn -i any net 224.0.0.0/8`\n- priority 用来选举master的，要成为master，那么这个选项的值最好[高于其他机器50个点](http://tools.ietf.org/html/rfc5798#section-8.3.2)，该项[取值范围](http://tools.ietf.org/html/rfc5798#section-5.2.4)是1-255（在此范围之外会被识别成默认值100）。\n- advert_int 发VRRP包的时间间隔，即多久进行一次master选举（可以认为是健康查检时间间隔）。\n- authentication 认证区域，认证类型有PASS和HA（IPSEC），推荐使用PASS（密码只识别前8位）。\n- virtual_ipaddress vip，不解释了。\n- virtual_routes 虚拟路由，当IP漂过来之后需要添加的路由信息。\n- virtual_ipaddress_excluded 发送的VRRP包里不包含的IP地址，为减少回应VRRP包的个数。在网卡上绑定的IP地址比较多的时候用。\n- nopreempt 允许一个priority比较低的节点作为master，即使有priority更高的节点启动。\n\n首先nopreemt必须在state为BACKUP的节点上才生效（因为是BACKUP节点决定是否来成为MASTER的），其次要实现类似于关闭auto failback的功能需要将所有节点的state都设置为BACKUP，或者将master节点的priority设置的比BACKUP低。我个人推荐使用将所有节点的state都设置成BACKUP并且都加上nopreempt选项，这样就完成了关于autofailback功能，当想手动将某节点切换为MASTER时只需去掉该节点的nopreempt选项并且将priority改的比其他节点大，然后重新加载配置文件即可（等MASTER切过来之后再将配置文件改回去再reload一下）。\n\n当使用track_script时可以不用加nopreempt，只需要加上preempt_delay 5，这里的间隔时间要大于vrrp_script中定义的时长。\n- preempt_delay master启动多久之后进行接管资源（VIP/Route信息等），并提是没有nopreempt选项。\n\n### virtual_server_group和virtual_server区域\n> virtual_server_group一般在超大型的LVS中用到，一般LVS用不过这东西，因此不多说。\n\n```\nvirtual_server IP Port {\n    delay_loop <INT>\n    lb_algo rr|wrr|lc|wlc|lblc|sh|dh\n    lb_kind NAT|DR|TUN\n    persistence_timeout <INT>\n    persistence_granularity <NETMASK>\n    protocol TCP\n    ha_suspend\n    virtualhost <STRING>\n    alpha\n    omega\n    quorum <INT>\n    hysteresis <INT>\n    quorum_up <STRING>|<QUOTED-STRING>\n    quorum_down <STRING>|<QUOTED-STRING>\n    sorry_server <IPADDR> <PORT>\n    real_server <IPADDR> <PORT> {\n        weight <INT>\n        inhibit_on_failure\n        notify_up <STRING>|<QUOTED-STRING>\n        notify_down <STRING>|<QUOTED-STRING>\n        # HTTP_GET|SSL_GET|TCP_CHECK|SMTP_CHECK|MISC_CHECK\n        HTTP_GET|SSL_GET {\n            url {\n                path <STRING>\n                # Digest computed with genhash\n                digest <STRING>\n                status_code <INT>\n            }\n            connect_port <PORT>\n            connect_timeout <INT>\n            nb_get_retry <INT>\n            delay_before_retry <INT>\n        }\n    }\n}\n```\n- delay_loop 延迟轮询时间（单位秒）。\n- lb_algo 后端调试算法（load balancing algorithm）。\n- lb_kind LVS调度类型NAT/DR/TUN。\n- virtualhost 用来给HTTP_GET和SSL_GET配置请求header的。\n- sorry_server 当所有real server宕掉时，sorry server顶替。\n- real_server 真正提供服务的服务器。\n- weight 权重。\n- notify_up/down 当real server宕掉或启动时执行的脚本。\n\n健康检查的方式，N多种方式。\n- path 请求real serserver上的路径。\n- digest/status_code 分别表示用genhash算出的结果和http状态码。\n- connect_port 健康检查，如果端口通则认为服务器正常。\n- connect_timeout,nb_get_retry,delay_before_retry分别表示超时时长、重试次数，下次重试的时间延迟。\n\n其他选项暂时不作说明。\n\n## keepalived主从切换\n\n主从切换比较让人蛋疼，需要将backup配置文件的priority选项的值调整的比master高50个点，然后reload配置文件就可以切换了。当时你也可以将master的keepalived停止，这样也可以进行主从切换。\n\n## keepalived仅做HA时的配置\n\n请看该文档同级目录下的配置文件示例。\n\n说明：\n- 10.210.214.113 为keepalived的备机，其配置文件为113.keepalived.conf\n- 10.210.214.163 为keepalived的主机，其配置文件为163.keepalived.conf\n- 10.210.214.253 为Virtual IP，即提供服务的内网IP地址，在网卡eth0上面\n- 192.168.1.11 为模拟的提供服务的公网IP地址，在网卡eth1上面\n\n用tcpdump命令来捕获的结果如下：\n```\n17:20:07.919419 IP 10.210.214.163 > 224.0.0.18: VRRPv2, Advertisement, vrid 1, prio 200, authtype simple, intvl 1s, length 20\n```\n## LVS+Keepalived配置\n> 注:Keepalived与LVS结合使用时一般还会用到一个工具ipvsadm，用来查看相关VS相关状态，关于ipvsadm的用法可以参考man手册。\n\n10.67.15.95为keepalived master，VIP为10.67.15.94，配置文件为95-lvs-keepalived.conf\n\n10.67.15.96为keepalived master，VIP为10.67.15.94，配置文件为96-lvs-keepalived.conf\n\n10.67.15.195为real server  \n\n**注意：**\n\n当使用LVS+DR+Keepalived配置时，需要在real server上添加一条iptables规则（其中dport根据情况添加或缺省）：\n```\n# iptables -t nat -A PREROUTING -p tcp -d 10.67.15.94 --dport 80 -j REDIRECT\n```\n当使用LVS+NAT+Keepalived配置时，需要将real server的默认路由配置成Director的VIP10.67.15.94，必须确保client的请求是通过10.67.15.94到达real server的。\n\n## 安装keepalived\n\n从keepalived[官网](http://www.keepalived.org/download.html)下载合适的版本，解压并执行如下命令完成安装。\n```\n# cd keepalived-xxx\n# ./configure --bindir=/usr/bin --sbindir=/usr/sbin --sysconfdir=/etc --mandir=/usr/share\n# make && make install\n```\n你也可以打成[RPM](https://github.com/chenzhiwei/linux/tree/master/rpm-package-management)包，然后安装。\n\n## 说明\n\n我们用到的HA场景如下： 两台主机host113和host163，内网IP在eth1网卡上，分别是10.210.214.113和10.210.214.163，VIP为公网IP在eth0上，IP地址是202.102.152.253，网关为202.102.152.1。当VIP在host113上提供服务时，host113上的默认路由为202.102.152.1，提供服务的端口为202.102.152.253:443。host113发生故障需要将VIP及服务切回到host163上的时候，需要以下几步，第一将VIP接管过来，第二添加默认路由202.102.152.1，第三启动在端口202.102.152.253:443上的服务。\n\n如此一来，keepalived需要另外的脚本来完成添加默认路由和启动服务工作，这点和heartbeat中的resources是相同的。目前我进行了测试，发现keepalived速度要比heartbeat快，也就是说效率比heartbeat高。并且，最重要的一点，keepalived支持多个backup。\n\n不要问我为何有以上需求。要为两个不同的域名提供https服务，由于SSL证书问题，必须有两个公网IP地址分别绑定443端口。\n\n当然，通过[SNI](http://en.wikipedia.org/wiki/Server_Name_Indication)也可以实现一个公网IP绑定443端口来为多个域名提供https服务，但是这需要浏览器支持（M$的IE浏览器不支持）。（[nginx](http://nginx.org/en/docs/http/configuring_https_servers.html#sni)/[apache](http://wiki.apache.org/httpd/NameBasedSSLVHostsWithSNI)）\n\n## 吐槽\n\nkeepalived的主从切换比较让人蛋疼，需要修改配置文件或停止一方的运行。但是由于keepalived是通过vrrp协议来实现failover（故障转移）的，因此也决定了手动主从切换的不便。\n\nkeepalived的文档也很旧了，一直都找不到合适的文档，之前我就一直忽略了vrrp_script这个区域，导致很多事情想不通。\n\n另外，我发现我越来越喜欢keepalived了。。。\n\n\n\n\n\n[转自：http://outofmemory.cn/wiki/keepalived-configuration](http://outofmemory.cn/wiki/keepalived-configuration)\n","source":"_posts/keepalived工作原理和配置.md","raw":"---\ntitle: keepalive工作原理和配置(转)\ndate: 2016-10-05 20:30:00\nutime: 2016-10-05 20:30:00\nmodif_times: 0\ntags:\n- 负载均衡\ncategories:\n- Linux\n---\n\n\n## keepalived是什么\n\nkeepalived是集群管理中保证集群高可用的一个服务软件，其功能类似于[heartbeat](https://github.com/chenzhiwei/linux/tree/master/heartbeat)，用来防止单点故障。\n\n## keepalived工作原理\n\nkeepalived是以VRRP协议为实现基础的，VRRP全称Virtual Router Redundancy Protocol，即[虚拟路由冗余协议](http://en.wikipedia.org/wiki/VRRP)。\n\n虚拟路由冗余协议，可以认为是实现路由器高可用的协议，即将N台提供相同功能的路由器组成一个路由器组，这个组里面有一个master和多个backup，master上面有一个对外提供服务的vip（该路由器所在局域网内其他机器的默认路由为该vip），master会发组播，当backup收不到vrrp包时就认为master宕掉了，这时就需要根据[VRRP的优先级](http://tools.ietf.org/html/rfc5798#section-5.1)来选举一个backup当master。这样的话就可以保证路由器的高可用了。\n\nkeepalived主要有三个模块，分别是core、check和vrrp。\n- core模块为keepalived的核心，负责主进程的启动、维护以及全局配置文件的加载和解析。\n- check负责健康检查，包括常见的各种检查方式。\n- vrrp模块是来实现VRRP协议的。\n\n<!-- more -->\n\n## keepalived的配置文件\n\nkeepalived只有一个配置文件keepalived.conf，里面主要包括以下几个配置区域，分别是global_defs、static_ipaddress、static_routes、vrrp_script、vrrp_instance和virtual_server。\n\n### global_defs区域\n> 主要是配置故障发生时的通知对象以及机器标识\n\n```\nglobal_defs {\n    notification_email {\n        a@abc.com\n        b@abc.com\n        ...\n    }\n    notification_email_from alert@abc.com\n    smtp_server smtp.abc.com\n    smtp_connect_timeout 30\n    enable_traps\n    router_id host163\n}\n```\n- notification_email 故障发生时给谁发邮件通知。\n- notification_email_from 通知邮件从哪个地址发出。\n- smpt_server 通知邮件的smtp地址。\n- smtp_connect_timeout 连接smtp服务器的超时时间。\n- enable_traps 开启SNMP陷阱（[Simple Network Management Protocol](http://en.wikipedia.org/wiki/Simple_Network_Management_Protocol)）。\n- router_id 标识本节点的字条串，通常为hostname，但不一定非得是hostname。故障发生时，邮件通知会用到。\n\n\n### static_ipaddress和static_routes\n> static_ipaddress和static_routes区域配置的是是本节点的IP和路由信息。如果你的机器上已经配置了IP和路由，那么这两个区域可以不用配置。\n> 其实，一般情况下你的机器都会有IP地址和路由信息的，因此没必要再在这两个区域配置。\n\n```\nstatic_ipaddress {\n    10.210.214.163/24 brd 10.210.214.255 dev eth0\n    ...\n}\n```\n```\nstatic_routes {\n    10.0.0.0/8 via 10.210.214.1 dev eth0\n    ...\n}\n```\n以上分别表示启动/关闭keepalived时在本机执行的如下命令：\n```\n# /sbin/ip addr add 10.210.214.163/24 brd 10.210.214.255 dev eth0\n# /sbin/ip route add 10.0.0.0/8 via 10.210.214.1 dev eth0\n# /sbin/ip addr del 10.210.214.163/24 brd 10.210.214.255 dev eth0\n# /sbin/ip route del 10.0.0.0/8 via 10.210.214.1 dev eth0\n```\n注意： 请忽略这两个区域，因为我坚信你的机器肯定已经配置了IP和路由。\n\n### vrrp_script\n> 用来做健康检查的，当时检查失败时会将vrrp_instance的priority减少相应的值。\n\n```\nvrrp_script chk_http_port {\n    script \"</dev/tcp/127.0.0.1/80\"\n    interval 1\n    weight -10\n}\n```\n以上意思是如果script中的指令执行失败，那么相应的vrrp_instance的优先级会减少10个点。\n\n### vrrp_instance和vrrp_sync_group区域\n> vrrp_instance用来定义对外提供服务的VIP区域及其相关属性。\n>\n> vrrp_rsync_group用来定义vrrp_intance组，使得这个组内成员动作一致。\n\n举个例子来说明一下其功能：\n\n两个vrrp_instance同属于一个vrrp_rsync_group，那么其中一个vrrp_instance发生故障切换时，另一个vrrp_instance也会跟着切换（即使这个instance没有发生故障）。\n```\nvrrp_sync_group VG_1 {\n    group {\n        inside_network   # name of vrrp_instance (below)\n        outside_network  # One for each moveable IP.\n        ...\n    }\n    notify_master /path/to_master.sh\n    notify_backup /path/to_backup.sh\n    notify_fault \"/path/fault.sh VG_1\"\n    notify /path/notify.sh\n    smtp_alert\n}\nvrrp_instance VI_1 {\n    state MASTER\n    interface eth0\n    use_vmac <VMAC_INTERFACE>\n    dont_track_primary\n    track_interface {\n        eth0\n        eth1\n    }\n    mcast_src_ip <IPADDR>\n    lvs_sync_daemon_interface eth1\n    garp_master_delay 10\n    virtual_router_id 1\n    priority 100\n    advert_int 1\n    authentication {\n        auth_type PASS\n        auth_pass 12345678\n    }\n    virtual_ipaddress {\n        10.210.214.253/24 brd 10.210.214.255 dev eth0\n        192.168.1.11/24 brd 192.168.1.255 dev eth1\n    }\n    virtual_routes {\n        172.16.0.0/12 via 10.210.214.1\n        192.168.1.0/24 via 192.168.1.1 dev eth1\n        default via 202.102.152.1\n    }\n    track_script {\n        chk_http_port\n    }\n    nopreempt\n    preempt_delay 300\n    debug\n    notify_master <STRING>|<QUOTED-STRING>\n    notify_backup <STRING>|<QUOTED-STRING>\n    notify_fault <STRING>|<QUOTED-STRING>\n    notify <STRING>|<QUOTED-STRING>\n    smtp_alert\n}\n```\n- notify_master/backup/fault 分别表示切换为主/备/出错时所执行的脚本。\n- notify 表示任何一状态切换时都会调用该脚本，并且该脚本在以上三个脚本执行完成之后进行调用，keepalived会自动传递三个参数（$1 = \"GROUP\"|\"INSTANCE\"，$2 = name of group or instance，$3 = target state of transition(MASTER/BACKUP/FAULT)）。\n- smtp_alert 表示是否开启邮件通知（用全局区域的邮件设置来发通知）。\n- state 可以是MASTER或BACKUP，不过当其他节点keepalived启动时会将priority比较大的节点选举为MASTER，因此该项其实没有实质用途。\n- interface 节点固有IP（非VIP）的网卡，用来发VRRP包。\n- use_vmac 是否使用VRRP的虚拟MAC地址。\n- dont_track_primary 忽略VRRP网卡错误。（默认未设置）\n- track_interface 监控以下网卡，如果任何一个不通就会切换到FALT状态。（可选项）\n- mcast_src_ip 修改vrrp组播包的源地址，默认源地址为master的IP。（由于是组播，因此即使修改了源地址，该master还是能收到回应的）\n- lvs_sync_daemon_interface 绑定lvs syncd的网卡。\n- garp_master_delay 当切为主状态后多久更新ARP缓存，默认5秒。\n- virtual_router_id 取值在0-255之间，用来区分多个instance的VRRP组播。\n\n注意： 同一网段中virtual_router_id的值不能重复，否则会出错，相关错误信息如下。\n```\nKeepalived_vrrp[27120]: ip address associated with VRID not present in received packet :\none or more VIP associated with VRID mismatch actual MASTER advert\nbogus VRRP packet received on eth1 !!!\nreceive an invalid ip number count associated with VRID!\nVRRP_Instance(xxx) ignoring received advertisment...\n```\n可以用这条命令来查看该网络中所存在的vrid：`tcpdump -nn -i any net 224.0.0.0/8`\n- priority 用来选举master的，要成为master，那么这个选项的值最好[高于其他机器50个点](http://tools.ietf.org/html/rfc5798#section-8.3.2)，该项[取值范围](http://tools.ietf.org/html/rfc5798#section-5.2.4)是1-255（在此范围之外会被识别成默认值100）。\n- advert_int 发VRRP包的时间间隔，即多久进行一次master选举（可以认为是健康查检时间间隔）。\n- authentication 认证区域，认证类型有PASS和HA（IPSEC），推荐使用PASS（密码只识别前8位）。\n- virtual_ipaddress vip，不解释了。\n- virtual_routes 虚拟路由，当IP漂过来之后需要添加的路由信息。\n- virtual_ipaddress_excluded 发送的VRRP包里不包含的IP地址，为减少回应VRRP包的个数。在网卡上绑定的IP地址比较多的时候用。\n- nopreempt 允许一个priority比较低的节点作为master，即使有priority更高的节点启动。\n\n首先nopreemt必须在state为BACKUP的节点上才生效（因为是BACKUP节点决定是否来成为MASTER的），其次要实现类似于关闭auto failback的功能需要将所有节点的state都设置为BACKUP，或者将master节点的priority设置的比BACKUP低。我个人推荐使用将所有节点的state都设置成BACKUP并且都加上nopreempt选项，这样就完成了关于autofailback功能，当想手动将某节点切换为MASTER时只需去掉该节点的nopreempt选项并且将priority改的比其他节点大，然后重新加载配置文件即可（等MASTER切过来之后再将配置文件改回去再reload一下）。\n\n当使用track_script时可以不用加nopreempt，只需要加上preempt_delay 5，这里的间隔时间要大于vrrp_script中定义的时长。\n- preempt_delay master启动多久之后进行接管资源（VIP/Route信息等），并提是没有nopreempt选项。\n\n### virtual_server_group和virtual_server区域\n> virtual_server_group一般在超大型的LVS中用到，一般LVS用不过这东西，因此不多说。\n\n```\nvirtual_server IP Port {\n    delay_loop <INT>\n    lb_algo rr|wrr|lc|wlc|lblc|sh|dh\n    lb_kind NAT|DR|TUN\n    persistence_timeout <INT>\n    persistence_granularity <NETMASK>\n    protocol TCP\n    ha_suspend\n    virtualhost <STRING>\n    alpha\n    omega\n    quorum <INT>\n    hysteresis <INT>\n    quorum_up <STRING>|<QUOTED-STRING>\n    quorum_down <STRING>|<QUOTED-STRING>\n    sorry_server <IPADDR> <PORT>\n    real_server <IPADDR> <PORT> {\n        weight <INT>\n        inhibit_on_failure\n        notify_up <STRING>|<QUOTED-STRING>\n        notify_down <STRING>|<QUOTED-STRING>\n        # HTTP_GET|SSL_GET|TCP_CHECK|SMTP_CHECK|MISC_CHECK\n        HTTP_GET|SSL_GET {\n            url {\n                path <STRING>\n                # Digest computed with genhash\n                digest <STRING>\n                status_code <INT>\n            }\n            connect_port <PORT>\n            connect_timeout <INT>\n            nb_get_retry <INT>\n            delay_before_retry <INT>\n        }\n    }\n}\n```\n- delay_loop 延迟轮询时间（单位秒）。\n- lb_algo 后端调试算法（load balancing algorithm）。\n- lb_kind LVS调度类型NAT/DR/TUN。\n- virtualhost 用来给HTTP_GET和SSL_GET配置请求header的。\n- sorry_server 当所有real server宕掉时，sorry server顶替。\n- real_server 真正提供服务的服务器。\n- weight 权重。\n- notify_up/down 当real server宕掉或启动时执行的脚本。\n\n健康检查的方式，N多种方式。\n- path 请求real serserver上的路径。\n- digest/status_code 分别表示用genhash算出的结果和http状态码。\n- connect_port 健康检查，如果端口通则认为服务器正常。\n- connect_timeout,nb_get_retry,delay_before_retry分别表示超时时长、重试次数，下次重试的时间延迟。\n\n其他选项暂时不作说明。\n\n## keepalived主从切换\n\n主从切换比较让人蛋疼，需要将backup配置文件的priority选项的值调整的比master高50个点，然后reload配置文件就可以切换了。当时你也可以将master的keepalived停止，这样也可以进行主从切换。\n\n## keepalived仅做HA时的配置\n\n请看该文档同级目录下的配置文件示例。\n\n说明：\n- 10.210.214.113 为keepalived的备机，其配置文件为113.keepalived.conf\n- 10.210.214.163 为keepalived的主机，其配置文件为163.keepalived.conf\n- 10.210.214.253 为Virtual IP，即提供服务的内网IP地址，在网卡eth0上面\n- 192.168.1.11 为模拟的提供服务的公网IP地址，在网卡eth1上面\n\n用tcpdump命令来捕获的结果如下：\n```\n17:20:07.919419 IP 10.210.214.163 > 224.0.0.18: VRRPv2, Advertisement, vrid 1, prio 200, authtype simple, intvl 1s, length 20\n```\n## LVS+Keepalived配置\n> 注:Keepalived与LVS结合使用时一般还会用到一个工具ipvsadm，用来查看相关VS相关状态，关于ipvsadm的用法可以参考man手册。\n\n10.67.15.95为keepalived master，VIP为10.67.15.94，配置文件为95-lvs-keepalived.conf\n\n10.67.15.96为keepalived master，VIP为10.67.15.94，配置文件为96-lvs-keepalived.conf\n\n10.67.15.195为real server  \n\n**注意：**\n\n当使用LVS+DR+Keepalived配置时，需要在real server上添加一条iptables规则（其中dport根据情况添加或缺省）：\n```\n# iptables -t nat -A PREROUTING -p tcp -d 10.67.15.94 --dport 80 -j REDIRECT\n```\n当使用LVS+NAT+Keepalived配置时，需要将real server的默认路由配置成Director的VIP10.67.15.94，必须确保client的请求是通过10.67.15.94到达real server的。\n\n## 安装keepalived\n\n从keepalived[官网](http://www.keepalived.org/download.html)下载合适的版本，解压并执行如下命令完成安装。\n```\n# cd keepalived-xxx\n# ./configure --bindir=/usr/bin --sbindir=/usr/sbin --sysconfdir=/etc --mandir=/usr/share\n# make && make install\n```\n你也可以打成[RPM](https://github.com/chenzhiwei/linux/tree/master/rpm-package-management)包，然后安装。\n\n## 说明\n\n我们用到的HA场景如下： 两台主机host113和host163，内网IP在eth1网卡上，分别是10.210.214.113和10.210.214.163，VIP为公网IP在eth0上，IP地址是202.102.152.253，网关为202.102.152.1。当VIP在host113上提供服务时，host113上的默认路由为202.102.152.1，提供服务的端口为202.102.152.253:443。host113发生故障需要将VIP及服务切回到host163上的时候，需要以下几步，第一将VIP接管过来，第二添加默认路由202.102.152.1，第三启动在端口202.102.152.253:443上的服务。\n\n如此一来，keepalived需要另外的脚本来完成添加默认路由和启动服务工作，这点和heartbeat中的resources是相同的。目前我进行了测试，发现keepalived速度要比heartbeat快，也就是说效率比heartbeat高。并且，最重要的一点，keepalived支持多个backup。\n\n不要问我为何有以上需求。要为两个不同的域名提供https服务，由于SSL证书问题，必须有两个公网IP地址分别绑定443端口。\n\n当然，通过[SNI](http://en.wikipedia.org/wiki/Server_Name_Indication)也可以实现一个公网IP绑定443端口来为多个域名提供https服务，但是这需要浏览器支持（M$的IE浏览器不支持）。（[nginx](http://nginx.org/en/docs/http/configuring_https_servers.html#sni)/[apache](http://wiki.apache.org/httpd/NameBasedSSLVHostsWithSNI)）\n\n## 吐槽\n\nkeepalived的主从切换比较让人蛋疼，需要修改配置文件或停止一方的运行。但是由于keepalived是通过vrrp协议来实现failover（故障转移）的，因此也决定了手动主从切换的不便。\n\nkeepalived的文档也很旧了，一直都找不到合适的文档，之前我就一直忽略了vrrp_script这个区域，导致很多事情想不通。\n\n另外，我发现我越来越喜欢keepalived了。。。\n\n\n\n\n\n[转自：http://outofmemory.cn/wiki/keepalived-configuration](http://outofmemory.cn/wiki/keepalived-configuration)\n","slug":"keepalived工作原理和配置","published":1,"updated":"2016-10-05T06:47:20.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"city8vnoi002fg29fhjweuff5","content":"<h2 id=\"keepalived是什么\"><a href=\"#keepalived是什么\" class=\"headerlink\" title=\"keepalived是什么\"></a>keepalived是什么</h2><p>keepalived是集群管理中保证集群高可用的一个服务软件，其功能类似于<a href=\"https://github.com/chenzhiwei/linux/tree/master/heartbeat\" target=\"_blank\" rel=\"external\">heartbeat</a>，用来防止单点故障。</p>\n<h2 id=\"keepalived工作原理\"><a href=\"#keepalived工作原理\" class=\"headerlink\" title=\"keepalived工作原理\"></a>keepalived工作原理</h2><p>keepalived是以VRRP协议为实现基础的，VRRP全称Virtual Router Redundancy Protocol，即<a href=\"http://en.wikipedia.org/wiki/VRRP\" target=\"_blank\" rel=\"external\">虚拟路由冗余协议</a>。</p>\n<p>虚拟路由冗余协议，可以认为是实现路由器高可用的协议，即将N台提供相同功能的路由器组成一个路由器组，这个组里面有一个master和多个backup，master上面有一个对外提供服务的vip（该路由器所在局域网内其他机器的默认路由为该vip），master会发组播，当backup收不到vrrp包时就认为master宕掉了，这时就需要根据<a href=\"http://tools.ietf.org/html/rfc5798#section-5.1\" target=\"_blank\" rel=\"external\">VRRP的优先级</a>来选举一个backup当master。这样的话就可以保证路由器的高可用了。</p>\n<p>keepalived主要有三个模块，分别是core、check和vrrp。</p>\n<ul>\n<li>core模块为keepalived的核心，负责主进程的启动、维护以及全局配置文件的加载和解析。</li>\n<li>check负责健康检查，包括常见的各种检查方式。</li>\n<li>vrrp模块是来实现VRRP协议的。</li>\n</ul>\n<a id=\"more\"></a>\n<h2 id=\"keepalived的配置文件\"><a href=\"#keepalived的配置文件\" class=\"headerlink\" title=\"keepalived的配置文件\"></a>keepalived的配置文件</h2><p>keepalived只有一个配置文件keepalived.conf，里面主要包括以下几个配置区域，分别是global_defs、static_ipaddress、static_routes、vrrp_script、vrrp_instance和virtual_server。</p>\n<h3 id=\"global-defs区域\"><a href=\"#global-defs区域\" class=\"headerlink\" title=\"global_defs区域\"></a>global_defs区域</h3><blockquote>\n<p>主要是配置故障发生时的通知对象以及机器标识</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">global_defs &#123;</div><div class=\"line\">    notification_email &#123;</div><div class=\"line\">        a@abc.com</div><div class=\"line\">        b@abc.com</div><div class=\"line\">        ...</div><div class=\"line\">    &#125;</div><div class=\"line\">    notification_email_from alert@abc.com</div><div class=\"line\">    smtp_server smtp.abc.com</div><div class=\"line\">    smtp_connect_timeout 30</div><div class=\"line\">    enable_traps</div><div class=\"line\">    router_id host163</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li>notification_email 故障发生时给谁发邮件通知。</li>\n<li>notification_email_from 通知邮件从哪个地址发出。</li>\n<li>smpt_server 通知邮件的smtp地址。</li>\n<li>smtp_connect_timeout 连接smtp服务器的超时时间。</li>\n<li>enable_traps 开启SNMP陷阱（<a href=\"http://en.wikipedia.org/wiki/Simple_Network_Management_Protocol\" target=\"_blank\" rel=\"external\">Simple Network Management Protocol</a>）。</li>\n<li>router_id 标识本节点的字条串，通常为hostname，但不一定非得是hostname。故障发生时，邮件通知会用到。</li>\n</ul>\n<h3 id=\"static-ipaddress和static-routes\"><a href=\"#static-ipaddress和static-routes\" class=\"headerlink\" title=\"static_ipaddress和static_routes\"></a>static_ipaddress和static_routes</h3><blockquote>\n<p>static_ipaddress和static_routes区域配置的是是本节点的IP和路由信息。如果你的机器上已经配置了IP和路由，那么这两个区域可以不用配置。<br>其实，一般情况下你的机器都会有IP地址和路由信息的，因此没必要再在这两个区域配置。</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">static_ipaddress &#123;</div><div class=\"line\">    10.210.214.163/24 brd 10.210.214.255 dev eth0</div><div class=\"line\">    ...</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">static_routes &#123;</div><div class=\"line\">    10.0.0.0/8 via 10.210.214.1 dev eth0</div><div class=\"line\">    ...</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>以上分别表示启动/关闭keepalived时在本机执行的如下命令：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"># /sbin/ip addr add 10.210.214.163/24 brd 10.210.214.255 dev eth0</div><div class=\"line\"># /sbin/ip route add 10.0.0.0/8 via 10.210.214.1 dev eth0</div><div class=\"line\"># /sbin/ip addr del 10.210.214.163/24 brd 10.210.214.255 dev eth0</div><div class=\"line\"># /sbin/ip route del 10.0.0.0/8 via 10.210.214.1 dev eth0</div></pre></td></tr></table></figure></p>\n<p>注意： 请忽略这两个区域，因为我坚信你的机器肯定已经配置了IP和路由。</p>\n<h3 id=\"vrrp-script\"><a href=\"#vrrp-script\" class=\"headerlink\" title=\"vrrp_script\"></a>vrrp_script</h3><blockquote>\n<p>用来做健康检查的，当时检查失败时会将vrrp_instance的priority减少相应的值。</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">vrrp_script chk_http_port &#123;</div><div class=\"line\">    script &quot;&lt;/dev/tcp/127.0.0.1/80&quot;</div><div class=\"line\">    interval 1</div><div class=\"line\">    weight -10</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>以上意思是如果script中的指令执行失败，那么相应的vrrp_instance的优先级会减少10个点。</p>\n<h3 id=\"vrrp-instance和vrrp-sync-group区域\"><a href=\"#vrrp-instance和vrrp-sync-group区域\" class=\"headerlink\" title=\"vrrp_instance和vrrp_sync_group区域\"></a>vrrp_instance和vrrp_sync_group区域</h3><blockquote>\n<p>vrrp_instance用来定义对外提供服务的VIP区域及其相关属性。</p>\n<p>vrrp_rsync_group用来定义vrrp_intance组，使得这个组内成员动作一致。</p>\n</blockquote>\n<p>举个例子来说明一下其功能：</p>\n<p>两个vrrp_instance同属于一个vrrp_rsync_group，那么其中一个vrrp_instance发生故障切换时，另一个vrrp_instance也会跟着切换（即使这个instance没有发生故障）。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div></pre></td><td class=\"code\"><pre><div class=\"line\">vrrp_sync_group VG_1 &#123;</div><div class=\"line\">    group &#123;</div><div class=\"line\">        inside_network   # name of vrrp_instance (below)</div><div class=\"line\">        outside_network  # One for each moveable IP.</div><div class=\"line\">        ...</div><div class=\"line\">    &#125;</div><div class=\"line\">    notify_master /path/to_master.sh</div><div class=\"line\">    notify_backup /path/to_backup.sh</div><div class=\"line\">    notify_fault &quot;/path/fault.sh VG_1&quot;</div><div class=\"line\">    notify /path/notify.sh</div><div class=\"line\">    smtp_alert</div><div class=\"line\">&#125;</div><div class=\"line\">vrrp_instance VI_1 &#123;</div><div class=\"line\">    state MASTER</div><div class=\"line\">    interface eth0</div><div class=\"line\">    use_vmac &lt;VMAC_INTERFACE&gt;</div><div class=\"line\">    dont_track_primary</div><div class=\"line\">    track_interface &#123;</div><div class=\"line\">        eth0</div><div class=\"line\">        eth1</div><div class=\"line\">    &#125;</div><div class=\"line\">    mcast_src_ip &lt;IPADDR&gt;</div><div class=\"line\">    lvs_sync_daemon_interface eth1</div><div class=\"line\">    garp_master_delay 10</div><div class=\"line\">    virtual_router_id 1</div><div class=\"line\">    priority 100</div><div class=\"line\">    advert_int 1</div><div class=\"line\">    authentication &#123;</div><div class=\"line\">        auth_type PASS</div><div class=\"line\">        auth_pass 12345678</div><div class=\"line\">    &#125;</div><div class=\"line\">    virtual_ipaddress &#123;</div><div class=\"line\">        10.210.214.253/24 brd 10.210.214.255 dev eth0</div><div class=\"line\">        192.168.1.11/24 brd 192.168.1.255 dev eth1</div><div class=\"line\">    &#125;</div><div class=\"line\">    virtual_routes &#123;</div><div class=\"line\">        172.16.0.0/12 via 10.210.214.1</div><div class=\"line\">        192.168.1.0/24 via 192.168.1.1 dev eth1</div><div class=\"line\">        default via 202.102.152.1</div><div class=\"line\">    &#125;</div><div class=\"line\">    track_script &#123;</div><div class=\"line\">        chk_http_port</div><div class=\"line\">    &#125;</div><div class=\"line\">    nopreempt</div><div class=\"line\">    preempt_delay 300</div><div class=\"line\">    debug</div><div class=\"line\">    notify_master &lt;STRING&gt;|&lt;QUOTED-STRING&gt;</div><div class=\"line\">    notify_backup &lt;STRING&gt;|&lt;QUOTED-STRING&gt;</div><div class=\"line\">    notify_fault &lt;STRING&gt;|&lt;QUOTED-STRING&gt;</div><div class=\"line\">    notify &lt;STRING&gt;|&lt;QUOTED-STRING&gt;</div><div class=\"line\">    smtp_alert</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<ul>\n<li>notify_master/backup/fault 分别表示切换为主/备/出错时所执行的脚本。</li>\n<li>notify 表示任何一状态切换时都会调用该脚本，并且该脚本在以上三个脚本执行完成之后进行调用，keepalived会自动传递三个参数（$1 = “GROUP”|”INSTANCE”，$2 = name of group or instance，$3 = target state of transition(MASTER/BACKUP/FAULT)）。</li>\n<li>smtp_alert 表示是否开启邮件通知（用全局区域的邮件设置来发通知）。</li>\n<li>state 可以是MASTER或BACKUP，不过当其他节点keepalived启动时会将priority比较大的节点选举为MASTER，因此该项其实没有实质用途。</li>\n<li>interface 节点固有IP（非VIP）的网卡，用来发VRRP包。</li>\n<li>use_vmac 是否使用VRRP的虚拟MAC地址。</li>\n<li>dont_track_primary 忽略VRRP网卡错误。（默认未设置）</li>\n<li>track_interface 监控以下网卡，如果任何一个不通就会切换到FALT状态。（可选项）</li>\n<li>mcast_src_ip 修改vrrp组播包的源地址，默认源地址为master的IP。（由于是组播，因此即使修改了源地址，该master还是能收到回应的）</li>\n<li>lvs_sync_daemon_interface 绑定lvs syncd的网卡。</li>\n<li>garp_master_delay 当切为主状态后多久更新ARP缓存，默认5秒。</li>\n<li>virtual_router_id 取值在0-255之间，用来区分多个instance的VRRP组播。</li>\n</ul>\n<p>注意： 同一网段中virtual_router_id的值不能重复，否则会出错，相关错误信息如下。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">Keepalived_vrrp[27120]: ip address associated with VRID not present in received packet :</div><div class=\"line\">one or more VIP associated with VRID mismatch actual MASTER advert</div><div class=\"line\">bogus VRRP packet received on eth1 !!!</div><div class=\"line\">receive an invalid ip number count associated with VRID!</div><div class=\"line\">VRRP_Instance(xxx) ignoring received advertisment...</div></pre></td></tr></table></figure></p>\n<p>可以用这条命令来查看该网络中所存在的vrid：<code>tcpdump -nn -i any net 224.0.0.0/8</code></p>\n<ul>\n<li>priority 用来选举master的，要成为master，那么这个选项的值最好<a href=\"http://tools.ietf.org/html/rfc5798#section-8.3.2\" target=\"_blank\" rel=\"external\">高于其他机器50个点</a>，该项<a href=\"http://tools.ietf.org/html/rfc5798#section-5.2.4\" target=\"_blank\" rel=\"external\">取值范围</a>是1-255（在此范围之外会被识别成默认值100）。</li>\n<li>advert_int 发VRRP包的时间间隔，即多久进行一次master选举（可以认为是健康查检时间间隔）。</li>\n<li>authentication 认证区域，认证类型有PASS和HA（IPSEC），推荐使用PASS（密码只识别前8位）。</li>\n<li>virtual_ipaddress vip，不解释了。</li>\n<li>virtual_routes 虚拟路由，当IP漂过来之后需要添加的路由信息。</li>\n<li>virtual_ipaddress_excluded 发送的VRRP包里不包含的IP地址，为减少回应VRRP包的个数。在网卡上绑定的IP地址比较多的时候用。</li>\n<li>nopreempt 允许一个priority比较低的节点作为master，即使有priority更高的节点启动。</li>\n</ul>\n<p>首先nopreemt必须在state为BACKUP的节点上才生效（因为是BACKUP节点决定是否来成为MASTER的），其次要实现类似于关闭auto failback的功能需要将所有节点的state都设置为BACKUP，或者将master节点的priority设置的比BACKUP低。我个人推荐使用将所有节点的state都设置成BACKUP并且都加上nopreempt选项，这样就完成了关于autofailback功能，当想手动将某节点切换为MASTER时只需去掉该节点的nopreempt选项并且将priority改的比其他节点大，然后重新加载配置文件即可（等MASTER切过来之后再将配置文件改回去再reload一下）。</p>\n<p>当使用track_script时可以不用加nopreempt，只需要加上preempt_delay 5，这里的间隔时间要大于vrrp_script中定义的时长。</p>\n<ul>\n<li>preempt_delay master启动多久之后进行接管资源（VIP/Route信息等），并提是没有nopreempt选项。</li>\n</ul>\n<h3 id=\"virtual-server-group和virtual-server区域\"><a href=\"#virtual-server-group和virtual-server区域\" class=\"headerlink\" title=\"virtual_server_group和virtual_server区域\"></a>virtual_server_group和virtual_server区域</h3><blockquote>\n<p>virtual_server_group一般在超大型的LVS中用到，一般LVS用不过这东西，因此不多说。</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div></pre></td><td class=\"code\"><pre><div class=\"line\">virtual_server IP Port &#123;</div><div class=\"line\">    delay_loop &lt;INT&gt;</div><div class=\"line\">    lb_algo rr|wrr|lc|wlc|lblc|sh|dh</div><div class=\"line\">    lb_kind NAT|DR|TUN</div><div class=\"line\">    persistence_timeout &lt;INT&gt;</div><div class=\"line\">    persistence_granularity &lt;NETMASK&gt;</div><div class=\"line\">    protocol TCP</div><div class=\"line\">    ha_suspend</div><div class=\"line\">    virtualhost &lt;STRING&gt;</div><div class=\"line\">    alpha</div><div class=\"line\">    omega</div><div class=\"line\">    quorum &lt;INT&gt;</div><div class=\"line\">    hysteresis &lt;INT&gt;</div><div class=\"line\">    quorum_up &lt;STRING&gt;|&lt;QUOTED-STRING&gt;</div><div class=\"line\">    quorum_down &lt;STRING&gt;|&lt;QUOTED-STRING&gt;</div><div class=\"line\">    sorry_server &lt;IPADDR&gt; &lt;PORT&gt;</div><div class=\"line\">    real_server &lt;IPADDR&gt; &lt;PORT&gt; &#123;</div><div class=\"line\">        weight &lt;INT&gt;</div><div class=\"line\">        inhibit_on_failure</div><div class=\"line\">        notify_up &lt;STRING&gt;|&lt;QUOTED-STRING&gt;</div><div class=\"line\">        notify_down &lt;STRING&gt;|&lt;QUOTED-STRING&gt;</div><div class=\"line\">        # HTTP_GET|SSL_GET|TCP_CHECK|SMTP_CHECK|MISC_CHECK</div><div class=\"line\">        HTTP_GET|SSL_GET &#123;</div><div class=\"line\">            url &#123;</div><div class=\"line\">                path &lt;STRING&gt;</div><div class=\"line\">                # Digest computed with genhash</div><div class=\"line\">                digest &lt;STRING&gt;</div><div class=\"line\">                status_code &lt;INT&gt;</div><div class=\"line\">            &#125;</div><div class=\"line\">            connect_port &lt;PORT&gt;</div><div class=\"line\">            connect_timeout &lt;INT&gt;</div><div class=\"line\">            nb_get_retry &lt;INT&gt;</div><div class=\"line\">            delay_before_retry &lt;INT&gt;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li>delay_loop 延迟轮询时间（单位秒）。</li>\n<li>lb_algo 后端调试算法（load balancing algorithm）。</li>\n<li>lb_kind LVS调度类型NAT/DR/TUN。</li>\n<li>virtualhost 用来给HTTP_GET和SSL_GET配置请求header的。</li>\n<li>sorry_server 当所有real server宕掉时，sorry server顶替。</li>\n<li>real_server 真正提供服务的服务器。</li>\n<li>weight 权重。</li>\n<li>notify_up/down 当real server宕掉或启动时执行的脚本。</li>\n</ul>\n<p>健康检查的方式，N多种方式。</p>\n<ul>\n<li>path 请求real serserver上的路径。</li>\n<li>digest/status_code 分别表示用genhash算出的结果和http状态码。</li>\n<li>connect_port 健康检查，如果端口通则认为服务器正常。</li>\n<li>connect_timeout,nb_get_retry,delay_before_retry分别表示超时时长、重试次数，下次重试的时间延迟。</li>\n</ul>\n<p>其他选项暂时不作说明。</p>\n<h2 id=\"keepalived主从切换\"><a href=\"#keepalived主从切换\" class=\"headerlink\" title=\"keepalived主从切换\"></a>keepalived主从切换</h2><p>主从切换比较让人蛋疼，需要将backup配置文件的priority选项的值调整的比master高50个点，然后reload配置文件就可以切换了。当时你也可以将master的keepalived停止，这样也可以进行主从切换。</p>\n<h2 id=\"keepalived仅做HA时的配置\"><a href=\"#keepalived仅做HA时的配置\" class=\"headerlink\" title=\"keepalived仅做HA时的配置\"></a>keepalived仅做HA时的配置</h2><p>请看该文档同级目录下的配置文件示例。</p>\n<p>说明：</p>\n<ul>\n<li>10.210.214.113 为keepalived的备机，其配置文件为113.keepalived.conf</li>\n<li>10.210.214.163 为keepalived的主机，其配置文件为163.keepalived.conf</li>\n<li>10.210.214.253 为Virtual IP，即提供服务的内网IP地址，在网卡eth0上面</li>\n<li>192.168.1.11 为模拟的提供服务的公网IP地址，在网卡eth1上面</li>\n</ul>\n<p>用tcpdump命令来捕获的结果如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">17:20:07.919419 IP 10.210.214.163 &gt; 224.0.0.18: VRRPv2, Advertisement, vrid 1, prio 200, authtype simple, intvl 1s, length 20</div></pre></td></tr></table></figure></p>\n<h2 id=\"LVS-Keepalived配置\"><a href=\"#LVS-Keepalived配置\" class=\"headerlink\" title=\"LVS+Keepalived配置\"></a>LVS+Keepalived配置</h2><blockquote>\n<p>注:Keepalived与LVS结合使用时一般还会用到一个工具ipvsadm，用来查看相关VS相关状态，关于ipvsadm的用法可以参考man手册。</p>\n</blockquote>\n<p>10.67.15.95为keepalived master，VIP为10.67.15.94，配置文件为95-lvs-keepalived.conf</p>\n<p>10.67.15.96为keepalived master，VIP为10.67.15.94，配置文件为96-lvs-keepalived.conf</p>\n<p>10.67.15.195为real server  </p>\n<p><strong>注意：</strong></p>\n<p>当使用LVS+DR+Keepalived配置时，需要在real server上添加一条iptables规则（其中dport根据情况添加或缺省）：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"># iptables -t nat -A PREROUTING -p tcp -d 10.67.15.94 --dport 80 -j REDIRECT</div></pre></td></tr></table></figure></p>\n<p>当使用LVS+NAT+Keepalived配置时，需要将real server的默认路由配置成Director的VIP10.67.15.94，必须确保client的请求是通过10.67.15.94到达real server的。</p>\n<h2 id=\"安装keepalived\"><a href=\"#安装keepalived\" class=\"headerlink\" title=\"安装keepalived\"></a>安装keepalived</h2><p>从keepalived<a href=\"http://www.keepalived.org/download.html\" target=\"_blank\" rel=\"external\">官网</a>下载合适的版本，解压并执行如下命令完成安装。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"># cd keepalived-xxx</div><div class=\"line\"># ./configure --bindir=/usr/bin --sbindir=/usr/sbin --sysconfdir=/etc --mandir=/usr/share</div><div class=\"line\"># make &amp;&amp; make install</div></pre></td></tr></table></figure></p>\n<p>你也可以打成<a href=\"https://github.com/chenzhiwei/linux/tree/master/rpm-package-management\" target=\"_blank\" rel=\"external\">RPM</a>包，然后安装。</p>\n<h2 id=\"说明\"><a href=\"#说明\" class=\"headerlink\" title=\"说明\"></a>说明</h2><p>我们用到的HA场景如下： 两台主机host113和host163，内网IP在eth1网卡上，分别是10.210.214.113和10.210.214.163，VIP为公网IP在eth0上，IP地址是202.102.152.253，网关为202.102.152.1。当VIP在host113上提供服务时，host113上的默认路由为202.102.152.1，提供服务的端口为202.102.152.253:443。host113发生故障需要将VIP及服务切回到host163上的时候，需要以下几步，第一将VIP接管过来，第二添加默认路由202.102.152.1，第三启动在端口202.102.152.253:443上的服务。</p>\n<p>如此一来，keepalived需要另外的脚本来完成添加默认路由和启动服务工作，这点和heartbeat中的resources是相同的。目前我进行了测试，发现keepalived速度要比heartbeat快，也就是说效率比heartbeat高。并且，最重要的一点，keepalived支持多个backup。</p>\n<p>不要问我为何有以上需求。要为两个不同的域名提供https服务，由于SSL证书问题，必须有两个公网IP地址分别绑定443端口。</p>\n<p>当然，通过<a href=\"http://en.wikipedia.org/wiki/Server_Name_Indication\" target=\"_blank\" rel=\"external\">SNI</a>也可以实现一个公网IP绑定443端口来为多个域名提供https服务，但是这需要浏览器支持（M$的IE浏览器不支持）。（<a href=\"http://nginx.org/en/docs/http/configuring_https_servers.html#sni\" target=\"_blank\" rel=\"external\">nginx</a>/<a href=\"http://wiki.apache.org/httpd/NameBasedSSLVHostsWithSNI\" target=\"_blank\" rel=\"external\">apache</a>）</p>\n<h2 id=\"吐槽\"><a href=\"#吐槽\" class=\"headerlink\" title=\"吐槽\"></a>吐槽</h2><p>keepalived的主从切换比较让人蛋疼，需要修改配置文件或停止一方的运行。但是由于keepalived是通过vrrp协议来实现failover（故障转移）的，因此也决定了手动主从切换的不便。</p>\n<p>keepalived的文档也很旧了，一直都找不到合适的文档，之前我就一直忽略了vrrp_script这个区域，导致很多事情想不通。</p>\n<p>另外，我发现我越来越喜欢keepalived了。。。</p>\n<p><a href=\"http://outofmemory.cn/wiki/keepalived-configuration\" target=\"_blank\" rel=\"external\">转自：http://outofmemory.cn/wiki/keepalived-configuration</a></p>\n","excerpt":"<h2 id=\"keepalived是什么\"><a href=\"#keepalived是什么\" class=\"headerlink\" title=\"keepalived是什么\"></a>keepalived是什么</h2><p>keepalived是集群管理中保证集群高可用的一个服务软件，其功能类似于<a href=\"https://github.com/chenzhiwei/linux/tree/master/heartbeat\">heartbeat</a>，用来防止单点故障。</p>\n<h2 id=\"keepalived工作原理\"><a href=\"#keepalived工作原理\" class=\"headerlink\" title=\"keepalived工作原理\"></a>keepalived工作原理</h2><p>keepalived是以VRRP协议为实现基础的，VRRP全称Virtual Router Redundancy Protocol，即<a href=\"http://en.wikipedia.org/wiki/VRRP\">虚拟路由冗余协议</a>。</p>\n<p>虚拟路由冗余协议，可以认为是实现路由器高可用的协议，即将N台提供相同功能的路由器组成一个路由器组，这个组里面有一个master和多个backup，master上面有一个对外提供服务的vip（该路由器所在局域网内其他机器的默认路由为该vip），master会发组播，当backup收不到vrrp包时就认为master宕掉了，这时就需要根据<a href=\"http://tools.ietf.org/html/rfc5798#section-5.1\">VRRP的优先级</a>来选举一个backup当master。这样的话就可以保证路由器的高可用了。</p>\n<p>keepalived主要有三个模块，分别是core、check和vrrp。</p>\n<ul>\n<li>core模块为keepalived的核心，负责主进程的启动、维护以及全局配置文件的加载和解析。</li>\n<li>check负责健康检查，包括常见的各种检查方式。</li>\n<li>vrrp模块是来实现VRRP协议的。</li>\n</ul>","more":"<h2 id=\"keepalived的配置文件\"><a href=\"#keepalived的配置文件\" class=\"headerlink\" title=\"keepalived的配置文件\"></a>keepalived的配置文件</h2><p>keepalived只有一个配置文件keepalived.conf，里面主要包括以下几个配置区域，分别是global_defs、static_ipaddress、static_routes、vrrp_script、vrrp_instance和virtual_server。</p>\n<h3 id=\"global-defs区域\"><a href=\"#global-defs区域\" class=\"headerlink\" title=\"global_defs区域\"></a>global_defs区域</h3><blockquote>\n<p>主要是配置故障发生时的通知对象以及机器标识</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">global_defs &#123;</div><div class=\"line\">    notification_email &#123;</div><div class=\"line\">        a@abc.com</div><div class=\"line\">        b@abc.com</div><div class=\"line\">        ...</div><div class=\"line\">    &#125;</div><div class=\"line\">    notification_email_from alert@abc.com</div><div class=\"line\">    smtp_server smtp.abc.com</div><div class=\"line\">    smtp_connect_timeout 30</div><div class=\"line\">    enable_traps</div><div class=\"line\">    router_id host163</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li>notification_email 故障发生时给谁发邮件通知。</li>\n<li>notification_email_from 通知邮件从哪个地址发出。</li>\n<li>smpt_server 通知邮件的smtp地址。</li>\n<li>smtp_connect_timeout 连接smtp服务器的超时时间。</li>\n<li>enable_traps 开启SNMP陷阱（<a href=\"http://en.wikipedia.org/wiki/Simple_Network_Management_Protocol\">Simple Network Management Protocol</a>）。</li>\n<li>router_id 标识本节点的字条串，通常为hostname，但不一定非得是hostname。故障发生时，邮件通知会用到。</li>\n</ul>\n<h3 id=\"static-ipaddress和static-routes\"><a href=\"#static-ipaddress和static-routes\" class=\"headerlink\" title=\"static_ipaddress和static_routes\"></a>static_ipaddress和static_routes</h3><blockquote>\n<p>static_ipaddress和static_routes区域配置的是是本节点的IP和路由信息。如果你的机器上已经配置了IP和路由，那么这两个区域可以不用配置。<br>其实，一般情况下你的机器都会有IP地址和路由信息的，因此没必要再在这两个区域配置。</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">static_ipaddress &#123;</div><div class=\"line\">    10.210.214.163/24 brd 10.210.214.255 dev eth0</div><div class=\"line\">    ...</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">static_routes &#123;</div><div class=\"line\">    10.0.0.0/8 via 10.210.214.1 dev eth0</div><div class=\"line\">    ...</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>以上分别表示启动/关闭keepalived时在本机执行的如下命令：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"># /sbin/ip addr add 10.210.214.163/24 brd 10.210.214.255 dev eth0</div><div class=\"line\"># /sbin/ip route add 10.0.0.0/8 via 10.210.214.1 dev eth0</div><div class=\"line\"># /sbin/ip addr del 10.210.214.163/24 brd 10.210.214.255 dev eth0</div><div class=\"line\"># /sbin/ip route del 10.0.0.0/8 via 10.210.214.1 dev eth0</div></pre></td></tr></table></figure></p>\n<p>注意： 请忽略这两个区域，因为我坚信你的机器肯定已经配置了IP和路由。</p>\n<h3 id=\"vrrp-script\"><a href=\"#vrrp-script\" class=\"headerlink\" title=\"vrrp_script\"></a>vrrp_script</h3><blockquote>\n<p>用来做健康检查的，当时检查失败时会将vrrp_instance的priority减少相应的值。</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">vrrp_script chk_http_port &#123;</div><div class=\"line\">    script &quot;&lt;/dev/tcp/127.0.0.1/80&quot;</div><div class=\"line\">    interval 1</div><div class=\"line\">    weight -10</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>以上意思是如果script中的指令执行失败，那么相应的vrrp_instance的优先级会减少10个点。</p>\n<h3 id=\"vrrp-instance和vrrp-sync-group区域\"><a href=\"#vrrp-instance和vrrp-sync-group区域\" class=\"headerlink\" title=\"vrrp_instance和vrrp_sync_group区域\"></a>vrrp_instance和vrrp_sync_group区域</h3><blockquote>\n<p>vrrp_instance用来定义对外提供服务的VIP区域及其相关属性。</p>\n<p>vrrp_rsync_group用来定义vrrp_intance组，使得这个组内成员动作一致。</p>\n</blockquote>\n<p>举个例子来说明一下其功能：</p>\n<p>两个vrrp_instance同属于一个vrrp_rsync_group，那么其中一个vrrp_instance发生故障切换时，另一个vrrp_instance也会跟着切换（即使这个instance没有发生故障）。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div></pre></td><td class=\"code\"><pre><div class=\"line\">vrrp_sync_group VG_1 &#123;</div><div class=\"line\">    group &#123;</div><div class=\"line\">        inside_network   # name of vrrp_instance (below)</div><div class=\"line\">        outside_network  # One for each moveable IP.</div><div class=\"line\">        ...</div><div class=\"line\">    &#125;</div><div class=\"line\">    notify_master /path/to_master.sh</div><div class=\"line\">    notify_backup /path/to_backup.sh</div><div class=\"line\">    notify_fault &quot;/path/fault.sh VG_1&quot;</div><div class=\"line\">    notify /path/notify.sh</div><div class=\"line\">    smtp_alert</div><div class=\"line\">&#125;</div><div class=\"line\">vrrp_instance VI_1 &#123;</div><div class=\"line\">    state MASTER</div><div class=\"line\">    interface eth0</div><div class=\"line\">    use_vmac &lt;VMAC_INTERFACE&gt;</div><div class=\"line\">    dont_track_primary</div><div class=\"line\">    track_interface &#123;</div><div class=\"line\">        eth0</div><div class=\"line\">        eth1</div><div class=\"line\">    &#125;</div><div class=\"line\">    mcast_src_ip &lt;IPADDR&gt;</div><div class=\"line\">    lvs_sync_daemon_interface eth1</div><div class=\"line\">    garp_master_delay 10</div><div class=\"line\">    virtual_router_id 1</div><div class=\"line\">    priority 100</div><div class=\"line\">    advert_int 1</div><div class=\"line\">    authentication &#123;</div><div class=\"line\">        auth_type PASS</div><div class=\"line\">        auth_pass 12345678</div><div class=\"line\">    &#125;</div><div class=\"line\">    virtual_ipaddress &#123;</div><div class=\"line\">        10.210.214.253/24 brd 10.210.214.255 dev eth0</div><div class=\"line\">        192.168.1.11/24 brd 192.168.1.255 dev eth1</div><div class=\"line\">    &#125;</div><div class=\"line\">    virtual_routes &#123;</div><div class=\"line\">        172.16.0.0/12 via 10.210.214.1</div><div class=\"line\">        192.168.1.0/24 via 192.168.1.1 dev eth1</div><div class=\"line\">        default via 202.102.152.1</div><div class=\"line\">    &#125;</div><div class=\"line\">    track_script &#123;</div><div class=\"line\">        chk_http_port</div><div class=\"line\">    &#125;</div><div class=\"line\">    nopreempt</div><div class=\"line\">    preempt_delay 300</div><div class=\"line\">    debug</div><div class=\"line\">    notify_master &lt;STRING&gt;|&lt;QUOTED-STRING&gt;</div><div class=\"line\">    notify_backup &lt;STRING&gt;|&lt;QUOTED-STRING&gt;</div><div class=\"line\">    notify_fault &lt;STRING&gt;|&lt;QUOTED-STRING&gt;</div><div class=\"line\">    notify &lt;STRING&gt;|&lt;QUOTED-STRING&gt;</div><div class=\"line\">    smtp_alert</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<ul>\n<li>notify_master/backup/fault 分别表示切换为主/备/出错时所执行的脚本。</li>\n<li>notify 表示任何一状态切换时都会调用该脚本，并且该脚本在以上三个脚本执行完成之后进行调用，keepalived会自动传递三个参数（$1 = “GROUP”|”INSTANCE”，$2 = name of group or instance，$3 = target state of transition(MASTER/BACKUP/FAULT)）。</li>\n<li>smtp_alert 表示是否开启邮件通知（用全局区域的邮件设置来发通知）。</li>\n<li>state 可以是MASTER或BACKUP，不过当其他节点keepalived启动时会将priority比较大的节点选举为MASTER，因此该项其实没有实质用途。</li>\n<li>interface 节点固有IP（非VIP）的网卡，用来发VRRP包。</li>\n<li>use_vmac 是否使用VRRP的虚拟MAC地址。</li>\n<li>dont_track_primary 忽略VRRP网卡错误。（默认未设置）</li>\n<li>track_interface 监控以下网卡，如果任何一个不通就会切换到FALT状态。（可选项）</li>\n<li>mcast_src_ip 修改vrrp组播包的源地址，默认源地址为master的IP。（由于是组播，因此即使修改了源地址，该master还是能收到回应的）</li>\n<li>lvs_sync_daemon_interface 绑定lvs syncd的网卡。</li>\n<li>garp_master_delay 当切为主状态后多久更新ARP缓存，默认5秒。</li>\n<li>virtual_router_id 取值在0-255之间，用来区分多个instance的VRRP组播。</li>\n</ul>\n<p>注意： 同一网段中virtual_router_id的值不能重复，否则会出错，相关错误信息如下。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">Keepalived_vrrp[27120]: ip address associated with VRID not present in received packet :</div><div class=\"line\">one or more VIP associated with VRID mismatch actual MASTER advert</div><div class=\"line\">bogus VRRP packet received on eth1 !!!</div><div class=\"line\">receive an invalid ip number count associated with VRID!</div><div class=\"line\">VRRP_Instance(xxx) ignoring received advertisment...</div></pre></td></tr></table></figure></p>\n<p>可以用这条命令来查看该网络中所存在的vrid：<code>tcpdump -nn -i any net 224.0.0.0/8</code></p>\n<ul>\n<li>priority 用来选举master的，要成为master，那么这个选项的值最好<a href=\"http://tools.ietf.org/html/rfc5798#section-8.3.2\">高于其他机器50个点</a>，该项<a href=\"http://tools.ietf.org/html/rfc5798#section-5.2.4\">取值范围</a>是1-255（在此范围之外会被识别成默认值100）。</li>\n<li>advert_int 发VRRP包的时间间隔，即多久进行一次master选举（可以认为是健康查检时间间隔）。</li>\n<li>authentication 认证区域，认证类型有PASS和HA（IPSEC），推荐使用PASS（密码只识别前8位）。</li>\n<li>virtual_ipaddress vip，不解释了。</li>\n<li>virtual_routes 虚拟路由，当IP漂过来之后需要添加的路由信息。</li>\n<li>virtual_ipaddress_excluded 发送的VRRP包里不包含的IP地址，为减少回应VRRP包的个数。在网卡上绑定的IP地址比较多的时候用。</li>\n<li>nopreempt 允许一个priority比较低的节点作为master，即使有priority更高的节点启动。</li>\n</ul>\n<p>首先nopreemt必须在state为BACKUP的节点上才生效（因为是BACKUP节点决定是否来成为MASTER的），其次要实现类似于关闭auto failback的功能需要将所有节点的state都设置为BACKUP，或者将master节点的priority设置的比BACKUP低。我个人推荐使用将所有节点的state都设置成BACKUP并且都加上nopreempt选项，这样就完成了关于autofailback功能，当想手动将某节点切换为MASTER时只需去掉该节点的nopreempt选项并且将priority改的比其他节点大，然后重新加载配置文件即可（等MASTER切过来之后再将配置文件改回去再reload一下）。</p>\n<p>当使用track_script时可以不用加nopreempt，只需要加上preempt_delay 5，这里的间隔时间要大于vrrp_script中定义的时长。</p>\n<ul>\n<li>preempt_delay master启动多久之后进行接管资源（VIP/Route信息等），并提是没有nopreempt选项。</li>\n</ul>\n<h3 id=\"virtual-server-group和virtual-server区域\"><a href=\"#virtual-server-group和virtual-server区域\" class=\"headerlink\" title=\"virtual_server_group和virtual_server区域\"></a>virtual_server_group和virtual_server区域</h3><blockquote>\n<p>virtual_server_group一般在超大型的LVS中用到，一般LVS用不过这东西，因此不多说。</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div></pre></td><td class=\"code\"><pre><div class=\"line\">virtual_server IP Port &#123;</div><div class=\"line\">    delay_loop &lt;INT&gt;</div><div class=\"line\">    lb_algo rr|wrr|lc|wlc|lblc|sh|dh</div><div class=\"line\">    lb_kind NAT|DR|TUN</div><div class=\"line\">    persistence_timeout &lt;INT&gt;</div><div class=\"line\">    persistence_granularity &lt;NETMASK&gt;</div><div class=\"line\">    protocol TCP</div><div class=\"line\">    ha_suspend</div><div class=\"line\">    virtualhost &lt;STRING&gt;</div><div class=\"line\">    alpha</div><div class=\"line\">    omega</div><div class=\"line\">    quorum &lt;INT&gt;</div><div class=\"line\">    hysteresis &lt;INT&gt;</div><div class=\"line\">    quorum_up &lt;STRING&gt;|&lt;QUOTED-STRING&gt;</div><div class=\"line\">    quorum_down &lt;STRING&gt;|&lt;QUOTED-STRING&gt;</div><div class=\"line\">    sorry_server &lt;IPADDR&gt; &lt;PORT&gt;</div><div class=\"line\">    real_server &lt;IPADDR&gt; &lt;PORT&gt; &#123;</div><div class=\"line\">        weight &lt;INT&gt;</div><div class=\"line\">        inhibit_on_failure</div><div class=\"line\">        notify_up &lt;STRING&gt;|&lt;QUOTED-STRING&gt;</div><div class=\"line\">        notify_down &lt;STRING&gt;|&lt;QUOTED-STRING&gt;</div><div class=\"line\">        # HTTP_GET|SSL_GET|TCP_CHECK|SMTP_CHECK|MISC_CHECK</div><div class=\"line\">        HTTP_GET|SSL_GET &#123;</div><div class=\"line\">            url &#123;</div><div class=\"line\">                path &lt;STRING&gt;</div><div class=\"line\">                # Digest computed with genhash</div><div class=\"line\">                digest &lt;STRING&gt;</div><div class=\"line\">                status_code &lt;INT&gt;</div><div class=\"line\">            &#125;</div><div class=\"line\">            connect_port &lt;PORT&gt;</div><div class=\"line\">            connect_timeout &lt;INT&gt;</div><div class=\"line\">            nb_get_retry &lt;INT&gt;</div><div class=\"line\">            delay_before_retry &lt;INT&gt;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li>delay_loop 延迟轮询时间（单位秒）。</li>\n<li>lb_algo 后端调试算法（load balancing algorithm）。</li>\n<li>lb_kind LVS调度类型NAT/DR/TUN。</li>\n<li>virtualhost 用来给HTTP_GET和SSL_GET配置请求header的。</li>\n<li>sorry_server 当所有real server宕掉时，sorry server顶替。</li>\n<li>real_server 真正提供服务的服务器。</li>\n<li>weight 权重。</li>\n<li>notify_up/down 当real server宕掉或启动时执行的脚本。</li>\n</ul>\n<p>健康检查的方式，N多种方式。</p>\n<ul>\n<li>path 请求real serserver上的路径。</li>\n<li>digest/status_code 分别表示用genhash算出的结果和http状态码。</li>\n<li>connect_port 健康检查，如果端口通则认为服务器正常。</li>\n<li>connect_timeout,nb_get_retry,delay_before_retry分别表示超时时长、重试次数，下次重试的时间延迟。</li>\n</ul>\n<p>其他选项暂时不作说明。</p>\n<h2 id=\"keepalived主从切换\"><a href=\"#keepalived主从切换\" class=\"headerlink\" title=\"keepalived主从切换\"></a>keepalived主从切换</h2><p>主从切换比较让人蛋疼，需要将backup配置文件的priority选项的值调整的比master高50个点，然后reload配置文件就可以切换了。当时你也可以将master的keepalived停止，这样也可以进行主从切换。</p>\n<h2 id=\"keepalived仅做HA时的配置\"><a href=\"#keepalived仅做HA时的配置\" class=\"headerlink\" title=\"keepalived仅做HA时的配置\"></a>keepalived仅做HA时的配置</h2><p>请看该文档同级目录下的配置文件示例。</p>\n<p>说明：</p>\n<ul>\n<li>10.210.214.113 为keepalived的备机，其配置文件为113.keepalived.conf</li>\n<li>10.210.214.163 为keepalived的主机，其配置文件为163.keepalived.conf</li>\n<li>10.210.214.253 为Virtual IP，即提供服务的内网IP地址，在网卡eth0上面</li>\n<li>192.168.1.11 为模拟的提供服务的公网IP地址，在网卡eth1上面</li>\n</ul>\n<p>用tcpdump命令来捕获的结果如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">17:20:07.919419 IP 10.210.214.163 &gt; 224.0.0.18: VRRPv2, Advertisement, vrid 1, prio 200, authtype simple, intvl 1s, length 20</div></pre></td></tr></table></figure></p>\n<h2 id=\"LVS-Keepalived配置\"><a href=\"#LVS-Keepalived配置\" class=\"headerlink\" title=\"LVS+Keepalived配置\"></a>LVS+Keepalived配置</h2><blockquote>\n<p>注:Keepalived与LVS结合使用时一般还会用到一个工具ipvsadm，用来查看相关VS相关状态，关于ipvsadm的用法可以参考man手册。</p>\n</blockquote>\n<p>10.67.15.95为keepalived master，VIP为10.67.15.94，配置文件为95-lvs-keepalived.conf</p>\n<p>10.67.15.96为keepalived master，VIP为10.67.15.94，配置文件为96-lvs-keepalived.conf</p>\n<p>10.67.15.195为real server  </p>\n<p><strong>注意：</strong></p>\n<p>当使用LVS+DR+Keepalived配置时，需要在real server上添加一条iptables规则（其中dport根据情况添加或缺省）：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"># iptables -t nat -A PREROUTING -p tcp -d 10.67.15.94 --dport 80 -j REDIRECT</div></pre></td></tr></table></figure></p>\n<p>当使用LVS+NAT+Keepalived配置时，需要将real server的默认路由配置成Director的VIP10.67.15.94，必须确保client的请求是通过10.67.15.94到达real server的。</p>\n<h2 id=\"安装keepalived\"><a href=\"#安装keepalived\" class=\"headerlink\" title=\"安装keepalived\"></a>安装keepalived</h2><p>从keepalived<a href=\"http://www.keepalived.org/download.html\">官网</a>下载合适的版本，解压并执行如下命令完成安装。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"># cd keepalived-xxx</div><div class=\"line\"># ./configure --bindir=/usr/bin --sbindir=/usr/sbin --sysconfdir=/etc --mandir=/usr/share</div><div class=\"line\"># make &amp;&amp; make install</div></pre></td></tr></table></figure></p>\n<p>你也可以打成<a href=\"https://github.com/chenzhiwei/linux/tree/master/rpm-package-management\">RPM</a>包，然后安装。</p>\n<h2 id=\"说明\"><a href=\"#说明\" class=\"headerlink\" title=\"说明\"></a>说明</h2><p>我们用到的HA场景如下： 两台主机host113和host163，内网IP在eth1网卡上，分别是10.210.214.113和10.210.214.163，VIP为公网IP在eth0上，IP地址是202.102.152.253，网关为202.102.152.1。当VIP在host113上提供服务时，host113上的默认路由为202.102.152.1，提供服务的端口为202.102.152.253:443。host113发生故障需要将VIP及服务切回到host163上的时候，需要以下几步，第一将VIP接管过来，第二添加默认路由202.102.152.1，第三启动在端口202.102.152.253:443上的服务。</p>\n<p>如此一来，keepalived需要另外的脚本来完成添加默认路由和启动服务工作，这点和heartbeat中的resources是相同的。目前我进行了测试，发现keepalived速度要比heartbeat快，也就是说效率比heartbeat高。并且，最重要的一点，keepalived支持多个backup。</p>\n<p>不要问我为何有以上需求。要为两个不同的域名提供https服务，由于SSL证书问题，必须有两个公网IP地址分别绑定443端口。</p>\n<p>当然，通过<a href=\"http://en.wikipedia.org/wiki/Server_Name_Indication\">SNI</a>也可以实现一个公网IP绑定443端口来为多个域名提供https服务，但是这需要浏览器支持（M$的IE浏览器不支持）。（<a href=\"http://nginx.org/en/docs/http/configuring_https_servers.html#sni\">nginx</a>/<a href=\"http://wiki.apache.org/httpd/NameBasedSSLVHostsWithSNI\">apache</a>）</p>\n<h2 id=\"吐槽\"><a href=\"#吐槽\" class=\"headerlink\" title=\"吐槽\"></a>吐槽</h2><p>keepalived的主从切换比较让人蛋疼，需要修改配置文件或停止一方的运行。但是由于keepalived是通过vrrp协议来实现failover（故障转移）的，因此也决定了手动主从切换的不便。</p>\n<p>keepalived的文档也很旧了，一直都找不到合适的文档，之前我就一直忽略了vrrp_script这个区域，导致很多事情想不通。</p>\n<p>另外，我发现我越来越喜欢keepalived了。。。</p>\n<p><a href=\"http://outofmemory.cn/wiki/keepalived-configuration\">转自：http://outofmemory.cn/wiki/keepalived-configuration</a></p>"},{"title":"事务的ACID概念","date":"2016-09-16T16:00:00.000Z","_content":"\n数据库中的事务就是一组原子行的SQL查询，或者说一个独立的工作但愿。也就是说，事务内的语句，要么全部执行成功，要么全部执行失败。\n\nACID表示原子性（atomicity）、一致性（consistency）、隔离行（isolation）和持久性（durability）。一个运行良好的事务处理系统，必须具备这些特征。\n> 一个实现了ACID的数据库，相比于没有实现ACID的数据库，通常需要更强的CPU，更大的内存，更多的存储空间。所以对于一些不需要事务支持的查询类型应用，选择一个非事务型的存储引擎，是可以获得更高的性能的。\n\n<!-- more -->\n\n## 事务ACID的概念\n- A,automicity 原子性\n> 即，一个不可分割的最小单元。\n\n- C,consistency 一致性\n> 总是从一种状态到另一种状态，没有第三种状态。\n\n- I,isolation 隔离性\n> 一个事务再提交之前，对其他事务是不可见的。即不同的事务之间相互之间不影响。\n\n- D,durability 持久性\n> 事务一旦提交，就会永久生效。\n\n## 隔离级别\n隔离级别，规定一个事务中所做的修改，哪些是在事务内和事务间是可见的，哪些是不可见的。\n一般，较低隔离级别的隔离可以支持更高的并发，系统的开销会更低。\n\n### 隔离要解决的问题\n\n- 脏读，Dirty read\n> 即其他事务可以读取到当前事务未提交的数据。\n\n- 不可重复读，nonrepeatable read\n> 即两次执行同样的查询，得到的结果可能是不一样的。\n\n- 幻读，Phantom read\n> 某一个事务在取一范围记录时，另一事务又在该范围插入了新纪录，当之前事务再读取该范围是，就会产生幻读。\n\n\n### 不同的隔离划分\n\n\n隔离级别| 脏读 | 不可重复读可能性 | 幻读 | 加锁读\n------|------|---------------|------|-----\nread uncommitted  | Y | Y | Y | Y\nread committed    | N | Y | Y | N\nrepeatable read   | N | N | Y | N\nserializable      | N | N | N | Y\n\n- Read uncommitted（未提交读）\n> 在这个级别下，事务中的修改，即使在没有提交的情况下，其他的事务也是可见的。\n>所以，除非有非常必要的理由，在实际应用中一般很少使用。\n\n- Read committed（提交读）\n> read committed隔离级别满足前面提到的隔离性的定义。即一个事务开始时，只能看见已经提交的事务所做的修改。换句话说，一个事务从开始到提交之前，所做的任何修改对其他的事务都是不可见的。\n> **大多数的数据库系统的默认隔离级别都是这个级别**\n> 但这个级别有时候会出现不可重复读的现象，即执行两次同样的查询可能会得到两个不同的结果。\n\n- repeatable read（可重复读）\n> 该级别解决了脏读的问题，而且保证了在同一个事务中多次读取同一条记录的结果是一致的。\n> **该级别是MySQL的默认事务级别**\n> 但是理论上，该级别下会出现另一个幻读的问题。\n> MySQL的InnoDB通过多版本并发控制（MVCC）来解决了该级别下出现幻读的可能性问题。\n\n- serializable（可串行化）\n> 该级别为最高的隔离级别。他通过强制事务串行执行，避免了前面 repeatable read 级别下可能会出现幻读的情况。简单说，就是serializable会在读取的每行数据上都加锁。所以会导致大量的超时和锁争用的情况。故实际应用中该级别也很少用到。\n","source":"_posts/事务的ACID概念.md","raw":"---\ntitle: 事务的ACID概念\ndate: 2016-09-17 00:00:00\ntags:\n- 事务\n- ACID\ncategories:\n- MySQL\n---\n\n数据库中的事务就是一组原子行的SQL查询，或者说一个独立的工作但愿。也就是说，事务内的语句，要么全部执行成功，要么全部执行失败。\n\nACID表示原子性（atomicity）、一致性（consistency）、隔离行（isolation）和持久性（durability）。一个运行良好的事务处理系统，必须具备这些特征。\n> 一个实现了ACID的数据库，相比于没有实现ACID的数据库，通常需要更强的CPU，更大的内存，更多的存储空间。所以对于一些不需要事务支持的查询类型应用，选择一个非事务型的存储引擎，是可以获得更高的性能的。\n\n<!-- more -->\n\n## 事务ACID的概念\n- A,automicity 原子性\n> 即，一个不可分割的最小单元。\n\n- C,consistency 一致性\n> 总是从一种状态到另一种状态，没有第三种状态。\n\n- I,isolation 隔离性\n> 一个事务再提交之前，对其他事务是不可见的。即不同的事务之间相互之间不影响。\n\n- D,durability 持久性\n> 事务一旦提交，就会永久生效。\n\n## 隔离级别\n隔离级别，规定一个事务中所做的修改，哪些是在事务内和事务间是可见的，哪些是不可见的。\n一般，较低隔离级别的隔离可以支持更高的并发，系统的开销会更低。\n\n### 隔离要解决的问题\n\n- 脏读，Dirty read\n> 即其他事务可以读取到当前事务未提交的数据。\n\n- 不可重复读，nonrepeatable read\n> 即两次执行同样的查询，得到的结果可能是不一样的。\n\n- 幻读，Phantom read\n> 某一个事务在取一范围记录时，另一事务又在该范围插入了新纪录，当之前事务再读取该范围是，就会产生幻读。\n\n\n### 不同的隔离划分\n\n\n隔离级别| 脏读 | 不可重复读可能性 | 幻读 | 加锁读\n------|------|---------------|------|-----\nread uncommitted  | Y | Y | Y | Y\nread committed    | N | Y | Y | N\nrepeatable read   | N | N | Y | N\nserializable      | N | N | N | Y\n\n- Read uncommitted（未提交读）\n> 在这个级别下，事务中的修改，即使在没有提交的情况下，其他的事务也是可见的。\n>所以，除非有非常必要的理由，在实际应用中一般很少使用。\n\n- Read committed（提交读）\n> read committed隔离级别满足前面提到的隔离性的定义。即一个事务开始时，只能看见已经提交的事务所做的修改。换句话说，一个事务从开始到提交之前，所做的任何修改对其他的事务都是不可见的。\n> **大多数的数据库系统的默认隔离级别都是这个级别**\n> 但这个级别有时候会出现不可重复读的现象，即执行两次同样的查询可能会得到两个不同的结果。\n\n- repeatable read（可重复读）\n> 该级别解决了脏读的问题，而且保证了在同一个事务中多次读取同一条记录的结果是一致的。\n> **该级别是MySQL的默认事务级别**\n> 但是理论上，该级别下会出现另一个幻读的问题。\n> MySQL的InnoDB通过多版本并发控制（MVCC）来解决了该级别下出现幻读的可能性问题。\n\n- serializable（可串行化）\n> 该级别为最高的隔离级别。他通过强制事务串行执行，避免了前面 repeatable read 级别下可能会出现幻读的情况。简单说，就是serializable会在读取的每行数据上都加锁。所以会导致大量的超时和锁争用的情况。故实际应用中该级别也很少用到。\n","slug":"事务的ACID概念","published":1,"updated":"2016-09-16T17:54:35.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"city8vnok002jg29fbyispcqk","content":"<p>数据库中的事务就是一组原子行的SQL查询，或者说一个独立的工作但愿。也就是说，事务内的语句，要么全部执行成功，要么全部执行失败。</p>\n<p>ACID表示原子性（atomicity）、一致性（consistency）、隔离行（isolation）和持久性（durability）。一个运行良好的事务处理系统，必须具备这些特征。</p>\n<blockquote>\n<p>一个实现了ACID的数据库，相比于没有实现ACID的数据库，通常需要更强的CPU，更大的内存，更多的存储空间。所以对于一些不需要事务支持的查询类型应用，选择一个非事务型的存储引擎，是可以获得更高的性能的。</p>\n</blockquote>\n<a id=\"more\"></a>\n<h2 id=\"事务ACID的概念\"><a href=\"#事务ACID的概念\" class=\"headerlink\" title=\"事务ACID的概念\"></a>事务ACID的概念</h2><ul>\n<li><p>A,automicity 原子性</p>\n<blockquote>\n<p>即，一个不可分割的最小单元。</p>\n</blockquote>\n</li>\n<li><p>C,consistency 一致性</p>\n<blockquote>\n<p>总是从一种状态到另一种状态，没有第三种状态。</p>\n</blockquote>\n</li>\n<li><p>I,isolation 隔离性</p>\n<blockquote>\n<p>一个事务再提交之前，对其他事务是不可见的。即不同的事务之间相互之间不影响。</p>\n</blockquote>\n</li>\n<li><p>D,durability 持久性</p>\n<blockquote>\n<p>事务一旦提交，就会永久生效。</p>\n</blockquote>\n</li>\n</ul>\n<h2 id=\"隔离级别\"><a href=\"#隔离级别\" class=\"headerlink\" title=\"隔离级别\"></a>隔离级别</h2><p>隔离级别，规定一个事务中所做的修改，哪些是在事务内和事务间是可见的，哪些是不可见的。<br>一般，较低隔离级别的隔离可以支持更高的并发，系统的开销会更低。</p>\n<h3 id=\"隔离要解决的问题\"><a href=\"#隔离要解决的问题\" class=\"headerlink\" title=\"隔离要解决的问题\"></a>隔离要解决的问题</h3><ul>\n<li><p>脏读，Dirty read</p>\n<blockquote>\n<p>即其他事务可以读取到当前事务未提交的数据。</p>\n</blockquote>\n</li>\n<li><p>不可重复读，nonrepeatable read</p>\n<blockquote>\n<p>即两次执行同样的查询，得到的结果可能是不一样的。</p>\n</blockquote>\n</li>\n<li><p>幻读，Phantom read</p>\n<blockquote>\n<p>某一个事务在取一范围记录时，另一事务又在该范围插入了新纪录，当之前事务再读取该范围是，就会产生幻读。</p>\n</blockquote>\n</li>\n</ul>\n<h3 id=\"不同的隔离划分\"><a href=\"#不同的隔离划分\" class=\"headerlink\" title=\"不同的隔离划分\"></a>不同的隔离划分</h3><table>\n<thead>\n<tr>\n<th>隔离级别</th>\n<th>脏读</th>\n<th>不可重复读可能性</th>\n<th>幻读</th>\n<th>加锁读</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>read uncommitted</td>\n<td>Y</td>\n<td>Y</td>\n<td>Y</td>\n<td>Y</td>\n</tr>\n<tr>\n<td>read committed</td>\n<td>N</td>\n<td>Y</td>\n<td>Y</td>\n<td>N</td>\n</tr>\n<tr>\n<td>repeatable read</td>\n<td>N</td>\n<td>N</td>\n<td>Y</td>\n<td>N</td>\n</tr>\n<tr>\n<td>serializable</td>\n<td>N</td>\n<td>N</td>\n<td>N</td>\n<td>Y</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li><p>Read uncommitted（未提交读）</p>\n<blockquote>\n<p>在这个级别下，事务中的修改，即使在没有提交的情况下，其他的事务也是可见的。<br>所以，除非有非常必要的理由，在实际应用中一般很少使用。</p>\n</blockquote>\n</li>\n<li><p>Read committed（提交读）</p>\n<blockquote>\n<p>read committed隔离级别满足前面提到的隔离性的定义。即一个事务开始时，只能看见已经提交的事务所做的修改。换句话说，一个事务从开始到提交之前，所做的任何修改对其他的事务都是不可见的。<br><strong>大多数的数据库系统的默认隔离级别都是这个级别</strong><br>但这个级别有时候会出现不可重复读的现象，即执行两次同样的查询可能会得到两个不同的结果。</p>\n</blockquote>\n</li>\n<li><p>repeatable read（可重复读）</p>\n<blockquote>\n<p>该级别解决了脏读的问题，而且保证了在同一个事务中多次读取同一条记录的结果是一致的。<br><strong>该级别是MySQL的默认事务级别</strong><br>但是理论上，该级别下会出现另一个幻读的问题。<br>MySQL的InnoDB通过多版本并发控制（MVCC）来解决了该级别下出现幻读的可能性问题。</p>\n</blockquote>\n</li>\n<li><p>serializable（可串行化）</p>\n<blockquote>\n<p>该级别为最高的隔离级别。他通过强制事务串行执行，避免了前面 repeatable read 级别下可能会出现幻读的情况。简单说，就是serializable会在读取的每行数据上都加锁。所以会导致大量的超时和锁争用的情况。故实际应用中该级别也很少用到。</p>\n</blockquote>\n</li>\n</ul>\n","excerpt":"<p>数据库中的事务就是一组原子行的SQL查询，或者说一个独立的工作但愿。也就是说，事务内的语句，要么全部执行成功，要么全部执行失败。</p>\n<p>ACID表示原子性（atomicity）、一致性（consistency）、隔离行（isolation）和持久性（durability）。一个运行良好的事务处理系统，必须具备这些特征。</p>\n<blockquote>\n<p>一个实现了ACID的数据库，相比于没有实现ACID的数据库，通常需要更强的CPU，更大的内存，更多的存储空间。所以对于一些不需要事务支持的查询类型应用，选择一个非事务型的存储引擎，是可以获得更高的性能的。</p>\n</blockquote>","more":"<h2 id=\"事务ACID的概念\"><a href=\"#事务ACID的概念\" class=\"headerlink\" title=\"事务ACID的概念\"></a>事务ACID的概念</h2><ul>\n<li><p>A,automicity 原子性</p>\n<blockquote>\n<p>即，一个不可分割的最小单元。</p>\n</blockquote>\n</li>\n<li><p>C,consistency 一致性</p>\n<blockquote>\n<p>总是从一种状态到另一种状态，没有第三种状态。</p>\n</blockquote>\n</li>\n<li><p>I,isolation 隔离性</p>\n<blockquote>\n<p>一个事务再提交之前，对其他事务是不可见的。即不同的事务之间相互之间不影响。</p>\n</blockquote>\n</li>\n<li><p>D,durability 持久性</p>\n<blockquote>\n<p>事务一旦提交，就会永久生效。</p>\n</blockquote>\n</li>\n</ul>\n<h2 id=\"隔离级别\"><a href=\"#隔离级别\" class=\"headerlink\" title=\"隔离级别\"></a>隔离级别</h2><p>隔离级别，规定一个事务中所做的修改，哪些是在事务内和事务间是可见的，哪些是不可见的。<br>一般，较低隔离级别的隔离可以支持更高的并发，系统的开销会更低。</p>\n<h3 id=\"隔离要解决的问题\"><a href=\"#隔离要解决的问题\" class=\"headerlink\" title=\"隔离要解决的问题\"></a>隔离要解决的问题</h3><ul>\n<li><p>脏读，Dirty read</p>\n<blockquote>\n<p>即其他事务可以读取到当前事务未提交的数据。</p>\n</blockquote>\n</li>\n<li><p>不可重复读，nonrepeatable read</p>\n<blockquote>\n<p>即两次执行同样的查询，得到的结果可能是不一样的。</p>\n</blockquote>\n</li>\n<li><p>幻读，Phantom read</p>\n<blockquote>\n<p>某一个事务在取一范围记录时，另一事务又在该范围插入了新纪录，当之前事务再读取该范围是，就会产生幻读。</p>\n</blockquote>\n</li>\n</ul>\n<h3 id=\"不同的隔离划分\"><a href=\"#不同的隔离划分\" class=\"headerlink\" title=\"不同的隔离划分\"></a>不同的隔离划分</h3><table>\n<thead>\n<tr>\n<th>隔离级别</th>\n<th>脏读</th>\n<th>不可重复读可能性</th>\n<th>幻读</th>\n<th>加锁读</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>read uncommitted</td>\n<td>Y</td>\n<td>Y</td>\n<td>Y</td>\n<td>Y</td>\n</tr>\n<tr>\n<td>read committed</td>\n<td>N</td>\n<td>Y</td>\n<td>Y</td>\n<td>N</td>\n</tr>\n<tr>\n<td>repeatable read</td>\n<td>N</td>\n<td>N</td>\n<td>Y</td>\n<td>N</td>\n</tr>\n<tr>\n<td>serializable</td>\n<td>N</td>\n<td>N</td>\n<td>N</td>\n<td>Y</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li><p>Read uncommitted（未提交读）</p>\n<blockquote>\n<p>在这个级别下，事务中的修改，即使在没有提交的情况下，其他的事务也是可见的。<br>所以，除非有非常必要的理由，在实际应用中一般很少使用。</p>\n</blockquote>\n</li>\n<li><p>Read committed（提交读）</p>\n<blockquote>\n<p>read committed隔离级别满足前面提到的隔离性的定义。即一个事务开始时，只能看见已经提交的事务所做的修改。换句话说，一个事务从开始到提交之前，所做的任何修改对其他的事务都是不可见的。<br><strong>大多数的数据库系统的默认隔离级别都是这个级别</strong><br>但这个级别有时候会出现不可重复读的现象，即执行两次同样的查询可能会得到两个不同的结果。</p>\n</blockquote>\n</li>\n<li><p>repeatable read（可重复读）</p>\n<blockquote>\n<p>该级别解决了脏读的问题，而且保证了在同一个事务中多次读取同一条记录的结果是一致的。<br><strong>该级别是MySQL的默认事务级别</strong><br>但是理论上，该级别下会出现另一个幻读的问题。<br>MySQL的InnoDB通过多版本并发控制（MVCC）来解决了该级别下出现幻读的可能性问题。</p>\n</blockquote>\n</li>\n<li><p>serializable（可串行化）</p>\n<blockquote>\n<p>该级别为最高的隔离级别。他通过强制事务串行执行，避免了前面 repeatable read 级别下可能会出现幻读的情况。简单说，就是serializable会在读取的每行数据上都加锁。所以会导致大量的超时和锁争用的情况。故实际应用中该级别也很少用到。</p>\n</blockquote>\n</li>\n</ul>"},{"title":"Nginx安装","date":"2016-09-25T13:30:00.000Z","ctime":"2016-09-25T13:30:00.000Z","utime":"2016-09-25T13:30:00.000Z","modif_times":0,"_content":"\n![nginx](http://n.sinaimg.cn/games/3ece443e/20160925/nginx_log.png)\n\n<!-- more -->\n\n## 准备\nOS：CentOS 7.2 64\n\nNginx：[nginx-1.11.4](http://n.sinaimg.cn/games/3ece443e/20160925/nginx-1.11.4.tar.gz)\n\n## 编译环境准备\n```\nyum -y install gcc pcre pcre-devel zlib zlib-devel openssl openssl-devel\n```\n> 依赖工具说明:\n> gcc 编译器\n> pcre 正则表达式工具\n> zlib 传输内容压缩\n> openssl Https支持\n\n## 编译安装\n解压源码包\n```\ntar -zxvf nginx-1.11.4.tar.gz\n```\n进入源码包目录\n```\ncd nginx-1.11.4\n```\n\n执行配置命令\n```\n./configure --prefix=/usr/local\nConfiguration summary\n  + using PCRE library: /usr/local/pcre\n  + OpenSSL library is not used\n  + using system zlib library\n\n  nginx path prefix: \"/usr/local/nginx\"\n  nginx binary file: \"/usr/local/nginx/sbin/nginx\"\n  nginx modules path: \"/usr/local/nginx/modules\"\n  nginx configuration prefix: \"/usr/local/nginx/conf\"\n  nginx configuration file: \"/usr/local/nginx/conf/nginx.conf\"\n  nginx pid file: \"/usr/local/nginx/logs/nginx.pid\"\n  nginx error log file: \"/usr/local/nginx/logs/error.log\"\n  nginx http access log file: \"/usr/local/nginx/logs/access.log\"\n  nginx http client request body temporary files: \"client_body_temp\"\n  nginx http proxy temporary files: \"proxy_temp\"\n  nginx http fastcgi temporary files: \"fastcgi_temp\"\n  nginx http uwsgi temporary files: \"uwsgi_temp\"\n  nginx http scgi temporary files: \"scgi_temp\"\n```\n执行编译安装\n```\nmake && make install\n```\n## 管理\n### 启动\n```\n/usr/local/nginx/sbin/nginx\n```\n### 停止\n```\n/usr/local/nginx/sbin/nginx -s stop\n```\n### 重启\n```\n/usr/local/nginx/sbin/nginx -s reload\n```\n### 查看Nginx进程状态\n```\nps aux |grep nginx\n```\n结果形如\n```\nroot     24367  0.0  0.0  20472   604 ?        Ss   22:52   0:00 nginx: master process /usr/local/nginx/sbin/nginx\nnobody   24368  0.0  0.0  20900  1320 ?        S    22:52   0:00 nginx: worker process\nroot     24370  0.0  0.0 112664   976 pts/0    S+   22:52   0:00 grep --color=auto nginx\n```\n> master proccess为主进程 守护进程\n> worker proccess为工作进程, 用于响应请求\n\n\n### 设置开机自动启动\n编辑文件 /etc/rc.d/rc.local\n```\necho \"/usr/local/nginx/sbin/nginx\" >> /etc/rc.d/rc.local\n```\n\n## 测试\n启动nginx，在浏览器通过IP地址访问服务器。查看是否有响应。\n\n~over\n","source":"_posts/nginx安装.md","raw":"---\ntitle: Nginx安装\ndate: 2016-09-25 21:30:00\nctime: 2016-09-25 21:30:00\nutime: 2016-09-25 21:30:00\nmodif_times: 0\ntags:\n- Nginx安装\ncategories:\n- Nginx\n---\n\n![nginx](http://n.sinaimg.cn/games/3ece443e/20160925/nginx_log.png)\n\n<!-- more -->\n\n## 准备\nOS：CentOS 7.2 64\n\nNginx：[nginx-1.11.4](http://n.sinaimg.cn/games/3ece443e/20160925/nginx-1.11.4.tar.gz)\n\n## 编译环境准备\n```\nyum -y install gcc pcre pcre-devel zlib zlib-devel openssl openssl-devel\n```\n> 依赖工具说明:\n> gcc 编译器\n> pcre 正则表达式工具\n> zlib 传输内容压缩\n> openssl Https支持\n\n## 编译安装\n解压源码包\n```\ntar -zxvf nginx-1.11.4.tar.gz\n```\n进入源码包目录\n```\ncd nginx-1.11.4\n```\n\n执行配置命令\n```\n./configure --prefix=/usr/local\nConfiguration summary\n  + using PCRE library: /usr/local/pcre\n  + OpenSSL library is not used\n  + using system zlib library\n\n  nginx path prefix: \"/usr/local/nginx\"\n  nginx binary file: \"/usr/local/nginx/sbin/nginx\"\n  nginx modules path: \"/usr/local/nginx/modules\"\n  nginx configuration prefix: \"/usr/local/nginx/conf\"\n  nginx configuration file: \"/usr/local/nginx/conf/nginx.conf\"\n  nginx pid file: \"/usr/local/nginx/logs/nginx.pid\"\n  nginx error log file: \"/usr/local/nginx/logs/error.log\"\n  nginx http access log file: \"/usr/local/nginx/logs/access.log\"\n  nginx http client request body temporary files: \"client_body_temp\"\n  nginx http proxy temporary files: \"proxy_temp\"\n  nginx http fastcgi temporary files: \"fastcgi_temp\"\n  nginx http uwsgi temporary files: \"uwsgi_temp\"\n  nginx http scgi temporary files: \"scgi_temp\"\n```\n执行编译安装\n```\nmake && make install\n```\n## 管理\n### 启动\n```\n/usr/local/nginx/sbin/nginx\n```\n### 停止\n```\n/usr/local/nginx/sbin/nginx -s stop\n```\n### 重启\n```\n/usr/local/nginx/sbin/nginx -s reload\n```\n### 查看Nginx进程状态\n```\nps aux |grep nginx\n```\n结果形如\n```\nroot     24367  0.0  0.0  20472   604 ?        Ss   22:52   0:00 nginx: master process /usr/local/nginx/sbin/nginx\nnobody   24368  0.0  0.0  20900  1320 ?        S    22:52   0:00 nginx: worker process\nroot     24370  0.0  0.0 112664   976 pts/0    S+   22:52   0:00 grep --color=auto nginx\n```\n> master proccess为主进程 守护进程\n> worker proccess为工作进程, 用于响应请求\n\n\n### 设置开机自动启动\n编辑文件 /etc/rc.d/rc.local\n```\necho \"/usr/local/nginx/sbin/nginx\" >> /etc/rc.d/rc.local\n```\n\n## 测试\n启动nginx，在浏览器通过IP地址访问服务器。查看是否有响应。\n\n~over\n","slug":"nginx安装","published":1,"updated":"2016-09-25T10:46:05.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"city8vnon002ng29flsrxvlbc","content":"<p><img src=\"http://n.sinaimg.cn/games/3ece443e/20160925/nginx_log.png\" alt=\"nginx\"></p>\n<a id=\"more\"></a>\n<h2 id=\"准备\"><a href=\"#准备\" class=\"headerlink\" title=\"准备\"></a>准备</h2><p>OS：CentOS 7.2 64</p>\n<p>Nginx：<a href=\"http://n.sinaimg.cn/games/3ece443e/20160925/nginx-1.11.4.tar.gz\" target=\"_blank\" rel=\"external\">nginx-1.11.4</a></p>\n<h2 id=\"编译环境准备\"><a href=\"#编译环境准备\" class=\"headerlink\" title=\"编译环境准备\"></a>编译环境准备</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">yum -y install gcc pcre pcre-devel zlib zlib-devel openssl openssl-devel</div></pre></td></tr></table></figure>\n<blockquote>\n<p>依赖工具说明:<br>gcc 编译器<br>pcre 正则表达式工具<br>zlib 传输内容压缩<br>openssl Https支持</p>\n</blockquote>\n<h2 id=\"编译安装\"><a href=\"#编译安装\" class=\"headerlink\" title=\"编译安装\"></a>编译安装</h2><p>解压源码包<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">tar -zxvf nginx-1.11.4.tar.gz</div></pre></td></tr></table></figure></p>\n<p>进入源码包目录<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">cd nginx-1.11.4</div></pre></td></tr></table></figure></p>\n<p>执行配置命令<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">./configure --prefix=/usr/local</div><div class=\"line\">Configuration summary</div><div class=\"line\">  + using PCRE library: /usr/local/pcre</div><div class=\"line\">  + OpenSSL library is not used</div><div class=\"line\">  + using system zlib library</div><div class=\"line\"></div><div class=\"line\">  nginx path prefix: &quot;/usr/local/nginx&quot;</div><div class=\"line\">  nginx binary file: &quot;/usr/local/nginx/sbin/nginx&quot;</div><div class=\"line\">  nginx modules path: &quot;/usr/local/nginx/modules&quot;</div><div class=\"line\">  nginx configuration prefix: &quot;/usr/local/nginx/conf&quot;</div><div class=\"line\">  nginx configuration file: &quot;/usr/local/nginx/conf/nginx.conf&quot;</div><div class=\"line\">  nginx pid file: &quot;/usr/local/nginx/logs/nginx.pid&quot;</div><div class=\"line\">  nginx error log file: &quot;/usr/local/nginx/logs/error.log&quot;</div><div class=\"line\">  nginx http access log file: &quot;/usr/local/nginx/logs/access.log&quot;</div><div class=\"line\">  nginx http client request body temporary files: &quot;client_body_temp&quot;</div><div class=\"line\">  nginx http proxy temporary files: &quot;proxy_temp&quot;</div><div class=\"line\">  nginx http fastcgi temporary files: &quot;fastcgi_temp&quot;</div><div class=\"line\">  nginx http uwsgi temporary files: &quot;uwsgi_temp&quot;</div><div class=\"line\">  nginx http scgi temporary files: &quot;scgi_temp&quot;</div></pre></td></tr></table></figure></p>\n<p>执行编译安装<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">make &amp;&amp; make install</div></pre></td></tr></table></figure></p>\n<h2 id=\"管理\"><a href=\"#管理\" class=\"headerlink\" title=\"管理\"></a>管理</h2><h3 id=\"启动\"><a href=\"#启动\" class=\"headerlink\" title=\"启动\"></a>启动</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">/usr/local/nginx/sbin/nginx</div></pre></td></tr></table></figure>\n<h3 id=\"停止\"><a href=\"#停止\" class=\"headerlink\" title=\"停止\"></a>停止</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">/usr/local/nginx/sbin/nginx -s stop</div></pre></td></tr></table></figure>\n<h3 id=\"重启\"><a href=\"#重启\" class=\"headerlink\" title=\"重启\"></a>重启</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">/usr/local/nginx/sbin/nginx -s reload</div></pre></td></tr></table></figure>\n<h3 id=\"查看Nginx进程状态\"><a href=\"#查看Nginx进程状态\" class=\"headerlink\" title=\"查看Nginx进程状态\"></a>查看Nginx进程状态</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">ps aux |grep nginx</div></pre></td></tr></table></figure>\n<p>结果形如<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">root     24367  0.0  0.0  20472   604 ?        Ss   22:52   0:00 nginx: master process /usr/local/nginx/sbin/nginx</div><div class=\"line\">nobody   24368  0.0  0.0  20900  1320 ?        S    22:52   0:00 nginx: worker process</div><div class=\"line\">root     24370  0.0  0.0 112664   976 pts/0    S+   22:52   0:00 grep --color=auto nginx</div></pre></td></tr></table></figure></p>\n<blockquote>\n<p>master proccess为主进程 守护进程<br>worker proccess为工作进程, 用于响应请求</p>\n</blockquote>\n<h3 id=\"设置开机自动启动\"><a href=\"#设置开机自动启动\" class=\"headerlink\" title=\"设置开机自动启动\"></a>设置开机自动启动</h3><p>编辑文件 /etc/rc.d/rc.local<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">echo &quot;/usr/local/nginx/sbin/nginx&quot; &gt;&gt; /etc/rc.d/rc.local</div></pre></td></tr></table></figure></p>\n<h2 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h2><p>启动nginx，在浏览器通过IP地址访问服务器。查看是否有响应。</p>\n<p>~over</p>\n","excerpt":"<p><img src=\"http://n.sinaimg.cn/games/3ece443e/20160925/nginx_log.png\" alt=\"nginx\"></p>","more":"<h2 id=\"准备\"><a href=\"#准备\" class=\"headerlink\" title=\"准备\"></a>准备</h2><p>OS：CentOS 7.2 64</p>\n<p>Nginx：<a href=\"http://n.sinaimg.cn/games/3ece443e/20160925/nginx-1.11.4.tar.gz\">nginx-1.11.4</a></p>\n<h2 id=\"编译环境准备\"><a href=\"#编译环境准备\" class=\"headerlink\" title=\"编译环境准备\"></a>编译环境准备</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">yum -y install gcc pcre pcre-devel zlib zlib-devel openssl openssl-devel</div></pre></td></tr></table></figure>\n<blockquote>\n<p>依赖工具说明:<br>gcc 编译器<br>pcre 正则表达式工具<br>zlib 传输内容压缩<br>openssl Https支持</p>\n</blockquote>\n<h2 id=\"编译安装\"><a href=\"#编译安装\" class=\"headerlink\" title=\"编译安装\"></a>编译安装</h2><p>解压源码包<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">tar -zxvf nginx-1.11.4.tar.gz</div></pre></td></tr></table></figure></p>\n<p>进入源码包目录<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">cd nginx-1.11.4</div></pre></td></tr></table></figure></p>\n<p>执行配置命令<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">./configure --prefix=/usr/local</div><div class=\"line\">Configuration summary</div><div class=\"line\">  + using PCRE library: /usr/local/pcre</div><div class=\"line\">  + OpenSSL library is not used</div><div class=\"line\">  + using system zlib library</div><div class=\"line\"></div><div class=\"line\">  nginx path prefix: &quot;/usr/local/nginx&quot;</div><div class=\"line\">  nginx binary file: &quot;/usr/local/nginx/sbin/nginx&quot;</div><div class=\"line\">  nginx modules path: &quot;/usr/local/nginx/modules&quot;</div><div class=\"line\">  nginx configuration prefix: &quot;/usr/local/nginx/conf&quot;</div><div class=\"line\">  nginx configuration file: &quot;/usr/local/nginx/conf/nginx.conf&quot;</div><div class=\"line\">  nginx pid file: &quot;/usr/local/nginx/logs/nginx.pid&quot;</div><div class=\"line\">  nginx error log file: &quot;/usr/local/nginx/logs/error.log&quot;</div><div class=\"line\">  nginx http access log file: &quot;/usr/local/nginx/logs/access.log&quot;</div><div class=\"line\">  nginx http client request body temporary files: &quot;client_body_temp&quot;</div><div class=\"line\">  nginx http proxy temporary files: &quot;proxy_temp&quot;</div><div class=\"line\">  nginx http fastcgi temporary files: &quot;fastcgi_temp&quot;</div><div class=\"line\">  nginx http uwsgi temporary files: &quot;uwsgi_temp&quot;</div><div class=\"line\">  nginx http scgi temporary files: &quot;scgi_temp&quot;</div></pre></td></tr></table></figure></p>\n<p>执行编译安装<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">make &amp;&amp; make install</div></pre></td></tr></table></figure></p>\n<h2 id=\"管理\"><a href=\"#管理\" class=\"headerlink\" title=\"管理\"></a>管理</h2><h3 id=\"启动\"><a href=\"#启动\" class=\"headerlink\" title=\"启动\"></a>启动</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">/usr/local/nginx/sbin/nginx</div></pre></td></tr></table></figure>\n<h3 id=\"停止\"><a href=\"#停止\" class=\"headerlink\" title=\"停止\"></a>停止</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">/usr/local/nginx/sbin/nginx -s stop</div></pre></td></tr></table></figure>\n<h3 id=\"重启\"><a href=\"#重启\" class=\"headerlink\" title=\"重启\"></a>重启</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">/usr/local/nginx/sbin/nginx -s reload</div></pre></td></tr></table></figure>\n<h3 id=\"查看Nginx进程状态\"><a href=\"#查看Nginx进程状态\" class=\"headerlink\" title=\"查看Nginx进程状态\"></a>查看Nginx进程状态</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">ps aux |grep nginx</div></pre></td></tr></table></figure>\n<p>结果形如<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">root     24367  0.0  0.0  20472   604 ?        Ss   22:52   0:00 nginx: master process /usr/local/nginx/sbin/nginx</div><div class=\"line\">nobody   24368  0.0  0.0  20900  1320 ?        S    22:52   0:00 nginx: worker process</div><div class=\"line\">root     24370  0.0  0.0 112664   976 pts/0    S+   22:52   0:00 grep --color=auto nginx</div></pre></td></tr></table></figure></p>\n<blockquote>\n<p>master proccess为主进程 守护进程<br>worker proccess为工作进程, 用于响应请求</p>\n</blockquote>\n<h3 id=\"设置开机自动启动\"><a href=\"#设置开机自动启动\" class=\"headerlink\" title=\"设置开机自动启动\"></a>设置开机自动启动</h3><p>编辑文件 /etc/rc.d/rc.local<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">echo &quot;/usr/local/nginx/sbin/nginx&quot; &gt;&gt; /etc/rc.d/rc.local</div></pre></td></tr></table></figure></p>\n<h2 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h2><p>启动nginx，在浏览器通过IP地址访问服务器。查看是否有响应。</p>\n<p>~over</p>"},{"title":"memcache高速缓存工作原理及应用","date":"2016-09-29T10:30:00.000Z","ctime":"2016-09-19T10:48:00.000Z","utime":"2016-09-29T10:48:00.000Z","modif_times":0,"_content":"\nMemcached,是高性能的分布式内存缓存服务器，主要功能就是通过缓存数据库的查询，减少对数据库的访问次数，来提高动态web应用的速度和可扩展性。\n\nmemcached 是以守护程序方法运行于一个或多个服务器中，随时接受客户端的连接操作，客户端可以由各种语言编写，目前一致的客户端api包括 Perl / PHP / Python / Java / C# / C 等等。客户端在与 memcached 服务建立连接之后，接下来的事情就是存取对象了， 每个被存取的对象都有一个唯一的标识符 key，存取操作均通过这个 key进行，保存到 memcached 中的对象实际上是放置内存中的，并不是保存在平时的 cache 文件中的，这也是为什么 memcached 能够如此高效快速的原因。\n\n注意，这些对象并不是持久的， 服务停止之后， 里边的数据就会丢失。\n\n![Memcached应用模型](http://n.sinaimg.cn/games/3ece443e/20160929/MemcacheYingYongMoXing.png?1)\n\n<!-- more -->\n\n## Memcached的安装\n### 准备\nlibevent\n> Libevent 是一个用C语言编写的、轻量级的开源高性能网络库。\n> 主要有以下几个亮点：事件驱动（ event-driven），高性能;轻量级，专注于网络，不如 ACE 那么臃肿庞大；源代码相当精炼、易读；跨平台，支持 Windows、 Linux、 BSD 和 Mac Os；支持多种 I/O 多路复用技术， epoll、 poll、 dev/poll、 select 和 kqueue 等；支持 I/O，定时器和信号等事件；注册事件优先级。\n> Libevent 已经被广泛的应用，作为底层的网络库；比如 memcached、 Vomit、 Nylon、 Netchat等等。\n\n```\nwget http://n.sinaimg.cn/games/3ece443e/20160929/libevent-2.0.22-stable.tar\ntar -vxf libevent-2.0.22-stable.tar\ncd libevent-2.0.22-stable\n./configure --prefix=/usr/local/libevent\nmake && make install\n```\n\n### 安装\n```\nwget http://n.sinaimg.cn/games/3ece443e/20160930/memcached-1.4.31.tar.gz\ncd memcached-1.4.31\n ./configure --prefix=/usr/local/memcached --with-libevent=/usr/local/libevent\nmake && make install\n```\n查看是否已经安装成功\n```\ncd /usr/local/memcached/\nll\ndrwxr-xr-x 2 root root 4096 9月  28 10:56 bin\ndrwxr-xr-x 3 root root 4096 9月  28 10:56 include\ndrwxr-xr-x 3 root root 4096 9月  28 10:56 share\n```\n## Memcached管理\n\n### 启动\n\n启动Memcached服务器\n```\n/usr/local/memcached/bin/memcached -d -m 128 -u root -p 11211\n```\n查看是否启动成功\n```\nps aux | grep memcache\nroot     24428  0.0  0.0 323120   864 ?        Ssl  11:00   0:00 /usr/local/memcached/bin/memcached -d -m 128 -u root -p 11211\nroot     24436  0.0  0.0 112664   984 pts/0    D+   11:00   0:00 grep --color=auto memcache\n```\n或\n```\nnetstat -tlun | grep 11211\ntcp        0      0 0.0.0.0:11211           0.0.0.0:*               LISTEN\ntcp6       0      0 :::11211                :::*                    LISTEN\nudp        0      0 0.0.0.0:11211           0.0.0.0:*\nudp6       0      0 :::11211                :::*\n```\n\n设置开机自启动\n```\necho \"/usr/local/memcached/bin/memcached -d -m 128 -u root -p 11211\" >> /etc/rc.d/rc.local\n```\n\nMemcached启动选项及说明\n\n选项           |描述\n--------------|----\n-p <num>      | Memcached监听的TCP端口，要保证该端口号未被占用\n-U <num>      | 指定监听UDP的端口，默认11211，0表示关闭\n-s <file>     | 指定Memcached用于监听的UNIX socket文件\n-A            | enable ascii \"shutdown\" command\n-a <mask>     | 设置-s选项指定的UNIX socket文件的权限(默认权限: 0700)\n-l <addr>     | 监听的服务器IP地址，如果有多个地址的话，使用逗号分隔，格式可以为“IP地址:端口号”，例如：-l 指定192.168.0.184:19830,192.168.0.195:13542；端口号也可以通过-p选项指定\n-d            | 指定memcached进程作为一个守护进程启动\n-r            | 设置产生core文件大小\n-u <username> | 运行memcached的用户 (only when run as root)\n-m <num>      | 指定分配给memcached使用的内存，单位是MB(默认: 64 MB)\n-M            | 当内存使用超出配置值时，禁止自动清除缓存中的数据项，此时Memcached不可用，直到内存被释放\n-c <num>      | 设置最大运行的并发连接数，默认是1024\n-k            | 设置锁定所有分页的内存，对于大缓存应用场景，谨慎使用该选项\n-v            | 输出警告和错误信息\n-vv           | 打印信息比-v更详细：不仅输出警告和错误信息，也输出客户端请求和响应信息\n-vvv          | extremely verbose (also print internal state transitions)\n-h            | 显示Memcached版本和摘要信息\n-i            | 打印libevent和Memcached的licenses信息\n-V            | 输出Memcached版本号\n-P <file>     | 保存memcached进程的pid文件，（与 -d 一起搭配使用）\n-f <factor>   | 用于计算缓存数据项的内存块大小的乘数因子，默认是1.25\n-n <bytes>    | 为缓存数据项的key、value、flag设置最小分配字节数，默认是48\n-L            | 尝试使用大内存分页（pages）\n-D <char>     | 用于统计报告中Key前缀和ID之间的分隔符，默认是冒号“:”  \n-t <num>      | 指定用来处理请求的线程数，默认为4\n-R            | 为避免客户端饿死（starvation），对连续达到的客户端请求数设置一个限额，如果超过该设置，会选择另一个连接来处理请求，默认为20\n-C            | 禁用CAS\n-b <num>      | Set the backlog queue limit (default: 1024)\n-B            | 指定使用的协议，默认行为是自动协商（autonegotiate），可能使用的选项有auto、ascii、binary。\n-I            | Override the size of each slab page. Adjusts max item size(default: 1mb, min: 1k, max: 128m)\n-F            | 禁用flush_all命令\n-o            | 指定逗号分隔的选项，一般用于用于扩展或实验性质的选项\n\n### 通过telnet连接使用Memcache\n连接\n```\ntelnet 127.0.0.1 11211\n```\n\n命令格式：<command name> <key> <flags> <exptime> <bytes>\\r\\n <data block>\\r\\n\n> <command name> 可以是”set”, “add”, “replace”\n> <key> 客户端需要保存数据的key。\n> <flags> 是一个16位的无符号的整数(以十进制的方式表示)。\n> <exptime> 过期的时间。\n> 最后客户端需要加上”\\r\\n”作为”命令头”的结束标志。即回车\n\n示例：\n\n保存一个数据（保存一个『cache_key1=>12345』的键值对到memcached 60s）\n```\nset cache_key1 0 60 5\n12345\nSTORED\n```\n获取刚保存的值\n```\nget cache_key1\nVALUE cache_key1 0 5\n12345\nEND\n```\n其他命令：\n\nCommand | Description | Example\n--------|-------------|-----------------\nget     | 获取值 | get mykey\nset     | 设置值（可以存在可以不存在） | set mykey 0 60 5\nadd     | 添加新值 | add newkey 0 60 5\nreplace | 替换值（必须已存在） | replace key 0 60 5\nappend  | 在原有值之后添加数据 | append key 0 60 15\nprepend | 在原有值之前添加数据| prepend key 0 60 15\nincr    | Increments numerical key value by given number | incr mykey 2\ndecr    | Decrements numerical key value by given number | decr mykey 5\ndelete  | 删除一条数据 | delete mykey\nflush_all | 清除所有数据 | flush_all\n        |清除900秒之内的数据 | flush_all 900\nstats   | 查看所有状态| stats\n        | Prints memory statistics | stats slabs\n        | Prints memory statistics | stats malloc\n        | Print higher level allocation statistics | stats items\n        | | stats detail\n        | 已使用大小 | stats sizes\n        | 重置状态 | stats reset\nversion | 查看版本 | version\nverbosity | Increases log level | verbosity\nquit    | 退出telnet连接 | quit\n\n\n### 通过客户端（PHP）连接和使用Memcached\nphp扩展Memcached安装\n\n依赖\n> libmemcached, 是一个 memcached 的库，客户端库，C 和 C++ 语言实现的客户端库，具有低内存占用率、线程安全、并提供对memcached功能的全面支持。它还采用 多种命令行工具： memcat ， memflush ， memrm ， memstat ，并memslap （负载代）。程序库一直在设计，让不同的散列方法对密钥，分割的钥匙，并使用统一的散列分配。\n\n```\nwget https://launchpadlibrarian.net/165454254/libmemcached-1.0.18.tar.gz\ntar -zxvf libmemcached-1.0.18.tar.gz\ncd libmemcached-1.0.18\n./configure --prefix=/usr/local/libmemcached\nmake && make install\n```\n\n安装扩展\n```\nwget http://n.sinaimg.cn/games/3ece443e/20160929/memcached-2.2.0.tar\ntar -xvf memcached-2.2.0.tar\ncd memcached-2.2.0\n/usr/local/php56/bin/phpize\n./configure --with-php-config=/usr/local/php56/bin/php-config --with-libmemcached-dir=/usr/local/libmemcached  --enable-memcached --disable-memcached-sasl\nmake && make install\nInstalling shared extensions:     /usr/local/php56/lib/php/extensions/no-debug-non-zts-20131226/\n```\n\n查看是否安装成功\n```\ncd /usr/local/php56/lib/php/extensions/no-debug-non-zts-20131226/\nll\n-rwxr-xr-x 1 root root  380475 9月  28 22:25 memcached.so\n-rwxr-xr-x 1 root root  756714 9月  26 17:32 mysqli.so\n-rwxr-xr-x 1 root root 1333912 9月  24 23:31 opcache.a\n-rwxr-xr-x 1 root root  618435 9月  24 23:31 opcache.so\n```\n修改配置\n```\nvi /usr/local/php56/lib/php.ini\nextension=/usr/local/php56/lib/php/extensions/no-debug-non-zts-20131226/memcached.so\n```\n重启php-fpm\n```\nkill -USR2 `cat /usr/local/php56/var/run/php-fpm.pid`\n```\n查看是否已经加载成功\n```\n/usr/local/php56/bin/php -m\n或通过phpinfo();查看\n```\n测试\n```\nvi memcache_test.php\n```\n```php\n<?php\n        $mc = new Memcached();\n        var_dump($mc);\n        $mc->addServer('127.0.0.1', 11211);\n        $mc->set('cache_key','mem_value',30);\n        $val = $mc->get('cache_key');\n        var_dump($val);\n        var_dump($mc->delete('cache_key'));\n        $mc->quit();\n```\n访问结果：\n```\nobject(Memcached)#1 (0) { } string(9) \"mem_value\" bool(true)\n```\n\nphp关于memcached 的两种扩展memcache 和 memcached 介绍\n\n1. 目前大多数php环境里使用的都是不带d的memcache版本，这个版本出的比较早，是一个原生版本，完全在php框架内开发的。与之对应的带d的memcached是建立在libmemcached的基础上，所以相对来说，memcached版本的功能更全一些。\n> [memcache:](http://cn2.php.net/manual/en/book.memcache.php)\n>\n> [memcached:](http://cn2.php.net/manual/en/book.memcached.php)\n\n2. Memcache是原生实现的，支持OO和非OO两套接口并存。而memcached是使用libmemcached，只支持OO接口。\n3. memcached有了一个统一的setOption()来设置设置，而不用在操作的时候设置了。Memcached实现了更多的memcached协议。\n4. memcached支持Binary Protocol，而memcache不支持。这意味着memcached会有更高的性能。不过memcached目前还不支持长连接。\n5. 另外一点也是大家比较关心的，就是所使用的算法。“一致性hash算法”是当添加或删除存储节点时，对存储在memcached上的数据影响较小的一种算法。在php的两个扩展库中，都可以使用该算法，只是设置方法有所不同。\n\n\n  - Memcache\n\n修改php.ini添加：\n```\n[Memcache]\nMemcache.allow_failover = 1\nMemcache.hash_strategy =consistent\nMemcache.hash_function =crc32\n```\n或在php中使用ini_set方法：\n```\nini_set(‘memcache.hash_strategy','standard');\nini_set(‘memcache.hash_function','crc32');\n```\n  - Memcached\n\n```\n$mem = new memcached();\n$mem->setOption(Memcached::OPT_DISTRIBUTION,Memcached::DISTRIBUTION_CONSISTENT);\n$mem->setOption(Memcached::OPT_LIBKETAMA_COMPATIBLE,true);\n```\n\n## Memcached监控\n\n### 利用phpmemcache.php图形监控工具\n下载 phpmemcache.php\n```\nwget http://n.sinaimg.cn/games/3ece443e/20160929/phpmemcache.php\n```\n将phpmemcache.php放入web目录\n```\nmv phpmemcache.php /usr/local/nginx/html\n```\n修改phpmemcache.php中配置\n```\ndefine('ADMIN_USERNAME','xxxx');    // 用户名修改，在访问 phpmemcache.php 需要进行认证\ndefine('ADMIN_PASSWORD','xxxx');    // 密码\ndefine('DATE_FORMAT','Y/m/d H:i:s');\ndefine('GRAPH_SIZE',200);\ndefine('MAX_ITEM_DUMP',50);\n\n$MEMCACHE_SERVERS[] = '127.0.0.1:11211'; // 加入需要监控的memcached服务器\n//$MEMCACHE_SERVERS[] = '192.168.200.104:11212'; // add more as an array\n```\n\n浏览器访问\n![phpmemcache浏览器访问效果](http://n.sinaimg.cn/games/3ece443e/20160929/phpmemcache.png?1)\n\n\n### 利用Stats命令查看\n利用stats命令可以查看当前memcached的各种状态\n```\ntelnet 127.0.0.1 11211\nTrying 127.0.0.1...\nConnected to 127.0.0.1.\nEscape character is '^]'.\nstats\nSTAT pid 24732\nSTAT uptime 66597\nSTAT time 1475115983\nSTAT version 1.4.31\nSTAT libevent 2.0.22-stable\nSTAT pointer_size 64\nSTAT rusage_user 6.194421\nSTAT rusage_system 2.419890\nSTAT curr_connections 10\nSTAT total_connections 16\nSTAT connection_structures 11\nSTAT reserved_fds 20\nSTAT cmd_get 5\nSTAT cmd_set 8\nSTAT cmd_flush 0\nSTAT cmd_touch 0\nSTAT get_hits 4\nSTAT get_misses 1\nSTAT get_expired 0\nSTAT get_flushed 0\nSTAT delete_misses 0\nSTAT delete_hits 2\nSTAT incr_misses 0\nSTAT incr_hits 0\nSTAT decr_misses 0\nSTAT decr_hits 0\nSTAT cas_misses 0\nSTAT cas_hits 0\nSTAT cas_badval 0\nSTAT touch_hits 0\nSTAT touch_misses 0\nSTAT auth_cmds 0\nSTAT auth_errors 0\nSTAT bytes_read 3850\nSTAT bytes_written 293\nSTAT limit_maxbytes 134217728\nSTAT accepting_conns 1\nSTAT listen_disabled_num 0\nSTAT time_in_listen_disabled_us 0\nSTAT threads 4\nSTAT conn_yields 0\nSTAT hash_power_level 16\nSTAT hash_bytes 524288\nSTAT hash_is_expanding 0\nSTAT malloc_fails 0\nSTAT log_worker_dropped 0\nSTAT log_worker_written 0\nSTAT log_watcher_skipped 0\nSTAT log_watcher_sent 0\nSTAT bytes 0\nSTAT curr_items 0\nSTAT total_items 6\nSTAT expired_unfetched 0\nSTAT evicted_unfetched 0\nSTAT evictions 0\nSTAT reclaimed 2\nSTAT crawler_reclaimed 0\nSTAT crawler_items_checked 0\nSTAT lrutail_reflocked 0\nEND\n```\n\nStats详解\n\n选项| 说明\n---|-----\npid |memcache服务器的进程ID\nuptime |服务器已经运行的秒数\ntime |服务器当前的unix时间戳\nversion |memcache版本\npointer_size |当前操作系统的指针大小（32位系统一般是32bit）\nrusage_user |进程的累计用户时间\nrusage_system |进程的累计系统时间\ncurr_items |服务器当前存储的items数量\ntotal_items |从服务器启动以后存储的items总数量\nbytes |当前服务器存储items占用的字节数\ncurr_connections|当前打开着的连接数\ntotal_connections |从服务器启动以后曾经打开过的连接数\nconnection_structures |服务器分配的连接构造数\ncmd_get |get命令（获取）总请求次数\ncmd_set |set命令（保存）总请求次数\nget_hits |总命中次数\nget_misses |总未命中次数\nevictions |为获取空闲内存而删除的items数（分配给memcache的空间用满后需要删除旧的items来得到空间分配给新的items）\nbytes_read|总读取字节数（请求字节数）\nbytes_written|总发送字节数（结果字节数）\nlimit_maxbytes|分配给memcache的内存大小（字节）\nthreads|当前线程数\n\n\n### 利用各种监控软件查看（例如：nagios监控memcache的插件）\n> 只以命中率大于和小于为例两种状态。\n\n```\nvim check_memcache\n```\n```bash\n#!/bin/sh\nif [ $# -ne 1 ]\nthen\necho \"Usage:$0 -c num2\"\nexit 0\nfi\ncmd_get=`/usr/local/nagios/libexec/check_tcp -H localhost -p 11211 -E -s 'stats\\r\\nquit\\r\\n' -e 'uptime' |grep cmd_get | awk '{print $3+0}'`\nget_hits=`/usr/local/nagios/libexec/check_tcp -H localhost -p 11211 -E -s 'stats\\r\\nquit\\r\\n' -e 'uptime' |grep get_hits | awk '{print $3+0}'`\nhit_rate=`echo \"$get_hits*100/$cmd_get\"|bc`\nif [ $hit_rate -gt $1 ];then\necho \"OK - hit rate is $hit_rate | hit_rate=$hit_rate; cmd_get=$cmd_get; get_hits=$get_hits\"\nexit 0\nelse\necho \"CRITICAL - hit rate is $hit_rate | hit_rate=$hit_rate; cmd_get=$cmd_get; get_hits=$get_hits\"\nexit 2\nfi\n```\n\n测试命中率大于80%为正常为例;\n```\neg：\nsh check_memcache 80\nroot@ip-10-250-114-95:/liang# sh check_memcache 80\nOK - hit rate is 99 | hit_rate=99; cmd_get=142547; get_hits=141880\n```\n以上证明命中率99%，即状态为OK.\n","source":"_posts/memcache高速缓存的工作原理及应用小结.md","raw":"---\ntitle: memcache高速缓存工作原理及应用\ndate: 2016-09-29 18:30:00\nctime: 2016-09-19 18:48:00\nutime: 2016-09-29 18:48:00\nmodif_times: 0\ntags:\n- 缓存\n- memcache\n- memcached\ncategories:\n- Linux\n---\n\nMemcached,是高性能的分布式内存缓存服务器，主要功能就是通过缓存数据库的查询，减少对数据库的访问次数，来提高动态web应用的速度和可扩展性。\n\nmemcached 是以守护程序方法运行于一个或多个服务器中，随时接受客户端的连接操作，客户端可以由各种语言编写，目前一致的客户端api包括 Perl / PHP / Python / Java / C# / C 等等。客户端在与 memcached 服务建立连接之后，接下来的事情就是存取对象了， 每个被存取的对象都有一个唯一的标识符 key，存取操作均通过这个 key进行，保存到 memcached 中的对象实际上是放置内存中的，并不是保存在平时的 cache 文件中的，这也是为什么 memcached 能够如此高效快速的原因。\n\n注意，这些对象并不是持久的， 服务停止之后， 里边的数据就会丢失。\n\n![Memcached应用模型](http://n.sinaimg.cn/games/3ece443e/20160929/MemcacheYingYongMoXing.png?1)\n\n<!-- more -->\n\n## Memcached的安装\n### 准备\nlibevent\n> Libevent 是一个用C语言编写的、轻量级的开源高性能网络库。\n> 主要有以下几个亮点：事件驱动（ event-driven），高性能;轻量级，专注于网络，不如 ACE 那么臃肿庞大；源代码相当精炼、易读；跨平台，支持 Windows、 Linux、 BSD 和 Mac Os；支持多种 I/O 多路复用技术， epoll、 poll、 dev/poll、 select 和 kqueue 等；支持 I/O，定时器和信号等事件；注册事件优先级。\n> Libevent 已经被广泛的应用，作为底层的网络库；比如 memcached、 Vomit、 Nylon、 Netchat等等。\n\n```\nwget http://n.sinaimg.cn/games/3ece443e/20160929/libevent-2.0.22-stable.tar\ntar -vxf libevent-2.0.22-stable.tar\ncd libevent-2.0.22-stable\n./configure --prefix=/usr/local/libevent\nmake && make install\n```\n\n### 安装\n```\nwget http://n.sinaimg.cn/games/3ece443e/20160930/memcached-1.4.31.tar.gz\ncd memcached-1.4.31\n ./configure --prefix=/usr/local/memcached --with-libevent=/usr/local/libevent\nmake && make install\n```\n查看是否已经安装成功\n```\ncd /usr/local/memcached/\nll\ndrwxr-xr-x 2 root root 4096 9月  28 10:56 bin\ndrwxr-xr-x 3 root root 4096 9月  28 10:56 include\ndrwxr-xr-x 3 root root 4096 9月  28 10:56 share\n```\n## Memcached管理\n\n### 启动\n\n启动Memcached服务器\n```\n/usr/local/memcached/bin/memcached -d -m 128 -u root -p 11211\n```\n查看是否启动成功\n```\nps aux | grep memcache\nroot     24428  0.0  0.0 323120   864 ?        Ssl  11:00   0:00 /usr/local/memcached/bin/memcached -d -m 128 -u root -p 11211\nroot     24436  0.0  0.0 112664   984 pts/0    D+   11:00   0:00 grep --color=auto memcache\n```\n或\n```\nnetstat -tlun | grep 11211\ntcp        0      0 0.0.0.0:11211           0.0.0.0:*               LISTEN\ntcp6       0      0 :::11211                :::*                    LISTEN\nudp        0      0 0.0.0.0:11211           0.0.0.0:*\nudp6       0      0 :::11211                :::*\n```\n\n设置开机自启动\n```\necho \"/usr/local/memcached/bin/memcached -d -m 128 -u root -p 11211\" >> /etc/rc.d/rc.local\n```\n\nMemcached启动选项及说明\n\n选项           |描述\n--------------|----\n-p <num>      | Memcached监听的TCP端口，要保证该端口号未被占用\n-U <num>      | 指定监听UDP的端口，默认11211，0表示关闭\n-s <file>     | 指定Memcached用于监听的UNIX socket文件\n-A            | enable ascii \"shutdown\" command\n-a <mask>     | 设置-s选项指定的UNIX socket文件的权限(默认权限: 0700)\n-l <addr>     | 监听的服务器IP地址，如果有多个地址的话，使用逗号分隔，格式可以为“IP地址:端口号”，例如：-l 指定192.168.0.184:19830,192.168.0.195:13542；端口号也可以通过-p选项指定\n-d            | 指定memcached进程作为一个守护进程启动\n-r            | 设置产生core文件大小\n-u <username> | 运行memcached的用户 (only when run as root)\n-m <num>      | 指定分配给memcached使用的内存，单位是MB(默认: 64 MB)\n-M            | 当内存使用超出配置值时，禁止自动清除缓存中的数据项，此时Memcached不可用，直到内存被释放\n-c <num>      | 设置最大运行的并发连接数，默认是1024\n-k            | 设置锁定所有分页的内存，对于大缓存应用场景，谨慎使用该选项\n-v            | 输出警告和错误信息\n-vv           | 打印信息比-v更详细：不仅输出警告和错误信息，也输出客户端请求和响应信息\n-vvv          | extremely verbose (also print internal state transitions)\n-h            | 显示Memcached版本和摘要信息\n-i            | 打印libevent和Memcached的licenses信息\n-V            | 输出Memcached版本号\n-P <file>     | 保存memcached进程的pid文件，（与 -d 一起搭配使用）\n-f <factor>   | 用于计算缓存数据项的内存块大小的乘数因子，默认是1.25\n-n <bytes>    | 为缓存数据项的key、value、flag设置最小分配字节数，默认是48\n-L            | 尝试使用大内存分页（pages）\n-D <char>     | 用于统计报告中Key前缀和ID之间的分隔符，默认是冒号“:”  \n-t <num>      | 指定用来处理请求的线程数，默认为4\n-R            | 为避免客户端饿死（starvation），对连续达到的客户端请求数设置一个限额，如果超过该设置，会选择另一个连接来处理请求，默认为20\n-C            | 禁用CAS\n-b <num>      | Set the backlog queue limit (default: 1024)\n-B            | 指定使用的协议，默认行为是自动协商（autonegotiate），可能使用的选项有auto、ascii、binary。\n-I            | Override the size of each slab page. Adjusts max item size(default: 1mb, min: 1k, max: 128m)\n-F            | 禁用flush_all命令\n-o            | 指定逗号分隔的选项，一般用于用于扩展或实验性质的选项\n\n### 通过telnet连接使用Memcache\n连接\n```\ntelnet 127.0.0.1 11211\n```\n\n命令格式：<command name> <key> <flags> <exptime> <bytes>\\r\\n <data block>\\r\\n\n> <command name> 可以是”set”, “add”, “replace”\n> <key> 客户端需要保存数据的key。\n> <flags> 是一个16位的无符号的整数(以十进制的方式表示)。\n> <exptime> 过期的时间。\n> 最后客户端需要加上”\\r\\n”作为”命令头”的结束标志。即回车\n\n示例：\n\n保存一个数据（保存一个『cache_key1=>12345』的键值对到memcached 60s）\n```\nset cache_key1 0 60 5\n12345\nSTORED\n```\n获取刚保存的值\n```\nget cache_key1\nVALUE cache_key1 0 5\n12345\nEND\n```\n其他命令：\n\nCommand | Description | Example\n--------|-------------|-----------------\nget     | 获取值 | get mykey\nset     | 设置值（可以存在可以不存在） | set mykey 0 60 5\nadd     | 添加新值 | add newkey 0 60 5\nreplace | 替换值（必须已存在） | replace key 0 60 5\nappend  | 在原有值之后添加数据 | append key 0 60 15\nprepend | 在原有值之前添加数据| prepend key 0 60 15\nincr    | Increments numerical key value by given number | incr mykey 2\ndecr    | Decrements numerical key value by given number | decr mykey 5\ndelete  | 删除一条数据 | delete mykey\nflush_all | 清除所有数据 | flush_all\n        |清除900秒之内的数据 | flush_all 900\nstats   | 查看所有状态| stats\n        | Prints memory statistics | stats slabs\n        | Prints memory statistics | stats malloc\n        | Print higher level allocation statistics | stats items\n        | | stats detail\n        | 已使用大小 | stats sizes\n        | 重置状态 | stats reset\nversion | 查看版本 | version\nverbosity | Increases log level | verbosity\nquit    | 退出telnet连接 | quit\n\n\n### 通过客户端（PHP）连接和使用Memcached\nphp扩展Memcached安装\n\n依赖\n> libmemcached, 是一个 memcached 的库，客户端库，C 和 C++ 语言实现的客户端库，具有低内存占用率、线程安全、并提供对memcached功能的全面支持。它还采用 多种命令行工具： memcat ， memflush ， memrm ， memstat ，并memslap （负载代）。程序库一直在设计，让不同的散列方法对密钥，分割的钥匙，并使用统一的散列分配。\n\n```\nwget https://launchpadlibrarian.net/165454254/libmemcached-1.0.18.tar.gz\ntar -zxvf libmemcached-1.0.18.tar.gz\ncd libmemcached-1.0.18\n./configure --prefix=/usr/local/libmemcached\nmake && make install\n```\n\n安装扩展\n```\nwget http://n.sinaimg.cn/games/3ece443e/20160929/memcached-2.2.0.tar\ntar -xvf memcached-2.2.0.tar\ncd memcached-2.2.0\n/usr/local/php56/bin/phpize\n./configure --with-php-config=/usr/local/php56/bin/php-config --with-libmemcached-dir=/usr/local/libmemcached  --enable-memcached --disable-memcached-sasl\nmake && make install\nInstalling shared extensions:     /usr/local/php56/lib/php/extensions/no-debug-non-zts-20131226/\n```\n\n查看是否安装成功\n```\ncd /usr/local/php56/lib/php/extensions/no-debug-non-zts-20131226/\nll\n-rwxr-xr-x 1 root root  380475 9月  28 22:25 memcached.so\n-rwxr-xr-x 1 root root  756714 9月  26 17:32 mysqli.so\n-rwxr-xr-x 1 root root 1333912 9月  24 23:31 opcache.a\n-rwxr-xr-x 1 root root  618435 9月  24 23:31 opcache.so\n```\n修改配置\n```\nvi /usr/local/php56/lib/php.ini\nextension=/usr/local/php56/lib/php/extensions/no-debug-non-zts-20131226/memcached.so\n```\n重启php-fpm\n```\nkill -USR2 `cat /usr/local/php56/var/run/php-fpm.pid`\n```\n查看是否已经加载成功\n```\n/usr/local/php56/bin/php -m\n或通过phpinfo();查看\n```\n测试\n```\nvi memcache_test.php\n```\n```php\n<?php\n        $mc = new Memcached();\n        var_dump($mc);\n        $mc->addServer('127.0.0.1', 11211);\n        $mc->set('cache_key','mem_value',30);\n        $val = $mc->get('cache_key');\n        var_dump($val);\n        var_dump($mc->delete('cache_key'));\n        $mc->quit();\n```\n访问结果：\n```\nobject(Memcached)#1 (0) { } string(9) \"mem_value\" bool(true)\n```\n\nphp关于memcached 的两种扩展memcache 和 memcached 介绍\n\n1. 目前大多数php环境里使用的都是不带d的memcache版本，这个版本出的比较早，是一个原生版本，完全在php框架内开发的。与之对应的带d的memcached是建立在libmemcached的基础上，所以相对来说，memcached版本的功能更全一些。\n> [memcache:](http://cn2.php.net/manual/en/book.memcache.php)\n>\n> [memcached:](http://cn2.php.net/manual/en/book.memcached.php)\n\n2. Memcache是原生实现的，支持OO和非OO两套接口并存。而memcached是使用libmemcached，只支持OO接口。\n3. memcached有了一个统一的setOption()来设置设置，而不用在操作的时候设置了。Memcached实现了更多的memcached协议。\n4. memcached支持Binary Protocol，而memcache不支持。这意味着memcached会有更高的性能。不过memcached目前还不支持长连接。\n5. 另外一点也是大家比较关心的，就是所使用的算法。“一致性hash算法”是当添加或删除存储节点时，对存储在memcached上的数据影响较小的一种算法。在php的两个扩展库中，都可以使用该算法，只是设置方法有所不同。\n\n\n  - Memcache\n\n修改php.ini添加：\n```\n[Memcache]\nMemcache.allow_failover = 1\nMemcache.hash_strategy =consistent\nMemcache.hash_function =crc32\n```\n或在php中使用ini_set方法：\n```\nini_set(‘memcache.hash_strategy','standard');\nini_set(‘memcache.hash_function','crc32');\n```\n  - Memcached\n\n```\n$mem = new memcached();\n$mem->setOption(Memcached::OPT_DISTRIBUTION,Memcached::DISTRIBUTION_CONSISTENT);\n$mem->setOption(Memcached::OPT_LIBKETAMA_COMPATIBLE,true);\n```\n\n## Memcached监控\n\n### 利用phpmemcache.php图形监控工具\n下载 phpmemcache.php\n```\nwget http://n.sinaimg.cn/games/3ece443e/20160929/phpmemcache.php\n```\n将phpmemcache.php放入web目录\n```\nmv phpmemcache.php /usr/local/nginx/html\n```\n修改phpmemcache.php中配置\n```\ndefine('ADMIN_USERNAME','xxxx');    // 用户名修改，在访问 phpmemcache.php 需要进行认证\ndefine('ADMIN_PASSWORD','xxxx');    // 密码\ndefine('DATE_FORMAT','Y/m/d H:i:s');\ndefine('GRAPH_SIZE',200);\ndefine('MAX_ITEM_DUMP',50);\n\n$MEMCACHE_SERVERS[] = '127.0.0.1:11211'; // 加入需要监控的memcached服务器\n//$MEMCACHE_SERVERS[] = '192.168.200.104:11212'; // add more as an array\n```\n\n浏览器访问\n![phpmemcache浏览器访问效果](http://n.sinaimg.cn/games/3ece443e/20160929/phpmemcache.png?1)\n\n\n### 利用Stats命令查看\n利用stats命令可以查看当前memcached的各种状态\n```\ntelnet 127.0.0.1 11211\nTrying 127.0.0.1...\nConnected to 127.0.0.1.\nEscape character is '^]'.\nstats\nSTAT pid 24732\nSTAT uptime 66597\nSTAT time 1475115983\nSTAT version 1.4.31\nSTAT libevent 2.0.22-stable\nSTAT pointer_size 64\nSTAT rusage_user 6.194421\nSTAT rusage_system 2.419890\nSTAT curr_connections 10\nSTAT total_connections 16\nSTAT connection_structures 11\nSTAT reserved_fds 20\nSTAT cmd_get 5\nSTAT cmd_set 8\nSTAT cmd_flush 0\nSTAT cmd_touch 0\nSTAT get_hits 4\nSTAT get_misses 1\nSTAT get_expired 0\nSTAT get_flushed 0\nSTAT delete_misses 0\nSTAT delete_hits 2\nSTAT incr_misses 0\nSTAT incr_hits 0\nSTAT decr_misses 0\nSTAT decr_hits 0\nSTAT cas_misses 0\nSTAT cas_hits 0\nSTAT cas_badval 0\nSTAT touch_hits 0\nSTAT touch_misses 0\nSTAT auth_cmds 0\nSTAT auth_errors 0\nSTAT bytes_read 3850\nSTAT bytes_written 293\nSTAT limit_maxbytes 134217728\nSTAT accepting_conns 1\nSTAT listen_disabled_num 0\nSTAT time_in_listen_disabled_us 0\nSTAT threads 4\nSTAT conn_yields 0\nSTAT hash_power_level 16\nSTAT hash_bytes 524288\nSTAT hash_is_expanding 0\nSTAT malloc_fails 0\nSTAT log_worker_dropped 0\nSTAT log_worker_written 0\nSTAT log_watcher_skipped 0\nSTAT log_watcher_sent 0\nSTAT bytes 0\nSTAT curr_items 0\nSTAT total_items 6\nSTAT expired_unfetched 0\nSTAT evicted_unfetched 0\nSTAT evictions 0\nSTAT reclaimed 2\nSTAT crawler_reclaimed 0\nSTAT crawler_items_checked 0\nSTAT lrutail_reflocked 0\nEND\n```\n\nStats详解\n\n选项| 说明\n---|-----\npid |memcache服务器的进程ID\nuptime |服务器已经运行的秒数\ntime |服务器当前的unix时间戳\nversion |memcache版本\npointer_size |当前操作系统的指针大小（32位系统一般是32bit）\nrusage_user |进程的累计用户时间\nrusage_system |进程的累计系统时间\ncurr_items |服务器当前存储的items数量\ntotal_items |从服务器启动以后存储的items总数量\nbytes |当前服务器存储items占用的字节数\ncurr_connections|当前打开着的连接数\ntotal_connections |从服务器启动以后曾经打开过的连接数\nconnection_structures |服务器分配的连接构造数\ncmd_get |get命令（获取）总请求次数\ncmd_set |set命令（保存）总请求次数\nget_hits |总命中次数\nget_misses |总未命中次数\nevictions |为获取空闲内存而删除的items数（分配给memcache的空间用满后需要删除旧的items来得到空间分配给新的items）\nbytes_read|总读取字节数（请求字节数）\nbytes_written|总发送字节数（结果字节数）\nlimit_maxbytes|分配给memcache的内存大小（字节）\nthreads|当前线程数\n\n\n### 利用各种监控软件查看（例如：nagios监控memcache的插件）\n> 只以命中率大于和小于为例两种状态。\n\n```\nvim check_memcache\n```\n```bash\n#!/bin/sh\nif [ $# -ne 1 ]\nthen\necho \"Usage:$0 -c num2\"\nexit 0\nfi\ncmd_get=`/usr/local/nagios/libexec/check_tcp -H localhost -p 11211 -E -s 'stats\\r\\nquit\\r\\n' -e 'uptime' |grep cmd_get | awk '{print $3+0}'`\nget_hits=`/usr/local/nagios/libexec/check_tcp -H localhost -p 11211 -E -s 'stats\\r\\nquit\\r\\n' -e 'uptime' |grep get_hits | awk '{print $3+0}'`\nhit_rate=`echo \"$get_hits*100/$cmd_get\"|bc`\nif [ $hit_rate -gt $1 ];then\necho \"OK - hit rate is $hit_rate | hit_rate=$hit_rate; cmd_get=$cmd_get; get_hits=$get_hits\"\nexit 0\nelse\necho \"CRITICAL - hit rate is $hit_rate | hit_rate=$hit_rate; cmd_get=$cmd_get; get_hits=$get_hits\"\nexit 2\nfi\n```\n\n测试命中率大于80%为正常为例;\n```\neg：\nsh check_memcache 80\nroot@ip-10-250-114-95:/liang# sh check_memcache 80\nOK - hit rate is 99 | hit_rate=99; cmd_get=142547; get_hits=141880\n```\n以上证明命中率99%，即状态为OK.\n","slug":"memcache高速缓存的工作原理及应用小结","published":1,"updated":"2016-09-30T02:32:21.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"city8vnop002pg29fl6wum9gz","content":"<p>Memcached,是高性能的分布式内存缓存服务器，主要功能就是通过缓存数据库的查询，减少对数据库的访问次数，来提高动态web应用的速度和可扩展性。</p>\n<p>memcached 是以守护程序方法运行于一个或多个服务器中，随时接受客户端的连接操作，客户端可以由各种语言编写，目前一致的客户端api包括 Perl / PHP / Python / Java / C# / C 等等。客户端在与 memcached 服务建立连接之后，接下来的事情就是存取对象了， 每个被存取的对象都有一个唯一的标识符 key，存取操作均通过这个 key进行，保存到 memcached 中的对象实际上是放置内存中的，并不是保存在平时的 cache 文件中的，这也是为什么 memcached 能够如此高效快速的原因。</p>\n<p>注意，这些对象并不是持久的， 服务停止之后， 里边的数据就会丢失。</p>\n<p><img src=\"http://n.sinaimg.cn/games/3ece443e/20160929/MemcacheYingYongMoXing.png?1\" alt=\"Memcached应用模型\"></p>\n<a id=\"more\"></a>\n<h2 id=\"Memcached的安装\"><a href=\"#Memcached的安装\" class=\"headerlink\" title=\"Memcached的安装\"></a>Memcached的安装</h2><h3 id=\"准备\"><a href=\"#准备\" class=\"headerlink\" title=\"准备\"></a>准备</h3><p>libevent</p>\n<blockquote>\n<p>Libevent 是一个用C语言编写的、轻量级的开源高性能网络库。<br>主要有以下几个亮点：事件驱动（ event-driven），高性能;轻量级，专注于网络，不如 ACE 那么臃肿庞大；源代码相当精炼、易读；跨平台，支持 Windows、 Linux、 BSD 和 Mac Os；支持多种 I/O 多路复用技术， epoll、 poll、 dev/poll、 select 和 kqueue 等；支持 I/O，定时器和信号等事件；注册事件优先级。<br>Libevent 已经被广泛的应用，作为底层的网络库；比如 memcached、 Vomit、 Nylon、 Netchat等等。</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">wget http://n.sinaimg.cn/games/3ece443e/20160929/libevent-2.0.22-stable.tar</div><div class=\"line\">tar -vxf libevent-2.0.22-stable.tar</div><div class=\"line\">cd libevent-2.0.22-stable</div><div class=\"line\">./configure --prefix=/usr/local/libevent</div><div class=\"line\">make &amp;&amp; make install</div></pre></td></tr></table></figure>\n<h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">wget http://n.sinaimg.cn/games/3ece443e/20160930/memcached-1.4.31.tar.gz</div><div class=\"line\">cd memcached-1.4.31</div><div class=\"line\"> ./configure --prefix=/usr/local/memcached --with-libevent=/usr/local/libevent</div><div class=\"line\">make &amp;&amp; make install</div></pre></td></tr></table></figure>\n<p>查看是否已经安装成功<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">cd /usr/local/memcached/</div><div class=\"line\">ll</div><div class=\"line\">drwxr-xr-x 2 root root 4096 9月  28 10:56 bin</div><div class=\"line\">drwxr-xr-x 3 root root 4096 9月  28 10:56 include</div><div class=\"line\">drwxr-xr-x 3 root root 4096 9月  28 10:56 share</div></pre></td></tr></table></figure></p>\n<h2 id=\"Memcached管理\"><a href=\"#Memcached管理\" class=\"headerlink\" title=\"Memcached管理\"></a>Memcached管理</h2><h3 id=\"启动\"><a href=\"#启动\" class=\"headerlink\" title=\"启动\"></a>启动</h3><p>启动Memcached服务器<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">/usr/local/memcached/bin/memcached -d -m 128 -u root -p 11211</div></pre></td></tr></table></figure></p>\n<p>查看是否启动成功<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">ps aux | grep memcache</div><div class=\"line\">root     24428  0.0  0.0 323120   864 ?        Ssl  11:00   0:00 /usr/local/memcached/bin/memcached -d -m 128 -u root -p 11211</div><div class=\"line\">root     24436  0.0  0.0 112664   984 pts/0    D+   11:00   0:00 grep --color=auto memcache</div></pre></td></tr></table></figure></p>\n<p>或<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">netstat -tlun | grep 11211</div><div class=\"line\">tcp        0      0 0.0.0.0:11211           0.0.0.0:*               LISTEN</div><div class=\"line\">tcp6       0      0 :::11211                :::*                    LISTEN</div><div class=\"line\">udp        0      0 0.0.0.0:11211           0.0.0.0:*</div><div class=\"line\">udp6       0      0 :::11211                :::*</div></pre></td></tr></table></figure></p>\n<p>设置开机自启动<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">echo &quot;/usr/local/memcached/bin/memcached -d -m 128 -u root -p 11211&quot; &gt;&gt; /etc/rc.d/rc.local</div></pre></td></tr></table></figure></p>\n<p>Memcached启动选项及说明</p>\n<table>\n<thead>\n<tr>\n<th>选项</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>-p <num></num></td>\n<td>Memcached监听的TCP端口，要保证该端口号未被占用</td>\n</tr>\n<tr>\n<td>-U <num></num></td>\n<td>指定监听UDP的端口，默认11211，0表示关闭</td>\n</tr>\n<tr>\n<td>-s <file></file></td>\n<td>指定Memcached用于监听的UNIX socket文件</td>\n</tr>\n<tr>\n<td>-A</td>\n<td>enable ascii “shutdown” command</td>\n</tr>\n<tr>\n<td>-a <mask></mask></td>\n<td>设置-s选项指定的UNIX socket文件的权限(默认权限: 0700)</td>\n</tr>\n<tr>\n<td>-l <addr></addr></td>\n<td>监听的服务器IP地址，如果有多个地址的话，使用逗号分隔，格式可以为“IP地址:端口号”，例如：-l 指定192.168.0.184:19830,192.168.0.195:13542；端口号也可以通过-p选项指定</td>\n</tr>\n<tr>\n<td>-d</td>\n<td>指定memcached进程作为一个守护进程启动</td>\n</tr>\n<tr>\n<td>-r</td>\n<td>设置产生core文件大小</td>\n</tr>\n<tr>\n<td>-u <username></username></td>\n<td>运行memcached的用户 (only when run as root)</td>\n</tr>\n<tr>\n<td>-m <num></num></td>\n<td>指定分配给memcached使用的内存，单位是MB(默认: 64 MB)</td>\n</tr>\n<tr>\n<td>-M</td>\n<td>当内存使用超出配置值时，禁止自动清除缓存中的数据项，此时Memcached不可用，直到内存被释放</td>\n</tr>\n<tr>\n<td>-c <num></num></td>\n<td>设置最大运行的并发连接数，默认是1024</td>\n</tr>\n<tr>\n<td>-k</td>\n<td>设置锁定所有分页的内存，对于大缓存应用场景，谨慎使用该选项</td>\n</tr>\n<tr>\n<td>-v</td>\n<td>输出警告和错误信息</td>\n</tr>\n<tr>\n<td>-vv</td>\n<td>打印信息比-v更详细：不仅输出警告和错误信息，也输出客户端请求和响应信息</td>\n</tr>\n<tr>\n<td>-vvv</td>\n<td>extremely verbose (also print internal state transitions)</td>\n</tr>\n<tr>\n<td>-h</td>\n<td>显示Memcached版本和摘要信息</td>\n</tr>\n<tr>\n<td>-i</td>\n<td>打印libevent和Memcached的licenses信息</td>\n</tr>\n<tr>\n<td>-V</td>\n<td>输出Memcached版本号</td>\n</tr>\n<tr>\n<td>-P <file></file></td>\n<td>保存memcached进程的pid文件，（与 -d 一起搭配使用）</td>\n</tr>\n<tr>\n<td>-f <factor></factor></td>\n<td>用于计算缓存数据项的内存块大小的乘数因子，默认是1.25</td>\n</tr>\n<tr>\n<td>-n <bytes></bytes></td>\n<td>为缓存数据项的key、value、flag设置最小分配字节数，默认是48</td>\n</tr>\n<tr>\n<td>-L</td>\n<td>尝试使用大内存分页（pages）</td>\n</tr>\n<tr>\n<td>-D <char></char></td>\n<td>用于统计报告中Key前缀和ID之间的分隔符，默认是冒号“:”  </td>\n</tr>\n<tr>\n<td>-t <num></num></td>\n<td>指定用来处理请求的线程数，默认为4</td>\n</tr>\n<tr>\n<td>-R</td>\n<td>为避免客户端饿死（starvation），对连续达到的客户端请求数设置一个限额，如果超过该设置，会选择另一个连接来处理请求，默认为20</td>\n</tr>\n<tr>\n<td>-C</td>\n<td>禁用CAS</td>\n</tr>\n<tr>\n<td>-b <num></num></td>\n<td>Set the backlog queue limit (default: 1024)</td>\n</tr>\n<tr>\n<td>-B</td>\n<td>指定使用的协议，默认行为是自动协商（autonegotiate），可能使用的选项有auto、ascii、binary。</td>\n</tr>\n<tr>\n<td>-I</td>\n<td>Override the size of each slab page. Adjusts max item size(default: 1mb, min: 1k, max: 128m)</td>\n</tr>\n<tr>\n<td>-F</td>\n<td>禁用flush_all命令</td>\n</tr>\n<tr>\n<td>-o</td>\n<td>指定逗号分隔的选项，一般用于用于扩展或实验性质的选项</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"通过telnet连接使用Memcache\"><a href=\"#通过telnet连接使用Memcache\" class=\"headerlink\" title=\"通过telnet连接使用Memcache\"></a>通过telnet连接使用Memcache</h3><p>连接<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">telnet 127.0.0.1 11211</div></pre></td></tr></table></figure></p>\n<p>命令格式：<command name=\"\"> <key> <flags> <exptime> <bytes>\\r\\n <data block=\"\">\\r\\n</data></bytes></exptime></flags></key></p>\n<blockquote>\n<p><command name=\"\"> 可以是”set”, “add”, “replace”</p>\n<p><key> 客户端需要保存数据的key。</key></p>\n<p><flags> 是一个16位的无符号的整数(以十进制的方式表示)。</flags></p>\n<p><exptime> 过期的时间。<br>最后客户端需要加上”\\r\\n”作为”命令头”的结束标志。即回车</exptime></p>\n</blockquote>\n<p>示例：</p>\n<p>保存一个数据（保存一个『cache_key1=&gt;12345』的键值对到memcached 60s）<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">set cache_key1 0 60 5</div><div class=\"line\">12345</div><div class=\"line\">STORED</div></pre></td></tr></table></figure></p>\n<p>获取刚保存的值<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">get cache_key1</div><div class=\"line\">VALUE cache_key1 0 5</div><div class=\"line\">12345</div><div class=\"line\">END</div></pre></td></tr></table></figure></p>\n<p>其他命令：</p>\n<table>\n<thead>\n<tr>\n<th>Command</th>\n<th>Description</th>\n<th>Example</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>get</td>\n<td>获取值</td>\n<td>get mykey</td>\n</tr>\n<tr>\n<td>set</td>\n<td>设置值（可以存在可以不存在）</td>\n<td>set mykey 0 60 5</td>\n</tr>\n<tr>\n<td>add</td>\n<td>添加新值</td>\n<td>add newkey 0 60 5</td>\n</tr>\n<tr>\n<td>replace</td>\n<td>替换值（必须已存在）</td>\n<td>replace key 0 60 5</td>\n</tr>\n<tr>\n<td>append</td>\n<td>在原有值之后添加数据</td>\n<td>append key 0 60 15</td>\n</tr>\n<tr>\n<td>prepend</td>\n<td>在原有值之前添加数据</td>\n<td>prepend key 0 60 15</td>\n</tr>\n<tr>\n<td>incr</td>\n<td>Increments numerical key value by given number</td>\n<td>incr mykey 2</td>\n</tr>\n<tr>\n<td>decr</td>\n<td>Decrements numerical key value by given number</td>\n<td>decr mykey 5</td>\n</tr>\n<tr>\n<td>delete</td>\n<td>删除一条数据</td>\n<td>delete mykey</td>\n</tr>\n<tr>\n<td>flush_all</td>\n<td>清除所有数据</td>\n<td>flush_all</td>\n</tr>\n<tr>\n<td></td>\n<td>清除900秒之内的数据</td>\n<td>flush_all 900</td>\n</tr>\n<tr>\n<td>stats</td>\n<td>查看所有状态</td>\n<td>stats</td>\n</tr>\n<tr>\n<td></td>\n<td>Prints memory statistics</td>\n<td>stats slabs</td>\n</tr>\n<tr>\n<td></td>\n<td>Prints memory statistics</td>\n<td>stats malloc</td>\n</tr>\n<tr>\n<td></td>\n<td>Print higher level allocation statistics</td>\n<td>stats items</td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td>stats detail</td>\n</tr>\n<tr>\n<td></td>\n<td>已使用大小</td>\n<td>stats sizes</td>\n</tr>\n<tr>\n<td></td>\n<td>重置状态</td>\n<td>stats reset</td>\n</tr>\n<tr>\n<td>version</td>\n<td>查看版本</td>\n<td>version</td>\n</tr>\n<tr>\n<td>verbosity</td>\n<td>Increases log level</td>\n<td>verbosity</td>\n</tr>\n<tr>\n<td>quit</td>\n<td>退出telnet连接</td>\n<td>quit</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"通过客户端（PHP）连接和使用Memcached\"><a href=\"#通过客户端（PHP）连接和使用Memcached\" class=\"headerlink\" title=\"通过客户端（PHP）连接和使用Memcached\"></a>通过客户端（PHP）连接和使用Memcached</h3><p>php扩展Memcached安装</p>\n<p>依赖</p>\n<blockquote>\n<p>libmemcached, 是一个 memcached 的库，客户端库，C 和 C++ 语言实现的客户端库，具有低内存占用率、线程安全、并提供对memcached功能的全面支持。它还采用 多种命令行工具： memcat ， memflush ， memrm ， memstat ，并memslap （负载代）。程序库一直在设计，让不同的散列方法对密钥，分割的钥匙，并使用统一的散列分配。</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">wget https://launchpadlibrarian.net/165454254/libmemcached-1.0.18.tar.gz</div><div class=\"line\">tar -zxvf libmemcached-1.0.18.tar.gz</div><div class=\"line\">cd libmemcached-1.0.18</div><div class=\"line\">./configure --prefix=/usr/local/libmemcached</div><div class=\"line\">make &amp;&amp; make install</div></pre></td></tr></table></figure>\n<p>安装扩展<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">wget http://n.sinaimg.cn/games/3ece443e/20160929/memcached-2.2.0.tar</div><div class=\"line\">tar -xvf memcached-2.2.0.tar</div><div class=\"line\">cd memcached-2.2.0</div><div class=\"line\">/usr/local/php56/bin/phpize</div><div class=\"line\">./configure --with-php-config=/usr/local/php56/bin/php-config --with-libmemcached-dir=/usr/local/libmemcached  --enable-memcached --disable-memcached-sasl</div><div class=\"line\">make &amp;&amp; make install</div><div class=\"line\">Installing shared extensions:     /usr/local/php56/lib/php/extensions/no-debug-non-zts-20131226/</div></pre></td></tr></table></figure></p>\n<p>查看是否安装成功<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">cd /usr/local/php56/lib/php/extensions/no-debug-non-zts-20131226/</div><div class=\"line\">ll</div><div class=\"line\">-rwxr-xr-x 1 root root  380475 9月  28 22:25 memcached.so</div><div class=\"line\">-rwxr-xr-x 1 root root  756714 9月  26 17:32 mysqli.so</div><div class=\"line\">-rwxr-xr-x 1 root root 1333912 9月  24 23:31 opcache.a</div><div class=\"line\">-rwxr-xr-x 1 root root  618435 9月  24 23:31 opcache.so</div></pre></td></tr></table></figure></p>\n<p>修改配置<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">vi /usr/local/php56/lib/php.ini</div><div class=\"line\">extension=/usr/local/php56/lib/php/extensions/no-debug-non-zts-20131226/memcached.so</div></pre></td></tr></table></figure></p>\n<p>重启php-fpm<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">kill -USR2 `cat /usr/local/php56/var/run/php-fpm.pid`</div></pre></td></tr></table></figure></p>\n<p>查看是否已经加载成功<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">/usr/local/php56/bin/php -m</div><div class=\"line\">或通过phpinfo();查看</div></pre></td></tr></table></figure></p>\n<p>测试<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">vi memcache_test.php</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;?php</span></div><div class=\"line\">        $mc = <span class=\"keyword\">new</span> Memcached();</div><div class=\"line\">        var_dump($mc);</div><div class=\"line\">        $mc-&gt;addServer(<span class=\"string\">'127.0.0.1'</span>, <span class=\"number\">11211</span>);</div><div class=\"line\">        $mc-&gt;set(<span class=\"string\">'cache_key'</span>,<span class=\"string\">'mem_value'</span>,<span class=\"number\">30</span>);</div><div class=\"line\">        $val = $mc-&gt;get(<span class=\"string\">'cache_key'</span>);</div><div class=\"line\">        var_dump($val);</div><div class=\"line\">        var_dump($mc-&gt;delete(<span class=\"string\">'cache_key'</span>));</div><div class=\"line\">        $mc-&gt;quit();</div></pre></td></tr></table></figure>\n<p>访问结果：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">object(Memcached)#1 (0) &#123; &#125; string(9) &quot;mem_value&quot; bool(true)</div></pre></td></tr></table></figure></p>\n<p>php关于memcached 的两种扩展memcache 和 memcached 介绍</p>\n<ol>\n<li><p>目前大多数php环境里使用的都是不带d的memcache版本，这个版本出的比较早，是一个原生版本，完全在php框架内开发的。与之对应的带d的memcached是建立在libmemcached的基础上，所以相对来说，memcached版本的功能更全一些。</p>\n<blockquote>\n<p><a href=\"http://cn2.php.net/manual/en/book.memcache.php\" target=\"_blank\" rel=\"external\">memcache:</a></p>\n<p><a href=\"http://cn2.php.net/manual/en/book.memcached.php\" target=\"_blank\" rel=\"external\">memcached:</a></p>\n</blockquote>\n</li>\n<li><p>Memcache是原生实现的，支持OO和非OO两套接口并存。而memcached是使用libmemcached，只支持OO接口。</p>\n</li>\n<li>memcached有了一个统一的setOption()来设置设置，而不用在操作的时候设置了。Memcached实现了更多的memcached协议。</li>\n<li>memcached支持Binary Protocol，而memcache不支持。这意味着memcached会有更高的性能。不过memcached目前还不支持长连接。</li>\n<li>另外一点也是大家比较关心的，就是所使用的算法。“一致性hash算法”是当添加或删除存储节点时，对存储在memcached上的数据影响较小的一种算法。在php的两个扩展库中，都可以使用该算法，只是设置方法有所不同。</li>\n</ol>\n<ul>\n<li>Memcache</li>\n</ul>\n<p>修改php.ini添加：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">[Memcache]</div><div class=\"line\">Memcache.allow_failover = 1</div><div class=\"line\">Memcache.hash_strategy =consistent</div><div class=\"line\">Memcache.hash_function =crc32</div></pre></td></tr></table></figure></p>\n<p>或在php中使用ini_set方法：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">ini_set(‘memcache.hash_strategy&apos;,&apos;standard&apos;);</div><div class=\"line\">ini_set(‘memcache.hash_function&apos;,&apos;crc32&apos;);</div></pre></td></tr></table></figure></p>\n<ul>\n<li>Memcached</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">$mem = new memcached();</div><div class=\"line\">$mem-&gt;setOption(Memcached::OPT_DISTRIBUTION,Memcached::DISTRIBUTION_CONSISTENT);</div><div class=\"line\">$mem-&gt;setOption(Memcached::OPT_LIBKETAMA_COMPATIBLE,true);</div></pre></td></tr></table></figure>\n<h2 id=\"Memcached监控\"><a href=\"#Memcached监控\" class=\"headerlink\" title=\"Memcached监控\"></a>Memcached监控</h2><h3 id=\"利用phpmemcache-php图形监控工具\"><a href=\"#利用phpmemcache-php图形监控工具\" class=\"headerlink\" title=\"利用phpmemcache.php图形监控工具\"></a>利用phpmemcache.php图形监控工具</h3><p>下载 phpmemcache.php<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">wget http://n.sinaimg.cn/games/3ece443e/20160929/phpmemcache.php</div></pre></td></tr></table></figure></p>\n<p>将phpmemcache.php放入web目录<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">mv phpmemcache.php /usr/local/nginx/html</div></pre></td></tr></table></figure></p>\n<p>修改phpmemcache.php中配置<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">define(&apos;ADMIN_USERNAME&apos;,&apos;xxxx&apos;);    // 用户名修改，在访问 phpmemcache.php 需要进行认证</div><div class=\"line\">define(&apos;ADMIN_PASSWORD&apos;,&apos;xxxx&apos;);    // 密码</div><div class=\"line\">define(&apos;DATE_FORMAT&apos;,&apos;Y/m/d H:i:s&apos;);</div><div class=\"line\">define(&apos;GRAPH_SIZE&apos;,200);</div><div class=\"line\">define(&apos;MAX_ITEM_DUMP&apos;,50);</div><div class=\"line\"></div><div class=\"line\">$MEMCACHE_SERVERS[] = &apos;127.0.0.1:11211&apos;; // 加入需要监控的memcached服务器</div><div class=\"line\">//$MEMCACHE_SERVERS[] = &apos;192.168.200.104:11212&apos;; // add more as an array</div></pre></td></tr></table></figure></p>\n<p>浏览器访问<br><img src=\"http://n.sinaimg.cn/games/3ece443e/20160929/phpmemcache.png?1\" alt=\"phpmemcache浏览器访问效果\"></p>\n<h3 id=\"利用Stats命令查看\"><a href=\"#利用Stats命令查看\" class=\"headerlink\" title=\"利用Stats命令查看\"></a>利用Stats命令查看</h3><p>利用stats命令可以查看当前memcached的各种状态<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div></pre></td><td class=\"code\"><pre><div class=\"line\">telnet 127.0.0.1 11211</div><div class=\"line\">Trying 127.0.0.1...</div><div class=\"line\">Connected to 127.0.0.1.</div><div class=\"line\">Escape character is &apos;^]&apos;.</div><div class=\"line\">stats</div><div class=\"line\">STAT pid 24732</div><div class=\"line\">STAT uptime 66597</div><div class=\"line\">STAT time 1475115983</div><div class=\"line\">STAT version 1.4.31</div><div class=\"line\">STAT libevent 2.0.22-stable</div><div class=\"line\">STAT pointer_size 64</div><div class=\"line\">STAT rusage_user 6.194421</div><div class=\"line\">STAT rusage_system 2.419890</div><div class=\"line\">STAT curr_connections 10</div><div class=\"line\">STAT total_connections 16</div><div class=\"line\">STAT connection_structures 11</div><div class=\"line\">STAT reserved_fds 20</div><div class=\"line\">STAT cmd_get 5</div><div class=\"line\">STAT cmd_set 8</div><div class=\"line\">STAT cmd_flush 0</div><div class=\"line\">STAT cmd_touch 0</div><div class=\"line\">STAT get_hits 4</div><div class=\"line\">STAT get_misses 1</div><div class=\"line\">STAT get_expired 0</div><div class=\"line\">STAT get_flushed 0</div><div class=\"line\">STAT delete_misses 0</div><div class=\"line\">STAT delete_hits 2</div><div class=\"line\">STAT incr_misses 0</div><div class=\"line\">STAT incr_hits 0</div><div class=\"line\">STAT decr_misses 0</div><div class=\"line\">STAT decr_hits 0</div><div class=\"line\">STAT cas_misses 0</div><div class=\"line\">STAT cas_hits 0</div><div class=\"line\">STAT cas_badval 0</div><div class=\"line\">STAT touch_hits 0</div><div class=\"line\">STAT touch_misses 0</div><div class=\"line\">STAT auth_cmds 0</div><div class=\"line\">STAT auth_errors 0</div><div class=\"line\">STAT bytes_read 3850</div><div class=\"line\">STAT bytes_written 293</div><div class=\"line\">STAT limit_maxbytes 134217728</div><div class=\"line\">STAT accepting_conns 1</div><div class=\"line\">STAT listen_disabled_num 0</div><div class=\"line\">STAT time_in_listen_disabled_us 0</div><div class=\"line\">STAT threads 4</div><div class=\"line\">STAT conn_yields 0</div><div class=\"line\">STAT hash_power_level 16</div><div class=\"line\">STAT hash_bytes 524288</div><div class=\"line\">STAT hash_is_expanding 0</div><div class=\"line\">STAT malloc_fails 0</div><div class=\"line\">STAT log_worker_dropped 0</div><div class=\"line\">STAT log_worker_written 0</div><div class=\"line\">STAT log_watcher_skipped 0</div><div class=\"line\">STAT log_watcher_sent 0</div><div class=\"line\">STAT bytes 0</div><div class=\"line\">STAT curr_items 0</div><div class=\"line\">STAT total_items 6</div><div class=\"line\">STAT expired_unfetched 0</div><div class=\"line\">STAT evicted_unfetched 0</div><div class=\"line\">STAT evictions 0</div><div class=\"line\">STAT reclaimed 2</div><div class=\"line\">STAT crawler_reclaimed 0</div><div class=\"line\">STAT crawler_items_checked 0</div><div class=\"line\">STAT lrutail_reflocked 0</div><div class=\"line\">END</div></pre></td></tr></table></figure></p>\n<p>Stats详解</p>\n<table>\n<thead>\n<tr>\n<th>选项</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>pid</td>\n<td>memcache服务器的进程ID</td>\n</tr>\n<tr>\n<td>uptime</td>\n<td>服务器已经运行的秒数</td>\n</tr>\n<tr>\n<td>time</td>\n<td>服务器当前的unix时间戳</td>\n</tr>\n<tr>\n<td>version</td>\n<td>memcache版本</td>\n</tr>\n<tr>\n<td>pointer_size</td>\n<td>当前操作系统的指针大小（32位系统一般是32bit）</td>\n</tr>\n<tr>\n<td>rusage_user</td>\n<td>进程的累计用户时间</td>\n</tr>\n<tr>\n<td>rusage_system</td>\n<td>进程的累计系统时间</td>\n</tr>\n<tr>\n<td>curr_items</td>\n<td>服务器当前存储的items数量</td>\n</tr>\n<tr>\n<td>total_items</td>\n<td>从服务器启动以后存储的items总数量</td>\n</tr>\n<tr>\n<td>bytes</td>\n<td>当前服务器存储items占用的字节数</td>\n</tr>\n<tr>\n<td>curr_connections</td>\n<td>当前打开着的连接数</td>\n</tr>\n<tr>\n<td>total_connections</td>\n<td>从服务器启动以后曾经打开过的连接数</td>\n</tr>\n<tr>\n<td>connection_structures</td>\n<td>服务器分配的连接构造数</td>\n</tr>\n<tr>\n<td>cmd_get</td>\n<td>get命令（获取）总请求次数</td>\n</tr>\n<tr>\n<td>cmd_set</td>\n<td>set命令（保存）总请求次数</td>\n</tr>\n<tr>\n<td>get_hits</td>\n<td>总命中次数</td>\n</tr>\n<tr>\n<td>get_misses</td>\n<td>总未命中次数</td>\n</tr>\n<tr>\n<td>evictions</td>\n<td>为获取空闲内存而删除的items数（分配给memcache的空间用满后需要删除旧的items来得到空间分配给新的items）</td>\n</tr>\n<tr>\n<td>bytes_read</td>\n<td>总读取字节数（请求字节数）</td>\n</tr>\n<tr>\n<td>bytes_written</td>\n<td>总发送字节数（结果字节数）</td>\n</tr>\n<tr>\n<td>limit_maxbytes</td>\n<td>分配给memcache的内存大小（字节）</td>\n</tr>\n<tr>\n<td>threads</td>\n<td>当前线程数</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"利用各种监控软件查看（例如：nagios监控memcache的插件）\"><a href=\"#利用各种监控软件查看（例如：nagios监控memcache的插件）\" class=\"headerlink\" title=\"利用各种监控软件查看（例如：nagios监控memcache的插件）\"></a>利用各种监控软件查看（例如：nagios监控memcache的插件）</h3><blockquote>\n<p>只以命中率大于和小于为例两种状态。</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">vim check_memcache</div></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#!/bin/sh</span></div><div class=\"line\"><span class=\"keyword\">if</span> [ <span class=\"variable\">$#</span> <span class=\"_\">-ne</span> 1 ]</div><div class=\"line\"><span class=\"keyword\">then</span></div><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"Usage:<span class=\"variable\">$0</span> -c num2\"</span></div><div class=\"line\"><span class=\"built_in\">exit</span> 0</div><div class=\"line\"><span class=\"keyword\">fi</span></div><div class=\"line\">cmd_get=`/usr/<span class=\"built_in\">local</span>/nagios/libexec/check_tcp -H localhost -p 11211 -E <span class=\"_\">-s</span> <span class=\"string\">'stats\\r\\nquit\\r\\n'</span> <span class=\"_\">-e</span> <span class=\"string\">'uptime'</span> |grep cmd_get | awk <span class=\"string\">'&#123;print $3+0&#125;'</span>`</div><div class=\"line\">get_hits=`/usr/<span class=\"built_in\">local</span>/nagios/libexec/check_tcp -H localhost -p 11211 -E <span class=\"_\">-s</span> <span class=\"string\">'stats\\r\\nquit\\r\\n'</span> <span class=\"_\">-e</span> <span class=\"string\">'uptime'</span> |grep get_hits | awk <span class=\"string\">'&#123;print $3+0&#125;'</span>`</div><div class=\"line\">hit_rate=`<span class=\"built_in\">echo</span> <span class=\"string\">\"<span class=\"variable\">$get_hits</span>*100/<span class=\"variable\">$cmd_get</span>\"</span>|bc`</div><div class=\"line\"><span class=\"keyword\">if</span> [ <span class=\"variable\">$hit_rate</span> <span class=\"_\">-gt</span> <span class=\"variable\">$1</span> ];<span class=\"keyword\">then</span></div><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"OK - hit rate is <span class=\"variable\">$hit_rate</span> | hit_rate=<span class=\"variable\">$hit_rate</span>; cmd_get=<span class=\"variable\">$cmd_get</span>; get_hits=<span class=\"variable\">$get_hits</span>\"</span></div><div class=\"line\"><span class=\"built_in\">exit</span> 0</div><div class=\"line\"><span class=\"keyword\">else</span></div><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"CRITICAL - hit rate is <span class=\"variable\">$hit_rate</span> | hit_rate=<span class=\"variable\">$hit_rate</span>; cmd_get=<span class=\"variable\">$cmd_get</span>; get_hits=<span class=\"variable\">$get_hits</span>\"</span></div><div class=\"line\"><span class=\"built_in\">exit</span> 2</div><div class=\"line\"><span class=\"keyword\">fi</span></div></pre></td></tr></table></figure>\n<p>测试命中率大于80%为正常为例;<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">eg：</div><div class=\"line\">sh check_memcache 80</div><div class=\"line\">root@ip-10-250-114-95:/liang# sh check_memcache 80</div><div class=\"line\">OK - hit rate is 99 | hit_rate=99; cmd_get=142547; get_hits=141880</div></pre></td></tr></table></figure></p>\n<p>以上证明命中率99%，即状态为OK.</p>\n","excerpt":"<p>Memcached,是高性能的分布式内存缓存服务器，主要功能就是通过缓存数据库的查询，减少对数据库的访问次数，来提高动态web应用的速度和可扩展性。</p>\n<p>memcached 是以守护程序方法运行于一个或多个服务器中，随时接受客户端的连接操作，客户端可以由各种语言编写，目前一致的客户端api包括 Perl / PHP / Python / Java / C# / C 等等。客户端在与 memcached 服务建立连接之后，接下来的事情就是存取对象了， 每个被存取的对象都有一个唯一的标识符 key，存取操作均通过这个 key进行，保存到 memcached 中的对象实际上是放置内存中的，并不是保存在平时的 cache 文件中的，这也是为什么 memcached 能够如此高效快速的原因。</p>\n<p>注意，这些对象并不是持久的， 服务停止之后， 里边的数据就会丢失。</p>\n<p><img src=\"http://n.sinaimg.cn/games/3ece443e/20160929/MemcacheYingYongMoXing.png?1\" alt=\"Memcached应用模型\"></p>","more":"<h2 id=\"Memcached的安装\"><a href=\"#Memcached的安装\" class=\"headerlink\" title=\"Memcached的安装\"></a>Memcached的安装</h2><h3 id=\"准备\"><a href=\"#准备\" class=\"headerlink\" title=\"准备\"></a>准备</h3><p>libevent</p>\n<blockquote>\n<p>Libevent 是一个用C语言编写的、轻量级的开源高性能网络库。<br>主要有以下几个亮点：事件驱动（ event-driven），高性能;轻量级，专注于网络，不如 ACE 那么臃肿庞大；源代码相当精炼、易读；跨平台，支持 Windows、 Linux、 BSD 和 Mac Os；支持多种 I/O 多路复用技术， epoll、 poll、 dev/poll、 select 和 kqueue 等；支持 I/O，定时器和信号等事件；注册事件优先级。<br>Libevent 已经被广泛的应用，作为底层的网络库；比如 memcached、 Vomit、 Nylon、 Netchat等等。</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">wget http://n.sinaimg.cn/games/3ece443e/20160929/libevent-2.0.22-stable.tar</div><div class=\"line\">tar -vxf libevent-2.0.22-stable.tar</div><div class=\"line\">cd libevent-2.0.22-stable</div><div class=\"line\">./configure --prefix=/usr/local/libevent</div><div class=\"line\">make &amp;&amp; make install</div></pre></td></tr></table></figure>\n<h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">wget http://n.sinaimg.cn/games/3ece443e/20160930/memcached-1.4.31.tar.gz</div><div class=\"line\">cd memcached-1.4.31</div><div class=\"line\"> ./configure --prefix=/usr/local/memcached --with-libevent=/usr/local/libevent</div><div class=\"line\">make &amp;&amp; make install</div></pre></td></tr></table></figure>\n<p>查看是否已经安装成功<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">cd /usr/local/memcached/</div><div class=\"line\">ll</div><div class=\"line\">drwxr-xr-x 2 root root 4096 9月  28 10:56 bin</div><div class=\"line\">drwxr-xr-x 3 root root 4096 9月  28 10:56 include</div><div class=\"line\">drwxr-xr-x 3 root root 4096 9月  28 10:56 share</div></pre></td></tr></table></figure></p>\n<h2 id=\"Memcached管理\"><a href=\"#Memcached管理\" class=\"headerlink\" title=\"Memcached管理\"></a>Memcached管理</h2><h3 id=\"启动\"><a href=\"#启动\" class=\"headerlink\" title=\"启动\"></a>启动</h3><p>启动Memcached服务器<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">/usr/local/memcached/bin/memcached -d -m 128 -u root -p 11211</div></pre></td></tr></table></figure></p>\n<p>查看是否启动成功<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">ps aux | grep memcache</div><div class=\"line\">root     24428  0.0  0.0 323120   864 ?        Ssl  11:00   0:00 /usr/local/memcached/bin/memcached -d -m 128 -u root -p 11211</div><div class=\"line\">root     24436  0.0  0.0 112664   984 pts/0    D+   11:00   0:00 grep --color=auto memcache</div></pre></td></tr></table></figure></p>\n<p>或<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">netstat -tlun | grep 11211</div><div class=\"line\">tcp        0      0 0.0.0.0:11211           0.0.0.0:*               LISTEN</div><div class=\"line\">tcp6       0      0 :::11211                :::*                    LISTEN</div><div class=\"line\">udp        0      0 0.0.0.0:11211           0.0.0.0:*</div><div class=\"line\">udp6       0      0 :::11211                :::*</div></pre></td></tr></table></figure></p>\n<p>设置开机自启动<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">echo &quot;/usr/local/memcached/bin/memcached -d -m 128 -u root -p 11211&quot; &gt;&gt; /etc/rc.d/rc.local</div></pre></td></tr></table></figure></p>\n<p>Memcached启动选项及说明</p>\n<table>\n<thead>\n<tr>\n<th>选项</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>-p <num></td>\n<td>Memcached监听的TCP端口，要保证该端口号未被占用</td>\n</tr>\n<tr>\n<td>-U <num></td>\n<td>指定监听UDP的端口，默认11211，0表示关闭</td>\n</tr>\n<tr>\n<td>-s <file></td>\n<td>指定Memcached用于监听的UNIX socket文件</td>\n</tr>\n<tr>\n<td>-A</td>\n<td>enable ascii “shutdown” command</td>\n</tr>\n<tr>\n<td>-a <mask></td>\n<td>设置-s选项指定的UNIX socket文件的权限(默认权限: 0700)</td>\n</tr>\n<tr>\n<td>-l <addr></td>\n<td>监听的服务器IP地址，如果有多个地址的话，使用逗号分隔，格式可以为“IP地址:端口号”，例如：-l 指定192.168.0.184:19830,192.168.0.195:13542；端口号也可以通过-p选项指定</td>\n</tr>\n<tr>\n<td>-d</td>\n<td>指定memcached进程作为一个守护进程启动</td>\n</tr>\n<tr>\n<td>-r</td>\n<td>设置产生core文件大小</td>\n</tr>\n<tr>\n<td>-u <username></td>\n<td>运行memcached的用户 (only when run as root)</td>\n</tr>\n<tr>\n<td>-m <num></td>\n<td>指定分配给memcached使用的内存，单位是MB(默认: 64 MB)</td>\n</tr>\n<tr>\n<td>-M</td>\n<td>当内存使用超出配置值时，禁止自动清除缓存中的数据项，此时Memcached不可用，直到内存被释放</td>\n</tr>\n<tr>\n<td>-c <num></td>\n<td>设置最大运行的并发连接数，默认是1024</td>\n</tr>\n<tr>\n<td>-k</td>\n<td>设置锁定所有分页的内存，对于大缓存应用场景，谨慎使用该选项</td>\n</tr>\n<tr>\n<td>-v</td>\n<td>输出警告和错误信息</td>\n</tr>\n<tr>\n<td>-vv</td>\n<td>打印信息比-v更详细：不仅输出警告和错误信息，也输出客户端请求和响应信息</td>\n</tr>\n<tr>\n<td>-vvv</td>\n<td>extremely verbose (also print internal state transitions)</td>\n</tr>\n<tr>\n<td>-h</td>\n<td>显示Memcached版本和摘要信息</td>\n</tr>\n<tr>\n<td>-i</td>\n<td>打印libevent和Memcached的licenses信息</td>\n</tr>\n<tr>\n<td>-V</td>\n<td>输出Memcached版本号</td>\n</tr>\n<tr>\n<td>-P <file></td>\n<td>保存memcached进程的pid文件，（与 -d 一起搭配使用）</td>\n</tr>\n<tr>\n<td>-f <factor></td>\n<td>用于计算缓存数据项的内存块大小的乘数因子，默认是1.25</td>\n</tr>\n<tr>\n<td>-n <bytes></td>\n<td>为缓存数据项的key、value、flag设置最小分配字节数，默认是48</td>\n</tr>\n<tr>\n<td>-L</td>\n<td>尝试使用大内存分页（pages）</td>\n</tr>\n<tr>\n<td>-D <char></td>\n<td>用于统计报告中Key前缀和ID之间的分隔符，默认是冒号“:”  </td>\n</tr>\n<tr>\n<td>-t <num></td>\n<td>指定用来处理请求的线程数，默认为4</td>\n</tr>\n<tr>\n<td>-R</td>\n<td>为避免客户端饿死（starvation），对连续达到的客户端请求数设置一个限额，如果超过该设置，会选择另一个连接来处理请求，默认为20</td>\n</tr>\n<tr>\n<td>-C</td>\n<td>禁用CAS</td>\n</tr>\n<tr>\n<td>-b <num></td>\n<td>Set the backlog queue limit (default: 1024)</td>\n</tr>\n<tr>\n<td>-B</td>\n<td>指定使用的协议，默认行为是自动协商（autonegotiate），可能使用的选项有auto、ascii、binary。</td>\n</tr>\n<tr>\n<td>-I</td>\n<td>Override the size of each slab page. Adjusts max item size(default: 1mb, min: 1k, max: 128m)</td>\n</tr>\n<tr>\n<td>-F</td>\n<td>禁用flush_all命令</td>\n</tr>\n<tr>\n<td>-o</td>\n<td>指定逗号分隔的选项，一般用于用于扩展或实验性质的选项</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"通过telnet连接使用Memcache\"><a href=\"#通过telnet连接使用Memcache\" class=\"headerlink\" title=\"通过telnet连接使用Memcache\"></a>通过telnet连接使用Memcache</h3><p>连接<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">telnet 127.0.0.1 11211</div></pre></td></tr></table></figure></p>\n<p>命令格式：<command name> <key> <flags> <exptime> <bytes>\\r\\n <data block>\\r\\n</p>\n<blockquote>\n<p><command name> 可以是”set”, “add”, “replace”</p>\n<p><key> 客户端需要保存数据的key。</p>\n<p><flags> 是一个16位的无符号的整数(以十进制的方式表示)。</p>\n<p><exptime> 过期的时间。<br>最后客户端需要加上”\\r\\n”作为”命令头”的结束标志。即回车</p>\n</blockquote>\n<p>示例：</p>\n<p>保存一个数据（保存一个『cache_key1=&gt;12345』的键值对到memcached 60s）<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">set cache_key1 0 60 5</div><div class=\"line\">12345</div><div class=\"line\">STORED</div></pre></td></tr></table></figure></p>\n<p>获取刚保存的值<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">get cache_key1</div><div class=\"line\">VALUE cache_key1 0 5</div><div class=\"line\">12345</div><div class=\"line\">END</div></pre></td></tr></table></figure></p>\n<p>其他命令：</p>\n<table>\n<thead>\n<tr>\n<th>Command</th>\n<th>Description</th>\n<th>Example</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>get</td>\n<td>获取值</td>\n<td>get mykey</td>\n</tr>\n<tr>\n<td>set</td>\n<td>设置值（可以存在可以不存在）</td>\n<td>set mykey 0 60 5</td>\n</tr>\n<tr>\n<td>add</td>\n<td>添加新值</td>\n<td>add newkey 0 60 5</td>\n</tr>\n<tr>\n<td>replace</td>\n<td>替换值（必须已存在）</td>\n<td>replace key 0 60 5</td>\n</tr>\n<tr>\n<td>append</td>\n<td>在原有值之后添加数据</td>\n<td>append key 0 60 15</td>\n</tr>\n<tr>\n<td>prepend</td>\n<td>在原有值之前添加数据</td>\n<td>prepend key 0 60 15</td>\n</tr>\n<tr>\n<td>incr</td>\n<td>Increments numerical key value by given number</td>\n<td>incr mykey 2</td>\n</tr>\n<tr>\n<td>decr</td>\n<td>Decrements numerical key value by given number</td>\n<td>decr mykey 5</td>\n</tr>\n<tr>\n<td>delete</td>\n<td>删除一条数据</td>\n<td>delete mykey</td>\n</tr>\n<tr>\n<td>flush_all</td>\n<td>清除所有数据</td>\n<td>flush_all</td>\n</tr>\n<tr>\n<td></td>\n<td>清除900秒之内的数据</td>\n<td>flush_all 900</td>\n</tr>\n<tr>\n<td>stats</td>\n<td>查看所有状态</td>\n<td>stats</td>\n</tr>\n<tr>\n<td></td>\n<td>Prints memory statistics</td>\n<td>stats slabs</td>\n</tr>\n<tr>\n<td></td>\n<td>Prints memory statistics</td>\n<td>stats malloc</td>\n</tr>\n<tr>\n<td></td>\n<td>Print higher level allocation statistics</td>\n<td>stats items</td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td>stats detail</td>\n</tr>\n<tr>\n<td></td>\n<td>已使用大小</td>\n<td>stats sizes</td>\n</tr>\n<tr>\n<td></td>\n<td>重置状态</td>\n<td>stats reset</td>\n</tr>\n<tr>\n<td>version</td>\n<td>查看版本</td>\n<td>version</td>\n</tr>\n<tr>\n<td>verbosity</td>\n<td>Increases log level</td>\n<td>verbosity</td>\n</tr>\n<tr>\n<td>quit</td>\n<td>退出telnet连接</td>\n<td>quit</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"通过客户端（PHP）连接和使用Memcached\"><a href=\"#通过客户端（PHP）连接和使用Memcached\" class=\"headerlink\" title=\"通过客户端（PHP）连接和使用Memcached\"></a>通过客户端（PHP）连接和使用Memcached</h3><p>php扩展Memcached安装</p>\n<p>依赖</p>\n<blockquote>\n<p>libmemcached, 是一个 memcached 的库，客户端库，C 和 C++ 语言实现的客户端库，具有低内存占用率、线程安全、并提供对memcached功能的全面支持。它还采用 多种命令行工具： memcat ， memflush ， memrm ， memstat ，并memslap （负载代）。程序库一直在设计，让不同的散列方法对密钥，分割的钥匙，并使用统一的散列分配。</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">wget https://launchpadlibrarian.net/165454254/libmemcached-1.0.18.tar.gz</div><div class=\"line\">tar -zxvf libmemcached-1.0.18.tar.gz</div><div class=\"line\">cd libmemcached-1.0.18</div><div class=\"line\">./configure --prefix=/usr/local/libmemcached</div><div class=\"line\">make &amp;&amp; make install</div></pre></td></tr></table></figure>\n<p>安装扩展<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">wget http://n.sinaimg.cn/games/3ece443e/20160929/memcached-2.2.0.tar</div><div class=\"line\">tar -xvf memcached-2.2.0.tar</div><div class=\"line\">cd memcached-2.2.0</div><div class=\"line\">/usr/local/php56/bin/phpize</div><div class=\"line\">./configure --with-php-config=/usr/local/php56/bin/php-config --with-libmemcached-dir=/usr/local/libmemcached  --enable-memcached --disable-memcached-sasl</div><div class=\"line\">make &amp;&amp; make install</div><div class=\"line\">Installing shared extensions:     /usr/local/php56/lib/php/extensions/no-debug-non-zts-20131226/</div></pre></td></tr></table></figure></p>\n<p>查看是否安装成功<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">cd /usr/local/php56/lib/php/extensions/no-debug-non-zts-20131226/</div><div class=\"line\">ll</div><div class=\"line\">-rwxr-xr-x 1 root root  380475 9月  28 22:25 memcached.so</div><div class=\"line\">-rwxr-xr-x 1 root root  756714 9月  26 17:32 mysqli.so</div><div class=\"line\">-rwxr-xr-x 1 root root 1333912 9月  24 23:31 opcache.a</div><div class=\"line\">-rwxr-xr-x 1 root root  618435 9月  24 23:31 opcache.so</div></pre></td></tr></table></figure></p>\n<p>修改配置<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">vi /usr/local/php56/lib/php.ini</div><div class=\"line\">extension=/usr/local/php56/lib/php/extensions/no-debug-non-zts-20131226/memcached.so</div></pre></td></tr></table></figure></p>\n<p>重启php-fpm<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">kill -USR2 `cat /usr/local/php56/var/run/php-fpm.pid`</div></pre></td></tr></table></figure></p>\n<p>查看是否已经加载成功<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">/usr/local/php56/bin/php -m</div><div class=\"line\">或通过phpinfo();查看</div></pre></td></tr></table></figure></p>\n<p>测试<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">vi memcache_test.php</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;?php</span></div><div class=\"line\">        $mc = <span class=\"keyword\">new</span> Memcached();</div><div class=\"line\">        var_dump($mc);</div><div class=\"line\">        $mc-&gt;addServer(<span class=\"string\">'127.0.0.1'</span>, <span class=\"number\">11211</span>);</div><div class=\"line\">        $mc-&gt;set(<span class=\"string\">'cache_key'</span>,<span class=\"string\">'mem_value'</span>,<span class=\"number\">30</span>);</div><div class=\"line\">        $val = $mc-&gt;get(<span class=\"string\">'cache_key'</span>);</div><div class=\"line\">        var_dump($val);</div><div class=\"line\">        var_dump($mc-&gt;delete(<span class=\"string\">'cache_key'</span>));</div><div class=\"line\">        $mc-&gt;quit();</div></pre></td></tr></table></figure>\n<p>访问结果：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">object(Memcached)#1 (0) &#123; &#125; string(9) &quot;mem_value&quot; bool(true)</div></pre></td></tr></table></figure></p>\n<p>php关于memcached 的两种扩展memcache 和 memcached 介绍</p>\n<ol>\n<li><p>目前大多数php环境里使用的都是不带d的memcache版本，这个版本出的比较早，是一个原生版本，完全在php框架内开发的。与之对应的带d的memcached是建立在libmemcached的基础上，所以相对来说，memcached版本的功能更全一些。</p>\n<blockquote>\n<p><a href=\"http://cn2.php.net/manual/en/book.memcache.php\">memcache:</a></p>\n<p><a href=\"http://cn2.php.net/manual/en/book.memcached.php\">memcached:</a></p>\n</blockquote>\n</li>\n<li><p>Memcache是原生实现的，支持OO和非OO两套接口并存。而memcached是使用libmemcached，只支持OO接口。</p>\n</li>\n<li>memcached有了一个统一的setOption()来设置设置，而不用在操作的时候设置了。Memcached实现了更多的memcached协议。</li>\n<li>memcached支持Binary Protocol，而memcache不支持。这意味着memcached会有更高的性能。不过memcached目前还不支持长连接。</li>\n<li>另外一点也是大家比较关心的，就是所使用的算法。“一致性hash算法”是当添加或删除存储节点时，对存储在memcached上的数据影响较小的一种算法。在php的两个扩展库中，都可以使用该算法，只是设置方法有所不同。</li>\n</ol>\n<ul>\n<li>Memcache</li>\n</ul>\n<p>修改php.ini添加：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">[Memcache]</div><div class=\"line\">Memcache.allow_failover = 1</div><div class=\"line\">Memcache.hash_strategy =consistent</div><div class=\"line\">Memcache.hash_function =crc32</div></pre></td></tr></table></figure></p>\n<p>或在php中使用ini_set方法：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">ini_set(‘memcache.hash_strategy&apos;,&apos;standard&apos;);</div><div class=\"line\">ini_set(‘memcache.hash_function&apos;,&apos;crc32&apos;);</div></pre></td></tr></table></figure></p>\n<ul>\n<li>Memcached</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">$mem = new memcached();</div><div class=\"line\">$mem-&gt;setOption(Memcached::OPT_DISTRIBUTION,Memcached::DISTRIBUTION_CONSISTENT);</div><div class=\"line\">$mem-&gt;setOption(Memcached::OPT_LIBKETAMA_COMPATIBLE,true);</div></pre></td></tr></table></figure>\n<h2 id=\"Memcached监控\"><a href=\"#Memcached监控\" class=\"headerlink\" title=\"Memcached监控\"></a>Memcached监控</h2><h3 id=\"利用phpmemcache-php图形监控工具\"><a href=\"#利用phpmemcache-php图形监控工具\" class=\"headerlink\" title=\"利用phpmemcache.php图形监控工具\"></a>利用phpmemcache.php图形监控工具</h3><p>下载 phpmemcache.php<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">wget http://n.sinaimg.cn/games/3ece443e/20160929/phpmemcache.php</div></pre></td></tr></table></figure></p>\n<p>将phpmemcache.php放入web目录<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">mv phpmemcache.php /usr/local/nginx/html</div></pre></td></tr></table></figure></p>\n<p>修改phpmemcache.php中配置<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">define(&apos;ADMIN_USERNAME&apos;,&apos;xxxx&apos;);    // 用户名修改，在访问 phpmemcache.php 需要进行认证</div><div class=\"line\">define(&apos;ADMIN_PASSWORD&apos;,&apos;xxxx&apos;);    // 密码</div><div class=\"line\">define(&apos;DATE_FORMAT&apos;,&apos;Y/m/d H:i:s&apos;);</div><div class=\"line\">define(&apos;GRAPH_SIZE&apos;,200);</div><div class=\"line\">define(&apos;MAX_ITEM_DUMP&apos;,50);</div><div class=\"line\"></div><div class=\"line\">$MEMCACHE_SERVERS[] = &apos;127.0.0.1:11211&apos;; // 加入需要监控的memcached服务器</div><div class=\"line\">//$MEMCACHE_SERVERS[] = &apos;192.168.200.104:11212&apos;; // add more as an array</div></pre></td></tr></table></figure></p>\n<p>浏览器访问<br><img src=\"http://n.sinaimg.cn/games/3ece443e/20160929/phpmemcache.png?1\" alt=\"phpmemcache浏览器访问效果\"></p>\n<h3 id=\"利用Stats命令查看\"><a href=\"#利用Stats命令查看\" class=\"headerlink\" title=\"利用Stats命令查看\"></a>利用Stats命令查看</h3><p>利用stats命令可以查看当前memcached的各种状态<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div></pre></td><td class=\"code\"><pre><div class=\"line\">telnet 127.0.0.1 11211</div><div class=\"line\">Trying 127.0.0.1...</div><div class=\"line\">Connected to 127.0.0.1.</div><div class=\"line\">Escape character is &apos;^]&apos;.</div><div class=\"line\">stats</div><div class=\"line\">STAT pid 24732</div><div class=\"line\">STAT uptime 66597</div><div class=\"line\">STAT time 1475115983</div><div class=\"line\">STAT version 1.4.31</div><div class=\"line\">STAT libevent 2.0.22-stable</div><div class=\"line\">STAT pointer_size 64</div><div class=\"line\">STAT rusage_user 6.194421</div><div class=\"line\">STAT rusage_system 2.419890</div><div class=\"line\">STAT curr_connections 10</div><div class=\"line\">STAT total_connections 16</div><div class=\"line\">STAT connection_structures 11</div><div class=\"line\">STAT reserved_fds 20</div><div class=\"line\">STAT cmd_get 5</div><div class=\"line\">STAT cmd_set 8</div><div class=\"line\">STAT cmd_flush 0</div><div class=\"line\">STAT cmd_touch 0</div><div class=\"line\">STAT get_hits 4</div><div class=\"line\">STAT get_misses 1</div><div class=\"line\">STAT get_expired 0</div><div class=\"line\">STAT get_flushed 0</div><div class=\"line\">STAT delete_misses 0</div><div class=\"line\">STAT delete_hits 2</div><div class=\"line\">STAT incr_misses 0</div><div class=\"line\">STAT incr_hits 0</div><div class=\"line\">STAT decr_misses 0</div><div class=\"line\">STAT decr_hits 0</div><div class=\"line\">STAT cas_misses 0</div><div class=\"line\">STAT cas_hits 0</div><div class=\"line\">STAT cas_badval 0</div><div class=\"line\">STAT touch_hits 0</div><div class=\"line\">STAT touch_misses 0</div><div class=\"line\">STAT auth_cmds 0</div><div class=\"line\">STAT auth_errors 0</div><div class=\"line\">STAT bytes_read 3850</div><div class=\"line\">STAT bytes_written 293</div><div class=\"line\">STAT limit_maxbytes 134217728</div><div class=\"line\">STAT accepting_conns 1</div><div class=\"line\">STAT listen_disabled_num 0</div><div class=\"line\">STAT time_in_listen_disabled_us 0</div><div class=\"line\">STAT threads 4</div><div class=\"line\">STAT conn_yields 0</div><div class=\"line\">STAT hash_power_level 16</div><div class=\"line\">STAT hash_bytes 524288</div><div class=\"line\">STAT hash_is_expanding 0</div><div class=\"line\">STAT malloc_fails 0</div><div class=\"line\">STAT log_worker_dropped 0</div><div class=\"line\">STAT log_worker_written 0</div><div class=\"line\">STAT log_watcher_skipped 0</div><div class=\"line\">STAT log_watcher_sent 0</div><div class=\"line\">STAT bytes 0</div><div class=\"line\">STAT curr_items 0</div><div class=\"line\">STAT total_items 6</div><div class=\"line\">STAT expired_unfetched 0</div><div class=\"line\">STAT evicted_unfetched 0</div><div class=\"line\">STAT evictions 0</div><div class=\"line\">STAT reclaimed 2</div><div class=\"line\">STAT crawler_reclaimed 0</div><div class=\"line\">STAT crawler_items_checked 0</div><div class=\"line\">STAT lrutail_reflocked 0</div><div class=\"line\">END</div></pre></td></tr></table></figure></p>\n<p>Stats详解</p>\n<table>\n<thead>\n<tr>\n<th>选项</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>pid</td>\n<td>memcache服务器的进程ID</td>\n</tr>\n<tr>\n<td>uptime</td>\n<td>服务器已经运行的秒数</td>\n</tr>\n<tr>\n<td>time</td>\n<td>服务器当前的unix时间戳</td>\n</tr>\n<tr>\n<td>version</td>\n<td>memcache版本</td>\n</tr>\n<tr>\n<td>pointer_size</td>\n<td>当前操作系统的指针大小（32位系统一般是32bit）</td>\n</tr>\n<tr>\n<td>rusage_user</td>\n<td>进程的累计用户时间</td>\n</tr>\n<tr>\n<td>rusage_system</td>\n<td>进程的累计系统时间</td>\n</tr>\n<tr>\n<td>curr_items</td>\n<td>服务器当前存储的items数量</td>\n</tr>\n<tr>\n<td>total_items</td>\n<td>从服务器启动以后存储的items总数量</td>\n</tr>\n<tr>\n<td>bytes</td>\n<td>当前服务器存储items占用的字节数</td>\n</tr>\n<tr>\n<td>curr_connections</td>\n<td>当前打开着的连接数</td>\n</tr>\n<tr>\n<td>total_connections</td>\n<td>从服务器启动以后曾经打开过的连接数</td>\n</tr>\n<tr>\n<td>connection_structures</td>\n<td>服务器分配的连接构造数</td>\n</tr>\n<tr>\n<td>cmd_get</td>\n<td>get命令（获取）总请求次数</td>\n</tr>\n<tr>\n<td>cmd_set</td>\n<td>set命令（保存）总请求次数</td>\n</tr>\n<tr>\n<td>get_hits</td>\n<td>总命中次数</td>\n</tr>\n<tr>\n<td>get_misses</td>\n<td>总未命中次数</td>\n</tr>\n<tr>\n<td>evictions</td>\n<td>为获取空闲内存而删除的items数（分配给memcache的空间用满后需要删除旧的items来得到空间分配给新的items）</td>\n</tr>\n<tr>\n<td>bytes_read</td>\n<td>总读取字节数（请求字节数）</td>\n</tr>\n<tr>\n<td>bytes_written</td>\n<td>总发送字节数（结果字节数）</td>\n</tr>\n<tr>\n<td>limit_maxbytes</td>\n<td>分配给memcache的内存大小（字节）</td>\n</tr>\n<tr>\n<td>threads</td>\n<td>当前线程数</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"利用各种监控软件查看（例如：nagios监控memcache的插件）\"><a href=\"#利用各种监控软件查看（例如：nagios监控memcache的插件）\" class=\"headerlink\" title=\"利用各种监控软件查看（例如：nagios监控memcache的插件）\"></a>利用各种监控软件查看（例如：nagios监控memcache的插件）</h3><blockquote>\n<p>只以命中率大于和小于为例两种状态。</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">vim check_memcache</div></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#!/bin/sh</span></div><div class=\"line\"><span class=\"keyword\">if</span> [ <span class=\"variable\">$#</span> <span class=\"_\">-ne</span> 1 ]</div><div class=\"line\"><span class=\"keyword\">then</span></div><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"Usage:<span class=\"variable\">$0</span> -c num2\"</span></div><div class=\"line\"><span class=\"built_in\">exit</span> 0</div><div class=\"line\"><span class=\"keyword\">fi</span></div><div class=\"line\">cmd_get=`/usr/<span class=\"built_in\">local</span>/nagios/libexec/check_tcp -H localhost -p 11211 -E <span class=\"_\">-s</span> <span class=\"string\">'stats\\r\\nquit\\r\\n'</span> <span class=\"_\">-e</span> <span class=\"string\">'uptime'</span> |grep cmd_get | awk <span class=\"string\">'&#123;print $3+0&#125;'</span>`</div><div class=\"line\">get_hits=`/usr/<span class=\"built_in\">local</span>/nagios/libexec/check_tcp -H localhost -p 11211 -E <span class=\"_\">-s</span> <span class=\"string\">'stats\\r\\nquit\\r\\n'</span> <span class=\"_\">-e</span> <span class=\"string\">'uptime'</span> |grep get_hits | awk <span class=\"string\">'&#123;print $3+0&#125;'</span>`</div><div class=\"line\">hit_rate=`<span class=\"built_in\">echo</span> <span class=\"string\">\"<span class=\"variable\">$get_hits</span>*100/<span class=\"variable\">$cmd_get</span>\"</span>|bc`</div><div class=\"line\"><span class=\"keyword\">if</span> [ <span class=\"variable\">$hit_rate</span> <span class=\"_\">-gt</span> <span class=\"variable\">$1</span> ];<span class=\"keyword\">then</span></div><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"OK - hit rate is <span class=\"variable\">$hit_rate</span> | hit_rate=<span class=\"variable\">$hit_rate</span>; cmd_get=<span class=\"variable\">$cmd_get</span>; get_hits=<span class=\"variable\">$get_hits</span>\"</span></div><div class=\"line\"><span class=\"built_in\">exit</span> 0</div><div class=\"line\"><span class=\"keyword\">else</span></div><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"CRITICAL - hit rate is <span class=\"variable\">$hit_rate</span> | hit_rate=<span class=\"variable\">$hit_rate</span>; cmd_get=<span class=\"variable\">$cmd_get</span>; get_hits=<span class=\"variable\">$get_hits</span>\"</span></div><div class=\"line\"><span class=\"built_in\">exit</span> 2</div><div class=\"line\"><span class=\"keyword\">fi</span></div></pre></td></tr></table></figure>\n<p>测试命中率大于80%为正常为例;<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">eg：</div><div class=\"line\">sh check_memcache 80</div><div class=\"line\">root@ip-10-250-114-95:/liang# sh check_memcache 80</div><div class=\"line\">OK - hit rate is 99 | hit_rate=99; cmd_get=142547; get_hits=141880</div></pre></td></tr></table></figure></p>\n<p>以上证明命中率99%，即状态为OK.</p>"}],"PostAsset":[],"PostCategory":[{"post_id":"city8vnmp0005g29fmlbuyz1n","category_id":"city8vnmn0003g29fce6jdlxp","_id":"city8vnmy000bg29fqzoo2cf1"},{"post_id":"city8vnmd0000g29fso95pol1","category_id":"city8vnmn0003g29fce6jdlxp","_id":"city8vnn2000fg29f4n46a1vj"},{"post_id":"city8vnms0007g29fw5py169x","category_id":"city8vnmn0003g29fce6jdlxp","_id":"city8vnn3000ig29fybzly51x"},{"post_id":"city8vnmw000ag29f4sba3c04","category_id":"city8vnmn0003g29fce6jdlxp","_id":"city8vnn6000mg29f7qak67i0"},{"post_id":"city8vnmi0001g29fh2gbrijp","category_id":"city8vnmn0003g29fce6jdlxp","_id":"city8vnn9000og29fxih6z7l7"},{"post_id":"city8vnmo0004g29fp81aufgq","category_id":"city8vnmn0003g29fce6jdlxp","_id":"city8vnnb000sg29fwcwoczv2"},{"post_id":"city8vnmz000cg29f8lcywudu","category_id":"city8vnn5000kg29f9om77ig6","_id":"city8vnnf000vg29f0kr3hv3a"},{"post_id":"city8vnn2000hg29fqmnuqkby","category_id":"city8vnnb000qg29fth0p4gj2","_id":"city8vnnj0011g29fkl57h0fr"},{"post_id":"city8vnne000ug29f0msxum7k","category_id":"city8vnnb000qg29fth0p4gj2","_id":"city8vnnn0016g29fim0gggzo"},{"post_id":"city8vnn4000jg29fkcezm5ot","category_id":"city8vnnf000wg29fh1ajmygp","_id":"city8vnns0019g29ftne54d8e"},{"post_id":"city8vnn7000ng29fcyaa0ky5","category_id":"city8vnnb000qg29fth0p4gj2","_id":"city8vnnw001fg29fqitbylmj"},{"post_id":"city8vnn9000pg29f5lvafcw2","category_id":"city8vnns001ag29fo145rovt","_id":"city8vno2001mg29fg8a2mdbd"},{"post_id":"city8vnnc000tg29ft7uyow6l","category_id":"city8vnny001hg29fzmwzwbpe","_id":"city8vno5001sg29fjlgaimge"},{"post_id":"city8vno3001qg29famitzuye","category_id":"city8vnnf000wg29fh1ajmygp","_id":"city8vno7001wg29fklvnh4pd"},{"post_id":"city8vnng000yg29fp9cpsq10","category_id":"city8vnns001ag29fo145rovt","_id":"city8vno80020g29fitckzndb"},{"post_id":"city8vno4001rg29f5xwpo8yt","category_id":"city8vnnf000wg29fh1ajmygp","_id":"city8vnob0024g29f0c8928tf"},{"post_id":"city8vno6001ug29fvzulx9yv","category_id":"city8vnnf000wg29fh1ajmygp","_id":"city8vnod0027g29f9pj8h07a"},{"post_id":"city8vnnh0010g29f22yypom7","category_id":"city8vnns001ag29fo145rovt","_id":"city8vnof002ag29f5luw5fer"},{"post_id":"city8vno7001yg29fm9nt8hzc","category_id":"city8vnnf000wg29fh1ajmygp","_id":"city8vnoi002eg29fpowmis17"},{"post_id":"city8vno90022g29fi3j9m5bz","category_id":"city8vnns001ag29fo145rovt","_id":"city8vnoj002hg29f5m2huehh"},{"post_id":"city8vnnl0014g29ftayz73qz","category_id":"city8vnns001ag29fo145rovt","_id":"city8vnon002mg29ftpx8v4x6"},{"post_id":"city8vnnp0018g29f8zoh8df4","category_id":"city8vnns001ag29fo145rovt","_id":"city8vnop002og29fekyc5t0v"},{"post_id":"city8vnog002bg29fcr549pnh","category_id":"city8vnmn0003g29fce6jdlxp","_id":"city8vnoq002sg29ffcaxm3tp"},{"post_id":"city8vnoi002fg29fhjweuff5","category_id":"city8vnnb000qg29fth0p4gj2","_id":"city8vnor002ug29fmj3eppqq"},{"post_id":"city8vnnt001bg29fwr6tk3ds","category_id":"city8vnns001ag29fo145rovt","_id":"city8vnos002xg29fmzmgrkky"},{"post_id":"city8vnok002jg29fbyispcqk","category_id":"city8vnns001ag29fo145rovt","_id":"city8vnos002yg29fwbjczsvv"},{"post_id":"city8vnon002ng29flsrxvlbc","category_id":"city8vnom002kg29feq3qvi7p","_id":"city8vnot0031g29fy5j79ehz"},{"post_id":"city8vnnv001dg29fzxgplkef","category_id":"city8vnom002kg29feq3qvi7p","_id":"city8vnot0033g29fo75qt2e6"},{"post_id":"city8vnop002pg29fl6wum9gz","category_id":"city8vnnb000qg29fth0p4gj2","_id":"city8vnou0036g29fglppplz4"},{"post_id":"city8vnnw001gg29fjiltmil0","category_id":"city8vnom002kg29feq3qvi7p","_id":"city8vnou0038g29fuk68bzyl"},{"post_id":"city8vno0001kg29frzlavyp3","category_id":"city8vnom002kg29feq3qvi7p","_id":"city8vnov0039g29f3rhexdv1"},{"post_id":"city8vno2001ng29f1l75qyaz","category_id":"city8vnom002kg29feq3qvi7p","_id":"city8vnov003bg29ffgx8ozbj"},{"post_id":"city8vnod0028g29fl6fun6f2","category_id":"city8vnot0035g29fa76ouwid","_id":"city8vnov003dg29f71lbbyjo"}],"PostTag":[{"post_id":"city8vnmd0000g29fso95pol1","tag_id":"city8vnmk0002g29fmmwd5bvh","_id":"city8vnmw0009g29fdjgi7939"},{"post_id":"city8vnmi0001g29fh2gbrijp","tag_id":"city8vnms0006g29fe3c3kqhr","_id":"city8vnn2000gg29fnhfpp7lj"},{"post_id":"city8vnmo0004g29fp81aufgq","tag_id":"city8vnn1000eg29faafqx45b","_id":"city8vnnh000zg29fbon055w5"},{"post_id":"city8vnmo0004g29fp81aufgq","tag_id":"city8vnn6000lg29ff52q0qxl","_id":"city8vnnj0012g29fggkanal0"},{"post_id":"city8vnmo0004g29fp81aufgq","tag_id":"city8vnnb000rg29f9hi240ts","_id":"city8vnnp0017g29flmel4ofg"},{"post_id":"city8vnmp0005g29fmlbuyz1n","tag_id":"city8vnng000xg29fhmirihxp","_id":"city8vnnw001eg29fh4kobbb6"},{"post_id":"city8vnmp0005g29fmlbuyz1n","tag_id":"city8vnnn0015g29fk2aav5mj","_id":"city8vnny001ig29fe6vmdkei"},{"post_id":"city8vnms0007g29fw5py169x","tag_id":"city8vnnu001cg29fcrj1dv1e","_id":"city8vno1001lg29fg0mpplhr"},{"post_id":"city8vnmw000ag29f4sba3c04","tag_id":"city8vnnz001jg29f42mfwlc4","_id":"city8vno7001xg29fv14onn4j"},{"post_id":"city8vnmw000ag29f4sba3c04","tag_id":"city8vno3001pg29fusrs9mic","_id":"city8vno80021g29f7dioyh83"},{"post_id":"city8vnmz000cg29f8lcywudu","tag_id":"city8vno6001vg29fr1wi8pdg","_id":"city8vnoi002dg29fkxry8pl9"},{"post_id":"city8vnmz000cg29f8lcywudu","tag_id":"city8vnoa0023g29fnrrj82p9","_id":"city8vnoj002gg29fw523monz"},{"post_id":"city8vnn2000hg29fqmnuqkby","tag_id":"city8vnof0029g29fgx87on0r","_id":"city8vnon002lg29fi6ngqgho"},{"post_id":"city8vnn4000jg29fkcezm5ot","tag_id":"city8vnoj002ig29f6ycraigc","_id":"city8vnoq002tg29fcjzjh2k7"},{"post_id":"city8vnn7000ng29fcyaa0ky5","tag_id":"city8vnoq002qg29ftplo9k3n","_id":"city8vnot0032g29f9xe5ksnh"},{"post_id":"city8vnn7000ng29fcyaa0ky5","tag_id":"city8vnor002vg29fvdvwzuk2","_id":"city8vnot0034g29fwdis1mkh"},{"post_id":"city8vnn9000pg29f5lvafcw2","tag_id":"city8vnot0030g29fsub2ujt8","_id":"city8vnov003cg29fw2cl6eup"},{"post_id":"city8vnn9000pg29f5lvafcw2","tag_id":"city8vnou0037g29flfxuk3cy","_id":"city8vnov003eg29fzrz5cpfv"},{"post_id":"city8vnnc000tg29ft7uyow6l","tag_id":"city8vnov003ag29fgfdbe63a","_id":"city8vnow003hg29f3jhlvl4g"},{"post_id":"city8vnnc000tg29ft7uyow6l","tag_id":"city8vnov003fg29flgxfyqmp","_id":"city8vnow003ig29f9jh7n0oi"},{"post_id":"city8vnne000ug29f0msxum7k","tag_id":"city8vnov003gg29fzldz6xun","_id":"city8vnow003kg29fabh70pqk"},{"post_id":"city8vnnh0010g29f22yypom7","tag_id":"city8vnow003jg29fv2duv20q","_id":"city8vnox003mg29f7ty2gp8k"},{"post_id":"city8vnnp0018g29f8zoh8df4","tag_id":"city8vnow003lg29fxve82ywz","_id":"city8vnoy003og29ffs1dkvx0"},{"post_id":"city8vnnt001bg29fwr6tk3ds","tag_id":"city8vnox003ng29fnyrkrpj7","_id":"city8vnoy003qg29fk5ccprrk"},{"post_id":"city8vnnv001dg29fzxgplkef","tag_id":"city8vnoy003pg29fr8cfy0zk","_id":"city8vnoz003sg29f8f3zif2s"},{"post_id":"city8vnnw001gg29fjiltmil0","tag_id":"city8vnoz003rg29fq694v5sg","_id":"city8vnoz003ug29f91bzq8p3"},{"post_id":"city8vno0001kg29frzlavyp3","tag_id":"city8vnoz003tg29ftzy2nvzs","_id":"city8vnp0003wg29f4nu2uw9s"},{"post_id":"city8vno3001qg29famitzuye","tag_id":"city8vnp0003vg29futtmac6t","_id":"city8vnp1003zg29f7pqcqxje"},{"post_id":"city8vno3001qg29famitzuye","tag_id":"city8vnoz003tg29ftzy2nvzs","_id":"city8vnp10040g29f7tq809gf"},{"post_id":"city8vno4001rg29f5xwpo8yt","tag_id":"city8vnp0003vg29futtmac6t","_id":"city8vnp10042g29fnfb08pz4"},{"post_id":"city8vno6001ug29fvzulx9yv","tag_id":"city8vnp10041g29f0o45aenq","_id":"city8vnp10045g29fe19h7na9"},{"post_id":"city8vno6001ug29fvzulx9yv","tag_id":"city8vnp10043g29fwdiqyazz","_id":"city8vnp10046g29fzkvv1pcc"},{"post_id":"city8vno7001yg29fm9nt8hzc","tag_id":"city8vnp10044g29fzmvnjw4p","_id":"city8vnp20049g29fbigj0wud"},{"post_id":"city8vno7001yg29fm9nt8hzc","tag_id":"city8vnp20047g29fa3xk6wod","_id":"city8vnp2004ag29fj2gyw1tv"},{"post_id":"city8vno90022g29fi3j9m5bz","tag_id":"city8vnp20048g29fg9e87m0i","_id":"city8vnp2004cg29f84m1xiyx"},{"post_id":"city8vnob0025g29fju45q3lj","tag_id":"city8vnp2004bg29foayb5h7l","_id":"city8vnp3004eg29fu9gq2jhw"},{"post_id":"city8vnod0028g29fl6fun6f2","tag_id":"city8vnp3004dg29fiztt5h8t","_id":"city8vnp3004hg29fsyo7qutz"},{"post_id":"city8vnod0028g29fl6fun6f2","tag_id":"city8vnp3004fg29fhidednh8","_id":"city8vnp3004ig29f6v94k097"},{"post_id":"city8vnog002bg29fcr549pnh","tag_id":"city8vno3001pg29fusrs9mic","_id":"city8vnp4004kg29fwkmpoxxv"},{"post_id":"city8vnog002bg29fcr549pnh","tag_id":"city8vnp3004gg29f6jf3fvzn","_id":"city8vnp4004lg29fkrg1gqpl"},{"post_id":"city8vnoi002fg29fhjweuff5","tag_id":"city8vnp3004jg29f0nbhmy8v","_id":"city8vnp5004ng29f49d5w5ub"},{"post_id":"city8vnok002jg29fbyispcqk","tag_id":"city8vnp4004mg29f71xzar3k","_id":"city8vnp5004qg29fk5akwwej"},{"post_id":"city8vnok002jg29fbyispcqk","tag_id":"city8vnp5004og29fvv0lsdnr","_id":"city8vnp5004rg29fr43330ot"},{"post_id":"city8vnon002ng29flsrxvlbc","tag_id":"city8vnp5004pg29fh25lp94k","_id":"city8vnp6004tg29fpk903ffu"},{"post_id":"city8vnop002pg29fl6wum9gz","tag_id":"city8vnp5004sg29fujzc31e6","_id":"city8vnp7004wg29fldgzy7qj"},{"post_id":"city8vnop002pg29fl6wum9gz","tag_id":"city8vnp6004ug29f45gebtdz","_id":"city8vnp7004xg29fw29arq09"},{"post_id":"city8vnop002pg29fl6wum9gz","tag_id":"city8vnp6004vg29fyaf24bhs","_id":"city8vnp7004yg29fcqffp24t"}],"Tag":[{"name":"Apache虚拟主机","_id":"city8vnmk0002g29fmmwd5bvh"},{"name":"Apache Apache性能优化","_id":"city8vnms0006g29fe3c3kqhr"},{"name":"FastCGI","_id":"city8vnn1000eg29faafqx45b"},{"name":"CGI","_id":"city8vnn6000lg29ff52q0qxl"},{"name":"Apache&PHP","_id":"city8vnnb000rg29f9hi240ts"},{"name":"Apache分层","_id":"city8vnng000xg29fhmirihxp"},{"name":"Apache模块","_id":"city8vnnn0015g29fk2aav5mj"},{"name":"Apache 监控","_id":"city8vnnu001cg29fcrj1dv1e"},{"name":"Web服务器","_id":"city8vnnz001jg29f42mfwlc4"},{"name":"Apache","_id":"city8vno3001pg29fusrs9mic"},{"name":"git","_id":"city8vno6001vg29fr1wi8pdg"},{"name":"版本控制","_id":"city8vnoa0023g29fnrrj82p9"},{"name":"ElasticSearch","_id":"city8vnof0029g29fgx87on0r"},{"name":"LNMP","_id":"city8vnoj002ig29f6ycraigc"},{"name":"进程管理","_id":"city8vnoq002qg29ftplo9k3n"},{"name":"服务管理","_id":"city8vnor002vg29fvdvwzuk2"},{"name":"MVCC","_id":"city8vnot0030g29fsub2ujt8"},{"name":"多版本并发控制","_id":"city8vnou0037g29flfxuk3cy"},{"name":"Mac","_id":"city8vnov003ag29fgfdbe63a"},{"name":"homebrew","_id":"city8vnov003fg29flgxfyqmp"},{"name":"分布式部署算法","_id":"city8vnov003gg29fzldz6xun"},{"name":"存储引擎","_id":"city8vnow003jg29fv2duv20q"},{"name":"并发控制","_id":"city8vnow003lg29fxve82ywz"},{"name":"MySQL逻辑架构","_id":"city8vnox003ng29fnyrkrpj7"},{"name":"https","_id":"city8vnoy003pg29fr8cfy0zk"},{"name":"虚拟主机","_id":"city8vnoz003rg29fq694v5sg"},{"name":"监控","_id":"city8vnoz003tg29ftzy2nvzs"},{"name":"PHP-FPM","_id":"city8vnp0003vg29futtmac6t"},{"name":"异常处理","_id":"city8vnp10041g29f0o45aenq"},{"name":"错误处理","_id":"city8vnp10043g29fwdiqyazz"},{"name":"PHP扩展","_id":"city8vnp10044g29fzmvnjw4p"},{"name":"phpize","_id":"city8vnp20047g29fa3xk6wod"},{"name":"数据类型","_id":"city8vnp20048g29fg9e87m0i"},{"name":"hexo","_id":"city8vnp2004bg29foayb5h7l"},{"name":"Web","_id":"city8vnp3004dg29fiztt5h8t"},{"name":"性能优化","_id":"city8vnp3004fg29fhidednh8"},{"name":".htaccess","_id":"city8vnp3004gg29f6jf3fvzn"},{"name":"负载均衡","_id":"city8vnp3004jg29f0nbhmy8v"},{"name":"事务","_id":"city8vnp4004mg29f71xzar3k"},{"name":"ACID","_id":"city8vnp5004og29fvv0lsdnr"},{"name":"Nginx安装","_id":"city8vnp5004pg29fh25lp94k"},{"name":"缓存","_id":"city8vnp5004sg29fujzc31e6"},{"name":"memcache","_id":"city8vnp6004ug29f45gebtdz"},{"name":"memcached","_id":"city8vnp6004vg29fyaf24bhs"}]}}